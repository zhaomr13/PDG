%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%AI8_CreatorVersion: 9.0
%%For: (Glen Cowen) (Particle Physics)
%%Title: (chisq.ps)
%%CreationDate: 10/2/01 9:29 AM
%%BoundingBox: -55 -31 254 195
%%HiResBoundingBox: -55 -25.7051 253.2119 194.1001
%%DocumentProcessColors: Black
%%DocumentFonts: NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Roman
%%+ Symbol
%%DocumentNeededFonts: NewCenturySchlbk-Italic
%%+ NewCenturySchlbk-Roman
%%+ Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%AI5_FileFormat 1.1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 61 251.5 61 251.5
%AI3_TileBox: 13 13 600 780
%AI3_DocumentPreview: Header
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -95 203.5 1 755 516 18 0 1 212 105 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:13 13
%%AI3_PaperRect:-13 780 599 -12
%%AI3_Margin:13 -13 -12 12
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_ax neg 0 rmoveto
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: NewCenturySchlbk-Italic
%%IncludeFont: NewCenturySchlbk-Roman
%%IncludeFont: Symbol
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _NewCenturySchlbk-Italic NewCenturySchlbk-Italic
[/_NewCenturySchlbk-Italic/NewCenturySchlbk-Italic 0 0 0 TZ%AI3_EndEncoding TrueType
%AI3_BeginEncoding: _NewCenturySchlbk-Roman NewCenturySchlbk-Roman
[/_NewCenturySchlbk-Roman/NewCenturySchlbk-Roman 0 0 0 TZ%AI3_EndEncoding TrueType
%AI3_BeginEncoding: _Symbol Symbol
[/_Symbol/Symbol 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_Begin_NonPrinting
Np
3 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
0
0
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
1 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k
 0 0.4 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d8.1999 8.1999 m
80.6999 8.1999 L
S8.1999 22.6 m
80.6999 22.6 L
S8.1999 37.0001 m
80.6999 37.0001 L
S8.1999 51.3999 m
80.6999 51.3999 L
S8.1999 65.8 m
80.6999 65.8 L
S8.1999 15.3999 m
80.6999 15.3999 L
S8.1999 29.8 m
80.6999 29.8 L
S8.1999 44.1999 m
80.6999 44.1999 L
S8.1999 58.6 m
80.6999 58.6 L
S8.1999 73.0001 m
80.6999 73.0001 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
Pc
1 1 1 1 k
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
u0 R
0 G
0 J 0 j 0.6 w 4 M []0 d-0.1201 156.5 m
2.2798 155.54 l
4.6802 154.5801 l
6.8398 153.6201 l
9.2402 152.6602 l
11.6401 151.46 l
13.5601 150.5 l
15.48 149.54 l
17.3999 148.5801 l
19.3198 147.6201 l
21 146.6602 l
22.6802 145.7002 l
24.3599 144.7402 l
26.04 144.02 l
27.48 143.0601 l
29.1602 142.1001 l
30.6001 141.1401 l
32.04 140.1802 l
33.48 139.2202 l
34.9199 138.5 l
36.1201 137.54 l
38.52 135.8599 l
40.9199 134.1802 l
43.3198 132.2598 l
45.7202 130.5801 l
47.8799 128.6602 l
49.7998 126.98 l
51.7202 125.2998 l
53.6401 123.6201 l
55.5601 121.9399 l
57.48 120.2598 l
59.1602 118.5801 l
60.8398 116.8999 l
62.2798 115.2202 l
63.96 113.54 l
65.6401 111.8599 l
67.0801 110.1802 l
68.52 108.7402 l
69.7202 107.0601 l
71.1602 105.3799 l
72.6001 103.7002 l
75 100.5801 l
77.3999 97.46 l
79.7998 94.3398 l
81.96 90.98 l
84.3599 87.8599 l
86.2798 84.7402 l
88.2002 81.6201 l
90.1201 78.5 l
92.04 75.3799 l
93.96 72.2598 l
95.6401 69.1401 l
97.0801 66.2598 l
98.7598 63.1401 l
100.4399 60.02 l
101.8799 56.8999 l
103.3198 54.02 l
104.7598 50.8999 l
106.2002 48.02 l
107.6401 44.8999 l
108.8398 41.7798 l
110.2798 38.8999 l
111.48 35.7798 l
112.6802 32.8999 l
113.8799 29.7798 l
115.0801 26.8999 l
116.2798 24.02 l
117.48 20.8999 l
118.4399 18.02 l
119.6401 15.1401 l
120.6001 12.02 l
123.2402 4.8198 l
124.6802 -0.2202 l
SUu0 To
1 0 0 1 -3.1602 -11 0 Tp
TP
0 Tr
0 O
0 g
1 w/_NewCenturySchlbk-Roman 10 Tf
0 Ts
100 Tz
0 Tt
0 TA
%_ 0 XL
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 1 2 2 99 Th
0 Tq
10.22 0 Tl
0 Tc
0 Tw
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 33.3198 -11 0 Tp
TP
0 Tr
(2) Tx 
(\r) TX 
TO
0 To
1 0 0 1 54.6802 -11 0 Tp
TP
0 Tr
(3) Tx 
(\r) TX 
TO
0 To
1 0 0 1 69.5601 -11 0 Tp
TP
0 Tr
(4) Tx 
(\r) TX 
TO
0 To
1 0 0 1 81.3198 -11 0 Tp
TP
0 Tr
(5) Tx 
(\r) TX 
TO
0 To
1 0 0 1 99.0801 -11 0 Tp
TP
0 Tr
(7) Tx 
(\r) TX 
TO
0 To
1 0 0 1 114.4399 -11 0 Tp
TP
0 Tr
(10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 150.9199 -11 0 Tp
TP
0 Tr
(20) Tx 
(\r) TX 
TO
0 To
1 0 0 1 172.04 -11 0 Tp
TP
0 Tr
(30) Tx 
(\r) TX 
TO
0 To
1 0 0 1 187.1602 -11 0 Tp
TP
0 Tr
(40) Tx 
(\r) TX 
TO
0 To
1 0 0 1 200.6699 -11 0 Tp
TP
0 Tr
(50) Tx 
(\r) TX 
TO
0 To
1 0 0 1 217.6802 -11 0 Tp
TP
0 Tr
(70) Tx 
(\r) TX 
TO
0 To
1 0 0 1 233.29 -11 0 Tp
TP
0 Tr
(100) Tx 
(\r) TX 
TO
Uu0 To
1 0 0 1 -26.9399 -3.8198 0 Tp
TP
0 Tr
(0.001) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 15.1401 0 Tp
TP
0 Tr
(0.002) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 40.1001 0 Tp
TP
0 Tr
(0.005) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 58.8198 0 Tp
TP
0 Tr
(0.010) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 77.7798 0 Tp
TP
0 Tr
(0.020) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 102.7402 0 Tp
TP
0 Tr
(0.050) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 121.46 0 Tp
TP
0 Tr
(0.100) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 140.4199 0 Tp
TP
0 Tr
(0.200) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 165.3799 0 Tp
TP
0 Tr
(0.500) Tx 
(\r) TX 
TO
0 To
1 0 0 1 -26.9399 184.1001 0 Tp
TP
0 Tr
(1.000) Tx 
(\r) TX 
TO
Uu0 R
0 G
0.6 w-0.1201 174.2598 m
2.2798 173.54 l
4.4399 172.8198 l
6.8398 172.3398 l
9.2402 171.6201 l
11.6401 170.8999 l
13.5601 170.1802 l
15.48 169.46 l
17.3999 168.7402 l
19.3198 168.02 l
21 167.2998 l
22.6802 166.8198 l
24.3599 166.1001 l
26.04 165.3799 l
27.48 164.6602 l
29.1602 163.9399 l
30.6001 163.46 l
32.04 162.7402 l
33.48 162.02 l
34.9199 161.2998 l
36.1201 160.5801 l
38.52 159.3799 l
40.9199 157.9399 l
43.3198 156.7402 l
45.7202 155.2998 l
47.8799 153.8599 l
49.7998 152.4199 l
51.7202 151.2202 l
53.6401 149.7798 l
55.5601 148.3398 l
57.48 146.8999 l
59.1602 145.7002 l
60.8398 144.2598 l
62.2798 143.0601 l
63.96 141.6201 l
65.6401 140.1802 l
67.0801 138.98 l
68.52 137.54 l
69.7202 136.1001 l
71.1602 134.6602 l
72.6001 133.46 l
75 130.8198 l
77.3999 128.1802 l
79.7998 125.2998 l
81.96 122.6602 l
84.3599 119.7798 l
86.2798 117.1401 l
88.2002 114.5 l
90.1201 111.6201 l
92.04 108.98 l
93.96 106.1001 l
95.6401 103.46 l
97.0801 100.8198 l
98.7598 98.1802 l
100.4399 95.2998 l
101.8799 92.6602 l
103.3198 89.7798 l
104.7598 87.1401 l
106.2002 84.5 l
107.6401 81.6201 l
108.8398 78.98 l
110.2798 76.3398 l
111.48 73.46 l
112.6802 70.8198 l
113.8799 68.1802 l
115.0801 65.2998 l
116.2798 62.6602 l
117.48 60.02 l
118.4399 57.1401 l
119.6401 54.5 l
120.6001 51.8599 l
123.2402 45.1401 l
125.6401 38.1802 l
127.7998 31.46 l
130.2002 24.5 l
132.3599 17.7798 l
134.52 11.0601 l
136.4399 4.3398 l
137.6401 -0.2202 l
SUu-0.1201 181.7002 m
2.2798 181.46 l
4.4399 180.98 l
6.8398 180.5 l
9.2402 180.02 l
11.6401 179.54 l
13.5601 179.2998 l
15.48 178.8198 l
17.3999 178.3398 l
19.3198 177.8599 l
21 177.3799 l
22.6802 176.8999 l
24.3599 176.4199 l
26.04 175.9399 l
27.48 175.46 l
29.1602 174.98 l
30.6001 174.5 l
32.04 174.02 l
33.48 173.54 l
34.9199 173.0601 l
36.1201 172.5801 l
38.52 171.6201 l
40.9199 170.6602 l
43.3198 169.7002 l
45.7202 168.7402 l
47.8799 167.54 l
49.7998 166.5801 l
51.7202 165.6201 l
53.6401 164.4199 l
55.5601 163.46 l
57.48 162.2598 l
59.1602 161.2998 l
60.8398 160.1001 l
62.2798 159.1401 l
63.96 157.9399 l
65.6401 156.7402 l
67.0801 155.7798 l
68.52 154.8198 l
69.7202 153.6201 l
71.1602 152.4199 l
72.6001 151.2202 l
75 149.0601 l
77.3999 146.8999 l
79.7998 144.5 l
81.96 142.3398 l
84.3599 139.9399 l
86.2798 137.54 l
88.2002 135.3799 l
90.1201 132.98 l
92.04 130.5801 l
93.96 128.1802 l
95.6401 125.7798 l
97.0801 123.3799 l
98.7598 120.98 l
100.4399 118.5801 l
101.8799 116.1802 l
103.3198 113.7798 l
104.7598 111.3799 l
106.2002 108.98 l
107.6401 106.5801 l
108.8398 103.9399 l
110.2798 101.54 l
111.48 99.1401 l
112.6802 96.7402 l
113.8799 94.1001 l
115.0801 91.7002 l
116.2798 89.2998 l
117.48 86.8999 l
118.4399 84.2598 l
119.6401 81.8599 l
120.6001 79.46 l
123.2402 73.2202 l
125.6401 66.98 l
127.7998 60.5 l
130.2002 54.2598 l
132.3599 48.02 l
134.52 41.54 l
136.4399 35.2998 l
138.3599 28.8198 l
140.2798 22.5801 l
141.96 16.1001 l
143.6401 9.6201 l
145.3198 3.3799 l
146.04 -0.2202 l
SUu-0.1201 185.2998 m
2.2798 185.0601 l
4.4399 184.8198 l
6.8398 184.5801 l
9.2402 184.3398 l
11.6401 184.1001 l
13.5601 183.8599 l
15.48 183.3799 l
17.3999 183.1401 l
19.3198 182.8999 l
21 182.6602 l
22.6802 182.4199 l
24.3599 181.9399 l
26.04 181.7002 l
27.48 181.46 l
29.1602 180.98 l
30.6001 180.7402 l
32.04 180.5 l
33.48 180.02 l
34.9199 179.7798 l
36.1201 179.54 l
38.52 178.8198 l
40.9199 178.1001 l
43.3198 177.3799 l
45.48 176.6602 l
47.8799 175.9399 l
49.7998 175.2202 l
51.7202 174.5 l
53.6401 173.54 l
55.5601 172.8198 l
57.48 171.8599 l
59.1602 171.1401 l
60.8398 170.1802 l
62.2798 169.46 l
63.96 168.5 l
65.6401 167.7798 l
67.0801 166.8198 l
68.52 166.1001 l
69.7202 165.1401 l
71.1602 164.1802 l
72.6001 163.2202 l
75 161.54 l
77.3999 159.6201 l
79.7998 157.7002 l
81.96 155.7798 l
84.3599 153.8599 l
86.2798 151.9399 l
88.2002 150.02 l
90.1201 148.1001 l
92.04 145.9399 l
93.96 143.7798 l
95.6401 141.8599 l
97.0801 139.7002 l
98.7598 137.7798 l
100.4399 135.6201 l
101.8799 133.46 l
103.3198 131.2998 l
104.7598 129.1401 l
106.2002 127.2202 l
107.6401 125.0601 l
108.8398 122.6602 l
110.2798 120.5 l
111.48 118.3398 l
112.6802 116.1802 l
113.8799 114.02 l
115.0801 111.8599 l
116.2798 109.46 l
117.48 107.2998 l
118.4399 105.1401 l
119.6401 102.7402 l
120.6001 100.5801 l
123.2402 94.8198 l
125.6401 89.0601 l
128.04 83.2998 l
130.2002 77.54 l
132.3599 71.7798 l
134.52 65.7798 l
136.4399 59.7798 l
138.3599 54.02 l
140.2798 48.02 l
141.96 42.02 l
143.6401 36.02 l
145.3198 30.02 l
146.7598 23.7798 l
148.4399 17.7798 l
150.1201 11.7798 l
151.5601 5.54 l
152.7598 -0.2202 l
SUu-0.1201 187.46 m
2.2798 187.2202 l
4.4399 187.2202 l
6.8398 187.2202 l
9.2402 187.2202 l
11.6401 186.98 l
13.5601 186.98 l
15.48 186.98 l
17.3999 186.7402 l
19.3198 186.7402 l
21 186.7402 l
22.6802 186.5 l
24.3599 186.5 l
26.04 186.2598 l
27.48 186.2598 l
29.1602 186.02 l
30.6001 186.02 l
32.04 186.02 l
33.48 185.7798 l
34.9199 185.54 l
36.1201 185.54 l
38.52 185.2998 l
40.9199 185.0601 l
43.3198 184.5801 l
45.48 184.3398 l
47.8799 183.8599 l
49.7998 183.6201 l
51.7202 183.3799 l
53.6401 182.8999 l
55.5601 182.4199 l
57.48 181.9399 l
59.1602 181.7002 l
60.8398 181.2202 l
62.2798 180.7402 l
63.96 180.2598 l
65.6401 179.7798 l
67.0801 179.2998 l
68.2798 178.8198 l
69.7202 178.3398 l
71.1602 177.6201 l
72.6001 177.1401 l
75 176.1802 l
77.3999 174.98 l
79.7998 173.7798 l
81.96 172.5801 l
84.3599 171.1401 l
86.2798 169.9399 l
88.2002 168.7402 l
90.1201 167.2998 l
92.04 165.8599 l
93.96 164.4199 l
95.6401 162.98 l
97.0801 161.54 l
98.7598 160.1001 l
100.4399 158.4199 l
101.8799 156.7402 l
103.3198 155.2998 l
104.7598 153.6201 l
106.2002 152.1802 l
107.6401 150.5 l
108.8398 148.8198 l
110.2798 147.1401 l
111.48 145.46 l
112.6802 143.54 l
113.8799 141.8599 l
115.0801 140.1802 l
116.2798 138.5 l
117.48 136.5801 l
118.4399 134.8999 l
119.6401 132.98 l
120.6001 131.0601 l
123.2402 126.5 l
125.6401 121.7002 l
128.04 116.8999 l
130.2002 112.1001 l
132.3599 107.2998 l
134.52 102.2598 l
136.4399 97.2202 l
138.3599 91.9399 l
140.2798 86.8999 l
141.96 81.6201 l
143.6401 76.3398 l
145.3198 71.0601 l
147 65.7798 l
148.4399 60.5 l
150.1201 54.98 l
151.5601 49.7002 l
153 44.1802 l
154.4399 38.6602 l
155.6401 33.1401 l
157.0801 27.6201 l
159.7202 16.3398 l
162.1201 4.8198 l
163.0801 -0.2202 l
SUu-0.1201 187.7002 m
2.2798 187.7002 l
4.4399 187.7002 l
6.8398 187.7002 l
9.2402 187.7002 l
11.6401 187.7002 l
13.5601 187.7002 l
15.48 187.7002 l
17.3999 187.7002 l
19.3198 187.7002 l
21 187.7002 l
22.6802 187.46 l
24.3599 187.46 l
26.04 187.46 l
27.48 187.46 l
29.1602 187.46 l
30.6001 187.46 l
32.04 187.46 l
33.48 187.46 l
34.9199 187.2202 l
36.1201 187.2202 l
38.52 187.2202 l
40.9199 186.98 l
43.3198 186.98 l
45.48 186.7402 l
47.8799 186.7402 l
49.7998 186.5 l
51.7202 186.5 l
53.6401 186.2598 l
55.5601 186.02 l
57.48 186.02 l
59.1602 185.7798 l
60.6001 185.54 l
62.2798 185.2998 l
63.96 185.0601 l
65.6401 184.8198 l
67.0801 184.5801 l
68.2798 184.3398 l
69.7202 184.1001 l
71.1602 183.8599 l
72.6001 183.6201 l
75 183.1401 l
77.3999 182.4199 l
79.5601 181.7002 l
81.96 180.98 l
84.3599 180.2598 l
86.2798 179.54 l
88.2002 178.8198 l
90.1201 177.8599 l
92.04 176.8999 l
93.96 175.9399 l
95.3999 174.98 l
97.0801 174.02 l
98.7598 173.0601 l
100.4399 171.8599 l
101.8799 170.8999 l
103.3198 169.7002 l
104.7598 168.7402 l
106.2002 167.54 l
107.6401 166.3398 l
108.8398 165.1401 l
110.2798 163.7002 l
111.48 162.5 l
112.6802 161.2998 l
113.8799 159.8599 l
115.0801 158.6602 l
116.2798 157.2202 l
117.48 156.02 l
118.4399 154.5801 l
119.6401 153.1401 l
120.6001 151.7002 l
123.2402 147.8599 l
125.6401 144.2598 l
128.04 140.1802 l
130.2002 136.3398 l
132.3599 132.2598 l
134.52 128.1802 l
136.4399 123.8599 l
138.3599 119.54 l
140.2798 115.2202 l
141.96 110.8999 l
143.6401 106.3398 l
145.3198 101.7798 l
147 96.98 l
148.4399 92.4199 l
150.1201 87.8599 l
151.5601 82.8198 l
153 78.02 l
154.4399 73.2202 l
155.6401 68.4199 l
157.0801 63.3799 l
159.7202 53.2998 l
162.1201 42.98 l
164.2798 32.6602 l
166.6802 22.3398 l
168.6001 11.7798 l
170.7598 0.98 l
171 -0.2202 l
SUu-0.1201 187.7002 m
2.2798 187.7002 l
4.4399 187.7002 l
6.8398 187.7002 l
9.2402 187.7002 l
11.6401 187.7002 l
13.5601 187.7002 l
15.48 187.7002 l
17.3999 187.7002 l
19.3198 187.7002 l
21 187.7002 l
22.6802 187.7002 l
24.3599 187.7002 l
26.04 187.7002 l
27.48 187.7002 l
29.1602 187.7002 l
30.6001 187.7002 l
32.04 187.7002 l
33.48 187.7002 l
34.9199 187.7002 l
36.1201 187.7002 l
38.52 187.7002 l
40.9199 187.7002 l
43.3198 187.7002 l
45.48 187.46 l
47.8799 187.46 l
49.7998 187.46 l
51.7202 187.46 l
53.6401 187.46 l
55.5601 187.46 l
57.48 187.2202 l
59.1602 187.2202 l
60.6001 187.2202 l
62.2798 186.98 l
63.96 186.98 l
65.6401 186.98 l
67.0801 186.7402 l
68.2798 186.7402 l
69.7202 186.5 l
71.1602 186.5 l
72.6001 186.2598 l
75 186.02 l
77.1602 185.7798 l
79.5601 185.54 l
81.96 185.0601 l
84.3599 184.5801 l
86.2798 184.3398 l
88.2002 183.8599 l
90.1201 183.3799 l
92.04 182.8999 l
93.96 182.1802 l
95.3999 181.7002 l
97.0801 180.98 l
98.7598 180.5 l
100.4399 179.7798 l
101.8799 179.0601 l
103.3198 178.3398 l
104.7598 177.6201 l
106.2002 176.8999 l
107.6401 175.9399 l
108.8398 175.2202 l
110.2798 174.2598 l
111.48 173.2998 l
112.6802 172.5801 l
113.8799 171.6201 l
115.0801 170.6602 l
116.2798 169.7002 l
117.48 168.7402 l
118.4399 167.54 l
119.6401 166.5801 l
120.6001 165.3799 l
123.2402 162.7402 l
125.6401 159.8599 l
128.04 156.7402 l
130.2002 153.6201 l
132.3599 150.5 l
134.52 147.1401 l
136.6802 143.54 l
138.3599 139.9399 l
140.2798 136.3398 l
141.96 132.7402 l
143.6401 128.8999 l
145.3198 124.8198 l
147 120.98 l
148.4399 116.8999 l
150.1201 113.0601 l
151.5601 108.7402 l
153 104.6602 l
154.4399 100.3398 l
155.6401 96.02 l
157.0801 91.7002 l
159.7202 82.5801 l
162.1201 73.2202 l
164.52 64.1001 l
166.6802 54.7402 l
168.6001 45.3799 l
170.7598 35.54 l
172.9199 25.7002 l
174.8398 15.6201 l
176.52 5.7798 l
177.48 -0.2202 l
SUu62.2798 187.7002 m
63.96 187.7002 l
65.6401 187.7002 l
67.0801 187.7002 l
68.2798 187.7002 l
69.7202 187.7002 l
71.1602 187.7002 l
72.6001 187.7002 l
75 187.7002 l
77.1602 187.7002 l
79.5601 187.7002 l
81.96 187.7002 l
84.3599 187.46 l
86.2798 187.46 l
88.2002 187.46 l
90.1201 187.46 l
92.04 187.2202 l
93.96 187.2202 l
95.3999 187.2202 l
97.0801 186.98 l
98.7598 186.98 l
100.2002 186.7402 l
101.8799 186.5 l
103.3198 186.5 l
104.7598 186.2598 l
106.2002 186.02 l
107.6401 185.7798 l
108.8398 185.54 l
110.2798 185.2998 l
111.48 185.0601 l
112.6802 184.8198 l
113.8799 184.5801 l
115.0801 184.3398 l
116.2798 183.8599 l
117.2402 183.6201 l
118.4399 183.1401 l
119.6401 182.8999 l
120.6001 182.4199 l
123.2402 181.2202 l
125.3999 180.02 l
127.7998 178.5801 l
130.2002 177.1401 l
132.3599 175.7002 l
134.52 174.02 l
136.4399 172.3398 l
138.3599 170.4199 l
140.2798 168.2598 l
141.96 166.1001 l
143.6401 163.9399 l
145.3198 161.54 l
147 159.1401 l
148.4399 156.5 l
150.1201 154.1001 l
151.5601 151.46 l
153 148.5801 l
154.4399 145.7002 l
155.6401 142.8198 l
157.0801 139.9399 l
159.7202 133.2202 l
162.1201 126.7402 l
164.52 119.7798 l
166.6802 113.0601 l
168.6001 106.3398 l
171 98.6602 l
172.9199 90.7402 l
174.8398 83.0601 l
176.52 75.1401 l
178.2002 67.2202 l
180.1201 58.8198 l
181.5601 50.1802 l
183.2402 41.54 l
184.9199 32.8999 l
186.3599 24.2598 l
187.7998 15.1401 l
189.2402 6.02 l
190.2002 -0.2202 l
SUu-0.1201 187.7002 m
2.2798 187.7002 l
4.4399 187.7002 l
6.8398 187.7002 l
9.2402 187.7002 l
11.6401 187.7002 l
13.5601 187.7002 l
15.48 187.7002 l
17.3999 187.7002 l
19.3198 187.7002 l
21 187.7002 l
22.6802 187.7002 l
24.3599 187.7002 l
26.04 187.7002 l
27.48 187.7002 l
29.1602 187.7002 l
30.6001 187.7002 l
32.04 187.7002 l
33.48 187.7002 l
34.9199 187.7002 l
36.1201 187.7002 l
38.52 187.7002 l
40.9199 187.7002 l
43.3198 187.7002 l
45.48 187.7002 l
47.8799 187.7002 l
49.7998 187.7002 l
51.7202 187.7002 l
53.6401 187.7002 l
55.5601 187.7002 l
57.48 187.7002 l
59.1602 187.7002 l
60.6001 187.7002 l
62.2798 187.7002 l
63.96 187.7002 l
65.6401 187.7002 l
67.0801 187.7002 l
68.2798 187.7002 l
69.7202 187.7002 l
71.1602 187.7002 l
72.6001 187.7002 l
75 187.7002 l
77.1602 187.7002 l
79.5601 187.7002 l
81.96 187.7002 l
84.3599 187.7002 l
86.2798 187.7002 l
88.2002 187.7002 l
90.1201 187.7002 l
92.04 187.7002 l
93.96 187.7002 l
95.3999 187.7002 l
97.0801 187.7002 l
98.7598 187.7002 l
100.2002 187.7002 l
101.8799 187.7002 l
103.3198 187.7002 l
104.7598 187.7002 l
106.2002 187.7002 l
107.6401 187.7002 l
108.8398 187.46 l
110.2798 187.46 l
111.48 187.46 l
112.6802 187.46 l
113.8799 187.46 l
115.0801 187.2202 l
116.2798 187.2202 l
117.2402 187.2202 l
118.4399 186.98 l
119.6401 186.98 l
120.6001 186.98 l
123 186.7402 l
125.3999 186.2598 l
127.7998 185.7798 l
129.96 185.2998 l
132.3599 184.8198 l
134.2798 184.3398 l
136.2002 183.6201 l
138.1201 182.8999 l
140.04 181.9399 l
141.96 180.98 l
143.6401 179.7798 l
145.3198 178.5801 l
147 177.3799 l
148.4399 176.1802 l
150.1201 174.7402 l
151.5601 173.2998 l
153 171.6201 l
154.4399 169.9399 l
155.6401 168.2598 l
157.0801 166.5801 l
159.7202 162.2598 l
162.3599 157.9399 l
164.52 153.3799 l
166.6802 148.8198 l
168.6001 144.2598 l
171 138.5 l
173.1602 132.98 l
174.8398 126.98 l
176.7598 121.2202 l
178.2002 115.46 l
180.1201 108.7402 l
181.7998 101.7798 l
183.2402 95.0601 l
184.9199 88.3398 l
186.3599 81.6201 l
188.04 73.9399 l
189.48 66.5 l
190.6802 58.8198 l
192.1201 51.1401 l
193.3198 43.7002 l
196.2002 26.6602 l
198.6001 9.8599 l
200.04 -0.2202 l
SUu-0.1201 187.7002 m
2.7598 187.7002 l
5.6401 187.7002 l
8.52 187.7002 l
11.6401 187.7002 l
14.04 187.7002 l
16.4399 187.7002 l
18.8398 187.7002 l
21 187.7002 l
23.1602 187.7002 l
25.0801 187.7002 l
27.2402 187.7002 l
29.1602 187.7002 l
30.8398 187.7002 l
32.7598 187.7002 l
34.4399 187.7002 l
36.1201 187.7002 l
39.2402 187.7002 l
42.1201 187.7002 l
45 187.7002 l
47.8799 187.7002 l
50.2798 187.7002 l
52.6802 187.7002 l
55.0801 187.7002 l
57.48 187.7002 l
59.3999 187.7002 l
61.5601 187.7002 l
63.48 187.7002 l
65.6401 187.7002 l
67.3198 187.7002 l
69 187.7002 l
70.9199 187.7002 l
72.6001 187.7002 l
75.48 187.7002 l
78.3599 187.7002 l
81.2402 187.7002 l
84.3599 187.7002 l
86.7598 187.7002 l
89.1602 187.7002 l
91.5601 187.7002 l
93.96 187.7002 l
95.8799 187.7002 l
97.7998 187.7002 l
99.96 187.7002 l
101.8799 187.7002 l
103.7998 187.7002 l
105.48 187.7002 l
107.1602 187.7002 l
108.8398 187.7002 l
110.52 187.7002 l
111.96 187.7002 l
113.6401 187.7002 l
115.0801 187.7002 l
116.52 187.7002 l
117.96 187.7002 l
119.1602 187.7002 l
120.6001 187.7002 l
123.48 187.7002 l
126.6001 187.46 l
129.48 187.46 l
132.3599 187.2202 l
134.7598 187.2202 l
137.1602 186.98 l
139.5601 186.5 l
141.96 186.2598 l
143.8799 185.7798 l
146.04 185.0601 l
147.96 184.5801 l
150.1201 183.8599 l
151.7998 182.8999 l
153.7202 181.9399 l
155.3999 180.98 l
157.0801 179.7798 l
160.4399 177.1401 l
163.3198 174.02 l
166.2002 170.4199 l
168.6001 166.8198 l
171.7202 162.2598 l
174.1201 157.2202 l
176.2798 152.1802 l
178.2002 147.1401 l
180.6001 140.8999 l
182.52 134.4199 l
184.4399 128.1802 l
186.3599 121.7002 l
188.2798 114.2598 l
190.2002 106.8198 l
191.8799 99.1401 l
193.3198 91.7002 l
196.6802 73.9399 l
199.7998 56.1802 l
202.4399 38.4199 l
205.0801 20.4199 l
207.96 0.02 l
207.96 -0.2202 l
SUu-0.1201 187.7002 m
2.7598 187.7002 l
5.6401 187.7002 l
8.52 187.7002 l
11.6401 187.7002 l
14.04 187.7002 l
16.4399 187.7002 l
18.8398 187.7002 l
21 187.7002 l
23.1602 187.7002 l
25.0801 187.7002 l
27.2402 187.7002 l
29.1602 187.7002 l
30.8398 187.7002 l
32.7598 187.7002 l
34.4399 187.7002 l
36.1201 187.7002 l
39.2402 187.7002 l
42.1201 187.7002 l
45 187.7002 l
47.8799 187.7002 l
50.2798 187.7002 l
52.6802 187.7002 l
55.0801 187.7002 l
57.48 187.7002 l
59.3999 187.7002 l
61.5601 187.7002 l
63.48 187.7002 l
65.6401 187.7002 l
67.3198 187.7002 l
69 187.7002 l
70.9199 187.7002 l
72.6001 187.7002 l
75.48 187.7002 l
78.3599 187.7002 l
81.2402 187.7002 l
84.3599 187.7002 l
86.7598 187.7002 l
89.1602 187.7002 l
91.5601 187.7002 l
93.96 187.7002 l
95.8799 187.7002 l
97.7998 187.7002 l
99.96 187.7002 l
101.8799 187.7002 l
103.7998 187.7002 l
105.48 187.7002 l
107.1602 187.7002 l
108.8398 187.7002 l
110.52 187.7002 l
111.96 187.7002 l
113.6401 187.7002 l
115.0801 187.7002 l
116.52 187.7002 l
117.96 187.7002 l
119.1602 187.7002 l
120.6001 187.7002 l
123.48 187.7002 l
126.6001 187.7002 l
129.48 187.7002 l
132.3599 187.7002 l
134.7598 187.7002 l
137.1602 187.7002 l
139.5601 187.7002 l
141.96 187.46 l
143.8799 187.46 l
146.04 187.2202 l
147.96 186.98 l
150.1201 186.7402 l
151.7998 186.5 l
153.48 186.2598 l
155.1602 185.7798 l
157.0801 185.2998 l
160.2002 184.3398 l
163.0801 182.8999 l
165.96 180.98 l
168.6001 179.0601 l
171.7202 176.4199 l
174.1201 173.54 l
176.2798 170.4199 l
178.2002 167.0601 l
180.6001 162.7402 l
182.52 158.1802 l
184.4399 153.8599 l
186.3599 149.2998 l
188.52 143.54 l
190.2002 138.02 l
191.8799 132.2598 l
193.3198 126.5 l
196.9199 112.1001 l
199.7998 97.46 l
202.6802 83.0601 l
205.0801 68.4199 l
207.96 50.6602 l
210.3599 33.1401 l
212.52 15.3799 l
214.4399 -0.2202 l
SUu-0.1201 187.7002 m
2.7598 187.7002 l
5.6401 187.7002 l
8.52 187.7002 l
11.6401 187.7002 l
14.04 187.7002 l
16.4399 187.7002 l
18.8398 187.7002 l
21 187.7002 l
23.1602 187.7002 l
25.0801 187.7002 l
27.2402 187.7002 l
29.1602 187.7002 l
30.8398 187.7002 l
32.7598 187.7002 l
34.4399 187.7002 l
36.1201 187.7002 l
39.2402 187.7002 l
42.1201 187.7002 l
45 187.7002 l
47.8799 187.7002 l
50.2798 187.7002 l
52.6802 187.7002 l
55.0801 187.7002 l
57.48 187.7002 l
59.3999 187.7002 l
61.5601 187.7002 l
63.48 187.7002 l
65.6401 187.7002 l
67.3198 187.7002 l
69 187.7002 l
70.9199 187.7002 l
72.6001 187.7002 l
75.48 187.7002 l
78.3599 187.7002 l
81.2402 187.7002 l
84.3599 187.7002 l
86.7598 187.7002 l
89.1602 187.7002 l
91.5601 187.7002 l
93.96 187.7002 l
95.8799 187.7002 l
97.7998 187.7002 l
99.96 187.7002 l
101.8799 187.7002 l
103.7998 187.7002 l
105.48 187.7002 l
107.1602 187.7002 l
108.8398 187.7002 l
110.52 187.7002 l
111.96 187.7002 l
113.6401 187.7002 l
115.0801 187.7002 l
116.52 187.7002 l
117.96 187.7002 l
119.1602 187.7002 l
120.6001 187.7002 l
123.48 187.7002 l
126.6001 187.7002 l
129.48 187.7002 l
132.3599 187.7002 l
134.7598 187.7002 l
137.1602 187.7002 l
139.5601 187.7002 l
141.96 187.7002 l
143.8799 187.7002 l
146.04 187.7002 l
147.96 187.7002 l
150.1201 187.7002 l
151.7998 187.7002 l
153.48 187.7002 l
155.1602 187.7002 l
157.0801 187.7002 l
159.96 187.7002 l
162.8398 187.46 l
165.7202 187.2202 l
168.6001 186.98 l
171.2402 186.5 l
173.6401 186.02 l
176.04 185.0601 l
178.2002 184.1001 l
180.6001 182.8999 l
182.52 181.46 l
184.4399 179.54 l
186.3599 177.8599 l
188.52 175.46 l
190.2002 172.8198 l
191.8799 170.1802 l
193.3198 167.2998 l
197.1602 159.1401 l
200.2798 150.5 l
202.6802 141.8599 l
205.0801 132.98 l
207.96 120.7402 l
210.6001 108.5 l
212.7598 96.2598 l
214.6802 83.7798 l
216.8398 68.6602 l
219 53.2998 l
220.9199 38.1802 l
222.8398 22.8198 l
224.52 5.2998 l
225.2402 -0.2202 l
SUu-0.1201 187.7002 m
2.7598 187.7002 l
5.6401 187.7002 l
8.52 187.7002 l
11.6401 187.7002 l
14.04 187.7002 l
16.4399 187.7002 l
18.8398 187.7002 l
21 187.7002 l
23.1602 187.7002 l
25.0801 187.7002 l
27.2402 187.7002 l
29.1602 187.7002 l
30.8398 187.7002 l
32.7598 187.7002 l
34.4399 187.7002 l
36.1201 187.7002 l
39.2402 187.7002 l
42.1201 187.7002 l
45 187.7002 l
47.8799 187.7002 l
50.2798 187.7002 l
52.6802 187.7002 l
55.0801 187.7002 l
57.48 187.7002 l
59.3999 187.7002 l
61.5601 187.7002 l
63.48 187.7002 l
65.6401 187.7002 l
67.3198 187.7002 l
69 187.7002 l
70.9199 187.7002 l
72.6001 187.7002 l
75.48 187.7002 l
78.3599 187.7002 l
81.2402 187.7002 l
84.3599 187.7002 l
86.7598 187.7002 l
89.1602 187.7002 l
91.5601 187.7002 l
93.96 187.7002 l
95.8799 187.7002 l
97.7998 187.7002 l
99.96 187.7002 l
101.8799 187.7002 l
103.7998 187.7002 l
105.48 187.7002 l
107.1602 187.7002 l
108.8398 187.7002 l
110.52 187.7002 l
111.96 187.7002 l
113.6401 187.7002 l
115.0801 187.7002 l
116.52 187.7002 l
117.96 187.7002 l
119.1602 187.7002 l
120.6001 187.7002 l
123.48 187.7002 l
126.6001 187.7002 l
129.48 187.7002 l
132.3599 187.7002 l
134.7598 187.7002 l
137.1602 187.7002 l
139.5601 187.7002 l
141.96 187.7002 l
143.8799 187.7002 l
146.04 187.7002 l
147.96 187.7002 l
150.1201 187.7002 l
151.7998 187.7002 l
153.48 187.7002 l
155.1602 187.7002 l
157.0801 187.7002 l
159.96 187.7002 l
162.8398 187.7002 l
165.7202 187.7002 l
168.6001 187.7002 l
171 187.7002 l
173.3999 187.7002 l
175.7998 187.46 l
178.2002 187.46 l
180.3599 187.2202 l
182.2798 186.98 l
184.4399 186.7402 l
186.3599 186.2598 l
188.2798 185.7798 l
189.96 185.0601 l
191.6401 184.1001 l
193.3198 183.1401 l
197.1602 180.2598 l
200.2798 176.1802 l
202.6802 171.8599 l
205.0801 167.54 l
208.4399 160.3398 l
210.8398 152.8999 l
212.7598 145.2202 l
214.6802 137.54 l
217.0801 126.7402 l
219 115.9399 l
220.9199 105.3799 l
222.8398 94.5801 l
224.7598 81.1401 l
226.4399 67.7002 l
228.1201 54.2598 l
229.7998 40.5801 l
231.48 24.98 l
232.9199 9.3799 l
233.8799 -0.2202 l
SUu0.45 w-0.1201 187.7002 m
-0.1201 -0.2202 l
S-0.1201 -0.2202 m
241.5601 -0.2202 l
S241.5601 -0.2202 m
241.5601 187.7002 l
S241.5601 187.7002 m
-0.1201 187.7002 l
S-0.1201 -0.2202 m
-0.1201 12.7402 l
S36.1201 4.1001 m
36.1201 -0.2202 l
S57.48 -0.2202 m
57.48 4.1001 l
S72.6001 4.1001 m
72.6001 -0.2202 l
S84.3599 -0.2202 m
84.3599 4.1001 l
S93.96 4.1001 m
93.96 -0.2202 l
S101.8799 -0.2202 m
101.8799 4.1001 l
S108.8398 4.1001 m
108.8398 -0.2202 l
S115.0801 -0.2202 m
115.0801 4.1001 l
S120.6001 12.7402 m
120.6001 -0.2202 l
S157.0801 -0.2202 m
157.0801 4.1001 l
S178.2002 4.1001 m
178.2002 -0.2202 l
S193.3198 -0.2202 m
193.3198 4.1001 l
S205.0801 4.1001 m
205.0801 -0.2202 l
S214.6802 -0.2202 m
214.6802 4.1001 l
S222.8398 4.1001 m
222.8398 -0.2202 l
S229.7998 -0.2202 m
229.7998 4.1001 l
S235.7998 4.1001 m
235.7998 -0.2202 l
S241.5601 -0.2202 m
241.5601 12.7402 l
S-0.1201 174.98 m
-0.1201 187.7002 l
S36.1201 187.7002 m
36.1201 183.3799 l
S57.48 183.3799 m
57.48 187.7002 l
S72.6001 187.7002 m
72.6001 183.3799 l
S84.3599 183.3799 m
84.3599 187.7002 l
S93.96 187.7002 m
93.96 183.3799 l
S101.8799 183.3799 m
101.8799 187.7002 l
S108.8398 187.7002 m
108.8398 183.3799 l
S115.0801 183.3799 m
115.0801 187.7002 l
S120.6001 187.7002 m
120.6001 174.98 l
S157.0801 183.3799 m
157.0801 187.7002 l
S178.2002 187.7002 m
178.2002 183.3799 l
S193.3198 183.3799 m
193.3198 187.7002 l
S205.0801 187.7002 m
205.0801 183.3799 l
S214.6802 183.3799 m
214.6802 187.7002 l
S222.8398 187.7002 m
222.8398 183.3799 l
S229.7998 183.3799 m
229.7998 187.7002 l
S235.7998 187.7002 m
235.7998 183.3799 l
S241.5601 174.98 m
241.5601 187.7002 l
S-0.1201 -0.2202 m
12.8398 -0.2202 l
S4.2002 18.7402 m
-0.1201 18.7402 l
S-0.1201 29.7798 m
4.2002 29.7798 l
S4.2002 37.7002 m
-0.1201 37.7002 l
S-0.1201 43.7002 m
4.2002 43.7002 l
S4.2002 48.5 m
-0.1201 48.5 l
S-0.1201 52.8198 m
4.2002 52.8198 l
S4.2002 56.4199 m
-0.1201 56.4199 l
S-0.1201 59.54 m
4.2002 59.54 l
S12.8398 62.4199 m
-0.1201 62.4199 l
S-0.1201 81.3799 m
4.2002 81.3799 l
S4.2002 92.4199 m
-0.1201 92.4199 l
S-0.1201 100.3398 m
4.2002 100.3398 l
S4.2002 106.3398 m
-0.1201 106.3398 l
S-0.1201 111.1401 m
4.2002 111.1401 l
S4.2002 115.46 m
-0.1201 115.46 l
S-0.1201 119.0601 m
4.2002 119.0601 l
S4.2002 122.1802 m
-0.1201 122.1802 l
S-0.1201 125.0601 m
12.8398 125.0601 l
S4.2002 144.02 m
-0.1201 144.02 l
S-0.1201 155.0601 m
4.2002 155.0601 l
S4.2002 162.7402 m
-0.1201 162.7402 l
S-0.1201 168.98 m
4.2002 168.98 l
S4.2002 173.7798 m
-0.1201 173.7798 l
S-0.1201 178.1001 m
4.2002 178.1001 l
S4.2002 181.7002 m
-0.1201 181.7002 l
S-0.1201 184.8198 m
4.2002 184.8198 l
S12.8398 187.7002 m
-0.1201 187.7002 l
S228.6001 -0.2202 m
241.5601 -0.2202 l
S241.5601 18.7402 m
237.2402 18.7402 l
S237.2402 29.7798 m
241.5601 29.7798 l
S241.5601 37.7002 m
237.2402 37.7002 l
S237.2402 43.7002 m
241.5601 43.7002 l
S241.5601 48.5 m
237.2402 48.5 l
S237.2402 52.8198 m
241.5601 52.8198 l
S241.5601 56.4199 m
237.2402 56.4199 l
S237.2402 59.54 m
241.5601 59.54 l
S241.5601 62.4199 m
228.6001 62.4199 l
S237.2402 81.3799 m
241.5601 81.3799 l
S241.5601 92.4199 m
237.2402 92.4199 l
S237.2402 100.3398 m
241.5601 100.3398 l
S241.5601 106.3398 m
237.2402 106.3398 l
S237.2402 111.1401 m
241.5601 111.1401 l
S241.5601 115.46 m
237.2402 115.46 l
S237.2402 119.0601 m
241.5601 119.0601 l
S241.5601 122.1802 m
237.2402 122.1802 l
S228.6001 125.0601 m
241.5601 125.0601 l
S241.5601 144.02 m
237.2402 144.02 l
S237.2402 155.0601 m
241.5601 155.0601 l
S241.5601 162.7402 m
237.2402 162.7402 l
S237.2402 168.98 m
241.5601 168.98 l
S241.5601 173.7798 m
237.2402 173.7798 l
S237.2402 178.1001 m
241.5601 178.1001 l
S241.5601 181.7002 m
237.2402 181.7002 l
S237.2402 184.8198 m
241.5601 184.8198 l
S241.5601 187.7002 m
228.6001 187.7002 l
S-0.1201 187.7002 m
2.2798 187.7002 l
4.4399 187.7002 l
6.8398 187.7002 l
9.2402 187.7002 l
11.6401 187.7002 l
13.5601 187.7002 l
15.48 187.7002 l
17.3999 187.7002 l
19.3198 187.7002 l
21 187.7002 l
22.6802 187.7002 l
24.3599 187.7002 l
26.04 187.7002 l
27.48 187.7002 l
29.1602 187.7002 l
30.6001 187.7002 l
32.04 187.7002 l
33.48 187.7002 l
34.9199 187.7002 l
36.1201 187.7002 l
38.52 187.7002 l
40.9199 187.7002 l
43.3198 187.7002 l
45.48 187.7002 l
47.8799 187.7002 l
49.7998 187.7002 l
51.7202 187.7002 l
53.6401 187.7002 l
55.5601 187.7002 l
57.48 187.7002 l
59.1602 187.7002 l
60.6001 187.7002 l
62.2798 187.7002 l
S36.1201 187.7002 m
39 187.7002 l
SU0 To
0 1 -1 0 -45 94.5 0 Tp
TP
-36.5015 0 Td
0 Tr
0 O
0 g
1 w1 Ta
(p-value) Tx 
/_NewCenturySchlbk-Italic 10 Tf
( ) Tx 
/_NewCenturySchlbk-Roman 10 Tf
(for test) Tx
(\r) TX 
-25.5322 -10 Td
/_Symbol 10 Tf
10 0 Tl
( a ) Tx 
/_NewCenturySchlbk-Roman 10 Tf
(for confidence intervals) Tx 
(\r) TX 
TO
uu1 g
91.5 131 m
91.5 140.5 L
84.5 140.5 L
84.5 131 L
91.5 131 L
f88 135.75 m
FU0 To
1 0 0 1 85.4199 132.1099 0 Tp
TP
0 Tr
0 g
0 Ta
10.22 0 Tl
(3) Tx 
(\r) TX 
TO
Uuu1 g
103.75 131 m
103.75 140.5 L
96.75 140.5 L
96.75 131 L
103.75 131 L
f100.25 135.75 m
FU0 To
1 0 0 1 97.6699 132.1099 0 Tp
TP
0 Tr
0 g
(4) Tx 
(\r) TX 
TO
Uuu1 g
73.75 131 m
73.75 140.5 L
66.75 140.5 L
66.75 131 L
73.75 131 L
f70.25 135.75 m
FU0 To
1 0 0 1 67.6699 132.1099 0 Tp
TP
0 Tr
0 g
(2) Tx 
(\r) TX 
TO
Uuu1 g
121.5 131 m
121.5 140.5 L
114.5 140.5 L
114.5 131 L
121.5 131 L
f118 135.75 m
FU0 To
1 0 0 1 115.4199 132.1099 0 Tp
TP
0 Tr
0 g
(6) Tx 
(\r) TX 
TO
Uuu1 g
133.75 131 m
133.75 140.5 L
126.75 140.5 L
126.75 131 L
133.75 131 L
f130.25 135.75 m
FU0 To
1 0 0 1 127.6699 132.1099 0 Tp
TP
0 Tr
0 g
(8) Tx 
(\r) TX 
TO
Uuu1 g
152.75 110.5 m
152.75 120 L
145.75 120 L
145.75 110.5 L
152.75 110.5 L
f149.25 115.25 m
FU0 To
1 0 0 1 143.9199 111.6099 0 Tp
TP
0 Tr
0 g
(10) Tx 
(\r) TX 
TO
Uuu1 g
162.25 131.5 m
162.25 141 L
155.25 141 L
155.25 131.5 L
162.25 131.5 L
f158.75 136.25 m
FU0 To
1 0 0 1 153.4199 132.6099 0 Tp
TP
0 Tr
0 g
(15) Tx 
(\r) TX 
TO
Uuu1 g
181.5 110.5 m
181.5 120 L
174.5 120 L
174.5 110.5 L
181.5 110.5 L
f178 115.25 m
FU0 To
1 0 0 1 172.6699 111.6099 0 Tp
TP
0 Tr
0 g
(20) Tx 
(\r) TX 
TO
Uuu1 g
185.75 131.5 m
185.75 141 L
178.75 141 L
178.75 131.5 L
185.75 131.5 L
f182.25 136.25 m
FU0 To
1 0 0 1 176.9199 132.6099 0 Tp
TP
0 Tr
0 g
(25) Tx 
(\r) TX 
TO
Uuu1 g
200 110.5 m
200 120 L
193 120 L
193 110.5 L
200 110.5 L
f196.5 115.25 m
FU0 To
1 0 0 1 191.1699 111.6099 0 Tp
TP
0 Tr
0 g
(30) Tx 
(\r) TX 
TO
Uuu1 g
207.75 131.5 m
207.75 141 L
200.75 141 L
200.75 131.5 L
207.75 131.5 L
f204.25 136.25 m
FU0 To
1 0 0 1 198.9199 132.6099 0 Tp
TP
0 Tr
0 g
(40) Tx 
(\r) TX 
TO
Uuu1 g
222.875 110.125 m
222.875 119.625 L
215.875 119.625 L
215.875 110.125 L
222.875 110.125 L
f219.375 114.875 m
FU0 To
1 0 0 1 214.0449 111.2349 0 Tp
TP
0 Tr
0 g
(50) Tx 
(\r) TX 
TO
Uuu1 g
42.5 131 m
42.5 140.5 L
35.5 140.5 L
35.5 131 L
42.5 131 L
f39 135.75 m
FU0 To
1 0 0 1 18.4502 132.0601 0 Tp
TP
0 Tr
0 g
/_NewCenturySchlbk-Italic 10 Tf
(n) Tx 
/_NewCenturySchlbk-Roman 10 Tf
( = 1) Tx 
(\r) TX 
TO
U0 To
1 0 0 1 118.2739 -22.8418 0 Tp
TP
0 Tr
/_Symbol 11.001 Tf
11.0209 0 Tl
(c) Tx 
/_NewCenturySchlbk-Roman 7.9992 Tf
3.428 Ts
(2) Tx 
(\r) TX 
TO
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
