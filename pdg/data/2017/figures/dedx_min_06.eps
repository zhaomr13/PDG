%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 7.0%%AI8_CreatorVersion: 10.0%%For: (Don Groom) ()%%Title: (dedx_min_06.eps)%%CreationDate: 11/1/13 3:20 PM%%BoundingBox: 161 272 449 496%%HiResBoundingBox: 161.6875 272.7417 448.354 495.0273%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentFonts: Symbol%%+ Times-Roman%%+ Times-Italic%%+ NewCenturySchlbk-Roman%%DocumentNeededFonts: Symbol%%+ Times-Roman%%+ Times-Italic%%+ NewCenturySchlbk-Roman%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 122 516 1.5 1137 819 26 0 1 1337 404 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 31%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -31 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 100 8%%BeginData: 7144 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD88FFA87DA8FF52A8FF7D527D7DA87DA87DA87DA87DA87DA87DA8%7D7D7DA87DA87DA87DA87D7D7DA87DA87D7D7DA87DA87DA87DA87D7D7DA8%7DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87D7D7DA87DA87D7D%7D52FD0DFF7DA8FF7D7DFF7DFF7DFD0FFFA8FD09FFA8FD05FFA8FD09FFA8%FD05FFA8FD04FFA8FD24FFA8FD07FFA8FD05FFA8FF7DFD0CFF7D527DA852%7DFFA8FD36FFA8FD34FFA8FD13FFA8FFA8FD69FFA8FD13FF7DA8527DFD67%FFA87DFD13FF7DFFF852FD68FF7DFD13FFA8FF5227FD0AFFA8527DA8FD0E%FFA87DFF52A852A8FD45FFA8FD13FFA8FFA8A8FD0BFF52277DA8FF52527D%7D277DFD06FF7D7DFF7D7DFF7DFD45FFA8FD13FFA8FFA8FD0CFF52527D7D%FF52527D52527DFD05FFA87D52FF277D527DFD45FFA8FD13FF7DA87DFD0E%FF527DFF527DFD56FF7DFD13FFA8FFFF7DA87DA87DA87DA87DA8A8FD5EFF%A8FD13FFA8FD0DFFA87D7DFFFFFF7DFD05FFA8FF7DFFFFA852FFA8FD047D%FD45FFA8FD13FFA8FD0EFF27527DA8FF7D527D527D52527D52A8FFFF7DA8%A8527D7DA8FD45FFA8FD13FF7DA8FD0CFFA87D52A87DFF52527D527D5252%7D27FFFFFF52A8A87D7D7DFD46FF7DFD13FFA8FD10FF527DFD04FF52A8FD%53FFA8FD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FF7DA8FD2EFF7DFF7D%7DFF7D7DFFFFFFA87DA8FF52FF7DA8FF7DFFFF52A87D5252FD21FF7DFD13%FFA8FD2CFFA8A8FFA87DFF52A8527DFFFFFF7DFF7DFFA87D527DFFFD0452%FF7DA852FD21FFA8FD13FFA8FD1BFFAEFD0FFFA8A8FFA852A8A8FD047DFF%FD067D52A87D7DFF525252277D527D27FD21FFA8FD0CFFA87DA8FF52A8FF%A8FD1BFF5F59AFFD0BFFA87DFD1AFFA8A8FFA8A8FD21FFA8FD08FF7DA8FF%FFFFA8A852FF7DFF7DA87DFFA8FFA8FFA8A8FFA8A8FFA8FFA8FFA8FFA8FF%A8FFA8A8FFA8A8AE5983A8FFA8FFA8FFFFA827A8FFA8A8FFA8FFA8FFA8FF%A8FFFFA8FFA8FFFFA8FFA8FFA8FFA8FFA8FFFFA8FFA8FFFFA8FFA8FFA8FF%A8FFA8FFFFA8FFA8FFFFA8FFA8FFA8FFA8FFA8FFFFA8FFA8A8A852FD07FF%5252527DFF7D527D7D527DFFA8FD1EFFA85F5FFD04FFA8F852FD43FFA8FD%06FF7DA87DFD0AFFA8FD11FFCAFD0FFF5F84FFA8277DA8FD43FFA8FD05FF%A87D7D277DFD09FFA8FD11FFC3A0FD0FFF845F5FFD46FFA8FD08FF5252FD%09FFA8FD11FFA1CAFD11FFAE598AFD44FFA8FD08FF2727FD09FF7DA8FD25%FF845F83FD41FFA87DFD08FF52F8FD09FFA8FD28FFAE5FAEFD40FFA8FD08%FF52A8FD09FFA8FD2AFF833B84FFC3FD3CFFA8FD08FF5227FD09FF7DFD2C%FF8A7CCFC2FFC9FD39FF7DFD08FF7DFD0AFF7DA8FD2DFF7659A7CAC2FD37%FFA87DFD05FFA8527D7DFD0AFFA8FD30FF8476A8FD38FFA8FD07FF7DFD0B%FFA8FD2AFF7E53FD06FF5F5FA8FD36FFA8FD07FF7DFD0BFFA8FD2BFF84FD%08FF845FC3C2FD33FFA8FD13FF7DA8FD35FFA0A7A8FD31FFA87DFD08FF52%5227FD08FFA8FD33FFC9CAC97EA8845FA97EFD2FFFA8FD08FF2727F8FD08%FFA8FD33FFCAC3CAFFFFFFA85959AEFF5AFFA97EA8FFFFFF5AA9FD23FFA8%FD07FFA8FD0BFF7DFD1AFFA97EFD0AFFA9FD0CFFA87EFFFFFFA97EFFAE5F%5FFFFFFFA8C3C2FFA8A9FD24FF7DFD07FF5252FD0AFFA8FD1BFFA9FD0AFF%5AA9FD0CFFA8FD07FF59A8595953FFA0C2A87EA8FD24FFA8FD07FFA852F8%FD09FF7DFD21FF7EA9FD1CFFAE5F5FFFA8FD27FF7DFD07FF277DFD0AFFA8%FD41FFAE5984FD27FFA8FD08FF527DFD09FFA8FD43FFA87D83FD25FFA8FD%08FF2727FFFFFF52FFFF52A8FFA8FD43FFC9FFA73459A8FD22FFA8FD07FF%2752F8FFFFFF7DFFFF7D7DFF7D7D7DFFFFFFA8A8FFFFA8A8A8FFFFFFA8A8%FFFFFFA8A8FFFFFFA8A8A8FFFFA8A8FFFFFFA8A8A8FFFFA8A8FFFFFFA8A8%A8FFFFA8A8A8FFFFA8A8A8FFFFA8A8A8FFFFA8A8A1C3CAFF7D5984FFA8A8%A8FFFFFFA8A8FFFFA8A8A8FFFFFFA8A8FFFFA8A8A8FFFFFFA8A8A8FFA87D%52FD07FF7D5252FFFFFF52A8FF527DFFA8FD48FF84593584A9FF5AFD1CFF%A8FD07FF522752FD09FF7DFD4AFF7E2F3584A9FD1CFF7DFD07FF275252FD%09FFA8FD49FFA95A7E7E5935A8A8FD1AFFA8FD07FFA8FD0BFF7DFD4BFFA9%FFA8FF2F35AEFFC3CFFD16FF7DFD07FF7D27527DFD08FFA8FD4FFFA95359%58C2A0CAA8FD14FFA8FD08FFA8A8FD09FFA8FD50FFA9547EA0C253547EFD%13FFA8FD06FFFD047D52A8FD07FFA8FD52FF7E7EA8592F537EFD12FFA8FD%08FF7D52FD09FFA8FD0DFFA8FFFFA87D7DFFFF7DFFFF7DFD3EFF352F53A9%FD10FFA8FD07FF7D5252FD09FF7DA8FD0CFF7EA8FFA852FD047D527D5252%7DFD3DFF7E2F2F84FD0EFFA87DFD07FF7D5227FD09FF7DFD10FF7D7D7D52%7DFD05527DFD3EFFA95A0753C2A1A8FD0BFF7DFD08FF7D27FD09FFA8FD5B%FFA97DA1525353FD0AFFA8FD07FF7DFD0BFFA8FD11FF7D52FD49FF7E8454%2F2F54FD09FFA8FD07FF27527DFD09FF7DA8FD0BFFCAC9C3FF52FF7D7D27%5252275252FD46FF592F2FFD07FFA87DFD07FF275252FD09FFA8FD0DFFC9%CFFFA852527D5252277D7D52FD47FF5A2F2F5AFD06FFA8FD07FF7D5227FD%09FFA8FD62FF7E2F072F2F84FFFFFFA8FD07FF7DFD0BFFA8FD64FF84292F%77C3A1FFA8FD07FF7D2727FD09FF7DA8FD65FF7EC9A02F2F7DFD08FF7D27%FD09FF7DFD69FF532F2FFD13FFA8FD6AFF7EA8FD08FFA8FD04FF52FFA87D%A8FFA8FD6BFFA8FD08FF52FD04FF7DFF7DFF7DFF7D7DA8FFA8A8FFA8FFA8%FFA8FFA8FFA8A8FFA8FFA8A8FFA8FFA8FFA8FFA8FFA8A8FFFD04A8FFA8FF%A8FFA8FFA8FFA8A8FFFD04A8FFA8FFA8FFA8FFA8FFA8A8FFFD04A8FFA8FF%A8FFFD04A8FFA8FFFD04A8FFA8FFA8FFFD04A8FFA8A8FFA8A8A8FFA8FFA8%A87D7DFD06FFA8FF7DFFFFA8FF27FF7D7D7DFFA8FD6BFFA8FD07FF7D5252%7DFD08FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FF7DA8%FD6AFF7DFD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13%FF7DA8FD6AFF7DFD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FFA8FD6BFF%A8FD13FF7DA8FD6AFF7DFD13FFA8FD6BFFA8FD13FFA8FD6BFFA8FD13FFA8%FF7DA87DFD0CFF52FF52FD06FF7DA8FFA8FFFFA8527DFD04FF5252FFFF52%7D7D7DFF527D7D52A8A87D52A8FD12FFA85252FD0DFF5252FD0FFFA8FD13%FFA8FF527D7DFD0CFF52527D27FD05FF52FFA87DFFFFFF52275252FFFF52%52FFFF7DFFFF527D7D7DFFFF7DFF277D7D27FD12FF527D277DFD0BFF527D%5252FD0DFFA8FD13FF7DA852A852FD0CFF52A8F87DFD05FF52527D52FFFF%A82752527DFFA82752FFFF527DA852A8527D7D52A8A852277D52FD11FFA8%527D7DA8FD0BFFFD0452FD0CFFA87DFD13FFA8FD6BFFA8FD0CFFA87D7DFF%52A8FFA8FFA8FD34FFA8FD34FF7DFD0CFF7DFF7DFF7D7DFF7DFFA8FD0FFF%A8FD09FFA8FD05FFA8FD04FFA8FD04FFA8FFFFA8FFFFA8FFFFA8FFA8FD0F%FFA8FD09FFA8FD05FFA8FD04FFA8FD04FFA8FFFFA8FFFFA8FFFFA8FF7DFD%0CFF7D7D7DA8527DFF7D527D7DA87DA87DA87DA87DA87DA87DA87D7D7DA8%7DA87DA87DA87D7D7DA87DA87D7D7DA87DA87DA87DA87D7D7DA87DA87D7D%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87DA87D7D7DA87DA87DA87D7D7DA87DA87D7D5252FD94%FFA87DFD0EFF7D7DFD14FF52A8FD0CFF52FF527DFD0BFFA852FF52A8FD12%FF527D52A8FD0AFF52FF527D527DFD13FF52FD0FFF52FD13FFA87DA8FD0C%FF7DFF7D7DFD0CFFA852FF7DFD12FF7D7DFF52FD0AFF7DFF7D7D7D52FD12%FFA852FD0EFF5252A8FD12FFA852A8FD0CFF52A8527DFD0BFFA852A8527D%FD11FFA8527D527DFD0AFF52A8527D527DFDFCFFFD4BFFA87DF8FD7EFF52%7DFD7DFF7D277DFDFCFFFDBBFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Symbol%%IncludeFont: Times-Roman%%IncludeFont: Times-Italic%%IncludeFont: NewCenturySchlbk-Romanuserdict /_useSmoothShade true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Symbol Symbol[/_Symbol/Symbol 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _Times-Roman Times-Roman[/_Times-Roman/Times-Roman 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _Times-Italic Times-Italic[/_Times-Italic/Times-Italic 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _NewCenturySchlbk-Roman NewCenturySchlbk-Roman[/_NewCenturySchlbk-Roman/NewCenturySchlbk-Roman 0 0 1 TZ%AI3_EndEncoding AdobeType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registration]) Pc1 1 1 1 k([Registration]) Pc0 g(New Color Swatch) Pc1 g(New Color Swatch 2) Pc1 0.66 0 0 k(New Color Swatch 3) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A300 Ar0 R1 0 0.61 0 K0 J 0 j 1 w 2.5 M []0 d0 XR258.4146 447.8345 m273.2202 440.1602 l284.7153 434.2188 l294.0991 429.3745 l302.0493 425.269 l308.9307 421.7251 l314.978 418.5889 l320.4258 415.7837 l325.3267 413.2344 l329.8096 410.9141 l333.9282 408.7974 l337.7339 406.8086 l341.3052 404.9727 l344.6152 403.2646 l347.7432 401.6582 l350.689 400.1284 l353.478 398.7002 l356.1104 397.3232 l358.6128 396.0229 l361.0112 394.7739 l363.3047 393.6006 l365.4946 392.479 l367.606 391.3823 l369.6128 390.3369 l371.5679 389.3428 l373.4448 388.374 l375.2432 387.4302 l376.9897 386.5381 l378.6841 385.6455 l380.3262 384.8042 l381.8901 383.9883 l383.4282 383.1978 l384.9399 382.4326 l386.3735 381.668 l387.7813 380.9541 l389.1626 380.2397 l390.4922 379.5518 l391.7954 378.8628 l393.0723 378.2256 l394.3237 377.5625 l395.5225 376.9507 l396.7217 376.3389 l397.8687 375.7266 l398.9893 375.1406 l400.1104 374.5796 l401.2051 374.0186 l402.248 373.4575 l403.2905 372.9219 l404.3071 372.4121 l405.3237 371.877 l406.2881 371.3921 l407.2524 370.8823 l408.1909 370.3979 l409.1294 369.9131 l410.0415 369.4546 l410.9277 368.9697 l411.814 368.5366 l412.6743 368.0776 l413.5347 367.644 l414.3687 367.2104 l415.2026 366.7769 l416.0107 366.3691 l416.8188 365.9355 l417.6006 365.5273 l418.3564 365.145 l419.1387 364.7373 l419.8687 364.355 l420.6245 363.9722 l421.3545 363.5898 l422.084 363.2329 l422.7881 362.8506 l423.4917 362.4932 l424.1694 362.1367 l424.8472 361.7793 l425.5249 361.4482 l426.2026 361.0913 l426.8545 360.7598 l427.5059 360.4282 l428.1313 360.0967 l428.7832 359.7651 l429.3828 359.4336 l430.0083 359.1279 l432.4063 357.8784 l432.98 357.5723 l433.5532 357.292 l434.127 356.9858 l434.7002 356.7056 l435.2476 356.3994 l435.7949 356.1191 l436.3423 355.8384 l436.8896 355.5581 l437.4111 355.2773 lSu0 To1 0 0 1 192.3335 298.0718 0 Tp0 TvTP-11.25 0 Td0 Tr0 O0 0 0 1 k4 M%_ 0 50 XQ/_Times-Roman 9 9 -3.854 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV33.104 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti2 Ta0 1 2 2 99 Th0 Tq0 Tg0 0 Tl0 Tc0 Tw(0.5) Tx (\r) TX TO0 To1 0 0 1 192.3335 344.54 0 Tp0 TvTP-11.25 0 Td0 Tr(1.0) Tx (\r) TX TO0 To1 0 0 1 192.3335 392.6035 0 Tp0 TvTP-11.25 0 Td0 Tr(1.5) Tx (\r) TX TO0 To1 0 0 1 192.3335 440.6665 0 Tp0 TvTP-11.25 0 Td0 Tr(2.0) Tx (\r) TX TO0 To1 0 0 1 192.3335 486.0273 0 Tp0 TvTP-11.25 0 Td0 Tr(2.5) Tx (\r) TX TOUu0 R0 0 0 1 K0.4 w 2.5 M196.4292 299.4121 m439.001 299.4121 lS201.8511 299.4121 m201.8511 303.2363 lS320.4263 299.4121 m320.4263 303.2363 lS439.001 299.4121 m439.001 303.2363 lS196.4292 299.4121 m196.4292 301.3242 lS237.5356 299.4121 m237.5356 301.3242 lS258.4146 299.4121 m258.4146 301.3242 lS273.2202 299.4121 m273.2202 301.3242 lS284.7153 299.4121 m284.7153 301.3242 lS294.0991 299.4121 m294.0991 301.3242 lS302.0493 299.4121 m302.0493 301.3242 lS308.9307 299.4121 m308.9307 301.3242 lS314.978 299.4121 m314.978 301.3242 lS356.1108 299.4121 m356.1108 301.3242 lS376.9897 299.4121 m376.9897 301.3242 lS391.7954 299.4121 m391.7954 301.3242 lS403.2905 299.4121 m403.2905 301.3242 lS412.6743 299.4121 m412.6743 301.3242 lS420.6245 299.4121 m420.6245 301.3242 lS427.5059 299.4121 m427.5059 301.3242 lS433.5532 299.4121 m433.5532 301.3242 lS196.4292 491.6655 m439.001 491.6655 lS201.8511 491.6655 m201.8511 487.8154 lS320.4263 491.6655 m320.4263 487.8154 lS439.001 491.6655 m439.001 487.8154 lS196.4292 491.6655 m196.4292 489.7275 lS237.5356 491.6655 m237.5356 489.7275 lS258.4146 491.6655 m258.4146 489.7275 lS273.2202 491.6655 m273.2202 489.7275 lS284.7153 491.6655 m284.7153 489.7275 lS294.0991 491.6655 m294.0991 489.7275 lS302.0493 491.6655 m302.0493 489.7275 lS308.9307 491.6655 m308.9307 489.7275 lS314.978 491.6655 m314.978 489.7275 lS356.1108 491.6655 m356.1108 489.7275 lS376.9897 491.6655 m376.9897 489.7275 lS391.7954 491.6655 m391.7954 489.7275 lS403.2905 491.6655 m403.2905 489.7275 lS412.6743 491.6655 m412.6743 489.7275 lS420.6245 491.6655 m420.6245 489.7275 lS427.5059 491.6655 m427.5059 489.7275 lS433.5532 491.6655 m433.5532 489.7275 lS196.4292 299.4121 m196.4292 491.6655 lS196.4292 299.4121 m201.2773 299.4121 lS196.4292 347.4751 m201.2773 347.4751 lS196.4292 395.5386 m201.2773 395.5386 lS196.4292 443.6021 m201.2773 443.6021 lS196.4292 491.6655 m201.2773 491.6655 lS196.4292 309.0244 m198.8535 309.0244 lS196.4292 318.6372 m198.8535 318.6372 lS196.4292 328.25 m198.8535 328.25 lS196.4292 337.8628 m198.8535 337.8628 lS196.4292 357.0879 m198.8535 357.0879 lS196.4292 366.7007 m198.8535 366.7007 lS196.4292 376.3135 m198.8535 376.3135 lS196.4292 385.9258 m198.8535 385.9258 lS196.4292 405.1514 m198.8535 405.1514 lS196.4292 414.7642 m198.8535 414.7642 lS196.4292 424.377 m198.8535 424.377 lS196.4292 433.9893 m198.8535 433.9893 lS196.4292 453.2148 m198.8535 453.2148 lS196.4292 462.8276 m198.8535 462.8276 lS196.4292 472.4404 m198.8535 472.4404 lS196.4292 482.0527 m198.8535 482.0527 lS439.001 299.4121 m439.001 491.6655 lS439.001 299.4121 m434.127 299.4121 lS439.001 347.4751 m434.127 347.4751 lS439.001 395.5386 m434.127 395.5386 lS439.001 443.6021 m434.127 443.6021 lS439.001 491.6655 m434.127 491.6655 lS439.001 309.0244 m436.5771 309.0244 lS439.001 318.6372 m436.5771 318.6372 lS439.001 328.25 m436.5771 328.25 lS439.001 337.8628 m436.5771 337.8628 lS439.001 357.0879 m436.5771 357.0879 lS439.001 366.7007 m436.5771 366.7007 lS439.001 376.3135 m436.5771 376.3135 lS439.001 385.9258 m436.5771 385.9258 lS439.001 405.1514 m436.5771 405.1514 lS439.001 414.7642 m436.5771 414.7642 lS439.001 424.377 m436.5771 424.377 lS439.001 433.9893 m436.5771 433.9893 lS439.001 453.2148 m436.5771 453.2148 lS439.001 462.8276 m436.5771 462.8276 lS439.001 472.4404 m436.5771 472.4404 lS439.001 482.0527 m436.5771 482.0527 lSUu1 0.66 0 0 K0.7 w235.7891 437.355 m239.2822 437.355 l237.5356 437.355 l237.5356 439.0635 l237.5356 435.6724 lS256.668 408.7466 m260.1611 408.7466 l258.4146 408.7466 l258.4146 410.4551 l258.4146 407.0635 lS271.5 404.5137 m274.9668 404.5137 l273.2202 404.5137 l273.2202 406.2222 l273.2202 402.8311 lS282.9951 407.2676 m286.4619 407.2676 l284.7153 407.2676 l284.7153 408.9507 l284.7153 405.5596 lS292.3789 419.3281 m295.8457 419.3281 l294.0991 419.3281 l294.0991 421.0366 l294.0991 417.6196 lS292.3789 419.7617 m295.8457 419.7617 l294.0991 419.7617 l294.0991 421.4702 l294.0991 418.0786 lS300.3032 425.5498 m303.7959 425.5498 l302.0493 425.5498 l302.0493 427.2578 l302.0493 423.8413 lS307.1846 423.1274 m310.6514 423.1274 l308.9307 423.1274 l308.9307 424.8359 l308.9307 421.4443 lS313.2578 408.2876 m316.7246 408.2876 l314.978 408.2876 l314.978 409.9961 l314.978 406.605 lS318.6797 414.1777 m322.1465 414.1777 l320.4263 414.1777 l320.4263 415.8857 l320.4263 412.4692 lS323.5801 408.8232 m327.0728 408.8232 l325.3267 408.8232 l325.3267 410.5313 l325.3267 407.1401 lS328.0635 412.189 m331.5303 412.189 l329.8101 412.189 l329.8101 413.8716 l329.8101 410.4805 lS332.1816 406.4775 m335.6748 406.4775 l333.9282 406.4775 l333.9282 408.1855 l333.9282 404.769 lS336.0137 411.2197 m339.4805 411.2197 l337.7339 411.2197 l337.7339 412.9028 l337.7339 409.5117 lS339.5586 406.2734 m343.0254 406.2734 l341.3052 406.2734 l341.3052 407.9561 l341.3052 404.5649 lS342.895 410.0977 m346.3618 410.0977 l344.6152 410.0977 l344.6152 411.7808 l344.6152 408.3896 lS345.9971 405.8906 m349.4897 405.8906 l347.7432 405.8906 l347.7432 407.5737 l347.7432 404.1826 lS348.9424 396.2017 m352.4092 396.2017 l350.689 396.2017 l350.689 397.8843 l350.689 394.4932 lS351.7314 407.2168 m355.1982 407.2168 l353.478 407.2168 l353.478 408.9253 l353.478 405.5337 lS354.3643 410.3784 m357.8569 410.3784 l356.1108 410.3784 l356.1108 412.0615 l356.1108 408.6699 lS356.8926 397.5532 m360.3594 397.5532 l358.6128 397.5532 l358.6128 399.2612 l358.6128 395.8701 lS359.2905 393.2183 m362.7573 393.2183 l361.0112 393.2183 l361.0112 394.9268 l361.0112 391.5356 lS361.5845 389.3428 m365.0513 389.3428 l363.3047 389.3428 l363.3047 391.0254 l363.3047 387.6343 lS363.7739 391.2295 m367.2407 391.2295 l365.4946 391.2295 l365.4946 392.938 l365.4946 389.5469 lS365.8594 388.5015 m369.3262 388.5015 l367.606 388.5015 l367.606 390.1841 l367.606 386.793 lS367.8926 390.7451 m371.3594 390.7451 l369.6128 390.7451 l369.6128 392.4536 l369.6128 389.0625 lS369.8213 387.7109 m373.2881 387.7109 l371.5679 387.7109 l371.5679 389.3936 l371.5679 386.0024 lS371.6982 392.3262 m375.165 392.3262 l373.4448 392.3262 l373.4448 394.0088 l373.4448 390.6177 lS373.4966 386.1045 m376.9897 386.1045 l375.2432 386.1045 l375.2432 387.813 l375.2432 384.396 lS375.2432 386.9458 m378.7363 386.9458 l376.9897 386.9458 l376.9897 388.6289 l376.9897 385.2373 lS376.9375 383.8096 m380.4043 383.8096 l378.6841 383.8096 l378.6841 385.4927 l378.6841 382.1011 lS378.5796 383.0195 m382.0464 383.0195 l380.3262 383.0195 l380.3262 384.7275 l380.3262 381.3364 lS380.1699 382.9683 m383.6367 382.9683 l381.8901 382.9683 l381.8901 384.6509 l381.8901 381.2598 lS381.7075 380.3677 m385.1743 380.3677 l383.4282 380.3677 l383.4282 382.0757 l383.4282 378.6592 lS383.1934 384.396 m386.6602 384.396 l384.9399 384.396 l384.9399 386.1045 l384.9399 382.688 lS384.6533 382.9683 m388.1201 382.9683 l386.3735 382.9683 l386.3735 384.6509 l386.3735 381.2598 lS386.0605 381.6426 m389.5273 381.6426 l387.7813 381.6426 l387.7813 383.3252 l387.7813 379.9341 lS387.416 381.3618 m390.9092 381.3618 l389.1626 381.3618 l389.1626 383.0703 l389.1626 379.6792 lS388.7715 381.9229 m392.2383 381.9229 l390.4922 381.9229 l390.4922 383.6313 l390.4922 380.2402 lS390.0747 380.9541 m393.5415 380.9541 l391.7954 380.9541 l391.7954 382.6621 l391.7954 379.2456 lS391.3521 380.3418 m394.8188 380.3418 l393.0723 380.3418 l393.0723 382.0249 l393.0723 378.6338 lS392.5771 379.0928 m396.0439 379.0928 l394.3237 379.0928 l394.3237 380.7754 l394.3237 377.3843 lS393.8022 377.2568 m397.269 377.2568 l395.5225 377.2568 l395.5225 378.9648 l395.5225 375.5737 lS394.9751 376.8999 m398.4419 376.8999 l396.7217 376.8999 l396.7217 378.6084 l396.7217 375.1914 lS396.1221 377.1802 m399.6152 377.1802 l397.8687 377.1802 l397.8687 378.8633 l397.8687 375.4717 lS397.269 375.1406 m400.7358 375.1406 l398.9893 375.1406 l398.9893 376.8486 l398.9893 373.4575 lS398.3638 376.1602 m401.8569 376.1602 l400.1104 376.1602 l400.1104 377.8433 l400.1104 374.4521 lS399.4585 374.0186 m402.9253 374.0186 l401.2051 374.0186 l401.2051 375.7271 l401.2051 372.3359 lS400.5273 374.0693 m403.9941 374.0693 l402.248 374.0693 l402.248 375.7778 l402.248 372.3613 lS401.5703 372.7183 m405.0371 372.7183 l403.2905 372.7183 l403.2905 374.4268 l403.2905 371.0098 lS402.5869 372.3101 m406.0537 372.3101 l404.3071 372.3101 l404.3071 373.9932 l404.3071 370.6016 lS403.5771 369.1992 m407.0439 369.1992 l405.3237 369.1992 l405.3237 370.9077 l405.3237 367.5166 lS404.5679 372.667 m408.0347 372.667 l406.2881 372.667 l406.2881 374.3501 l406.2881 370.959 lS405.5322 371.9531 m408.999 371.9531 l407.2524 371.9531 l407.2524 373.6616 l407.2524 370.2705 lS406.4707 371.8003 m409.9375 371.8003 l408.1909 371.8003 l408.1909 373.5088 l408.1909 370.1172 lS407.3828 369.5566 m410.8755 369.5566 l409.1294 369.5566 l409.1294 371.2646 l409.1294 367.8735 lS408.2954 369.582 m411.7881 369.582 l410.0415 369.582 l410.0415 371.2905 l410.0415 367.8735 lS409.2075 369.8877 m412.6743 369.8877 l410.9277 369.8877 l410.9277 371.5962 l410.9277 368.2051 lS410.0938 370.8057 m413.5605 370.8057 l411.814 370.8057 l411.814 372.5142 l411.814 369.123 lS410.9541 369.6074 m414.4209 369.6074 l412.6743 369.6074 l412.6743 371.3159 l412.6743 367.9243 lS411.7881 368.7915 m415.2808 368.7915 l413.5347 368.7915 l413.5347 370.5 l413.5347 367.1084 lS412.6484 367.6187 m416.1152 367.6187 l414.3687 367.6187 l414.3687 369.3271 l414.3687 365.9355 lS413.4561 368.4092 m416.9229 368.4092 l415.2026 368.4092 l415.2026 370.0918 l415.2026 366.7007 lS414.2642 365.4512 m417.731 365.4512 l416.0107 365.4512 l416.0107 367.1343 l416.0107 363.7427 lS415.0723 365.4766 m418.5391 365.4766 l416.8188 365.4766 l416.8188 367.1851 l416.8188 363.7686 lS415.8545 364.2529 m419.3213 364.2529 l417.6006 364.2529 l417.6006 365.9614 l417.6006 362.5698 lS416.6362 363.7686 m420.103 363.7686 l418.3564 363.7686 l418.3564 365.4512 l418.3564 362.0601 lS417.3921 363.5645 m420.8589 363.5645 l419.1387 363.5645 l419.1387 365.2729 l419.1387 361.856 lS418.1484 363.7173 m421.6152 363.7173 l419.8687 363.7173 l419.8687 365.4258 l419.8687 362.0347 lS418.8779 362.7485 m422.3711 362.7485 l420.6245 362.7485 l420.6245 364.4316 l420.6245 361.04 lS419.6079 362.7993 m423.1006 362.7993 l421.3545 362.7993 l421.3545 364.5078 l421.3545 361.1167 lS420.3379 361.9834 m423.8047 361.9834 l422.084 361.9834 l422.084 363.6665 l422.084 360.2754 lS421.0415 361.7798 m424.5083 361.7798 l422.7881 361.7798 l422.7881 363.4624 l422.7881 360.0713 lS421.7451 361.3462 m425.2119 361.3462 l423.4917 361.3462 l423.4917 363.0547 l423.4917 359.6377 lS422.4492 361.1421 m425.916 361.1421 l424.1694 361.1421 l424.1694 362.8252 l424.1694 359.4336 lS423.127 360.0967 m426.5938 360.0967 l424.8472 360.0967 l424.8472 361.8052 l424.8472 358.4136 lS423.8047 360.2495 m427.2715 360.2495 l425.5249 360.2495 l425.5249 361.958 l425.5249 358.5669 lS424.4561 359.7651 m427.9229 359.7651 l426.2026 359.7651 l426.2026 361.4482 l426.2026 358.0566 lS425.1079 360.2241 m428.5747 360.2241 l426.8545 360.2241 l426.8545 361.9072 l426.8545 358.5156 lS425.7593 359.9438 m429.2261 359.9438 l427.5059 359.9438 l427.5059 361.6265 l427.5059 358.2354 lS426.4111 359.4336 m429.8779 359.4336 l428.1313 359.4336 l428.1313 361.1421 l428.1313 357.751 lS427.0366 359.1787 m430.5034 359.1787 l428.7832 359.1787 l428.7832 360.8872 l428.7832 357.4961 lS427.6621 359.7144 m431.1289 359.7144 l429.3828 359.7144 l429.3828 361.397 l429.3828 358.0059 lS428.2881 360.4028 m431.7549 360.4028 l430.0083 360.4028 l430.0083 362.1108 l430.0083 358.7197 lS430.6602 358.1079 m434.1528 358.1079 l432.4063 358.1079 l432.4063 359.7905 l432.4063 356.3994 lS431.2593 358.1587 m434.7261 358.1587 l432.98 358.1587 l432.98 359.8672 l432.98 356.4761 lS431.833 356.8584 m435.2998 356.8584 l433.5532 356.8584 l433.5532 358.5415 l433.5532 355.1499 lS432.4063 357.751 m435.873 357.751 l434.127 357.751 l434.127 359.4336 l434.127 356.0425 lS432.9536 355.2266 m436.4204 355.2266 l434.7002 355.2266 l434.7002 356.9351 l434.7002 353.5439 lS433.5273 356.5269 m436.9941 356.5269 l435.2476 356.5269 l435.2476 358.21 l435.2476 354.8184 lS434.0747 354.2324 m437.5415 354.2324 l435.7949 354.2324 l435.7949 355.915 l435.7949 352.5239 lS434.6221 355.9663 m438.0889 355.9663 l436.3423 355.9663 l436.3423 357.6489 l436.3423 354.2578 lS435.1436 355.2773 m438.6362 355.2773 l436.8896 355.2773 l436.8896 356.9858 l436.8896 353.5947 lS435.6909 356.1445 m439.001 356.1445 l437.4111 356.1445 l437.4111 357.853 l437.4111 354.4619 lSU0 G0.4 w [1.1339 2.8347 ]0 d196.4292 443.6021 m439.001 443.6021 lS196.4292 347.4751 m439.001 347.4751 lS[5.6693 5.6693 ]0 d196.4292 395.5386 m439.001 395.5386 lSu0 To1 0 0 1 198.75 288.5327 0 Tp0 TvTP0 Tr0 O0 g1 w 4 M []0 d36 0 XbXB0 Ta9.84 0 Tl(1) Tx (\r) TX TO0 To1 0 0 1 234.27 288.5327 0 Tp0 TvTP0 Tr(2) Tx (\r) TX TO0 To1 0 0 1 281.3101 288.5327 0 Tp0 TvTP0 Tr(5) Tx (\r) TX TO0 To1 0 0 1 313.71 288.5327 0 Tp0 TvTP0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 349.23 288.5327 0 Tp0 TvTP0 Tr(20) Tx (\r) TX TO0 To1 0 0 1 398.27 288.5327 0 Tp0 TvTP0 Tr(50) Tx (\r) TX TO0 To1 0 0 1 430.6699 288.5327 0 Tp0 TvTP0 Tr(100) Tx (\r) TX TOU0 To1 0 0 1 319.917 276.8677 0 Tp0 TvTP-2.7808 0 Td0 Tr/_Times-Italic 10.0001 10.0001 -4.126 Tf1 Ta9.9729 0 Tl(Z) Tx (\r) TX TOu0 To1 0 0 1 202.2935 306.3677 0 Tp0 TvTP-3.2498 0 Td0 Tr0 0 0 1 k/_Times-Roman 9 9 -3.854 Tf12 0 Tl(H) Tx (\r) TX TO0 To1 0 0 1 237.7935 306.3677 0 Tp0 TvTP-5.2471 0 Td0 Tr(He) Tx (\r) TX TO0 To1 0 0 1 258.2935 306.3677 0 Tp0 TvTP-3.999 0 Td0 Tr(Li) Tx (\r) TX TO0 To1 0 0 1 273.2935 306.3677 0 Tp0 TvTP-4.9988 0 Td0 Tr(Be) Tx (\r) TX TO0 To1 0 0 1 284.2935 306.3677 0 Tp0 TvTP-3.0015 0 Td0 Tr(B) Tx (\r) TX TO0 To1 0 0 1 293.7935 306.3677 0 Tp0 TvTP-3.0015 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 301.7935 306.3677 0 Tp0 TvTP-3.2498 0 Td0 Tr(N) Tx (\r) TX TO0 To1 0 0 1 309 306.3677 0 Tp0 TvTP-3.2498 0 Td0 Tr(O) Tx (\r) TX TO0 To1 0 0 1 320.2935 306.3677 0 Tp0 TvTP-5.2471 0 Td0 Tr(Ne) Tx (\r) TX TO0 To1 0 0 1 403.2935 306.3677 0 Tp0 TvTP-4.7527 0 Td0 Tr(Sn) Tx (\r) TX TO0 To1 0 0 1 368.7935 306.3677 0 Tp0 TvTP-4.5 0 Td0 Tr(Fe) Tx (\r) TX TOUu800 Ar0 R1 0.66 0 0 K0.7 w226.7026 375.9092 m230.3027 375.9092 lS228.3823 377.5894 m228.3823 374.2295 lSU0 To1 0 0 1 234.5327 372.3491 0 Tp0 TvTP0 Tr0 O0 g1 w0 Ta10.97 0 Tl(Solids) Tx (\r) TX TO0 To1 0 0 1 234.5327 361.8491 0 Tp0 TvTP0 Tr(Gases) Tx (\r) TX TO0 R0 1 1 0 K0.5 w228.1577 363.4492 m229.207 363.4492 230.0576 364.2998 230.0576 365.3491 c230.0576 366.3989 229.207 367.2495 228.1577 367.2495 c227.1079 367.2495 226.2573 366.3989 226.2573 365.3491 c226.2573 364.2998 227.1079 363.4492 228.1577 363.4492 csuu0 O0 g1 w199.9121 478.5928 m201.791 485.5049 l204 476.3335 l201.6768 478.9629 l199.9121 478.5928 lfUU0 R0 G0.4 w201.6665 480.3335 m201.6665 470.3335 l224.6665 470.3335 lS0 To1 0 0 1 227.6665 472 0 Tp0 TvTP0 Tr0 O0 0 0 1 k1 w9.973 0 Tl(H) Tx /_Times-Roman 8 8 -3.4258 Tf-2 Ts(2) Tx /_Times-Roman 9 9 -3.854 Tf0 Ts( gas:     4.10) Tx(\r) TX T*(H) Tx /_Times-Roman 8 8 -3.4258 Tf-2 Ts(2) Tx /_Times-Roman 9 9 -3.854 Tf0 Ts( liquid: 3.97) Tx (\r) TX TOu300 Ar1 g0 R0 1 1 0 K0.5 w 2.5 M239.2822 437.457 m239.0474 438.3242 l238.396 438.936 l237.5356 439.1655 l236.6753 438.936 l236.0239 438.3242 l235.7891 437.457 l236.0239 436.6157 l236.6753 436.0039 l237.5356 435.7744 l238.396 436.0039 l239.0474 436.6157 l239.2822 437.457 lB303.7959 426.6714 m303.561 427.5132 l302.9097 428.1504 l302.0493 428.3799 l301.1895 428.1504 l300.5376 427.5132 l300.3032 426.6714 l300.5376 425.8301 l301.1895 425.1929 l302.0493 424.9634 l302.9097 425.1929 l303.561 425.8301 l303.7959 426.6714 lB310.6514 424.4023 m310.4165 425.2437 l309.791 425.8555 l308.9307 426.085 l308.0444 425.8555 l307.4189 425.2437 l307.1846 424.4023 l307.4189 423.5352 l308.0444 422.9233 l308.9307 422.6938 l309.791 422.9233 l310.4165 423.5352 l310.6514 424.4023 lB316.7246 412.3672 m316.4902 413.2085 l315.8643 413.8462 l314.978 414.0757 l314.1182 413.8462 l313.4927 413.2085 l313.2578 412.3672 l313.4927 411.5259 l314.1182 410.8882 l314.978 410.6587 l315.8643 410.8882 l316.4902 411.5259 l316.7246 412.3672 lB322.1465 416.9824 m321.9116 417.8237 l321.2861 418.4614 l320.4263 418.6909 l319.54 418.4614 l318.9141 417.8237 l318.6797 416.9824 l318.9141 416.1411 l319.54 415.5034 l320.4263 415.2739 l321.2861 415.5034 l321.9116 416.1411 l322.1465 416.9824 lB349.4897 407.9053 m349.2554 408.7466 l348.6035 409.3584 l347.7432 409.5879 l346.8833 409.3584 l346.2314 408.7466 l345.9971 407.9053 l346.2314 407.0381 l346.8833 406.4263 l347.7432 406.1968 l348.6035 406.4263 l349.2554 407.0381 l349.4897 407.9053 lB352.4092 397.3237 m352.2007 398.165 l351.5493 398.8022 l350.689 399.0317 l349.8286 398.8022 l349.1772 398.165 l348.9424 397.3237 l349.1772 396.4824 l349.8286 395.8447 l350.689 395.6152 l351.5493 395.8447 l352.2007 396.4824 l352.4092 397.3237 lB386.6602 384.6768 m386.4258 385.5181 l385.8003 386.1299 l384.9399 386.3594 l384.0537 386.1299 l383.4282 385.5181 l383.1934 384.6768 l383.4282 383.8096 l384.0537 383.1978 l384.9399 382.9683 l385.8003 383.1978 l386.4258 383.8096 l386.6602 384.6768 lB388.1201 382.9937 m387.8853 383.835 l387.2598 384.4473 l386.3735 384.6768 l385.5132 384.4473 l384.8877 383.835 l384.6533 382.9937 l384.8877 382.127 l385.5132 381.5146 l386.3735 381.2852 l387.2598 381.5146 l387.8853 382.127 l388.1201 382.9937 lB408.999 371.9277 m408.7642 372.7944 l408.1387 373.4067 l407.2524 373.6357 l406.3921 373.4067 l405.7666 372.7944 l405.5322 371.9277 l405.7666 371.0864 l406.3921 370.4741 l407.2524 370.2451 l408.1387 370.4741 l408.7642 371.0864 l408.999 371.9277 lB432.9536 358.5415 m432.7192 359.3828 l432.0938 360.02 l431.2334 360.2241 l430.3472 360.02 l429.7217 359.3828 l429.4868 358.5415 l429.7217 357.6997 l430.3472 357.0625 l431.2334 356.833 l432.0938 357.0625 l432.7192 357.6997 l432.9536 358.5415 lBU1 Ap800 Ar1 w 4 M291.021 441.729 m291.021 445.729 L278.021 445.729 L278.021 441.729 L291.021 441.729 Lfuu0 Ap0 R0 G0.4 w299.7632 451.1177 m282.4238 441.1699 lSUu0 O0 g1 w286.3926 441.0015 m279.4448 439.2573 l286.3628 445.6719 l285.2061 442.3589 l286.3926 441.0015 lfUU0 To1 0 0 1 302.3335 449 0 Tp0 TvTP0 Tr0 0 0 1 k(2.35 ) Tx (\320) Tx ( 0.28 ln) Tx /_Times-Roman 10 10 -4.2822 Tf(\() Tx /_Times-Italic 9 9 -3.7134 Tf(Z) Tx /_Times-Roman 10 10 -4.2822 Tf(\)) Tx (\r) TX TO1 Ap448.354 275.646 m448.354 493.3125 L161.6875 493.3125 L161.6875 275.646 L448.354 275.646 Ln0 To0 1 -1 0 175 394 0 Tp0 TvTP-51.3084 0 Td0 Tr0 O0 g/_Symbol 10.0001 8.2716 -2.9883 Tf1 Ta9.9729 0 Tl(\341) Tx /_NewCenturySchlbk-Roman 10.0001 8.7801 -2.5701 Tf100 Tt1 Tc(\320) Tx /_Times-Italic 10.0001 10.0001 -4.126 Tf0 Tt0 Tc(dE/dx) Tx /_Symbol 10.0001 8.2716 -2.9883 Tf(\361) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf( \(MeV ) Tx 100 Tt1 Tc(g) Tx /_Times-Roman 9 9 -3.854 Tf3 Ts0 Tt0 Tc(\320) Tx (1) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf0 Ts(cm) Tx /_Times-Roman 9 9 -3.854 Tf3 Ts(2) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf0 Ts(\)) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF