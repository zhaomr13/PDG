%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: passage-web-27.11.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/12/12
%%BoundingBox: 0 -10 343 233
%%HiResBoundingBox: 0 0 342.0562 232.7402
%%CropBox: 0 0 342.0562 232.7402
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.70</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-12T16:55:34-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-12T16:55:34-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-12T16:55:34-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqkGkaHot1bzz&#xA;3On208z3l7zlkhjdjS7lAqzAnoMVRv8Ahry5/wBWqz/6R4v+acVQ955R0Cf0OGnWkfpTJK1LeP4l&#xA;WtV2HfFUR/hry5/1arP/AKR4v+acVSSXyvoGnMJLiyheAtcT1SGPYrLJOsYUgg1ikZT/AKgpTbJT&#xA;o47/AJu/w/H3sI2MlfzhXx/H3Jna+UdAhnu5H060dbiUSRr9Xj+BRFHHx6fzIW+nIs0PB5I0SO20&#xA;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&#xA;uxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:077056DAC9206811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:077056DAC9206811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:067056DAC9206811808399C81683386A</stRef:instanceID>
            <stRef:documentID>xmp.did:067056DAC9206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:067056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T16:18:29-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:077056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T16:55:34-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">passagerpp.dvi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.916667</stDim:w>
            <stDim:h>3.430556</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=72 Y=100 K=3 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.724958</xmpG:cyan>
                           <xmpG:magenta>72.478828</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>3.295946</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=0 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=44 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>44.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=50 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -232.74 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 232.74 li
342.056 232.74 li
342.056 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.556801 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
303.182 210.005 mo
303.182 .475586 li
34.3086 .475586 li
34.3086 210.005 li
303.182 210.005 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
78.7642 .475586 mo
77.3335 -4.07422 103.063 71.5024 103.635 74.1665 cv
103.635 74.1665 109.992 98.5117 120.503 117.892 cv
120.503 117.892 134.226 147.413 150.806 164.948 cv
150.806 164.948 158.44 176.075 174.249 185.146 cv
203.867 202.144 242.49 205.379 277.454 207.786 cv
1 0 0 0 cmyk
@
[3.34081 3.34081 ] 0 dsh
82.1943 .697266 mo
82.1943 .697266 100.778 58.8506 101.635 63.2905 cv
102.493 67.7295 111.068 93.0332 112.212 95.9185 cv
112.69 97.127 113.901 101.876 115.407 105.808 cv
117.499 111.267 121.006 118.783 121.917 120.403 cv
.14725 .724788 1 .0329595 cmyk
@
[] 0 dsh
299.752 55.7432 mo
291.748 55.521 243.433 60.1831 243.433 60.1831 cv
202.551 64.6221 172.249 76.6074 172.249 76.6074 cv
166.245 78.1621 110.497 98.1382 91.9146 102.132 cv
84.4199 103.744 72.4751 108.126 60.7534 109.014 cv
49.0322 109.902 43.6001 111.899 34.4517 114.785 cv
0 1 1 0 cmyk
@
34.6421 153.479 mo
39.5977 159.694 44.9336 168.277 65.5181 179.227 cv
86.1021 190.177 105.923 197.872 138.323 203.495 cv
170.723 209.118 199.693 210.005 202.743 210.005 cv
1 1 0 0 cmyk
@
100.614 178.801 mo
107.539 183.122 110.143 185.492 149.377 197.576 cv
175.076 205.491 216.225 206.574 240.86 208.525 cv
240.86 208.525 297.178 208.23 303.182 208.23 cv
0 1 1 .44 cmyk
@
36.9297 188.697 mo
36.9297 188.697 43.79 170.646 45.3164 167.094 cv
46.8408 163.542 49.127 157.919 54.0825 156.735 cv
59.0381 155.552 60.9438 157.031 63.2314 157.919 cv
65.2461 158.701 81.8477 168.403 90.9058 173.368 cv
@
37.6919 191.953 mo
41.5034 185.146 45.3164 177.748 50.271 174.196 cv
55.2261 170.646 54.8447 171.829 58.2759 171.829 cv
61.7061 171.829 71.9976 176.268 76.5728 177.452 cv
81.1455 178.635 116.978 191.361 123.838 193.136 cv
130.699 194.913 149.377 200.239 154.333 201.127 cv
159.288 202.015 169.199 203.643 173.773 203.938 cv
.7 0 1 0 cmyk
@
303.181 210.005 mo
34.2617 210.005 li
0 0 0 1 cmyk
@
34.2617 210.005 mo
44.1714 210.005 li
@
61.3945 205.271 mo
61.3945 210.005 li
@
77.1929 210.005 mo
77.1929 205.271 li
@
88.5264 205.271 mo
88.5264 210.005 li
@
97.1128 210.005 mo
97.1128 205.271 li
@
103.981 205.271 mo
103.981 210.005 li
@
110.163 210.005 mo
110.163 205.271 li
@
115.315 205.271 mo
115.315 210.005 li
@
119.781 210.005 mo
119.781 205.271 li
@
123.902 200.684 mo
123.902 210.005 li
@
151.034 210.005 mo
151.034 205.271 li
@
166.833 205.271 mo
166.833 210.005 li
@
178.167 210.005 mo
178.167 205.271 li
@
186.753 205.271 mo
186.753 210.005 li
@
193.622 210.005 mo
193.622 205.271 li
@
199.802 205.271 mo
199.802 210.005 li
@
204.955 210.005 mo
204.955 205.271 li
@
209.419 210.005 mo
209.419 205.271 li
@
213.542 210.005 mo
213.542 200.684 li
@
240.674 205.271 mo
240.674 210.005 li
@
256.472 210.005 mo
256.472 205.271 li
@
267.462 205.271 mo
267.462 210.005 li
@
276.392 210.005 mo
276.392 205.271 li
@
283.26 205.271 mo
283.26 210.005 li
@
289.443 210.005 mo
289.443 205.271 li
@
294.595 205.271 mo
294.595 210.005 li
@
299.06 210.005 mo
299.06 205.271 li
@
34.2617 134.321 mo
44.1714 134.321 li
@
34.2617 58.7422 mo
44.1714 58.7422 li
@
34.4404 118.81 mo
39.6738 118.81 li
@
34.4404 103.692 mo
39.6738 103.692 li
@
34.4404 88.5732 mo
39.6738 88.5732 li
@
34.4404 73.4556 mo
39.6738 73.4556 li
@
34.4404 194.81 mo
39.6738 194.81 li
@
34.4404 179.691 mo
39.6738 179.691 li
@
34.4404 164.573 mo
39.6738 164.573 li
@
34.4404 149.455 mo
39.6738 149.455 li
@
34.4404 43.2451 mo
39.6738 43.2451 li
@
34.4404 28.1265 mo
39.6738 28.1265 li
@
34.4404 13.0078 mo
39.6738 13.0078 li
@
293.093 16.9028 mo
303.003 16.9028 li
@
293.093 65.1797 mo
303.003 65.1797 li
@
298.657 74.834 mo
303.003 74.834 li
@
298.657 84.4888 mo
303.003 84.4888 li
@
298.657 94.1445 mo
303.003 94.1445 li
@
298.657 103.8 mo
303.003 103.8 li
@
293.093 113.456 mo
303.003 113.456 li
@
298.657 171.402 mo
303.003 171.402 li
@
298.657 181.057 mo
303.003 181.057 li
@
298.657 190.713 mo
303.003 190.713 li
@
298.657 200.368 mo
303.003 200.368 li
@
293.093 161.731 mo
303.003 161.731 li
@
298.657 123.143 mo
303.003 123.143 li
@
298.657 132.797 mo
303.003 132.797 li
@
298.657 142.453 mo
303.003 142.453 li
@
298.657 152.108 mo
303.003 152.108 li
@
298.657 26.7661 mo
303.003 26.7661 li
@
298.657 36.4209 mo
303.003 36.4209 li
@
298.657 46.0762 mo
303.003 46.0762 li
@
298.657 55.7319 mo
303.003 55.7319 li
@
293.093 16.9048 mo
303.003 16.9048 li
@
298.657 7.45752 mo
303.003 7.45752 li
@
61.3945 5.3584 mo
61.3945 .624023 li
@
77.1929 .624023 mo
77.1929 5.3584 li
@
88.5264 5.3584 mo
88.5264 .624023 li
@
97.1128 .624023 mo
97.1128 5.3584 li
@
103.981 5.3584 mo
103.981 .624023 li
@
110.163 .624023 mo
110.163 5.3584 li
@
115.315 5.3584 mo
115.315 .624023 li
@
119.781 .624023 mo
119.781 5.3584 li
@
123.902 9.94629 mo
123.902 .624023 li
@
151.034 .624023 mo
151.034 5.3584 li
@
166.833 5.3584 mo
166.833 .624023 li
@
178.167 .624023 mo
178.167 5.3584 li
@
186.753 5.3584 mo
186.753 .624023 li
@
193.622 .624023 mo
193.622 5.3584 li
@
199.802 5.3584 mo
199.802 .624023 li
@
204.955 .624023 mo
204.955 5.3584 li
@
209.419 .624023 mo
209.419 5.3584 li
@
213.542 .624023 mo
213.542 9.94629 li
@
240.674 5.3584 mo
240.674 .624023 li
@
256.472 .624023 mo
256.472 5.3584 li
@
267.462 5.3584 mo
267.462 .624023 li
@
276.392 .624023 mo
276.392 5.3584 li
@
283.26 5.3584 mo
283.26 .624023 li
@
289.443 .624023 mo
289.443 5.3584 li
@
294.595 5.3584 mo
294.595 .624023 li
@
299.06 .624023 mo
299.06 5.3584 li
@
188.168 82.9326 mo
188.514 82.7339 188.687 82.3516 188.687 81.7866 cv
188.687 81.2246 188.485 80.8408 188.081 80.6353 cv
187.676 80.4292 187.162 80.3267 186.536 80.3267 cv
186.382 80.3267 186.286 80.3267 186.245 80.3267 cv
186.204 80.3267 186.141 80.3247 186.056 80.3218 cv
186.056 82.8203 li
186.056 82.9932 186.106 83.105 186.204 83.1558 cv
186.301 83.2065 186.528 83.2319 186.882 83.2319 cv
187.394 83.2319 187.823 83.1323 188.168 82.9326 cv
cp
187.846 79.7676 mo
188.269 79.5713 188.481 79.2197 188.481 78.7124 cv
188.481 78.1138 188.237 77.7095 187.748 77.5 cv
187.477 77.3853 187.067 77.3281 186.516 77.3281 cv
186.307 77.3281 186.179 77.3462 186.13 77.3823 cv
186.082 77.418 186.056 77.5166 186.056 77.6768 cv
186.056 79.9443 li
187.01 79.9297 li
187.345 79.9233 187.625 79.8691 187.846 79.7676 cv
cp
184.082 83.4082 mo
184.484 83.3853 184.744 83.3228 184.863 83.2202 cv
184.981 83.1182 185.04 82.8804 185.04 82.5068 cv
185.04 78.0435 li
185.04 77.6743 184.981 77.4365 184.863 77.3306 cv
184.744 77.2246 184.484 77.1616 184.082 77.1421 cv
184.082 76.9556 li
186.885 76.9556 li
187.686 76.9556 188.322 77.085 188.792 77.3433 cv
189.263 77.6016 189.498 78.0459 189.498 78.6768 cv
189.498 79.1509 189.333 79.5107 189.004 79.7559 cv
188.819 79.8965 188.54 80.0122 188.168 80.104 cv
188.627 80.2148 189.021 80.3999 189.346 80.6597 cv
189.672 80.9189 189.835 81.2822 189.835 81.7485 cv
189.835 82.5322 189.474 83.0703 188.751 83.3643 cv
188.37 83.5176 187.901 83.5942 187.344 83.5942 cv
184.082 83.5942 li
184.082 83.4082 li
cp
f
190.627 83.4326 mo
190.927 83.4063 191.126 83.3535 191.224 83.2734 cv
191.322 83.1934 191.371 83.0229 191.371 82.7612 cv
191.371 80.5518 li
191.371 80.2285 191.34 79.9976 191.28 79.8584 cv
191.22 79.7197 191.11 79.6504 190.95 79.6504 cv
190.917 79.6504 190.875 79.6543 190.821 79.6626 cv
190.767 79.6709 190.71 79.6816 190.652 79.6943 cv
190.652 79.5327 li
190.837 79.4673 191.027 79.4004 191.222 79.332 cv
191.417 79.2632 191.552 79.2144 191.626 79.1851 cv
191.789 79.123 191.957 79.0527 192.128 78.9741 cv
192.151 78.9741 192.165 78.9824 192.169 78.9985 cv
192.174 79.0151 192.177 79.0493 192.177 79.1016 cv
192.177 79.9053 li
192.386 79.6143 192.588 79.3877 192.783 79.2241 cv
192.977 79.061 193.178 78.979 193.388 78.979 cv
193.554 78.979 193.69 79.0288 193.794 79.1284 cv
193.899 79.228 193.952 79.353 193.952 79.5034 cv
193.952 79.6372 193.912 79.75 193.832 79.8413 cv
193.751 79.9331 193.652 79.9785 193.531 79.9785 cv
193.408 79.9785 193.283 79.9214 193.157 79.8071 cv
193.032 79.6929 192.933 79.6357 192.862 79.6357 cv
192.748 79.6357 192.607 79.728 192.441 79.9126 cv
192.275 80.0972 192.192 80.2871 192.192 80.4834 cv
192.192 82.6929 li
192.192 82.9736 192.257 83.1689 192.387 83.2783 cv
192.518 83.3877 192.734 83.439 193.038 83.4326 cv
193.038 83.5942 li
190.627 83.5942 li
190.627 83.4326 li
cp
f
195.076 79.8511 mo
194.972 80.0278 194.897 80.25 194.851 80.5176 cv
196.914 80.5176 li
196.878 80.1909 196.816 79.9478 196.728 79.7876 cv
196.569 79.5 196.301 79.3564 195.926 79.3564 cv
195.555 79.3564 195.272 79.5215 195.076 79.8511 cv
cp
197.417 79.4766 mo
197.763 79.7949 197.936 80.2466 197.936 80.8311 cv
194.832 80.8311 li
194.864 81.5874 195.036 82.1382 195.345 82.4834 cv
195.655 82.8286 196.021 83.0015 196.445 83.0015 cv
196.787 83.0015 197.076 82.9121 197.31 82.7324 cv
197.544 82.5532 197.761 82.2993 197.96 81.9702 cv
198.131 82.0288 li
197.998 82.4443 197.748 82.8286 197.381 83.1816 cv
197.014 83.5352 196.565 83.7119 196.034 83.7119 cv
195.421 83.7119 194.948 83.48 194.614 83.0161 cv
194.28 82.5522 194.113 82.0186 194.113 81.4141 cv
194.113 80.7578 194.307 80.1909 194.695 79.7139 cv
195.083 79.2373 195.587 78.9985 196.21 78.9985 cv
196.669 78.9985 197.072 79.1582 197.417 79.4766 cv
cp
f
198.522 83.4668 mo
198.776 83.4438 198.946 83.4014 199.031 83.3394 cv
199.161 83.2446 199.226 83.0552 199.226 82.771 cv
199.226 80.2383 li
199.226 79.9966 199.194 79.8384 199.13 79.7632 cv
199.067 79.688 198.962 79.6504 198.816 79.6504 cv
198.747 79.6504 198.696 79.6538 198.662 79.6602 cv
198.627 79.667 198.587 79.6782 198.542 79.6943 cv
198.542 79.5229 li
198.894 79.4053 li
199.021 79.3628 199.229 79.2861 199.519 79.1753 cv
199.809 79.064 199.962 79.0088 199.979 79.0088 cv
199.996 79.0088 200.005 79.0166 200.008 79.0332 cv
200.011 79.0493 200.013 79.0806 200.013 79.126 cv
200.013 79.7876 li
200.335 79.4937 200.615 79.29 200.849 79.1777 cv
201.083 79.0649 201.325 79.0088 201.573 79.0088 cv
201.908 79.0088 202.175 79.123 202.375 79.3516 cv
202.478 79.4756 202.565 79.644 202.633 79.856 cv
202.875 79.6113 203.084 79.4297 203.264 79.3125 cv
203.574 79.1099 203.889 79.0088 204.212 79.0088 cv
204.737 79.0088 205.087 79.2227 205.263 79.6504 cv
205.364 79.8921 205.415 80.2744 205.415 80.7969 cv
205.415 82.8301 li
205.415 83.062 205.466 83.2192 205.569 83.3027 cv
205.671 83.3862 205.856 83.4409 206.124 83.4668 cv
206.124 83.5942 li
203.918 83.5942 li
203.918 83.457 li
204.203 83.4312 204.389 83.3735 204.479 83.2856 cv
204.568 83.1973 204.613 83.0176 204.613 82.7466 cv
204.613 80.6353 li
204.613 80.3184 204.579 80.085 204.51 79.9346 cv
204.39 79.667 204.154 79.5327 203.801 79.5327 cv
203.589 79.5327 203.379 79.603 203.171 79.7437 cv
203.05 79.8252 202.902 79.9556 202.726 80.1353 cv
202.726 82.6436 li
202.726 82.9082 202.773 83.1094 202.866 83.2466 cv
202.958 83.3838 203.155 83.457 203.455 83.4668 cv
203.455 83.5942 li
201.21 83.5942 li
201.21 83.4668 li
201.52 83.4277 201.717 83.3525 201.802 83.2417 cv
201.887 83.1304 201.929 82.856 201.929 82.4185 cv
201.929 81.0493 li
201.929 80.5474 201.897 80.2021 201.832 80.0127 cv
201.724 79.6929 201.496 79.5327 201.147 79.5327 cv
200.949 79.5327 200.752 79.5874 200.561 79.6968 cv
200.369 79.8062 200.199 79.9492 200.052 80.1255 cv
200.052 82.8057 li
200.052 83.0537 200.095 83.2251 200.182 83.3198 cv
200.268 83.4146 200.457 83.4639 200.747 83.4668 cv
200.747 83.5942 li
198.522 83.5942 li
198.522 83.4668 li
cp
f
206.671 82.0508 mo
206.833 82.0508 li
206.907 82.4233 207.008 82.709 207.134 82.9082 cv
207.362 83.2744 207.696 83.457 208.134 83.457 cv
208.378 83.457 208.571 83.3892 208.712 83.2539 cv
208.854 83.1182 208.924 82.9429 208.924 82.7271 cv
208.924 82.5898 208.883 82.4575 208.802 82.3301 cv
208.721 82.2026 208.578 82.0786 208.373 81.958 cv
207.825 81.6445 li
207.424 81.4287 207.129 81.2114 206.94 80.9927 cv
206.75 80.7739 206.657 80.5161 206.657 80.2188 cv
206.657 79.853 206.787 79.5522 207.047 79.3174 cv
207.308 79.082 207.635 78.9644 208.03 78.9644 cv
208.203 78.9644 208.392 78.9971 208.599 79.0625 cv
208.806 79.1279 208.922 79.1606 208.949 79.1606 cv
209.007 79.1606 209.05 79.1523 209.076 79.1357 cv
209.102 79.1196 209.125 79.0938 209.144 79.0576 cv
209.262 79.0576 li
209.296 80.4243 li
209.144 80.4243 li
209.08 80.1079 208.992 79.8608 208.88 79.6846 cv
208.678 79.3579 208.387 79.1948 208.005 79.1948 cv
207.778 79.1948 207.598 79.2651 207.468 79.4053 cv
207.337 79.5459 207.272 79.7109 207.272 79.9004 cv
207.272 80.2007 207.498 80.4688 207.947 80.7036 cv
208.592 81.0518 li
209.287 81.4307 209.633 81.8716 209.633 82.3745 cv
209.633 82.7598 209.49 83.0747 209.202 83.3198 cv
208.914 83.5649 208.537 83.6875 208.072 83.6875 cv
207.876 83.6875 207.656 83.6548 207.408 83.5894 cv
207.161 83.5239 207.014 83.4912 206.969 83.4912 cv
206.93 83.4912 206.896 83.5054 206.867 83.5332 cv
206.837 83.5605 206.814 83.5942 206.798 83.6333 cv
206.671 83.6333 li
206.671 82.0508 li
cp
f
210.567 82.0508 mo
210.728 82.0508 li
210.802 82.4233 210.904 82.709 211.03 82.9082 cv
211.257 83.2744 211.591 83.457 212.03 83.457 cv
212.274 83.457 212.466 83.3892 212.608 83.2539 cv
212.75 83.1182 212.82 82.9429 212.82 82.7271 cv
212.82 82.5898 212.779 82.4575 212.698 82.3301 cv
212.617 82.2026 212.473 82.0786 212.268 81.958 cv
211.72 81.6445 li
211.32 81.4287 211.025 81.2114 210.835 80.9927 cv
210.646 80.7739 210.552 80.5161 210.552 80.2188 cv
210.552 79.853 210.682 79.5522 210.943 79.3174 cv
211.204 79.082 211.531 78.9644 211.925 78.9644 cv
212.098 78.9644 212.288 78.9971 212.495 79.0625 cv
212.702 79.1279 212.818 79.1606 212.844 79.1606 cv
212.903 79.1606 212.946 79.1523 212.971 79.1357 cv
212.998 79.1196 213.02 79.0938 213.04 79.0576 cv
213.158 79.0576 li
213.192 80.4243 li
213.04 80.4243 li
212.975 80.1079 212.887 79.8608 212.776 79.6846 cv
212.574 79.3579 212.283 79.1948 211.901 79.1948 cv
211.673 79.1948 211.494 79.2651 211.364 79.4053 cv
211.233 79.5459 211.167 79.7109 211.167 79.9004 cv
211.167 80.2007 211.393 80.4688 211.842 80.7036 cv
212.488 81.0518 li
213.182 81.4307 213.529 81.8716 213.529 82.3745 cv
213.529 82.7598 213.385 83.0747 213.097 83.3198 cv
212.809 83.5649 212.432 83.6875 211.967 83.6875 cv
211.772 83.6875 211.551 83.6548 211.303 83.5894 cv
211.056 83.5239 210.91 83.4912 210.865 83.4912 cv
210.826 83.4912 210.792 83.5054 210.762 83.5332 cv
210.733 83.5605 210.709 83.5942 210.694 83.6333 cv
210.567 83.6333 li
210.567 82.0508 li
cp
f
216.487 79.0771 mo
216.487 79.4297 li
215.49 79.4297 li
215.48 82.252 li
215.48 82.5 215.5 82.688 215.543 82.8154 cv
215.622 83.0405 215.775 83.1533 216.002 83.1533 cv
216.121 83.1533 216.222 83.1255 216.308 83.0698 cv
216.395 83.0146 216.494 82.9263 216.604 82.8057 cv
216.731 82.9131 li
216.624 83.0601 li
216.455 83.2891 216.275 83.4507 216.085 83.5454 cv
215.897 83.6401 215.714 83.6875 215.539 83.6875 cv
215.154 83.6875 214.893 83.5156 214.756 83.1729 cv
214.681 82.9868 214.644 82.729 214.644 82.3989 cv
214.644 79.4297 li
214.111 79.4297 li
214.094 79.4199 214.083 79.4102 214.075 79.4004 cv
214.066 79.3906 214.062 79.3779 214.062 79.3613 cv
214.062 79.3286 214.07 79.3032 214.084 79.2852 cv
214.099 79.2676 214.145 79.2256 214.223 79.1606 cv
214.449 78.9741 214.611 78.8232 214.709 78.707 cv
214.809 78.5913 215.043 78.2852 215.412 77.7886 cv
215.454 77.7886 215.479 77.792 215.487 77.7983 cv
215.496 77.8052 215.5 77.8296 215.5 77.8721 cv
215.5 79.0771 li
216.487 79.0771 li
cp
f
216.765 83.4326 mo
217.065 83.4063 217.264 83.3535 217.362 83.2734 cv
217.459 83.1934 217.508 83.0229 217.508 82.7612 cv
217.508 80.5518 li
217.508 80.2285 217.478 79.9976 217.417 79.8584 cv
217.358 79.7197 217.248 79.6504 217.087 79.6504 cv
217.055 79.6504 217.012 79.6543 216.958 79.6626 cv
216.905 79.6709 216.848 79.6816 216.79 79.6943 cv
216.79 79.5327 li
216.975 79.4673 217.165 79.4004 217.36 79.332 cv
217.554 79.2632 217.69 79.2144 217.764 79.1851 cv
217.926 79.123 218.094 79.0527 218.266 78.9741 cv
218.289 78.9741 218.302 78.9824 218.307 78.9985 cv
218.312 79.0151 218.315 79.0493 218.315 79.1016 cv
218.315 79.9053 li
218.524 79.6143 218.726 79.3877 218.92 79.2241 cv
219.115 79.061 219.316 78.979 219.526 78.979 cv
219.692 78.979 219.828 79.0288 219.932 79.1284 cv
220.037 79.228 220.089 79.353 220.089 79.5034 cv
220.089 79.6372 220.049 79.75 219.969 79.8413 cv
219.889 79.9331 219.79 79.9785 219.668 79.9785 cv
219.545 79.9785 219.42 79.9214 219.294 79.8071 cv
219.169 79.6929 219.071 79.6357 219 79.6357 cv
218.885 79.6357 218.745 79.728 218.579 79.9126 cv
218.413 80.0972 218.33 80.2871 218.33 80.4834 cv
218.33 82.6929 li
218.33 82.9736 218.395 83.1689 218.525 83.2783 cv
218.656 83.3877 218.872 83.439 219.175 83.4326 cv
219.175 83.5942 li
216.765 83.5942 li
216.765 83.4326 li
cp
f
222.924 80.8799 mo
222.55 81.0044 222.241 81.1416 221.996 81.2915 cv
221.527 81.5825 221.292 81.9121 221.292 82.2813 cv
221.292 82.5786 221.39 82.7974 221.585 82.9375 cv
221.712 83.0293 221.854 83.0747 222.01 83.0747 cv
222.226 83.0747 222.432 83.0146 222.628 82.8936 cv
222.826 82.7729 222.924 82.6191 222.924 82.4331 cv
222.924 80.8799 li
cp
221.13 81.4336 mo
221.43 81.2378 222.029 80.9717 222.924 80.6353 cv
222.924 80.2188 li
222.924 79.8857 222.892 79.6538 222.827 79.5229 cv
222.716 79.3042 222.486 79.1948 222.137 79.1948 cv
221.971 79.1948 221.813 79.2373 221.664 79.3223 cv
221.513 79.4102 221.439 79.5313 221.439 79.6846 cv
221.439 79.7236 221.447 79.79 221.463 79.8833 cv
221.479 79.9761 221.488 80.0356 221.488 80.062 cv
221.488 80.2446 221.427 80.3721 221.306 80.4438 cv
221.238 80.4863 221.157 80.5078 221.062 80.5078 cv
220.916 80.5078 220.803 80.4595 220.725 80.3633 cv
220.647 80.2671 220.608 80.1597 220.608 80.0425 cv
220.608 79.814 220.749 79.5742 221.031 79.3247 cv
221.312 79.0747 221.725 78.9497 222.27 78.9497 cv
222.902 78.9497 223.331 79.1558 223.555 79.5669 cv
223.675 79.7925 223.736 80.1206 223.736 80.5518 cv
223.736 82.5166 li
223.736 82.7061 223.75 82.8364 223.775 82.9082 cv
223.818 83.0356 223.906 83.0996 224.04 83.0996 cv
224.114 83.0996 224.176 83.0879 224.225 83.0649 cv
224.274 83.0425 224.359 82.9868 224.479 82.8984 cv
224.479 83.1533 li
224.375 83.2808 224.262 83.3853 224.142 83.4668 cv
223.959 83.5908 223.774 83.6528 223.584 83.6528 cv
223.363 83.6528 223.203 83.5811 223.103 83.4375 cv
223.003 83.2939 222.949 83.1221 222.939 82.9229 cv
222.692 83.1387 222.48 83.2988 222.304 83.4033 cv
222.007 83.5796 221.725 83.668 221.458 83.668 cv
221.178 83.668 220.935 83.5688 220.73 83.3711 cv
220.525 83.1738 220.421 82.9229 220.421 82.6191 cv
220.421 82.146 220.658 81.7505 221.13 81.4336 cv
cp
f
224.586 83.457 mo
224.854 83.4214 225.029 83.355 225.112 83.2588 cv
225.195 83.1621 225.237 82.9346 225.237 82.5752 cv
225.237 77.8721 li
225.237 77.689 225.213 77.5542 225.166 77.4678 cv
225.119 77.3813 225.003 77.3379 224.821 77.3379 cv
224.786 77.3379 224.75 77.3403 224.716 77.3452 cv
224.682 77.3501 224.643 77.356 224.601 77.3623 cv
224.601 77.186 li
224.745 77.1436 224.921 77.0923 225.131 77.0317 cv
225.341 76.9712 225.488 76.9282 225.569 76.9019 cv
226.039 76.7549 li
226.048 76.7891 li
226.048 79.7974 li
226.253 79.562 226.436 79.3892 226.595 79.2778 cv
226.882 79.082 227.192 78.9839 227.525 78.9839 cv
228.052 78.9839 228.413 79.2061 228.605 79.6504 cv
228.709 79.8857 228.761 80.1943 228.761 80.5762 cv
228.761 82.5752 li
228.761 82.9214 228.801 83.147 228.881 83.2515 cv
228.96 83.356 229.125 83.4243 229.373 83.457 cv
229.373 83.5942 li
227.255 83.5942 li
227.255 83.457 li
227.54 83.418 227.721 83.3511 227.803 83.2563 cv
227.884 83.1616 227.925 82.9346 227.925 82.5752 cv
227.925 80.5908 li
227.925 80.2744 227.873 80.0176 227.766 79.8218 cv
227.661 79.626 227.46 79.5278 227.167 79.5278 cv
226.914 79.5278 226.667 79.6191 226.429 79.8022 cv
226.192 79.9854 226.073 80.1045 226.073 80.1597 cv
226.073 82.5752 li
226.073 82.9409 226.115 83.1699 226.2 83.2612 cv
226.285 83.3525 226.465 83.418 226.743 83.457 cv
226.743 83.5942 li
224.586 83.5942 li
224.586 83.457 li
cp
f
229.709 83.457 mo
230.013 83.4277 230.218 83.3662 230.326 83.2734 cv
230.433 83.1802 230.487 82.998 230.487 82.7271 cv
230.487 77.9404 li
230.487 77.7251 230.469 77.5762 230.433 77.4946 cv
230.368 77.3574 230.236 77.2891 230.038 77.2891 cv
229.992 77.2891 229.942 77.2939 229.888 77.3037 cv
229.834 77.3135 229.767 77.3281 229.685 77.3477 cv
229.685 77.186 li
230.125 77.0684 230.655 76.9116 231.274 76.7158 cv
231.296 76.7158 231.311 76.7256 231.316 76.7451 cv
231.321 76.7646 231.323 76.8071 231.323 76.8726 cv
231.323 82.7466 li
231.323 83.0308 231.372 83.2144 231.469 83.2979 cv
231.567 83.3813 231.769 83.4341 232.076 83.457 cv
232.076 83.5942 li
229.709 83.5942 li
229.709 83.457 li
cp
f
233.835 79.0576 mo
233.835 82.1929 li
233.835 82.415 233.866 82.5933 233.928 82.7271 cv
234.048 82.9751 234.27 83.0996 234.593 83.0996 cv
234.815 83.0996 235.031 83.0259 235.243 82.8789 cv
235.364 82.7974 235.486 82.6846 235.61 82.541 cv
235.61 79.856 li
235.61 79.6045 235.561 79.4399 235.463 79.3613 cv
235.366 79.2827 235.169 79.2358 234.876 79.2192 cv
234.876 79.0576 li
236.456 79.0576 li
236.456 82.5068 li
236.456 82.729 236.496 82.8813 236.575 82.9648 cv
236.655 83.0479 236.824 83.085 237.082 83.0747 cv
237.082 83.2119 li
236.902 83.2612 236.77 83.2979 236.685 83.3223 cv
236.6 83.3467 236.458 83.3916 236.26 83.457 cv
236.175 83.4863 235.99 83.5566 235.703 83.668 cv
235.686 83.668 235.676 83.6602 235.673 83.6455 cv
235.67 83.6309 235.668 83.6138 235.668 83.5942 cv
235.668 82.8057 li
235.447 83.0698 235.245 83.2661 235.062 83.3936 cv
234.786 83.5894 234.492 83.6875 234.182 83.6875 cv
233.899 83.6875 233.631 83.5859 233.38 83.3833 cv
233.126 83.1836 233 82.8486 233 82.3774 cv
233 79.8315 li
233 79.5723 232.944 79.3989 232.833 79.3115 cv
232.761 79.2563 232.608 79.2173 232.374 79.1948 cv
232.374 79.0576 li
233.835 79.0576 li
cp
f
237.472 83.457 mo
237.704 83.4277 237.866 83.3696 237.958 83.2832 cv
238.051 83.1968 238.098 83.0029 238.098 82.7026 cv
238.098 80.2139 li
238.098 80.0063 238.079 79.8608 238.04 79.7764 cv
237.977 79.6533 237.85 79.5918 237.658 79.5918 cv
237.628 79.5918 237.598 79.5933 237.568 79.5967 cv
237.537 79.5996 237.499 79.6045 237.453 79.6113 cv
237.453 79.4399 li
237.586 79.4004 237.903 79.2993 238.401 79.1357 cv
238.861 78.9839 li
238.883 78.9839 238.897 78.9922 238.902 79.0088 cv
238.907 79.0249 238.91 79.0479 238.91 79.0771 cv
238.91 79.7974 li
239.208 79.5166 239.443 79.3237 239.612 79.2192 cv
239.866 79.0591 240.129 78.979 240.403 78.979 cv
240.624 78.979 240.826 79.043 241.007 79.1704 cv
241.359 79.4185 241.535 79.8608 241.535 80.498 cv
241.535 82.7856 li
241.535 83.021 241.582 83.1909 241.675 83.2954 cv
241.769 83.3999 241.926 83.4536 242.146 83.457 cv
242.146 83.5942 li
240.058 83.5942 li
240.058 83.457 li
240.296 83.4243 240.462 83.3584 240.557 83.2588 cv
240.652 83.1592 240.699 82.9429 240.699 82.6094 cv
240.699 80.5176 li
240.699 80.2368 240.647 80.0039 240.543 79.8193 cv
240.439 79.6348 240.249 79.5425 239.969 79.5425 cv
239.778 79.5425 239.583 79.6079 239.386 79.7388 cv
239.276 79.814 239.133 79.938 238.958 80.1108 cv
238.958 82.8545 li
238.958 83.0898 239.01 83.2471 239.115 83.3271 cv
239.219 83.4072 239.383 83.4507 239.609 83.457 cv
239.609 83.5942 li
237.472 83.5942 li
237.472 83.457 li
cp
f
245.293 81.7031 mo
245.49 81.5464 245.587 81.2739 245.587 80.8848 cv
245.587 80.5747 245.508 80.2251 245.35 79.8364 cv
245.192 79.4478 244.929 79.2534 244.561 79.2534 cv
244.242 79.2534 244.021 79.4053 243.901 79.709 cv
243.838 79.8691 243.808 80.0669 243.808 80.3018 cv
243.808 80.7007 243.904 81.0581 244.096 81.375 cv
244.289 81.6919 244.538 81.8501 244.844 81.8501 cv
245.023 81.8501 245.173 81.8013 245.293 81.7031 cv
cp
243.742 85.0688 mo
244.05 85.1733 244.403 85.2256 244.8 85.2256 cv
245.341 85.2256 245.781 85.1318 246.12 84.9438 cv
246.458 84.7563 246.628 84.5249 246.628 84.251 cv
246.628 84.0317 246.492 83.8867 246.217 83.8149 cv
246.047 83.7725 245.725 83.7476 245.252 83.7412 cv
245.131 83.7378 245.003 83.7339 244.87 83.729 cv
244.736 83.7241 244.614 83.7183 244.502 83.7119 cv
244.431 83.7085 244.315 83.6953 244.155 83.6729 cv
243.995 83.6499 243.875 83.6304 243.797 83.6138 cv
243.758 83.6138 243.663 83.7168 243.511 83.9224 cv
243.357 84.1313 243.28 84.3242 243.28 84.5005 cv
243.28 84.7749 243.434 84.9644 243.742 85.0688 cv
cp
243.224 81.4238 mo
243.059 81.1724 242.977 80.8896 242.977 80.5762 cv
242.977 80.1943 243.128 79.8315 243.431 79.4888 cv
243.735 79.1455 244.163 78.9741 244.717 78.9741 cv
244.955 78.9741 245.217 79.0308 245.504 79.1431 cv
245.791 79.2559 246.066 79.3125 246.331 79.3125 cv
246.399 79.3125 246.502 79.3101 246.641 79.3052 cv
246.779 79.3003 246.879 79.2979 246.941 79.2979 cv
247 79.2979 li
247 79.6943 li
246.154 79.6943 li
246.213 79.8315 246.258 79.9507 246.292 80.0522 cv
246.346 80.2417 246.375 80.4214 246.375 80.5908 cv
246.375 80.9634 246.22 81.3057 245.913 81.6172 cv
245.604 81.9292 245.19 82.0854 244.668 82.0854 cv
244.586 82.0854 244.44 82.0708 244.228 82.041 cv
244.133 82.041 244.008 82.1211 243.852 82.2813 cv
243.696 82.4414 243.618 82.5718 243.618 82.6733 cv
243.618 82.7778 243.731 82.8545 243.959 82.9033 cv
244.11 82.936 244.277 82.9526 244.459 82.9526 cv
245.298 82.9526 245.868 83 246.167 83.0947 cv
246.661 83.248 246.907 83.5781 246.907 84.084 cv
246.907 84.6001 246.62 85.0117 246.044 85.3188 cv
245.469 85.6255 244.888 85.7793 244.301 85.7793 cv
243.767 85.7793 243.343 85.6709 243.031 85.4536 cv
242.717 85.2363 242.561 85.0083 242.561 84.77 cv
242.561 84.6523 242.603 84.5371 242.685 84.4248 cv
242.768 84.312 242.931 84.1445 243.175 83.9224 cv
243.497 83.6333 li
243.554 83.5747 li
243.406 83.5156 243.294 83.459 243.22 83.4033 cv
243.09 83.3018 243.026 83.186 243.026 83.0552 cv
243.026 82.9346 243.082 82.8013 243.195 82.6563 cv
243.307 82.5107 243.547 82.2749 243.916 81.9482 cv
243.619 81.8501 243.388 81.6753 243.224 81.4238 cv
cp
f
183.694 31.5474 mo
184.103 31.5044 184.368 31.4312 184.49 31.3281 cv
184.611 31.2256 184.671 30.9648 184.671 30.5459 cv
184.671 25.5869 li
184.671 25.1914 184.612 24.9326 184.493 24.811 cv
184.373 24.6895 184.107 24.6143 183.694 24.5854 cv
183.694 24.3784 li
186.833 24.3784 li
186.833 24.5854 li
186.424 24.6069 186.15 24.6743 186.01 24.7866 cv
185.871 24.8994 185.801 25.1406 185.801 25.5107 cv
185.801 30.8672 li
185.801 30.9907 185.822 31.0874 185.864 31.1582 cv
185.906 31.229 185.997 31.2734 186.138 31.2915 cv
186.222 31.3027 186.31 31.3101 186.402 31.3135 cv
186.495 31.3169 186.667 31.3188 186.921 31.3188 cv
187.912 31.3188 188.58 31.2373 188.928 31.0737 cv
189.276 30.9106 189.614 30.4932 189.94 29.8218 cv
190.222 29.8218 li
189.678 31.7544 li
183.694 31.7544 li
183.694 31.5474 li
cp
f
191.651 27.5957 mo
191.535 27.7915 191.452 28.0381 191.401 28.3359 cv
193.693 28.3359 li
193.654 27.9731 193.584 27.7026 193.487 27.5249 cv
193.309 27.2056 193.012 27.0459 192.596 27.0459 cv
192.183 27.0459 191.869 27.229 191.651 27.5957 cv
cp
194.252 27.1792 mo
194.636 27.5327 194.829 28.0347 194.829 28.6841 cv
191.379 28.6841 li
191.416 29.5244 191.606 30.1362 191.95 30.52 cv
192.293 30.9038 192.701 31.0957 193.171 31.0957 cv
193.552 31.0957 193.873 30.9961 194.133 30.7969 cv
194.394 30.5977 194.634 30.3154 194.856 29.9497 cv
195.045 30.0151 li
194.897 30.4766 194.62 30.9038 194.212 31.2964 cv
193.804 31.689 193.306 31.8853 192.715 31.8853 cv
192.035 31.8853 191.509 31.6274 191.138 31.1118 cv
190.766 30.5967 190.581 30.0034 190.581 29.332 cv
190.581 28.6025 190.796 27.9731 191.227 27.4429 cv
191.659 26.9131 192.219 26.6484 192.911 26.6484 cv
193.421 26.6484 193.869 26.8252 194.252 27.1792 cv
cp
f
198.49 28.7388 mo
198.073 28.8765 197.729 29.0288 197.458 29.1958 cv
196.936 29.519 196.675 29.8853 196.675 30.2954 cv
196.675 30.626 196.784 30.8691 197.001 31.0249 cv
197.142 31.1265 197.3 31.1772 197.474 31.1772 cv
197.712 31.1772 197.942 31.1104 198.161 30.9761 cv
198.38 30.8418 198.49 30.6709 198.49 30.4644 cv
198.49 28.7388 li
cp
196.497 29.354 mo
196.83 29.1362 197.494 28.8403 198.49 28.4663 cv
198.49 28.0039 li
198.49 27.6338 198.454 27.376 198.381 27.231 cv
198.257 26.9878 198.002 26.8662 197.615 26.8662 cv
197.43 26.8662 197.254 26.9131 197.088 27.0078 cv
196.921 27.1055 196.838 27.2397 196.838 27.4106 cv
196.838 27.4541 196.847 27.5273 196.866 27.6309 cv
196.883 27.7344 196.893 27.8008 196.893 27.8296 cv
196.893 28.0327 196.826 28.1743 196.692 28.2544 cv
196.616 28.3013 196.525 28.3252 196.42 28.3252 cv
196.257 28.3252 196.132 28.2715 196.045 28.1646 cv
195.958 28.0571 195.915 27.9385 195.915 27.8076 cv
195.915 27.5537 196.072 27.2881 196.385 27.0103 cv
196.698 26.7329 197.157 26.5938 197.762 26.5938 cv
198.464 26.5938 198.94 26.8228 199.19 27.2798 cv
199.324 27.5303 199.391 27.895 199.391 28.374 cv
199.391 30.5566 li
199.391 30.7671 199.406 30.9126 199.435 30.9922 cv
199.482 31.1338 199.58 31.2046 199.728 31.2046 cv
199.811 31.2046 199.88 31.1919 199.934 31.1665 cv
199.989 31.1411 200.083 31.0796 200.216 30.9814 cv
200.216 31.2646 li
200.101 31.4063 199.976 31.522 199.842 31.6128 cv
199.639 31.751 199.433 31.8198 199.223 31.8198 cv
198.976 31.8198 198.798 31.7397 198.688 31.5801 cv
198.578 31.4204 198.517 31.23 198.505 31.0088 cv
198.231 31.248 197.996 31.4258 197.799 31.542 cv
197.47 31.7383 197.157 31.8359 196.86 31.8359 cv
196.548 31.8359 196.279 31.7266 196.051 31.5068 cv
195.823 31.2871 195.708 31.0088 195.708 30.6709 cv
195.708 30.145 195.971 29.7061 196.497 29.354 cv
cp
f
203.757 31.0195 mo
203.931 30.8525 204.018 30.6948 204.018 30.5459 cv
204.018 28.2104 li
204.018 27.7388 203.892 27.4058 203.64 27.2119 cv
203.389 27.0176 203.144 26.9204 202.905 26.9204 cv
202.449 26.9204 202.093 27.123 201.84 27.5273 cv
201.586 27.9321 201.459 28.4302 201.459 29.022 cv
201.459 29.606 201.595 30.127 201.865 30.584 cv
202.134 31.0415 202.537 31.27 203.073 31.27 cv
203.355 31.27 203.583 31.1865 203.757 31.0195 cv
cp
203.6 26.7847 mo
203.745 26.8608 203.884 26.9658 204.018 27.1001 cv
204.018 25.3691 li
204.018 25.1479 203.994 24.9956 203.945 24.9116 cv
203.896 24.8286 203.779 24.7866 203.594 24.7866 cv
203.551 24.7866 203.513 24.7886 203.48 24.792 cv
203.448 24.7959 203.375 24.8027 203.263 24.814 cv
203.263 24.6343 li
203.708 24.52 li
203.872 24.4766 204.035 24.4312 204.198 24.3838 cv
204.36 24.3369 204.503 24.2915 204.626 24.2476 cv
204.684 24.2295 204.781 24.1953 204.915 24.1445 cv
204.947 24.1553 li
204.936 24.7266 li
204.932 24.9336 204.929 25.147 204.925 25.3662 cv
204.921 25.5859 204.919 25.8027 204.919 26.0171 cv
204.909 30.4644 li
204.909 30.7002 204.938 30.8652 204.996 30.9595 cv
205.053 31.0542 205.208 31.1011 205.458 31.1011 cv
205.498 31.1011 205.537 31.1001 205.577 31.0986 cv
205.617 31.0967 205.657 31.0923 205.697 31.085 cv
205.697 31.2646 li
205.674 31.272 205.413 31.3623 204.909 31.5366 cv
204.056 31.8579 li
204.018 31.8086 li
204.018 31.1392 li
203.815 31.3608 203.64 31.5186 203.492 31.6128 cv
203.227 31.7764 202.921 31.8579 202.574 31.8579 cv
201.958 31.8579 201.458 31.6191 201.077 31.1421 cv
200.695 30.665 200.504 30.1123 200.504 29.4844 cv
200.504 28.6968 200.733 28.021 201.191 27.4565 cv
201.649 26.8926 202.209 26.6104 202.872 26.6104 cv
203.136 26.6104 203.379 26.6685 203.6 26.7847 cv
cp
f
213.002 25.6304 mo
213.465 25.0464 214.012 24.5762 214.642 24.2207 cv
214.746 24.4004 li
214.163 24.8647 213.747 25.3164 213.497 25.7554 cv
213.058 26.5215 212.839 27.541 212.839 28.8149 cv
212.839 29.7583 212.922 30.5371 213.089 31.1504 cv
213.382 32.2241 213.934 33.0283 214.746 33.5615 cv
214.604 33.7412 li
214.159 33.5273 213.677 33.1079 213.16 32.4839 cv
212.301 31.4497 211.873 30.2739 211.873 28.9565 cv
211.873 27.6934 212.249 26.585 213.002 25.6304 cv
cp
f
219.085 31.6294 mo
223.962 24.8027 li
221.399 24.8027 li
220.754 24.8027 220.296 24.9644 220.025 25.2876 cv
219.862 25.48 219.734 25.812 219.639 26.2837 cv
219.351 26.2837 li
219.574 24.3784 li
225.446 24.3784 li
225.446 24.5034 li
220.568 31.3296 li
223.455 31.3296 li
224.109 31.3296 224.586 31.1758 224.886 30.8672 cv
225.073 30.6709 225.242 30.314 225.391 29.7949 cv
225.652 29.7949 li
225.375 31.7544 li
219.085 31.7544 li
219.085 31.6294 li
cp
f
235.152 29.6802 mo
235.152 30.4424 li
229.541 30.4424 li
229.541 29.6802 li
235.152 29.6802 li
cp
235.152 27.4321 mo
235.152 28.1943 li
229.541 28.1943 li
229.541 27.4321 li
235.152 27.4321 li
cp
f
241.837 26.8081 mo
242.062 26.5293 242.174 26.1924 242.174 25.7974 cv
242.174 25.4531 242.068 25.1606 241.856 24.9194 cv
241.644 24.6787 241.323 24.5581 240.892 24.5581 cv
240.559 24.5581 240.284 24.6631 240.067 24.8735 cv
239.849 25.0835 239.741 25.3389 239.741 25.6396 cv
239.741 25.9805 239.869 26.2964 240.124 26.5879 cv
240.378 26.8799 240.714 27.1543 241.131 27.4116 cv
241.471 27.1724 241.707 26.9712 241.837 26.8081 cv
cp
242.005 31.2163 mo
242.219 30.9844 242.326 30.6943 242.326 30.3462 cv
242.326 29.9517 242.212 29.6318 241.987 29.3872 cv
241.76 29.1426 241.295 28.772 240.593 28.2754 cv
240.282 28.4712 240.055 28.7251 239.915 29.0366 cv
239.773 29.3481 239.703 29.6489 239.703 29.939 cv
239.703 30.4351 239.831 30.8301 240.085 31.1235 cv
240.34 31.417 240.666 31.564 241.06 31.564 cv
241.477 31.564 241.792 31.4478 242.005 31.2163 cv
cp
239.317 27.1221 mo
239.049 26.7734 238.915 26.3892 238.915 25.9678 cv
238.915 25.4888 239.113 25.0825 239.509 24.7485 cv
239.906 24.4146 240.421 24.2476 241.055 24.2476 cv
241.638 24.2476 242.101 24.4058 242.446 24.7212 cv
242.79 25.0371 242.961 25.4038 242.961 25.8213 cv
242.961 26.2461 242.786 26.627 242.434 26.9644 cv
242.232 27.1567 241.904 27.3784 241.452 27.6289 cv
242.067 28.0859 242.508 28.4844 242.774 28.8237 cv
243.041 29.1626 243.173 29.563 243.173 30.0234 cv
243.173 30.5464 242.977 30.9854 242.583 31.3408 cv
242.191 31.6963 241.666 31.874 241.006 31.874 cv
240.416 31.874 239.91 31.71 239.488 31.3813 cv
239.066 31.0532 238.855 30.6201 238.855 30.083 cv
238.855 29.6226 239.001 29.2158 239.295 28.8638 cv
239.487 28.6353 239.82 28.3613 240.294 28.042 cv
239.817 27.6572 239.491 27.3506 239.317 27.1221 cv
cp
f
244.157 31.6294 mo
245.482 30.251 246.382 29.2393 246.857 28.5938 cv
247.331 27.9487 247.568 27.3193 247.568 26.7065 cv
247.568 26.1699 247.423 25.7612 247.133 25.4805 cv
246.843 25.1992 246.498 25.0586 246.096 25.0586 cv
245.6 25.0586 245.198 25.2402 244.89 25.6025 cv
244.72 25.8022 244.557 26.1084 244.402 26.522 cv
244.167 26.4727 li
244.349 25.6387 244.656 25.0591 245.088 24.7349 cv
245.521 24.4102 245.986 24.2476 246.482 24.2476 cv
247.093 24.2476 247.588 24.4409 247.967 24.8271 cv
248.345 25.2134 248.535 25.6855 248.535 26.2441 cv
248.535 26.8384 248.33 27.4116 247.92 27.9624 cv
247.511 28.5137 246.623 29.4946 245.253 30.9053 cv
247.747 30.9053 li
248.094 30.9053 248.339 30.8633 248.48 30.7803 cv
248.622 30.6968 248.781 30.4937 248.958 30.1709 cv
249.1 30.2363 li
248.497 31.7544 li
244.157 31.7544 li
244.157 31.6294 li
cp
f
252.342 30.5459 mo
252.201 31.0288 251.995 31.4839 251.723 31.9121 cv
251.437 32.3696 251.054 32.7959 250.577 33.1914 cv
250.261 33.4526 249.998 33.6362 249.784 33.7412 cv
249.68 33.5615 li
250.238 33.1372 250.645 32.7031 250.903 32.2607 cv
251.359 31.4766 251.587 30.4409 251.587 29.1523 cv
251.587 28.1108 251.482 27.2598 251.272 26.5991 cv
250.979 25.6665 250.448 24.9336 249.68 24.4004 cv
249.822 24.2207 li
250.394 24.54 250.926 25.0225 251.418 25.6685 cv
252.175 26.6631 252.554 27.7769 252.554 29.0107 cv
252.554 29.5518 252.483 30.0635 252.342 30.5459 cv
cp
f
112.211 20.1279 mo
111.928 20.0039 111.569 19.9419 111.136 19.9419 cv
110.931 19.9419 110.805 19.9624 110.757 20.0029 cv
110.71 20.0439 110.687 20.1348 110.687 20.2749 cv
110.687 22.8911 li
110.866 22.9077 110.983 22.9175 111.038 22.9204 cv
111.094 22.9238 111.147 22.9253 111.2 22.9253 cv
111.659 22.9253 112.021 22.8604 112.285 22.7295 cv
112.764 22.4912 113.003 22.0454 113.003 21.3921 cv
113.003 20.7778 112.739 20.3569 112.211 20.1279 cv
cp
108.833 26.022 mo
109.215 25.9863 109.453 25.9106 109.547 25.7949 cv
109.642 25.6797 109.689 25.4155 109.689 25.0029 cv
109.689 20.6572 li
109.689 20.3076 109.636 20.0776 109.53 19.9663 cv
109.424 19.8555 109.192 19.7852 108.833 19.7559 cv
108.833 19.5693 li
111.473 19.5693 li
112.321 19.5693 112.969 19.7344 113.419 20.0645 cv
113.869 20.3945 114.094 20.8286 114.094 21.3677 cv
114.094 22.0503 113.844 22.5449 113.346 22.8521 cv
112.847 23.1592 112.223 23.3125 111.473 23.3125 cv
111.366 23.3125 111.228 23.3101 111.061 23.3052 cv
110.893 23.3003 110.768 23.2979 110.687 23.2979 cv
110.687 25.1206 li
110.687 25.4971 110.744 25.7344 110.86 25.832 cv
110.976 25.9292 111.234 25.9927 111.635 26.022 cv
111.635 26.208 li
108.833 26.208 li
108.833 26.022 li
cp
.14725 .724788 1 .0329595 cmyk
f
115.894 22.1611 mo
115.567 22.4585 115.404 22.9712 115.404 23.6997 cv
115.404 24.2813 115.535 24.8232 115.798 25.3262 cv
116.061 25.8291 116.426 26.0806 116.893 26.0806 cv
117.258 26.0806 117.54 25.9126 117.737 25.5762 cv
117.935 25.2397 118.034 24.7988 118.034 24.2534 cv
118.034 23.688 117.908 23.1558 117.657 22.6563 cv
117.405 22.1563 117.041 21.9063 116.564 21.9063 cv
116.307 21.9063 116.083 21.9917 115.894 22.1611 cv
cp
115.113 22.2861 mo
115.525 21.8369 116.055 21.6123 116.704 21.6123 cv
117.349 21.6123 117.884 21.8247 118.307 22.2495 cv
118.731 22.6738 118.943 23.2393 118.943 23.9443 cv
118.943 24.5947 118.737 25.1597 118.327 25.6396 cv
117.917 26.1196 117.385 26.3599 116.733 26.3599 cv
116.107 26.3599 115.578 26.1294 115.145 25.6689 cv
114.711 25.2085 114.495 24.6304 114.495 23.9346 cv
114.495 23.2847 114.701 22.7354 115.113 22.2861 cv
cp
f
119.769 24.6646 mo
119.93 24.6646 li
120.005 25.0371 120.105 25.3228 120.232 25.522 cv
120.46 25.8882 120.793 26.0708 121.232 26.0708 cv
121.476 26.0708 121.668 26.0029 121.81 25.8677 cv
121.952 25.7319 122.022 25.5566 122.022 25.3408 cv
122.022 25.2036 121.981 25.0713 121.9 24.9438 cv
121.818 24.8164 121.675 24.6924 121.47 24.5718 cv
120.922 24.2583 li
120.522 24.0425 120.227 23.8252 120.038 23.6064 cv
119.849 23.3877 119.754 23.1299 119.754 22.8325 cv
119.754 22.4668 119.884 22.166 120.145 21.9312 cv
120.406 21.6958 120.733 21.5781 121.127 21.5781 cv
121.3 21.5781 121.49 21.6108 121.697 21.6763 cv
121.904 21.7417 122.021 21.7744 122.046 21.7744 cv
122.105 21.7744 122.147 21.7661 122.174 21.7495 cv
122.2 21.7334 122.223 21.7075 122.242 21.6714 cv
122.359 21.6714 li
122.394 23.0381 li
122.242 23.0381 li
122.177 22.7217 122.089 22.4746 121.978 22.2983 cv
121.776 21.9717 121.484 21.8086 121.103 21.8086 cv
120.875 21.8086 120.696 21.8789 120.565 22.019 cv
120.435 22.1597 120.37 22.3247 120.37 22.5142 cv
120.37 22.8145 120.595 23.0825 121.044 23.3174 cv
121.69 23.6655 li
122.384 24.0444 122.731 24.4854 122.731 24.9883 cv
122.731 25.3735 122.587 25.6885 122.299 25.9336 cv
122.011 26.1787 121.635 26.3013 121.169 26.3013 cv
120.974 26.3013 120.753 26.2686 120.506 26.2031 cv
120.258 26.1377 120.112 26.105 120.066 26.105 cv
120.027 26.105 119.993 26.1191 119.964 26.147 cv
119.935 26.1743 119.912 26.208 119.896 26.2471 cv
119.769 26.2471 li
119.769 24.6646 li
cp
f
124.115 19.52 mo
124.212 19.4189 124.333 19.3687 124.477 19.3687 cv
124.617 19.3687 124.736 19.4185 124.836 19.5176 cv
124.935 19.6167 124.985 19.7378 124.985 19.8809 cv
124.985 20.0205 124.935 20.1401 124.836 20.2393 cv
124.736 20.3384 124.617 20.3877 124.477 20.3877 cv
124.333 20.3877 124.212 20.3384 124.115 20.2393 cv
124.017 20.1401 123.968 20.0205 123.968 19.8809 cv
123.968 19.7407 124.017 19.6206 124.115 19.52 cv
cp
123.337 26.0708 mo
123.687 26.0381 123.906 25.9785 123.998 25.8921 cv
124.089 25.8057 124.134 25.5713 124.134 25.189 cv
124.134 22.8521 li
124.134 22.6396 124.12 22.4927 124.09 22.4111 cv
124.042 22.2773 123.939 22.2104 123.782 22.2104 cv
123.747 22.2104 123.711 22.2134 123.677 22.2202 cv
123.643 22.2266 123.544 22.2529 123.382 22.2983 cv
123.382 22.1465 li
123.592 22.0781 li
124.162 21.8916 124.56 21.7515 124.785 21.6567 cv
124.876 21.6177 124.935 21.5977 124.96 21.5977 cv
124.967 21.6206 124.97 21.645 124.97 21.6714 cv
124.97 25.189 li
124.97 25.5615 125.015 25.7949 125.105 25.8896 cv
125.194 25.9844 125.397 26.0449 125.713 26.0708 cv
125.713 26.208 li
123.337 26.208 li
123.337 26.0708 li
cp
f
128.47 21.6909 mo
128.47 22.0435 li
127.473 22.0435 li
127.463 24.8657 li
127.463 25.1138 127.484 25.3018 127.527 25.4292 cv
127.605 25.6543 127.758 25.7671 127.986 25.7671 cv
128.104 25.7671 128.206 25.7393 128.292 25.6836 cv
128.378 25.6284 128.477 25.54 128.587 25.4194 cv
128.714 25.5269 li
128.607 25.6738 li
128.438 25.9028 128.258 26.0645 128.069 26.1592 cv
127.88 26.2539 127.698 26.3013 127.522 26.3013 cv
127.137 26.3013 126.876 26.1294 126.74 25.7866 cv
126.665 25.6006 126.627 25.3428 126.627 25.0127 cv
126.627 22.0435 li
126.094 22.0435 li
126.078 22.0337 126.066 22.0239 126.058 22.0142 cv
126.05 22.0044 126.045 21.9917 126.045 21.9751 cv
126.045 21.9424 126.053 21.917 126.067 21.8989 cv
126.082 21.8813 126.128 21.8394 126.207 21.7744 cv
126.432 21.5879 126.594 21.437 126.693 21.3208 cv
126.792 21.2051 127.026 20.8989 127.395 20.4023 cv
127.437 20.4023 127.462 20.4058 127.471 20.4121 cv
127.479 20.4189 127.483 20.4434 127.483 20.4858 cv
127.483 21.6909 li
128.47 21.6909 li
cp
f
128.749 26.0464 mo
129.048 26.02 129.247 25.9673 129.345 25.8872 cv
129.443 25.8071 129.492 25.6367 129.492 25.375 cv
129.492 23.1655 li
129.492 22.8423 129.461 22.6113 129.401 22.4722 cv
129.341 22.3335 129.231 22.2642 129.071 22.2642 cv
129.039 22.2642 128.996 22.2681 128.942 22.2764 cv
128.888 22.2847 128.832 22.2954 128.773 22.3081 cv
128.773 22.1465 li
128.958 22.0811 129.148 22.0142 129.343 21.9458 cv
129.538 21.877 129.673 21.8281 129.748 21.7988 cv
129.91 21.7368 130.077 21.6665 130.25 21.5879 cv
130.272 21.5879 130.286 21.5962 130.291 21.6123 cv
130.296 21.6289 130.298 21.6631 130.298 21.7153 cv
130.298 22.519 li
130.507 22.228 130.709 22.0015 130.903 21.8379 cv
131.098 21.6748 131.3 21.5928 131.509 21.5928 cv
131.676 21.5928 131.811 21.6426 131.916 21.7422 cv
132.021 21.8418 132.073 21.9668 132.073 22.1172 cv
132.073 22.251 132.033 22.3638 131.953 22.4551 cv
131.873 22.5469 131.773 22.5923 131.652 22.5923 cv
131.528 22.5923 131.404 22.5352 131.278 22.4209 cv
131.153 22.3066 131.054 22.2495 130.982 22.2495 cv
130.869 22.2495 130.729 22.3418 130.562 22.5264 cv
130.396 22.7109 130.313 22.9009 130.313 23.0972 cv
130.313 25.3066 li
130.313 25.5874 130.378 25.7827 130.508 25.8921 cv
130.639 26.0015 130.855 26.0527 131.159 26.0464 cv
131.159 26.208 li
128.749 26.208 li
128.749 26.0464 li
cp
f
133.692 22.1611 mo
133.365 22.4585 133.202 22.9712 133.202 23.6997 cv
133.202 24.2813 133.333 24.8232 133.596 25.3262 cv
133.859 25.8291 134.224 26.0806 134.691 26.0806 cv
135.057 26.0806 135.338 25.9126 135.536 25.5762 cv
135.733 25.2397 135.832 24.7988 135.832 24.2534 cv
135.832 23.688 135.706 23.1558 135.455 22.6563 cv
135.204 22.1563 134.839 21.9063 134.363 21.9063 cv
134.105 21.9063 133.881 21.9917 133.692 22.1611 cv
cp
132.911 22.2861 mo
133.323 21.8369 133.854 21.6123 134.502 21.6123 cv
135.147 21.6123 135.682 21.8247 136.105 22.2495 cv
136.529 22.6738 136.741 23.2393 136.741 23.9443 cv
136.741 24.5947 136.536 25.1597 136.125 25.6396 cv
135.715 26.1196 135.184 26.3599 134.532 26.3599 cv
133.906 26.3599 133.376 26.1294 132.943 25.6689 cv
132.509 25.2085 132.293 24.6304 132.293 23.9346 cv
132.293 23.2847 132.499 22.7354 132.911 22.2861 cv
cp
f
137.225 26.0708 mo
137.457 26.0415 137.619 25.9834 137.712 25.897 cv
137.805 25.8105 137.851 25.6167 137.851 25.3164 cv
137.851 22.8276 li
137.851 22.6201 137.832 22.4746 137.792 22.3901 cv
137.73 22.2671 137.604 22.2056 137.411 22.2056 cv
137.382 22.2056 137.352 22.207 137.321 22.2104 cv
137.29 22.2134 137.251 22.2183 137.206 22.2251 cv
137.206 22.0537 li
137.339 22.0142 137.655 21.9131 138.154 21.7495 cv
138.614 21.5977 li
138.636 21.5977 138.65 21.606 138.655 21.6226 cv
138.66 21.6387 138.663 21.6616 138.663 21.6909 cv
138.663 22.4111 li
138.962 22.1304 139.196 21.9375 139.365 21.833 cv
139.619 21.6729 139.882 21.5928 140.156 21.5928 cv
140.377 21.5928 140.579 21.6567 140.761 21.7842 cv
141.112 22.0322 141.288 22.4746 141.288 23.1118 cv
141.288 25.3994 li
141.288 25.6348 141.334 25.8047 141.428 25.9092 cv
141.522 26.0137 141.679 26.0674 141.898 26.0708 cv
141.898 26.208 li
139.811 26.208 li
139.811 26.0708 li
140.049 26.0381 140.215 25.9722 140.31 25.8726 cv
140.404 25.7729 140.452 25.5566 140.452 25.2231 cv
140.452 23.1313 li
140.452 22.8506 140.4 22.6177 140.296 22.4331 cv
140.192 22.2485 140.001 22.1563 139.723 22.1563 cv
139.531 22.1563 139.337 22.2217 139.139 22.3525 cv
139.029 22.4277 138.886 22.5518 138.711 22.7246 cv
138.711 25.4683 li
138.711 25.7036 138.764 25.8608 138.868 25.9409 cv
138.972 26.021 139.137 26.0645 139.361 26.0708 cv
139.361 26.208 li
137.225 26.208 li
137.225 26.0708 li
cp
f
142.573 24.6646 mo
142.734 24.6646 li
142.809 25.0371 142.91 25.3228 143.037 25.522 cv
143.264 25.8882 143.597 26.0708 144.036 26.0708 cv
144.28 26.0708 144.473 26.0029 144.614 25.8677 cv
144.756 25.7319 144.826 25.5566 144.826 25.3408 cv
144.826 25.2036 144.786 25.0713 144.704 24.9438 cv
144.623 24.8164 144.479 24.6924 144.274 24.5718 cv
143.727 24.2583 li
143.326 24.0425 143.031 23.8252 142.842 23.6064 cv
142.653 23.3877 142.558 23.1299 142.558 22.8325 cv
142.558 22.4668 142.688 22.166 142.949 21.9312 cv
143.21 21.6958 143.538 21.5781 143.932 21.5781 cv
144.104 21.5781 144.294 21.6108 144.501 21.6763 cv
144.708 21.7417 144.825 21.7744 144.851 21.7744 cv
144.91 21.7744 144.952 21.7661 144.978 21.7495 cv
145.004 21.7334 145.027 21.7075 145.046 21.6714 cv
145.164 21.6714 li
145.198 23.0381 li
145.046 23.0381 li
144.981 22.7217 144.893 22.4746 144.782 22.2983 cv
144.58 21.9717 144.289 21.8086 143.907 21.8086 cv
143.679 21.8086 143.5 21.8789 143.37 22.019 cv
143.239 22.1597 143.174 22.3247 143.174 22.5142 cv
143.174 22.8145 143.399 23.0825 143.849 23.3174 cv
144.494 23.6655 li
145.188 24.0444 145.535 24.4854 145.535 24.9883 cv
145.535 25.3735 145.391 25.6885 145.103 25.9336 cv
144.815 26.1787 144.439 26.3013 143.974 26.3013 cv
143.778 26.3013 143.557 26.2686 143.31 26.2031 cv
143.063 26.1377 142.917 26.105 142.871 26.105 cv
142.832 26.105 142.797 26.1191 142.768 26.147 cv
142.739 26.1743 142.716 26.208 142.7 26.2471 cv
142.573 26.2471 li
142.573 24.6646 li
cp
f
40.3193 54.4785 mo
40.6875 54.4395 40.9263 54.3735 41.0356 54.2813 cv
41.1445 54.1885 41.1992 53.9536 41.1992 53.5771 cv
41.1992 49.1138 li
41.1992 48.7578 41.1455 48.5249 41.0381 48.4155 cv
40.9307 48.3062 40.6909 48.2383 40.3193 48.2124 cv
40.3193 48.0259 li
45.6382 48.0259 li
45.6724 49.4614 li
45.418 49.4614 li
45.333 49.0195 45.2061 48.7334 45.0366 48.6035 cv
44.8672 48.4731 44.4893 48.4082 43.9028 48.4082 cv
42.5396 48.4082 li
42.3926 48.4082 42.3018 48.4321 42.2676 48.4795 cv
42.2334 48.5269 42.2163 48.6157 42.2163 48.7461 cv
42.2163 50.9854 li
43.7607 50.9854 li
44.188 50.9854 44.46 50.9219 44.5771 50.7949 cv
44.6943 50.6685 44.7891 50.4116 44.8608 50.0249 cv
45.0952 50.0249 li
45.0952 52.3423 li
44.8608 52.3423 li
44.7856 51.9536 44.6895 51.6963 44.5723 51.5708 cv
44.4551 51.4448 44.1846 51.3818 43.7607 51.3818 cv
42.2163 51.3818 li
42.2163 53.8662 li
42.2163 54.0654 42.2788 54.1826 42.4048 54.2188 cv
42.5303 54.2549 42.9063 54.2725 43.5332 54.2725 cv
44.2119 54.2725 44.7129 54.1982 45.0361 54.0498 cv
45.3589 53.9009 45.6494 53.541 45.9067 52.9692 cv
46.1855 52.9692 li
45.731 54.6646 li
40.3193 54.6646 li
40.3193 54.4785 li
cp
1 0 0 0 cmyk
f
46.5273 54.5273 mo
46.8306 54.498 47.0361 54.4365 47.1436 54.3438 cv
47.251 54.2505 47.3047 54.0684 47.3047 53.7974 cv
47.3047 49.0107 li
47.3047 48.7954 47.2871 48.6465 47.251 48.5649 cv
47.186 48.4277 47.0537 48.3594 46.855 48.3594 cv
46.8096 48.3594 46.7598 48.3643 46.7061 48.374 cv
46.6523 48.3838 46.5845 48.3984 46.5029 48.418 cv
46.5029 48.2563 li
46.9429 48.1387 47.4727 47.9819 48.0918 47.7861 cv
48.1147 47.7861 48.1284 47.7959 48.1333 47.8154 cv
48.1382 47.835 48.1406 47.8774 48.1406 47.9429 cv
48.1406 53.8169 li
48.1406 54.1011 48.1895 54.2847 48.2876 54.3682 cv
48.3853 54.4517 48.5874 54.5044 48.8936 54.5273 cv
48.8936 54.6646 li
46.5273 54.6646 li
46.5273 54.5273 li
cp
f
50.2627 50.9214 mo
50.1582 51.0981 50.0835 51.3203 50.0376 51.5879 cv
52.1006 51.5879 li
52.0645 51.2612 52.0029 51.0181 51.915 50.8579 cv
51.7549 50.5703 51.4878 50.4268 51.1133 50.4268 cv
50.7417 50.4268 50.458 50.5918 50.2627 50.9214 cv
cp
52.604 50.5469 mo
52.9492 50.8652 53.1221 51.3169 53.1221 51.9014 cv
50.0181 51.9014 li
50.0508 52.6577 50.2217 53.2085 50.5313 53.5537 cv
50.8408 53.8989 51.2075 54.0718 51.6313 54.0718 cv
51.9736 54.0718 52.2617 53.9824 52.4966 53.8027 cv
52.731 53.6235 52.9478 53.3696 53.1465 53.0405 cv
53.3179 53.0991 li
53.1841 53.5146 52.9341 53.8989 52.5674 54.252 cv
52.2007 54.6055 51.752 54.7822 51.2207 54.7822 cv
50.6079 54.7822 50.1348 54.5503 49.8008 54.0864 cv
49.4663 53.6226 49.2993 53.0889 49.2993 52.4844 cv
49.2993 51.8281 49.4932 51.2612 49.8813 50.7842 cv
50.269 50.3076 50.7739 50.0688 51.3965 50.0688 cv
51.856 50.0688 52.2588 50.2285 52.604 50.5469 cv
cp
f
57.0889 50.3594 mo
57.3838 50.5693 57.5313 50.7998 57.5313 51.0503 cv
57.5313 51.1577 57.4937 51.2578 57.4189 51.3506 cv
57.3438 51.4434 57.2285 51.4897 57.0718 51.4897 cv
56.9575 51.4897 56.8574 51.4507 56.771 51.3721 cv
56.6851 51.2939 56.6221 51.1797 56.583 51.0293 cv
56.5244 50.7939 li
56.4819 50.6211 56.4087 50.4985 56.3042 50.4268 cv
56.1968 50.3579 56.0552 50.3237 55.8789 50.3237 cv
55.5078 50.3237 55.1938 50.4868 54.938 50.812 cv
54.6821 51.1372 54.5542 51.5698 54.5542 52.1094 cv
54.5542 52.6035 54.6953 53.0464 54.9771 53.439 cv
55.2593 53.8315 55.6396 54.0278 56.1187 54.0278 cv
56.4575 54.0278 56.7588 53.9165 57.0229 53.6938 cv
57.1729 53.5664 57.3423 53.3633 57.5313 53.085 cv
57.6685 53.1685 li
57.4824 53.561 57.2871 53.8716 57.0815 54.1006 cv
56.6875 54.5386 56.231 54.7578 55.7129 54.7578 cv
55.2046 54.7578 54.7549 54.5566 54.3638 54.1553 cv
53.9727 53.7534 53.7773 53.208 53.7773 52.5186 cv
53.7773 51.8428 53.9907 51.2612 54.4175 50.7744 cv
54.8442 50.2881 55.3838 50.0444 56.0356 50.0444 cv
56.4429 50.0444 56.7939 50.1494 57.0889 50.3594 cv
cp
f
60.5376 50.1475 mo
60.5376 50.5 li
59.5405 50.5 li
59.5308 53.3223 li
59.5308 53.5703 59.5518 53.7583 59.5942 53.8857 cv
59.6724 54.1108 59.8257 54.2236 60.0537 54.2236 cv
60.1709 54.2236 60.2729 54.1958 60.3589 54.1401 cv
60.4453 54.085 60.5439 53.9966 60.6548 53.876 cv
60.7817 53.9834 li
60.6743 54.1304 li
60.5049 54.3594 60.3257 54.521 60.1367 54.6157 cv
59.9478 54.7104 59.7651 54.7578 59.5894 54.7578 cv
59.2046 54.7578 58.9438 54.5859 58.8071 54.2432 cv
58.7319 54.0571 58.6948 53.7993 58.6948 53.4692 cv
58.6948 50.5 li
58.1616 50.5 li
58.1455 50.4902 58.1333 50.4805 58.125 50.4707 cv
58.1172 50.4609 58.1128 50.4482 58.1128 50.4316 cv
58.1128 50.3989 58.1201 50.3735 58.1348 50.3555 cv
58.1494 50.3379 58.1958 50.2959 58.2744 50.231 cv
58.499 50.0444 58.6611 49.8936 58.7607 49.7773 cv
58.8599 49.6616 59.0938 49.3555 59.4619 48.8589 cv
59.5044 48.8589 59.5298 48.8623 59.5381 48.8687 cv
59.5459 48.8755 59.5503 48.8999 59.5503 48.9424 cv
59.5503 50.1475 li
60.5376 50.1475 li
cp
f
60.8164 54.5029 mo
61.1162 54.4766 61.3149 54.4238 61.4126 54.3438 cv
61.5107 54.2637 61.5596 54.0933 61.5596 53.8315 cv
61.5596 51.6221 li
61.5596 51.2988 61.5293 51.0679 61.4692 50.9287 cv
61.4087 50.79 61.2988 50.7207 61.1392 50.7207 cv
61.1064 50.7207 61.0635 50.7246 61.0098 50.7329 cv
60.9556 50.7412 60.8994 50.752 60.8408 50.7646 cv
60.8408 50.603 li
61.0259 50.5376 61.2163 50.4707 61.4111 50.4023 cv
61.606 50.3335 61.7407 50.2847 61.8154 50.2554 cv
61.978 50.1934 62.145 50.123 62.3174 50.0444 cv
62.3403 50.0444 62.354 50.0527 62.3589 50.0688 cv
62.3638 50.0854 62.3662 50.1196 62.3662 50.1719 cv
62.3662 50.9756 li
62.5752 50.6846 62.7769 50.458 62.9712 50.2944 cv
63.166 50.1313 63.3677 50.0493 63.5767 50.0493 cv
63.7437 50.0493 63.8789 50.0991 63.9839 50.1987 cv
64.0884 50.2983 64.1406 50.4233 64.1406 50.5737 cv
64.1406 50.7075 64.1006 50.8203 64.021 50.9116 cv
63.9409 51.0034 63.8408 51.0488 63.7202 51.0488 cv
63.5962 51.0488 63.4717 50.9917 63.3462 50.8774 cv
63.2207 50.7632 63.1221 50.7061 63.0503 50.7061 cv
62.9365 50.7061 62.7964 50.7983 62.6299 50.9829 cv
62.4639 51.1675 62.3809 51.3574 62.3809 51.5537 cv
62.3809 53.7632 li
62.3809 54.0439 62.4458 54.2393 62.5762 54.3486 cv
62.7065 54.458 62.9233 54.5093 63.2266 54.5029 cv
63.2266 54.6646 li
60.8164 54.6646 li
60.8164 54.5029 li
cp
f
65.7593 50.6177 mo
65.4326 50.915 65.2695 51.4277 65.2695 52.1563 cv
65.2695 52.7378 65.4009 53.2798 65.6636 53.7827 cv
65.9263 54.2856 66.2915 54.5371 66.7583 54.5371 cv
67.124 54.5371 67.4053 54.3691 67.603 54.0327 cv
67.8008 53.6963 67.8994 53.2554 67.8994 52.71 cv
67.8994 52.1445 67.7734 51.6123 67.5225 51.1128 cv
67.271 50.6128 66.9067 50.3628 66.4302 50.3628 cv
66.1724 50.3628 65.9482 50.4482 65.7593 50.6177 cv
cp
64.9785 50.7427 mo
65.3906 50.2935 65.9209 50.0688 66.5698 50.0688 cv
67.2148 50.0688 67.7495 50.2813 68.1729 50.7061 cv
68.5967 51.1304 68.8086 51.6958 68.8086 52.4009 cv
68.8086 53.0513 68.603 53.6162 68.1924 54.0962 cv
67.7822 54.5762 67.251 54.8164 66.5991 54.8164 cv
65.9731 54.8164 65.4438 54.5859 65.0103 54.1255 cv
64.5767 53.665 64.3604 53.0869 64.3604 52.3911 cv
64.3604 51.7412 64.5664 51.1919 64.9785 50.7427 cv
cp
f
69.2925 54.5273 mo
69.5239 54.498 69.686 54.4399 69.7793 54.3535 cv
69.8721 54.2671 69.9185 54.0732 69.9185 53.7729 cv
69.9185 51.2842 li
69.9185 51.0767 69.8989 50.9312 69.8599 50.8467 cv
69.7979 50.7236 69.6709 50.6621 69.4785 50.6621 cv
69.4492 50.6621 69.4189 50.6636 69.3882 50.667 cv
69.3569 50.6699 69.3188 50.6748 69.2729 50.6816 cv
69.2729 50.5103 li
69.4067 50.4707 69.7227 50.3696 70.2217 50.2061 cv
70.6812 50.0542 li
70.7036 50.0542 70.7178 50.0625 70.7227 50.0791 cv
70.7275 50.0952 70.73 50.1182 70.73 50.1475 cv
70.73 50.8677 li
71.0293 50.5869 71.2632 50.394 71.4326 50.2896 cv
71.686 50.1294 71.9497 50.0493 72.2231 50.0493 cv
72.4443 50.0493 72.646 50.1133 72.8281 50.2407 cv
73.1792 50.4888 73.355 50.9312 73.355 51.5684 cv
73.355 53.856 li
73.355 54.0913 73.4019 54.2612 73.4956 54.3657 cv
73.5894 54.4702 73.7461 54.5239 73.9658 54.5273 cv
73.9658 54.6646 li
71.8784 54.6646 li
71.8784 54.5273 li
72.1167 54.4946 72.2827 54.4287 72.3774 54.3291 cv
72.4717 54.2295 72.519 54.0132 72.519 53.6797 cv
72.519 51.5879 li
72.519 51.3071 72.4673 51.0742 72.3633 50.8896 cv
72.2598 50.7051 72.0684 50.6128 71.79 50.6128 cv
71.5986 50.6128 71.4043 50.6782 71.2065 50.8091 cv
71.0962 50.8843 70.9536 51.0083 70.7788 51.1812 cv
70.7788 53.9248 li
70.7788 54.1602 70.8311 54.3174 70.9351 54.3975 cv
71.0396 54.4775 71.2041 54.521 71.4287 54.5273 cv
71.4287 54.6646 li
69.2925 54.6646 li
69.2925 54.5273 li
cp
f
74.6406 53.1211 mo
74.8022 53.1211 li
74.877 53.4937 74.9775 53.7793 75.1045 53.9785 cv
75.332 54.3447 75.665 54.5273 76.104 54.5273 cv
76.3481 54.5273 76.5405 54.4595 76.6821 54.3242 cv
76.8237 54.1885 76.894 54.0132 76.894 53.7974 cv
76.894 53.6602 76.8535 53.5278 76.772 53.4004 cv
76.6904 53.2729 76.5474 53.1489 76.3418 53.0283 cv
75.7944 52.7148 li
75.394 52.499 75.0986 52.2817 74.9097 52.063 cv
74.7207 51.8442 74.626 51.5864 74.626 51.2891 cv
74.626 50.9233 74.7563 50.6226 75.0171 50.3877 cv
75.2778 50.1523 75.6055 50.0347 75.9995 50.0347 cv
76.1724 50.0347 76.3623 50.0674 76.5693 50.1328 cv
76.7759 50.1982 76.8926 50.231 76.9185 50.231 cv
76.9775 50.231 77.0195 50.2227 77.0459 50.2061 cv
77.0718 50.1899 77.0947 50.1641 77.1143 50.1279 cv
77.2314 50.1279 li
77.2656 51.4946 li
77.1143 51.4946 li
77.0488 51.1782 76.9609 50.9312 76.8501 50.7549 cv
76.6479 50.4282 76.3564 50.2651 75.9751 50.2651 cv
75.7471 50.2651 75.5679 50.3354 75.4375 50.4756 cv
75.3071 50.6162 75.2422 50.7813 75.2422 50.9707 cv
75.2422 51.271 75.4668 51.5391 75.9165 51.7739 cv
76.562 52.1221 li
77.2559 52.501 77.603 52.9419 77.603 53.4448 cv
77.603 53.8301 77.459 54.145 77.1709 54.3901 cv
76.8833 54.6353 76.5068 54.7578 76.0415 54.7578 cv
75.8462 54.7578 75.625 54.7251 75.3779 54.6597 cv
75.1304 54.5942 74.9844 54.5615 74.9385 54.5615 cv
74.8994 54.5615 74.8652 54.5757 74.8359 54.6035 cv
74.8066 54.6309 74.7842 54.6646 74.7681 54.7036 cv
74.6406 54.7036 li
74.6406 53.1211 li
cp
f
127.049 125.883 mo
127.457 125.854 127.72 125.793 127.841 125.701 cv
127.961 125.608 128.022 125.368 128.022 124.982 cv
128.022 120.519 li
128.022 120.149 127.961 119.912 127.841 119.806 cv
127.72 119.7 127.457 119.637 127.049 119.617 cv
127.049 119.431 li
130.011 119.431 li
130.011 119.617 li
129.604 119.637 129.34 119.7 129.219 119.806 cv
129.099 119.912 129.039 120.149 129.039 120.519 cv
129.039 124.982 li
129.039 125.368 129.099 125.608 129.219 125.701 cv
129.34 125.793 129.604 125.854 130.011 125.883 cv
130.011 126.069 li
127.049 126.069 li
127.049 125.883 li
cp
0 0 0 1 cmyk
f
131.875 122.022 mo
131.548 122.32 131.385 122.833 131.385 123.561 cv
131.385 124.143 131.517 124.685 131.779 125.188 cv
132.042 125.69 132.407 125.942 132.874 125.942 cv
133.24 125.942 133.521 125.774 133.719 125.438 cv
133.917 125.101 134.015 124.66 134.015 124.115 cv
134.015 123.549 133.889 123.017 133.638 122.518 cv
133.387 122.018 133.022 121.768 132.546 121.768 cv
132.288 121.768 132.064 121.853 131.875 122.022 cv
cp
131.094 122.147 mo
131.506 121.698 132.037 121.474 132.686 121.474 cv
133.331 121.474 133.865 121.686 134.289 122.111 cv
134.712 122.535 134.924 123.101 134.924 123.806 cv
134.924 124.456 134.719 125.021 134.308 125.501 cv
133.898 125.981 133.367 126.221 132.715 126.221 cv
132.089 126.221 131.56 125.991 131.126 125.53 cv
130.692 125.07 130.476 124.492 130.476 123.796 cv
130.476 123.146 130.682 122.597 131.094 122.147 cv
cp
f
135.408 125.932 mo
135.639 125.903 135.801 125.845 135.895 125.758 cv
135.987 125.672 136.034 125.478 136.034 125.178 cv
136.034 122.689 li
136.034 122.481 136.014 122.336 135.975 122.251 cv
135.913 122.128 135.786 122.067 135.594 122.067 cv
135.564 122.067 135.534 122.068 135.503 122.072 cv
135.472 122.075 135.434 122.08 135.388 122.086 cv
135.388 121.915 li
135.522 121.875 135.838 121.774 136.337 121.611 cv
136.796 121.459 li
136.819 121.459 136.833 121.467 136.838 121.484 cv
136.843 121.5 136.845 121.523 136.845 121.552 cv
136.845 122.272 li
137.145 121.992 137.378 121.799 137.548 121.694 cv
137.801 121.534 138.065 121.454 138.338 121.454 cv
138.56 121.454 138.761 121.518 138.943 121.646 cv
139.294 121.894 139.47 122.336 139.47 122.973 cv
139.47 125.261 li
139.47 125.496 139.517 125.666 139.611 125.771 cv
139.705 125.875 139.861 125.929 140.081 125.932 cv
140.081 126.069 li
137.994 126.069 li
137.994 125.932 li
138.232 125.899 138.398 125.833 138.493 125.734 cv
138.587 125.634 138.634 125.418 138.634 125.084 cv
138.634 122.993 li
138.634 122.712 138.583 122.479 138.479 122.294 cv
138.375 122.11 138.184 122.018 137.905 122.018 cv
137.714 122.018 137.52 122.083 137.322 122.214 cv
137.211 122.289 137.069 122.413 136.894 122.586 cv
136.894 125.33 li
136.894 125.565 136.946 125.722 137.05 125.802 cv
137.155 125.882 137.319 125.926 137.544 125.932 cv
137.544 126.069 li
135.408 126.069 li
135.408 125.932 li
cp
f
141.206 119.381 mo
141.303 119.28 141.424 119.23 141.567 119.23 cv
141.708 119.23 141.827 119.28 141.927 119.379 cv
142.026 119.478 142.076 119.599 142.076 119.742 cv
142.076 119.882 142.026 120.001 141.927 120.101 cv
141.827 120.2 141.708 120.249 141.567 120.249 cv
141.424 120.249 141.303 120.2 141.206 120.101 cv
141.108 120.001 141.059 119.882 141.059 119.742 cv
141.059 119.602 141.108 119.482 141.206 119.381 cv
cp
140.428 125.932 mo
140.777 125.899 140.997 125.84 141.088 125.753 cv
141.18 125.667 141.225 125.433 141.225 125.05 cv
141.225 122.713 li
141.225 122.501 141.21 122.354 141.181 122.272 cv
141.132 122.139 141.03 122.072 140.873 122.072 cv
140.837 122.072 140.802 122.075 140.768 122.082 cv
140.734 122.088 140.635 122.114 140.473 122.16 cv
140.473 122.008 li
140.683 121.939 li
141.253 121.753 141.65 121.613 141.875 121.518 cv
141.967 121.479 142.025 121.459 142.051 121.459 cv
142.058 121.482 142.061 121.506 142.061 121.533 cv
142.061 125.05 li
142.061 125.423 142.106 125.656 142.196 125.751 cv
142.285 125.846 142.488 125.906 142.804 125.932 cv
142.804 126.069 li
140.428 126.069 li
140.428 125.932 li
cp
f
147.066 121.567 mo
147.066 121.685 li
144.354 125.761 li
145.737 125.761 li
146.216 125.761 146.519 125.699 146.646 125.577 cv
146.773 125.455 146.899 125.155 147.022 124.678 cv
147.194 124.712 li
147.057 126.069 li
143.269 126.069 li
143.269 125.957 li
145.942 121.866 li
144.632 121.866 li
144.28 121.866 144.05 121.926 143.943 122.047 cv
143.835 122.168 143.76 122.403 143.718 122.752 cv
143.547 122.752 li
143.562 121.567 li
147.066 121.567 li
cp
f
150.328 123.355 mo
149.953 123.479 149.643 123.617 149.399 123.767 cv
148.929 124.058 148.695 124.387 148.695 124.756 cv
148.695 125.054 148.792 125.272 148.988 125.413 cv
149.115 125.504 149.257 125.55 149.414 125.55 cv
149.628 125.55 149.834 125.49 150.032 125.369 cv
150.229 125.248 150.328 125.094 150.328 124.908 cv
150.328 123.355 li
cp
148.533 123.909 mo
148.833 123.713 149.431 123.447 150.328 123.11 cv
150.328 122.694 li
150.328 122.361 150.295 122.129 150.229 121.998 cv
150.119 121.779 149.889 121.67 149.541 121.67 cv
149.374 121.67 149.216 121.712 149.066 121.797 cv
148.917 121.885 148.841 122.006 148.841 122.16 cv
148.841 122.199 148.85 122.265 148.866 122.358 cv
148.882 122.451 148.89 122.511 148.89 122.537 cv
148.89 122.72 148.83 122.847 148.709 122.919 cv
148.641 122.961 148.56 122.983 148.465 122.983 cv
148.318 122.983 148.206 122.935 148.128 122.838 cv
148.049 122.742 148.01 122.635 148.01 122.518 cv
148.01 122.289 148.151 122.049 148.433 121.8 cv
148.715 121.55 149.128 121.425 149.672 121.425 cv
150.305 121.425 150.733 121.631 150.958 122.042 cv
151.079 122.268 151.139 122.596 151.139 123.027 cv
151.139 124.992 li
151.139 125.181 151.152 125.312 151.178 125.383 cv
151.22 125.511 151.308 125.575 151.442 125.575 cv
151.517 125.575 151.579 125.563 151.628 125.54 cv
151.677 125.518 151.761 125.462 151.882 125.374 cv
151.882 125.628 li
151.778 125.756 151.665 125.86 151.544 125.942 cv
151.362 126.066 151.176 126.128 150.987 126.128 cv
150.766 126.128 150.605 126.056 150.506 125.913 cv
150.406 125.769 150.352 125.597 150.342 125.398 cv
150.094 125.614 149.883 125.774 149.707 125.878 cv
149.41 126.055 149.128 126.143 148.861 126.143 cv
148.581 126.143 148.338 126.044 148.133 125.846 cv
147.927 125.649 147.825 125.398 147.825 125.094 cv
147.825 124.621 148.061 124.226 148.533 123.909 cv
cp
f
154.449 121.552 mo
154.449 121.905 li
153.451 121.905 li
153.441 124.727 li
153.441 124.975 153.462 125.163 153.505 125.291 cv
153.583 125.516 153.736 125.628 153.964 125.628 cv
154.082 125.628 154.183 125.601 154.269 125.545 cv
154.357 125.49 154.455 125.401 154.566 125.281 cv
154.693 125.388 li
154.585 125.535 li
154.416 125.764 154.236 125.926 154.046 126.021 cv
153.859 126.115 153.675 126.163 153.5 126.163 cv
153.115 126.163 152.855 125.991 152.718 125.648 cv
152.642 125.462 152.605 125.204 152.605 124.874 cv
152.605 121.905 li
152.072 121.905 li
152.056 121.895 152.044 121.885 152.036 121.875 cv
152.028 121.866 152.023 121.853 152.023 121.836 cv
152.023 121.804 152.031 121.778 152.045 121.76 cv
152.06 121.743 152.106 121.701 152.185 121.636 cv
152.41 121.449 152.572 121.298 152.671 121.182 cv
152.771 121.066 153.005 120.76 153.373 120.264 cv
153.416 120.264 153.441 120.267 153.449 120.273 cv
153.457 120.28 153.46 120.305 153.46 120.347 cv
153.46 121.552 li
154.449 121.552 li
cp
f
155.656 119.381 mo
155.753 119.28 155.875 119.23 156.018 119.23 cv
156.158 119.23 156.278 119.28 156.376 119.379 cv
156.476 119.478 156.526 119.599 156.526 119.742 cv
156.526 119.882 156.476 120.001 156.376 120.101 cv
156.278 120.2 156.158 120.249 156.018 120.249 cv
155.875 120.249 155.753 120.2 155.656 120.101 cv
155.558 120.001 155.509 119.882 155.509 119.742 cv
155.509 119.602 155.558 119.482 155.656 119.381 cv
cp
154.878 125.932 mo
155.227 125.899 155.448 125.84 155.539 125.753 cv
155.629 125.667 155.675 125.433 155.675 125.05 cv
155.675 122.713 li
155.675 122.501 155.661 122.354 155.631 122.272 cv
155.583 122.139 155.48 122.072 155.324 122.072 cv
155.288 122.072 155.252 122.075 155.218 122.082 cv
155.184 122.088 155.085 122.114 154.922 122.16 cv
154.922 122.008 li
155.133 121.939 li
155.703 121.753 156.101 121.613 156.326 121.518 cv
156.417 121.479 156.475 121.459 156.501 121.459 cv
156.508 121.482 156.511 121.506 156.511 121.533 cv
156.511 125.05 li
156.511 125.423 156.556 125.656 156.646 125.751 cv
156.736 125.846 156.938 125.906 157.254 125.932 cv
157.254 126.069 li
154.878 126.069 li
154.878 125.932 li
cp
f
159.118 122.022 mo
158.791 122.32 158.627 122.833 158.627 123.561 cv
158.627 124.143 158.759 124.685 159.022 125.188 cv
159.285 125.69 159.65 125.942 160.117 125.942 cv
160.482 125.942 160.764 125.774 160.961 125.438 cv
161.159 125.101 161.257 124.66 161.257 124.115 cv
161.257 123.549 161.132 123.017 160.88 122.518 cv
160.629 122.018 160.265 121.768 159.789 121.768 cv
159.531 121.768 159.307 121.853 159.118 122.022 cv
cp
158.337 122.147 mo
158.75 121.698 159.28 121.474 159.928 121.474 cv
160.574 121.474 161.108 121.686 161.532 122.111 cv
161.955 122.535 162.167 123.101 162.167 123.806 cv
162.167 124.456 161.961 125.021 161.551 125.501 cv
161.14 125.981 160.609 126.221 159.958 126.221 cv
159.332 126.221 158.802 125.991 158.369 125.53 cv
157.935 125.07 157.718 124.492 157.718 123.796 cv
157.718 123.146 157.924 122.597 158.337 122.147 cv
cp
f
162.651 125.932 mo
162.882 125.903 163.044 125.845 163.137 125.758 cv
163.23 125.672 163.277 125.478 163.277 125.178 cv
163.277 122.689 li
163.277 122.481 163.257 122.336 163.218 122.251 cv
163.156 122.128 163.029 122.067 162.836 122.067 cv
162.807 122.067 162.777 122.068 162.747 122.072 cv
162.715 122.075 162.677 122.08 162.631 122.086 cv
162.631 121.915 li
162.765 121.875 163.082 121.774 163.58 121.611 cv
164.04 121.459 li
164.062 121.459 164.076 121.467 164.081 121.484 cv
164.085 121.5 164.088 121.523 164.088 121.552 cv
164.088 122.272 li
164.387 121.992 164.622 121.799 164.791 121.694 cv
165.044 121.534 165.308 121.454 165.582 121.454 cv
165.802 121.454 166.004 121.518 166.186 121.646 cv
166.538 121.894 166.713 122.336 166.713 122.973 cv
166.713 125.261 li
166.713 125.496 166.76 125.666 166.854 125.771 cv
166.948 125.875 167.105 125.929 167.325 125.932 cv
167.325 126.069 li
165.237 126.069 li
165.237 125.932 li
165.475 125.899 165.641 125.833 165.736 125.734 cv
165.831 125.634 165.877 125.418 165.877 125.084 cv
165.877 122.993 li
165.877 122.712 165.826 122.479 165.722 122.294 cv
165.618 122.11 165.427 122.018 165.148 122.018 cv
164.957 122.018 164.762 122.083 164.565 122.214 cv
164.455 122.289 164.312 122.413 164.137 122.586 cv
164.137 125.33 li
164.137 125.565 164.189 125.722 164.293 125.802 cv
164.398 125.882 164.562 125.926 164.788 125.932 cv
164.788 126.069 li
162.651 126.069 li
162.651 125.932 li
cp
f
104.582 38.4399 mo
97.2437 40.3042 li
104.539 33.4932 li
103.325 37.0049 li
104.582 38.4399 li
.14725 .724788 1 .0329595 cmyk
f
.668161 lw
118.268 28.0273 mo
100.218 38.5269 li
@
94.1621 62.1172 mo
99.6768 67.313 li
90.0249 64.813 li
93.6318 63.9502 li
94.1621 62.1172 li
1 0 0 0 cmyk
f
78.041 56.1523 mo
96.5825 65.7573 li
@
97.248 177.652 mo
90.3027 180.667 li
96.417 172.776 li
95.7788 176.437 li
97.248 177.652 li
.7 0 1 0 cmyk
f
107.764 166.829 mo
95.2539 176.761 li
@
73.1948 154.699 mo
66.249 157.715 li
72.3638 149.823 li
71.7251 153.484 li
73.1948 154.699 li
0 1 1 .44 cmyk
f
83.2773 143.667 mo
68.9009 155.483 li
@
62.9272 141.798 mo
63.3413 141.755 63.6069 141.662 63.7241 141.516 cv
63.8413 141.371 63.9004 141.034 63.9004 140.505 cv
63.9004 136.433 li
63.9004 136.07 63.8433 135.834 63.729 135.725 cv
63.6147 135.616 63.356 135.551 62.9517 135.532 cv
62.9517 135.345 li
64.9258 135.345 li
67.2246 140.343 li
69.4678 135.345 li
71.4575 135.345 li
71.4575 135.532 li
71.0859 135.558 70.8467 135.625 70.7388 135.735 cv
70.6313 135.844 70.5776 136.077 70.5776 136.433 cv
70.5776 140.892 li
70.5776 141.258 70.6313 141.492 70.7388 141.595 cv
70.8467 141.697 71.0859 141.765 71.4575 141.798 cv
71.4575 141.984 li
68.6567 141.984 li
68.6567 141.798 li
69.0605 141.765 69.3125 141.692 69.4116 141.58 cv
69.5112 141.467 69.561 141.199 69.561 140.774 cv
69.561 136.271 li
66.9971 141.984 li
66.8599 141.984 li
64.3403 136.506 li
64.3403 140.505 li
64.3403 141.054 64.4199 141.411 64.5796 141.578 cv
64.6841 141.685 64.917 141.759 65.2788 141.798 cv
65.2788 141.984 li
62.9272 141.984 li
62.9272 141.798 li
cp
f
73.4609 141.394 mo
73.6333 141.571 73.7861 141.693 73.9194 141.758 cv
74.0527 141.824 74.1978 141.856 74.354 141.856 cv
74.7148 141.856 74.9946 141.689 75.1929 141.355 cv
75.3916 141.021 75.4907 140.579 75.4907 140.031 cv
75.4907 139.617 75.4219 139.215 75.2842 138.827 cv
75.1978 138.582 75.1245 138.42 75.0635 138.342 cv
73.4609 141.394 li
cp
73.3667 137.937 mo
73.0425 138.231 72.8804 138.74 72.8804 139.465 cv
72.8804 139.781 72.917 140.078 72.9907 140.354 cv
73.0645 140.629 73.1528 140.87 73.2559 141.076 cv
74.8257 138.037 li
74.709 137.919 74.5879 137.83 74.4634 137.769 cv
74.3384 137.708 74.1948 137.677 74.0327 137.677 cv
73.7769 137.677 73.5547 137.764 73.3667 137.937 cv
cp
72.5938 138.043 mo
73.0093 137.606 73.5137 137.388 74.1074 137.388 cv
74.3252 137.388 74.5244 137.408 74.7061 137.447 cv
74.8101 137.47 74.9316 137.508 75.0713 137.562 cv
75.6567 136.428 li
76.0527 136.428 li
75.3921 137.707 li
75.6694 137.926 75.8765 138.138 76.0132 138.344 cv
76.271 138.73 76.3999 139.189 76.3999 139.723 cv
76.3999 140.376 76.1992 140.942 75.7979 141.419 cv
75.3965 141.897 74.8662 142.136 74.2065 142.136 cv
74.0083 142.136 73.8149 142.109 73.6265 142.057 cv
73.5225 142.03 73.3794 141.979 73.1978 141.903 cv
72.5786 143.101 li
72.209 143.101 li
72.9233 141.719 li
72.6577 141.519 72.4326 141.248 72.248 140.904 cv
72.0635 140.561 71.9712 140.163 71.9712 139.708 cv
71.9712 139.035 72.1787 138.479 72.5938 138.043 cv
cp
f
76.9272 141.847 mo
77.2305 141.817 77.436 141.756 77.5435 141.663 cv
77.6509 141.57 77.7046 141.388 77.7046 141.117 cv
77.7046 136.33 li
77.7046 136.115 77.687 135.966 77.6509 135.884 cv
77.5859 135.747 77.4536 135.679 77.2549 135.679 cv
77.2095 135.679 77.1597 135.684 77.106 135.693 cv
77.0522 135.703 76.9844 135.718 76.9028 135.737 cv
76.9028 135.576 li
77.3428 135.458 77.8726 135.301 78.4917 135.105 cv
78.5146 135.105 78.5283 135.115 78.5332 135.135 cv
78.5381 135.154 78.5405 135.197 78.5405 135.262 cv
78.5405 141.136 li
78.5405 141.42 78.5894 141.604 78.6875 141.688 cv
78.7852 141.771 78.9873 141.824 79.2935 141.847 cv
79.2935 141.984 li
76.9272 141.984 li
76.9272 141.847 li
cp
f
79.709 141.847 mo
80.0122 141.817 80.2178 141.756 80.3252 141.663 cv
80.4326 141.57 80.4863 141.388 80.4863 141.117 cv
80.4863 136.33 li
80.4863 136.115 80.4688 135.966 80.4326 135.884 cv
80.3677 135.747 80.2354 135.679 80.0366 135.679 cv
79.9912 135.679 79.9414 135.684 79.8877 135.693 cv
79.834 135.703 79.7661 135.718 79.6846 135.737 cv
79.6846 135.576 li
80.1245 135.458 80.6543 135.301 81.2734 135.105 cv
81.2964 135.105 81.3101 135.115 81.3149 135.135 cv
81.3198 135.154 81.3223 135.197 81.3223 135.262 cv
81.3223 141.136 li
81.3223 141.42 81.3711 141.604 81.4692 141.688 cv
81.5669 141.771 81.769 141.824 82.0752 141.847 cv
82.0752 141.984 li
79.709 141.984 li
79.709 141.847 li
cp
f
83.4438 138.241 mo
83.3394 138.417 83.2646 138.64 83.2188 138.907 cv
85.2817 138.907 li
85.2456 138.581 85.1841 138.337 85.0962 138.177 cv
84.936 137.89 84.6689 137.746 84.2944 137.746 cv
83.9229 137.746 83.6392 137.911 83.4438 138.241 cv
cp
85.7852 137.866 mo
86.1304 138.185 86.3032 138.636 86.3032 139.221 cv
83.1992 139.221 li
83.2319 139.977 83.4028 140.528 83.7124 140.873 cv
84.022 141.218 84.3887 141.391 84.8125 141.391 cv
85.1548 141.391 85.4429 141.302 85.6777 141.122 cv
85.9121 140.943 86.1289 140.689 86.3276 140.36 cv
86.499 140.418 li
86.3652 140.834 86.1152 141.218 85.7485 141.571 cv
85.3818 141.925 84.9331 142.102 84.4019 142.102 cv
83.7891 142.102 83.3159 141.87 82.9819 141.406 cv
82.6475 140.942 82.4805 140.408 82.4805 139.804 cv
82.4805 139.147 82.6743 138.581 83.0625 138.104 cv
83.4502 137.627 83.9551 137.388 84.5776 137.388 cv
85.0371 137.388 85.4399 137.548 85.7852 137.866 cv
cp
f
86.7725 141.822 mo
87.0723 141.796 87.271 141.743 87.3687 141.663 cv
87.4668 141.583 87.5156 141.413 87.5156 141.151 cv
87.5156 138.941 li
87.5156 138.618 87.4854 138.387 87.4253 138.248 cv
87.3647 138.109 87.2549 138.04 87.0952 138.04 cv
87.0625 138.04 87.0195 138.044 86.9658 138.052 cv
86.9116 138.061 86.8555 138.071 86.7969 138.084 cv
86.7969 137.922 li
86.9819 137.857 87.1724 137.79 87.3672 137.722 cv
87.562 137.653 87.6968 137.604 87.7715 137.575 cv
87.9341 137.513 88.1011 137.442 88.2734 137.364 cv
88.2964 137.364 88.3101 137.372 88.3149 137.388 cv
88.3198 137.405 88.3223 137.439 88.3223 137.491 cv
88.3223 138.295 li
88.5313 138.004 88.7329 137.777 88.9272 137.614 cv
89.1221 137.451 89.3237 137.369 89.5327 137.369 cv
89.6997 137.369 89.835 137.418 89.9399 137.518 cv
90.0444 137.618 90.0967 137.743 90.0967 137.893 cv
90.0967 138.027 90.0566 138.14 89.9771 138.231 cv
89.897 138.323 89.7969 138.368 89.6763 138.368 cv
89.5522 138.368 89.4277 138.311 89.3022 138.197 cv
89.1768 138.083 89.0781 138.025 89.0063 138.025 cv
88.8926 138.025 88.7524 138.118 88.5859 138.302 cv
88.4199 138.487 88.3369 138.677 88.3369 138.873 cv
88.3369 141.083 li
88.3369 141.363 88.4019 141.559 88.5322 141.668 cv
88.6626 141.777 88.8794 141.829 89.1826 141.822 cv
89.1826 141.984 li
86.7725 141.984 li
86.7725 141.822 li
cp
f
94.0415 136.472 mo
94.459 135.946 94.9512 135.523 95.5181 135.203 cv
95.6108 135.365 li
95.0859 135.783 94.7114 136.19 94.4863 136.585 cv
94.0923 137.274 93.895 138.192 93.895 139.338 cv
93.895 140.188 93.9702 140.888 94.1201 141.44 cv
94.3838 142.407 94.8809 143.13 95.6108 143.61 cv
95.4839 143.772 li
95.083 143.58 94.6494 143.202 94.1836 142.641 cv
93.4111 141.709 93.0249 140.651 93.0249 139.466 cv
93.0249 138.329 93.3638 137.332 94.0415 136.472 cv
cp
f
98.7798 139.234 mo
99.1709 138.888 99.3662 138.543 99.3662 138.201 cv
99.3662 138.077 99.3369 137.979 99.2783 137.905 cv
99.2197 137.832 99.1333 137.795 99.019 137.795 cv
98.8071 137.795 98.5996 137.886 98.396 138.066 cv
98.1924 138.247 98.0088 138.452 97.8462 138.68 cv
97.6733 138.947 97.5361 139.203 97.4355 139.447 cv
97.3799 139.578 97.3213 139.726 97.2593 139.892 cv
97.8818 139.801 98.3887 139.582 98.7798 139.234 cv
cp
97.1958 138.578 mo
97.8408 137.899 98.5073 137.56 99.1953 137.56 cv
99.4492 137.56 99.6514 137.619 99.8013 137.736 cv
99.9512 137.854 100.026 138.028 100.026 138.259 cv
100.026 138.729 99.7515 139.13 99.2026 139.464 cv
98.6533 139.799 98.0757 140.003 97.4697 140.078 cv
97.1909 140.112 li
97.1484 140.247 97.1191 140.354 97.103 140.433 cv
97.0864 140.513 97.0786 140.614 97.0786 140.734 cv
97.0786 141.022 97.1724 141.246 97.3594 141.406 cv
97.5469 141.566 97.7695 141.646 98.0269 141.646 cv
98.271 141.646 98.5303 141.564 98.8042 141.401 cv
98.9604 141.306 99.187 141.136 99.4834 140.892 cv
99.6108 141.004 li
99.4639 141.19 99.2539 141.381 98.98 141.577 cv
98.4946 141.927 98.0073 142.102 97.5186 142.102 cv
97.1729 142.102 96.8701 141.979 96.6094 141.734 cv
96.3486 141.49 96.2183 141.139 96.2183 140.682 cv
96.2183 139.958 96.5439 139.256 97.1958 138.578 cv
cp
f
100.602 135.748 mo
105.847 135.748 li
105.847 136.3 li
100.602 136.3 li
100.602 135.748 li
cp
f
106.908 143.199 mo
107.608 142.205 108.159 140.91 108.159 139.103 cv
108.159 137.295 107.619 136.02 106.908 135.016 cv
107.588 135.016 li
108.219 135.839 108.9 137.134 108.9 139.103 cv
108.89 141.07 108.219 142.355 107.588 143.199 cv
106.908 143.199 li
cp
f
90.7622 164.858 mo
91.1074 164.659 91.2803 164.277 91.2803 163.712 cv
91.2803 163.15 91.0781 162.766 90.6743 162.561 cv
90.27 162.354 89.7554 162.252 89.1294 162.252 cv
88.9761 162.252 88.8794 162.252 88.8384 162.252 cv
88.7979 162.252 88.7349 162.25 88.6504 162.247 cv
88.6504 164.746 li
88.6504 164.918 88.6992 165.03 88.7969 165.081 cv
88.895 165.132 89.1211 165.157 89.4766 165.157 cv
89.9883 165.157 90.4165 165.058 90.7622 164.858 cv
cp
90.4395 161.693 mo
90.8633 161.497 91.0752 161.145 91.0752 160.638 cv
91.0752 160.039 90.8306 159.635 90.3418 159.425 cv
90.0713 159.311 89.6606 159.253 89.1099 159.253 cv
88.9014 159.253 88.7725 159.271 88.7236 159.308 cv
88.6748 159.343 88.6504 159.442 88.6504 159.602 cv
88.6504 161.87 li
89.6035 161.855 li
89.9395 161.849 90.2178 161.794 90.4395 161.693 cv
cp
86.6753 165.333 mo
87.0776 165.311 87.3379 165.248 87.4561 165.146 cv
87.5742 165.043 87.6338 164.806 87.6338 164.432 cv
87.6338 159.969 li
87.6338 159.6 87.5742 159.362 87.4561 159.256 cv
87.3379 159.15 87.0776 159.087 86.6753 159.067 cv
86.6753 158.881 li
89.479 158.881 li
90.2798 158.881 90.9155 159.01 91.3862 159.269 cv
91.8564 159.527 92.0918 159.971 92.0918 160.602 cv
92.0918 161.076 91.9272 161.436 91.5981 161.681 cv
91.4121 161.822 91.1338 161.938 90.7622 162.029 cv
91.2217 162.14 91.6143 162.325 91.9404 162.585 cv
92.2661 162.844 92.4292 163.208 92.4292 163.674 cv
92.4292 164.458 92.0679 164.996 91.3447 165.29 cv
90.9639 165.443 90.4951 165.52 89.938 165.52 cv
86.6753 165.52 li
86.6753 165.333 li
cp
.7 0 1 0 cmyk
f
93.2646 165.382 mo
93.5317 165.347 93.707 165.28 93.79 165.184 cv
93.8735 165.087 93.915 164.86 93.915 164.5 cv
93.915 159.797 li
93.915 159.614 93.8911 159.479 93.8442 159.393 cv
93.7969 159.307 93.6816 159.263 93.4995 159.263 cv
93.4634 159.263 93.4287 159.266 93.3945 159.271 cv
93.3599 159.275 93.3218 159.281 93.2793 159.288 cv
93.2793 159.111 li
93.4229 159.069 93.5996 159.018 93.8096 158.957 cv
94.02 158.896 94.166 158.854 94.2471 158.827 cv
94.7168 158.68 li
94.7266 158.714 li
94.7266 161.723 li
94.9316 161.487 95.1143 161.314 95.2739 161.203 cv
95.5605 161.007 95.8701 160.909 96.2026 160.909 cv
96.7305 160.909 97.0908 161.131 97.2832 161.576 cv
97.3872 161.811 97.4395 162.12 97.4395 162.501 cv
97.4395 164.5 li
97.4395 164.847 97.4795 165.072 97.5591 165.177 cv
97.6392 165.281 97.8027 165.35 98.0503 165.382 cv
98.0503 165.52 li
95.9336 165.52 li
95.9336 165.382 li
96.2173 165.343 96.3999 165.276 96.4814 165.182 cv
96.5625 165.087 96.6035 164.86 96.6035 164.5 cv
96.6035 162.516 li
96.6035 162.2 96.5503 161.943 96.4448 161.747 cv
96.3389 161.551 96.1392 161.453 95.8457 161.453 cv
95.5918 161.453 95.3457 161.544 95.1074 161.728 cv
94.8696 161.911 94.751 162.03 94.751 162.085 cv
94.751 164.5 li
94.751 164.866 94.793 165.095 94.8779 165.187 cv
94.9624 165.278 95.1436 165.343 95.4204 165.382 cv
95.4204 165.52 li
93.2646 165.52 li
93.2646 165.382 li
cp
f
101.052 162.805 mo
100.677 162.93 100.368 163.067 100.124 163.217 cv
99.6538 163.508 99.4194 163.837 99.4194 164.207 cv
99.4194 164.504 99.5171 164.723 99.7129 164.863 cv
99.8398 164.955 99.9814 165 100.138 165 cv
100.353 165 100.559 164.94 100.756 164.819 cv
100.954 164.698 101.052 164.544 101.052 164.358 cv
101.052 162.805 li
cp
99.2578 163.359 mo
99.5576 163.163 100.156 162.897 101.052 162.561 cv
101.052 162.144 li
101.052 161.811 101.02 161.579 100.954 161.448 cv
100.843 161.229 100.614 161.12 100.265 161.12 cv
100.099 161.12 99.9409 161.163 99.791 161.248 cv
99.6411 161.335 99.5659 161.457 99.5659 161.61 cv
99.5659 161.649 99.5742 161.715 99.5903 161.809 cv
99.6069 161.901 99.6147 161.961 99.6147 161.987 cv
99.6147 162.17 99.5547 162.297 99.4341 162.369 cv
99.3657 162.412 99.2842 162.433 99.1895 162.433 cv
99.043 162.433 98.9307 162.385 98.8525 162.289 cv
98.7739 162.192 98.7349 162.085 98.7349 161.968 cv
98.7349 161.739 98.876 161.5 99.1577 161.25 cv
99.4395 161 99.8525 160.875 100.397 160.875 cv
101.029 160.875 101.458 161.081 101.683 161.492 cv
101.803 161.718 101.864 162.046 101.864 162.477 cv
101.864 164.442 li
101.864 164.631 101.876 164.762 101.903 164.833 cv
101.945 164.961 102.033 165.025 102.167 165.025 cv
102.242 165.025 102.304 165.013 102.353 164.99 cv
102.401 164.968 102.486 164.912 102.606 164.824 cv
102.606 165.079 li
102.502 165.206 102.39 165.311 102.269 165.392 cv
102.087 165.516 101.901 165.578 101.712 165.578 cv
101.49 165.578 101.33 165.506 101.23 165.363 cv
101.131 165.219 101.077 165.047 101.067 164.848 cv
100.819 165.064 100.607 165.224 100.431 165.329 cv
100.135 165.505 99.8525 165.593 99.5854 165.593 cv
99.3052 165.593 99.0625 165.494 98.8574 165.296 cv
98.6519 165.099 98.5493 164.848 98.5493 164.544 cv
98.5493 164.071 98.7856 163.676 99.2578 163.359 cv
cp
f
104.521 165.165 mo
104.745 165.238 104.941 165.274 105.11 165.274 cv
105.564 165.274 105.901 165.104 106.12 164.761 cv
106.339 164.418 106.449 164.004 106.449 163.518 cv
106.449 163.032 106.346 162.583 106.142 162.17 cv
105.938 161.757 105.606 161.551 105.149 161.551 cv
104.918 161.551 104.693 161.622 104.472 161.764 cv
104.251 161.906 104.142 162.086 104.142 162.305 cv
104.142 164.8 li
104.17 164.97 104.297 165.091 104.521 165.165 cv
cp
102.66 159.288 mo
102.66 159.121 li
103.033 159.036 103.368 158.941 103.666 158.837 cv
103.963 158.732 104.124 158.68 104.146 158.68 cv
104.153 158.7 104.156 158.719 104.156 158.739 cv
104.156 161.722 li
104.241 161.566 104.368 161.417 104.537 161.277 cv
104.836 161.032 105.181 160.909 105.571 160.909 cv
106.05 160.909 106.458 161.112 106.796 161.517 cv
107.135 161.922 107.304 162.448 107.304 163.094 cv
107.304 163.787 107.084 164.38 106.644 164.873 cv
106.204 165.366 105.626 165.613 104.909 165.613 cv
104.547 165.613 104.192 165.541 103.843 165.397 cv
103.495 165.253 103.32 165.11 103.32 164.966 cv
103.32 159.788 li
103.32 159.598 103.294 159.463 103.242 159.383 cv
103.19 159.303 103.069 159.263 102.88 159.263 cv
102.66 159.288 li
cp
f
107.72 165.382 mo
107.987 165.347 108.162 165.28 108.245 165.184 cv
108.329 165.087 108.37 164.86 108.37 164.5 cv
108.37 159.797 li
108.37 159.614 108.346 159.479 108.299 159.393 cv
108.252 159.307 108.137 159.263 107.955 159.263 cv
107.918 159.263 107.884 159.266 107.85 159.271 cv
107.815 159.275 107.777 159.281 107.734 159.288 cv
107.734 159.111 li
107.878 159.069 108.055 159.018 108.265 158.957 cv
108.475 158.896 108.621 158.854 108.702 158.827 cv
109.172 158.68 li
109.182 158.714 li
109.182 161.723 li
109.387 161.487 109.569 161.314 109.729 161.203 cv
110.016 161.007 110.325 160.909 110.658 160.909 cv
111.186 160.909 111.546 161.131 111.738 161.576 cv
111.842 161.811 111.895 162.12 111.895 162.501 cv
111.895 164.5 li
111.895 164.847 111.935 165.072 112.014 165.177 cv
112.094 165.281 112.258 165.35 112.505 165.382 cv
112.505 165.52 li
110.389 165.52 li
110.389 165.382 li
110.672 165.343 110.855 165.276 110.937 165.182 cv
111.018 165.087 111.059 164.86 111.059 164.5 cv
111.059 162.516 li
111.059 162.2 111.005 161.943 110.9 161.747 cv
110.794 161.551 110.594 161.453 110.301 161.453 cv
110.047 161.453 109.801 161.544 109.563 161.728 cv
109.325 161.911 109.206 162.03 109.206 162.085 cv
109.206 164.5 li
109.206 164.866 109.248 165.095 109.333 165.187 cv
109.417 165.278 109.599 165.343 109.875 165.382 cv
109.875 165.52 li
107.72 165.52 li
107.72 165.382 li
cp
f
115.507 162.805 mo
115.132 162.93 114.823 163.067 114.579 163.217 cv
114.109 163.508 113.875 163.837 113.875 164.207 cv
113.875 164.504 113.972 164.723 114.168 164.863 cv
114.295 164.955 114.437 165 114.593 165 cv
114.808 165 115.014 164.94 115.211 164.819 cv
115.409 164.698 115.507 164.544 115.507 164.358 cv
115.507 162.805 li
cp
113.713 163.359 mo
114.013 163.163 114.611 162.897 115.507 162.561 cv
115.507 162.144 li
115.507 161.811 115.475 161.579 115.409 161.448 cv
115.298 161.229 115.069 161.12 114.72 161.12 cv
114.554 161.12 114.396 161.163 114.246 161.248 cv
114.096 161.335 114.021 161.457 114.021 161.61 cv
114.021 161.649 114.029 161.715 114.045 161.809 cv
114.062 161.901 114.07 161.961 114.07 161.987 cv
114.07 162.17 114.01 162.297 113.889 162.369 cv
113.821 162.412 113.739 162.433 113.645 162.433 cv
113.498 162.433 113.386 162.385 113.308 162.289 cv
113.229 162.192 113.19 162.085 113.19 161.968 cv
113.19 161.739 113.331 161.5 113.613 161.25 cv
113.895 161 114.308 160.875 114.852 160.875 cv
115.484 160.875 115.913 161.081 116.138 161.492 cv
116.258 161.718 116.319 162.046 116.319 162.477 cv
116.319 164.442 li
116.319 164.631 116.332 164.762 116.358 164.833 cv
116.4 164.961 116.488 165.025 116.622 165.025 cv
116.697 165.025 116.759 165.013 116.808 164.99 cv
116.856 164.968 116.941 164.912 117.062 164.824 cv
117.062 165.079 li
116.958 165.206 116.845 165.311 116.724 165.392 cv
116.542 165.516 116.356 165.578 116.167 165.578 cv
115.945 165.578 115.785 165.506 115.686 165.363 cv
115.586 165.219 115.532 165.047 115.522 164.848 cv
115.274 165.064 115.063 165.224 114.886 165.329 cv
114.59 165.505 114.308 165.593 114.041 165.593 cv
113.76 165.593 113.518 165.494 113.313 165.296 cv
113.107 165.099 113.004 164.848 113.004 164.544 cv
113.004 164.071 113.241 163.676 113.713 163.359 cv
cp
f
121.06 160.008 mo
121.478 159.482 121.97 159.059 122.537 158.739 cv
122.629 158.901 li
122.104 159.319 121.73 159.726 121.505 160.121 cv
121.111 160.81 120.914 161.728 120.914 162.874 cv
120.914 163.723 120.989 164.424 121.139 164.976 cv
121.402 165.942 121.899 166.666 122.629 167.146 cv
122.502 167.308 li
122.102 167.115 121.668 166.738 121.202 166.176 cv
120.43 165.245 120.043 164.187 120.043 163.001 cv
120.043 161.865 120.382 160.867 121.06 160.008 cv
cp
f
125.532 162.77 mo
125.923 162.423 126.118 162.079 126.118 161.736 cv
126.118 161.613 126.089 161.514 126.03 161.441 cv
125.972 161.367 125.885 161.331 125.771 161.331 cv
125.559 161.331 125.352 161.421 125.148 161.602 cv
124.944 161.783 124.761 161.987 124.598 162.215 cv
124.425 162.482 124.288 162.738 124.188 162.983 cv
124.132 163.113 124.073 163.261 124.011 163.428 cv
124.634 163.336 125.141 163.117 125.532 162.77 cv
cp
123.948 162.113 mo
124.593 161.435 125.259 161.096 125.947 161.096 cv
126.201 161.096 126.403 161.154 126.553 161.271 cv
126.703 161.389 126.778 161.563 126.778 161.795 cv
126.778 162.264 126.503 162.666 125.955 163 cv
125.405 163.334 124.828 163.539 124.222 163.614 cv
123.943 163.648 li
123.9 163.782 123.871 163.889 123.855 163.969 cv
123.838 164.049 123.831 164.149 123.831 164.27 cv
123.831 164.558 123.924 164.781 124.111 164.941 cv
124.299 165.102 124.521 165.182 124.779 165.182 cv
125.023 165.182 125.282 165.1 125.556 164.937 cv
125.712 164.842 125.939 164.672 126.235 164.427 cv
126.363 164.54 li
126.216 164.726 126.006 164.917 125.732 165.113 cv
125.247 165.462 124.759 165.637 124.271 165.637 cv
123.925 165.637 123.622 165.515 123.361 165.27 cv
123.101 165.025 122.97 164.675 122.97 164.218 cv
122.97 163.494 123.296 162.792 123.948 162.113 cv
cp
f
130.626 156.823 mo
130.626 159.183 li
132.999 159.183 li
132.999 159.735 li
130.626 159.735 li
130.626 162.175 li
130.076 162.175 li
130.076 159.735 li
127.703 159.735 li
127.703 159.183 li
130.076 159.183 li
130.076 156.823 li
130.626 156.823 li
cp
f
134.739 166.734 mo
135.44 165.74 135.99 164.445 135.99 162.638 cv
135.99 160.831 135.45 159.556 134.739 158.552 cv
135.42 158.552 li
136.051 159.375 136.731 160.67 136.731 162.638 cv
136.721 164.606 136.051 165.891 135.42 166.734 cv
134.739 166.734 li
cp
f
21.0322 54.9746 mo
21.0337 54.9839 21.0347 55.0049 21.0347 55.0371 cv
21.0347 61.5913 li
21.0347 61.8706 21.1094 62.0483 21.2588 62.1245 cv
21.4077 62.2007 21.686 62.2461 22.0938 62.2607 cv
22.0938 62.4131 li
19.0254 62.4131 li
19.0254 62.25 li
19.4634 62.228 19.7495 62.168 19.8833 62.0703 cv
20.0171 61.9722 20.0845 61.7598 20.0845 61.4331 cv
20.0845 56.3926 li
20.0845 56.2188 20.0625 56.0859 20.019 55.9956 cv
19.9756 55.9048 19.8813 55.8594 19.7368 55.8594 cv
19.6426 55.8594 19.5205 55.8857 19.3701 55.938 cv
19.2197 55.9907 19.0796 56.0464 18.9492 56.104 cv
18.9492 55.9517 li
20.9424 54.9341 li
21.0078 54.9341 li
21.022 54.9521 21.0303 54.9658 21.0322 54.9746 cv
cp
0 0 0 1 cmyk
f
24.6519 62.3613 mo
24.5322 62.2397 24.4727 62.0938 24.4727 61.9233 cv
24.4727 61.7524 24.5332 61.6074 24.6548 61.4878 cv
24.7759 61.3682 24.9219 61.3081 25.0918 61.3081 cv
25.2622 61.3081 25.4067 61.3682 25.5264 61.4878 cv
25.646 61.6074 25.7056 61.7524 25.7056 61.9233 cv
25.7056 62.0938 25.6465 62.2397 25.5293 62.3613 cv
25.4116 62.4829 25.2656 62.5439 25.0918 62.5439 cv
24.918 62.5439 24.7715 62.4829 24.6519 62.3613 cv
cp
f
29.8169 61.3306 mo
30.0161 60.7466 30.1157 59.9019 30.1157 58.7959 cv
30.1157 57.9146 30.0562 57.2114 29.9365 56.6855 cv
29.7119 55.7065 29.292 55.2168 28.6763 55.2168 cv
28.061 55.2168 27.6392 55.7212 27.4111 56.729 cv
27.2915 57.2656 27.2319 57.9727 27.2319 58.8501 cv
27.2319 59.6733 27.2935 60.3315 27.4165 60.8247 cv
27.6479 61.7456 28.0825 62.2061 28.7197 62.2061 cv
29.252 62.2061 29.6177 61.9146 29.8169 61.3306 cv
cp
30.6426 56.2349 mo
31.0083 56.9424 31.1909 57.7554 31.1909 58.6733 cv
31.1909 59.3955 31.0791 60.0762 30.8545 60.7148 cv
30.4307 61.916 29.6978 62.5166 28.6548 62.5166 cv
27.9414 62.5166 27.355 62.1919 26.895 61.542 cv
26.4023 60.8491 26.1563 59.9072 26.1563 58.7173 cv
26.1563 57.7808 26.3213 56.9751 26.6504 56.3003 cv
27.0962 55.3823 27.7803 54.9229 28.7036 54.9229 cv
29.5366 54.9229 30.1826 55.3604 30.6426 56.2349 cv
cp
f
21.4746 137.697 mo
21.6738 137.113 21.7734 136.269 21.7734 135.163 cv
21.7734 134.281 21.7139 133.578 21.5942 133.052 cv
21.3696 132.073 20.9497 131.583 20.334 131.583 cv
19.7188 131.583 19.2969 132.088 19.0688 133.096 cv
18.9492 133.632 18.8896 134.339 18.8896 135.217 cv
18.8896 136.04 18.9512 136.698 19.0742 137.191 cv
19.3057 138.112 19.7402 138.573 20.3774 138.573 cv
20.9097 138.573 21.2754 138.281 21.4746 137.697 cv
cp
22.3003 132.602 mo
22.666 133.309 22.8486 134.122 22.8486 135.04 cv
22.8486 135.762 22.7368 136.443 22.5122 137.082 cv
22.0884 138.283 21.3555 138.883 20.3125 138.883 cv
19.5991 138.883 19.0127 138.559 18.5527 137.909 cv
18.0601 137.216 17.814 136.274 17.814 135.084 cv
17.814 134.147 17.979 133.342 18.3081 132.667 cv
18.7539 131.749 19.438 131.29 20.3613 131.29 cv
21.1943 131.29 21.8403 131.727 22.3003 132.602 cv
cp
f
24.6519 138.728 mo
24.5322 138.606 24.4727 138.46 24.4727 138.29 cv
24.4727 138.119 24.5332 137.974 24.6548 137.854 cv
24.7759 137.735 24.9219 137.675 25.0918 137.675 cv
25.2622 137.675 25.4067 137.735 25.5264 137.854 cv
25.646 137.974 25.7056 138.119 25.7056 138.29 cv
25.7056 138.46 25.6465 138.606 25.5293 138.728 cv
25.4116 138.85 25.2656 138.911 25.0918 138.911 cv
24.918 138.911 24.7715 138.85 24.6519 138.728 cv
cp
f
27.7036 138.135 mo
28.0391 138.369 28.2974 138.486 28.4785 138.486 cv
28.8955 138.486 29.2603 138.302 29.5718 137.933 cv
29.8838 137.565 30.0396 137.112 30.0396 136.575 cv
30.0396 135.635 29.5391 134.958 28.5386 134.545 cv
27.9839 134.316 27.4673 134.202 26.9888 134.202 cv
26.9087 134.202 26.8589 134.199 26.8389 134.194 cv
26.8188 134.188 26.7944 134.169 26.7656 134.137 cv
26.7729 134.108 26.7793 134.083 26.7847 134.063 cv
26.79 134.043 26.7964 134.024 26.8037 134.006 cv
27.9883 131.404 li
30.3169 131.404 li
30.4326 131.404 30.5225 131.384 30.5854 131.344 cv
30.6489 131.304 30.7314 131.23 30.8325 131.121 cv
30.9194 131.197 li
30.501 132.204 li
30.4868 132.237 30.4468 132.258 30.3818 132.267 cv
30.3164 132.276 30.2456 132.28 30.1699 132.28 cv
28.0654 132.28 li
27.603 133.233 li
28.1973 133.334 28.6323 133.431 28.9077 133.521 cv
29.3608 133.674 29.7397 133.899 30.0444 134.196 cv
30.3052 134.454 30.5029 134.744 30.6367 135.064 cv
30.771 135.386 30.8379 135.726 30.8379 136.085 cv
30.8379 136.887 30.5527 137.557 29.9814 138.094 cv
29.4106 138.631 28.6885 138.899 27.8145 138.899 cv
27.4595 138.899 27.1729 138.865 26.9556 138.796 cv
26.5928 138.684 26.4116 138.482 26.4116 138.192 cv
26.4116 138.083 26.4507 137.988 26.5288 137.906 cv
26.6064 137.825 26.7271 137.784 26.8901 137.784 cv
27.0972 137.784 27.3682 137.901 27.7036 138.135 cv
cp
f
308.353 19.5244 mo
308.552 18.9404 308.652 18.0957 308.652 16.9897 cv
308.652 16.1084 308.591 15.4053 308.472 14.8794 cv
308.248 13.9004 307.828 13.4106 307.212 13.4106 cv
306.595 13.4106 306.173 13.915 305.947 14.9229 cv
305.826 15.4595 305.767 16.1665 305.767 17.0439 cv
305.767 17.8672 305.828 18.5254 305.951 19.0186 cv
306.183 19.9395 306.619 20.3999 307.255 20.3999 cv
307.787 20.3999 308.154 20.1084 308.353 19.5244 cv
cp
309.177 14.4287 mo
309.542 15.1362 309.726 15.9492 309.726 16.8672 cv
309.726 17.5894 309.615 18.27 309.39 18.9087 cv
308.966 20.1099 308.232 20.7104 307.189 20.7104 cv
306.476 20.7104 305.89 20.3857 305.429 19.7358 cv
304.937 19.043 304.691 18.1011 304.691 16.9111 cv
304.691 15.9746 304.857 15.1689 305.185 14.4941 cv
305.63 13.5762 306.316 13.1167 307.24 13.1167 cv
308.072 13.1167 308.718 13.5542 309.177 14.4287 cv
cp
f
311.529 20.5552 mo
311.41 20.4336 311.351 20.2876 311.351 20.1172 cv
311.351 19.9463 311.412 19.8013 311.533 19.6816 cv
311.654 19.562 311.798 19.502 311.97 19.502 cv
312.14 19.502 312.285 19.562 312.404 19.6816 cv
312.523 19.8013 312.583 19.9463 312.583 20.1172 cv
312.583 20.2876 312.525 20.4336 312.406 20.5552 cv
312.289 20.6768 312.144 20.7378 311.97 20.7378 cv
311.796 20.7378 311.648 20.6768 311.529 20.5552 cv
cp
f
313.267 20.4819 mo
314.593 19.1035 315.494 18.0918 315.966 17.4468 cv
316.441 16.8013 316.679 16.1724 316.679 15.5596 cv
316.679 15.0229 316.535 14.6143 316.244 14.333 cv
315.955 14.0522 315.609 13.9116 315.207 13.9116 cv
314.71 13.9116 314.308 14.0928 314.001 14.4556 cv
313.832 14.6548 313.667 14.9614 313.513 15.3745 cv
313.279 15.3257 li
313.46 14.4912 313.767 13.9121 314.199 13.5874 cv
314.632 13.2627 315.097 13.1006 315.593 13.1006 cv
316.205 13.1006 316.699 13.2935 317.078 13.6797 cv
317.457 14.0659 317.646 14.5381 317.646 15.0967 cv
317.646 15.6914 317.441 16.2642 317.031 16.8154 cv
316.623 17.3662 315.734 18.3472 314.363 19.7578 cv
316.857 19.7578 li
317.205 19.7578 317.449 19.7163 317.591 19.6328 cv
317.732 19.5493 317.892 19.3462 318.07 19.0234 cv
318.21 19.0889 li
317.607 20.6069 li
313.267 20.6069 li
313.267 20.4819 li
cp
f
322.257 19.5244 mo
322.457 18.9404 322.556 18.0957 322.556 16.9897 cv
322.556 16.1084 322.496 15.4053 322.376 14.8794 cv
322.152 13.9004 321.732 13.4106 321.117 13.4106 cv
320.5 13.4106 320.078 13.915 319.851 14.9229 cv
319.73 15.4595 319.671 16.1665 319.671 17.0439 cv
319.671 17.8672 319.732 18.5254 319.855 19.0186 cv
320.087 19.9395 320.523 20.3999 321.16 20.3999 cv
321.691 20.3999 322.058 20.1084 322.257 19.5244 cv
cp
323.082 14.4287 mo
323.447 15.1362 323.63 15.9492 323.63 16.8672 cv
323.63 17.5894 323.519 18.27 323.294 18.9087 cv
322.871 20.1099 322.136 20.7104 321.093 20.7104 cv
320.38 20.7104 319.794 20.3857 319.333 19.7358 cv
318.841 19.043 318.595 18.1011 318.595 16.9111 cv
318.595 15.9746 318.761 15.1689 319.089 14.4941 cv
319.535 13.5762 320.22 13.1167 321.144 13.1167 cv
321.976 13.1167 322.623 13.5542 323.082 14.4287 cv
cp
f
308.353 68.0195 mo
308.552 67.4355 308.652 66.5908 308.652 65.4849 cv
308.652 64.6035 308.591 63.9004 308.472 63.3745 cv
308.248 62.3955 307.828 61.9058 307.212 61.9058 cv
306.595 61.9058 306.173 62.4102 305.947 63.418 cv
305.826 63.9546 305.767 64.6616 305.767 65.5391 cv
305.767 66.3623 305.828 67.0205 305.951 67.5137 cv
306.183 68.4346 306.619 68.895 307.255 68.895 cv
307.787 68.895 308.154 68.6035 308.353 68.0195 cv
cp
309.177 62.9238 mo
309.542 63.6313 309.726 64.4443 309.726 65.3623 cv
309.726 66.0845 309.615 66.7651 309.39 67.4038 cv
308.966 68.605 308.232 69.2056 307.189 69.2056 cv
306.476 69.2056 305.89 68.8809 305.429 68.231 cv
304.937 67.5381 304.691 66.5962 304.691 65.4063 cv
304.691 64.4697 304.857 63.6641 305.185 62.9893 cv
305.63 62.0713 306.316 61.6118 307.24 61.6118 cv
308.072 61.6118 308.718 62.0493 309.177 62.9238 cv
cp
f
311.529 69.0503 mo
311.41 68.9287 311.351 68.7827 311.351 68.6123 cv
311.351 68.4414 311.412 68.2964 311.533 68.1768 cv
311.654 68.0571 311.798 67.9971 311.97 67.9971 cv
312.14 67.9971 312.285 68.0571 312.404 68.1768 cv
312.523 68.2964 312.583 68.4414 312.583 68.6123 cv
312.583 68.7827 312.525 68.9287 312.406 69.0503 cv
312.289 69.1719 312.144 69.2329 311.97 69.2329 cv
311.796 69.2329 311.648 69.1719 311.529 69.0503 cv
cp
f
316.251 61.6636 mo
316.253 61.6729 316.255 61.6938 316.255 61.7261 cv
316.255 68.2803 li
316.255 68.5596 316.33 68.7373 316.478 68.8135 cv
316.628 68.8896 316.906 68.9351 317.314 68.9497 cv
317.314 69.1021 li
314.246 69.1021 li
314.246 68.939 li
314.683 68.917 314.97 68.8569 315.103 68.7593 cv
315.238 68.6611 315.304 68.4487 315.304 68.1221 cv
315.304 63.0815 li
315.304 62.9077 315.283 62.7749 315.24 62.6846 cv
315.197 62.5938 315.101 62.5483 314.957 62.5483 cv
314.863 62.5483 314.74 62.5747 314.591 62.627 cv
314.441 62.6797 314.3 62.7354 314.169 62.793 cv
314.169 62.6406 li
316.164 61.623 li
316.228 61.623 li
316.242 61.6411 316.25 61.6548 316.251 61.6636 cv
cp
f
320.142 68.457 mo
320.478 68.6909 320.736 68.8081 320.917 68.8081 cv
321.335 68.8081 321.699 68.624 322.011 68.2554 cv
322.324 67.8872 322.48 67.4346 322.48 66.8975 cv
322.48 65.9575 321.978 65.2808 320.978 64.8672 cv
320.423 64.6387 319.906 64.5244 319.427 64.5244 cv
319.349 64.5244 319.298 64.5215 319.279 64.5161 cv
319.259 64.5107 319.234 64.4917 319.205 64.459 cv
319.212 64.4302 319.218 64.4053 319.224 64.3857 cv
319.23 64.3657 319.236 64.3467 319.244 64.3286 cv
320.427 61.7261 li
322.757 61.7261 li
322.873 61.7261 322.962 61.7065 323.025 61.6665 cv
323.089 61.6265 323.171 61.5522 323.273 61.4434 cv
323.359 61.5195 li
322.941 62.5264 li
322.925 62.5591 322.886 62.5801 322.822 62.5889 cv
322.755 62.5981 322.685 62.6025 322.609 62.6025 cv
320.505 62.6025 li
320.042 63.5552 li
320.636 63.6567 321.072 63.7529 321.347 63.8438 cv
321.8 63.9961 322.179 64.2212 322.484 64.5186 cv
322.746 64.7764 322.943 65.0659 323.076 65.3867 cv
323.21 65.708 323.277 66.0483 323.277 66.4077 cv
323.277 67.2095 322.992 67.8794 322.421 68.416 cv
321.849 68.9531 321.128 69.2217 320.253 69.2217 cv
319.898 69.2217 319.613 69.1875 319.394 69.1182 cv
319.033 69.0059 318.851 68.8047 318.851 68.5142 cv
318.851 68.4053 318.89 68.3101 318.968 68.2285 cv
319.046 68.147 319.167 68.106 319.33 68.106 cv
319.537 68.106 319.808 68.2231 320.142 68.457 cv
cp
f
308.353 116.515 mo
308.552 115.931 308.652 115.086 308.652 113.98 cv
308.652 113.099 308.591 112.396 308.472 111.87 cv
308.248 110.891 307.828 110.401 307.212 110.401 cv
306.595 110.401 306.173 110.905 305.947 111.913 cv
305.826 112.45 305.767 113.157 305.767 114.034 cv
305.767 114.857 305.828 115.516 305.951 116.009 cv
306.183 116.93 306.619 117.39 307.255 117.39 cv
307.787 117.39 308.154 117.099 308.353 116.515 cv
cp
309.177 111.419 mo
309.542 112.126 309.726 112.939 309.726 113.857 cv
309.726 114.58 309.615 115.26 309.39 115.899 cv
308.966 117.1 308.232 117.701 307.189 117.701 cv
306.476 117.701 305.89 117.376 305.429 116.726 cv
304.937 116.033 304.691 115.091 304.691 113.901 cv
304.691 112.965 304.857 112.159 305.185 111.484 cv
305.63 110.566 306.316 110.107 307.24 110.107 cv
308.072 110.107 308.718 110.544 309.177 111.419 cv
cp
f
311.529 117.545 mo
311.41 117.424 311.351 117.278 311.351 117.107 cv
311.351 116.937 311.412 116.792 311.533 116.672 cv
311.654 116.552 311.798 116.492 311.97 116.492 cv
312.14 116.492 312.285 116.552 312.404 116.672 cv
312.523 116.792 312.583 116.937 312.583 117.107 cv
312.583 117.278 312.525 117.424 312.406 117.545 cv
312.289 117.667 312.144 117.728 311.97 117.728 cv
311.796 117.728 311.648 117.667 311.529 117.545 cv
cp
f
316.251 110.159 mo
316.253 110.168 316.255 110.189 316.255 110.221 cv
316.255 116.775 li
316.255 117.055 316.33 117.232 316.478 117.309 cv
316.628 117.385 316.906 117.43 317.314 117.445 cv
317.314 117.597 li
314.246 117.597 li
314.246 117.434 li
314.683 117.412 314.97 117.352 315.103 117.254 cv
315.238 117.156 315.304 116.944 315.304 116.617 cv
315.304 111.577 li
315.304 111.403 315.283 111.27 315.24 111.18 cv
315.197 111.089 315.101 111.043 314.957 111.043 cv
314.863 111.043 314.74 111.07 314.591 111.122 cv
314.441 111.175 314.3 111.23 314.169 111.288 cv
314.169 111.136 li
316.164 110.118 li
316.228 110.118 li
316.242 110.136 316.25 110.15 316.251 110.159 cv
cp
f
322.257 116.515 mo
322.457 115.931 322.556 115.086 322.556 113.98 cv
322.556 113.099 322.496 112.396 322.376 111.87 cv
322.152 110.891 321.732 110.401 321.117 110.401 cv
320.5 110.401 320.078 110.905 319.851 111.913 cv
319.73 112.45 319.671 113.157 319.671 114.034 cv
319.671 114.857 319.732 115.516 319.855 116.009 cv
320.087 116.93 320.523 117.39 321.16 117.39 cv
321.691 117.39 322.058 117.099 322.257 116.515 cv
cp
323.082 111.419 mo
323.447 112.126 323.63 112.939 323.63 113.857 cv
323.63 114.58 323.519 115.26 323.294 115.899 cv
322.871 117.1 322.136 117.701 321.093 117.701 cv
320.38 117.701 319.794 117.376 319.333 116.726 cv
318.841 116.033 318.595 115.091 318.595 113.901 cv
318.595 112.965 318.761 112.159 319.089 111.484 cv
319.535 110.566 320.22 110.107 321.144 110.107 cv
321.976 110.107 322.623 110.544 323.082 111.419 cv
cp
f
308.353 163.896 mo
308.552 163.312 308.652 162.467 308.652 161.361 cv
308.652 160.479 308.591 159.776 308.472 159.25 cv
308.248 158.271 307.828 157.782 307.212 157.782 cv
306.595 157.782 306.173 158.286 305.947 159.294 cv
305.826 159.831 305.767 160.538 305.767 161.415 cv
305.767 162.238 305.828 162.896 305.951 163.39 cv
306.183 164.311 306.619 164.771 307.255 164.771 cv
307.787 164.771 308.154 164.479 308.353 163.896 cv
cp
309.177 158.8 mo
309.542 159.507 309.726 160.32 309.726 161.238 cv
309.726 161.96 309.615 162.641 309.39 163.28 cv
308.966 164.481 308.232 165.082 307.189 165.082 cv
306.476 165.082 305.89 164.757 305.429 164.107 cv
304.937 163.414 304.691 162.472 304.691 161.282 cv
304.691 160.346 304.857 159.54 305.185 158.865 cv
305.63 157.947 306.316 157.488 307.24 157.488 cv
308.072 157.488 308.718 157.925 309.177 158.8 cv
cp
f
311.529 164.926 mo
311.41 164.805 311.351 164.659 311.351 164.488 cv
311.351 164.317 311.412 164.172 311.533 164.053 cv
311.654 163.933 311.798 163.873 311.97 163.873 cv
312.14 163.873 312.285 163.933 312.404 164.053 cv
312.523 164.172 312.583 164.317 312.583 164.488 cv
312.583 164.659 312.525 164.805 312.406 164.926 cv
312.289 165.048 312.144 165.109 311.97 165.109 cv
311.796 165.109 311.648 165.048 311.529 164.926 cv
cp
f
316.695 163.896 mo
316.894 163.312 316.994 162.467 316.994 161.361 cv
316.994 160.479 316.933 159.776 316.814 159.25 cv
316.589 158.271 316.169 157.782 315.554 157.782 cv
314.939 157.782 314.517 158.286 314.289 159.294 cv
314.169 159.831 314.109 160.538 314.109 161.415 cv
314.109 162.238 314.171 162.896 314.294 163.39 cv
314.527 164.311 314.96 164.771 315.597 164.771 cv
316.13 164.771 316.496 164.479 316.695 163.896 cv
cp
317.521 158.8 mo
317.886 159.507 318.07 160.32 318.07 161.238 cv
318.07 161.96 317.957 162.641 317.732 163.28 cv
317.308 164.481 316.576 165.082 315.533 165.082 cv
314.82 165.082 314.232 164.757 313.773 164.107 cv
313.281 163.414 313.035 162.472 313.035 161.282 cv
313.035 160.346 313.199 159.54 313.529 158.865 cv
313.974 157.947 314.658 157.488 315.582 157.488 cv
316.414 157.488 317.06 157.925 317.521 158.8 cv
cp
f
320.142 164.333 mo
320.478 164.567 320.736 164.684 320.917 164.684 cv
321.335 164.684 321.699 164.5 322.011 164.131 cv
322.324 163.763 322.48 163.311 322.48 162.773 cv
322.48 161.833 321.978 161.157 320.978 160.743 cv
320.423 160.515 319.906 160.4 319.427 160.4 cv
319.349 160.4 319.298 160.397 319.279 160.392 cv
319.259 160.387 319.234 160.368 319.205 160.335 cv
319.212 160.306 319.218 160.281 319.224 160.262 cv
319.23 160.242 319.236 160.223 319.244 160.205 cv
320.427 157.602 li
322.757 157.602 li
322.873 157.602 322.962 157.583 323.025 157.542 cv
323.089 157.502 323.171 157.428 323.273 157.319 cv
323.359 157.396 li
322.941 158.402 li
322.925 158.435 322.886 158.456 322.822 158.465 cv
322.755 158.474 322.685 158.479 322.609 158.479 cv
320.505 158.479 li
320.042 159.431 li
320.636 159.533 321.072 159.629 321.347 159.72 cv
321.8 159.872 322.179 160.097 322.484 160.395 cv
322.746 160.652 322.943 160.942 323.076 161.263 cv
323.21 161.584 323.277 161.924 323.277 162.284 cv
323.277 163.085 322.992 163.755 322.421 164.292 cv
321.849 164.829 321.128 165.098 320.253 165.098 cv
319.898 165.098 319.613 165.063 319.394 164.994 cv
319.033 164.882 318.851 164.681 318.851 164.39 cv
318.851 164.281 318.89 164.186 318.968 164.104 cv
319.046 164.023 319.167 163.982 319.33 163.982 cv
319.537 163.982 319.808 164.099 320.142 164.333 cv
cp
f
333.524 108.235 mo
332.941 107.771 332.472 107.223 332.117 106.591 cv
332.296 106.487 li
332.76 107.072 333.21 107.489 333.649 107.739 cv
334.414 108.179 335.431 108.398 336.701 108.398 cv
337.643 108.398 338.419 108.314 339.031 108.147 cv
340.103 107.854 340.906 107.301 341.437 106.487 cv
341.617 106.629 li
341.403 107.075 340.985 107.559 340.363 108.077 cv
339.33 108.938 338.157 109.367 336.843 109.367 cv
335.583 109.367 334.476 108.99 333.524 108.235 cv
cp
f
334.862 102.224 mo
335.095 101.895 335.349 101.73 335.627 101.73 cv
335.747 101.73 335.858 101.772 335.96 101.855 cv
336.064 101.939 336.115 102.068 336.115 102.242 cv
336.115 102.369 336.072 102.481 335.984 102.577 cv
335.898 102.673 335.771 102.743 335.605 102.787 cv
335.343 102.852 li
335.152 102.899 335.016 102.98 334.936 103.097 cv
334.861 103.217 334.822 103.375 334.822 103.57 cv
334.822 103.984 335.002 104.334 335.363 104.618 cv
335.724 104.903 336.204 105.046 336.802 105.046 cv
337.349 105.046 337.841 104.889 338.275 104.575 cv
338.71 104.261 338.928 103.837 338.928 103.304 cv
338.928 102.927 338.804 102.591 338.558 102.297 cv
338.417 102.13 338.192 101.941 337.883 101.73 cv
337.976 101.578 li
338.411 101.785 338.755 102.003 339.009 102.231 cv
339.495 102.671 339.738 103.179 339.738 103.756 cv
339.738 104.321 339.515 104.822 339.07 105.258 cv
338.625 105.693 338.019 105.911 337.255 105.911 cv
336.505 105.911 335.861 105.674 335.322 105.198 cv
334.783 104.723 334.513 104.122 334.513 103.396 cv
334.513 102.942 334.628 102.552 334.862 102.224 cv
cp
f
339.494 101.039 mo
339.468 100.756 339.421 100.567 339.352 100.473 cv
339.248 100.328 339.037 100.255 338.722 100.255 cv
335.914 100.255 li
335.646 100.255 335.47 100.291 335.387 100.361 cv
335.304 100.433 335.262 100.549 335.262 100.713 cv
335.262 100.789 335.265 100.846 335.273 100.884 cv
335.281 100.922 335.292 100.967 335.311 101.018 cv
335.121 101.018 li
334.991 100.625 li
334.943 100.484 334.859 100.252 334.736 99.9287 cv
334.613 99.6055 334.55 99.4355 334.55 99.417 cv
334.55 99.3984 334.56 99.3877 334.578 99.3848 cv
334.595 99.3809 334.63 99.3789 334.681 99.3789 cv
335.414 99.3789 li
335.088 99.0195 334.863 98.709 334.738 98.4482 cv
334.613 98.1865 334.55 97.918 334.55 97.6426 cv
334.55 97.2686 334.677 96.9707 334.931 96.75 cv
335.068 96.6338 335.255 96.5371 335.49 96.4609 cv
335.218 96.1924 335.017 95.959 334.887 95.7588 cv
334.664 95.4141 334.55 95.0625 334.55 94.7031 cv
334.55 94.1191 334.788 93.7285 335.262 93.5332 cv
335.531 93.4199 335.954 93.3643 336.533 93.3643 cv
338.787 93.3643 li
339.044 93.3643 339.218 93.3066 339.311 93.1924 cv
339.404 93.0781 339.464 92.8721 339.494 92.5752 cv
339.634 92.5752 li
339.634 95.0293 li
339.482 95.0293 li
339.453 94.7139 339.39 94.5059 339.292 94.4063 cv
339.195 94.3066 338.996 94.2568 338.695 94.2568 cv
336.354 94.2568 li
336.002 94.2568 335.744 94.2949 335.578 94.3711 cv
335.281 94.5049 335.132 94.7686 335.132 95.1602 cv
335.132 95.3965 335.209 95.6299 335.365 95.8623 cv
335.457 95.9971 335.601 96.1621 335.8 96.3574 cv
338.581 96.3574 li
338.875 96.3574 339.097 96.3066 339.249 96.2031 cv
339.401 96.0996 339.482 95.8809 339.494 95.5469 cv
339.634 95.5469 li
339.634 98.0449 li
339.494 98.0449 li
339.45 97.7002 339.367 97.4814 339.244 97.3867 cv
339.121 97.292 338.816 97.2451 338.331 97.2451 cv
336.813 97.2451 li
336.257 97.2451 335.874 97.2813 335.664 97.3535 cv
335.309 97.4736 335.132 97.7275 335.132 98.1162 cv
335.132 98.3379 335.193 98.5557 335.314 98.7695 cv
335.435 98.9834 335.593 99.1719 335.789 99.335 cv
338.759 99.335 li
339.035 99.335 339.225 99.2871 339.33 99.1914 cv
339.435 99.0947 339.49 98.8857 339.494 98.5625 cv
339.634 98.5625 li
339.634 101.039 li
339.494 101.039 li
cp
f
336.185 91.0098 mo
334.947 89.8145 334.039 89.0029 333.459 88.5752 cv
332.88 88.1475 332.315 87.9326 331.765 87.9326 cv
331.283 87.9326 330.916 88.0635 330.664 88.3252 cv
330.412 88.5859 330.285 88.8984 330.285 89.2607 cv
330.285 89.708 330.448 90.0703 330.773 90.3486 cv
330.953 90.502 331.228 90.6484 331.599 90.7891 cv
331.554 91 li
330.805 90.8369 330.285 90.5596 329.994 90.1699 cv
329.703 89.7793 329.556 89.3604 329.556 88.9131 cv
329.556 88.3613 329.73 87.9141 330.077 87.5732 cv
330.423 87.2314 330.847 87.0605 331.349 87.0605 cv
331.882 87.0605 332.398 87.2461 332.892 87.6152 cv
333.387 87.9844 334.268 88.7861 335.535 90.0215 cv
335.535 87.7715 li
335.535 87.458 335.498 87.2373 335.422 87.1104 cv
335.347 86.9824 335.166 86.8389 334.875 86.6787 cv
334.934 86.5518 li
336.297 87.0957 li
336.297 91.0098 li
336.185 91.0098 li
cp
f
341.269 83.3682 mo
341.384 83.0254 341.443 82.6328 341.443 82.1895 cv
341.443 81.5869 341.339 81.0977 341.13 80.7197 cv
340.922 80.3428 340.666 80.1533 340.363 80.1533 cv
340.12 80.1533 339.958 80.3066 339.878 80.6123 cv
339.832 80.8008 339.804 81.1592 339.797 81.6865 cv
339.793 81.8213 339.789 81.9629 339.784 82.1123 cv
339.779 82.2607 339.772 82.3975 339.765 82.5205 cv
339.761 82.6006 339.747 82.7305 339.721 82.9082 cv
339.696 83.0859 339.674 83.2188 339.656 83.3066 cv
339.656 83.3496 339.77 83.4561 339.998 83.624 cv
340.23 83.7969 340.443 83.8828 340.639 83.8828 cv
340.943 83.8828 341.154 83.7109 341.269 83.3682 cv
cp
337.538 81.6396 mo
337.365 81.4219 337.062 81.3135 336.63 81.3135 cv
336.287 81.3135 335.9 81.4014 335.468 81.5771 cv
335.038 81.7529 334.822 82.0459 334.822 82.4561 cv
334.822 82.8115 334.991 83.0566 335.328 83.1914 cv
335.505 83.2598 335.724 83.2949 335.984 83.2949 cv
336.426 83.2949 336.823 83.1875 337.173 82.9736 cv
337.525 82.7598 337.701 82.4814 337.701 82.1406 cv
337.701 81.9414 337.646 81.7744 337.538 81.6396 cv
cp
337.228 83.9453 mo
336.949 84.1279 336.636 84.2197 336.289 84.2197 cv
335.865 84.2197 335.462 84.0508 335.083 83.7139 cv
334.703 83.376 334.513 82.8994 334.513 82.2822 cv
334.513 82.0176 334.576 81.7256 334.701 81.4053 cv
334.825 81.0869 334.887 80.7793 334.887 80.4854 cv
334.887 80.4092 334.884 80.2949 334.879 80.1406 cv
334.875 79.9863 334.871 79.874 334.871 79.8057 cv
334.871 79.7402 li
335.311 79.7402 li
335.311 80.6816 li
335.462 80.6162 335.595 80.5654 335.708 80.5293 cv
335.917 80.4678 336.117 80.4365 336.304 80.4365 cv
336.718 80.4365 337.097 80.6084 337.443 80.9512 cv
337.789 81.2939 337.961 81.7559 337.961 82.3369 cv
337.961 82.4277 337.945 82.5908 337.913 82.8262 cv
337.913 82.9316 338.001 83.0713 338.179 83.2451 cv
338.356 83.4199 338.501 83.5068 338.613 83.5068 cv
338.729 83.5068 338.814 83.3799 338.869 83.125 cv
338.905 82.958 338.923 82.7725 338.923 82.5693 cv
338.923 81.6348 338.975 81.001 339.08 80.667 cv
339.25 80.1182 339.617 79.8438 340.177 79.8438 cv
340.75 79.8438 341.206 80.1641 341.546 80.8047 cv
341.886 81.4443 342.056 82.0918 342.056 82.7451 cv
342.056 83.3398 341.936 83.8115 341.695 84.1602 cv
341.455 84.5088 341.203 84.6826 340.938 84.6826 cv
340.808 84.6826 340.679 84.6367 340.554 84.5439 cv
340.43 84.4521 340.244 84.2705 339.998 83.999 cv
339.677 83.6416 li
339.613 83.5762 li
339.547 83.7422 339.484 83.8662 339.422 83.9492 cv
339.31 84.0938 339.181 84.165 339.037 84.165 cv
338.903 84.165 338.755 84.1025 338.594 83.9775 cv
338.433 83.8525 338.171 83.585 337.81 83.1748 cv
337.701 83.5049 337.507 83.7617 337.228 83.9453 cv
cp
f
333.746 78.502 mo
333.746 73.999 li
334.355 73.999 li
334.355 78.502 li
333.746 78.502 li
cp
f
330.359 71.2129 mo
330.367 71.2109 330.383 71.21 330.41 71.21 cv
335.64 71.21 li
335.864 71.21 336.005 71.1504 336.066 71.0313 cv
336.127 70.9111 336.164 70.6875 336.175 70.3613 cv
336.296 70.3613 li
336.296 72.8213 li
336.167 72.8213 li
336.149 72.4707 336.101 72.2412 336.023 72.1338 cv
335.945 72.0264 335.775 71.9727 335.515 71.9727 cv
331.492 71.9727 li
331.352 71.9727 331.247 71.9902 331.173 72.0244 cv
331.101 72.0596 331.066 72.1348 331.066 72.251 cv
331.066 72.3262 331.086 72.4248 331.128 72.5449 cv
331.17 72.666 331.214 72.7783 331.261 72.8828 cv
331.139 72.8828 li
330.327 71.2842 li
330.327 71.2324 li
330.341 71.2207 330.352 71.2139 330.359 71.2129 cv
cp
f
338.429 65.9512 mo
338.91 66.0928 339.365 66.2998 339.792 66.5713 cv
340.248 66.8584 340.673 67.2412 341.068 67.7197 cv
341.329 68.0361 341.511 68.3008 341.617 68.5146 cv
341.437 68.6182 li
341.013 68.0596 340.582 67.6514 340.139 67.3936 cv
339.357 66.9365 338.324 66.708 337.039 66.708 cv
336 66.708 335.15 66.8125 334.491 67.0234 cv
333.56 67.3174 332.83 67.8486 332.296 68.6182 cv
332.117 68.4766 li
332.436 67.9033 332.917 67.3701 333.562 66.876 cv
334.554 66.1182 335.666 65.7383 336.897 65.7383 cv
337.437 65.7383 337.947 65.8096 338.429 65.9512 cv
cp
f
150.602 230.546 mo
151.011 230.503 151.276 230.43 151.397 230.327 cv
151.519 230.225 151.58 229.964 151.58 229.545 cv
151.58 224.586 li
151.58 224.19 151.52 223.932 151.4 223.81 cv
151.281 223.688 151.015 223.613 150.602 223.584 cv
150.602 223.377 li
156.511 223.377 li
156.548 224.972 li
156.267 224.972 li
156.171 224.481 156.031 224.163 155.843 224.019 cv
155.654 223.875 155.234 223.802 154.583 223.802 cv
153.068 223.802 li
152.906 223.802 152.804 223.828 152.765 223.881 cv
152.728 223.934 152.708 224.033 152.708 224.178 cv
152.708 226.666 li
154.425 226.666 li
154.9 226.666 155.203 226.595 155.332 226.454 cv
155.462 226.313 155.568 226.028 155.648 225.598 cv
155.908 225.598 li
155.908 228.173 li
155.648 228.173 li
155.564 227.741 155.457 227.456 155.328 227.316 cv
155.197 227.176 154.896 227.106 154.425 227.106 cv
152.708 227.106 li
152.708 229.866 li
152.708 230.087 152.779 230.218 152.917 230.258 cv
153.058 230.298 153.476 230.318 154.171 230.318 cv
154.927 230.318 155.484 230.235 155.841 230.07 cv
156.201 229.905 156.523 229.505 156.81 228.87 cv
157.119 228.87 li
156.615 230.753 li
150.602 230.753 li
150.602 230.546 li
cp
f
164.474 224.629 mo
164.937 224.045 165.484 223.575 166.113 223.22 cv
166.216 223.399 li
165.634 223.864 165.218 224.315 164.968 224.754 cv
164.529 225.521 164.31 226.54 164.31 227.814 cv
164.31 228.757 164.394 229.536 164.56 230.149 cv
164.853 231.223 165.406 232.027 166.216 232.561 cv
166.076 232.74 li
165.63 232.526 165.148 232.107 164.63 231.483 cv
163.773 230.449 163.343 229.273 163.343 227.956 cv
163.343 226.692 163.72 225.584 164.474 224.629 cv
cp
f
166.662 230.546 mo
167.123 230.5 167.417 230.395 167.548 230.234 cv
167.677 230.072 167.744 229.698 167.744 229.11 cv
167.744 224.585 li
167.744 224.183 167.679 223.92 167.552 223.799 cv
167.425 223.678 167.138 223.606 166.689 223.584 cv
166.689 223.377 li
168.882 223.377 li
171.437 228.931 li
173.929 223.377 li
176.14 223.377 li
176.14 223.584 li
175.728 223.613 175.46 223.688 175.341 223.81 cv
175.222 223.932 175.162 224.19 175.162 224.585 cv
175.162 229.54 li
175.162 229.946 175.222 230.207 175.341 230.321 cv
175.46 230.435 175.728 230.51 176.14 230.546 cv
176.14 230.753 li
173.027 230.753 li
173.027 230.546 li
173.476 230.51 173.757 230.43 173.867 230.305 cv
173.978 230.18 174.033 229.881 174.033 229.41 cv
174.033 224.406 li
171.183 230.753 li
171.031 230.753 li
168.232 224.667 li
168.232 229.11 li
168.232 229.72 168.32 230.117 168.498 230.302 cv
168.613 230.421 168.873 230.503 169.275 230.546 cv
169.275 230.753 li
166.662 230.753 li
166.662 230.546 li
cp
f
177.714 226.595 mo
177.599 226.791 177.515 227.037 177.464 227.335 cv
179.757 227.335 li
179.718 226.972 179.648 226.702 179.55 226.524 cv
179.373 226.205 179.076 226.045 178.66 226.045 cv
178.248 226.045 177.933 226.228 177.714 226.595 cv
cp
180.316 226.178 mo
180.701 226.532 180.892 227.034 180.892 227.683 cv
177.443 227.683 li
177.48 228.523 177.669 229.135 178.013 229.519 cv
178.357 229.903 178.765 230.095 179.236 230.095 cv
179.617 230.095 179.937 229.995 180.197 229.796 cv
180.458 229.597 180.699 229.314 180.919 228.949 cv
181.109 229.014 li
180.96 229.476 180.683 229.903 180.277 230.295 cv
179.869 230.688 179.371 230.884 178.779 230.884 cv
178.099 230.884 177.574 230.626 177.203 230.111 cv
176.83 229.596 176.644 229.002 176.644 228.331 cv
176.644 227.602 176.861 226.972 177.291 226.442 cv
177.722 225.912 178.283 225.647 178.974 225.647 cv
179.486 225.647 179.933 225.824 180.316 226.178 cv
cp
f
184.505 223.377 mo
184.505 223.568 li
184.226 223.572 184.037 223.59 183.935 223.623 cv
183.757 223.682 183.669 223.802 183.669 223.982 cv
183.669 224.075 183.701 224.204 183.765 224.37 cv
183.828 224.536 183.947 224.811 184.119 225.196 cv
185.859 229.077 li
187.441 224.875 li
187.509 224.689 187.564 224.532 187.599 224.403 cv
187.636 224.274 187.654 224.169 187.654 224.088 cv
187.654 223.87 187.562 223.723 187.376 223.646 cv
187.269 223.601 187.089 223.575 186.839 223.568 cv
186.839 223.377 li
189.115 223.377 li
189.115 223.568 li
188.88 223.601 188.707 223.664 188.593 223.758 cv
188.423 223.9 188.255 224.185 188.089 224.613 cv
185.626 230.884 li
185.458 230.884 li
182.708 224.756 li
182.478 224.237 182.292 223.913 182.152 223.786 cv
182.013 223.659 181.81 223.586 181.541 223.568 cv
181.541 223.377 li
184.505 223.377 li
cp
f
192.353 229.545 mo
192.212 230.028 192.005 230.483 191.734 230.911 cv
191.449 231.369 191.066 231.795 190.587 232.19 cv
190.273 232.452 190.009 232.635 189.794 232.74 cv
189.691 232.561 li
190.25 232.136 190.656 231.702 190.914 231.26 cv
191.371 230.476 191.599 229.44 191.599 228.151 cv
191.599 227.11 191.494 226.259 191.283 225.598 cv
190.99 224.666 190.458 223.933 189.691 223.399 cv
189.833 223.22 li
190.406 223.539 190.937 224.021 191.429 224.667 cv
192.187 225.662 192.566 226.776 192.566 228.01 cv
192.566 228.551 192.494 229.063 192.353 229.545 cv
cp
f
35.0698 212.724 mo
35.0718 212.733 35.0728 212.754 35.0728 212.787 cv
35.0728 219.341 li
35.0728 219.62 35.147 219.798 35.2964 219.874 cv
35.4453 219.95 35.7241 219.996 36.1318 220.01 cv
36.1318 220.163 li
33.063 220.163 li
33.063 220 li
33.501 219.978 33.7871 219.917 33.9209 219.82 cv
34.0552 219.722 34.1221 219.509 34.1221 219.183 cv
34.1221 214.142 li
34.1221 213.968 34.1001 213.835 34.0566 213.745 cv
34.0132 213.654 33.9194 213.608 33.7744 213.608 cv
33.6802 213.608 33.5581 213.635 33.4077 213.688 cv
33.2573 213.74 33.1172 213.795 32.9868 213.854 cv
32.9868 213.701 li
34.98 212.683 li
35.0454 212.683 li
35.0596 212.701 35.0679 212.715 35.0698 212.724 cv
cp
f
29.3945 212.391 mo
29.5933 211.807 29.6929 210.962 29.6929 209.856 cv
29.6929 208.975 29.6333 208.271 29.5137 207.746 cv
29.2891 206.767 28.8691 206.277 28.2539 206.277 cv
27.6382 206.277 27.2163 206.781 26.9883 207.79 cv
26.8687 208.326 26.8091 209.033 26.8091 209.911 cv
26.8091 210.734 26.8706 211.392 26.9937 211.885 cv
27.2251 212.806 27.6597 213.267 28.2974 213.267 cv
28.8296 213.267 29.1953 212.975 29.3945 212.391 cv
cp
30.2197 207.295 mo
30.5854 208.003 30.7686 208.816 30.7686 209.734 cv
30.7686 210.456 30.6563 211.137 30.4316 211.775 cv
30.0083 212.977 29.2749 213.577 28.2319 213.577 cv
27.5186 213.577 26.9321 213.252 26.4722 212.603 cv
25.9795 211.91 25.7334 210.968 25.7334 209.777 cv
25.7334 208.841 25.8984 208.036 26.2275 207.36 cv
26.6733 206.442 27.3574 205.983 28.2808 205.983 cv
29.1138 205.983 29.7603 206.421 30.2197 207.295 cv
cp
f
120.967 212.724 mo
120.969 212.733 120.97 212.754 120.97 212.787 cv
120.97 219.341 li
120.97 219.62 121.044 219.798 121.193 219.874 cv
121.342 219.95 121.621 219.996 122.029 220.01 cv
122.029 220.163 li
118.96 220.163 li
118.96 220 li
119.398 219.978 119.684 219.917 119.818 219.82 cv
119.952 219.722 120.019 219.509 120.019 219.183 cv
120.019 214.142 li
120.019 213.968 119.997 213.835 119.954 213.745 cv
119.91 213.654 119.816 213.608 119.671 213.608 cv
119.577 213.608 119.455 213.635 119.305 213.688 cv
119.154 213.74 119.014 213.795 118.884 213.854 cv
118.884 213.701 li
120.877 212.683 li
120.942 212.683 li
120.957 212.701 120.965 212.715 120.967 212.724 cv
cp
f
126.972 219.08 mo
127.17 218.496 127.27 217.651 127.27 216.545 cv
127.27 215.664 127.21 214.96 127.091 214.435 cv
126.866 213.456 126.446 212.966 125.831 212.966 cv
125.215 212.966 124.793 213.47 124.565 214.479 cv
124.446 215.015 124.386 215.722 124.386 216.6 cv
124.386 217.423 124.448 218.081 124.571 218.574 cv
124.802 219.495 125.237 219.956 125.875 219.956 cv
126.407 219.956 126.772 219.664 126.972 219.08 cv
cp
127.797 213.984 mo
128.163 214.692 128.346 215.505 128.346 216.423 cv
128.346 217.145 128.233 217.826 128.009 218.464 cv
127.585 219.666 126.852 220.266 125.809 220.266 cv
125.096 220.266 124.509 219.941 124.049 219.292 cv
123.557 218.599 123.311 217.657 123.311 216.466 cv
123.311 215.53 123.476 214.725 123.805 214.049 cv
124.25 213.131 124.935 212.672 125.858 212.672 cv
126.691 212.672 127.337 213.11 127.797 213.984 cv
cp
f
206.162 212.724 mo
206.164 212.733 206.166 212.754 206.166 212.787 cv
206.166 219.341 li
206.166 219.62 206.24 219.798 206.388 219.874 cv
206.539 219.95 206.816 219.996 207.224 220.01 cv
207.224 220.163 li
204.156 220.163 li
204.156 220 li
204.593 219.978 204.88 219.917 205.013 219.82 cv
205.148 219.722 205.214 219.509 205.214 219.183 cv
205.214 214.142 li
205.214 213.968 205.193 213.835 205.15 213.745 cv
205.107 213.654 205.011 213.608 204.867 213.608 cv
204.773 213.608 204.65 213.635 204.501 213.688 cv
204.351 213.74 204.21 213.795 204.08 213.854 cv
204.08 213.701 li
206.074 212.683 li
206.138 212.683 li
206.152 212.701 206.162 212.715 206.162 212.724 cv
cp
f
212.167 219.08 mo
212.367 218.496 212.466 217.651 212.466 216.545 cv
212.466 215.664 212.406 214.96 212.287 214.435 cv
212.062 213.456 211.642 212.966 211.027 212.966 cv
210.41 212.966 209.988 213.47 209.761 214.479 cv
209.642 215.015 209.582 215.722 209.582 216.6 cv
209.582 217.423 209.642 218.081 209.765 218.574 cv
209.998 219.495 210.433 219.956 211.07 219.956 cv
211.601 219.956 211.968 219.664 212.167 219.08 cv
cp
212.992 213.984 mo
213.359 214.692 213.541 215.505 213.541 216.423 cv
213.541 217.145 213.429 217.826 213.205 218.464 cv
212.781 219.666 212.046 220.266 211.005 220.266 cv
210.291 220.266 209.705 219.941 209.246 219.292 cv
208.751 218.599 208.505 217.657 208.505 216.466 cv
208.505 215.53 208.671 214.725 209 214.049 cv
209.445 213.131 210.13 212.672 211.054 212.672 cv
211.886 212.672 212.533 213.11 212.992 213.984 cv
cp
f
217.728 219.08 mo
217.927 218.496 218.027 217.651 218.027 216.545 cv
218.027 215.664 217.968 214.96 217.847 214.435 cv
217.623 213.456 217.203 212.966 216.587 212.966 cv
215.972 212.966 215.55 213.47 215.322 214.479 cv
215.203 215.015 215.142 215.722 215.142 216.6 cv
215.142 217.423 215.205 218.081 215.328 218.574 cv
215.56 219.495 215.994 219.956 216.63 219.956 cv
217.164 219.956 217.529 219.664 217.728 219.08 cv
cp
218.554 213.984 mo
218.919 214.692 219.103 215.505 219.103 216.423 cv
219.103 217.145 218.99 217.826 218.765 218.464 cv
218.341 219.666 217.609 220.266 216.566 220.266 cv
215.853 220.266 215.265 219.941 214.806 219.292 cv
214.314 218.599 214.068 217.657 214.068 216.466 cv
214.068 215.53 214.232 214.725 214.562 214.049 cv
215.007 213.131 215.691 212.672 216.615 212.672 cv
217.447 212.672 218.093 213.11 218.554 213.984 cv
cp
f
290.746 212.724 mo
290.748 212.733 290.75 212.754 290.75 212.787 cv
290.75 219.341 li
290.75 219.62 290.824 219.798 290.972 219.874 cv
291.123 219.95 291.4 219.996 291.808 220.01 cv
291.808 220.163 li
288.74 220.163 li
288.74 220 li
289.177 219.978 289.464 219.917 289.597 219.82 cv
289.732 219.722 289.798 219.509 289.798 219.183 cv
289.798 214.142 li
289.798 213.968 289.777 213.835 289.734 213.745 cv
289.691 213.654 289.595 213.608 289.451 213.608 cv
289.357 213.608 289.234 213.635 289.085 213.688 cv
288.935 213.74 288.794 213.795 288.664 213.854 cv
288.664 213.701 li
290.658 212.683 li
290.722 212.683 li
290.736 212.701 290.746 212.715 290.746 212.724 cv
cp
f
296.751 219.08 mo
296.951 218.496 297.05 217.651 297.05 216.545 cv
297.05 215.664 296.992 214.96 296.871 214.435 cv
296.646 213.456 296.226 212.966 295.611 212.966 cv
294.996 212.966 294.574 213.47 294.345 214.479 cv
294.226 215.015 294.166 215.722 294.166 216.6 cv
294.166 217.423 294.228 218.081 294.351 218.574 cv
294.583 219.495 295.017 219.956 295.654 219.956 cv
296.187 219.956 296.552 219.664 296.751 219.08 cv
cp
297.578 213.984 mo
297.943 214.692 298.126 215.505 298.126 216.423 cv
298.126 217.145 298.013 217.826 297.789 218.464 cv
297.365 219.666 296.632 220.266 295.589 220.266 cv
294.876 220.266 294.289 219.941 293.83 219.292 cv
293.337 218.599 293.091 217.657 293.091 216.466 cv
293.091 215.53 293.255 214.725 293.585 214.049 cv
294.031 213.131 294.714 212.672 295.638 212.672 cv
296.47 212.672 297.117 213.11 297.578 213.984 cv
cp
f
302.314 219.08 mo
302.513 218.496 302.613 217.651 302.613 216.545 cv
302.613 215.664 302.552 214.96 302.433 214.435 cv
302.208 213.456 301.789 212.966 301.173 212.966 cv
300.556 212.966 300.134 213.47 299.908 214.479 cv
299.789 215.015 299.728 215.722 299.728 216.6 cv
299.728 217.423 299.789 218.081 299.912 218.574 cv
300.144 219.495 300.58 219.956 301.216 219.956 cv
301.748 219.956 302.115 219.664 302.314 219.08 cv
cp
303.138 213.984 mo
303.505 214.692 303.687 215.505 303.687 216.423 cv
303.687 217.145 303.576 217.826 303.351 218.464 cv
302.927 219.666 302.193 220.266 301.152 220.266 cv
300.437 220.266 299.851 219.941 299.392 219.292 cv
298.898 218.599 298.652 217.657 298.652 216.466 cv
298.652 215.53 298.818 214.725 299.146 214.049 cv
299.591 213.131 300.277 212.672 301.201 212.672 cv
302.033 212.672 302.679 213.11 303.138 213.984 cv
cp
f
307.875 219.08 mo
308.074 218.496 308.173 217.651 308.173 216.545 cv
308.173 215.664 308.115 214.96 307.994 214.435 cv
307.769 213.456 307.349 212.966 306.734 212.966 cv
306.119 212.966 305.697 213.47 305.468 214.479 cv
305.349 215.015 305.289 215.722 305.289 216.6 cv
305.289 217.423 305.351 218.081 305.474 218.574 cv
305.707 219.495 306.14 219.956 306.777 219.956 cv
307.31 219.956 307.675 219.664 307.875 219.08 cv
cp
308.701 213.984 mo
309.066 214.692 309.25 215.505 309.25 216.423 cv
309.25 217.145 309.136 217.826 308.912 218.464 cv
308.488 219.666 307.755 220.266 306.712 220.266 cv
306 220.266 305.412 219.941 304.953 219.292 cv
304.46 218.599 304.214 217.657 304.214 216.466 cv
304.214 215.53 304.378 214.725 304.708 214.049 cv
305.154 213.131 305.837 212.672 306.761 212.672 cv
307.593 212.672 308.24 213.11 308.701 213.984 cv
cp
f
.170898 118.487 mo
.180176 118.485 .201172 118.484 .233398 118.484 cv
6.77295 118.484 li
7.05176 118.484 7.22949 118.41 7.30518 118.26 cv
7.38135 118.111 7.42676 117.832 7.44141 117.423 cv
7.59326 117.423 li
7.59326 120.499 li
7.43018 120.499 li
7.40869 120.06 7.34863 119.773 7.25098 119.639 cv
7.15332 119.504 6.94141 119.437 6.61572 119.437 cv
1.58594 119.437 li
1.41211 119.437 1.28027 119.459 1.18945 119.502 cv
1.09912 119.546 1.05371 119.641 1.05371 119.786 cv
1.05371 119.88 1.08008 120.002 1.13232 120.153 cv
1.18506 120.304 1.24023 120.444 1.29834 120.575 cv
1.146 120.575 li
.130371 118.577 li
.130371 118.512 li
.148438 118.497 .162109 118.489 .170898 118.487 cv
cp
f
.334081 lw
8.70508 122.614 mo
8.70508 114.81 li
@
18.5376 122.764 mo
18.5156 122.502 18.4688 122.323 18.3965 122.225 cv
18.2876 122.072 18.0615 121.947 17.7173 121.849 cv
12.7964 120.483 li
12.6333 120.44 12.4985 120.406 12.3916 120.383 cv
12.2852 120.359 12.1934 120.347 12.1177 120.347 cv
11.9438 120.347 11.8223 120.414 11.7534 120.546 cv
11.6851 120.679 11.647 120.902 11.6396 121.218 cv
11.4604 121.218 li
11.4604 115.67 li
13.1548 116.019 li
13.1387 116.248 li
13.0298 116.237 12.9258 116.229 12.8262 116.226 cv
12.7266 116.222 12.6899 116.22 12.7148 116.22 cv
12.3491 116.213 12.1094 116.343 11.9951 116.61 cv
11.8813 116.876 11.8242 117.426 11.8242 118.257 cv
11.8242 118.638 11.8423 118.878 11.8774 118.976 cv
11.9131 119.074 11.9912 119.141 12.1118 119.177 cv
14.7031 119.902 li
14.6704 118.922 14.6089 118.333 14.5181 118.134 cv
14.4277 117.935 14.1289 117.724 13.6221 117.5 cv
13.6709 117.293 li
16.2456 118.055 li
16.1968 118.272 li
15.9795 118.236 15.8472 118.215 15.8003 118.208 cv
15.7529 118.2 15.7007 118.196 15.6426 118.196 cv
15.4072 118.196 15.2544 118.281 15.1836 118.449 cv
15.1128 118.617 15.0776 118.925 15.0776 119.373 cv
15.0776 120.006 li
17.5596 120.701 li
17.6357 120.723 17.7065 120.74 17.7715 120.752 cv
17.8369 120.765 17.9038 120.771 17.9727 120.771 cv
18.0884 120.771 18.1753 120.741 18.2334 120.679 cv
18.335 120.566 18.3853 120.345 18.3853 120.015 cv
18.3853 119.017 18.2788 118.303 18.0649 117.873 cv
17.8516 117.442 17.4385 117.013 16.8267 116.585 cv
16.9189 116.405 li
18.7168 117.102 li
18.7168 122.764 li
18.5376 122.764 li
cp
f
8.85352 132.032 mo
8.85352 126.403 li
9.61426 126.403 li
9.61426 132.032 li
8.85352 132.032 li
cp
f
8.70508 109.793 mo
8.70508 95.2998 li
@
6.90674 108.135 mo
7.07129 108.033 7.15332 107.861 7.15332 107.618 cv
7.15332 107.098 6.7373 106.599 5.90576 106.119 cv
5.12451 105.658 4.38525 105.427 3.68701 105.427 cv
3.46631 105.427 3.28369 105.463 3.13916 105.537 cv
2.99463 105.609 2.92236 105.757 2.92236 105.98 cv
2.92236 106.536 3.36719 107.073 4.25684 107.592 cv
5.05225 108.056 5.74316 108.288 6.32861 108.288 cv
6.54932 108.288 6.74219 108.237 6.90674 108.135 cv
cp
2.87305 105.423 mo
2.95264 105.354 3.08838 105.299 3.28027 105.259 cv
1.05371 104.62 li
.992188 104.602 .937012 104.59 .888184 104.584 cv
.839355 104.579 .796875 104.576 .760254 104.576 cv
.619141 104.576 .530762 104.603 .494141 104.655 cv
.458008 104.708 .439941 104.783 .439941 104.881 cv
.439941 104.942 .441895 105 .445313 105.052 cv
.449219 105.105 .45459 105.175 .461914 105.262 cv
.282715 105.262 li
.228027 104.85 .134277 104.279 0 103.55 cv
.0541992 103.5 li
.114258 103.512 li
4.01807 104.586 li
6.6001 105.317 li
6.65869 105.332 6.7124 105.344 6.76172 105.353 cv
6.81104 105.362 6.85596 105.366 6.896 105.366 cv
6.99463 105.366 7.05859 105.342 7.08789 105.293 cv
7.11719 105.244 7.13135 105.202 7.13135 105.165 cv
7.13135 105.059 7.03857 104.908 6.85303 104.713 cv
6.74023 104.6 6.56543 104.443 6.32861 104.246 cv
6.44824 104.12 li
6.5625 104.197 li
6.7627 104.332 6.96582 104.505 7.17285 104.717 cv
7.54004 105.094 7.72363 105.432 7.72363 105.731 cv
7.72363 105.83 7.70166 105.919 7.6582 106 cv
7.57178 106.149 7.41602 106.224 7.19141 106.224 cv
7.11523 106.224 6.99414 106.213 6.82764 106.191 cv
6.66113 106.169 6.47852 106.136 6.27979 106.091 cv
6.69971 106.368 7.04346 106.67 7.31104 106.999 cv
7.5791 107.327 7.71289 107.686 7.71289 108.074 cv
7.71289 108.391 7.60059 108.667 7.37646 108.902 cv
7.15234 109.139 6.80664 109.257 6.33984 109.257 cv
5.55176 109.257 4.74121 108.892 3.90918 108.162 cv
3.08105 107.435 2.66699 106.727 2.66699 106.037 cv
2.66699 105.749 2.73584 105.544 2.87305 105.423 cv
cp
f
7.41406 103.873 mo
7.39209 103.612 7.34521 103.432 7.27295 103.334 cv
7.16406 103.182 6.93799 103.057 6.59375 102.958 cv
1.67285 101.593 li
1.50977 101.549 1.375 101.516 1.26807 101.492 cv
1.16162 101.468 1.06982 101.457 .994141 101.457 cv
.820313 101.457 .69873 101.523 .629883 101.655 cv
.561523 101.788 .523438 102.012 .516113 102.328 cv
.336914 102.328 li
.336914 96.7798 li
2.03125 97.1284 li
2.01514 97.3569 li
1.90625 97.3462 1.80225 97.3389 1.70264 97.3354 cv
1.60303 97.3315 1.56641 97.3296 1.59131 97.3296 cv
1.22559 97.3228 .98584 97.4521 .871582 97.7192 cv
.757813 97.9858 .700684 98.5352 .700684 99.3662 cv
.700684 99.7476 .71875 99.9873 .753906 100.085 cv
.789551 100.183 .867676 100.25 .988281 100.287 cv
3.57959 101.011 li
3.54688 100.032 3.48535 99.4424 3.39453 99.2437 cv
3.3042 99.0444 3.00537 98.833 2.49854 98.6089 cv
2.54736 98.4023 li
5.12207 99.1641 li
5.07324 99.3818 li
4.85596 99.3457 4.72363 99.3242 4.67676 99.3169 cv
4.62939 99.3096 4.57715 99.3057 4.51904 99.3057 cv
4.28369 99.3057 4.13086 99.3901 4.06006 99.5581 cv
3.98926 99.7261 3.9541 100.034 3.9541 100.482 cv
3.9541 101.116 li
6.43604 101.81 li
6.51221 101.832 6.58301 101.849 6.64795 101.862 cv
6.71338 101.875 6.78027 101.881 6.84912 101.881 cv
6.96484 101.881 7.05176 101.85 7.10986 101.788 cv
7.21143 101.676 7.26172 101.455 7.26172 101.124 cv
7.26172 100.126 7.15527 99.4121 6.94141 98.9819 cv
6.72803 98.5518 6.31494 98.1226 5.70313 97.6943 cv
5.79541 97.5146 li
7.59326 98.2114 li
7.59326 103.873 li
7.41406 103.873 li
cp
f
18.0308 108.011 mo
18.1953 107.909 18.2773 107.737 18.2773 107.494 cv
18.2773 106.974 17.8613 106.475 17.0298 105.995 cv
16.2485 105.534 15.5093 105.303 14.811 105.303 cv
14.5903 105.303 14.4077 105.339 14.2632 105.413 cv
14.1187 105.485 14.0464 105.633 14.0464 105.856 cv
14.0464 106.412 14.4912 106.949 15.3809 107.468 cv
16.1763 107.932 16.8672 108.164 17.4526 108.164 cv
17.6733 108.164 17.8662 108.113 18.0308 108.011 cv
cp
13.9971 105.299 mo
14.0767 105.23 14.2124 105.175 14.4043 105.135 cv
12.1777 104.496 li
12.1162 104.478 12.061 104.466 12.0122 104.46 cv
11.9634 104.455 11.9209 104.452 11.8843 104.452 cv
11.7432 104.452 11.6548 104.479 11.6182 104.531 cv
11.582 104.583 11.564 104.659 11.564 104.757 cv
11.564 104.818 11.5659 104.876 11.5693 104.928 cv
11.5732 104.981 11.5786 105.051 11.5859 105.138 cv
11.4067 105.138 li
11.3521 104.726 11.2583 104.155 11.124 103.426 cv
11.1782 103.376 li
11.2383 103.388 li
15.1421 104.462 li
17.7241 105.193 li
17.7827 105.208 17.8364 105.22 17.8857 105.229 cv
17.9351 105.238 17.98 105.242 18.02 105.242 cv
18.1187 105.242 18.1826 105.218 18.2119 105.169 cv
18.2412 105.12 18.2554 105.078 18.2554 105.041 cv
18.2554 104.935 18.1626 104.784 17.9771 104.589 cv
17.8643 104.476 17.6895 104.319 17.4526 104.122 cv
17.5723 103.996 li
17.6865 104.073 li
17.8867 104.208 18.0898 104.381 18.2969 104.593 cv
18.6641 104.97 18.8477 105.308 18.8477 105.607 cv
18.8477 105.706 18.8257 105.795 18.7822 105.875 cv
18.6958 106.025 18.54 106.1 18.3154 106.1 cv
18.2393 106.1 18.1182 106.089 17.9517 106.067 cv
17.7852 106.045 17.6025 106.012 17.4038 105.967 cv
17.8237 106.244 18.1675 106.546 18.4351 106.875 cv
18.7031 107.203 18.8369 107.562 18.8369 107.95 cv
18.8369 108.267 18.7246 108.542 18.5005 108.778 cv
18.2764 109.015 17.9307 109.133 17.4639 109.133 cv
16.6758 109.133 15.8652 108.768 15.0332 108.038 cv
14.2051 107.311 13.791 106.603 13.791 105.913 cv
13.791 105.625 13.8599 105.42 13.9971 105.299 cv
cp
f
18.0464 103.901 mo
17.9868 103.814 17.957 103.725 17.957 103.635 cv
17.957 103.591 17.9634 103.547 17.9761 103.504 cv
17.9888 103.46 18.0093 103.413 18.0386 103.362 cv
18.1416 103.172 li
18.1563 103.146 18.166 103.122 18.1714 103.099 cv
18.1768 103.075 18.1797 103.048 18.1797 103.02 cv
18.1797 102.929 18.1572 102.859 18.1118 102.81 cv
18.0664 102.761 17.9082 102.635 17.6362 102.432 cv
17.459 102.297 17.0264 101.993 16.3384 101.517 cv
16.313 101.517 16.1182 101.559 15.7544 101.642 cv
15.3906 101.726 15.082 101.802 14.8281 101.871 cv
14.5713 101.94 14.4019 102.001 14.3203 102.056 cv
14.2393 102.11 14.1982 102.212 14.1982 102.361 cv
14.1982 102.412 14.2163 102.511 14.2524 102.66 cv
14.2744 102.754 14.2998 102.856 14.3286 102.965 cv
14.1602 103.014 li
13.9541 102.41 li
13.8994 102.254 13.856 102.109 13.8237 101.977 cv
13.791 101.845 13.7744 101.731 13.7744 101.637 cv
13.7744 101.484 13.8198 101.37 13.9106 101.294 cv
14.0552 101.178 14.3413 101.08 14.7686 101 cv
15.3877 100.886 li
14.8882 100.559 14.5371 100.305 14.334 100.124 cv
14.1494 99.96 14.0117 99.8062 13.9214 99.6606 cv
13.8306 99.5156 13.7856 99.3779 13.7856 99.2471 cv
13.7856 99.1235 13.8037 99.0239 13.8398 98.9478 cv
13.9048 98.8096 14.0283 98.7407 14.209 98.7407 cv
14.3325 98.7407 14.4282 98.7754 14.4971 98.8442 cv
14.5659 98.9131 14.6001 99.002 14.6001 99.1108 cv
14.6001 99.1509 14.5957 99.189 14.5864 99.2251 cv
14.5776 99.2617 14.564 99.2998 14.5459 99.3398 cv
14.4863 99.481 li
14.4683 99.521 14.4526 99.5591 14.4399 99.5957 cv
14.4272 99.6318 14.4209 99.6592 14.4209 99.6772 cv
14.4209 99.8403 14.6318 100.067 15.0537 100.357 cv
15.4756 100.648 15.7192 100.793 15.7842 100.793 cv
15.8384 100.793 16.0151 100.759 16.314 100.692 cv
16.6128 100.625 16.9287 100.552 17.2617 100.472 cv
17.5767 100.399 17.7939 100.337 17.9136 100.287 cv
18.1089 100.203 18.2065 100.109 18.2065 100.004 cv
18.2065 99.9058 18.1523 99.8062 18.0439 99.7041 cv
17.9351 99.6025 17.7397 99.4502 17.457 99.2471 cv
17.5493 99.0947 li
17.832 99.251 18.0728 99.4121 18.272 99.5791 cv
18.6484 99.895 18.8369 100.196 18.8369 100.483 cv
18.8369 100.664 18.75 100.808 18.5762 100.913 cv
18.4746 100.975 18.3081 101.035 18.0762 101.092 cv
16.7349 101.43 li
18.1958 102.546 li
18.4492 102.764 18.6196 102.932 18.7065 103.049 cv
18.7935 103.167 18.8369 103.313 18.8369 103.488 cv
18.8369 103.72 18.7642 103.877 18.6196 103.961 cv
18.5435 104.008 18.4531 104.032 18.3481 104.032 cv
18.2065 104.032 18.1064 103.988 18.0464 103.901 cv
cp
f
5.93262 88.3252 mo
5.34961 87.8608 4.88086 87.313 4.52588 86.6812 cv
4.70508 86.5781 li
5.16846 87.1621 5.61914 87.5796 6.05762 87.8301 cv
6.82129 88.269 7.83887 88.4888 9.10986 88.4888 cv
10.0513 88.4888 10.8281 88.4053 11.4399 88.2383 cv
12.5117 87.9443 13.314 87.3906 13.8462 86.5781 cv
14.0254 86.7192 li
13.812 87.166 13.3936 87.6484 12.771 88.1675 cv
11.7388 89.0273 10.5654 89.4575 9.25098 89.4575 cv
7.99121 89.4575 6.88477 89.0801 5.93262 88.3252 cv
cp
f
11.8633 82.1445 mo
11.8525 81.854 11.8291 81.6582 11.7925 81.5566 cv
11.731 81.3823 11.6118 81.2954 11.4341 81.2954 cv
11.3691 81.2954 11.2876 81.3062 11.1899 81.3276 cv
11.0918 81.3496 10.9907 81.3823 10.8857 81.4258 cv
9.05176 82.1689 li
10.9502 83.8379 li
11.0264 83.9067 11.1089 83.9658 11.1978 84.0146 cv
11.2866 84.0635 11.3779 84.0884 11.4722 84.0884 cv
11.6387 84.0884 11.749 84.0117 11.8037 83.8594 cv
11.8398 83.7651 11.8599 83.5981 11.8633 83.3589 cv
12.0425 83.3589 li
12.0425 85.7588 li
11.8633 85.7588 li
11.8306 85.4941 11.6372 85.1694 11.2822 84.7847 cv
11.0684 84.5522 10.7051 84.2139 10.1919 83.77 cv
8.5874 82.3804 li
5.6333 83.5542 li
5.36914 83.6597 5.20166 83.7749 5.13086 83.8999 cv
5.06006 84.0249 5.00537 84.249 4.96533 84.5723 cv
4.78613 84.5723 li
4.78613 81.6313 li
4.96533 81.6313 li
5.00537 81.936 5.05322 82.1465 5.10889 82.2627 cv
5.16504 82.3789 5.27832 82.437 5.44824 82.437 cv
5.49561 82.437 5.53955 82.4316 5.58154 82.4204 cv
5.62305 82.4097 5.67822 82.3916 5.74707 82.3662 cv
7.69189 81.605 li
5.8125 79.978 li
5.75098 79.9233 5.67578 79.8735 5.58691 79.8281 cv
5.49854 79.7827 5.42139 79.7603 5.35645 79.7603 cv
5.21533 79.7603 5.12354 79.8071 5.08203 79.9019 cv
5.04053 79.9961 5.00146 80.1772 4.96533 80.4458 cv
4.78613 80.4458 li
4.78613 78.1216 li
4.96533 78.1216 li
5.05957 78.3975 5.17529 78.6235 5.31299 78.7993 cv
5.45068 78.9756 5.75098 79.272 6.21484 79.689 cv
6.2583 79.729 6.55078 79.9854 7.09326 80.458 cv
7.63525 80.9312 7.99658 81.2451 8.17725 81.3999 cv
11.043 80.2607 li
11.3652 80.1304 11.5801 79.9824 11.6865 79.8174 cv
11.7935 79.6523 11.8525 79.4136 11.8633 79.1016 cv
12.0425 79.1016 li
12.0425 82.1445 li
11.8633 82.1445 li
cp
f
14.5156 74.2251 mo
14.0498 74.0654 13.3755 73.9858 12.4927 73.9858 cv
11.7891 73.9858 11.2275 74.0337 10.8081 74.1294 cv
10.0264 74.3096 9.63574 74.646 9.63574 75.1396 cv
9.63574 75.6333 10.0381 75.9717 10.8428 76.1543 cv
11.271 76.25 11.8354 76.2983 12.5361 76.2983 cv
13.1929 76.2983 13.7183 76.249 14.1118 76.1499 cv
14.8472 75.9644 15.2148 75.6157 15.2148 75.105 cv
15.2148 74.6782 14.9819 74.3848 14.5156 74.2251 cv
cp
10.4482 73.5635 mo
11.0132 73.27 11.6621 73.1235 12.3945 73.1235 cv
12.9712 73.1235 13.5142 73.2134 14.0244 73.3936 cv
14.9829 73.7329 15.4624 74.3208 15.4624 75.1572 cv
15.4624 75.729 15.2031 76.1992 14.6846 76.5684 cv
14.1313 76.9629 13.3799 77.1602 12.4297 77.1602 cv
11.6821 77.1602 11.0391 77.0283 10.5005 76.7642 cv
9.76758 76.4072 9.40088 75.8584 9.40088 75.1182 cv
9.40088 74.4502 9.75 73.9321 10.4482 73.5635 cv
cp
f
6.15527 73.7974 mo
6.15527 69.2944 li
6.76367 69.2944 li
6.76367 73.7974 li
6.15527 73.7974 li
cp
f
2.76855 66.5078 mo
2.77539 66.5063 2.79248 66.5059 2.81836 66.5059 cv
8.0498 66.5059 li
8.27295 66.5059 8.41504 66.4458 8.47559 66.3262 cv
8.53662 66.2065 8.57275 65.9834 8.58447 65.6567 cv
8.70605 65.6567 li
8.70605 68.1172 li
8.57568 68.1172 li
8.55811 67.7656 8.51074 67.5361 8.43213 67.4287 cv
8.354 67.3218 8.18457 67.2676 7.92383 67.2676 cv
3.90039 67.2676 li
3.76123 67.2676 3.65576 67.2852 3.58301 67.3198 cv
3.51074 67.355 3.47461 67.4307 3.47461 67.5464 cv
3.47461 67.6221 3.49561 67.7202 3.5376 67.8403 cv
3.57959 67.9609 3.62354 68.0732 3.66992 68.1777 cv
3.54834 68.1777 li
2.73584 66.5796 li
2.73584 66.5273 li
2.75049 66.5161 2.76123 66.5093 2.76855 66.5078 cv
cp
f
10.8374 61.2471 mo
11.3188 61.3887 11.7734 61.5957 12.2007 61.8677 cv
12.6567 62.1543 13.082 62.5371 13.4771 63.0166 cv
13.7378 63.332 13.9204 63.5972 14.0254 63.811 cv
13.8462 63.9146 li
13.4224 63.356 12.9897 62.9473 12.5483 62.6899 cv
11.7661 62.2324 10.7324 62.0039 9.44678 62.0039 cv
8.40771 62.0039 7.55859 62.1094 6.89941 62.3198 cv
5.96875 62.6138 5.2373 63.145 4.70508 63.9146 cv
4.52588 63.7729 li
4.84424 63.1997 5.32617 62.666 5.9707 62.1724 cv
6.96289 61.4141 8.07422 61.0347 9.30566 61.0347 cv
9.84521 61.0347 10.3555 61.1055 10.8374 61.2471 cv
cp
f
85.2998 191.968 mo
92.8618 192.308 li
83.915 196.716 li
86.0898 193.705 li
85.2998 191.968 li
1 1 0 0 cmyk
f
1 lw
80.6328 195.304 mo
89.502 193.149 li
@
45.5776 187.695 mo
45.2661 187.559 44.8721 187.492 44.396 187.492 cv
44.1704 187.492 44.0317 187.513 43.98 187.558 cv
43.9277 187.603 43.9019 187.703 43.9019 187.857 cv
43.9019 190.724 li
44.0986 190.743 44.2275 190.753 44.2886 190.757 cv
44.3496 190.76 44.4087 190.762 44.4658 190.762 cv
44.9707 190.762 45.3682 190.691 45.6582 190.547 cv
46.1846 190.286 46.4478 189.797 46.4478 189.082 cv
46.4478 188.408 46.1577 187.946 45.5776 187.695 cv
cp
41.8662 194.157 mo
42.2852 194.118 42.5464 194.035 42.6504 193.908 cv
42.7544 193.782 42.8062 193.492 42.8062 193.04 cv
42.8062 188.275 li
42.8062 187.892 42.748 187.64 42.6313 187.518 cv
42.5151 187.396 42.2603 187.32 41.8662 187.287 cv
41.8662 187.083 li
44.7666 187.083 li
45.6978 187.083 46.4102 187.264 46.9043 187.625 cv
47.3984 187.987 47.6455 188.463 47.6455 189.054 cv
47.6455 189.802 47.3716 190.345 46.8237 190.681 cv
46.2759 191.018 45.5903 191.187 44.7666 191.187 cv
44.6484 191.187 44.4971 191.184 44.313 191.178 cv
44.1284 191.173 43.9912 191.17 43.9019 191.17 cv
43.9019 193.168 li
43.9019 193.582 43.9653 193.841 44.0923 193.949 cv
44.2197 194.055 44.5034 194.125 44.9438 194.157 cv
44.9438 194.361 li
41.8662 194.361 li
41.8662 194.157 li
cp
f
49.623 189.924 mo
49.2642 190.25 49.085 190.812 49.085 191.611 cv
49.085 192.249 49.2295 192.842 49.5181 193.394 cv
49.8066 193.946 50.208 194.221 50.7207 194.221 cv
51.1226 194.221 51.4321 194.037 51.6489 193.667 cv
51.8662 193.299 51.9746 192.816 51.9746 192.218 cv
51.9746 191.598 51.8364 191.015 51.5601 190.466 cv
51.2842 189.919 50.8838 189.645 50.3604 189.645 cv
50.0767 189.645 49.8311 189.738 49.623 189.924 cv
cp
48.7656 190.061 mo
49.2183 189.569 49.8013 189.323 50.5137 189.323 cv
51.2227 189.323 51.8101 189.555 52.2754 190.021 cv
52.7407 190.487 52.9736 191.106 52.9736 191.879 cv
52.9736 192.592 52.748 193.211 52.2969 193.738 cv
51.8457 194.264 51.2622 194.527 50.5459 194.527 cv
49.8584 194.527 49.2764 194.275 48.8003 193.77 cv
48.3242 193.265 48.0859 192.631 48.0859 191.869 cv
48.0859 191.156 48.3125 190.553 48.7656 190.061 cv
cp
f
53.8813 192.669 mo
54.0586 192.669 li
54.1406 193.078 54.2515 193.39 54.3906 193.609 cv
54.6406 194.01 55.0068 194.21 55.4893 194.21 cv
55.7573 194.21 55.9688 194.136 56.1245 193.988 cv
56.2798 193.839 56.3574 193.646 56.3574 193.41 cv
56.3574 193.259 56.3125 193.115 56.2231 192.975 cv
56.1338 192.835 55.9761 192.7 55.7505 192.567 cv
55.1494 192.223 li
54.709 191.987 54.3848 191.749 54.1768 191.509 cv
53.9692 191.269 53.8652 190.986 53.8652 190.66 cv
53.8652 190.259 54.0083 189.929 54.2949 189.671 cv
54.5815 189.414 54.9414 189.285 55.3745 189.285 cv
55.5645 189.285 55.7729 189.321 56 189.392 cv
56.2275 189.464 56.3555 189.5 56.3843 189.5 cv
56.4487 189.5 56.4951 189.491 56.5239 189.473 cv
56.5527 189.456 56.5776 189.426 56.5991 189.387 cv
56.728 189.387 li
56.7656 190.886 li
56.5991 190.886 li
56.5273 190.539 56.4307 190.268 56.3091 190.075 cv
56.0869 189.716 55.7666 189.538 55.3477 189.538 cv
55.0972 189.538 54.8999 189.615 54.7568 189.769 cv
54.6138 189.922 54.542 190.103 54.542 190.311 cv
54.542 190.64 54.7891 190.934 55.2832 191.192 cv
55.9922 191.574 li
56.7549 191.989 57.1362 192.472 57.1362 193.023 cv
57.1362 193.446 56.978 193.792 56.6616 194.06 cv
56.3452 194.329 55.9316 194.462 55.4204 194.462 cv
55.2061 194.462 54.9629 194.427 54.6914 194.355 cv
54.4194 194.284 54.2588 194.248 54.2085 194.248 cv
54.1655 194.248 54.1279 194.263 54.0962 194.293 cv
54.064 194.324 54.0386 194.361 54.021 194.404 cv
53.8813 194.404 li
53.8813 192.669 li
cp
f
58.6563 187.029 mo
58.7637 186.918 58.896 186.863 59.0537 186.863 cv
59.2075 186.863 59.3394 186.917 59.4487 187.026 cv
59.5576 187.134 59.6123 187.267 59.6123 187.424 cv
59.6123 187.578 59.5576 187.708 59.4487 187.817 cv
59.3394 187.925 59.2075 187.98 59.0537 187.98 cv
58.896 187.98 58.7637 187.925 58.6563 187.817 cv
58.5488 187.708 58.4951 187.578 58.4951 187.424 cv
58.4951 187.271 58.5488 187.139 58.6563 187.029 cv
cp
57.8022 194.21 mo
58.1855 194.174 58.4272 194.109 58.5273 194.014 cv
58.6274 193.919 58.6777 193.663 58.6777 193.244 cv
58.6777 190.681 li
58.6777 190.449 58.6616 190.288 58.6294 190.199 cv
58.5757 190.051 58.4629 189.978 58.291 189.978 cv
58.2515 189.978 58.2134 189.982 58.1753 189.989 cv
58.1382 189.996 58.0298 190.025 57.8506 190.075 cv
57.8506 189.908 li
58.0815 189.833 li
58.708 189.628 59.145 189.475 59.3921 189.371 cv
59.4922 189.328 59.5566 189.306 59.5854 189.306 cv
59.5928 189.332 59.5962 189.359 59.5962 189.387 cv
59.5962 193.244 li
59.5962 193.652 59.6455 193.908 59.7437 194.011 cv
59.8423 194.116 60.0654 194.182 60.4126 194.21 cv
60.4126 194.361 li
57.8022 194.361 li
57.8022 194.21 li
cp
f
63.4419 189.409 mo
63.4419 189.795 li
62.3462 189.795 li
62.3354 192.889 li
62.3354 193.162 62.3589 193.367 62.4053 193.507 cv
62.4912 193.753 62.6597 193.877 62.9102 193.877 cv
63.0391 193.877 63.1509 193.847 63.2461 193.787 cv
63.3408 193.725 63.4492 193.628 63.5708 193.496 cv
63.7104 193.615 li
63.5923 193.775 li
63.4063 194.026 63.209 194.204 63.0015 194.307 cv
62.7939 194.411 62.5933 194.462 62.3999 194.462 cv
61.9775 194.462 61.6909 194.275 61.5405 193.899 cv
61.458 193.695 61.417 193.412 61.417 193.05 cv
61.417 189.795 li
60.8315 189.795 li
60.8135 189.785 60.8003 189.774 60.791 189.763 cv
60.7822 189.752 60.7778 189.738 60.7778 189.72 cv
60.7778 189.684 60.7861 189.657 60.8018 189.637 cv
60.8184 189.618 60.8691 189.572 60.9551 189.5 cv
61.2021 189.296 61.3804 189.13 61.4893 189.003 cv
61.5986 188.876 61.8555 188.541 62.2603 187.996 cv
62.3066 187.996 62.3345 188 62.3438 188.007 cv
62.3525 188.014 62.3569 188.041 62.3569 188.087 cv
62.3569 189.409 li
63.4419 189.409 li
cp
f
63.748 194.183 mo
64.0776 194.155 64.2959 194.097 64.4033 194.009 cv
64.5107 193.921 64.5645 193.734 64.5645 193.448 cv
64.5645 191.025 li
64.5645 190.671 64.5313 190.417 64.4653 190.265 cv
64.3989 190.113 64.2778 190.037 64.1025 190.037 cv
64.0669 190.037 64.019 190.042 63.9604 190.05 cv
63.9009 190.059 63.8394 190.071 63.7749 190.085 cv
63.7749 189.908 li
63.9785 189.836 64.187 189.763 64.4014 189.688 cv
64.6157 189.613 64.7637 189.559 64.8457 189.527 cv
65.0239 189.458 65.208 189.382 65.397 189.296 cv
65.4224 189.296 65.437 189.305 65.4429 189.323 cv
65.4478 189.34 65.4507 189.378 65.4507 189.435 cv
65.4507 190.316 li
65.6807 189.998 65.9023 189.749 66.1157 189.57 cv
66.3296 189.391 66.5513 189.301 66.7813 189.301 cv
66.9644 189.301 67.1133 189.356 67.228 189.465 cv
67.3428 189.575 67.4004 189.711 67.4004 189.876 cv
67.4004 190.023 67.3564 190.146 67.269 190.247 cv
67.1812 190.347 67.0708 190.397 66.9385 190.397 cv
66.8022 190.397 66.6655 190.334 66.5278 190.208 cv
66.3896 190.083 66.2813 190.021 66.2026 190.021 cv
66.0771 190.021 65.9233 190.123 65.7407 190.325 cv
65.5581 190.527 65.4668 190.736 65.4668 190.951 cv
65.4668 193.373 li
65.4668 193.68 65.5386 193.894 65.6816 194.014 cv
65.8247 194.134 66.063 194.191 66.396 194.183 cv
66.396 194.361 li
63.748 194.361 li
63.748 194.183 li
cp
f
69.1792 189.924 mo
68.8203 190.25 68.6411 190.812 68.6411 191.611 cv
68.6411 192.249 68.7856 192.842 69.0742 193.394 cv
69.3628 193.946 69.7642 194.221 70.2769 194.221 cv
70.6787 194.221 70.9883 194.037 71.2051 193.667 cv
71.4224 193.299 71.5308 192.816 71.5308 192.218 cv
71.5308 191.598 71.3926 191.015 71.1162 190.466 cv
70.8403 189.919 70.4399 189.645 69.9165 189.645 cv
69.6328 189.645 69.3872 189.738 69.1792 189.924 cv
cp
68.3218 190.061 mo
68.7744 189.569 69.3574 189.323 70.0698 189.323 cv
70.7788 189.323 71.3662 189.555 71.8315 190.021 cv
72.2969 190.487 72.5298 191.106 72.5298 191.879 cv
72.5298 192.592 72.3042 193.211 71.853 193.738 cv
71.4019 194.264 70.8184 194.527 70.1021 194.527 cv
69.4146 194.527 68.8325 194.275 68.3564 193.77 cv
67.8804 193.265 67.6421 192.631 67.6421 191.869 cv
67.6421 191.156 67.8687 190.553 68.3218 190.061 cv
cp
f
73.0615 194.21 mo
73.3159 194.178 73.4937 194.115 73.5962 194.02 cv
73.6978 193.925 73.749 193.712 73.749 193.383 cv
73.749 190.655 li
73.749 190.427 73.7275 190.268 73.6846 190.175 cv
73.6167 190.041 73.4771 189.972 73.2656 189.972 cv
73.2334 189.972 73.2002 189.974 73.1665 189.978 cv
73.1323 189.982 73.0903 189.987 73.04 189.994 cv
73.04 189.806 li
73.187 189.763 73.5342 189.652 74.082 189.473 cv
74.5869 189.306 li
74.6118 189.306 74.6274 189.316 74.6323 189.333 cv
74.6382 189.351 74.6406 189.376 74.6406 189.409 cv
74.6406 190.199 li
74.9692 189.89 75.2266 189.679 75.4126 189.564 cv
75.6914 189.389 75.981 189.301 76.2813 189.301 cv
76.5244 189.301 76.7456 189.371 76.9458 189.511 cv
77.332 189.783 77.5249 190.268 77.5249 190.966 cv
77.5249 193.474 li
77.5249 193.732 77.5762 193.918 77.6792 194.033 cv
77.7822 194.148 77.9546 194.207 78.1963 194.21 cv
78.1963 194.361 li
75.9028 194.361 li
75.9028 194.21 li
76.1641 194.174 76.3467 194.102 76.4507 193.993 cv
76.5547 193.883 76.6064 193.646 76.6064 193.281 cv
76.6064 190.988 li
76.6064 190.68 76.5493 190.424 76.4355 190.222 cv
76.3213 190.02 76.1113 189.919 75.8052 189.919 cv
75.5952 189.919 75.3813 189.991 75.1646 190.134 cv
75.0435 190.216 74.8867 190.352 74.6943 190.542 cv
74.6943 193.55 li
74.6943 193.808 74.7515 193.98 74.8662 194.068 cv
74.981 194.156 75.1616 194.204 75.4087 194.21 cv
75.4087 194.361 li
73.0615 194.361 li
73.0615 194.21 li
cp
f
44.8418 201.385 mo
44.4302 201.521 44.0898 201.671 43.8213 201.836 cv
43.3057 202.155 43.0479 202.517 43.0479 202.921 cv
43.0479 203.248 43.1553 203.487 43.3701 203.641 cv
43.5098 203.742 43.6655 203.792 43.8374 203.792 cv
44.0737 203.792 44.3003 203.725 44.5171 203.593 cv
44.7334 203.46 44.8418 203.292 44.8418 203.087 cv
44.8418 201.385 li
cp
42.8706 201.992 mo
43.2002 201.777 43.8569 201.486 44.8418 201.117 cv
44.8418 200.66 li
44.8418 200.294 44.8062 200.041 44.7344 199.898 cv
44.6128 199.658 44.3604 199.538 43.9771 199.538 cv
43.7944 199.538 43.6206 199.584 43.4561 199.677 cv
43.2915 199.774 43.209 199.907 43.209 200.075 cv
43.209 200.118 43.2178 200.19 43.2358 200.292 cv
43.2539 200.394 43.2627 200.459 43.2627 200.488 cv
43.2627 200.689 43.1963 200.829 43.064 200.908 cv
42.9888 200.954 42.8994 200.977 42.7954 200.977 cv
42.6343 200.977 42.5107 200.924 42.4248 200.819 cv
42.3389 200.713 42.2959 200.595 42.2959 200.466 cv
42.2959 200.216 42.4507 199.954 42.7603 199.68 cv
43.0703 199.406 43.5239 199.269 44.1221 199.269 cv
44.8169 199.269 45.2876 199.495 45.5347 199.946 cv
45.667 200.193 45.7334 200.552 45.7334 201.025 cv
45.7334 203.179 li
45.7334 203.387 45.7476 203.53 45.7764 203.609 cv
45.8228 203.749 45.9194 203.818 46.0664 203.818 cv
46.1489 203.818 46.2168 203.806 46.2705 203.781 cv
46.3242 203.755 46.4175 203.695 46.5498 203.598 cv
46.5498 203.877 li
46.4351 204.017 46.3115 204.131 46.1792 204.221 cv
45.9785 204.357 45.7744 204.425 45.5669 204.425 cv
45.3232 204.425 45.147 204.346 45.0376 204.189 cv
44.9287 204.032 44.8687 203.843 44.8579 203.625 cv
44.5859 203.861 44.353 204.037 44.1597 204.152 cv
43.834 204.345 43.5239 204.441 43.2305 204.441 cv
42.9224 204.441 42.6558 204.333 42.4302 204.117 cv
42.2046 203.9 42.0918 203.625 42.0918 203.292 cv
42.0918 202.773 42.3516 202.339 42.8706 201.992 cv
cp
f
46.77 204.21 mo
47.0244 204.178 47.2021 204.115 47.3047 204.02 cv
47.4063 203.925 47.4575 203.712 47.4575 203.383 cv
47.4575 200.655 li
47.4575 200.427 47.436 200.268 47.3931 200.175 cv
47.3252 200.041 47.1855 199.972 46.9741 199.972 cv
46.9419 199.972 46.9087 199.974 46.875 199.978 cv
46.8408 199.982 46.7988 199.987 46.7485 199.994 cv
46.7485 199.806 li
46.8955 199.763 47.2427 199.652 47.7905 199.473 cv
48.2954 199.306 li
48.3203 199.306 48.3359 199.316 48.3408 199.333 cv
48.3467 199.351 48.3491 199.376 48.3491 199.409 cv
48.3491 200.199 li
48.6777 199.89 48.9351 199.679 49.1211 199.564 cv
49.3999 199.389 49.6895 199.301 49.9897 199.301 cv
50.2329 199.301 50.4541 199.371 50.6543 199.511 cv
51.0405 199.783 51.2334 200.268 51.2334 200.966 cv
51.2334 203.474 li
51.2334 203.732 51.2847 203.918 51.3877 204.033 cv
51.4907 204.148 51.6631 204.207 51.9048 204.21 cv
51.9048 204.361 li
49.6113 204.361 li
49.6113 204.21 li
49.8726 204.174 50.0552 204.102 50.1592 203.993 cv
50.2632 203.883 50.3149 203.646 50.3149 203.281 cv
50.3149 200.988 li
50.3149 200.68 50.2578 200.424 50.144 200.222 cv
50.0298 200.02 49.8198 199.919 49.5137 199.919 cv
49.3037 199.919 49.0898 199.991 48.873 200.134 cv
48.752 200.216 48.5952 200.352 48.4028 200.542 cv
48.4028 203.55 li
48.4028 203.808 48.46 203.98 48.5747 204.068 cv
48.6895 204.156 48.8701 204.204 49.1172 204.21 cv
49.1172 204.361 li
46.77 204.361 li
46.77 204.21 li
cp
f
52.27 204.21 mo
52.5244 204.178 52.7021 204.115 52.8047 204.02 cv
52.9063 203.925 52.9575 203.712 52.9575 203.383 cv
52.9575 200.655 li
52.9575 200.427 52.936 200.268 52.8931 200.175 cv
52.8252 200.041 52.6855 199.972 52.4741 199.972 cv
52.4419 199.972 52.4087 199.974 52.375 199.978 cv
52.3408 199.982 52.2988 199.987 52.2485 199.994 cv
52.2485 199.806 li
52.3955 199.763 52.7427 199.652 53.2905 199.473 cv
53.7954 199.306 li
53.8203 199.306 53.8359 199.316 53.8408 199.333 cv
53.8467 199.351 53.8491 199.376 53.8491 199.409 cv
53.8491 200.199 li
54.1777 199.89 54.4351 199.679 54.6211 199.564 cv
54.8999 199.389 55.1895 199.301 55.4897 199.301 cv
55.7329 199.301 55.9541 199.371 56.1543 199.511 cv
56.5405 199.783 56.7334 200.268 56.7334 200.966 cv
56.7334 203.474 li
56.7334 203.732 56.7847 203.918 56.8877 204.033 cv
56.9907 204.148 57.1631 204.207 57.4048 204.21 cv
57.4048 204.361 li
55.1113 204.361 li
55.1113 204.21 li
55.3726 204.174 55.5552 204.102 55.6592 203.993 cv
55.7632 203.883 55.8149 203.646 55.8149 203.281 cv
55.8149 200.988 li
55.8149 200.68 55.7578 200.424 55.644 200.222 cv
55.5298 200.02 55.3198 199.919 55.0137 199.919 cv
54.8037 199.919 54.5898 199.991 54.373 200.134 cv
54.252 200.216 54.0952 200.352 53.9028 200.542 cv
53.9028 203.55 li
53.9028 203.808 53.96 203.98 54.0747 204.068 cv
54.1895 204.156 54.3701 204.204 54.6172 204.21 cv
54.6172 204.361 li
52.27 204.361 li
52.27 204.21 li
cp
f
58.6401 197.029 mo
58.7476 196.918 58.8799 196.863 59.0376 196.863 cv
59.1914 196.863 59.3232 196.917 59.4326 197.026 cv
59.5415 197.134 59.5962 197.267 59.5962 197.424 cv
59.5962 197.578 59.5415 197.708 59.4326 197.817 cv
59.3232 197.925 59.1914 197.98 59.0376 197.98 cv
58.8799 197.98 58.7476 197.925 58.6401 197.817 cv
58.5327 197.708 58.479 197.578 58.479 197.424 cv
58.479 197.271 58.5327 197.139 58.6401 197.029 cv
cp
57.7861 204.21 mo
58.1694 204.174 58.4111 204.109 58.5112 204.014 cv
58.6113 203.919 58.6616 203.663 58.6616 203.244 cv
58.6616 200.681 li
58.6616 200.449 58.6455 200.288 58.6133 200.199 cv
58.5596 200.051 58.4468 199.978 58.2749 199.978 cv
58.2354 199.978 58.1973 199.982 58.1592 199.989 cv
58.1221 199.996 58.0137 200.025 57.8345 200.075 cv
57.8345 199.908 li
58.0654 199.833 li
58.6919 199.628 59.1289 199.475 59.376 199.371 cv
59.4761 199.328 59.5405 199.306 59.5693 199.306 cv
59.5767 199.332 59.5801 199.359 59.5801 199.387 cv
59.5801 203.244 li
59.5801 203.652 59.6294 203.908 59.7275 204.011 cv
59.8262 204.116 60.0493 204.182 60.3965 204.21 cv
60.3965 204.361 li
57.7861 204.361 li
57.7861 204.21 li
cp
f
60.7241 204.21 mo
61.0176 204.171 61.2104 204.098 61.3013 203.993 cv
61.3931 203.887 61.4385 203.637 61.4385 203.244 cv
61.4385 198.087 li
61.4385 197.887 61.4126 197.739 61.3608 197.644 cv
61.3086 197.549 61.1826 197.501 60.9819 197.501 cv
60.9424 197.501 60.9038 197.504 60.8667 197.51 cv
60.8286 197.515 60.7866 197.522 60.7402 197.529 cv
60.7402 197.335 li
60.8979 197.289 61.0923 197.233 61.3228 197.167 cv
61.5542 197.1 61.7144 197.052 61.8037 197.024 cv
62.3193 196.863 li
62.3301 196.9 li
62.3301 200.199 li
62.5557 199.941 62.7563 199.75 62.9316 199.628 cv
63.2466 199.414 63.5869 199.306 63.9521 199.306 cv
64.5322 199.306 64.9277 199.55 65.1392 200.037 cv
65.2539 200.294 65.311 200.633 65.311 201.052 cv
65.311 203.244 li
65.311 203.624 65.355 203.871 65.4429 203.985 cv
65.5303 204.099 65.7104 204.174 65.9824 204.21 cv
65.9824 204.361 li
63.6567 204.361 li
63.6567 204.21 li
63.9683 204.167 64.1689 204.094 64.2583 203.99 cv
64.3477 203.886 64.3926 203.637 64.3926 203.244 cv
64.3926 201.068 li
64.3926 200.721 64.3345 200.44 64.2183 200.225 cv
64.1016 200.01 63.8823 199.903 63.5601 199.903 cv
63.2808 199.903 63.0103 200.003 62.749 200.204 cv
62.4878 200.404 62.3569 200.535 62.3569 200.595 cv
62.3569 203.244 li
62.3569 203.645 62.4033 203.895 62.4966 203.996 cv
62.5898 204.096 62.7886 204.167 63.0928 204.21 cv
63.0928 204.361 li
60.7241 204.361 li
60.7241 204.21 li
cp
f
67.1963 197.029 mo
67.3037 196.918 67.436 196.863 67.5938 196.863 cv
67.7476 196.863 67.8794 196.917 67.9888 197.026 cv
68.0977 197.134 68.1523 197.267 68.1523 197.424 cv
68.1523 197.578 68.0977 197.708 67.9888 197.817 cv
67.8794 197.925 67.7476 197.98 67.5938 197.98 cv
67.436 197.98 67.3037 197.925 67.1963 197.817 cv
67.0889 197.708 67.0352 197.578 67.0352 197.424 cv
67.0352 197.271 67.0889 197.139 67.1963 197.029 cv
cp
66.3423 204.21 mo
66.7256 204.174 66.9673 204.109 67.0674 204.014 cv
67.1675 203.919 67.2178 203.663 67.2178 203.244 cv
67.2178 200.681 li
67.2178 200.449 67.2017 200.288 67.1694 200.199 cv
67.1157 200.051 67.0029 199.978 66.8311 199.978 cv
66.7915 199.978 66.7534 199.982 66.7153 199.989 cv
66.6782 199.996 66.5698 200.025 66.3906 200.075 cv
66.3906 199.908 li
66.6216 199.833 li
67.248 199.628 67.6851 199.475 67.9321 199.371 cv
68.0322 199.328 68.0967 199.306 68.1255 199.306 cv
68.1328 199.332 68.1362 199.359 68.1362 199.387 cv
68.1362 203.244 li
68.1362 203.652 68.1855 203.908 68.2837 204.011 cv
68.3823 204.116 68.6055 204.182 68.9526 204.21 cv
68.9526 204.361 li
66.3423 204.361 li
66.3423 204.21 li
cp
f
69.4092 204.21 mo
69.7422 204.178 69.9678 204.111 70.0859 204.009 cv
70.2041 203.907 70.2632 203.708 70.2632 203.41 cv
70.2632 198.163 li
70.2632 197.926 70.2437 197.763 70.2041 197.673 cv
70.1323 197.523 69.9873 197.449 69.769 197.449 cv
69.7188 197.449 69.6641 197.454 69.6055 197.464 cv
69.5459 197.475 69.4717 197.492 69.3823 197.513 cv
69.3823 197.335 li
69.8657 197.207 70.4478 197.035 71.1279 196.82 cv
71.1528 196.82 71.168 196.831 71.1738 196.852 cv
71.1787 196.874 71.1816 196.92 71.1816 196.992 cv
71.1816 203.431 li
71.1816 203.744 71.2354 203.945 71.3428 204.036 cv
71.4502 204.127 71.6724 204.185 72.0088 204.21 cv
72.0088 204.361 li
69.4092 204.361 li
69.4092 204.21 li
cp
f
75.3926 201.385 mo
74.981 201.521 74.6406 201.671 74.3721 201.836 cv
73.8564 202.155 73.5986 202.517 73.5986 202.921 cv
73.5986 203.248 73.7061 203.487 73.9209 203.641 cv
74.0605 203.742 74.2163 203.792 74.3882 203.792 cv
74.6245 203.792 74.8511 203.725 75.0679 203.593 cv
75.2842 203.46 75.3926 203.292 75.3926 203.087 cv
75.3926 201.385 li
cp
73.4214 201.992 mo
73.751 201.777 74.4077 201.486 75.3926 201.117 cv
75.3926 200.66 li
75.3926 200.294 75.3569 200.041 75.2852 199.898 cv
75.1636 199.658 74.9111 199.538 74.5278 199.538 cv
74.3452 199.538 74.1714 199.584 74.0068 199.677 cv
73.8423 199.774 73.7598 199.907 73.7598 200.075 cv
73.7598 200.118 73.7686 200.19 73.7866 200.292 cv
73.8047 200.394 73.8135 200.459 73.8135 200.488 cv
73.8135 200.689 73.7471 200.829 73.6147 200.908 cv
73.5396 200.954 73.4502 200.977 73.3462 200.977 cv
73.1851 200.977 73.0615 200.924 72.9756 200.819 cv
72.8896 200.713 72.8467 200.595 72.8467 200.466 cv
72.8467 200.216 73.0015 199.954 73.311 199.68 cv
73.6211 199.406 74.0747 199.269 74.6729 199.269 cv
75.3677 199.269 75.8384 199.495 76.0854 199.946 cv
76.2178 200.193 76.2842 200.552 76.2842 201.025 cv
76.2842 203.179 li
76.2842 203.387 76.2983 203.53 76.3271 203.609 cv
76.3735 203.749 76.4702 203.818 76.6172 203.818 cv
76.6997 203.818 76.7676 203.806 76.8213 203.781 cv
76.875 203.755 76.9683 203.695 77.1006 203.598 cv
77.1006 203.877 li
76.9858 204.017 76.8623 204.131 76.73 204.221 cv
76.5293 204.357 76.3252 204.425 76.1177 204.425 cv
75.874 204.425 75.6978 204.346 75.5884 204.189 cv
75.4795 204.032 75.4194 203.843 75.4087 203.625 cv
75.1367 203.861 74.9038 204.037 74.7104 204.152 cv
74.3848 204.345 74.0747 204.441 73.7813 204.441 cv
73.4731 204.441 73.2065 204.333 72.981 204.117 cv
72.7554 203.9 72.6426 203.625 72.6426 203.292 cv
72.6426 202.773 72.9023 202.339 73.4214 201.992 cv
cp
f
79.9204 199.409 mo
79.9204 199.795 li
78.8247 199.795 li
78.814 202.889 li
78.814 203.162 78.8374 203.367 78.8838 203.507 cv
78.9697 203.753 79.1382 203.877 79.3887 203.877 cv
79.5176 203.877 79.6294 203.847 79.7246 203.787 cv
79.8193 203.725 79.9277 203.628 80.0493 203.496 cv
80.189 203.615 li
80.0708 203.775 li
79.8848 204.026 79.6875 204.204 79.48 204.307 cv
79.2725 204.411 79.0718 204.462 78.8784 204.462 cv
78.4561 204.462 78.1694 204.275 78.019 203.899 cv
77.9365 203.695 77.8955 203.412 77.8955 203.05 cv
77.8955 199.795 li
77.3101 199.795 li
77.292 199.785 77.2788 199.774 77.2695 199.763 cv
77.2607 199.752 77.2563 199.738 77.2563 199.72 cv
77.2563 199.684 77.2646 199.657 77.2803 199.637 cv
77.2969 199.618 77.3477 199.572 77.4336 199.5 cv
77.6807 199.296 77.8589 199.13 77.9678 199.003 cv
78.0771 198.876 78.334 198.541 78.7388 197.996 cv
78.7852 197.996 78.813 198 78.8223 198.007 cv
78.8311 198.014 78.8354 198.041 78.8354 198.087 cv
78.8354 199.409 li
79.9204 199.409 li
cp
f
81.2471 197.029 mo
81.3545 196.918 81.4868 196.863 81.6445 196.863 cv
81.7983 196.863 81.9302 196.917 82.0396 197.026 cv
82.1484 197.134 82.2031 197.267 82.2031 197.424 cv
82.2031 197.578 82.1484 197.708 82.0396 197.817 cv
81.9302 197.925 81.7983 197.98 81.6445 197.98 cv
81.4868 197.98 81.3545 197.925 81.2471 197.817 cv
81.1396 197.708 81.0859 197.578 81.0859 197.424 cv
81.0859 197.271 81.1396 197.139 81.2471 197.029 cv
cp
80.3931 204.21 mo
80.7764 204.174 81.0181 204.109 81.1182 204.014 cv
81.2183 203.919 81.2686 203.663 81.2686 203.244 cv
81.2686 200.681 li
81.2686 200.449 81.2524 200.288 81.2202 200.199 cv
81.1665 200.051 81.0537 199.978 80.8818 199.978 cv
80.8423 199.978 80.8042 199.982 80.7661 199.989 cv
80.729 199.996 80.6206 200.025 80.4414 200.075 cv
80.4414 199.908 li
80.6724 199.833 li
81.2988 199.628 81.7358 199.475 81.9829 199.371 cv
82.083 199.328 82.1475 199.306 82.1763 199.306 cv
82.1836 199.332 82.187 199.359 82.187 199.387 cv
82.187 203.244 li
82.187 203.652 82.2363 203.908 82.3345 204.011 cv
82.4331 204.116 82.6563 204.182 83.0034 204.21 cv
83.0034 204.361 li
80.3931 204.361 li
80.3931 204.21 li
cp
f
85.0508 199.924 mo
84.6919 200.25 84.5127 200.812 84.5127 201.611 cv
84.5127 202.249 84.6572 202.842 84.9458 203.394 cv
85.2344 203.946 85.6357 204.221 86.1484 204.221 cv
86.5503 204.221 86.8599 204.037 87.0767 203.667 cv
87.2939 203.299 87.4023 202.816 87.4023 202.218 cv
87.4023 201.598 87.2642 201.015 86.9878 200.466 cv
86.7119 199.919 86.3115 199.645 85.7881 199.645 cv
85.5044 199.645 85.2588 199.738 85.0508 199.924 cv
cp
84.1934 200.061 mo
84.646 199.569 85.229 199.323 85.9414 199.323 cv
86.6504 199.323 87.2378 199.555 87.7031 200.021 cv
88.1685 200.487 88.4014 201.106 88.4014 201.879 cv
88.4014 202.592 88.1758 203.211 87.7246 203.738 cv
87.2734 204.264 86.6899 204.527 85.9736 204.527 cv
85.2861 204.527 84.7041 204.275 84.228 203.77 cv
83.752 203.265 83.5137 202.631 83.5137 201.869 cv
83.5137 201.156 83.7402 200.553 84.1934 200.061 cv
cp
f
88.9331 204.21 mo
89.1875 204.178 89.3652 204.115 89.4678 204.02 cv
89.5693 203.925 89.6206 203.712 89.6206 203.383 cv
89.6206 200.655 li
89.6206 200.427 89.5991 200.268 89.5562 200.175 cv
89.4883 200.041 89.3486 199.972 89.1372 199.972 cv
89.105 199.972 89.0718 199.974 89.0381 199.978 cv
89.0039 199.982 88.9619 199.987 88.9116 199.994 cv
88.9116 199.806 li
89.0586 199.763 89.4058 199.652 89.9536 199.473 cv
90.4585 199.306 li
90.4834 199.306 90.499 199.316 90.5039 199.333 cv
90.5098 199.351 90.5122 199.376 90.5122 199.409 cv
90.5122 200.199 li
90.8408 199.89 91.0981 199.679 91.2842 199.564 cv
91.563 199.389 91.8525 199.301 92.1528 199.301 cv
92.396 199.301 92.6172 199.371 92.8174 199.511 cv
93.2036 199.783 93.3965 200.268 93.3965 200.966 cv
93.3965 203.474 li
93.3965 203.732 93.4478 203.918 93.5508 204.033 cv
93.6538 204.148 93.8262 204.207 94.0679 204.21 cv
94.0679 204.361 li
91.7744 204.361 li
91.7744 204.21 li
92.0356 204.174 92.2183 204.102 92.3223 203.993 cv
92.4263 203.883 92.478 203.646 92.478 203.281 cv
92.478 200.988 li
92.478 200.68 92.4209 200.424 92.3071 200.222 cv
92.1929 200.02 91.9829 199.919 91.6768 199.919 cv
91.4668 199.919 91.2529 199.991 91.0361 200.134 cv
90.915 200.216 90.7583 200.352 90.5659 200.542 cv
90.5659 203.55 li
90.5659 203.808 90.623 203.98 90.7378 204.068 cv
90.8525 204.156 91.0332 204.204 91.2803 204.21 cv
91.2803 204.361 li
88.9331 204.361 li
88.9331 204.21 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
