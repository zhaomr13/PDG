%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: passage-web-27.23.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/12/12
%%BoundingBox: 0 -10 279 220
%%HiResBoundingBox: 0 0 278.1621 219.6323
%%CropBox: 0 0 278.1621 219.6323
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.70</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-12T18:17:08-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-12T18:17:07-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-12T18:17:08-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>204</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8v1jyNr96dXjtbNL&#xA;eK7vNQey5PEFiku7WGK31AKpPxQyxM/Z/iqN8KoOb8tfMzepWKOVZIntp1aUfvrt/rYTU2rtyT6z&#xA;Ef59jQHglVXpOqyXll5ZvJEmJvbaykZZwASZY4iQ9Cr1PIV+yfkcCqOnafqb2qSzavel5BUo6Wo4&#xA;+29pC3/BLiqudM1P10I1a49Hi3NSltyLVXiQfR6U5V+jFXHTNT9dCNWuPR4tzUpbci1V4kH0elOV&#xA;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&#xA;KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0D7056DAC9206811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0D7056DAC9206811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:087056DAC9206811808399C81683386A</stRef:instanceID>
            <stRef:documentID>xmp.did:087056DAC9206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:087056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T17:42:45-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0D7056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T18:17:08-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">passagerpp.dvi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.986111</stDim:w>
            <stDim:h>3.138889</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=100 K=27 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>26.999998</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=29 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>28.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=0 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=100 K=28 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>27.929699</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=56 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>56.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=51 M=86 Y=6 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.514992</xmpG:cyan>
                           <xmpG:magenta>85.867088</xmpG:magenta>
                           <xmpG:yellow>5.667198</xmpG:yellow>
                           <xmpG:black>0.152588</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -219.632 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 219.632 li
278.162 219.632 li
278.162 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.39906 lw
0 lc
0 lj
2.5 ml
[] 0 dsh
true sadj
33.9443 194.085 mo
271.455 194.085 li
33.9443 194.085 mo
33.9443 190.252 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
81.4414 194.085 mo
81.4414 190.252 li
@
128.938 194.085 mo
128.938 190.252 li
@
176.46 194.085 mo
176.46 190.252 li
@
223.958 194.085 mo
223.958 190.252 li
@
271.455 194.085 mo
271.455 190.252 li
@
48.2358 194.085 mo
48.2358 192.181 li
56.6079 194.085 mo
56.6079 192.181 li
62.5542 194.085 mo
62.5542 192.181 li
67.1489 194.085 mo
67.1489 192.181 li
70.9004 194.085 mo
70.9004 192.181 li
74.0903 194.085 mo
74.0903 192.181 li
76.8467 194.085 mo
76.8467 192.181 li
79.2715 194.085 mo
79.2715 192.181 li
95.7588 194.085 mo
95.7588 192.181 li
104.105 194.085 mo
104.105 192.181 li
110.052 194.085 mo
110.052 192.181 li
114.646 194.085 mo
114.646 192.181 li
118.423 194.085 mo
118.423 192.181 li
121.587 194.085 mo
121.587 192.181 li
124.344 194.085 mo
124.344 192.181 li
126.769 194.085 mo
126.769 192.181 li
143.256 194.085 mo
143.256 192.181 li
151.603 194.085 mo
151.603 192.181 li
157.549 194.085 mo
157.549 192.181 li
162.143 194.085 mo
162.143 192.181 li
165.92 194.085 mo
165.92 192.181 li
169.085 194.085 mo
169.085 192.181 li
171.841 194.085 mo
171.841 192.181 li
174.266 194.085 mo
174.266 192.181 li
190.752 194.085 mo
190.752 192.181 li
199.125 194.085 mo
199.125 192.181 li
205.045 194.085 mo
205.045 192.181 li
209.666 194.085 mo
209.666 192.181 li
213.417 194.085 mo
213.417 192.181 li
216.606 194.085 mo
216.606 192.181 li
219.339 194.085 mo
219.339 192.181 li
221.789 194.085 mo
221.789 192.181 li
238.251 194.085 mo
238.251 192.181 li
246.622 194.085 mo
246.622 192.181 li
252.543 194.085 mo
252.543 192.181 li
257.163 194.085 mo
257.163 192.181 li
260.914 194.085 mo
260.914 192.181 li
264.104 194.085 mo
264.104 192.181 li
266.86 194.085 mo
266.86 192.181 li
269.285 194.085 mo
269.285 192.181 li
33.9443 2.73633 mo
271.455 2.73633 li
33.9443 2.73633 mo
33.9443 6.56885 li
81.4414 2.73633 mo
81.4414 6.56885 li
128.938 2.73633 mo
128.938 6.56885 li
176.46 2.73633 mo
176.46 6.56885 li
223.958 2.73633 mo
223.958 6.56885 li
271.455 2.73633 mo
271.455 6.56885 li
48.2358 2.73633 mo
48.2358 4.63916 li
56.6079 2.73633 mo
56.6079 4.63916 li
62.5542 2.73633 mo
62.5542 4.63916 li
67.1489 2.73633 mo
67.1489 4.63916 li
70.9004 2.73633 mo
70.9004 4.63916 li
74.0903 2.73633 mo
74.0903 4.63916 li
76.8467 2.73633 mo
76.8467 4.63916 li
79.2715 2.73633 mo
79.2715 4.63916 li
95.7588 2.73633 mo
95.7588 4.63916 li
104.105 2.73633 mo
104.105 4.63916 li
110.052 2.73633 mo
110.052 4.63916 li
114.646 2.73633 mo
114.646 4.63916 li
118.423 2.73633 mo
118.423 4.63916 li
121.587 2.73633 mo
121.587 4.63916 li
124.344 2.73633 mo
124.344 4.63916 li
126.769 2.73633 mo
126.769 4.63916 li
143.256 2.73633 mo
143.256 4.63916 li
151.603 2.73633 mo
151.603 4.63916 li
157.549 2.73633 mo
157.549 4.63916 li
162.143 2.73633 mo
162.143 4.63916 li
165.92 2.73633 mo
165.92 4.63916 li
169.085 2.73633 mo
169.085 4.63916 li
171.841 2.73633 mo
171.841 4.63916 li
174.266 2.73633 mo
174.266 4.63916 li
190.752 2.73633 mo
190.752 4.63916 li
199.125 2.73633 mo
199.125 4.63916 li
205.045 2.73633 mo
205.045 4.63916 li
209.666 2.73633 mo
209.666 4.63916 li
213.417 2.73633 mo
213.417 4.63916 li
216.606 2.73633 mo
216.606 4.63916 li
219.339 2.73633 mo
219.339 4.63916 li
221.789 2.73633 mo
221.789 4.63916 li
238.251 2.73633 mo
238.251 4.63916 li
246.622 2.73633 mo
246.622 4.63916 li
252.543 2.73633 mo
252.543 4.63916 li
257.163 2.73633 mo
257.163 4.63916 li
260.914 2.73633 mo
260.914 4.63916 li
264.104 2.73633 mo
264.104 4.63916 li
266.86 2.73633 mo
266.86 4.63916 li
269.285 2.73633 mo
269.285 4.63916 li
33.9443 194.085 mo
33.9443 2.73633 li
33.9443 194.085 mo
38.6914 194.085 li
@
33.9443 146.243 mo
38.6914 146.243 li
@
33.9443 98.397 mo
38.6914 98.397 li
@
33.9443 50.5796 mo
38.6914 50.5796 li
@
33.9443 2.73633 mo
38.6914 2.73633 li
@
33.9443 179.694 mo
36.3179 179.694 li
33.9443 171.268 mo
36.3179 171.268 li
33.9443 165.279 mo
36.3179 165.279 li
33.9443 160.659 mo
36.3179 160.659 li
33.9443 156.852 mo
36.3179 156.852 li
33.9443 153.654 mo
36.3179 153.654 li
33.9443 150.886 mo
36.3179 150.886 li
33.9443 148.425 mo
36.3179 148.425 li
33.9443 131.85 mo
36.3179 131.85 li
33.9443 123.424 mo
36.3179 123.424 li
33.9443 117.433 mo
36.3179 117.433 li
33.9443 112.814 mo
36.3179 112.814 li
33.9443 109.033 mo
36.3179 109.033 li
33.9443 105.81 mo
36.3179 105.81 li
33.9443 103.042 mo
36.3179 103.042 li
33.9443 100.606 mo
36.3179 100.606 li
33.9443 84.0073 mo
36.3179 84.0073 li
33.9443 75.5796 mo
36.3179 75.5796 li
33.9443 69.6157 mo
36.3179 69.6157 li
33.9443 64.9712 mo
36.3179 64.9712 li
33.9443 61.189 mo
36.3179 61.189 li
33.9443 57.9907 mo
36.3179 57.9907 li
33.9443 55.1997 mo
36.3179 55.1997 li
33.9443 52.7622 mo
36.3179 52.7622 li
33.9443 36.1636 mo
36.3179 36.1636 li
33.9443 27.7368 mo
36.3179 27.7368 li
33.9443 21.7715 mo
36.3179 21.7715 li
33.9443 17.1274 mo
36.3179 17.1274 li
33.9443 13.3462 mo
36.3179 13.3462 li
33.9443 10.1479 mo
36.3179 10.1479 li
33.9443 7.38037 mo
36.3179 7.38037 li
33.9443 4.91943 mo
36.3179 4.91943 li
271.455 194.085 mo
271.455 2.73633 li
271.455 194.085 mo
266.707 194.085 li
271.455 146.243 mo
266.707 146.243 li
271.455 98.397 mo
266.707 98.397 li
271.455 50.5796 mo
266.707 50.5796 li
271.455 2.73633 mo
266.707 2.73633 li
271.455 179.694 mo
269.082 179.694 li
271.455 171.268 mo
269.082 171.268 li
271.455 165.279 mo
269.082 165.279 li
271.455 160.659 mo
269.082 160.659 li
271.455 156.852 mo
269.082 156.852 li
271.455 153.654 mo
269.082 153.654 li
271.455 150.886 mo
269.082 150.886 li
271.455 148.425 mo
269.082 148.425 li
271.455 131.85 mo
269.082 131.85 li
271.455 123.424 mo
269.082 123.424 li
271.455 117.433 mo
269.082 117.433 li
271.455 112.814 mo
269.082 112.814 li
271.455 109.033 mo
269.082 109.033 li
271.455 105.81 mo
269.082 105.81 li
271.455 103.042 mo
269.082 103.042 li
271.455 100.606 mo
269.082 100.606 li
271.455 84.0073 mo
269.082 84.0073 li
271.455 75.5796 mo
269.082 75.5796 li
271.455 69.6157 mo
269.082 69.6157 li
271.455 64.9712 mo
269.082 64.9712 li
271.455 61.189 mo
269.082 61.189 li
271.455 57.9907 mo
269.082 57.9907 li
271.455 55.1997 mo
269.082 55.1997 li
271.455 52.7622 mo
269.082 52.7622 li
271.455 36.1636 mo
269.082 36.1636 li
271.455 27.7368 mo
269.082 27.7368 li
271.455 21.7715 mo
269.082 21.7715 li
271.455 17.1274 mo
269.082 17.1274 li
271.455 13.3462 mo
269.082 13.3462 li
271.455 10.1479 mo
269.082 10.1479 li
271.455 7.38037 mo
269.082 7.38037 li
271.455 4.91943 mo
269.082 4.91943 li
@
[5.9859 1.9953 ] 0 dsh
110.588 194.085 mo
114.646 188.654 li
128.938 170.811 li
143.256 153.729 li
162.143 132.409 li
176.46 116.876 li
190.752 101.672 li
209.666 82.0024 li
223.958 67.2808 li
238.251 52.7114 li
257.163 33.5239 li
271.455 19.0562 li
0 1 0 0 cmyk
@
[1.49647 1.9953 ] 0 dsh
148.896 194.085 mo
162.143 180.76 li
176.46 166.04 li
190.752 151.115 li
209.666 131.14 li
223.958 115.861 li
238.251 100.48 li
257.163 79.9966 li
271.455 64.438 li
1 0 0 .29 cmyk
@
[5.9859 1.9953 1.9953 1.9953 ] 0 dsh
114.901 194.085 mo
128.938 177.588 li
143.256 161.166 li
162.143 140.048 li
176.46 124.44 li
190.752 109.134 li
209.666 89.2612 li
223.958 74.4644 li
238.251 59.7935 li
257.163 40.5288 li
271.455 26.0107 li
.8 0 1 0 cmyk
@
[] 0 dsh
99.6128 194.085 mo
114.646 175.202 li
128.938 158.07 li
143.256 141.419 li
162.143 120.328 li
176.46 104.794 li
190.752 89.5659 li
209.666 69.7944 li
223.958 55.022 li
238.251 40.3511 li
257.163 21.0615 li
271.455 6.51807 li
.50515 .858671 .056672 .00152588 cmyk
@
33.9443 136.977 mo
34.0718 136.952 li
36.0112 136.724 li
39.4565 136.343 li
42.3916 136.039 li
46.144 135.631 li
49.3076 135.303 li
53.6978 134.871 li
57.3218 134.49 li
60.4102 134.21 li
63.0908 133.958 li
65.4644 133.755 li
67.582 133.577 li
69.4966 133.399 li
71.2573 133.272 li
74.397 133.018 li
77.1025 132.789 li
79.5273 132.612 li
81.6699 132.459 li
85.3975 132.18 li
88.5361 131.978 li
92.5181 131.724 li
95.8613 131.52 li
100.43 131.242 li
104.181 131.039 li
107.346 130.86 li
110.103 130.708 li
112.527 130.582 li
114.697 130.48 li
116.662 130.378 li
118.449 130.302 li
121.612 130.15 li
124.369 130.024 li
126.794 129.896 li
128.964 129.795 li
132.741 129.642 li
135.906 129.49 li
139.913 129.338 li
143.256 129.186 li
147.85 128.983 li
151.627 128.83 li
154.793 128.703 li
157.549 128.601 li
159.974 128.475 li
162.168 128.399 li
164.133 128.323 li
165.92 128.247 li
169.085 128.12 li
171.841 128.019 li
174.291 127.917 li
176.46 127.815 li
180.212 127.663 li
183.403 127.536 li
187.41 127.383 li
190.752 127.232 li
195.347 127.053 li
199.125 126.901 li
202.289 126.775 li
205.045 126.672 li
207.471 126.572 li
209.666 126.496 li
211.63 126.393 li
213.417 126.342 li
216.606 126.217 li
219.363 126.089 li
221.789 125.988 li
223.958 125.911 li
227.71 125.759 li
230.899 125.632 li
234.907 125.456 li
238.251 125.328 li
242.869 125.151 li
246.622 124.972 li
249.786 124.845 li
252.543 124.745 li
254.993 124.642 li
257.163 124.567 li
259.127 124.465 li
260.914 124.389 li
264.104 124.262 li
266.86 124.161 li
269.285 124.058 li
271.455 123.982 li
0 .8 1 .27 cmyk
@
.997649 lw
[.997649 1.9953 ] 0 dsh
33.9443 142.333 mo
34.0718 142.308 li
36.0112 142.028 li
39.4565 141.573 li
42.3916 141.166 li
46.144 140.658 li
49.3076 140.25 li
53.6978 139.694 li
57.3218 139.236 li
60.4102 138.856 li
63.0908 138.5 li
65.4644 138.221 li
67.582 137.967 li
69.4966 137.714 li
71.2573 137.485 li
74.397 137.079 li
77.1025 136.75 li
79.5273 136.418 li
81.6699 136.115 li
85.3975 135.581 li
88.5361 135.099 li
92.5181 134.439 li
95.8613 133.805 li
100.43 132.867 li
104.181 131.978 li
107.346 131.14 li
110.103 130.328 li
112.527 129.541 li
114.697 128.78 li
116.662 128.069 li
118.449 127.383 li
121.612 126.063 li
124.369 124.795 li
126.794 123.602 li
128.964 122.434 li
132.741 120.328 li
135.906 118.373 li
139.913 115.708 li
143.256 113.323 li
147.85 109.895 li
151.627 106.925 li
154.793 104.287 li
157.549 101.901 li
159.974 99.769 li
162.168 97.7896 li
164.133 96.0122 li
165.92 94.3872 li
169.085 91.4438 li
171.841 88.8286 li
174.291 86.4946 li
176.46 84.3872 li
180.212 80.7583 li
183.403 77.6362 li
187.41 73.6509 li
190.752 70.3003 li
195.347 65.7075 li
199.125 61.9507 li
202.289 58.7271 li
205.045 55.9341 li
207.471 53.4731 li
209.666 51.2651 li
211.63 49.2847 li
213.417 47.4575 li
216.606 44.2339 li
219.363 41.4429 li
221.789 38.981 li
223.958 36.7729 li
227.71 32.9653 li
230.899 29.7422 li
234.907 25.6558 li
238.251 22.2544 li
242.869 17.6104 li
246.622 13.8018 li
249.786 10.5786 li
252.543 7.7876 li
254.993 5.3252 li
257.163 3.11768 li
257.52 2.73633 li
1 .56 0 0 cmyk
@
48.229 36.4741 mo
50.4561 30.6997 li
51.0088 30.6997 li
48.7656 36.4741 li
48.229 36.4741 li
cp
0 0 0 .00976598 cmyk
f
51.5669 30.5083 mo
52.2715 30.5083 li
52.2715 32.9214 li
52.2876 32.9214 li
52.3999 32.7231 52.5762 32.5396 52.7925 32.4204 cv
53.0005 32.3003 53.249 32.229 53.5132 32.229 cv
54.0342 32.229 54.8672 32.5474 54.8672 33.8696 cv
54.8672 36.1636 li
54.1621 36.1636 li
54.1621 33.9497 li
54.1621 33.3276 53.9297 32.8101 53.2651 32.8101 cv
52.8086 32.8101 52.4561 33.1284 52.3198 33.5034 cv
52.2798 33.6069 52.2715 33.7104 52.2715 33.8374 cv
52.2715 36.1636 li
51.5669 36.1636 li
51.5669 30.5083 li
cp
f
56.4492 34.2437 mo
56.4492 35.0884 56.9297 35.7251 57.6187 35.7251 cv
58.2915 35.7251 58.7964 35.0962 58.7964 34.228 cv
58.7964 33.5747 58.4678 32.7544 57.6348 32.7544 cv
56.8096 32.7544 56.4492 33.519 56.4492 34.2437 cv
cp
59.5176 34.2046 mo
59.5176 35.6304 58.5161 36.2515 57.5869 36.2515 cv
56.5454 36.2515 55.728 35.4868 55.728 34.2681 cv
55.728 32.9858 56.5854 32.229 57.6509 32.229 cv
58.7642 32.229 59.5176 33.0337 59.5176 34.2046 cv
cp
f
60.4023 33.3521 mo
60.4023 32.9458 60.3862 32.6274 60.3701 32.3081 cv
60.9868 32.3081 li
61.019 32.938 li
61.043 32.938 li
61.2593 32.5718 61.6196 32.229 62.2686 32.229 cv
62.7896 32.229 63.1899 32.5474 63.3584 33.0015 cv
63.374 33.0015 li
63.4941 32.7788 63.6548 32.6187 63.8149 32.4995 cv
64.0469 32.3247 64.2954 32.229 64.6641 32.229 cv
65.1846 32.229 65.9458 32.563 65.9458 33.9019 cv
65.9458 36.1636 li
65.2568 36.1636 li
65.2568 33.9888 li
65.2568 33.2407 64.9766 32.8022 64.4155 32.8022 cv
64.0068 32.8022 63.7026 33.0972 63.5747 33.4312 cv
63.5425 33.5347 63.5186 33.6548 63.5186 33.7817 cv
63.5186 36.1636 li
62.8296 36.1636 li
62.8296 33.854 li
62.8296 33.2407 62.5571 32.8022 62.0205 32.8022 cv
61.5879 32.8022 61.2593 33.1528 61.147 33.5034 cv
61.1069 33.5991 61.0913 33.7261 61.0913 33.8462 cv
61.0913 36.1636 li
60.4023 36.1636 li
60.4023 33.3521 li
cp
f
69.5361 33.8618 mo
69.5444 33.4233 69.3521 32.731 68.5591 32.731 cv
67.8379 32.731 67.5337 33.3755 67.4775 33.8618 cv
69.5361 33.8618 li
cp
67.4697 34.3638 mo
67.4854 35.311 68.0864 35.7017 68.7993 35.7017 cv
69.3042 35.7017 69.6162 35.6138 69.8726 35.5024 cv
70.001 36.0044 li
69.7524 36.1157 69.3198 36.2515 68.7031 36.2515 cv
67.5098 36.2515 66.7964 35.4624 66.7964 34.2993 cv
66.7964 33.1372 67.4854 32.229 68.6152 32.229 cv
69.8887 32.229 70.2173 33.3276 70.2173 34.0366 cv
70.2173 34.1802 70.209 34.2837 70.1934 34.3638 cv
67.4697 34.3638 li
cp
f
70.4941 36.4741 mo
72.7212 30.6997 li
73.2739 30.6997 li
71.0308 36.4741 li
70.4941 36.4741 li
cp
f
73.7358 35.4546 mo
73.9521 35.5825 74.3203 35.7251 74.6729 35.7251 cv
75.1777 35.7251 75.418 35.479 75.418 35.1519 cv
75.418 34.8179 75.2178 34.6421 74.7051 34.4507 cv
74 34.1958 73.6719 33.8218 73.6719 33.3599 cv
73.6719 32.7388 74.1846 32.229 75.0093 32.229 cv
75.4019 32.229 75.7466 32.3325 75.9546 32.4673 cv
75.7866 32.9771 li
75.6343 32.8823 75.354 32.7466 74.9937 32.7466 cv
74.5767 32.7466 74.3525 32.9858 74.3525 33.272 cv
74.3525 33.5913 74.5767 33.7339 75.0815 33.9331 cv
75.7466 34.1802 76.0991 34.5151 76.0991 35.0884 cv
76.0991 35.7729 75.562 36.2515 74.6572 36.2515 cv
74.2324 36.2515 73.8398 36.1401 73.5674 35.98 cv
73.7358 35.4546 li
cp
f
77.001 36.1636 mo
77.001 32.3081 li
77.7056 32.3081 li
77.7056 36.1636 li
77.001 36.1636 li
cp
77.7856 31.2251 mo
77.7856 31.4644 77.6177 31.6553 77.3374 31.6553 cv
77.0811 31.6553 76.9126 31.4644 76.9126 31.2251 cv
76.9126 30.9863 77.0889 30.7871 77.3535 30.7871 cv
77.6099 30.7871 77.7856 30.9785 77.7856 31.2251 cv
cp
f
81.333 33.8618 mo
81.3413 33.4233 81.1489 32.731 80.356 32.731 cv
79.6348 32.731 79.3306 33.3755 79.2744 33.8618 cv
81.333 33.8618 li
cp
79.2666 34.3638 mo
79.2822 35.311 79.8833 35.7017 80.5962 35.7017 cv
81.1011 35.7017 81.4131 35.6138 81.6694 35.5024 cv
81.7979 36.0044 li
81.5493 36.1157 81.1167 36.2515 80.5 36.2515 cv
79.3066 36.2515 78.5933 35.4624 78.5933 34.2993 cv
78.5933 33.1372 79.2822 32.229 80.4121 32.229 cv
81.6855 32.229 82.0142 33.3276 82.0142 34.0366 cv
82.0142 34.1802 82.0059 34.2837 81.9902 34.3638 cv
79.2666 34.3638 li
cp
f
82.8833 33.5112 mo
82.8833 33.0571 82.875 32.6665 82.8511 32.3081 cv
83.4678 32.3081 li
83.5 33.0728 li
83.5239 33.0728 li
83.7002 32.5552 84.1328 32.229 84.6055 32.229 cv
84.6777 32.229 84.7334 32.2368 84.7979 32.2446 cv
84.7979 32.9058 li
84.7256 32.8901 84.6533 32.8901 84.5576 32.8901 cv
84.0605 32.8901 83.708 33.2563 83.6123 33.7817 cv
83.5962 33.8774 83.5879 33.9966 83.5879 34.1089 cv
83.5879 36.1636 li
82.8833 36.1636 li
82.8833 33.5112 li
cp
f
85.5005 33.5112 mo
85.5005 33.0571 85.4922 32.6665 85.4683 32.3081 cv
86.085 32.3081 li
86.1172 33.0728 li
86.1411 33.0728 li
86.3174 32.5552 86.75 32.229 87.2227 32.229 cv
87.2949 32.229 87.3506 32.2368 87.415 32.2446 cv
87.415 32.9058 li
87.3428 32.8901 87.2705 32.8901 87.1748 32.8901 cv
86.6777 32.8901 86.3252 33.2563 86.2295 33.7817 cv
86.2134 33.8774 86.2051 33.9966 86.2051 34.1089 cv
86.2051 36.1636 li
85.5005 36.1636 li
85.5005 33.5112 li
cp
f
90.1602 34.1958 mo
89.3911 34.1802 88.5181 34.3159 88.5181 35.064 cv
88.5181 35.5259 88.8223 35.7339 89.1748 35.7339 cv
89.6875 35.7339 90.0161 35.4146 90.1284 35.0884 cv
90.1523 35.0083 90.1602 34.9292 90.1602 34.8657 cv
90.1602 34.1958 li
cp
90.8413 35.2397 mo
90.8413 35.5737 90.8574 35.9009 90.8975 36.1636 cv
90.2646 36.1636 li
90.2085 35.6772 li
90.1841 35.6772 li
89.9678 35.98 89.5513 36.2515 88.9985 36.2515 cv
88.2139 36.2515 87.813 35.7017 87.813 35.144 cv
87.813 34.2124 88.646 33.7026 90.144 33.7104 cv
90.144 33.6304 li
90.144 33.3198 90.0562 32.7388 89.2632 32.7466 cv
88.8945 32.7466 88.5181 32.8501 88.2456 33.0337 cv
88.0854 32.563 li
88.4058 32.3638 88.8784 32.229 89.3672 32.229 cv
90.5527 32.229 90.8413 33.0337 90.8413 33.7983 cv
90.8413 35.2397 li
cp
f
93.2808 31.6392 mo
93.2646 31.6392 li
92.3594 32.1255 li
92.2231 31.5918 li
93.3608 30.9863 li
93.9614 30.9863 li
93.9614 36.1636 li
93.2808 36.1636 li
93.2808 31.6392 li
cp
f
95.4878 36.4741 mo
97.7148 30.6997 li
98.2676 30.6997 li
96.0244 36.4741 li
95.4878 36.4741 li
cp
f
101.469 33.8774 mo
101.469 33.7896 101.461 33.6704 101.437 33.5825 cv
101.333 33.145 100.948 32.7788 100.42 32.7788 cv
99.6909 32.7788 99.2583 33.4155 99.2583 34.2603 cv
99.2583 35.0405 99.6504 35.686 100.404 35.686 cv
100.876 35.686 101.309 35.3667 101.437 34.8491 cv
101.461 34.7534 101.469 34.6577 101.469 34.5464 cv
101.469 33.8774 li
cp
102.166 30.5083 mo
102.166 35.1675 li
102.166 35.5103 102.182 35.9009 102.198 36.1636 cv
101.573 36.1636 li
101.541 35.4946 li
101.517 35.4946 li
101.309 35.9243 100.844 36.2515 100.211 36.2515 cv
99.2739 36.2515 98.5449 35.4624 98.5449 34.2915 cv
98.5371 33.0093 99.3462 32.229 100.284 32.229 cv
100.884 32.229 101.277 32.5073 101.453 32.8101 cv
101.469 32.8101 li
101.469 30.5083 li
102.166 30.5083 li
cp
f
105.799 33.8618 mo
105.807 33.4233 105.615 32.731 104.822 32.731 cv
104.101 32.731 103.796 33.3755 103.74 33.8618 cv
105.799 33.8618 li
cp
103.732 34.3638 mo
103.748 35.311 104.349 35.7017 105.062 35.7017 cv
105.567 35.7017 105.879 35.6138 106.135 35.5024 cv
106.264 36.0044 li
106.015 36.1157 105.583 36.2515 104.966 36.2515 cv
103.772 36.2515 103.059 35.4624 103.059 34.2993 cv
103.059 33.1372 103.748 32.229 104.878 32.229 cv
106.151 32.229 106.48 33.3276 106.48 34.0366 cv
106.48 34.1802 106.472 34.2837 106.456 34.3638 cv
103.732 34.3638 li
cp
f
109.96 33.8296 mo
109.96 33.7104 109.953 33.6069 109.92 33.519 cv
109.792 33.105 109.456 32.77 108.935 32.77 cv
108.262 32.77 107.782 33.3364 107.782 34.228 cv
107.782 34.9849 108.174 35.6138 108.927 35.6138 cv
109.368 35.6138 109.76 35.3433 109.904 34.897 cv
109.944 34.7778 109.96 34.6421 109.96 34.5229 cv
109.96 33.8296 li
cp
110.666 35.5981 mo
110.666 36.4897 110.481 37.0239 110.113 37.3667 cv
109.728 37.7085 109.184 37.8286 108.695 37.8286 cv
108.23 37.8286 107.717 37.7163 107.405 37.5093 cv
107.581 36.9683 li
107.837 37.1353 108.238 37.2788 108.719 37.2788 cv
109.44 37.2788 109.969 36.9048 109.969 35.9243 cv
109.969 35.5024 li
109.953 35.5024 li
109.744 35.8608 109.32 36.1479 108.719 36.1479 cv
107.757 36.1479 107.068 35.3354 107.068 34.2681 cv
107.068 32.9614 107.926 32.229 108.823 32.229 cv
109.496 32.229 109.856 32.5718 110.033 32.8901 cv
110.049 32.8901 li
110.073 32.3081 li
110.697 32.3081 li
110.673 32.5796 110.666 32.8979 110.666 33.3599 cv
110.666 35.5981 li
cp
f
111.23 36.4741 mo
113.458 30.6997 li
114.01 30.6997 li
111.767 36.4741 li
111.23 36.4741 li
cp
f
117.211 33.8774 mo
117.211 33.7896 117.203 33.6704 117.179 33.5825 cv
117.075 33.145 116.69 32.7788 116.162 32.7788 cv
115.433 32.7788 115 33.4155 115 34.2603 cv
115 35.0405 115.393 35.686 116.146 35.686 cv
116.619 35.686 117.051 35.3667 117.179 34.8491 cv
117.203 34.7534 117.211 34.6577 117.211 34.5464 cv
117.211 33.8774 li
cp
117.908 30.5083 mo
117.908 35.1675 li
117.908 35.5103 117.924 35.9009 117.94 36.1636 cv
117.315 36.1636 li
117.283 35.4946 li
117.259 35.4946 li
117.051 35.9243 116.586 36.2515 115.954 36.2515 cv
115.016 36.2515 114.287 35.4624 114.287 34.2915 cv
114.279 33.0093 115.088 32.229 116.026 32.229 cv
116.626 32.229 117.019 32.5073 117.195 32.8101 cv
117.211 32.8101 li
117.211 30.5083 li
117.908 30.5083 li
cp
f
121.541 33.8618 mo
121.549 33.4233 121.357 32.731 120.563 32.731 cv
119.843 32.731 119.539 33.3755 119.482 33.8618 cv
121.541 33.8618 li
cp
119.475 34.3638 mo
119.49 35.311 120.091 35.7017 120.805 35.7017 cv
121.309 35.7017 121.621 35.6138 121.878 35.5024 cv
122.006 36.0044 li
121.758 36.1157 121.325 36.2515 120.708 36.2515 cv
119.515 36.2515 118.801 35.4624 118.801 34.2993 cv
118.801 33.1372 119.49 32.229 120.62 32.229 cv
121.894 32.229 122.222 33.3276 122.222 34.0366 cv
122.222 34.1802 122.214 34.2837 122.198 34.3638 cv
119.475 34.3638 li
cp
f
125.735 33.8774 mo
125.735 33.7896 125.728 33.6704 125.703 33.5825 cv
125.599 33.145 125.215 32.7788 124.686 32.7788 cv
123.957 32.7788 123.524 33.4155 123.524 34.2603 cv
123.524 35.0405 123.917 35.686 124.67 35.686 cv
125.143 35.686 125.575 35.3667 125.703 34.8491 cv
125.728 34.7534 125.735 34.6577 125.735 34.5464 cv
125.735 33.8774 li
cp
126.433 30.5083 mo
126.433 35.1675 li
126.433 35.5103 126.448 35.9009 126.464 36.1636 cv
125.84 36.1636 li
125.808 35.4946 li
125.783 35.4946 li
125.575 35.9243 125.11 36.2515 124.478 36.2515 cv
123.54 36.2515 122.812 35.4624 122.812 34.2915 cv
122.804 33.0093 123.612 32.229 124.55 32.229 cv
125.15 32.229 125.543 32.5073 125.719 32.8101 cv
125.735 32.8101 li
125.735 30.5083 li
126.433 30.5083 li
cp
f
127.934 32.3081 mo
128.486 33.1372 li
128.639 33.3521 128.759 33.5435 128.887 33.7583 cv
128.903 33.7583 li
129.031 33.5347 129.159 33.3364 129.296 33.1284 cv
129.832 32.3081 li
130.602 32.3081 li
129.279 34.1724 li
130.634 36.1636 li
129.84 36.1636 li
129.264 35.2954 li
129.111 35.0728 128.983 34.8569 128.847 34.6265 cv
128.831 34.6265 li
128.703 34.8569 128.574 35.064 128.423 35.2954 cv
127.861 36.1636 li
127.085 36.1636 li
128.463 34.1958 li
127.148 32.3081 li
127.934 32.3081 li
cp
f
130.718 36.4741 mo
132.944 30.6997 li
133.497 30.6997 li
131.254 36.4741 li
130.718 36.4741 li
cp
f
134.056 33.5112 mo
134.056 33.0571 134.048 32.6665 134.023 32.3081 cv
134.641 32.3081 li
134.672 33.0728 li
134.696 33.0728 li
134.873 32.5552 135.306 32.229 135.777 32.229 cv
135.85 32.229 135.906 32.2368 135.97 32.2446 cv
135.97 32.9058 li
135.898 32.8901 135.826 32.8901 135.729 32.8901 cv
135.233 32.8901 134.881 33.2563 134.784 33.7817 cv
134.769 33.8774 134.761 33.9966 134.761 34.1089 cv
134.761 36.1636 li
134.056 36.1636 li
134.056 33.5112 li
cp
f
137.369 34.5942 mo
137.369 34.6978 137.378 34.7935 137.401 34.8813 cv
137.53 35.3667 137.954 35.7017 138.459 35.7017 cv
139.204 35.7017 139.637 35.0962 139.637 34.2124 cv
139.637 33.4478 139.229 32.7866 138.483 32.7866 cv
138.003 32.7866 137.546 33.1206 137.418 33.647 cv
137.394 33.7339 137.369 33.8374 137.369 33.9253 cv
137.369 34.5942 li
cp
136.673 33.5669 mo
136.673 33.0728 136.656 32.6753 136.641 32.3081 cv
137.266 32.3081 li
137.306 32.9692 li
137.321 32.9692 li
137.602 32.4995 138.066 32.229 138.699 32.229 cv
139.645 32.229 140.35 33.0171 140.35 34.1802 cv
140.35 35.5659 139.492 36.2515 138.579 36.2515 cv
138.066 36.2515 137.618 36.0278 137.386 35.646 cv
137.369 35.646 li
137.369 37.7407 li
136.673 37.7407 li
136.673 33.5669 li
cp
f
141.924 34.5942 mo
141.924 34.6978 141.932 34.7935 141.955 34.8813 cv
142.084 35.3667 142.508 35.7017 143.013 35.7017 cv
143.758 35.7017 144.19 35.0962 144.19 34.2124 cv
144.19 33.4478 143.782 32.7866 143.037 32.7866 cv
142.557 32.7866 142.1 33.1206 141.972 33.647 cv
141.947 33.7339 141.924 33.8374 141.924 33.9253 cv
141.924 34.5942 li
cp
141.227 33.5669 mo
141.227 33.0728 141.21 32.6753 141.194 32.3081 cv
141.819 32.3081 li
141.859 32.9692 li
141.875 32.9692 li
142.155 32.4995 142.62 32.229 143.253 32.229 cv
144.198 32.229 144.903 33.0171 144.903 34.1802 cv
144.903 35.5659 144.046 36.2515 143.133 36.2515 cv
142.62 36.2515 142.172 36.0278 141.939 35.646 cv
141.924 35.646 li
141.924 37.7407 li
141.227 37.7407 li
141.227 33.5669 li
cp
f
149.201 36.7612 mo
149.201 37.1597 li
145.195 37.1597 li
145.195 36.7612 li
149.201 36.7612 li
cp
f
149.782 33.3521 mo
149.782 32.9458 149.766 32.6274 149.75 32.3081 cv
150.367 32.3081 li
150.398 32.938 li
150.423 32.938 li
150.64 32.5718 151 32.229 151.648 32.229 cv
152.169 32.229 152.57 32.5474 152.738 33.0015 cv
152.754 33.0015 li
152.874 32.7788 153.034 32.6187 153.194 32.4995 cv
153.427 32.3247 153.676 32.229 154.044 32.229 cv
154.564 32.229 155.325 32.563 155.325 33.9019 cv
155.325 36.1636 li
154.637 36.1636 li
154.637 33.9888 li
154.637 33.2407 154.356 32.8022 153.796 32.8022 cv
153.387 32.8022 153.083 33.0972 152.954 33.4312 cv
152.922 33.5347 152.898 33.6548 152.898 33.7817 cv
152.898 36.1636 li
152.209 36.1636 li
152.209 33.854 li
152.209 33.2407 151.937 32.8022 151.4 32.8022 cv
150.968 32.8022 150.64 33.1528 150.527 33.5034 cv
150.487 33.5991 150.471 33.7261 150.471 33.8462 cv
150.471 36.1636 li
149.782 36.1636 li
149.782 33.3521 li
cp
f
159.701 35.104 mo
159.701 35.5103 159.709 35.8608 159.733 36.1636 cv
159.108 36.1636 li
159.068 35.5347 li
159.053 35.5347 li
158.876 35.8452 158.46 36.2515 157.771 36.2515 cv
157.162 36.2515 156.433 35.9087 156.433 34.563 cv
156.433 32.3081 li
157.138 32.3081 li
157.138 34.4351 li
157.138 35.1675 157.37 35.6694 158.003 35.6694 cv
158.476 35.6694 158.804 35.3433 158.933 35.0249 cv
158.973 34.9292 158.996 34.8013 158.996 34.6665 cv
158.996 32.3081 li
159.701 32.3081 li
159.701 35.104 li
cp
f
164.288 36.7612 mo
164.288 37.1597 li
160.282 37.1597 li
160.282 36.7612 li
164.288 36.7612 li
cp
f
167.68 33.647 mo
165.589 33.647 li
165.589 35.5825 li
167.928 35.5825 li
167.928 36.1636 li
164.884 36.1636 li
164.884 30.7949 li
167.808 30.7949 li
167.808 31.3765 li
165.589 31.3765 li
165.589 33.0728 li
167.68 33.0728 li
167.68 33.647 li
cp
f
172.227 36.7612 mo
172.227 37.1597 li
168.221 37.1597 li
168.221 36.7612 li
172.227 36.7612 li
cp
f
172.808 30.5083 mo
173.513 30.5083 li
173.513 36.1636 li
172.808 36.1636 li
172.808 30.5083 li
cp
f
175.137 34.2437 mo
175.137 35.0884 175.617 35.7251 176.307 35.7251 cv
176.979 35.7251 177.484 35.0962 177.484 34.228 cv
177.484 33.5747 177.155 32.7544 176.322 32.7544 cv
175.497 32.7544 175.137 33.519 175.137 34.2437 cv
cp
178.205 34.2046 mo
178.205 35.6304 177.203 36.2515 176.274 36.2515 cv
175.232 36.2515 174.416 35.4868 174.416 34.2681 cv
174.416 32.9858 175.272 32.229 176.338 32.229 cv
177.452 32.229 178.205 33.0337 178.205 34.2046 cv
cp
f
178.993 35.4546 mo
179.21 35.5825 179.578 35.7251 179.931 35.7251 cv
180.436 35.7251 180.676 35.479 180.676 35.1519 cv
180.676 34.8179 180.476 34.6421 179.963 34.4507 cv
179.258 34.1958 178.93 33.8218 178.93 33.3599 cv
178.93 32.7388 179.442 32.229 180.268 32.229 cv
180.66 32.229 181.004 32.3325 181.213 32.4673 cv
181.044 32.9771 li
180.893 32.8823 180.611 32.7466 180.251 32.7466 cv
179.835 32.7466 179.61 32.9858 179.61 33.272 cv
179.61 33.5913 179.835 33.7339 180.34 33.9331 cv
181.004 34.1802 181.356 34.5151 181.356 35.0884 cv
181.356 35.7729 180.82 36.2515 179.915 36.2515 cv
179.49 36.2515 179.098 36.1401 178.825 35.98 cv
178.993 35.4546 li
cp
f
182.163 35.4546 mo
182.38 35.5825 182.748 35.7251 183.101 35.7251 cv
183.605 35.7251 183.846 35.479 183.846 35.1519 cv
183.846 34.8179 183.646 34.6421 183.133 34.4507 cv
182.428 34.1958 182.1 33.8218 182.1 33.3599 cv
182.1 32.7388 182.612 32.229 183.438 32.229 cv
183.83 32.229 184.174 32.3325 184.383 32.4673 cv
184.214 32.9771 li
184.063 32.8823 183.781 32.7466 183.421 32.7466 cv
183.005 32.7466 182.78 32.9858 182.78 33.272 cv
182.78 33.5913 183.005 33.7339 183.51 33.9331 cv
184.174 34.1802 184.526 34.5151 184.526 35.0884 cv
184.526 35.7729 183.99 36.2515 183.085 36.2515 cv
182.66 36.2515 182.268 36.1401 181.995 35.98 cv
182.163 35.4546 li
cp
f
185.261 35.7495 mo
185.261 35.4624 185.461 35.2476 185.741 35.2476 cv
186.021 35.2476 186.214 35.4546 186.214 35.7495 cv
186.214 36.0356 186.021 36.2515 185.725 36.2515 cv
185.452 36.2515 185.261 36.0356 185.261 35.7495 cv
cp
f
187.783 34.5942 mo
187.783 34.6978 187.791 34.7935 187.814 34.8813 cv
187.943 35.3667 188.367 35.7017 188.872 35.7017 cv
189.617 35.7017 190.05 35.0962 190.05 34.2124 cv
190.05 33.4478 189.642 32.7866 188.896 32.7866 cv
188.416 32.7866 187.959 33.1206 187.831 33.647 cv
187.807 33.7339 187.783 33.8374 187.783 33.9253 cv
187.783 34.5942 li
cp
187.086 33.5669 mo
187.086 33.0728 187.069 32.6753 187.054 32.3081 cv
187.679 32.3081 li
187.719 32.9692 li
187.734 32.9692 li
188.015 32.4995 188.479 32.229 189.112 32.229 cv
190.058 32.229 190.763 33.0171 190.763 34.1802 cv
190.763 35.5659 189.905 36.2515 188.992 36.2515 cv
188.479 36.2515 188.031 36.0278 187.799 35.646 cv
187.783 35.646 li
187.783 37.7407 li
187.086 37.7407 li
187.086 33.5669 li
cp
f
191.64 33.5112 mo
191.64 33.0571 191.632 32.6665 191.607 32.3081 cv
192.225 32.3081 li
192.256 33.0728 li
192.28 33.0728 li
192.457 32.5552 192.89 32.229 193.361 32.229 cv
193.434 32.229 193.49 32.2368 193.554 32.2446 cv
193.554 32.9058 li
193.482 32.8901 193.41 32.8901 193.313 32.8901 cv
192.817 32.8901 192.465 33.2563 192.368 33.7817 cv
192.353 33.8774 192.345 33.9966 192.345 34.1089 cv
192.345 36.1636 li
191.64 36.1636 li
191.64 33.5112 li
cp
f
194.696 34.2437 mo
194.696 35.0884 195.177 35.7251 195.866 35.7251 cv
196.539 35.7251 197.044 35.0962 197.044 34.228 cv
197.044 33.5747 196.715 32.7544 195.882 32.7544 cv
195.057 32.7544 194.696 33.519 194.696 34.2437 cv
cp
197.765 34.2046 mo
197.765 35.6304 196.763 36.2515 195.834 36.2515 cv
194.792 36.2515 193.976 35.4868 193.976 34.2681 cv
193.976 32.9858 194.832 32.229 195.897 32.229 cv
197.012 32.229 197.765 33.0337 197.765 34.2046 cv
cp
f
49.8711 45.8013 mo
48.229 45.8013 li
48.229 45.2124 li
52.2261 45.2124 li
52.2261 45.8013 li
50.5762 45.8013 li
50.5762 50.5806 li
49.8711 50.5806 li
49.8711 45.8013 li
cp
f
52.7993 44.9253 mo
53.5039 44.9253 li
53.5039 47.3384 li
53.52 47.3384 li
53.6323 47.1392 53.8086 46.9565 54.0249 46.8374 cv
54.2329 46.7173 54.4814 46.646 54.7456 46.646 cv
55.2666 46.646 56.0996 46.9644 56.0996 48.2866 cv
56.0996 50.5806 li
55.3945 50.5806 li
55.3945 48.3667 li
55.3945 47.7446 55.1621 47.2271 54.4976 47.2271 cv
54.041 47.2271 53.6885 47.5454 53.5522 47.9204 cv
53.5122 48.0239 53.5039 48.1274 53.5039 48.2544 cv
53.5039 50.5806 li
52.7993 50.5806 li
52.7993 44.9253 li
cp
f
60.4854 49.521 mo
60.4854 49.9272 60.4937 50.2778 60.5176 50.5806 cv
59.8926 50.5806 li
59.8525 49.9517 li
59.8364 49.9517 li
59.6602 50.2622 59.2437 50.6685 58.5547 50.6685 cv
57.9458 50.6685 57.2168 50.3257 57.2168 48.98 cv
57.2168 46.7251 li
57.9219 46.7251 li
57.9219 48.8521 li
57.9219 49.5845 58.1543 50.0864 58.7871 50.0864 cv
59.2598 50.0864 59.5884 49.7603 59.7163 49.4419 cv
59.7563 49.3462 59.7803 49.2183 59.7803 49.0835 cv
59.7803 46.7251 li
60.4854 46.7251 li
60.4854 49.521 li
cp
f
66.0229 48.3501 mo
65.4863 46.8052 li
65.3662 46.4546 65.2861 46.1362 65.2061 45.8257 cv
65.1899 45.8257 li
65.1099 46.1362 65.0298 46.4702 64.9175 46.7974 cv
64.3887 48.3501 li
66.0229 48.3501 li
cp
64.2446 48.8921 mo
63.6841 50.5806 li
62.9629 50.5806 li
64.8057 45.2124 li
65.6387 45.2124 li
67.481 50.5806 li
66.7363 50.5806 li
66.1592 48.8921 li
64.2446 48.8921 li
cp
f
68.9424 49.0112 mo
68.9424 49.1147 68.9502 49.2104 68.9746 49.2983 cv
69.1025 49.7837 69.5273 50.1187 70.0317 50.1187 cv
70.7769 50.1187 71.2095 49.5132 71.2095 48.6294 cv
71.2095 47.8647 70.8008 47.2036 70.0557 47.2036 cv
69.5752 47.2036 69.1187 47.5376 68.9902 48.064 cv
68.9663 48.1509 68.9424 48.2544 68.9424 48.3423 cv
68.9424 49.0112 li
cp
68.2456 47.9839 mo
68.2456 47.4897 68.2295 47.0923 68.2134 46.7251 cv
68.8384 46.7251 li
68.8784 47.3862 li
68.8945 47.3862 li
69.1748 46.9165 69.6392 46.646 70.272 46.646 cv
71.2173 46.646 71.9224 47.4341 71.9224 48.5972 cv
71.9224 49.9829 71.0654 50.6685 70.1519 50.6685 cv
69.6392 50.6685 69.1909 50.4448 68.9585 50.063 cv
68.9424 50.063 li
68.9424 52.1577 li
68.2456 52.1577 li
68.2456 47.9839 li
cp
f
72.7993 47.9282 mo
72.7993 47.4741 72.791 47.0835 72.7671 46.7251 cv
73.3838 46.7251 li
73.416 47.4897 li
73.4399 47.4897 li
73.6162 46.9722 74.0488 46.646 74.5215 46.646 cv
74.5938 46.646 74.6494 46.6538 74.7139 46.6616 cv
74.7139 47.3228 li
74.6416 47.3071 74.5693 47.3071 74.4736 47.3071 cv
73.9766 47.3071 73.624 47.6733 73.5283 48.1987 cv
73.5122 48.2944 73.5039 48.4146 73.5039 48.5259 cv
73.5039 50.5806 li
72.7993 50.5806 li
72.7993 47.9282 li
cp
f
80.7642 48.6216 mo
80.7642 46.8931 li
80.7642 46.6216 80.772 46.3511 80.7881 46.0806 cv
80.7642 46.0806 li
80.604 46.3833 80.4756 46.606 80.3315 46.8452 cv
79.0576 48.605 li
79.0576 48.6216 li
80.7642 48.6216 li
cp
80.7642 50.5806 mo
80.7642 49.1626 li
78.3447 49.1626 li
78.3447 48.7085 li
80.668 45.4028 li
81.4287 45.4028 li
81.4287 48.6216 li
82.1577 48.6216 li
82.1577 49.1626 li
81.4287 49.1626 li
81.4287 50.5806 li
80.7642 50.5806 li
cp
f
85.9175 46.0562 mo
85.9014 46.0562 li
84.9961 46.5425 li
84.8599 46.0083 li
85.9976 45.4028 li
86.5981 45.4028 li
86.5981 50.5806 li
85.9175 50.5806 li
85.9175 46.0562 li
cp
f
88.6616 49.7837 mo
88.8618 49.9038 89.3184 50.103 89.8149 50.103 cv
90.7124 50.103 91.0005 49.5376 90.9927 49.0991 cv
90.9849 48.3745 90.3276 48.064 89.647 48.064 cv
89.2544 48.064 li
89.2544 47.5376 li
89.647 47.5376 li
90.1597 47.5376 90.8086 47.2749 90.8086 46.6616 cv
90.8086 46.2476 90.5439 45.8813 89.895 45.8813 cv
89.4785 45.8813 89.0781 46.064 88.854 46.2241 cv
88.6616 45.7144 li
88.9419 45.5151 89.4707 45.3159 90.0313 45.3159 cv
91.0566 45.3159 91.5215 45.9214 91.5215 46.5503 cv
91.5215 47.0923 91.1929 47.5454 90.5601 47.7769 cv
90.5601 47.7925 li
91.2012 47.9126 91.7139 48.3901 91.7217 49.1147 cv
91.7217 49.9438 91.0649 50.6685 89.8232 50.6685 cv
89.2383 50.6685 88.7256 50.4849 88.4692 50.3179 cv
88.6616 49.7837 li
cp
f
92.6631 50.1743 mo
92.6631 49.8794 92.8633 49.6724 93.1357 49.6724 cv
93.4238 49.6724 93.6079 49.8794 93.6079 50.1743 cv
93.6079 50.4536 93.4238 50.6685 93.1274 50.6685 cv
92.855 50.6685 92.6631 50.4536 92.6631 50.1743 cv
cp
92.6631 47.3628 mo
92.6631 47.0679 92.8633 46.8608 93.1357 46.8608 cv
93.4238 46.8608 93.6079 47.0679 93.6079 47.3628 cv
93.6079 47.6411 93.4238 47.8569 93.1274 47.8569 cv
92.855 47.8569 92.6631 47.6411 92.6631 47.3628 cv
cp
f
97.3633 45.9927 mo
95.3765 45.9927 li
95.1763 47.3228 li
95.2964 47.3071 95.4087 47.2993 95.6011 47.2993 cv
96.0093 47.2993 96.4019 47.3784 96.7222 47.5776 cv
97.1309 47.8003 97.4673 48.2544 97.4673 48.8999 cv
97.4673 49.9116 96.6582 50.6685 95.5288 50.6685 cv
94.96 50.6685 94.4873 50.5093 94.231 50.3491 cv
94.4072 49.8159 li
94.6235 49.9438 95.0479 50.103 95.5288 50.103 cv
96.1855 50.103 96.7622 49.6724 96.7544 48.98 cv
96.7544 48.3101 96.2979 47.8403 95.2642 47.8403 cv
94.96 47.8403 94.7275 47.8647 94.5352 47.8882 cv
94.8721 45.4028 li
97.3633 45.4028 li
97.3633 45.9927 li
cp
f
101.469 45.9927 mo
99.4824 45.9927 li
99.2822 47.3228 li
99.4023 47.3071 99.5146 47.2993 99.707 47.2993 cv
100.115 47.2993 100.508 47.3784 100.828 47.5776 cv
101.237 47.8003 101.573 48.2544 101.573 48.8999 cv
101.573 49.9116 100.764 50.6685 99.6348 50.6685 cv
99.0659 50.6685 98.5933 50.5093 98.3369 50.3491 cv
98.5132 49.8159 li
98.7295 49.9438 99.1543 50.103 99.6348 50.103 cv
100.292 50.103 100.868 49.6724 100.86 48.98 cv
100.86 48.3101 100.404 47.8403 99.3701 47.8403 cv
99.0659 47.8403 98.8335 47.8647 98.6416 47.8882 cv
98.978 45.4028 li
101.469 45.4028 li
101.469 45.9927 li
cp
f
102.531 50.1743 mo
102.531 49.8794 102.731 49.6724 103.003 49.6724 cv
103.292 49.6724 103.476 49.8794 103.476 50.1743 cv
103.476 50.4536 103.292 50.6685 102.995 50.6685 cv
102.723 50.6685 102.531 50.4536 102.531 50.1743 cv
cp
102.531 47.3628 mo
102.531 47.0679 102.731 46.8608 103.003 46.8608 cv
103.292 46.8608 103.476 47.0679 103.476 47.3628 cv
103.476 47.6411 103.292 47.8569 102.995 47.8569 cv
102.723 47.8569 102.531 47.6411 102.531 47.3628 cv
cp
f
106.302 48.6216 mo
106.302 46.8931 li
106.302 46.6216 106.31 46.3511 106.326 46.0806 cv
106.302 46.0806 li
106.142 46.3833 106.014 46.606 105.87 46.8452 cv
104.596 48.605 li
104.596 48.6216 li
106.302 48.6216 li
cp
106.302 50.5806 mo
106.302 49.1626 li
103.883 49.1626 li
103.883 48.7085 li
106.206 45.4028 li
106.967 45.4028 li
106.967 48.6216 li
107.696 48.6216 li
107.696 49.1626 li
106.967 49.1626 li
106.967 50.5806 li
106.302 50.5806 li
cp
f
108.87 48.0161 mo
108.87 49.3618 109.286 50.1265 109.927 50.1265 cv
110.64 50.1265 110.984 49.2905 110.984 47.9683 cv
110.984 46.6938 110.664 45.8569 109.927 45.8569 cv
109.318 45.8569 108.87 46.606 108.87 48.0161 cv
cp
111.697 47.936 mo
111.697 49.6968 111.032 50.6685 109.887 50.6685 cv
108.87 50.6685 108.172 49.7202 108.157 48.0083 cv
108.157 46.2632 108.917 45.3159 109.975 45.3159 cv
111.064 45.3159 111.697 46.2876 111.697 47.936 cv
cp
f
114.031 50.5806 mo
114.031 50.1509 li
114.583 49.6167 li
115.914 48.3579 116.522 47.689 116.522 46.9087 cv
116.522 46.3833 116.274 45.897 115.497 45.897 cv
115.024 45.897 114.632 46.1362 114.392 46.3354 cv
114.167 45.8413 li
114.52 45.5464 115.04 45.3159 115.633 45.3159 cv
116.754 45.3159 117.227 46.0806 117.227 46.8208 cv
117.227 47.7769 116.53 48.5493 115.433 49.6011 cv
115.024 49.9829 li
115.024 49.9995 li
117.355 49.9995 li
117.355 50.5806 li
114.031 50.5806 li
cp
f
118.777 48.0161 mo
118.777 49.3618 119.194 50.1265 119.835 50.1265 cv
120.548 50.1265 120.893 49.2905 120.893 47.9683 cv
120.893 46.6938 120.571 45.8569 119.835 45.8569 cv
119.226 45.8569 118.777 46.606 118.777 48.0161 cv
cp
121.605 47.936 mo
121.605 49.6968 120.94 50.6685 119.795 50.6685 cv
118.777 50.6685 118.08 49.7202 118.064 48.0083 cv
118.064 46.2632 118.825 45.3159 119.883 45.3159 cv
120.973 45.3159 121.605 46.2876 121.605 47.936 cv
cp
f
122.883 48.0161 mo
122.883 49.3618 123.3 50.1265 123.94 50.1265 cv
124.653 50.1265 124.998 49.2905 124.998 47.9683 cv
124.998 46.6938 124.678 45.8569 123.94 45.8569 cv
123.332 45.8569 122.883 46.606 122.883 48.0161 cv
cp
125.711 47.936 mo
125.711 49.6968 125.046 50.6685 123.9 50.6685 cv
122.883 50.6685 122.187 49.7202 122.17 48.0083 cv
122.17 46.2632 122.932 45.3159 123.988 45.3159 cv
125.078 45.3159 125.711 46.2876 125.711 47.936 cv
cp
f
126.348 50.5806 mo
126.348 50.1509 li
126.9 49.6167 li
128.23 48.3579 128.839 47.689 128.839 46.9087 cv
128.839 46.3833 128.591 45.897 127.813 45.897 cv
127.341 45.897 126.948 46.1362 126.708 46.3354 cv
126.484 45.8413 li
126.837 45.5464 127.357 45.3159 127.95 45.3159 cv
129.071 45.3159 129.544 46.0806 129.544 46.8208 cv
129.544 47.7769 128.848 48.5493 127.75 49.6011 cv
127.341 49.9829 li
127.341 49.9995 li
129.672 49.9995 li
129.672 50.5806 li
126.348 50.5806 li
cp
f
116.805 217.271 mo
117.219 217.229 117.484 217.136 117.602 216.992 cv
117.719 216.848 117.777 216.514 117.777 215.99 cv
117.777 211.951 li
117.777 211.591 117.72 211.358 117.606 211.25 cv
117.492 211.141 117.233 211.078 116.83 211.058 cv
116.83 210.874 li
118.802 210.874 li
121.1 215.829 li
123.342 210.874 li
125.33 210.874 li
125.33 211.058 li
124.959 211.083 124.719 211.151 124.611 211.259 cv
124.504 211.368 124.449 211.598 124.449 211.951 cv
124.449 216.373 li
124.449 216.736 124.504 216.967 124.611 217.07 cv
124.719 217.171 124.959 217.239 125.33 217.271 cv
125.33 217.456 li
122.531 217.456 li
122.531 217.271 li
122.934 217.239 123.186 217.167 123.285 217.055 cv
123.385 216.944 123.434 216.677 123.434 216.256 cv
123.434 211.791 li
120.871 217.456 li
120.734 217.456 li
118.217 212.024 li
118.217 215.99 li
118.217 216.533 118.297 216.887 118.457 217.052 cv
118.561 217.16 118.793 217.232 119.155 217.271 cv
119.155 217.456 li
116.805 217.456 li
116.805 217.271 li
cp
0 0 0 1 cmyk
f
127.137 212.958 mo
127.137 216.066 li
127.137 216.287 127.167 216.463 127.229 216.596 cv
127.35 216.842 127.571 216.965 127.894 216.965 cv
128.115 216.965 128.331 216.892 128.543 216.747 cv
128.664 216.666 128.786 216.553 128.909 216.411 cv
128.909 213.75 li
128.909 213.5 128.86 213.336 128.763 213.258 cv
128.665 213.18 128.47 213.133 128.177 213.118 cv
128.177 212.958 li
129.755 212.958 li
129.755 216.377 li
129.755 216.597 129.795 216.749 129.874 216.832 cv
129.954 216.914 130.123 216.951 130.38 216.941 cv
130.38 217.077 li
130.201 217.125 130.069 217.162 129.984 217.186 cv
129.899 217.21 129.758 217.254 129.56 217.32 cv
129.475 217.349 129.289 217.418 129.002 217.529 cv
128.986 217.529 128.977 217.521 128.973 217.506 cv
128.97 217.492 128.968 217.475 128.968 217.456 cv
128.968 216.673 li
128.747 216.936 128.545 217.13 128.362 217.256 cv
128.086 217.451 127.793 217.548 127.483 217.548 cv
127.2 217.548 126.933 217.448 126.682 217.247 cv
126.428 217.048 126.301 216.716 126.301 216.25 cv
126.301 213.725 li
126.301 213.467 126.246 213.295 126.135 213.208 cv
126.063 213.155 125.91 213.116 125.676 213.093 cv
125.676 212.958 li
127.137 212.958 li
cp
f
132.242 213.443 mo
131.916 213.738 131.752 214.247 131.752 214.968 cv
131.752 215.544 131.884 216.083 132.146 216.582 cv
132.409 217.08 132.773 217.33 133.24 217.33 cv
133.605 217.33 133.887 217.163 134.084 216.829 cv
134.282 216.496 134.381 216.058 134.381 215.517 cv
134.381 214.958 134.255 214.429 134.004 213.934 cv
133.752 213.438 133.389 213.19 132.912 213.19 cv
132.654 213.19 132.431 213.275 132.242 213.443 cv
cp
131.462 213.567 mo
131.874 213.122 132.403 212.899 133.052 212.899 cv
133.696 212.899 134.23 213.11 134.654 213.531 cv
135.077 213.952 135.289 214.511 135.289 215.211 cv
135.289 215.856 135.084 216.416 134.674 216.892 cv
134.264 217.368 133.732 217.606 133.081 217.606 cv
132.456 217.606 131.927 217.377 131.493 216.921 cv
131.061 216.464 130.844 215.891 130.844 215.202 cv
130.844 214.557 131.05 214.012 131.462 213.567 cv
cp
f
135.773 217.32 mo
136.005 217.291 136.167 217.233 136.26 217.147 cv
136.353 217.061 136.398 216.87 136.398 216.572 cv
136.398 214.104 li
136.398 213.898 136.379 213.753 136.34 213.67 cv
136.278 213.547 136.151 213.487 135.959 213.487 cv
135.93 213.487 135.899 213.489 135.869 213.492 cv
135.838 213.495 135.8 213.5 135.754 213.506 cv
135.754 213.336 li
135.888 213.297 136.203 213.197 136.701 213.035 cv
137.161 212.884 li
137.184 212.884 137.197 212.892 137.202 212.909 cv
137.207 212.925 137.21 212.948 137.21 212.977 cv
137.21 213.691 li
137.509 213.413 137.743 213.221 137.912 213.118 cv
138.165 212.958 138.429 212.879 138.702 212.879 cv
138.923 212.879 139.124 212.943 139.307 213.069 cv
139.657 213.315 139.833 213.753 139.833 214.385 cv
139.833 216.654 li
139.833 216.887 139.88 217.055 139.974 217.16 cv
140.067 217.263 140.224 217.316 140.443 217.32 cv
140.443 217.456 li
138.357 217.456 li
138.357 217.32 li
138.596 217.288 138.762 217.221 138.855 217.123 cv
138.95 217.024 138.997 216.809 138.997 216.479 cv
138.997 214.405 li
138.997 214.126 138.945 213.896 138.842 213.712 cv
138.738 213.53 138.547 213.438 138.269 213.438 cv
138.078 213.438 137.884 213.503 137.686 213.632 cv
137.576 213.707 137.434 213.83 137.259 214.001 cv
137.259 216.722 li
137.259 216.956 137.311 217.112 137.415 217.191 cv
137.519 217.27 137.684 217.313 137.908 217.32 cv
137.908 217.456 li
135.773 217.456 li
135.773 217.32 li
cp
f
144.253 213.745 mo
144.149 213.919 144.074 214.139 144.028 214.405 cv
146.09 214.405 li
146.055 214.081 145.992 213.839 145.904 213.681 cv
145.745 213.396 145.478 213.253 145.104 213.253 cv
144.732 213.253 144.449 213.417 144.253 213.745 cv
cp
146.593 213.373 mo
146.938 213.688 147.111 214.136 147.111 214.715 cv
144.009 214.715 li
144.042 215.465 144.213 216.011 144.522 216.354 cv
144.831 216.697 145.198 216.868 145.621 216.868 cv
145.963 216.868 146.251 216.779 146.485 216.601 cv
146.721 216.423 146.937 216.171 147.136 215.845 cv
147.307 215.903 li
147.173 216.315 146.923 216.697 146.557 217.046 cv
146.19 217.397 145.741 217.572 145.211 217.572 cv
144.599 217.572 144.126 217.342 143.792 216.882 cv
143.458 216.422 143.291 215.893 143.291 215.293 cv
143.291 214.643 143.484 214.081 143.872 213.608 cv
144.26 213.135 144.765 212.899 145.387 212.899 cv
145.846 212.899 146.248 213.057 146.593 213.373 cv
cp
f
147.717 217.32 mo
147.948 217.291 148.11 217.233 148.203 217.147 cv
148.296 217.061 148.342 216.87 148.342 216.572 cv
148.342 214.104 li
148.342 213.898 148.322 213.753 148.283 213.67 cv
148.222 213.547 148.095 213.487 147.902 213.487 cv
147.873 213.487 147.843 213.489 147.813 213.492 cv
147.781 213.495 147.743 213.5 147.697 213.506 cv
147.697 213.336 li
147.831 213.297 148.146 213.197 148.645 213.035 cv
149.104 212.884 li
149.127 212.884 149.141 212.892 149.146 212.909 cv
149.15 212.925 149.153 212.948 149.153 212.977 cv
149.153 213.691 li
149.452 213.413 149.687 213.221 149.855 213.118 cv
150.108 212.958 150.372 212.879 150.646 212.879 cv
150.866 212.879 151.067 212.943 151.25 213.069 cv
151.601 213.315 151.776 213.753 151.776 214.385 cv
151.776 216.654 li
151.776 216.887 151.823 217.055 151.917 217.16 cv
152.011 217.263 152.167 217.316 152.387 217.32 cv
152.387 217.456 li
150.301 217.456 li
150.301 217.32 li
150.539 217.288 150.705 217.221 150.799 217.123 cv
150.894 217.024 150.94 216.809 150.94 216.479 cv
150.94 214.405 li
150.94 214.126 150.889 213.896 150.785 213.712 cv
150.682 213.53 150.49 213.438 150.212 213.438 cv
150.021 213.438 149.827 213.503 149.629 213.632 cv
149.52 213.707 149.377 213.83 149.202 214.001 cv
149.202 216.722 li
149.202 216.956 149.254 217.112 149.358 217.191 cv
149.462 217.27 149.627 217.313 149.852 217.32 cv
149.852 217.456 li
147.717 217.456 li
147.717 217.32 li
cp
f
153.695 213.745 mo
153.592 213.919 153.517 214.139 153.471 214.405 cv
155.532 214.405 li
155.497 214.081 155.435 213.839 155.347 213.681 cv
155.188 213.396 154.92 213.253 154.546 213.253 cv
154.175 213.253 153.892 213.417 153.695 213.745 cv
cp
156.035 213.373 mo
156.381 213.688 156.554 214.136 156.554 214.715 cv
153.451 214.715 li
153.484 215.465 153.655 216.011 153.965 216.354 cv
154.273 216.697 154.641 216.868 155.063 216.868 cv
155.405 216.868 155.693 216.779 155.928 216.601 cv
156.163 216.423 156.379 216.171 156.578 215.845 cv
156.749 215.903 li
156.615 216.315 156.365 216.697 155.999 217.046 cv
155.633 217.397 155.184 217.572 154.653 217.572 cv
154.041 217.572 153.568 217.342 153.234 216.882 cv
152.9 216.422 152.733 215.893 152.733 215.293 cv
152.733 214.643 152.927 214.081 153.314 213.608 cv
153.702 213.135 154.207 212.899 154.829 212.899 cv
155.288 212.899 155.69 213.057 156.035 213.373 cv
cp
f
157.022 217.295 mo
157.322 217.269 157.521 217.216 157.618 217.137 cv
157.716 217.058 157.765 216.889 157.765 216.629 cv
157.765 214.439 li
157.765 214.119 157.734 213.889 157.675 213.751 cv
157.614 213.614 157.505 213.545 157.345 213.545 cv
157.313 213.545 157.27 213.549 157.216 213.557 cv
157.162 213.565 157.105 213.576 157.047 213.588 cv
157.047 213.428 li
157.231 213.364 157.422 213.297 157.616 213.229 cv
157.812 213.162 157.946 213.113 158.021 213.083 cv
158.183 213.022 158.351 212.953 158.522 212.875 cv
158.545 212.875 158.559 212.882 158.563 212.899 cv
158.568 212.916 158.571 212.949 158.571 213 cv
158.571 213.797 li
158.78 213.509 158.981 213.285 159.176 213.123 cv
159.37 212.96 159.572 212.879 159.781 212.879 cv
159.947 212.879 160.083 212.929 160.188 213.028 cv
160.292 213.126 160.344 213.25 160.344 213.399 cv
160.344 213.532 160.305 213.644 160.225 213.735 cv
160.145 213.825 160.045 213.871 159.924 213.871 cv
159.8 213.871 159.676 213.814 159.551 213.701 cv
159.425 213.587 159.326 213.531 159.255 213.531 cv
159.141 213.531 159.001 213.622 158.835 213.805 cv
158.669 213.988 158.586 214.176 158.586 214.371 cv
158.586 216.562 li
158.586 216.84 158.65 217.034 158.781 217.142 cv
158.911 217.25 159.128 217.302 159.431 217.295 cv
159.431 217.456 li
157.022 217.456 li
157.022 217.295 li
cp
f
163.304 215.581 mo
163.499 215.425 163.597 215.155 163.597 214.769 cv
163.597 214.461 163.519 214.115 163.36 213.73 cv
163.202 213.344 162.939 213.152 162.571 213.152 cv
162.252 213.152 162.032 213.302 161.912 213.603 cv
161.85 213.762 161.819 213.958 161.819 214.191 cv
161.819 214.586 161.915 214.941 162.107 215.255 cv
162.299 215.569 162.549 215.726 162.854 215.726 cv
163.033 215.726 163.184 215.677 163.304 215.581 cv
cp
161.753 218.917 mo
162.061 219.021 162.413 219.073 162.811 219.073 cv
163.352 219.073 163.791 218.98 164.13 218.793 cv
164.468 218.608 164.638 218.378 164.638 218.107 cv
164.638 217.889 164.5 217.746 164.227 217.674 cv
164.057 217.632 163.735 217.608 163.262 217.601 cv
163.142 217.598 163.014 217.594 162.88 217.589 cv
162.746 217.584 162.624 217.579 162.514 217.572 cv
162.441 217.569 162.325 217.556 162.166 217.534 cv
162.006 217.51 161.887 217.491 161.809 217.475 cv
161.77 217.475 161.674 217.577 161.523 217.781 cv
161.368 217.988 161.291 218.179 161.291 218.354 cv
161.291 218.626 161.445 218.814 161.753 218.917 cv
cp
161.235 215.303 mo
161.07 215.054 160.988 214.774 160.988 214.463 cv
160.988 214.084 161.14 213.725 161.442 213.384 cv
161.746 213.044 162.174 212.875 162.728 212.875 cv
162.965 212.875 163.228 212.93 163.514 213.042 cv
163.801 213.154 164.076 213.209 164.34 213.209 cv
164.408 213.209 164.512 213.208 164.649 213.203 cv
164.788 213.198 164.889 213.195 164.95 213.195 cv
165.009 213.195 li
165.009 213.588 li
164.164 213.588 li
164.223 213.725 164.268 213.843 164.301 213.943 cv
164.355 214.131 164.384 214.309 164.384 214.478 cv
164.384 214.847 164.229 215.186 163.922 215.496 cv
163.614 215.805 163.2 215.959 162.679 215.959 cv
162.598 215.959 162.451 215.945 162.239 215.916 cv
162.145 215.916 162.02 215.995 161.863 216.154 cv
161.707 216.312 161.629 216.442 161.629 216.542 cv
161.629 216.646 161.742 216.722 161.971 216.771 cv
162.121 216.803 162.287 216.819 162.47 216.819 cv
163.309 216.819 163.877 216.866 164.178 216.96 cv
164.67 217.113 164.916 217.439 164.916 217.941 cv
164.916 218.453 164.629 218.861 164.054 219.166 cv
163.479 219.47 162.898 219.623 162.313 219.623 cv
161.778 219.623 161.354 219.514 161.042 219.299 cv
160.729 219.083 160.573 218.858 160.573 218.622 cv
160.573 218.504 160.614 218.391 160.697 218.279 cv
160.78 218.167 160.943 218.001 161.187 217.781 cv
161.508 217.495 li
161.565 217.436 li
161.417 217.377 161.306 217.321 161.231 217.266 cv
161.103 217.166 161.037 217.05 161.037 216.921 cv
161.037 216.801 161.094 216.669 161.206 216.525 cv
161.318 216.381 161.559 216.147 161.927 215.824 cv
161.63 215.726 161.399 215.553 161.235 215.303 cv
cp
f
165.448 212.991 mo
167.51 212.991 li
167.51 213.127 li
167.347 213.13 167.227 213.145 167.148 213.172 cv
166.998 213.215 166.924 213.299 166.924 213.425 cv
166.924 213.472 166.932 213.519 166.948 213.567 cv
166.964 213.615 166.993 213.687 167.036 213.783 cv
168.166 216.214 li
169.098 213.763 li
169.107 213.737 169.122 213.677 169.144 213.584 cv
169.165 213.492 169.176 213.429 169.176 213.396 cv
169.176 213.309 169.146 213.247 169.088 213.207 cv
169.029 213.167 168.954 213.144 168.863 213.137 cv
168.711 213.127 li
168.711 212.991 li
170.055 212.991 li
170.055 213.127 li
169.921 213.144 169.821 213.191 169.754 213.268 cv
169.688 213.344 169.63 213.452 169.581 213.588 cv
168.042 217.64 li
167.775 218.339 167.52 218.846 167.275 219.161 cv
167.031 219.475 166.722 219.632 166.347 219.632 cv
166.165 219.632 165.994 219.586 165.834 219.496 cv
165.675 219.405 165.595 219.261 165.595 219.064 cv
165.595 218.934 165.643 218.828 165.737 218.746 cv
165.832 218.663 165.952 218.622 166.097 218.622 cv
166.181 218.622 166.305 218.652 166.471 218.713 cv
166.636 218.775 166.754 218.806 166.825 218.806 cv
167.005 218.806 167.195 218.586 167.395 218.146 cv
167.594 217.707 167.693 217.417 167.693 217.276 cv
167.693 217.247 167.689 217.211 167.68 217.169 cv
167.67 217.128 167.659 217.091 167.647 217.059 cv
166.107 213.75 li
165.997 213.509 165.9 213.351 165.817 213.275 cv
165.734 213.2 165.611 213.15 165.448 213.127 cv
165.448 212.991 li
cp
f
174.29 211.991 mo
174.706 211.469 175.198 211.049 175.765 210.732 cv
175.857 210.893 li
175.333 211.307 174.959 211.71 174.734 212.102 cv
174.34 212.786 174.144 213.696 174.144 214.833 cv
174.144 215.674 174.218 216.369 174.368 216.917 cv
174.632 217.875 175.128 218.592 175.857 219.069 cv
175.73 219.229 li
175.33 219.038 174.897 218.664 174.432 218.107 cv
173.659 217.183 173.273 216.134 173.273 214.958 cv
173.273 213.832 173.612 212.842 174.29 211.991 cv
cp
f
180.992 210.917 mo
181.367 211.024 181.582 211.078 181.637 211.078 cv
181.78 211.078 181.882 211.049 181.942 210.995 cv
182.003 210.94 182.054 210.86 182.097 210.756 cv
182.316 210.756 li
182.395 212.85 li
182.165 212.85 li
181.959 212.368 181.748 212.008 181.529 211.772 cv
181.136 211.357 180.623 211.15 179.991 211.15 cv
179.35 211.15 178.785 211.392 178.298 211.876 cv
177.812 212.361 177.568 213.158 177.568 214.269 cv
177.568 215.185 177.811 215.901 178.296 216.416 cv
178.781 216.931 179.38 217.188 180.094 217.188 cv
180.214 217.188 180.355 217.177 180.519 217.155 cv
180.682 217.132 180.836 217.096 180.982 217.047 cv
181.22 216.97 181.368 216.903 181.427 216.847 cv
181.485 216.791 181.515 216.707 181.515 216.597 cv
181.515 215.012 li
181.515 214.627 181.46 214.388 181.352 214.294 cv
181.242 214.2 181.004 214.141 180.636 214.119 cv
180.636 213.934 li
183.186 213.934 li
183.186 214.119 li
182.938 214.134 182.773 214.175 182.692 214.24 cv
182.556 214.343 182.487 214.557 182.487 214.881 cv
182.487 216.838 li
182.487 216.956 182.199 217.111 181.625 217.305 cv
181.05 217.5 180.497 217.596 179.967 217.596 cv
178.989 217.596 178.166 217.313 177.495 216.747 cv
176.756 216.122 176.386 215.283 176.386 214.23 cv
176.386 213.304 176.681 212.51 177.27 211.85 cv
177.918 211.121 178.777 210.756 179.85 210.756 cv
180.236 210.756 180.618 210.81 180.992 210.917 cv
cp
f
184.528 213.745 mo
184.425 213.919 184.35 214.139 184.304 214.405 cv
186.365 214.405 li
186.33 214.081 186.268 213.839 186.18 213.681 cv
186.021 213.396 185.753 213.253 185.379 213.253 cv
185.008 213.253 184.725 213.417 184.528 213.745 cv
cp
186.868 213.373 mo
187.214 213.688 187.387 214.136 187.387 214.715 cv
184.284 214.715 li
184.317 215.465 184.488 216.011 184.798 216.354 cv
185.106 216.697 185.474 216.868 185.896 216.868 cv
186.238 216.868 186.526 216.779 186.761 216.601 cv
186.996 216.423 187.212 216.171 187.411 215.845 cv
187.582 215.903 li
187.448 216.315 187.198 216.697 186.832 217.046 cv
186.466 217.397 186.017 217.572 185.486 217.572 cv
184.874 217.572 184.401 217.342 184.067 216.882 cv
183.733 216.422 183.566 215.893 183.566 215.293 cv
183.566 214.643 183.76 214.081 184.147 213.608 cv
184.535 213.135 185.04 212.899 185.662 212.899 cv
186.121 212.899 186.523 213.057 186.868 213.373 cv
cp
f
190.635 210.874 mo
190.635 211.043 li
190.385 211.046 190.214 211.063 190.123 211.092 cv
189.964 211.145 189.884 211.252 189.884 211.414 cv
189.884 211.496 189.912 211.611 189.97 211.758 cv
190.026 211.907 190.133 212.153 190.288 212.496 cv
191.854 215.959 li
193.275 212.21 li
193.338 212.044 193.386 211.904 193.418 211.789 cv
193.451 211.673 193.467 211.58 193.467 211.507 cv
193.467 211.313 193.384 211.181 193.218 211.112 cv
193.121 211.073 192.96 211.05 192.735 211.043 cv
192.735 210.874 li
194.782 210.874 li
194.782 211.043 li
194.57 211.073 194.414 211.129 194.313 211.213 cv
194.16 211.339 194.009 211.594 193.858 211.976 cv
191.644 217.572 li
191.492 217.572 li
189.021 212.104 li
188.812 211.64 188.645 211.351 188.52 211.238 cv
188.394 211.125 188.211 211.059 187.97 211.043 cv
187.97 210.874 li
190.635 210.874 li
cp
f
197.693 216.377 mo
197.566 216.808 197.381 217.214 197.137 217.596 cv
196.879 218.004 196.536 218.385 196.105 218.738 cv
195.822 218.971 195.585 219.134 195.393 219.229 cv
195.3 219.069 li
195.802 218.69 196.168 218.302 196.399 217.908 cv
196.81 217.208 197.015 216.284 197.015 215.133 cv
197.015 214.204 196.92 213.445 196.731 212.855 cv
196.468 212.023 195.99 211.369 195.3 210.893 cv
195.427 210.732 li
195.941 211.017 196.42 211.448 196.863 212.025 cv
197.544 212.912 197.884 213.906 197.884 215.007 cv
197.884 215.49 197.82 215.947 197.693 216.377 cv
cp
f
7.77197 145.758 mo
7.91943 145.667 7.99365 145.514 7.99365 145.296 cv
7.99365 144.833 7.61963 144.387 6.87158 143.959 cv
6.16846 143.547 5.50342 143.341 4.87646 143.341 cv
4.67725 143.341 4.51318 143.374 4.3833 143.439 cv
4.25342 143.504 4.18799 143.636 4.18799 143.835 cv
4.18799 144.331 4.58838 144.81 5.38818 145.274 cv
6.104 145.688 6.7251 145.895 7.25146 145.895 cv
7.45068 145.895 7.62354 145.849 7.77197 145.758 cv
cp
4.14404 143.338 mo
4.21533 143.276 4.3374 143.227 4.51025 143.192 cv
2.50732 142.622 li
2.45264 142.605 2.40283 142.594 2.35889 142.589 cv
2.31494 142.584 2.27686 142.583 2.24365 142.583 cv
2.1167 142.583 2.0376 142.606 2.00439 142.653 cv
1.97217 142.7 1.95557 142.766 1.95557 142.854 cv
1.95557 142.909 1.95752 142.96 1.96045 143.007 cv
1.96436 143.054 1.96924 143.116 1.9751 143.194 cv
1.81396 143.194 li
1.76514 142.827 1.68018 142.317 1.56006 141.667 cv
1.60889 141.623 li
1.6626 141.632 li
5.17334 142.59 li
7.49561 143.244 li
7.54834 143.256 7.59717 143.267 7.64111 143.276 cv
7.68604 143.284 7.72607 143.288 7.76221 143.288 cv
7.85107 143.288 7.90869 143.266 7.93408 143.222 cv
7.96045 143.178 7.97412 143.14 7.97412 143.108 cv
7.97412 143.012 7.89014 142.878 7.72314 142.705 cv
7.62158 142.603 7.46436 142.463 7.25146 142.288 cv
7.35889 142.175 li
7.4624 142.244 li
7.64209 142.364 7.82471 142.519 8.01123 142.708 cv
8.34131 143.043 8.50635 143.346 8.50635 143.613 cv
8.50635 143.701 8.48682 143.781 8.44775 143.852 cv
8.36963 143.986 8.22998 144.053 8.02783 144.053 cv
7.95947 144.053 7.8501 144.043 7.70068 144.024 cv
7.55127 144.004 7.38623 143.975 7.2085 143.934 cv
7.58545 144.18 7.89502 144.451 8.13525 144.745 cv
8.37646 145.038 8.49658 145.358 8.49658 145.704 cv
8.49658 145.987 8.396 146.233 8.19385 146.443 cv
7.99268 146.654 7.68213 146.759 7.26221 146.759 cv
6.55322 146.759 5.82471 146.433 5.07568 145.782 cv
4.33154 145.133 3.9585 144.501 3.9585 143.885 cv
3.9585 143.628 4.02002 143.446 4.14404 143.338 cv
cp
f
8.22803 141.955 mo
8.2085 141.721 8.1665 141.561 8.10107 141.473 cv
8.00342 141.338 7.79932 141.226 7.49072 141.139 cv
3.06494 139.919 li
2.91846 139.881 2.79639 139.851 2.70068 139.83 cv
2.60498 139.809 2.52197 139.798 2.45361 139.798 cv
2.29736 139.798 2.18896 139.858 2.12646 139.975 cv
2.06494 140.094 2.03076 140.293 2.02393 140.576 cv
1.86279 140.576 li
1.86279 135.625 li
3.38721 135.936 li
3.37256 136.139 li
3.2749 136.129 3.18115 136.124 3.09131 136.12 cv
3.00244 136.118 2.96826 136.116 2.9917 136.116 cv
2.6626 136.109 2.44678 136.225 2.34424 136.463 cv
2.2417 136.702 2.18994 137.191 2.18994 137.932 cv
2.18994 138.273 2.20654 138.487 2.23779 138.575 cv
2.27002 138.662 2.34033 138.721 2.44873 138.754 cv
4.77881 139.401 li
4.74951 138.526 4.69482 138 4.61279 137.823 cv
4.53174 137.645 4.26318 137.458 3.80713 137.256 cv
3.85107 137.073 li
6.1665 137.752 li
6.12256 137.947 li
5.92725 137.915 5.80811 137.895 5.76611 137.889 cv
5.72412 137.881 5.67627 137.879 5.62451 137.879 cv
5.4126 137.879 5.2749 137.954 5.21143 138.104 cv
5.14795 138.254 5.1167 138.529 5.1167 138.928 cv
5.1167 139.495 li
7.34814 140.114 li
7.41748 140.133 7.48096 140.149 7.53955 140.16 cv
7.59814 140.17 7.65771 140.176 7.72021 140.176 cv
7.82373 140.176 7.90283 140.149 7.95459 140.094 cv
8.04541 139.994 8.09131 139.796 8.09131 139.501 cv
8.09131 138.611 7.99561 137.973 7.80322 137.59 cv
7.61084 137.206 7.23975 136.823 6.68896 136.441 cv
6.77197 136.28 li
8.38916 136.903 li
8.38916 141.955 li
8.22803 141.955 li
cp
f
1.81396 133.417 mo
1.81396 132.931 li
8.55518 135.438 li
8.55518 135.923 li
1.81396 133.417 li
cp
f
7.77197 131.943 mo
7.91943 131.852 7.99365 131.698 7.99365 131.481 cv
7.99365 131.018 7.61963 130.572 6.87158 130.144 cv
6.16846 129.732 5.50342 129.526 4.87646 129.526 cv
4.67725 129.526 4.51318 129.559 4.3833 129.624 cv
4.25342 129.689 4.18799 129.821 4.18799 130.02 cv
4.18799 130.516 4.58838 130.995 5.38818 131.458 cv
6.104 131.872 6.7251 132.079 7.25146 132.079 cv
7.45068 132.079 7.62354 132.034 7.77197 131.943 cv
cp
4.14404 129.523 mo
4.21533 129.461 4.3374 129.413 4.51025 129.376 cv
2.50732 128.805 li
2.45264 128.79 2.40283 128.779 2.35889 128.774 cv
2.31494 128.769 2.27686 128.766 2.24365 128.766 cv
2.1167 128.766 2.0376 128.79 2.00439 128.836 cv
1.97217 128.884 1.95557 128.952 1.95557 129.039 cv
1.95557 129.094 1.95752 129.145 1.96045 129.192 cv
1.96436 129.239 1.96924 129.301 1.9751 129.379 cv
1.81396 129.379 li
1.76514 129.011 1.68018 128.502 1.56006 127.851 cv
1.60889 127.807 li
1.6626 127.817 li
5.17334 128.776 li
7.49561 129.428 li
7.54834 129.442 7.59717 129.452 7.64111 129.459 cv
7.68604 129.467 7.72607 129.472 7.76221 129.472 cv
7.85107 129.472 7.90869 129.45 7.93408 129.407 cv
7.96045 129.363 7.97412 129.325 7.97412 129.292 cv
7.97412 129.198 7.89014 129.063 7.72314 128.889 cv
7.62158 128.788 7.46436 128.649 7.25146 128.471 cv
7.35889 128.36 li
7.4624 128.428 li
7.64209 128.549 7.82471 128.704 8.01123 128.893 cv
8.34131 129.229 8.50635 129.53 8.50635 129.797 cv
8.50635 129.885 8.48682 129.965 8.44775 130.038 cv
8.36963 130.17 8.22998 130.237 8.02783 130.237 cv
7.95947 130.237 7.8501 130.227 7.70068 130.208 cv
7.55127 130.188 7.38623 130.159 7.2085 130.12 cv
7.58545 130.366 7.89502 130.635 8.13525 130.928 cv
8.37646 131.221 8.49658 131.542 8.49658 131.889 cv
8.49658 132.17 8.396 132.417 8.19385 132.627 cv
7.99268 132.838 7.68213 132.944 7.26221 132.944 cv
6.55322 132.944 5.82471 132.618 5.07568 131.966 cv
4.33154 131.318 3.9585 130.686 3.9585 130.071 cv
3.9585 129.813 4.02002 129.63 4.14404 129.523 cv
cp
f
7.78564 128.275 mo
7.73193 128.198 7.70557 128.118 7.70557 128.038 cv
7.70557 127.999 7.71143 127.959 7.72217 127.92 cv
7.73389 127.881 7.75244 127.839 7.77881 127.793 cv
7.87158 127.624 li
7.88428 127.602 7.89307 127.58 7.89795 127.559 cv
7.90283 127.538 7.90576 127.514 7.90576 127.489 cv
7.90576 127.407 7.88525 127.344 7.84424 127.301 cv
7.8042 127.257 7.66162 127.145 7.41748 126.963 cv
7.25732 126.844 6.86865 126.572 6.24951 126.147 cv
6.22705 126.147 6.05127 126.184 5.72412 126.259 cv
5.39697 126.333 5.11963 126.401 4.89111 126.463 cv
4.66064 126.524 4.5083 126.58 4.43506 126.628 cv
4.36182 126.676 4.32471 126.768 4.32471 126.901 cv
4.32471 126.946 4.34131 127.035 4.37354 127.167 cv
4.39307 127.252 4.4165 127.342 4.44189 127.44 cv
4.29053 127.483 li
4.10498 126.944 li
4.05615 126.805 4.01709 126.676 3.98779 126.557 cv
3.9585 126.44 3.94385 126.338 3.94385 126.254 cv
3.94385 126.118 3.98486 126.016 4.06592 125.948 cv
4.19678 125.844 4.45361 125.757 4.8374 125.686 cv
5.39502 125.584 li
4.9458 125.292 4.62939 125.066 4.44678 124.904 cv
4.28076 124.758 4.15771 124.621 4.07568 124.491 cv
3.99463 124.362 3.95361 124.239 3.95361 124.122 cv
3.95361 124.012 3.97021 123.922 4.00244 123.854 cv
4.06104 123.731 4.17236 123.67 4.33447 123.67 cv
4.4458 123.67 4.53174 123.701 4.59326 123.762 cv
4.65576 123.824 4.68604 123.903 4.68604 124 cv
4.68604 124.036 4.68213 124.07 4.67432 124.102 cv
4.6665 124.135 4.65381 124.168 4.63721 124.204 cv
4.5835 124.331 li
4.56787 124.366 4.5542 124.401 4.54248 124.432 cv
4.53076 124.465 4.5249 124.489 4.5249 124.505 cv
4.5249 124.651 4.71533 124.854 5.09424 125.112 cv
5.47412 125.372 5.69287 125.5 5.75146 125.5 cv
5.80029 125.5 5.9585 125.471 6.22803 125.411 cv
6.49658 125.352 6.78076 125.286 7.07959 125.214 cv
7.36377 125.15 7.55908 125.094 7.6665 125.049 cv
7.84229 124.975 7.93018 124.891 7.93018 124.797 cv
7.93018 124.709 7.88135 124.621 7.78369 124.53 cv
7.68604 124.439 7.51025 124.303 7.25635 124.122 cv
7.33936 123.985 li
7.59326 124.125 7.80908 124.269 7.98877 124.418 cv
8.32764 124.7 8.49658 124.969 8.49658 125.224 cv
8.49658 125.386 8.41846 125.514 8.26221 125.608 cv
8.17139 125.663 8.021 125.717 7.81299 125.768 cv
6.60596 126.07 li
7.92041 127.065 li
8.14795 127.26 8.30127 127.41 8.37939 127.514 cv
8.45752 127.62 8.49658 127.75 8.49658 127.906 cv
8.49658 128.114 8.43115 128.254 8.30127 128.329 cv
8.23291 128.371 8.15186 128.391 8.05713 128.391 cv
7.93018 128.391 7.83936 128.352 7.78564 128.275 cv
cp
f
2.89355 116.616 mo
2.36914 116.202 1.94727 115.712 1.62793 115.149 cv
1.78906 115.057 li
2.20605 115.579 2.61133 115.95 3.00586 116.174 cv
3.69238 116.566 4.60742 116.762 5.75098 116.762 cv
6.59766 116.762 7.2959 116.687 7.84668 116.538 cv
8.81055 116.276 9.53125 115.782 10.0107 115.057 cv
10.1719 115.183 li
9.97949 115.581 9.60352 116.012 9.04297 116.475 cv
8.11523 117.243 7.05957 117.626 5.87793 117.626 cv
4.74414 117.626 3.75 117.29 2.89355 116.616 cv
cp
f
8.20313 113.922 mo
8.16113 113.51 8.06738 113.247 7.92285 113.13 cv
7.77734 113.014 7.44141 112.956 6.91406 112.956 cv
2.85352 112.956 li
2.49219 112.956 2.25684 113.012 2.14844 113.125 cv
2.03906 113.239 1.97461 113.497 1.95508 113.897 cv
1.76953 113.897 li
1.76953 111.936 li
6.75293 109.651 li
1.76953 107.422 li
1.76953 105.445 li
1.95508 105.445 li
1.98145 105.815 2.04883 106.052 2.1582 106.159 cv
2.2666 106.266 2.49902 106.319 2.85352 106.319 cv
7.2998 106.319 li
7.66504 106.319 7.89844 106.266 8.00098 106.159 cv
8.10352 106.052 8.1709 105.815 8.20313 105.445 cv
8.38867 105.445 li
8.38867 108.229 li
8.20313 108.229 li
8.1709 107.827 8.09766 107.577 7.98535 107.478 cv
7.87402 107.379 7.60547 107.331 7.18262 107.331 cv
2.69238 107.331 li
8.38867 109.877 li
8.38867 110.014 li
2.92676 112.518 li
6.91406 112.518 li
7.46094 112.518 7.81738 112.439 7.9834 112.28 cv
8.09082 112.176 8.16406 111.945 8.20313 111.585 cv
8.38867 111.585 li
8.38867 113.922 li
8.20313 113.922 li
cp
f
4.65625 104.036 mo
4.83203 104.139 5.05371 104.214 5.32129 104.26 cv
5.32129 102.209 li
4.99512 102.245 4.75293 102.307 4.59277 102.394 cv
4.30664 102.553 4.16309 102.819 4.16309 103.191 cv
4.16309 103.56 4.32813 103.842 4.65625 104.036 cv
cp
4.2832 101.709 mo
4.60059 101.366 5.05078 101.194 5.63379 101.194 cv
5.63379 104.28 li
6.3877 104.247 6.93652 104.077 7.28125 103.769 cv
7.625 103.461 7.79785 103.097 7.79785 102.676 cv
7.79785 102.336 7.70801 102.049 7.5293 101.816 cv
7.35059 101.583 7.09766 101.368 6.76953 101.17 cv
6.82813 101 li
7.24219 101.133 7.625 101.381 7.97754 101.746 cv
8.33008 102.11 8.50586 102.556 8.50586 103.084 cv
8.50586 103.693 8.27441 104.164 7.8125 104.495 cv
7.34961 104.827 6.81738 104.993 6.21484 104.993 cv
5.56055 104.993 4.99512 104.801 4.51953 104.415 cv
4.04395 104.03 3.80664 103.528 3.80664 102.909 cv
3.80664 102.453 3.96582 102.053 4.2832 101.709 cv
cp
f
1.76953 97.9634 mo
1.94043 97.9634 li
1.94434 98.2124 1.96094 98.3823 1.99023 98.4731 cv
2.04297 98.6313 2.15039 98.7104 2.3125 98.7104 cv
2.39551 98.7104 2.51172 98.6821 2.66016 98.6255 cv
2.80859 98.5688 3.05566 98.4634 3.40137 98.3091 cv
6.88379 96.7515 li
3.11426 95.3384 li
2.94727 95.2759 2.80566 95.228 2.69043 95.1958 cv
2.57422 95.1636 2.48047 95.147 2.40723 95.147 cv
2.21191 95.147 2.08008 95.23 2.00977 95.395 cv
1.9707 95.4917 1.94727 95.6519 1.94043 95.8755 cv
1.76953 95.8755 li
1.76953 93.8403 li
1.94043 93.8403 li
1.96973 94.0503 2.02734 94.2056 2.11133 94.3062 cv
2.23828 94.4585 2.49414 94.6089 2.87891 94.7583 cv
8.50586 96.9614 li
8.50586 97.1108 li
3.00684 99.5688 li
2.54102 99.7769 2.25098 99.9429 2.13672 100.067 cv
2.02246 100.192 1.95703 100.375 1.94043 100.614 cv
1.76953 100.614 li
1.76953 97.9634 li
cp
f
10.0063 89.8462 mo
10.1216 89.5103 10.1782 89.1245 10.1782 88.6899 cv
10.1782 88.0981 10.0757 87.6177 9.86963 87.2466 cv
9.66357 86.8765 9.40967 86.6919 9.10889 86.6919 cv
8.86963 86.6919 8.70947 86.8413 8.63135 87.1411 cv
8.58447 87.3267 8.55713 87.6782 8.55029 88.1958 cv
8.54639 88.3286 8.54248 88.4673 8.53662 88.6138 cv
8.53174 88.7603 8.5249 88.894 8.51807 89.0151 cv
8.51416 89.0942 8.50049 89.2202 8.4751 89.395 cv
8.44971 89.5708 8.42822 89.7007 8.41064 89.7856 cv
8.41064 89.8286 8.52393 89.9331 8.74951 90.0981 cv
8.97803 90.2671 9.18994 90.3521 9.3833 90.3521 cv
9.68408 90.3521 9.89209 90.1841 10.0063 89.8462 cv
cp
6.31494 88.1499 mo
6.14307 87.936 5.84424 87.8296 5.41748 87.8296 cv
5.07764 87.8296 4.69385 87.9165 4.26807 88.0884 cv
3.84131 88.2622 3.62842 88.5493 3.62842 88.9517 cv
3.62842 89.3013 3.79541 89.5415 4.12842 89.6724 cv
4.30322 89.7407 4.52002 89.7739 4.77783 89.7739 cv
5.21533 89.7739 5.60791 89.6694 5.95459 89.4595 cv
6.30225 89.2485 6.47607 88.9771 6.47607 88.6411 cv
6.47607 88.4458 6.42236 88.2817 6.31494 88.1499 cv
cp
6.0083 90.4126 mo
5.73291 90.5933 5.42334 90.6831 5.07959 90.6831 cv
4.65967 90.6831 4.26221 90.5181 3.88623 90.186 cv
3.51025 89.855 3.32178 89.3862 3.32178 88.7808 cv
3.32178 88.52 3.38428 88.2339 3.50732 87.9204 cv
3.63135 87.6069 3.69287 87.3052 3.69287 87.0171 cv
3.69287 86.9419 3.68994 86.8296 3.68506 86.6782 cv
3.6792 86.5259 3.67627 86.4165 3.67627 86.3491 cv
3.67627 86.2856 li
4.11182 86.2856 li
4.11182 87.2095 li
4.26221 87.145 4.39307 87.0962 4.50439 87.0601 cv
4.7124 86.9995 4.90869 86.9692 5.09521 86.9692 cv
5.50342 86.9692 5.87939 87.1372 6.22119 87.4741 cv
6.56299 87.811 6.73389 88.2642 6.73389 88.8345 cv
6.73389 88.9233 6.71826 89.0835 6.68604 89.3149 cv
6.68604 89.4185 6.77393 89.5552 6.94873 89.7271 cv
7.12451 89.897 7.26807 89.9829 7.37939 89.9829 cv
7.49365 89.9829 7.57764 89.8579 7.63135 89.6079 cv
7.66748 89.4438 7.68506 89.2622 7.68506 89.063 cv
7.68506 88.145 7.73682 87.5229 7.84131 87.1948 cv
8.00928 86.6567 8.37158 86.3872 8.92627 86.3872 cv
9.49268 86.3872 9.94385 86.7017 10.2808 87.3306 cv
10.6177 87.9585 10.7856 88.5942 10.7856 89.2349 cv
10.7856 89.8188 10.6665 90.2817 10.4282 90.6235 cv
10.1899 90.9663 9.93994 91.1372 9.6792 91.1372 cv
9.54932 91.1372 9.42334 91.0923 9.30029 91.0015 cv
9.17627 90.9106 8.99268 90.7329 8.74951 90.4673 cv
8.43213 90.1157 li
8.36768 90.0513 li
8.30322 90.2144 8.24072 90.3364 8.1792 90.4175 cv
8.06885 90.5591 7.94189 90.6294 7.79834 90.6294 cv
7.66553 90.6294 7.52002 90.5688 7.35986 90.4458 cv
7.20068 90.3228 6.94189 90.0591 6.5835 89.6567 cv
6.47607 89.981 6.28467 90.2329 6.0083 90.4126 cv
cp
f
3.09473 82.8169 mo
3.09473 78.7993 li
3.6416 78.7993 li
3.6416 82.8169 li
3.09473 82.8169 li
cp
f
.0488281 76.311 mo
.0546875 76.3101 .0703125 76.3091 .09375 76.3091 cv
4.79883 76.3091 li
4.99902 76.3091 5.12695 76.2563 5.18164 76.1489 cv
5.23633 76.0425 5.26855 75.8433 5.2793 75.5513 cv
5.38867 75.5513 li
5.38867 77.7476 li
5.27148 77.7476 li
5.25586 77.4341 5.21289 77.229 5.14258 77.1333 cv
5.07227 77.0376 4.91992 76.9897 4.68555 76.9897 cv
1.06641 76.9897 li
.941406 76.9897 .84668 77.0054 .78125 77.0356 cv
.71582 77.0669 .683594 77.1353 .683594 77.2388 cv
.683594 77.3052 .702148 77.3931 .740234 77.5005 cv
.77832 77.6079 .817383 77.7085 .859375 77.8013 cv
.75 77.8013 li
.0195313 76.3755 li
.0195313 76.3286 li
.0322266 76.3188 .0419922 76.313 .0488281 76.311 cv
cp
f
4.09668 67.6968 mo
4.30566 67.4038 4.53516 67.2573 4.78516 67.2573 cv
4.89258 67.2573 4.99219 67.2944 5.08496 67.3696 cv
5.17676 67.4438 5.22363 67.5591 5.22363 67.7134 cv
5.22363 67.8267 5.18457 67.9263 5.10645 68.0122 cv
5.02832 68.0981 4.91406 68.1606 4.76367 68.1997 cv
4.5293 68.2583 li
4.35742 68.2993 4.23535 68.3735 4.16309 68.4771 cv
4.09473 68.5835 4.06055 68.7241 4.06055 68.8989 cv
4.06055 69.2681 4.22266 69.5806 4.54785 69.8345 cv
4.87207 70.0884 5.30273 70.2153 5.84082 70.2153 cv
6.33398 70.2153 6.77539 70.0757 7.16699 69.7954 cv
7.55762 69.5151 7.75391 69.1372 7.75391 68.6606 cv
7.75391 68.3247 7.64258 68.0249 7.4209 67.7622 cv
7.29395 67.6138 7.09082 67.4448 6.81348 67.2573 cv
6.89746 67.1216 li
7.28809 67.3052 7.59766 67.5005 7.82617 67.7036 cv
8.2627 68.0962 8.48145 68.5493 8.48145 69.0649 cv
8.48145 69.5688 8.28125 70.0161 7.88086 70.4048 cv
7.48047 70.7935 6.93652 70.9878 6.24902 70.9878 cv
5.5752 70.9878 4.99512 70.7759 4.50977 70.3521 cv
4.02441 69.9272 3.78223 69.3911 3.78223 68.7437 cv
3.78223 68.3384 3.88672 67.9897 4.09668 67.6968 cv
cp
f
8.26172 66.6401 mo
8.23926 66.3872 8.19629 66.2192 8.13477 66.1353 cv
8.04004 66.0054 7.85156 65.9399 7.56836 65.9399 cv
5.04297 65.9399 li
4.80176 65.9399 4.64355 65.9722 4.56836 66.0356 cv
4.49414 66.0981 4.45605 66.2026 4.45605 66.3481 cv
4.45605 66.4165 4.45996 66.4673 4.46582 66.5015 cv
4.47266 66.5356 4.48438 66.5747 4.5 66.6206 cv
4.3291 66.6206 li
4.21191 66.271 li
4.16992 66.145 4.09375 65.938 3.98242 65.6489 cv
3.87207 65.3608 3.81641 65.2085 3.81641 65.1919 cv
3.81641 65.1763 3.82422 65.1665 3.84082 65.1626 cv
3.85742 65.1606 3.8877 65.1587 3.93359 65.1587 cv
4.59277 65.1587 li
4.2998 64.8384 4.09766 64.561 3.98535 64.3276 cv
3.87305 64.0942 3.81641 63.855 3.81641 63.6089 cv
3.81641 63.2759 3.93066 63.0103 4.1582 62.812 cv
4.28223 62.7085 4.4502 62.6226 4.66113 62.5552 cv
4.41699 62.3149 4.23633 62.106 4.11914 61.9282 cv
3.91699 61.6196 3.81641 61.3062 3.81641 60.9849 cv
3.81641 60.4634 4.0293 60.1157 4.45605 59.9409 cv
4.69727 59.8403 5.07813 59.7905 5.59961 59.7905 cv
7.62695 59.7905 li
7.85742 59.7905 8.01465 59.7388 8.09766 59.6372 cv
8.18066 59.5356 8.23535 59.3521 8.26172 59.0864 cv
8.38867 59.0864 li
8.38867 61.2769 li
8.25195 61.2769 li
8.22559 60.9946 8.16895 60.8101 8.08105 60.7212 cv
7.99316 60.6313 7.81348 60.5864 7.54395 60.5864 cv
5.43848 60.5864 li
5.12207 60.5864 4.88965 60.6216 4.73926 60.689 cv
4.47266 60.8091 4.33887 61.0435 4.33887 61.3931 cv
4.33887 61.604 4.40918 61.813 4.54883 62.02 cv
4.63086 62.1401 4.76074 62.2876 4.94043 62.4624 cv
7.44141 62.4624 li
7.70508 62.4624 7.90527 62.4165 8.04199 62.3237 cv
8.17871 62.231 8.25195 62.0366 8.26172 61.7388 cv
8.38867 61.7388 li
8.38867 63.9683 li
8.26172 63.9683 li
8.22266 63.6606 8.14746 63.4653 8.03711 63.3804 cv
7.92676 63.2964 7.65234 63.2544 7.21582 63.2544 cv
5.85156 63.2544 li
5.35059 63.2544 5.00684 63.2866 4.81738 63.3511 cv
4.49902 63.4575 4.33887 63.6851 4.33887 64.0317 cv
4.33887 64.229 4.39355 64.4233 4.50293 64.6138 cv
4.6123 64.8052 4.75391 64.9731 4.93066 65.1196 cv
7.60254 65.1196 li
7.84961 65.1196 8.02051 65.0767 8.11523 64.9907 cv
8.20996 64.9048 8.25879 64.7173 8.26172 64.4302 cv
8.38867 64.4302 li
8.38867 66.6401 li
8.26172 66.6401 li
cp
f
5.29883 56.9712 mo
4.30957 56.0229 3.58301 55.3794 3.12012 55.0396 cv
2.65625 54.7007 2.20508 54.5308 1.76465 54.5308 cv
1.37988 54.5308 1.08594 54.6343 .884766 54.8423 cv
.682617 55.0493 .582031 55.2964 .582031 55.5845 cv
.582031 55.939 .711914 56.2271 .972656 56.4468 cv
1.11523 56.5688 1.33594 56.6851 1.63184 56.7964 cv
1.59668 56.9634 li
.998047 56.8345 .582031 56.6147 .349609 56.3052 cv
.116211 55.9956 0 55.6626 0 55.3081 cv
0 54.8696 .138672 54.5161 .416016 54.2446 cv
.692383 53.9751 1.03223 53.8384 1.43262 53.8384 cv
1.85938 53.8384 2.27051 53.9849 2.66699 54.2778 cv
3.0625 54.5708 3.7666 55.2075 4.7793 56.187 cv
4.7793 54.4028 li
4.7793 54.1548 4.74902 53.979 4.68945 53.8774 cv
4.62988 53.7769 4.4834 53.6626 4.25195 53.5356 cv
4.29883 53.4351 li
5.38867 53.8657 li
5.38867 56.9712 li
5.29883 56.9712 li
cp
f
7.19531 49.2798 mo
7.67188 49.4185 8.12207 49.6216 8.54492 49.8892 cv
8.99609 50.1704 9.41699 50.5464 9.80762 51.0161 cv
10.0654 51.3267 10.2461 51.5864 10.3496 51.7974 cv
10.1729 51.8989 li
9.75391 51.3501 9.3252 50.9497 8.88867 50.6958 cv
8.11426 50.2466 7.0918 50.0229 5.82031 50.0229 cv
4.79199 50.0229 3.95215 50.1255 3.2998 50.3325 cv
2.37988 50.6216 1.65625 51.1431 1.12891 51.8989 cv
.952148 51.7603 li
1.26758 51.1968 1.74414 50.6724 2.38086 50.188 cv
3.36328 49.4438 4.46289 49.0718 5.68066 49.0718 cv
6.21387 49.0718 6.71973 49.1411 7.19531 49.2798 cv
cp
f
70.3789 103.682 mo
73.1445 103.538 li
73.0557 101.844 li
73.04 101.542 73.0098 101.342 72.9668 101.249 cv
72.9336 101.178 72.8691 101.119 72.7725 101.071 cv
72.6426 101.008 72.5088 100.98 72.3682 100.987 cv
72.1572 100.999 li
72.1484 100.836 li
74.6953 100.704 li
74.7041 100.866 li
74.4932 100.876 li
74.3525 100.883 74.2207 100.924 74.0986 100.999 cv
74.0078 101.049 73.9473 101.124 73.9189 101.219 cv
73.8896 101.315 73.8828 101.509 73.8984 101.8 cv
74.0996 105.621 li
74.1152 105.92 74.1445 106.117 74.1885 106.21 cv
74.2217 106.282 74.2842 106.342 74.3779 106.389 cv
74.5107 106.454 74.6475 106.481 74.7871 106.473 cv
74.998 106.461 li
75.0068 106.624 li
72.4609 106.756 li
72.4521 106.594 li
72.6621 106.584 li
72.9053 106.571 73.0791 106.491 73.1826 106.342 cv
73.251 106.246 73.2754 106.02 73.2568 105.665 cv
73.1621 103.862 li
70.3955 104.006 li
70.4912 105.809 li
70.5068 106.108 70.5361 106.305 70.5791 106.399 cv
70.6123 106.47 70.6768 106.53 70.7734 106.577 cv
70.9033 106.641 71.0381 106.668 71.1787 106.661 cv
71.3936 106.65 li
71.4023 106.812 li
68.8516 106.945 li
68.8428 106.783 li
69.0537 106.772 li
69.2998 106.758 69.4746 106.678 69.5781 106.53 cv
69.6436 106.434 69.667 106.208 69.6484 105.852 cv
69.4473 102.032 li
69.4307 101.729 69.4014 101.53 69.3584 101.436 cv
69.3252 101.366 69.2627 101.307 69.1689 101.258 cv
69.0352 101.196 68.8994 101.168 68.7588 101.174 cv
68.5488 101.186 li
68.54 101.024 li
71.0908 100.891 li
71.0996 101.053 li
70.8838 101.065 li
70.7441 101.072 70.6123 101.112 70.4893 101.186 cv
70.4014 101.237 70.3418 101.311 70.3115 101.407 cv
70.2822 101.502 70.2744 101.698 70.29 101.989 cv
70.3789 103.682 li
cp
0 0 1 .279297 cmyk
f
80.3232 108.102 mo
80.332 108.264 li
79.8779 108.065 79.4951 107.827 79.1846 107.544 cv
78.7412 107.145 78.3896 106.664 78.1318 106.102 cv
77.873 105.542 77.7275 104.952 77.6953 104.334 cv
77.6475 103.432 77.8271 102.598 78.2363 101.831 cv
78.6455 101.063 79.2012 100.5 79.9043 100.143 cv
79.9141 100.327 li
79.5645 100.543 79.2832 100.83 79.0703 101.186 cv
78.8564 101.542 78.707 101.985 78.6201 102.517 cv
78.5342 103.049 78.5059 103.603 78.5361 104.176 cv
78.5693 104.799 78.6475 105.364 78.7705 105.868 cv
78.8682 106.266 78.9775 106.583 79.0977 106.821 cv
79.2188 107.058 79.377 107.283 79.5713 107.499 cv
79.7666 107.713 80.0176 107.914 80.3232 108.102 cv
cp
f
82.3477 102.323 mo
82.1309 102.334 81.9541 102.43 81.8164 102.61 cv
81.6797 102.789 81.6201 103.056 81.6387 103.412 cv
81.6631 103.871 81.7813 104.223 81.9941 104.464 cv
82.1563 104.649 82.3545 104.735 82.5889 104.723 cv
82.8115 104.711 82.9893 104.62 83.124 104.446 cv
83.2588 104.272 83.3164 104.008 83.2979 103.653 cv
83.2734 103.19 83.1543 102.833 82.9375 102.583 cv
82.7793 102.397 82.582 102.311 82.3477 102.323 cv
cp
81.7461 106.274 mo
81.6162 106.428 81.5195 106.572 81.4561 106.704 cv
81.3926 106.836 81.3633 106.956 81.3691 107.063 cv
81.377 107.202 81.4678 107.321 81.6426 107.417 cv
81.9453 107.583 82.3721 107.651 82.9258 107.622 cv
83.4521 107.594 83.8359 107.481 84.0771 107.283 cv
84.3174 107.085 84.4326 106.882 84.4219 106.672 cv
84.4131 106.52 84.333 106.417 84.1807 106.36 cv
84.0254 106.304 83.7217 106.282 83.2705 106.295 cv
82.6113 106.311 82.1025 106.305 81.7461 106.274 cv
cp
81.7129 104.813 mo
81.4609 104.706 81.2637 104.548 81.1201 104.341 cv
80.9775 104.135 80.8984 103.901 80.8848 103.643 cv
80.8643 103.247 80.9971 102.899 81.2813 102.598 cv
81.5664 102.297 81.9434 102.133 82.4121 102.109 cv
82.7949 102.089 83.1318 102.166 83.4229 102.337 cv
84.2744 102.293 li
84.4004 102.287 84.4736 102.287 84.4941 102.292 cv
84.5156 102.298 84.5303 102.31 84.54 102.327 cv
84.5596 102.352 84.5703 102.399 84.5742 102.465 cv
84.5781 102.542 84.5732 102.594 84.5605 102.624 cv
84.5527 102.639 84.5381 102.651 84.5166 102.662 cv
84.4951 102.671 84.4209 102.68 84.2949 102.686 cv
83.7725 102.713 li
83.9473 102.915 84.0439 103.178 84.0605 103.502 cv
84.0801 103.877 83.9541 104.202 83.6807 104.483 cv
83.4082 104.762 83.0303 104.914 82.5479 104.939 cv
82.3477 104.95 82.1436 104.932 81.9316 104.885 cv
81.8096 105 81.7275 105.102 81.6865 105.188 cv
81.6455 105.274 81.626 105.345 81.6299 105.404 cv
81.6318 105.453 81.6582 105.5 81.71 105.543 cv
81.7607 105.588 81.8564 105.616 81.998 105.629 cv
82.0801 105.637 82.2852 105.637 82.6143 105.629 cv
83.2178 105.611 83.6094 105.61 83.79 105.627 cv
84.0635 105.651 84.2861 105.741 84.457 105.895 cv
84.6289 106.049 84.7207 106.246 84.7324 106.485 cv
84.75 106.814 84.6113 107.131 84.3164 107.435 cv
83.8818 107.883 83.2979 108.127 82.5635 108.166 cv
81.998 108.196 81.5146 108.092 81.1113 107.86 cv
80.8848 107.726 80.7666 107.581 80.7588 107.423 cv
80.7549 107.353 80.7676 107.282 80.7959 107.211 cv
80.8398 107.101 80.9346 106.946 81.0791 106.746 cv
81.0986 106.718 81.2393 106.553 81.5029 106.25 cv
81.3457 106.168 81.2334 106.093 81.167 106.026 cv
81.1006 105.958 81.0654 105.877 81.0605 105.788 cv
81.0547 105.686 81.0898 105.564 81.166 105.422 cv
81.2422 105.282 81.4248 105.078 81.7129 104.813 cv
cp
f
87.4424 105.114 mo
87.3623 103.59 li
86.9297 103.788 86.6504 103.927 86.5254 104.006 cv
86.3018 104.146 86.1436 104.289 86.0508 104.433 cv
85.959 104.579 85.917 104.734 85.9258 104.899 cv
85.9365 105.109 86.0088 105.28 86.1426 105.412 cv
86.2754 105.543 86.4238 105.604 86.5869 105.596 cv
86.8096 105.584 87.0947 105.424 87.4424 105.114 cv
cp
87.458 105.397 mo
87.0615 105.736 86.8125 105.933 86.709 105.989 cv
86.5557 106.07 86.3887 106.115 86.2109 106.124 cv
85.9326 106.138 85.6982 106.055 85.5088 105.875 cv
85.3184 105.696 85.2148 105.452 85.1992 105.143 cv
85.1885 104.948 85.2236 104.777 85.3037 104.629 cv
85.4141 104.425 85.6123 104.228 85.9004 104.039 cv
86.1875 103.848 86.6709 103.61 87.3486 103.324 cv
87.3398 103.167 li
87.3193 102.767 87.2412 102.499 87.1064 102.356 cv
86.9707 102.213 86.7813 102.149 86.5381 102.162 cv
86.3545 102.17 86.2109 102.229 86.1074 102.334 cv
86.002 102.438 85.9521 102.554 85.959 102.682 cv
85.9805 102.934 li
85.9883 103.069 85.959 103.174 85.8936 103.25 cv
85.8291 103.328 85.7412 103.368 85.6299 103.374 cv
85.5215 103.379 85.4307 103.346 85.3584 103.274 cv
85.2852 103.202 85.2451 103.1 85.2383 102.969 cv
85.2256 102.719 85.3418 102.483 85.5889 102.26 cv
85.835 102.037 86.1914 101.913 86.6563 101.888 cv
87.0137 101.87 87.3096 101.914 87.5439 102.022 cv
87.7217 102.103 87.8555 102.238 87.9482 102.426 cv
88.0068 102.547 88.0479 102.803 88.0684 103.19 cv
88.1396 104.547 li
88.1592 104.928 88.1787 105.163 88.1982 105.248 cv
88.2168 105.333 88.2441 105.388 88.2793 105.417 cv
88.3145 105.444 88.3545 105.456 88.3984 105.453 cv
88.4453 105.45 88.4854 105.438 88.5195 105.417 cv
88.5791 105.375 88.6924 105.263 88.8584 105.079 cv
88.8711 105.323 li
88.5664 105.778 88.2646 106.013 87.9658 106.028 cv
87.8223 106.036 87.7061 105.993 87.6162 105.897 cv
87.5264 105.803 87.4727 105.636 87.458 105.397 cv
cp
f
91.582 101.631 mo
91.6543 102.995 li
91.5088 103.002 li
91.375 102.58 91.2168 102.297 91.0352 102.151 cv
90.8525 102.006 90.627 101.94 90.3574 101.954 cv
90.1523 101.964 89.9902 102.028 89.8701 102.141 cv
89.75 102.256 89.6934 102.379 89.7002 102.508 cv
89.709 102.672 89.7627 102.81 89.8633 102.921 cv
89.96 103.036 90.1504 103.153 90.4355 103.272 cv
91.0938 103.549 li
91.7021 103.806 92.0195 104.17 92.0439 104.642 cv
92.0635 105.006 91.9414 105.307 91.6758 105.543 cv
91.4111 105.781 91.1074 105.907 90.7646 105.924 cv
90.5195 105.938 90.2354 105.911 89.915 105.838 cv
89.8174 105.815 89.7373 105.804 89.6758 105.807 cv
89.6084 105.811 89.5576 105.852 89.5234 105.93 cv
89.3789 105.938 li
89.3037 104.51 li
89.4482 104.502 li
89.5518 104.905 89.7246 105.204 89.9668 105.397 cv
90.209 105.592 90.4736 105.682 90.7598 105.667 cv
90.9619 105.657 91.124 105.59 91.2451 105.465 cv
91.3652 105.34 91.4219 105.196 91.4131 105.03 cv
91.4033 104.829 91.3223 104.663 91.1738 104.534 cv
91.0244 104.405 90.7324 104.247 90.2969 104.059 cv
89.8613 103.871 89.5732 103.696 89.4326 103.535 cv
89.292 103.375 89.2158 103.168 89.2021 102.917 cv
89.1846 102.586 89.2842 102.307 89.499 102.074 cv
89.7139 101.84 90.002 101.713 90.3613 101.695 cv
90.5195 101.687 90.7129 101.711 90.9424 101.766 cv
91.0938 101.801 91.1943 101.819 91.2441 101.815 cv
91.291 101.813 91.3271 101.801 91.3525 101.78 cv
91.3779 101.758 91.4063 101.711 91.4375 101.639 cv
91.582 101.631 li
cp
f
92.3027 99.6821 mo
92.293 99.4985 li
92.75 99.6938 93.1338 99.9321 93.4443 100.212 cv
93.8857 100.616 94.2354 101.098 94.4941 101.659 cv
94.752 102.217 94.8975 102.808 94.9307 103.428 cv
94.9775 104.33 94.7979 105.165 94.3906 105.932 cv
93.9834 106.698 93.4277 107.26 92.7207 107.62 cv
92.7129 107.458 li
93.0615 107.237 93.3438 106.952 93.5586 106.596 cv
93.7734 106.243 93.9229 105.797 94.0078 105.264 cv
94.0928 104.731 94.1201 104.176 94.0898 103.604 cv
94.0566 102.983 93.9795 102.419 93.8555 101.913 cv
93.7607 101.515 93.6533 101.198 93.5303 100.961 cv
93.4072 100.727 93.25 100.5 93.0566 100.286 cv
92.8633 100.071 92.6123 99.8696 92.3027 99.6821 cv
cp
f
98.8291 100.055 mo
98.8984 101.37 li
99.8379 101.32 li
99.8535 101.626 li
98.9141 101.676 li
99.0508 104.268 li
99.0645 104.528 99.1113 104.702 99.1904 104.786 cv
99.2695 104.874 99.3682 104.913 99.4854 104.907 cv
99.5811 104.902 99.6738 104.867 99.7617 104.802 cv
99.8496 104.738 99.915 104.647 99.958 104.528 cv
100.13 104.518 li
100.042 104.809 99.9092 105.032 99.7295 105.186 cv
99.5488 105.339 99.3594 105.421 99.1611 105.432 cv
99.0264 105.439 98.8926 105.409 98.7598 105.34 cv
98.627 105.274 98.5264 105.172 98.458 105.037 cv
98.3896 104.901 98.3477 104.691 98.332 104.402 cv
98.1904 101.713 li
97.5537 101.747 li
97.5459 101.602 li
97.7031 101.53 97.8623 101.413 98.0225 101.25 cv
98.1826 101.09 98.3232 100.901 98.4443 100.684 cv
98.5059 100.569 98.5889 100.363 98.6934 100.063 cv
98.8291 100.055 li
cp
f
102.068 101.37 mo
101.912 101.378 101.76 101.432 101.607 101.532 cv
101.456 101.632 101.338 101.799 101.253 102.035 cv
101.169 102.27 101.137 102.567 101.155 102.928 cv
101.187 103.51 101.328 104.006 101.584 104.417 cv
101.839 104.827 102.155 105.021 102.536 105.001 cv
102.82 104.987 103.049 104.858 103.221 104.616 cv
103.394 104.374 103.465 103.967 103.435 103.401 cv
103.397 102.69 103.214 102.14 102.885 101.749 cv
102.662 101.481 102.39 101.354 102.068 101.37 cv
cp
102.189 101.079 mo
102.798 101.047 103.3 101.252 103.692 101.694 cv
104.026 102.071 104.206 102.512 104.232 103.022 cv
104.252 103.38 104.185 103.747 104.031 104.123 cv
103.878 104.499 103.654 104.788 103.361 104.99 cv
103.068 105.192 102.736 105.301 102.364 105.321 cv
101.758 105.352 101.265 105.138 100.882 104.677 cv
100.56 104.288 100.385 103.841 100.357 103.337 cv
100.339 102.971 100.411 102.602 100.574 102.229 cv
100.738 101.858 100.965 101.578 101.255 101.389 cv
101.544 101.2 101.855 101.096 102.189 101.079 cv
cp
f
105.822 99.6919 mo
105.892 101.004 li
106.831 100.956 li
106.848 101.262 li
105.907 101.311 li
106.044 103.905 li
106.058 104.163 106.104 104.336 106.185 104.422 cv
106.264 104.508 106.361 104.548 106.479 104.542 cv
106.575 104.538 106.668 104.502 106.755 104.438 cv
106.843 104.374 106.908 104.284 106.952 104.163 cv
107.123 104.155 li
107.036 104.445 106.902 104.667 106.723 104.822 cv
106.542 104.975 106.354 105.057 106.154 105.067 cv
106.02 105.075 105.886 105.044 105.753 104.977 cv
105.621 104.909 105.52 104.807 105.451 104.672 cv
105.382 104.538 105.341 104.327 105.325 104.038 cv
105.184 101.349 li
104.547 101.382 li
104.539 101.238 li
104.697 101.165 104.855 101.047 105.017 100.887 cv
105.176 100.725 105.317 100.536 105.438 100.319 cv
105.499 100.205 105.582 99.9985 105.687 99.6978 cv
105.822 99.6919 li
cp
f
109.666 103.957 mo
109.586 102.433 li
109.153 102.631 108.874 102.77 108.749 102.848 cv
108.524 102.989 108.366 103.131 108.274 103.276 cv
108.182 103.42 108.141 103.577 108.149 103.742 cv
108.16 103.952 108.232 104.122 108.365 104.254 cv
108.499 104.385 108.646 104.448 108.811 104.438 cv
109.033 104.427 109.318 104.266 109.666 103.957 cv
cp
109.681 104.24 mo
109.285 104.579 109.035 104.776 108.933 104.831 cv
108.778 104.913 108.612 104.958 108.434 104.966 cv
108.156 104.981 107.921 104.898 107.731 104.718 cv
107.542 104.538 107.438 104.294 107.423 103.986 cv
107.412 103.791 107.446 103.62 107.527 103.472 cv
107.637 103.268 107.835 103.071 108.123 102.881 cv
108.411 102.691 108.894 102.452 109.571 102.167 cv
109.563 102.009 li
109.542 101.61 109.464 101.34 109.329 101.199 cv
109.193 101.056 109.005 100.991 108.762 101.004 cv
108.577 101.014 108.434 101.071 108.331 101.176 cv
108.225 101.281 108.175 101.397 108.182 101.525 cv
108.204 101.778 li
108.211 101.913 108.182 102.018 108.117 102.093 cv
108.053 102.17 107.965 102.209 107.854 102.215 cv
107.745 102.221 107.654 102.189 107.581 102.118 cv
107.509 102.044 107.469 101.943 107.462 101.812 cv
107.448 101.561 107.565 101.325 107.813 101.102 cv
108.059 100.879 108.414 100.754 108.88 100.731 cv
109.237 100.711 109.532 100.756 109.768 100.864 cv
109.944 100.946 110.079 101.081 110.172 101.268 cv
110.23 101.389 110.271 101.645 110.291 102.033 cv
110.362 103.39 li
110.383 103.771 110.401 104.005 110.422 104.09 cv
110.44 104.175 110.468 104.231 110.503 104.258 cv
110.538 104.286 110.578 104.297 110.622 104.295 cv
110.669 104.293 110.709 104.281 110.743 104.258 cv
110.802 104.217 110.915 104.106 111.081 103.922 cv
111.095 104.167 li
110.79 104.621 110.488 104.856 110.189 104.872 cv
110.046 104.878 109.93 104.834 109.839 104.74 cv
109.749 104.645 109.696 104.479 109.681 104.24 cv
cp
f
112.479 98.4458 mo
112.759 103.75 li
112.771 104.002 112.799 104.167 112.84 104.247 cv
112.881 104.326 112.94 104.385 113.019 104.423 cv
113.097 104.461 113.24 104.475 113.448 104.464 cv
113.456 104.622 li
111.484 104.724 li
111.477 104.567 li
111.661 104.557 111.786 104.532 111.852 104.491 cv
111.917 104.45 111.966 104.383 111.999 104.293 cv
112.033 104.206 112.043 104.038 112.03 103.79 cv
111.839 100.157 li
111.815 99.7056 111.79 99.4292 111.765 99.3267 cv
111.738 99.2251 111.701 99.1558 111.654 99.1196 cv
111.606 99.0854 111.548 99.0688 111.478 99.0728 cv
111.401 99.0767 111.306 99.105 111.191 99.1577 cv
111.109 99.0083 li
112.281 98.4575 li
112.479 98.4458 li
cp
f
194.256 54.0503 mo
194.14 53.936 li
195.632 52.4517 li
195.748 52.5669 li
195.589 52.7241 li
195.425 52.8892 195.366 53.0845 195.415 53.311 cv
195.436 53.4185 195.563 53.5884 195.798 53.8208 cv
197.507 55.522 li
197.93 55.9419 198.216 56.3091 198.365 56.6255 cv
198.515 56.9399 198.55 57.3032 198.471 57.7134 cv
198.392 58.1235 198.142 58.5396 197.719 58.9595 cv
197.259 59.4165 196.829 59.6841 196.432 59.7632 cv
196.034 59.8423 195.65 59.7964 195.281 59.6274 cv
195.03 59.5093 194.651 59.1978 194.144 58.6929 cv
192.496 57.0552 li
192.237 56.7974 192.03 56.6636 191.88 56.6548 cv
191.728 56.645 191.571 56.7202 191.411 56.8794 cv
191.253 57.0376 li
191.138 56.9224 li
192.959 55.1099 li
193.075 55.2251 li
192.913 55.3853 li
192.739 55.5591 192.669 55.7368 192.704 55.9204 cv
192.728 56.0464 192.856 56.2271 193.093 56.4614 cv
194.931 58.2876 li
195.095 58.4517 195.296 58.6226 195.538 58.8032 cv
195.778 58.9829 195.999 59.0933 196.195 59.1313 cv
196.392 59.1724 196.603 59.1567 196.827 59.0845 cv
197.053 59.0132 197.273 58.8706 197.489 58.6567 cv
197.765 58.3823 197.95 58.0767 198.048 57.7407 cv
198.146 57.4048 198.14 57.104 198.033 56.8384 cv
197.925 56.5728 197.647 56.2173 197.2 55.772 cv
195.493 54.0747 li
195.229 53.813 195.036 53.6782 194.911 53.6694 cv
194.739 53.6587 194.575 53.7329 194.415 53.8931 cv
194.256 54.0503 li
cp
1 .56 0 0 cmyk
f
198.751 50.2095 mo
199.687 51.1411 li
200.352 50.48 li
200.569 50.6958 li
199.903 51.3569 li
201.751 53.1938 li
201.935 53.3774 202.086 53.4751 202.202 53.4858 cv
202.319 53.4976 202.42 53.4624 202.503 53.3794 cv
202.571 53.311 202.616 53.2241 202.638 53.1187 cv
202.659 53.0122 202.647 52.9009 202.599 52.7827 cv
202.72 52.6626 li
202.851 52.936 202.901 53.1899 202.87 53.4243 cv
202.841 53.6587 202.755 53.8452 202.614 53.9849 cv
202.519 54.0806 202.399 54.146 202.256 54.1841 cv
202.112 54.2231 201.968 54.2144 201.827 54.1606 cv
201.685 54.106 201.511 53.9771 201.306 53.772 cv
199.391 51.8677 li
198.94 52.3159 li
198.837 52.2134 li
198.905 52.0552 198.945 51.8628 198.955 51.6353 cv
198.966 51.4087 198.942 51.1753 198.888 50.9341 cv
198.856 50.8081 198.778 50.5991 198.653 50.3071 cv
198.751 50.2095 li
cp
f
202.042 49.0317 mo
201.933 49.1411 201.854 49.2837 201.81 49.4595 cv
201.765 49.6343 201.789 49.8364 201.884 50.0688 cv
201.979 50.2993 202.156 50.5415 202.413 50.7974 cv
202.827 51.2095 203.267 51.4829 203.732 51.6177 cv
204.198 51.7524 204.565 51.687 204.835 51.4185 cv
205.036 51.2192 205.118 50.9712 205.084 50.6763 cv
205.048 50.3823 204.827 50.0347 204.423 49.6323 cv
203.918 49.1294 203.411 48.8423 202.903 48.77 cv
202.558 48.7183 202.271 48.8052 202.042 49.0317 cv
cp
201.938 48.7358 mo
202.368 48.3071 202.878 48.1255 203.467 48.1919 cv
203.968 48.2495 204.4 48.4595 204.763 48.8198 cv
205.019 49.0728 205.214 49.3892 205.354 49.77 cv
205.493 50.1528 205.521 50.5161 205.438 50.8608 cv
205.356 51.2065 205.185 51.5103 204.921 51.772 cv
204.493 52.1978 203.98 52.3677 203.386 52.2788 cv
202.884 52.2036 202.454 51.9888 202.095 51.6313 cv
201.835 51.3726 201.64 51.0503 201.511 50.6646 cv
201.382 50.2798 201.362 49.9204 201.451 49.5874 cv
201.539 49.2544 201.7 48.9712 201.938 48.7358 cv
cp
f
203.703 45.2856 mo
204.64 46.2153 li
205.304 45.5552 li
205.521 45.771 li
204.856 46.4321 li
206.703 48.2681 li
206.888 48.4517 207.038 48.5493 207.154 48.561 cv
207.271 48.5728 207.372 48.5376 207.455 48.4556 cv
207.524 48.3872 207.569 48.2993 207.591 48.1938 cv
207.612 48.0864 207.599 47.9751 207.552 47.8579 cv
207.673 47.7368 li
207.803 48.0112 207.854 48.2651 207.823 48.4995 cv
207.793 48.7329 207.707 48.9204 207.566 49.0601 cv
207.471 49.1548 207.353 49.2212 207.208 49.2603 cv
207.063 49.2983 206.921 49.2896 206.778 49.2349 cv
206.637 49.1802 206.464 49.0513 206.258 48.8462 cv
204.343 46.9419 li
203.893 47.3911 li
203.79 47.2886 li
203.858 47.1304 203.897 46.938 203.907 46.7104 cv
203.919 46.4839 203.896 46.2505 203.839 46.0083 cv
203.809 45.8833 203.731 45.6743 203.606 45.3813 cv
203.703 45.2856 li
cp
f
209.43 45.8979 mo
208.345 44.8188 li
208.155 45.2534 208.042 45.5415 208.003 45.6841 cv
207.93 45.938 207.908 46.1489 207.938 46.3169 cv
207.966 46.4868 208.04 46.6294 208.158 46.7476 cv
208.308 46.895 208.476 46.9751 208.663 46.9839 cv
208.851 46.9927 209.003 46.9399 209.118 46.8257 cv
209.276 46.6685 209.38 46.3589 209.43 45.8979 cv
cp
209.631 46.0981 mo
209.565 46.6138 209.512 46.9263 209.474 47.0347 cv
209.413 47.1978 209.319 47.3423 209.192 47.4673 cv
208.996 47.6636 208.767 47.7583 208.505 47.7505 cv
208.243 47.7437 208.001 47.6304 207.782 47.4126 cv
207.643 47.2739 207.554 47.1235 207.514 46.9614 cv
207.458 46.7368 207.474 46.4575 207.56 46.1245 cv
207.646 45.7915 207.843 45.2935 208.155 44.6294 cv
208.042 44.5181 li
207.759 44.2368 207.519 44.0874 207.323 44.0718 cv
207.128 44.0571 206.944 44.1333 206.771 44.3052 cv
206.642 44.4341 206.572 44.5728 206.565 44.7192 cv
206.558 44.8677 206.601 44.9868 206.69 45.0776 cv
206.878 45.2505 li
206.972 45.3452 207.021 45.4438 207.024 45.5435 cv
207.028 45.6431 206.99 45.7329 206.911 45.811 cv
206.835 45.8872 206.745 45.9224 206.642 45.9185 cv
206.54 45.9126 206.442 45.8638 206.349 45.77 cv
206.171 45.5942 206.098 45.3394 206.131 45.0103 cv
206.163 44.6802 206.346 44.3521 206.675 44.0239 cv
206.929 43.7729 207.178 43.6089 207.425 43.5317 cv
207.61 43.4751 207.802 43.4858 207.996 43.563 cv
208.122 43.6157 208.323 43.7778 208.599 44.0513 cv
209.565 45.0132 li
209.838 45.2837 210.01 45.4438 210.081 45.4937 cv
210.151 45.5454 210.21 45.5688 210.255 45.5649 cv
210.299 45.561 210.337 45.5444 210.368 45.5142 cv
210.401 45.481 210.423 45.4458 210.434 45.4067 cv
210.45 45.3364 210.458 45.1782 210.458 44.9302 cv
210.632 45.1021 li
210.711 45.6421 210.645 46.0181 210.433 46.229 cv
210.332 46.3286 210.216 46.3745 210.085 46.3638 cv
209.954 46.354 209.804 46.2661 209.631 46.0981 cv
cp
f
207.812 39.9321 mo
211.589 43.688 li
211.767 43.8657 211.898 43.9692 211.982 44.0005 cv
212.066 44.0327 212.15 44.0376 212.233 44.0142 cv
212.318 43.9907 212.434 43.9048 212.581 43.7583 cv
212.692 43.8696 li
211.297 45.2583 li
211.185 45.147 li
211.315 45.0161 211.392 44.9146 211.411 44.8403 cv
211.433 44.7661 211.425 44.6851 211.391 44.5962 cv
211.354 44.5073 211.249 44.3765 211.073 44.2017 cv
208.487 41.6294 li
208.165 41.3091 207.962 41.1196 207.872 41.061 cv
207.784 41.0024 207.712 40.9771 207.652 40.981 cv
207.593 40.9868 207.538 41.0132 207.488 41.063 cv
207.435 41.1157 207.384 41.2007 207.333 41.3169 cv
207.172 41.2603 li
207.672 40.0708 li
207.812 39.9321 li
cp
f
189.74 75.8823 mo
191.388 77.5396 li
192.16 76.7817 li
192.337 76.6069 192.429 76.4399 192.433 76.2817 cv
192.438 76.1226 192.341 75.9146 192.14 75.6587 cv
192.255 75.5444 li
193.673 76.9712 li
193.558 77.0845 li
193.394 76.9243 193.251 76.8247 193.135 76.7876 cv
193.019 76.7515 192.905 76.7485 192.794 76.7817 cv
192.685 76.813 192.559 76.8989 192.417 77.0386 cv
191.644 77.7974 li
192.961 79.1226 li
193.173 79.3364 193.327 79.4634 193.423 79.5044 cv
193.494 79.5376 193.582 79.5376 193.687 79.5103 cv
193.827 79.4692 193.947 79.4009 194.048 79.3013 cv
194.201 79.1509 li
194.315 79.2661 li
192.495 81.0552 li
192.382 80.9399 li
192.532 80.7915 li
192.706 80.6196 192.784 80.4448 192.761 80.2651 cv
192.745 80.1489 192.612 79.9653 192.36 79.7134 cv
189.653 76.9888 li
189.44 76.7759 189.288 76.647 189.192 76.605 cv
189.12 76.5747 189.032 76.5718 188.931 76.5981 cv
188.792 76.6372 188.671 76.7065 188.569 76.8062 cv
188.419 76.9536 li
188.306 76.8384 li
191.46 73.7378 li
192.421 74.6235 li
192.312 74.7319 li
192.063 74.5884 191.854 74.5054 191.691 74.4839 cv
191.528 74.4614 191.372 74.4829 191.227 74.5454 cv
191.08 74.6069 190.896 74.7466 190.676 74.9634 cv
189.74 75.8823 li
cp
0 1 1 0 cmyk
f
194.692 75.0298 mo
196.017 73.7271 li
195.825 73.5552 195.677 73.4468 195.569 73.4058 cv
195.401 73.3403 195.233 73.3257 195.064 73.3608 cv
194.894 73.397 194.755 73.4692 194.642 73.5796 cv
194.468 73.7505 194.38 73.9683 194.376 74.2368 cv
194.372 74.5044 194.478 74.7681 194.692 75.0298 cv
cp
194.872 75.2095 mo
195.29 75.6343 195.722 75.8657 196.169 75.9009 cv
196.616 75.936 196.981 75.8159 197.263 75.5396 cv
197.45 75.354 197.563 75.1431 197.6 74.9048 cv
197.636 74.6655 197.577 74.3755 197.425 74.0337 cv
197.583 74.0005 li
197.821 74.3286 197.951 74.7114 197.973 75.1528 cv
197.993 75.5923 197.847 75.9692 197.529 76.2798 cv
197.185 76.6177 196.758 76.7739 196.249 76.7485 cv
195.739 76.7231 195.261 76.4849 194.813 76.0356 cv
194.329 75.5493 194.077 75.0454 194.058 74.5249 cv
194.038 74.0063 194.218 73.5591 194.597 73.186 cv
194.917 72.8716 195.286 72.7173 195.702 72.7251 cv
196.118 72.7319 196.5 72.9116 196.851 73.2642 cv
194.872 75.2095 li
cp
f
197.668 68.4897 mo
198.599 69.4263 li
199.267 68.7681 li
199.482 68.9858 li
198.813 69.6431 li
200.65 71.4907 li
200.833 71.6743 200.983 71.7739 201.1 71.7856 cv
201.217 71.7974 201.317 71.7622 201.401 71.6802 cv
201.47 71.6128 201.516 71.5259 201.538 71.4204 cv
201.56 71.314 201.548 71.2017 201.501 71.0845 cv
201.622 70.9653 li
201.751 71.2388 201.8 71.4937 201.769 71.7271 cv
201.737 71.9614 201.65 72.1479 201.509 72.2876 cv
201.413 72.3813 201.294 72.4468 201.149 72.4849 cv
201.005 72.522 200.862 72.5122 200.72 72.4575 cv
200.578 72.4019 200.406 72.272 200.202 72.0649 cv
198.298 70.1509 li
197.845 70.5962 li
197.743 70.4937 li
197.812 70.3364 197.853 70.1431 197.864 69.9165 cv
197.876 69.6899 197.854 69.4556 197.8 69.2153 cv
197.77 69.0884 197.693 68.8794 197.57 68.5854 cv
197.668 68.4897 li
cp
f
200.966 67.3306 mo
200.855 67.439 200.777 67.5825 200.731 67.7563 cv
200.684 67.9312 200.708 68.1343 200.802 68.3657 cv
200.896 68.5972 201.07 68.8403 201.325 69.0981 cv
201.738 69.5122 202.177 69.7896 202.641 69.9263 cv
203.105 70.064 203.473 70.0005 203.743 69.7339 cv
203.946 69.5347 204.03 69.2876 203.997 68.9927 cv
203.964 68.6978 203.746 68.3481 203.345 67.9438 cv
202.841 67.438 202.336 67.1489 201.829 67.0728 cv
201.483 67.019 201.195 67.105 200.966 67.3306 cv
cp
200.862 67.0337 mo
201.296 66.6079 201.807 66.4282 202.396 66.4985 cv
202.896 66.5591 203.327 66.77 203.688 67.1333 cv
203.941 67.3882 204.136 67.7065 204.272 68.0884 cv
204.409 68.4712 204.437 68.8345 204.352 69.1792 cv
204.269 69.5239 204.094 69.8267 203.829 70.0874 cv
203.397 70.5103 202.885 70.6772 202.29 70.5845 cv
201.79 70.5073 201.36 70.2896 201.004 69.9302 cv
200.744 69.6694 200.552 69.3462 200.425 68.9614 cv
200.298 68.5747 200.281 68.2144 200.371 67.8833 cv
200.461 67.5503 200.624 67.2681 200.862 67.0337 cv
cp
f
202.648 63.5942 mo
203.579 64.5298 li
204.247 63.8726 li
204.464 64.0903 li
203.794 64.7466 li
205.631 66.5942 li
205.813 66.7788 205.965 66.8774 206.081 66.8892 cv
206.197 66.9009 206.298 66.8667 206.382 66.7847 cv
206.451 66.7173 206.496 66.6294 206.519 66.5239 cv
206.54 66.4185 206.528 66.3062 206.481 66.188 cv
206.603 66.0688 li
206.732 66.3423 206.78 66.5981 206.75 66.8306 cv
206.718 67.0649 206.632 67.2524 206.489 67.3911 cv
206.394 67.4849 206.274 67.5503 206.13 67.5884 cv
205.985 67.6255 205.843 67.6157 205.701 67.561 cv
205.56 67.5054 205.388 67.3755 205.183 67.1694 cv
203.278 65.2544 li
202.825 65.6997 li
202.724 65.5972 li
202.792 65.4399 202.833 65.2466 202.845 65.02 cv
202.856 64.7935 202.835 64.5601 202.78 64.3188 cv
202.751 64.1919 202.675 63.9829 202.552 63.6899 cv
202.648 63.5942 li
cp
f
208.37 64.2388 mo
207.292 63.1538 li
207.101 63.5874 206.985 63.8755 206.944 64.0161 cv
206.872 64.27 206.848 64.481 206.876 64.6499 cv
206.904 64.8198 206.977 64.9634 207.095 65.0815 cv
207.243 65.231 207.41 65.311 207.598 65.3208 cv
207.785 65.3306 207.938 65.2798 208.056 65.1646 cv
208.214 65.0093 208.318 64.6997 208.37 64.2388 cv
cp
208.571 64.4409 mo
208.502 64.9556 208.448 65.2671 208.407 65.3765 cv
208.347 65.5396 208.253 65.6821 208.125 65.8071 cv
207.927 66.0024 207.697 66.0962 207.435 66.0864 cv
207.173 66.0786 206.933 65.9634 206.715 65.7446 cv
206.577 65.605 206.489 65.4536 206.449 65.2915 cv
206.396 65.0669 206.411 64.7876 206.499 64.4546 cv
206.587 64.1235 206.788 63.6255 207.103 62.9634 cv
206.991 62.8521 li
206.71 62.5679 206.472 62.4175 206.274 62.4009 cv
206.079 62.3853 205.896 62.4604 205.722 62.6313 cv
205.591 62.7603 205.521 62.8979 205.515 63.0454 cv
205.505 63.1929 205.546 63.313 205.637 63.4028 cv
205.823 63.5776 li
205.917 63.6724 205.966 63.772 205.968 63.8706 cv
205.971 63.9712 205.933 64.0601 205.854 64.1382 cv
205.776 64.2144 205.687 64.2485 205.583 64.2427 cv
205.481 64.2368 205.384 64.188 205.291 64.0942 cv
205.114 63.9165 205.043 63.6606 205.077 63.3325 cv
205.112 63.0024 205.296 62.6753 205.628 62.3501 cv
205.882 62.1001 206.132 61.938 206.38 61.8618 cv
206.565 61.8052 206.757 61.8169 206.951 61.897 cv
207.077 61.9487 207.276 62.1118 207.552 62.3882 cv
208.513 63.355 li
208.782 63.6274 208.954 63.7876 209.024 63.8384 cv
209.096 63.8892 209.153 63.9136 209.198 63.9106 cv
209.242 63.9087 209.28 63.8911 209.312 63.8608 cv
209.346 63.8276 209.368 63.7915 209.378 63.7534 cv
209.395 63.6831 209.404 63.5239 209.405 63.2778 cv
209.578 63.4517 li
209.653 63.9917 209.587 64.3657 209.373 64.5757 cv
209.271 64.6763 209.155 64.7202 209.024 64.7095 cv
208.894 64.6978 208.743 64.6099 208.571 64.4409 cv
cp
f
206.789 58.2622 mo
210.544 62.0405 li
210.722 62.2192 210.853 62.3247 210.936 62.356 cv
211.019 62.3892 211.104 62.394 211.188 62.3696 cv
211.271 62.3481 211.387 62.2632 211.535 62.1177 cv
211.646 62.229 li
210.243 63.6099 li
210.132 63.4976 li
210.263 63.3677 210.339 63.2681 210.36 63.1938 cv
210.382 63.1187 210.375 63.0376 210.34 62.9487 cv
210.306 62.8599 210.2 62.7271 210.024 62.5513 cv
207.454 59.9644 li
207.134 59.6431 206.931 59.4517 206.843 59.3931 cv
206.755 59.3335 206.682 59.3071 206.623 59.311 cv
206.563 59.3169 206.509 59.3433 206.459 59.3921 cv
206.405 59.4458 206.353 59.5298 206.302 59.645 cv
206.141 59.5884 li
206.648 58.4009 li
206.789 58.2622 li
cp
f
146.534 164.083 mo
148.327 165.583 li
149.027 164.756 li
149.188 164.568 149.263 164.394 149.253 164.235 cv
149.243 164.077 149.127 163.879 148.902 163.641 cv
149.007 163.518 li
150.552 164.81 li
150.446 164.934 li
150.268 164.788 150.118 164.702 149.998 164.676 cv
149.878 164.65 149.766 164.658 149.658 164.701 cv
149.552 164.743 149.435 164.839 149.307 164.991 cv
148.606 165.817 li
150.04 167.016 li
150.271 167.209 150.436 167.323 150.534 167.356 cv
150.608 167.381 150.696 167.374 150.798 167.336 cv
150.935 167.284 151.048 167.204 151.14 167.096 cv
151.278 166.932 li
151.401 167.036 li
149.755 168.983 li
149.63 168.879 li
149.766 168.719 li
149.925 168.532 149.983 168.349 149.946 168.172 cv
149.921 168.059 149.771 167.887 149.497 167.659 cv
146.55 165.192 li
146.319 164.999 146.153 164.885 146.056 164.854 cv
145.98 164.829 145.894 164.833 145.795 164.87 cv
145.661 164.92 145.546 165 145.453 165.11 cv
145.317 165.27 li
145.194 165.167 li
148.05 161.792 li
149.089 162.586 li
148.989 162.704 li
148.728 162.583 148.515 162.519 148.349 162.512 cv
148.184 162.506 148.032 162.541 147.892 162.616 cv
147.751 162.69 147.581 162.846 147.382 163.083 cv
146.534 164.083 li
cp
.8 0 1 0 cmyk
f
151.387 162.784 mo
152.587 161.366 li
152.38 161.211 152.222 161.119 152.11 161.086 cv
151.938 161.037 151.769 161.038 151.604 161.088 cv
151.438 161.139 151.305 161.224 151.203 161.344 cv
151.047 161.529 150.978 161.755 151 162.022 cv
151.021 162.29 151.149 162.543 151.387 162.784 cv
cp
151.581 162.948 mo
152.037 163.333 152.489 163.522 152.938 163.517 cv
153.388 163.511 153.739 163.358 153.994 163.057 cv
154.164 162.856 154.256 162.635 154.271 162.394 cv
154.284 162.153 154.2 161.87 154.017 161.543 cv
154.171 161.497 li
154.438 161.8 154.603 162.171 154.665 162.607 cv
154.726 163.043 154.614 163.431 154.327 163.77 cv
154.016 164.139 153.604 164.333 153.095 164.354 cv
152.585 164.374 152.087 164.181 151.601 163.774 cv
151.073 163.333 150.775 162.854 150.709 162.338 cv
150.642 161.824 150.779 161.362 151.122 160.957 cv
151.413 160.614 151.766 160.427 152.181 160.397 cv
152.595 160.366 152.993 160.51 153.374 160.829 cv
151.581 162.948 li
cp
f
155.466 157.523 mo
157.308 159.065 li
157.517 159.046 157.701 159 157.86 158.925 cv
158.021 158.852 158.155 158.751 158.263 158.625 cv
158.435 158.422 158.481 158.138 158.406 157.776 cv
158.329 157.413 158.078 157.053 157.649 156.694 cv
157.255 156.364 156.878 156.198 156.518 156.196 cv
156.157 156.193 155.882 156.303 155.694 156.526 cv
155.593 156.645 155.524 156.788 155.485 156.958 cv
155.454 157.083 155.447 157.272 155.466 157.523 cv
cp
155.249 157.342 mo
155.086 156.7 155.149 156.206 155.44 155.863 cv
155.706 155.548 156.073 155.387 156.542 155.379 cv
157.01 155.372 157.479 155.563 157.947 155.956 cv
158.493 156.413 158.782 156.962 158.811 157.604 cv
158.835 158.153 158.687 158.62 158.364 159 cv
158.213 159.179 158.026 159.333 157.806 159.463 cv
157.585 159.592 157.328 159.698 157.036 159.782 cv
153.844 157.11 li
153.494 156.817 153.272 156.645 153.177 156.594 cv
153.082 156.543 153.005 156.524 152.946 156.535 cv
152.886 156.546 152.833 156.579 152.788 156.631 cv
152.735 156.694 152.688 156.788 152.644 156.911 cv
152.487 156.859 li
152.889 155.624 li
153.017 155.473 li
155.249 157.342 li
cp
f
157.575 153.34 mo
158.268 153.92 li
158.022 153.277 158.015 152.821 158.243 152.551 cv
158.347 152.428 158.47 152.358 158.612 152.34 cv
158.755 152.323 158.876 152.356 158.976 152.438 cv
159.063 152.511 159.112 152.602 159.124 152.711 cv
159.135 152.819 159.106 152.915 159.04 152.995 cv
158.974 153.073 158.86 153.127 158.701 153.16 cv
158.542 153.192 158.442 153.232 158.401 153.279 cv
158.368 153.319 158.354 153.381 158.358 153.465 cv
158.366 153.643 158.43 153.874 158.55 154.157 cv
160.026 155.392 li
160.196 155.535 160.345 155.622 160.467 155.653 cv
160.552 155.674 160.646 155.665 160.748 155.625 cv
160.851 155.584 160.961 155.497 161.078 155.358 cv
161.199 155.459 li
159.871 157.028 li
159.75 156.926 li
159.883 156.77 159.956 156.634 159.971 156.516 cv
159.983 156.432 159.958 156.344 159.898 156.256 cv
159.87 156.213 159.765 156.117 159.587 155.967 cv
158.392 154.967 li
158.033 154.667 157.813 154.496 157.733 154.454 cv
157.652 154.41 157.58 154.395 157.516 154.408 cv
157.451 154.42 157.395 154.456 157.345 154.514 cv
157.287 154.583 157.237 154.674 157.196 154.79 cv
157.048 154.723 li
157.456 153.481 li
157.575 153.34 li
cp
f
160.239 152.324 mo
161.439 150.905 li
161.232 150.75 161.073 150.659 160.963 150.625 cv
160.79 150.577 160.621 150.579 160.456 150.628 cv
160.29 150.678 160.157 150.764 160.056 150.883 cv
159.899 151.069 159.83 151.295 159.853 151.562 cv
159.873 151.829 160.002 152.083 160.239 152.324 cv
cp
160.434 152.487 mo
160.89 152.872 161.341 153.062 161.79 153.057 cv
162.239 153.051 162.591 152.898 162.847 152.597 cv
163.017 152.397 163.108 152.176 163.122 151.934 cv
163.137 151.693 163.052 151.409 162.868 151.083 cv
163.023 151.037 li
163.291 151.34 163.455 151.711 163.517 152.147 cv
163.578 152.583 163.467 152.971 163.18 153.31 cv
162.868 153.678 162.457 153.872 161.948 153.893 cv
161.438 153.915 160.939 153.721 160.452 153.314 cv
159.926 152.873 159.628 152.395 159.562 151.879 cv
159.493 151.364 159.632 150.903 159.975 150.497 cv
160.265 150.153 160.618 149.967 161.032 149.936 cv
161.447 149.906 161.845 150.049 162.226 150.37 cv
160.434 152.487 li
cp
f
162.745 148.553 mo
162.71 148.142 162.692 147.903 162.693 147.834 cv
162.692 147.663 162.719 147.5 162.77 147.343 cv
162.82 147.189 162.894 147.055 162.991 146.94 cv
163.153 146.749 163.348 146.63 163.577 146.585 cv
163.807 146.542 164.047 146.585 164.3 146.716 cv
164.226 146.262 164.213 145.919 164.263 145.691 cv
164.313 145.463 164.409 145.264 164.55 145.098 cv
164.688 144.934 164.853 144.826 165.043 144.77 cv
165.233 144.713 165.456 144.729 165.708 144.815 cv
165.88 144.875 166.104 145.02 166.384 145.254 cv
167.708 146.362 li
167.901 146.524 168.045 146.62 168.142 146.652 cv
168.21 146.67 168.286 146.665 168.372 146.633 cv
168.458 146.602 168.558 146.519 168.674 146.382 cv
168.795 146.484 li
167.515 147.996 li
167.394 147.894 li
167.448 147.831 li
167.56 147.7 167.62 147.575 167.632 147.458 cv
167.638 147.377 167.612 147.293 167.554 147.205 cv
167.522 147.164 167.417 147.069 167.237 146.918 cv
165.913 145.809 li
165.661 145.598 165.458 145.481 165.306 145.454 cv
165.087 145.421 164.898 145.5 164.736 145.693 cv
164.636 145.811 164.564 145.954 164.524 146.124 cv
164.481 146.292 164.47 146.53 164.488 146.834 cv
164.519 146.872 li
164.669 146.985 li
166.14 148.215 li
166.351 148.393 166.491 148.491 166.563 148.51 cv
166.635 148.531 166.714 148.522 166.804 148.487 cv
166.894 148.452 167.005 148.355 167.136 148.2 cv
167.257 148.301 li
165.947 149.849 li
165.826 149.748 li
165.97 149.579 166.047 149.445 166.062 149.347 cv
166.075 149.25 166.052 149.156 165.991 149.063 cv
165.963 149.02 165.856 148.922 165.673 148.768 cv
164.348 147.66 li
164.096 147.449 163.884 147.334 163.712 147.316 cv
163.485 147.293 163.298 147.372 163.148 147.547 cv
163.047 147.667 162.978 147.814 162.943 147.987 cv
162.886 148.254 162.876 148.491 162.914 148.694 cv
164.565 150.076 li
164.768 150.245 164.911 150.34 164.995 150.364 cv
165.079 150.387 165.159 150.382 165.235 150.354 cv
165.312 150.325 165.421 150.226 165.562 150.059 cv
165.683 150.161 li
164.401 151.675 li
164.28 151.574 li
164.399 151.434 164.468 151.323 164.483 151.243 cv
164.501 151.161 164.489 151.079 164.447 150.995 cv
164.405 150.909 164.289 150.788 164.099 150.627 cv
162.921 149.643 li
162.583 149.36 162.355 149.186 162.239 149.124 cv
162.153 149.078 162.081 149.059 162.024 149.069 cv
161.968 149.081 161.916 149.114 161.866 149.171 cv
161.813 149.234 161.767 149.323 161.728 149.437 cv
161.563 149.387 li
161.969 148.148 li
162.091 148.004 li
162.745 148.553 li
cp
f
167.506 141.606 mo
168.556 142.483 li
168.462 142.594 li
168.06 142.403 167.743 142.324 167.513 142.357 cv
167.282 142.39 167.079 142.51 166.905 142.715 cv
166.773 142.871 166.708 143.032 166.71 143.197 cv
166.712 143.362 166.763 143.487 166.864 143.571 cv
166.989 143.676 167.127 143.731 167.277 143.735 cv
167.429 143.743 167.645 143.683 167.927 143.559 cv
168.579 143.27 li
169.185 143.002 169.668 143.022 170.031 143.326 cv
170.312 143.56 170.448 143.854 170.441 144.208 cv
170.435 144.563 170.321 144.872 170.101 145.131 cv
169.942 145.319 169.728 145.504 169.456 145.69 cv
169.372 145.745 169.31 145.795 169.27 145.842 cv
169.226 145.893 169.222 145.958 169.255 146.036 cv
169.162 146.145 li
168.062 145.225 li
168.155 145.114 li
168.521 145.315 168.859 145.393 169.168 145.35 cv
169.477 145.309 169.723 145.178 169.907 144.959 cv
170.038 144.805 170.099 144.641 170.09 144.468 cv
170.081 144.295 170.013 144.156 169.885 144.049 cv
169.729 143.918 169.555 143.864 169.358 143.883 cv
169.16 143.905 168.845 144.008 168.409 144.196 cv
167.974 144.385 167.649 144.475 167.435 144.465 cv
167.222 144.459 167.018 144.374 166.823 144.211 cv
166.569 143.999 166.431 143.735 166.406 143.42 cv
166.382 143.104 166.486 142.81 166.718 142.536 cv
166.821 142.415 166.97 142.29 167.167 142.162 cv
167.297 142.077 167.377 142.014 167.409 141.977 cv
167.439 141.94 167.455 141.907 167.456 141.874 cv
167.458 141.84 167.442 141.788 167.413 141.715 cv
167.506 141.606 li
cp
f
185.024 162.944 mo
186.737 164.534 li
187.478 163.745 li
187.648 163.563 187.733 163.393 187.731 163.235 cv
187.729 163.077 187.624 162.873 187.411 162.624 cv
187.522 162.506 li
188.997 163.875 li
188.887 163.994 li
188.715 163.838 188.571 163.745 188.452 163.713 cv
188.333 163.681 188.221 163.683 188.112 163.72 cv
188.003 163.756 187.882 163.848 187.745 163.993 cv
187.005 164.782 li
188.372 166.052 li
188.594 166.258 188.751 166.379 188.849 166.417 cv
188.923 166.446 189.011 166.443 189.112 166.411 cv
189.253 166.365 189.37 166.291 189.466 166.189 cv
189.612 166.032 li
189.731 166.143 li
187.985 168.002 li
187.867 167.891 li
188.011 167.739 li
188.179 167.559 188.249 167.381 188.22 167.203 cv
188.199 167.087 188.058 166.909 187.796 166.666 cv
184.981 164.052 li
184.761 163.848 184.603 163.727 184.507 163.688 cv
184.433 163.661 184.345 163.661 184.243 163.692 cv
184.107 163.735 183.989 163.809 183.892 163.914 cv
183.747 164.067 li
183.629 163.957 li
186.656 160.733 li
187.652 161.581 li
187.548 161.692 li
187.291 161.558 187.081 161.483 186.917 161.468 cv
186.753 161.454 186.599 161.481 186.455 161.547 cv
186.312 161.616 186.134 161.762 185.922 161.989 cv
185.024 162.944 li
cp
1 0 0 .29 cmyk
f
189.937 161.895 mo
191.209 160.54 li
191.011 160.375 190.856 160.275 190.747 160.237 cv
190.577 160.178 190.409 160.17 190.241 160.212 cv
190.073 160.254 189.936 160.333 189.827 160.448 cv
189.661 160.625 189.583 160.847 189.59 161.115 cv
189.597 161.383 189.712 161.643 189.937 161.895 cv
cp
190.122 162.068 mo
190.558 162.476 191.001 162.688 191.448 162.706 cv
191.896 162.724 192.257 162.588 192.526 162.301 cv
192.706 162.11 192.81 161.894 192.837 161.654 cv
192.863 161.413 192.794 161.125 192.626 160.792 cv
192.784 160.752 li
193.034 161.069 193.181 161.448 193.22 161.887 cv
193.259 162.325 193.126 162.708 192.821 163.032 cv
192.492 163.382 192.071 163.555 191.562 163.55 cv
191.052 163.544 190.563 163.327 190.099 162.894 cv
189.595 162.427 189.323 161.935 189.282 161.417 cv
189.242 160.897 189.403 160.444 189.767 160.056 cv
190.075 159.729 190.437 159.56 190.853 159.551 cv
191.268 159.543 191.657 159.707 192.022 160.045 cv
190.122 162.068 li
cp
f
194.153 156.635 mo
194.06 155.907 194.159 155.385 194.451 155.075 cv
194.601 154.915 194.77 154.815 194.958 154.774 cv
195.147 154.735 195.364 154.765 195.614 154.868 cv
195.785 154.941 196.005 155.1 196.271 155.347 cv
197.526 156.514 li
197.713 156.687 197.854 156.79 197.948 156.821 cv
198.023 156.847 198.101 156.848 198.181 156.825 cv
198.259 156.799 198.364 156.717 198.497 156.577 cv
198.612 156.684 li
197.253 158.131 li
197.137 158.024 li
197.194 157.963 li
197.322 157.827 197.391 157.711 197.399 157.62 cv
197.409 157.526 197.384 157.43 197.322 157.334 cv
197.298 157.295 197.201 157.198 197.032 157.042 cv
195.827 155.922 li
195.56 155.673 195.332 155.528 195.146 155.485 cv
194.96 155.441 194.79 155.5 194.636 155.666 cv
194.397 155.918 194.3 156.301 194.343 156.811 cv
195.896 158.252 li
196.095 158.436 196.228 158.54 196.298 158.56 cv
196.388 158.587 196.472 158.588 196.55 158.563 cv
196.627 158.538 196.741 158.446 196.892 158.286 cv
197.007 158.393 li
195.647 159.84 li
195.532 159.733 li
195.593 159.669 li
195.731 159.52 195.788 159.383 195.762 159.262 cv
195.734 159.139 195.614 158.978 195.399 158.78 cv
194.308 157.764 li
193.954 157.436 193.731 157.245 193.638 157.189 cv
193.547 157.133 193.472 157.109 193.411 157.116 cv
193.354 157.124 193.298 157.155 193.246 157.209 cv
193.19 157.27 193.14 157.356 193.093 157.469 cv
192.933 157.41 li
193.401 156.193 li
193.53 156.055 li
194.153 156.635 li
cp
f
198.296 151.152 mo
200.079 152.807 li
200.421 153.124 200.636 153.309 200.728 153.364 cv
200.819 153.418 200.896 153.442 200.959 153.435 cv
201.022 153.428 201.075 153.401 201.12 153.354 cv
201.181 153.288 201.233 153.196 201.274 153.079 cv
201.429 153.138 li
200.971 154.352 li
200.835 154.496 li
200.212 153.917 li
200.25 154.422 200.242 154.774 200.189 154.972 cv
200.135 155.169 200.04 155.342 199.902 155.489 cv
199.748 155.654 199.566 155.75 199.358 155.783 cv
199.151 155.815 198.948 155.784 198.755 155.692 cv
198.562 155.599 198.327 155.426 198.054 155.171 cv
196.739 153.951 li
196.6 153.822 196.489 153.747 196.407 153.727 cv
196.326 153.708 196.243 153.713 196.159 153.745 cv
196.075 153.778 195.962 153.872 195.82 154.026 cv
195.702 153.916 li
196.665 152.889 li
198.636 154.719 li
198.909 154.973 199.133 155.093 199.308 155.079 cv
199.483 155.063 199.632 154.988 199.759 154.854 cv
199.845 154.762 199.913 154.631 199.965 154.461 cv
200.016 154.292 200.034 154.051 200.022 153.741 cv
198.354 152.192 li
198.188 152.037 198.046 151.962 197.931 151.968 cv
197.813 151.973 197.663 152.071 197.479 152.258 cv
197.36 152.149 li
198.296 151.152 li
cp
f
203.118 149.654 mo
203.433 150.093 203.587 150.524 203.579 150.948 cv
203.571 151.373 203.438 151.723 203.176 152.002 cv
202.863 152.335 202.45 152.495 201.938 152.481 cv
201.425 152.467 200.931 152.24 200.452 151.795 cv
199.99 151.366 199.742 150.88 199.71 150.338 cv
199.678 149.795 199.842 149.333 200.202 148.949 cv
200.472 148.661 200.771 148.497 201.098 148.454 cv
201.425 148.411 201.671 148.465 201.835 148.619 cv
201.917 148.694 201.959 148.782 201.96 148.879 cv
201.962 148.979 201.918 149.075 201.829 149.168 cv
201.712 149.294 201.583 149.352 201.441 149.34 cv
201.362 149.334 201.253 149.279 201.117 149.172 cv
200.979 149.067 200.842 149.021 200.706 149.034 cv
200.571 149.049 200.442 149.123 200.318 149.254 cv
200.118 149.467 200.036 149.713 200.073 149.99 cv
200.12 150.358 200.317 150.702 200.662 151.022 cv
201.013 151.348 201.404 151.549 201.835 151.627 cv
202.263 151.706 202.616 151.599 202.89 151.307 cv
203.085 151.098 203.19 150.844 203.202 150.544 cv
203.214 150.336 203.142 150.057 202.987 149.706 cv
203.118 149.654 li
cp
f
201.006 145.024 mo
204.91 148.65 li
205.095 148.821 205.229 148.92 205.313 148.95 cv
205.399 148.979 205.483 148.98 205.565 148.954 cv
205.649 148.926 205.762 148.838 205.903 148.686 cv
206.019 148.793 li
204.672 150.229 li
204.556 150.122 li
204.683 149.987 204.755 149.883 204.772 149.808 cv
204.79 149.733 204.781 149.651 204.743 149.564 cv
204.704 149.477 204.595 149.348 204.412 149.18 cv
201.739 146.698 li
201.407 146.389 201.195 146.208 201.106 146.151 cv
201.016 146.096 200.94 146.072 200.882 146.079 cv
200.823 146.086 200.769 146.115 200.722 146.167 cv
200.669 146.221 200.621 146.307 200.575 146.424 cv
200.411 146.375 li
200.87 145.168 li
201.006 145.024 li
cp
f
18.5352 196.085 mo
18.6963 195.616 18.7769 194.938 18.7769 194.049 cv
18.7769 193.341 18.7285 192.777 18.6318 192.354 cv
18.4497 191.568 18.1099 191.174 17.6118 191.174 cv
17.1133 191.174 16.772 191.58 16.5874 192.389 cv
16.4907 192.82 16.4424 193.388 16.4424 194.093 cv
16.4424 194.754 16.4922 195.283 16.5918 195.679 cv
16.7793 196.418 17.1309 196.789 17.647 196.789 cv
18.0776 196.789 18.3735 196.554 18.5352 196.085 cv
cp
19.2031 191.993 mo
19.499 192.561 19.6475 193.213 19.6475 193.951 cv
19.6475 194.531 19.5562 195.078 19.3745 195.59 cv
19.0317 196.555 18.4385 197.038 17.5942 197.038 cv
17.0166 197.038 16.542 196.777 16.1699 196.255 cv
15.771 195.699 15.5718 194.942 15.5718 193.986 cv
15.5718 193.234 15.7051 192.586 15.9717 192.044 cv
16.3325 191.307 16.8862 190.939 17.6338 190.939 cv
18.3076 190.939 18.8311 191.29 19.2031 191.993 cv
cp
0 0 0 1 cmyk
f
21.1069 196.913 mo
21.0103 196.816 20.9619 196.698 20.9619 196.561 cv
20.9619 196.424 21.0107 196.307 21.1089 196.211 cv
21.207 196.115 21.3252 196.067 21.4629 196.067 cv
21.6006 196.067 21.7178 196.115 21.8149 196.211 cv
21.9116 196.307 21.96 196.424 21.96 196.561 cv
21.96 196.698 21.9121 196.816 21.8169 196.913 cv
21.7217 197.01 21.6035 197.059 21.4629 197.059 cv
21.3223 197.059 21.2036 197.01 21.1069 196.913 cv
cp
f
24.9292 190.98 mo
24.9307 190.988 24.9312 191.004 24.9312 191.031 cv
24.9312 196.294 li
24.9312 196.519 24.9917 196.662 25.1123 196.723 cv
25.2334 196.784 25.4585 196.821 25.7886 196.833 cv
25.7886 196.955 li
23.3047 196.955 li
23.3047 196.824 li
23.6592 196.806 23.8906 196.758 23.9995 196.679 cv
24.1079 196.6 24.1621 196.43 24.1621 196.167 cv
24.1621 192.119 li
24.1621 191.979 24.1445 191.873 24.1094 191.8 cv
24.0742 191.727 23.9976 191.691 23.8804 191.691 cv
23.8042 191.691 23.7056 191.711 23.584 191.754 cv
23.4619 191.796 23.3486 191.84 23.2432 191.887 cv
23.2432 191.765 li
24.8564 190.948 li
24.9092 190.948 li
24.9209 190.962 24.9277 190.973 24.9292 190.98 cv
cp
f
25.6855 143.186 mo
25.687 143.194 25.6875 143.21 25.6875 143.237 cv
25.6875 148.5 li
25.6875 148.725 25.748 148.868 25.8687 148.929 cv
25.9897 148.99 26.2148 149.027 26.5449 149.039 cv
26.5449 149.161 li
24.061 149.161 li
24.061 149.03 li
24.4155 149.012 24.647 148.964 24.7559 148.885 cv
24.8643 148.806 24.9185 148.636 24.9185 148.374 cv
24.9185 144.325 li
24.9185 144.185 24.9009 144.079 24.8657 144.006 cv
24.8306 143.933 24.7539 143.897 24.6367 143.897 cv
24.5605 143.897 24.4619 143.917 24.3403 143.96 cv
24.2183 144.002 24.105 144.046 23.9995 144.093 cv
23.9995 143.971 li
25.6128 143.154 li
25.6655 143.154 li
25.6772 143.168 25.6841 143.179 25.6855 143.186 cv
cp
f
20.9321 95.3921 mo
20.9336 95.3999 20.9341 95.4165 20.9341 95.4429 cv
20.9341 100.707 li
20.9341 100.931 20.9946 101.074 21.1152 101.135 cv
21.2363 101.196 21.4614 101.233 21.7915 101.245 cv
21.7915 101.367 li
19.3076 101.367 li
19.3076 101.236 li
19.6621 101.218 19.8936 101.17 20.0024 101.091 cv
20.1108 101.012 20.165 100.842 20.165 100.58 cv
20.165 96.5308 li
20.165 96.3911 20.1475 96.2847 20.1123 96.2124 cv
20.0771 96.1392 20.0005 96.103 19.8833 96.103 cv
19.8071 96.103 19.7085 96.1235 19.5869 96.1665 cv
19.4648 96.2085 19.3516 96.2524 19.2461 96.2993 cv
19.2461 96.1772 li
20.8594 95.3599 li
20.9121 95.3599 li
20.9238 95.3745 20.9307 95.3853 20.9321 95.3921 cv
cp
f
25.7925 100.498 mo
25.9536 100.028 26.0342 99.3501 26.0342 98.4614 cv
26.0342 97.7534 25.9858 97.189 25.8892 96.7661 cv
25.707 95.98 25.3672 95.5864 24.8691 95.5864 cv
24.3706 95.5864 24.0293 95.9917 23.8447 96.8013 cv
23.748 97.2319 23.6997 97.8003 23.6997 98.5054 cv
23.6997 99.1665 23.7495 99.6948 23.8491 100.091 cv
24.0366 100.831 24.3882 101.201 24.9043 101.201 cv
25.335 101.201 25.6309 100.966 25.7925 100.498 cv
cp
26.4604 96.4048 mo
26.7563 96.9731 26.9048 97.6255 26.9048 98.3628 cv
26.9048 98.9429 26.8135 99.4897 26.6318 100.002 cv
26.2891 100.967 25.6958 101.45 24.8516 101.45 cv
24.2739 101.45 23.7993 101.189 23.4272 100.667 cv
23.0283 100.111 22.8291 99.354 22.8291 98.3979 cv
22.8291 97.646 22.9624 96.9985 23.229 96.4565 cv
23.5898 95.7192 24.1436 95.3511 24.8911 95.3511 cv
25.5649 95.3511 26.0884 95.7017 26.4604 96.4048 cv
cp
f
16.1777 47.5972 mo
16.1792 47.605 16.1797 47.6216 16.1797 47.6479 cv
16.1797 52.9116 li
16.1797 53.1362 16.2402 53.2788 16.3608 53.3403 cv
16.4819 53.4009 16.707 53.438 17.0371 53.4497 cv
17.0371 53.5718 li
14.5532 53.5718 li
14.5532 53.4409 li
14.9077 53.4233 15.1392 53.3755 15.248 53.2964 cv
15.3564 53.2173 15.4106 53.0474 15.4106 52.7847 cv
15.4106 48.7358 li
15.4106 48.5962 15.3931 48.4897 15.3579 48.4175 cv
15.3228 48.3442 15.2461 48.3081 15.1289 48.3081 cv
15.0527 48.3081 14.9541 48.3286 14.8325 48.3716 cv
14.7104 48.4136 14.5972 48.4575 14.4917 48.5044 cv
14.4917 48.3823 li
16.105 47.5649 li
16.1577 47.5649 li
16.1694 47.5796 16.1763 47.5903 16.1777 47.5972 cv
cp
f
21.0381 52.7026 mo
21.1992 52.2329 21.2798 51.5552 21.2798 50.6665 cv
21.2798 49.9585 21.2314 49.394 21.1348 48.9712 cv
20.9526 48.1851 20.6128 47.7915 20.1147 47.7915 cv
19.6162 47.7915 19.2749 48.1968 19.0903 49.0063 cv
18.9937 49.437 18.9453 50.0054 18.9453 50.7104 cv
18.9453 51.3716 18.9951 51.8999 19.0947 52.2964 cv
19.2822 53.0356 19.6338 53.4058 20.1499 53.4058 cv
20.5806 53.4058 20.8765 53.1714 21.0381 52.7026 cv
cp
21.7061 48.6099 mo
22.002 49.1782 22.1504 49.8306 22.1504 50.5679 cv
22.1504 51.1479 22.0591 51.6948 21.8774 52.2075 cv
21.5347 53.1724 20.9414 53.6548 20.0972 53.6548 cv
19.5195 53.6548 19.0449 53.394 18.6729 52.8726 cv
18.2739 52.3159 18.0747 51.5591 18.0747 50.603 cv
18.0747 49.8511 18.208 49.2036 18.4746 48.6616 cv
18.8354 47.9243 19.3892 47.5562 20.1367 47.5562 cv
20.8105 47.5562 21.334 47.9067 21.7061 48.6099 cv
cp
f
25.54 52.7026 mo
25.7012 52.2329 25.7817 51.5552 25.7817 50.6665 cv
25.7817 49.9585 25.7334 49.394 25.6367 48.9712 cv
25.4546 48.1851 25.1147 47.7915 24.6167 47.7915 cv
24.1182 47.7915 23.7769 48.1968 23.5923 49.0063 cv
23.4956 49.437 23.4473 50.0054 23.4473 50.7104 cv
23.4473 51.3716 23.4971 51.8999 23.5967 52.2964 cv
23.7842 53.0356 24.1357 53.4058 24.6519 53.4058 cv
25.0825 53.4058 25.3784 53.1714 25.54 52.7026 cv
cp
26.208 48.6099 mo
26.5039 49.1782 26.6523 49.8306 26.6523 50.5679 cv
26.6523 51.1479 26.561 51.6948 26.3794 52.2075 cv
26.0366 53.1724 25.4434 53.6548 24.5991 53.6548 cv
24.0215 53.6548 23.5469 53.394 23.1748 52.8726 cv
22.7759 52.3159 22.5767 51.5591 22.5767 50.603 cv
22.5767 49.8511 22.71 49.2036 22.9766 48.6616 cv
23.3374 47.9243 23.8911 47.5562 24.6387 47.5562 cv
25.3125 47.5562 25.8359 47.9067 26.208 48.6099 cv
cp
f
11.4238 .0415039 mo
11.4253 .0488281 11.4258 .065918 11.4258 .0917969 cv
11.4258 5.35596 li
11.4258 5.58057 11.4863 5.72314 11.6069 5.78418 cv
11.728 5.8457 11.9531 5.88232 12.2832 5.89355 cv
12.2832 6.01611 li
9.79932 6.01611 li
9.79932 5.88477 li
10.1538 5.86768 10.3853 5.81934 10.4941 5.74072 cv
10.6025 5.66211 10.6567 5.4917 10.6567 5.229 cv
10.6567 1.18066 li
10.6567 1.04053 10.6392 .93457 10.604 .861328 cv
10.5688 .788574 10.4922 .751953 10.375 .751953 cv
10.2988 .751953 10.2002 .773438 10.0786 .81543 cv
9.95654 .85791 9.84326 .902344 9.73779 .94873 cv
9.73779 .82666 li
11.3511 .00878906 li
11.4038 .00878906 li
11.4155 .0234375 11.4224 .034668 11.4238 .0415039 cv
cp
f
16.2842 5.14648 mo
16.4453 4.67773 16.5259 3.99902 16.5259 3.11084 cv
16.5259 2.40332 16.4775 1.83789 16.3809 1.41602 cv
16.1987 .629395 15.8589 .236328 15.3608 .236328 cv
14.8623 .236328 14.521 .641113 14.3364 1.45068 cv
14.2397 1.88184 14.1914 2.44971 14.1914 3.1543 cv
14.1914 3.81543 14.2412 4.34424 14.3408 4.74023 cv
14.5283 5.47998 14.8799 5.8501 15.396 5.8501 cv
15.8267 5.8501 16.1226 5.61572 16.2842 5.14648 cv
cp
16.9521 1.05371 mo
17.248 1.62207 17.3965 2.2749 17.3965 3.0127 cv
17.3965 3.59277 17.3052 4.13916 17.1235 4.65186 cv
16.7808 5.6167 16.1875 6.09912 15.3433 6.09912 cv
14.7656 6.09912 14.291 5.83838 13.9189 5.31641 cv
13.52 4.75977 13.3208 4.00342 13.3208 3.04736 cv
13.3208 2.29541 13.4541 1.64844 13.7207 1.10645 cv
14.0815 .369141 14.6353 0 15.3828 0 cv
16.0566 0 16.5801 .351563 16.9521 1.05371 cv
cp
f
20.7861 5.14648 mo
20.9473 4.67773 21.0278 3.99902 21.0278 3.11084 cv
21.0278 2.40332 20.9795 1.83789 20.8828 1.41602 cv
20.7007 .629395 20.3608 .236328 19.8628 .236328 cv
19.3643 .236328 19.0229 .641113 18.8384 1.45068 cv
18.7417 1.88184 18.6934 2.44971 18.6934 3.1543 cv
18.6934 3.81543 18.7432 4.34424 18.8428 4.74023 cv
19.0303 5.47998 19.3818 5.8501 19.8979 5.8501 cv
20.3286 5.8501 20.6245 5.61572 20.7861 5.14648 cv
cp
21.4541 1.05371 mo
21.75 1.62207 21.8984 2.2749 21.8984 3.0127 cv
21.8984 3.59277 21.8071 4.13916 21.6255 4.65186 cv
21.2827 5.6167 20.6895 6.09912 19.8452 6.09912 cv
19.2676 6.09912 18.793 5.83838 18.4209 5.31641 cv
18.022 4.75977 17.8228 4.00342 17.8228 3.04736 cv
17.8228 2.29541 17.9561 1.64844 18.2227 1.10645 cv
18.5835 .369141 19.1372 0 19.8848 0 cv
20.5586 0 21.082 .351563 21.4541 1.05371 cv
cp
f
25.2881 5.14648 mo
25.4492 4.67773 25.5298 3.99902 25.5298 3.11084 cv
25.5298 2.40332 25.4814 1.83789 25.3848 1.41602 cv
25.2026 .629395 24.8628 .236328 24.3647 .236328 cv
23.8662 .236328 23.5249 .641113 23.3403 1.45068 cv
23.2437 1.88184 23.1953 2.44971 23.1953 3.1543 cv
23.1953 3.81543 23.2451 4.34424 23.3447 4.74023 cv
23.5322 5.47998 23.8838 5.8501 24.3999 5.8501 cv
24.8306 5.8501 25.1265 5.61572 25.2881 5.14648 cv
cp
25.9561 1.05371 mo
26.252 1.62207 26.4004 2.2749 26.4004 3.0127 cv
26.4004 3.59277 26.3091 4.13916 26.1274 4.65186 cv
25.7847 5.6167 25.1914 6.09912 24.3472 6.09912 cv
23.7695 6.09912 23.2949 5.83838 22.9229 5.31641 cv
22.5239 4.75977 22.3247 4.00342 22.3247 3.04736 cv
22.3247 2.29541 22.458 1.64844 22.7246 1.10645 cv
23.0854 .369141 23.6392 0 24.3867 0 cv
25.0605 0 25.584 .351563 25.9561 1.05371 cv
cp
f
124.942 200.671 mo
124.944 200.679 124.945 200.696 124.945 200.722 cv
124.945 205.986 li
124.945 206.21 125.005 206.353 125.126 206.415 cv
125.247 206.475 125.473 206.512 125.803 206.524 cv
125.803 206.646 li
123.318 206.646 li
123.318 206.515 li
123.673 206.498 123.904 206.45 124.013 206.371 cv
124.121 206.292 124.176 206.122 124.176 205.859 cv
124.176 201.81 li
124.176 201.67 124.158 201.564 124.123 201.492 cv
124.088 201.418 124.012 201.382 123.895 201.382 cv
123.818 201.382 123.719 201.403 123.598 201.446 cv
123.476 201.488 123.362 201.532 123.257 201.579 cv
123.257 201.457 li
124.87 200.639 li
124.923 200.639 li
124.935 200.654 124.941 200.665 124.942 200.671 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
129.803 205.777 mo
129.964 205.307 130.045 204.629 130.045 203.741 cv
130.045 203.033 129.996 202.468 129.899 202.045 cv
129.718 201.259 129.378 200.866 128.88 200.866 cv
128.382 200.866 128.04 201.271 127.855 202.081 cv
127.759 202.511 127.71 203.08 127.71 203.785 cv
127.71 204.446 127.76 204.974 127.859 205.371 cv
128.048 206.11 128.399 206.48 128.915 206.48 cv
129.346 206.48 129.642 206.246 129.803 205.777 cv
cp
130.472 201.684 mo
130.768 202.252 130.915 202.905 130.915 203.642 cv
130.915 204.222 130.824 204.769 130.643 205.282 cv
130.3 206.247 129.706 206.729 128.862 206.729 cv
128.285 206.729 127.81 206.468 127.438 205.947 cv
127.039 205.39 126.84 204.633 126.84 203.677 cv
126.84 202.925 126.974 202.278 127.24 201.736 cv
127.601 200.999 128.154 200.63 128.901 200.63 cv
129.576 200.63 130.099 200.981 130.472 201.684 cv
cp
f
132.51 202.577 mo
133.464 201.593 134.11 200.871 134.452 200.41 cv
134.793 199.95 134.964 199.5 134.964 199.063 cv
134.964 198.68 134.859 198.388 134.651 198.187 cv
134.443 197.987 134.194 197.886 133.905 197.886 cv
133.548 197.886 133.259 198.016 133.037 198.275 cv
132.915 198.417 132.798 198.636 132.686 198.931 cv
132.518 198.896 li
132.647 198.3 132.869 197.886 133.18 197.655 cv
133.491 197.423 133.825 197.307 134.183 197.307 cv
134.623 197.307 134.979 197.445 135.251 197.721 cv
135.523 197.997 135.659 198.333 135.659 198.733 cv
135.659 199.157 135.513 199.566 135.218 199.959 cv
134.924 200.353 134.283 201.053 133.299 202.06 cv
135.093 202.06 li
135.343 202.06 135.519 202.031 135.62 201.971 cv
135.722 201.912 135.837 201.766 135.965 201.536 cv
136.066 201.583 li
135.632 202.667 li
132.51 202.667 li
132.51 202.577 li
cp
f
78.481 200.671 mo
78.4824 200.679 78.4829 200.696 78.4829 200.722 cv
78.4829 205.986 li
78.4829 206.21 78.5435 206.353 78.6641 206.415 cv
78.7852 206.475 79.0103 206.512 79.3403 206.524 cv
79.3403 206.646 li
76.8564 206.646 li
76.8564 206.515 li
77.2109 206.498 77.4424 206.45 77.5513 206.371 cv
77.6597 206.292 77.7139 206.122 77.7139 205.859 cv
77.7139 201.81 li
77.7139 201.67 77.6963 201.564 77.6611 201.492 cv
77.626 201.418 77.5493 201.382 77.4321 201.382 cv
77.356 201.382 77.2573 201.403 77.1357 201.446 cv
77.0137 201.488 76.9004 201.532 76.7949 201.579 cv
76.7949 201.457 li
78.4082 200.639 li
78.4609 200.639 li
78.4727 200.654 78.4795 200.665 78.481 200.671 cv
cp
f
83.3413 205.777 mo
83.5024 205.307 83.583 204.629 83.583 203.741 cv
83.583 203.033 83.5347 202.468 83.438 202.045 cv
83.2559 201.259 82.916 200.866 82.418 200.866 cv
81.9194 200.866 81.5781 201.271 81.3936 202.081 cv
81.2969 202.511 81.2485 203.08 81.2485 203.785 cv
81.2485 204.446 81.2983 204.974 81.3979 205.371 cv
81.5854 206.11 81.937 206.48 82.4531 206.48 cv
82.8838 206.48 83.1797 206.246 83.3413 205.777 cv
cp
84.0093 201.684 mo
84.3052 202.252 84.4536 202.905 84.4536 203.642 cv
84.4536 204.222 84.3623 204.769 84.1807 205.282 cv
83.8379 206.247 83.2446 206.729 82.4004 206.729 cv
81.8228 206.729 81.3481 206.468 80.9761 205.947 cv
80.5771 205.39 80.3779 204.633 80.3779 203.677 cv
80.3779 202.925 80.5112 202.278 80.7778 201.736 cv
81.1387 200.999 81.6924 200.63 82.4399 200.63 cv
83.1138 200.63 83.6372 200.981 84.0093 201.684 cv
cp
f
177.327 205.777 mo
177.488 205.307 177.569 204.629 177.569 203.741 cv
177.569 203.033 177.521 202.468 177.424 202.045 cv
177.242 201.259 176.902 200.866 176.404 200.866 cv
175.906 200.866 175.564 201.271 175.38 202.081 cv
175.283 202.511 175.234 203.08 175.234 203.785 cv
175.234 204.446 175.284 204.974 175.384 205.371 cv
175.572 206.11 175.924 206.48 176.439 206.48 cv
176.87 206.48 177.166 206.246 177.327 205.777 cv
cp
177.996 201.684 mo
178.292 202.252 178.439 202.905 178.439 203.642 cv
178.439 204.222 178.349 204.769 178.167 205.282 cv
177.824 206.247 177.23 206.729 176.387 206.729 cv
175.81 206.729 175.334 206.468 174.962 205.947 cv
174.563 205.39 174.364 204.633 174.364 203.677 cv
174.364 202.925 174.498 202.278 174.765 201.736 cv
175.125 200.999 175.679 200.63 176.426 200.63 cv
177.101 200.63 177.623 200.981 177.996 201.684 cv
cp
f
171.962 200.671 mo
171.964 200.679 171.965 200.696 171.965 200.722 cv
171.965 205.986 li
171.965 206.21 172.024 206.353 172.146 206.415 cv
172.267 206.475 172.492 206.512 172.822 206.524 cv
172.822 206.646 li
170.338 206.646 li
170.338 206.515 li
170.692 206.498 170.924 206.45 171.032 206.371 cv
171.141 206.292 171.195 206.122 171.195 205.859 cv
171.195 201.81 li
171.195 201.67 171.178 201.564 171.143 201.492 cv
171.107 201.418 171.031 201.382 170.914 201.382 cv
170.838 201.382 170.738 201.403 170.617 201.446 cv
170.495 201.488 170.382 201.532 170.276 201.579 cv
170.276 201.457 li
171.89 200.639 li
171.942 200.639 li
171.954 200.654 171.961 200.665 171.962 200.671 cv
cp
f
33.6304 200.671 mo
33.6318 200.679 33.6323 200.696 33.6323 200.722 cv
33.6323 205.986 li
33.6323 206.21 33.6929 206.353 33.8135 206.415 cv
33.9346 206.475 34.1597 206.512 34.4897 206.524 cv
34.4897 206.646 li
32.0059 206.646 li
32.0059 206.515 li
32.3604 206.498 32.5918 206.45 32.7007 206.371 cv
32.8091 206.292 32.8633 206.122 32.8633 205.859 cv
32.8633 201.81 li
32.8633 201.67 32.8457 201.564 32.8105 201.492 cv
32.7754 201.418 32.6987 201.382 32.5815 201.382 cv
32.5054 201.382 32.4067 201.403 32.2852 201.446 cv
32.1631 201.488 32.0498 201.532 31.9443 201.579 cv
31.9443 201.457 li
33.5576 200.639 li
33.6104 200.639 li
33.6221 200.654 33.6289 200.665 33.6304 200.671 cv
cp
f
180.481 202.213 mo
180.717 202.363 180.917 202.437 181.081 202.437 cv
181.445 202.437 181.717 202.315 181.894 202.07 cv
182.071 201.824 182.159 201.557 182.159 201.269 cv
182.159 200.992 182.088 200.748 181.944 200.538 cv
181.702 200.182 181.293 200.004 180.718 200.004 cv
180.684 200.004 180.651 200.005 180.62 200.006 cv
180.589 200.007 180.552 200.011 180.511 200.016 cv
180.503 199.915 li
180.919 199.765 181.247 199.592 181.487 199.398 cv
181.727 199.204 181.847 198.948 181.847 198.628 cv
181.847 198.346 181.752 198.131 181.563 197.984 cv
181.375 197.835 181.159 197.762 180.917 197.762 cv
180.63 197.762 180.377 197.867 180.158 198.077 cv
180.039 198.191 179.91 198.367 179.771 198.605 cv
179.65 198.579 li
179.755 198.184 179.949 197.87 180.232 197.633 cv
180.517 197.398 180.845 197.28 181.218 197.28 cv
181.616 197.28 181.924 197.389 182.142 197.607 cv
182.359 197.824 182.468 198.076 182.468 198.361 cv
182.468 198.612 182.378 198.842 182.198 199.052 cv
182.097 199.171 181.939 199.305 181.726 199.453 cv
181.976 199.559 182.177 199.683 182.327 199.826 cv
182.611 200.098 182.753 200.442 182.753 200.86 cv
182.753 201.352 182.559 201.786 182.169 202.162 cv
181.779 202.537 181.226 202.725 180.507 202.725 cv
180.186 202.725 179.961 202.677 179.832 202.583 cv
179.703 202.489 179.639 202.386 179.639 202.278 cv
179.639 202.21 179.66 202.146 179.703 202.083 cv
179.746 202.021 179.816 201.991 179.912 201.991 cv
180.056 201.991 180.245 202.065 180.481 202.213 cv
cp
f
220.648 200.671 mo
220.65 200.679 220.651 200.696 220.651 200.722 cv
220.651 205.986 li
220.651 206.21 220.711 206.353 220.832 206.415 cv
220.953 206.475 221.179 206.512 221.509 206.524 cv
221.509 206.646 li
219.024 206.646 li
219.024 206.515 li
219.379 206.498 219.61 206.45 219.719 206.371 cv
219.827 206.292 219.882 206.122 219.882 205.859 cv
219.882 201.81 li
219.882 201.67 219.864 201.564 219.829 201.492 cv
219.794 201.418 219.718 201.382 219.601 201.382 cv
219.524 201.382 219.425 201.403 219.304 201.446 cv
219.182 201.488 219.068 201.532 218.963 201.579 cv
218.963 201.457 li
220.576 200.639 li
220.629 200.639 li
220.641 200.654 220.647 200.665 220.648 200.671 cv
cp
f
225.509 205.777 mo
225.67 205.307 225.751 204.629 225.751 203.741 cv
225.751 203.033 225.702 202.468 225.605 202.045 cv
225.424 201.259 225.084 200.866 224.586 200.866 cv
224.088 200.866 223.746 201.271 223.562 202.081 cv
223.465 202.511 223.416 203.08 223.416 203.785 cv
223.416 204.446 223.466 204.974 223.565 205.371 cv
223.754 206.11 224.105 206.48 224.621 206.48 cv
225.052 206.48 225.348 206.246 225.509 205.777 cv
cp
226.178 201.684 mo
226.474 202.252 226.621 202.905 226.621 203.642 cv
226.621 204.222 226.53 204.769 226.349 205.282 cv
226.006 206.247 225.412 206.729 224.568 206.729 cv
223.991 206.729 223.516 206.468 223.144 205.947 cv
222.745 205.39 222.546 204.633 222.546 203.677 cv
222.546 202.925 222.68 202.278 222.946 201.736 cv
223.307 200.999 223.86 200.63 224.607 200.63 cv
225.282 200.63 225.805 200.981 226.178 201.684 cv
cp
f
230.311 198.129 mo
228.393 200.825 li
230.311 200.825 li
230.311 198.129 li
cp
230.568 197.327 mo
230.939 197.327 li
230.939 200.825 li
231.757 200.825 li
231.757 201.341 li
230.939 201.341 li
230.939 202.667 li
230.318 202.667 li
230.318 201.341 li
228.067 201.341 li
228.067 200.825 li
230.568 197.327 li
cp
f
267.335 200.671 mo
267.337 200.679 267.338 200.696 267.338 200.722 cv
267.338 205.986 li
267.338 206.21 267.397 206.353 267.519 206.415 cv
267.64 206.475 267.865 206.512 268.195 206.524 cv
268.195 206.646 li
265.711 206.646 li
265.711 206.515 li
266.065 206.498 266.297 206.45 266.405 206.371 cv
266.514 206.292 266.568 206.122 266.568 205.859 cv
266.568 201.81 li
266.568 201.67 266.551 201.564 266.516 201.492 cv
266.48 201.418 266.404 201.382 266.287 201.382 cv
266.211 201.382 266.111 201.403 265.99 201.446 cv
265.868 201.488 265.755 201.532 265.649 201.579 cv
265.649 201.457 li
267.263 200.639 li
267.315 200.639 li
267.327 200.654 267.334 200.665 267.335 200.671 cv
cp
f
272.195 205.777 mo
272.356 205.307 272.438 204.629 272.438 203.741 cv
272.438 203.033 272.389 202.468 272.292 202.045 cv
272.11 201.259 271.771 200.866 271.272 200.866 cv
270.774 200.866 270.433 201.271 270.248 202.081 cv
270.151 202.511 270.103 203.08 270.103 203.785 cv
270.103 204.446 270.152 204.974 270.252 205.371 cv
270.44 206.11 270.792 206.48 271.308 206.48 cv
271.738 206.48 272.034 206.246 272.195 205.777 cv
cp
272.864 201.684 mo
273.16 202.252 273.308 202.905 273.308 203.642 cv
273.308 204.222 273.217 204.769 273.035 205.282 cv
272.692 206.247 272.099 206.729 271.255 206.729 cv
270.678 206.729 270.202 206.468 269.83 205.947 cv
269.432 205.39 269.232 204.633 269.232 203.677 cv
269.232 202.925 269.366 202.278 269.633 201.736 cv
269.993 200.999 270.547 200.63 271.294 200.63 cv
271.969 200.63 272.491 200.981 272.864 201.684 cv
cp
f
275.848 202.206 mo
276.089 202.374 276.274 202.457 276.405 202.457 cv
276.705 202.457 276.968 202.325 277.192 202.062 cv
277.416 201.799 277.528 201.476 277.528 201.092 cv
277.528 200.421 277.169 199.938 276.448 199.643 cv
276.049 199.48 275.678 199.398 275.333 199.398 cv
275.275 199.398 275.24 199.396 275.226 199.392 cv
275.211 199.388 275.193 199.375 275.173 199.352 cv
275.178 199.331 275.183 199.313 275.187 199.299 cv
275.19 199.285 275.195 199.271 275.2 199.258 cv
276.053 197.401 li
277.729 197.401 li
277.812 197.401 277.876 197.386 277.921 197.358 cv
277.967 197.33 278.026 197.276 278.099 197.199 cv
278.162 197.252 li
277.86 197.972 li
277.851 197.996 277.821 198.01 277.774 198.016 cv
277.728 198.023 277.677 198.026 277.622 198.026 cv
276.107 198.026 li
275.775 198.707 li
276.203 198.779 276.516 198.847 276.714 198.913 cv
277.04 199.021 277.313 199.182 277.532 199.394 cv
277.72 199.579 277.861 199.785 277.958 200.014 cv
278.055 200.244 278.103 200.486 278.103 200.743 cv
278.103 201.315 277.897 201.793 277.486 202.177 cv
277.076 202.56 276.556 202.752 275.928 202.752 cv
275.672 202.752 275.466 202.727 275.31 202.678 cv
275.049 202.598 274.918 202.454 274.918 202.247 cv
274.918 202.169 274.946 202.101 275.002 202.042 cv
275.059 201.985 275.146 201.956 275.263 201.956 cv
275.411 201.956 275.606 202.039 275.848 202.206 cv
cp
f
153.785 145.375 mo
148.922 141.259 li
126.234 168.203 li
131.098 172.319 li
153.785 145.375 li
0 0 0 0 cmyk
f
129.18 163.902 mo
130.913 165.471 li
131.644 164.674 li
131.812 164.491 131.894 164.319 131.89 164.161 cv
131.886 164.002 131.778 163.799 131.563 163.553 cv
131.673 163.434 li
133.164 164.785 li
133.055 164.905 li
132.882 164.751 132.735 164.661 132.617 164.629 cv
132.498 164.6 132.386 164.602 132.276 164.641 cv
132.169 164.679 132.047 164.77 131.913 164.917 cv
131.182 165.715 li
132.566 166.969 li
132.79 167.172 132.95 167.292 133.047 167.329 cv
133.121 167.356 133.209 167.353 133.311 167.32 cv
133.45 167.272 133.567 167.196 133.661 167.093 cv
133.806 166.934 li
133.927 167.043 li
132.204 168.924 li
132.083 168.815 li
132.226 168.661 li
132.392 168.479 132.459 168.3 132.428 168.122 cv
132.405 168.007 132.263 167.831 131.998 167.59 cv
129.15 165.011 li
128.928 164.809 128.768 164.69 128.671 164.653 cv
128.597 164.625 128.509 164.628 128.409 164.66 cv
128.272 164.706 128.155 164.78 128.06 164.885 cv
127.917 165.042 li
127.796 164.932 li
130.784 161.67 li
131.79 162.506 li
131.687 162.62 li
131.43 162.49 131.22 162.417 131.054 162.403 cv
130.89 162.391 130.736 162.419 130.593 162.489 cv
130.45 162.559 130.274 162.708 130.065 162.936 cv
129.18 163.902 li
cp
0 1 0 0 cmyk
f
134.078 162.793 mo
135.334 161.422 li
135.134 161.26 134.978 161.162 134.869 161.125 cv
134.698 161.07 134.528 161.063 134.362 161.107 cv
134.195 161.151 134.059 161.231 133.952 161.348 cv
133.788 161.527 133.711 161.75 133.722 162.017 cv
133.732 162.286 133.851 162.543 134.078 162.793 cv
cp
134.267 162.964 mo
134.708 163.368 135.152 163.574 135.601 163.586 cv
136.05 163.598 136.407 163.458 136.674 163.168 cv
136.851 162.974 136.952 162.757 136.976 162.516 cv
136.999 162.276 136.927 161.99 136.755 161.657 cv
136.911 161.616 li
137.167 161.93 137.317 162.307 137.362 162.745 cv
137.405 163.182 137.278 163.567 136.978 163.894 cv
136.653 164.249 136.234 164.427 135.725 164.428 cv
135.214 164.43 134.724 164.217 134.253 163.792 cv
133.744 163.331 133.466 162.84 133.419 162.323 cv
133.372 161.805 133.527 161.35 133.888 160.958 cv
134.19 160.625 134.551 160.453 134.966 160.44 cv
135.382 160.425 135.773 160.584 136.142 160.917 cv
134.267 162.964 li
cp
f
138.461 157.768 mo
139.573 158.775 li
139.813 158.993 139.981 159.125 140.075 159.176 cv
140.228 159.259 140.405 159.286 140.608 159.254 cv
140.812 159.223 140.995 159.119 141.158 158.94 cv
141.355 158.725 141.432 158.473 141.385 158.187 cv
141.323 157.811 141.093 157.443 140.692 157.08 cv
140.237 156.668 139.796 156.45 139.37 156.426 cv
139.075 156.411 138.839 156.499 138.665 156.688 cv
138.571 156.792 138.503 156.917 138.462 157.065 cv
138.431 157.178 138.431 157.413 138.461 157.768 cv
cp
136.997 158.334 mo
137.462 157.086 li
137.573 156.964 li
138.269 157.594 li
138.147 157.204 138.104 156.883 138.141 156.634 cv
138.177 156.385 138.272 156.176 138.429 156.006 cv
138.7 155.708 139.044 155.567 139.46 155.58 cv
139.97 155.596 140.454 155.811 140.913 156.227 cv
141.427 156.693 141.716 157.224 141.784 157.821 cv
141.839 158.313 141.698 158.741 141.363 159.106 cv
141.217 159.266 141.067 159.383 140.915 159.458 cv
140.805 159.516 140.65 159.553 140.454 159.573 cv
141.36 160.395 li
141.563 160.579 141.704 160.684 141.783 160.709 cv
141.86 160.735 141.944 160.731 142.032 160.699 cv
142.122 160.667 142.241 160.57 142.388 160.409 cv
142.509 160.518 li
141.089 162.069 li
140.968 161.959 li
141.042 161.879 li
141.151 161.762 141.222 161.64 141.251 161.513 cv
141.265 161.45 141.255 161.383 141.224 161.313 cv
141.191 161.243 141.066 161.11 140.85 160.914 cv
138.035 158.364 li
137.843 158.19 137.712 158.086 137.644 158.057 cv
137.576 158.027 137.512 158.019 137.452 158.034 cv
137.392 158.047 137.331 158.086 137.272 158.151 cv
137.225 158.203 137.18 158.282 137.137 158.389 cv
136.997 158.334 li
cp
f
143.802 154.983 mo
142.667 153.956 li
142.5 154.398 142.399 154.692 142.366 154.836 cv
142.306 155.092 142.294 155.304 142.331 155.471 cv
142.368 155.639 142.448 155.778 142.571 155.89 cv
142.728 156.032 142.899 156.103 143.087 156.104 cv
143.274 156.104 143.424 156.044 143.534 155.923 cv
143.685 155.76 143.774 155.446 143.802 154.983 cv
cp
144.013 155.174 mo
143.972 155.692 143.933 156.006 143.898 156.118 cv
143.847 156.282 143.76 156.43 143.64 156.562 cv
143.452 156.766 143.228 156.872 142.965 156.875 cv
142.702 156.881 142.457 156.78 142.228 156.572 cv
142.082 156.44 141.985 156.293 141.938 156.134 cv
141.872 155.912 141.874 155.632 141.944 155.296 cv
142.015 154.959 142.19 154.453 142.47 153.776 cv
142.353 153.67 li
142.056 153.401 141.81 153.262 141.612 153.256 cv
141.417 153.25 141.235 153.336 141.071 153.515 cv
140.947 153.651 140.886 153.792 140.887 153.938 cv
140.886 154.087 140.933 154.206 141.027 154.292 cv
141.222 154.456 li
141.321 154.545 141.376 154.641 141.384 154.741 cv
141.39 154.84 141.357 154.931 141.282 155.012 cv
141.21 155.092 141.122 155.133 141.019 155.131 cv
140.916 155.131 140.816 155.086 140.718 154.999 cv
140.532 154.831 140.447 154.581 140.466 154.249 cv
140.483 153.918 140.649 153.581 140.962 153.239 cv
141.203 152.976 141.446 152.8 141.688 152.713 cv
141.872 152.647 142.063 152.647 142.261 152.717 cv
142.39 152.763 142.598 152.917 142.886 153.177 cv
143.897 154.093 li
144.181 154.35 144.36 154.501 144.435 154.549 cv
144.507 154.596 144.566 154.618 144.61 154.612 cv
144.655 154.608 144.692 154.588 144.722 154.556 cv
144.753 154.522 144.774 154.485 144.782 154.446 cv
144.796 154.375 144.796 154.215 144.784 153.968 cv
144.966 154.133 li
145.07 154.668 145.022 155.046 144.82 155.267 cv
144.724 155.372 144.61 155.422 144.479 155.418 cv
144.349 155.414 144.192 155.333 144.013 155.174 cv
cp
f
143.468 150.504 mo
145.859 152.67 li
146.046 152.84 146.182 152.938 146.27 152.967 cv
146.355 152.997 146.438 152.999 146.517 152.973 cv
146.595 152.948 146.698 152.866 146.827 152.725 cv
146.944 152.832 li
145.626 154.27 li
145.509 154.164 li
145.642 154.019 145.717 153.91 145.733 153.834 cv
145.751 153.759 145.741 153.677 145.702 153.59 cv
145.663 153.502 145.553 153.374 145.368 153.207 cv
144.222 152.167 li
143.898 151.875 143.68 151.696 143.567 151.629 cv
143.483 151.582 143.413 151.561 143.357 151.57 cv
143.3 151.577 143.247 151.61 143.195 151.666 cv
143.141 151.725 143.089 151.813 143.042 151.929 cv
142.884 151.868 li
143.337 150.647 li
143.468 150.504 li
cp
141.665 149.362 mo
141.747 149.272 141.851 149.223 141.973 149.217 cv
142.095 149.212 142.2 149.25 142.292 149.333 cv
142.384 149.417 142.432 149.518 142.438 149.64 cv
142.446 149.762 142.407 149.87 142.325 149.959 cv
142.241 150.051 142.138 150.098 142.015 150.104 cv
141.89 150.11 141.782 150.072 141.691 149.989 cv
141.601 149.907 141.552 149.805 141.546 149.683 cv
141.541 149.562 141.579 149.456 141.665 149.362 cv
cp
f
145.009 148.821 mo
145.679 149.426 li
145.46 148.775 145.47 148.319 145.708 148.057 cv
145.817 147.938 145.944 147.874 146.087 147.862 cv
146.23 147.85 146.35 147.887 146.445 147.974 cv
146.53 148.051 146.575 148.143 146.583 148.251 cv
146.591 148.361 146.558 148.454 146.486 148.532 cv
146.418 148.607 146.303 148.659 146.144 148.684 cv
145.981 148.709 145.881 148.747 145.84 148.792 cv
145.804 148.831 145.787 148.892 145.789 148.975 cv
145.789 149.153 145.844 149.385 145.952 149.674 cv
147.379 150.967 li
147.544 151.116 147.688 151.208 147.809 151.244 cv
147.894 151.268 147.987 151.264 148.093 151.227 cv
148.196 151.191 148.31 151.106 148.431 150.973 cv
148.548 151.08 li
147.16 152.595 li
147.043 152.489 li
147.181 152.338 147.26 152.205 147.28 152.088 cv
147.294 152.003 147.272 151.915 147.218 151.825 cv
147.19 151.782 147.091 151.68 146.917 151.523 cv
145.764 150.478 li
145.417 150.165 145.204 149.985 145.124 149.938 cv
145.046 149.892 144.974 149.874 144.909 149.884 cv
144.845 149.895 144.786 149.928 144.735 149.985 cv
144.675 150.051 144.62 150.141 144.576 150.254 cv
144.429 150.181 li
144.886 148.956 li
145.009 148.821 li
cp
f
228.351 124.533 mo
229.039 116.097 li
205.529 116.097 li
204.842 124.533 li
228.351 124.533 li
0 0 0 .00976598 cmyk
f
157.658 123.894 mo
150.585 117.306 li
134.513 134.37 li
141.587 140.958 li
157.658 123.894 li
f
205.536 118.625 mo
205.618 120.956 li
206.703 120.917 li
206.952 120.909 207.133 120.848 207.245 120.735 cv
207.356 120.621 207.426 120.403 207.453 120.078 cv
207.616 120.073 li
207.687 122.079 li
207.523 122.083 li
207.512 121.853 207.476 121.686 207.416 121.581 cv
207.354 121.473 207.272 121.395 207.17 121.344 cv
207.066 121.295 206.915 121.272 206.716 121.28 cv
205.631 121.317 li
205.696 123.18 li
205.707 123.479 205.733 123.676 205.774 123.772 cv
205.807 123.842 205.87 123.903 205.966 123.953 cv
206.098 124.018 206.233 124.047 206.373 124.043 cv
206.589 124.036 li
206.595 124.198 li
204.038 124.286 li
204.032 124.124 li
204.243 124.117 li
204.489 124.108 204.665 124.031 204.771 123.884 cv
204.838 123.79 204.865 123.565 204.853 123.209 cv
204.718 119.381 li
204.707 119.081 204.681 118.883 204.64 118.79 cv
204.607 118.717 204.546 118.657 204.454 118.607 cv
204.326 118.542 204.189 118.511 204.046 118.516 cv
203.835 118.524 li
203.83 118.362 li
208.262 118.208 li
208.364 119.507 li
208.211 119.512 li
208.125 119.239 208.029 119.04 207.924 118.914 cv
207.818 118.788 207.69 118.698 207.541 118.644 cv
207.391 118.59 207.16 118.569 206.85 118.581 cv
205.536 118.625 li
cp
0 .8 1 .27 cmyk
f
209.758 121.336 mo
211.621 121.272 li
211.598 121.015 211.561 120.835 211.51 120.733 cv
211.431 120.573 211.317 120.448 211.168 120.36 cv
211.021 120.272 210.867 120.231 210.709 120.237 cv
210.466 120.245 210.252 120.346 210.067 120.54 cv
209.881 120.735 209.778 121 209.758 121.336 cv
cp
209.767 121.59 mo
209.784 122.183 209.946 122.645 210.251 122.973 cv
210.556 123.301 210.906 123.458 211.301 123.444 cv
211.564 123.435 211.792 123.355 211.982 123.204 cv
212.171 123.052 212.326 122.799 212.446 122.446 cv
212.585 122.529 li
212.537 122.93 212.371 123.299 212.087 123.637 cv
211.803 123.975 211.438 124.151 210.993 124.167 cv
210.51 124.184 210.089 124.012 209.731 123.649 cv
209.374 123.288 209.185 122.79 209.162 122.157 cv
209.139 121.473 209.297 120.932 209.636 120.537 cv
209.975 120.143 210.411 119.936 210.944 119.917 cv
211.396 119.902 211.771 120.036 212.071 120.323 cv
212.373 120.607 212.531 120.998 212.549 121.494 cv
209.767 121.59 li
cp
f
216.227 117.643 mo
216.35 117.638 216.456 117.678 216.546 117.76 cv
216.635 117.843 216.683 117.946 216.687 118.069 cv
216.69 118.19 216.65 118.297 216.567 118.387 cv
216.483 118.479 216.381 118.525 216.258 118.53 cv
216.135 118.534 216.027 118.495 215.937 118.409 cv
215.847 118.326 215.799 118.221 215.795 118.1 cv
215.791 117.977 215.83 117.872 215.913 117.782 cv
215.996 117.694 216.101 117.647 216.227 117.643 cv
cp
216.665 119.723 mo
216.778 122.938 li
216.787 123.19 216.811 123.356 216.851 123.436 cv
216.89 123.518 216.946 123.579 217.021 123.616 cv
217.093 123.655 217.225 123.67 217.415 123.665 cv
217.421 123.822 li
215.466 123.889 li
215.46 123.732 li
215.656 123.725 215.787 123.702 215.854 123.662 cv
215.92 123.622 215.971 123.557 216.008 123.467 cv
216.044 123.38 216.057 123.211 216.048 122.963 cv
215.994 121.422 li
215.979 120.987 215.957 120.707 215.926 120.58 cv
215.902 120.487 215.868 120.422 215.822 120.388 cv
215.777 120.353 215.716 120.337 215.64 120.34 cv
215.558 120.342 215.459 120.368 215.344 120.416 cv
215.276 120.262 li
216.472 119.729 li
216.665 119.723 li
cp
f
219.618 119.905 mo
219.463 119.911 219.308 119.961 219.156 120.059 cv
219.002 120.156 218.882 120.321 218.793 120.554 cv
218.704 120.788 218.666 121.085 218.679 121.447 cv
218.699 122.029 218.833 122.528 219.081 122.942 cv
219.327 123.356 219.643 123.555 220.023 123.542 cv
220.308 123.533 220.538 123.409 220.714 123.169 cv
220.891 122.93 220.968 122.526 220.948 121.958 cv
220.923 121.248 220.75 120.694 220.429 120.295 cv
220.211 120.024 219.941 119.893 219.618 119.905 cv
cp
219.744 119.616 mo
220.354 119.594 220.851 119.808 221.236 120.255 cv
221.563 120.637 221.736 121.083 221.754 121.593 cv
221.767 121.952 221.693 122.317 221.533 122.69 cv
221.373 123.063 221.145 123.348 220.849 123.545 cv
220.553 123.743 220.218 123.846 219.845 123.86 cv
219.239 123.88 218.748 123.657 218.374 123.19 cv
218.058 122.795 217.892 122.345 217.874 121.841 cv
217.861 121.475 217.939 121.107 218.11 120.737 cv
218.281 120.369 218.512 120.092 218.806 119.909 cv
219.098 119.725 219.41 119.627 219.744 119.616 cv
cp
f
223.479 120.334 mo
223.931 119.754 224.369 119.456 224.797 119.44 cv
225.017 119.432 225.208 119.481 225.37 119.584 cv
225.532 119.688 225.664 119.864 225.767 120.11 cv
225.837 120.284 225.879 120.55 225.892 120.912 cv
225.951 122.62 li
225.96 122.874 225.986 123.045 226.031 123.133 cv
226.065 123.205 226.119 123.259 226.193 123.297 cv
226.267 123.336 226.399 123.352 226.593 123.346 cv
226.599 123.502 li
224.608 123.572 li
224.603 123.415 li
224.687 123.412 li
224.874 123.405 225.004 123.373 225.077 123.313 cv
225.149 123.252 225.198 123.168 225.224 123.057 cv
225.233 123.012 225.234 122.875 225.227 122.645 cv
225.169 121.006 li
225.156 120.642 225.1 120.379 224.999 120.218 cv
224.897 120.057 224.734 119.98 224.509 119.988 cv
224.16 120 223.82 120.202 223.487 120.592 cv
223.562 122.703 li
223.571 122.974 223.594 123.141 223.628 123.204 cv
223.672 123.287 223.729 123.346 223.804 123.383 cv
223.876 123.42 224.023 123.435 224.242 123.427 cv
224.248 123.584 li
222.259 123.653 li
222.253 123.497 li
222.341 123.493 li
222.546 123.487 222.681 123.43 222.749 123.324 cv
222.818 123.217 222.847 123.02 222.836 122.728 cv
222.784 121.243 li
222.767 120.762 222.746 120.469 222.721 120.365 cv
222.694 120.261 222.659 120.191 222.611 120.155 cv
222.564 120.118 222.503 120.102 222.428 120.104 cv
222.346 120.107 222.249 120.131 222.137 120.18 cv
222.064 120.026 li
223.26 119.494 li
223.448 119.487 li
223.479 120.334 li
cp
f
102.517 177.127 mo
104.312 178.625 li
105.01 177.797 li
105.17 177.608 105.245 177.434 105.235 177.276 cv
105.226 177.118 105.108 176.92 104.884 176.682 cv
104.989 176.559 li
106.534 177.849 li
106.43 177.973 li
106.251 177.827 106.101 177.741 105.981 177.715 cv
105.86 177.689 105.748 177.698 105.642 177.741 cv
105.534 177.782 105.418 177.879 105.29 178.032 cv
104.591 178.858 li
106.025 180.055 li
106.257 180.249 106.422 180.362 106.521 180.394 cv
106.596 180.419 106.683 180.413 106.784 180.375 cv
106.921 180.321 107.034 180.241 107.124 180.134 cv
107.263 179.97 li
107.388 180.075 li
105.743 182.023 li
105.618 181.918 li
105.754 181.758 li
105.912 181.571 105.972 181.388 105.935 181.211 cv
105.907 181.098 105.757 180.927 105.483 180.699 cv
102.534 178.237 li
102.302 178.043 102.138 177.93 102.039 177.898 cv
101.964 177.874 101.877 177.879 101.778 177.915 cv
101.644 177.965 101.53 178.045 101.438 178.155 cv
101.302 178.315 li
101.177 178.211 li
104.029 174.833 li
105.069 175.626 li
104.97 175.744 li
104.708 175.624 104.494 175.561 104.329 175.555 cv
104.164 175.547 104.013 175.583 103.872 175.658 cv
103.732 175.733 103.563 175.889 103.362 176.125 cv
102.517 177.127 li
cp
.50515 .858671 .056672 .00152588 cmyk
f
107.367 175.821 mo
108.565 174.401 li
108.358 174.248 108.2 174.155 108.089 174.124 cv
107.916 174.075 107.747 174.075 107.582 174.125 cv
107.417 174.176 107.284 174.261 107.182 174.381 cv
107.025 174.567 106.958 174.793 106.979 175.061 cv
107.001 175.329 107.13 175.582 107.367 175.821 cv
cp
107.562 175.984 mo
108.019 176.37 108.472 176.557 108.921 176.553 cv
109.368 176.546 109.721 176.393 109.976 176.091 cv
110.145 175.891 110.236 175.669 110.25 175.428 cv
110.265 175.187 110.179 174.903 109.995 174.579 cv
110.149 174.531 li
110.417 174.834 110.583 175.205 110.645 175.641 cv
110.707 176.077 110.595 176.465 110.31 176.803 cv
109.998 177.172 109.587 177.368 109.078 177.389 cv
108.567 177.411 108.069 177.218 107.582 176.811 cv
107.054 176.371 106.757 175.893 106.688 175.377 cv
106.62 174.862 106.758 174.401 107.101 173.995 cv
107.391 173.651 107.743 173.463 108.157 173.432 cv
108.572 173.403 108.97 173.545 109.352 173.864 cv
107.562 175.984 li
cp
f
110.648 169.799 mo
111.342 170.378 li
111.097 169.735 111.087 169.279 111.315 169.008 cv
111.419 168.886 111.543 168.815 111.685 168.798 cv
111.828 168.78 111.949 168.813 112.048 168.895 cv
112.136 168.968 112.187 169.059 112.198 169.167 cv
112.208 169.276 112.181 169.372 112.112 169.452 cv
112.046 169.53 111.935 169.584 111.774 169.618 cv
111.615 169.649 111.516 169.69 111.476 169.737 cv
111.442 169.777 111.428 169.838 111.434 169.923 cv
111.44 170.1 111.505 170.331 111.624 170.614 cv
113.103 171.848 li
113.272 171.991 113.421 172.077 113.544 172.108 cv
113.629 172.128 113.724 172.121 113.825 172.08 cv
113.928 172.04 114.038 171.951 114.155 171.812 cv
114.276 171.914 li
112.95 173.485 li
112.829 173.383 li
112.961 173.227 113.034 173.09 113.049 172.972 cv
113.06 172.887 113.036 172.8 112.976 172.711 cv
112.948 172.669 112.843 172.573 112.664 172.422 cv
111.468 171.424 li
111.109 171.125 110.89 170.954 110.809 170.912 cv
110.728 170.869 110.655 170.854 110.591 170.867 cv
110.526 170.879 110.47 170.915 110.421 170.973 cv
110.362 171.042 110.313 171.133 110.272 171.25 cv
110.124 171.182 li
110.53 169.94 li
110.648 169.799 li
cp
f
115.798 168.772 mo
114.623 167.791 li
114.472 168.24 114.385 168.538 114.357 168.682 cv
114.308 168.941 114.304 169.153 114.349 169.319 cv
114.392 169.485 114.478 169.622 114.604 169.729 cv
114.767 169.864 114.942 169.926 115.129 169.92 cv
115.317 169.913 115.464 169.846 115.569 169.721 cv
115.712 169.552 115.788 169.236 115.798 168.772 cv
cp
116.017 168.954 mo
115.995 169.473 115.97 169.789 115.94 169.901 cv
115.895 170.069 115.814 170.219 115.7 170.356 cv
115.521 170.568 115.3 170.682 115.038 170.698 cv
114.777 170.713 114.527 170.622 114.288 170.422 cv
114.139 170.297 114.036 170.155 113.982 169.997 cv
113.908 169.778 113.897 169.499 113.955 169.159 cv
114.011 168.821 114.165 168.307 114.417 167.62 cv
114.296 167.518 li
113.989 167.261 113.736 167.133 113.54 167.135 cv
113.343 167.136 113.167 167.231 113.011 167.416 cv
112.893 167.555 112.836 167.7 112.842 167.846 cv
112.847 167.995 112.899 168.11 112.998 168.192 cv
113.198 168.348 li
113.302 168.434 113.359 168.527 113.371 168.627 cv
113.383 168.726 113.353 168.819 113.282 168.903 cv
113.212 168.985 113.125 169.029 113.023 169.033 cv
112.921 169.036 112.819 168.995 112.718 168.911 cv
112.524 168.75 112.431 168.504 112.435 168.172 cv
112.438 167.84 112.591 167.499 112.891 167.143 cv
113.12 166.871 113.354 166.686 113.593 166.588 cv
113.774 166.515 113.966 166.508 114.165 166.569 cv
114.296 166.611 114.511 166.756 114.81 167.004 cv
115.856 167.879 li
116.15 168.125 116.335 168.268 116.411 168.313 cv
116.487 168.357 116.546 168.375 116.591 168.369 cv
116.635 168.362 116.671 168.341 116.7 168.307 cv
116.729 168.272 116.748 168.234 116.755 168.194 cv
116.765 168.124 116.759 167.965 116.738 167.718 cv
116.927 167.875 li
117.052 168.407 117.02 168.786 116.827 169.014 cv
116.735 169.124 116.622 169.178 116.492 169.179 cv
116.36 169.18 116.203 169.106 116.017 168.954 cv
cp
f
118.81 165.366 mo
117.22 164.04 li
117.056 163.925 116.884 163.849 116.701 163.811 cv
116.519 163.774 116.349 163.784 116.192 163.84 cv
116.034 163.897 115.912 163.978 115.823 164.083 cv
115.657 164.28 115.599 164.529 115.646 164.831 cv
115.707 165.229 115.963 165.616 116.412 165.991 cv
116.865 166.37 117.296 166.561 117.702 166.565 cv
118.109 166.571 118.415 166.452 118.618 166.211 cv
118.79 166.008 118.854 165.726 118.81 165.366 cv
cp
119.044 165.563 mo
119.076 165.844 119.065 166.083 119.014 166.284 cv
118.961 166.485 118.866 166.667 118.726 166.833 cv
118.444 167.167 118.056 167.342 117.563 167.356 cv
117.07 167.372 116.603 167.194 116.161 166.825 cv
115.718 166.456 115.431 165.979 115.297 165.395 cv
115.163 164.814 115.28 164.303 115.647 163.869 cv
115.876 163.598 116.151 163.448 116.473 163.416 cv
115.903 162.94 li
115.552 162.647 115.327 162.474 115.233 162.422 cv
115.138 162.373 115.061 162.352 115.001 162.364 cv
114.941 162.375 114.89 162.408 114.845 162.461 cv
114.796 162.52 114.749 162.612 114.702 162.737 cv
114.548 162.682 li
114.943 161.454 li
115.07 161.303 li
118.637 164.28 li
118.998 164.582 119.226 164.756 119.319 164.807 cv
119.413 164.856 119.491 164.875 119.554 164.866 cv
119.615 164.855 119.667 164.825 119.709 164.776 cv
119.761 164.715 119.81 164.62 119.856 164.487 cv
120.005 164.548 li
119.616 165.777 li
119.486 165.931 li
119.044 165.563 li
cp
f
118.175 160.882 mo
120.653 162.951 li
120.847 163.112 120.986 163.206 121.074 163.231 cv
121.162 163.256 121.245 163.254 121.321 163.226 cv
121.398 163.198 121.499 163.111 121.622 162.965 cv
121.743 163.067 li
120.485 164.557 li
120.364 164.456 li
120.49 164.306 120.561 164.194 120.575 164.118 cv
120.589 164.042 120.575 163.961 120.533 163.875 cv
120.491 163.789 120.375 163.667 120.184 163.506 cv
118.995 162.514 li
118.661 162.235 118.437 162.065 118.32 162.001 cv
118.235 161.958 118.165 161.941 118.108 161.951 cv
118.052 161.961 117.999 161.995 117.95 162.053 cv
117.897 162.116 117.851 162.205 117.808 162.323 cv
117.647 162.268 li
118.052 161.03 li
118.175 160.882 li
cp
116.327 159.813 mo
116.406 159.719 116.507 159.667 116.63 159.657 cv
116.751 159.646 116.858 159.68 116.953 159.759 cv
117.048 159.838 117.101 159.938 117.112 160.059 cv
117.124 160.182 117.09 160.291 117.011 160.383 cv
116.932 160.478 116.83 160.53 116.706 160.541 cv
116.583 160.551 116.474 160.518 116.38 160.439 cv
116.284 160.36 116.232 160.26 116.222 160.139 cv
116.211 160.017 116.247 159.909 116.327 159.813 cv
cp
f
122.87 160.393 mo
121.694 159.413 li
121.544 159.862 121.456 160.159 121.429 160.303 cv
121.38 160.563 121.376 160.775 121.42 160.941 cv
121.463 161.107 121.55 161.244 121.677 161.35 cv
121.839 161.485 122.015 161.549 122.201 161.542 cv
122.389 161.535 122.535 161.469 122.642 161.343 cv
122.784 161.174 122.86 160.858 122.87 160.393 cv
cp
123.089 160.576 mo
123.067 161.095 123.042 161.411 123.013 161.522 cv
122.967 161.69 122.886 161.842 122.771 161.977 cv
122.593 162.19 122.372 162.304 122.11 162.319 cv
121.849 162.334 121.599 162.243 121.36 162.043 cv
121.21 161.918 121.108 161.777 121.054 161.618 cv
120.979 161.399 120.97 161.12 121.026 160.781 cv
121.083 160.442 121.237 159.928 121.489 159.241 cv
121.368 159.139 li
121.061 158.883 120.808 158.754 120.612 158.756 cv
120.415 158.758 120.239 158.852 120.083 159.038 cv
119.964 159.177 119.908 159.322 119.913 159.467 cv
119.919 159.616 119.971 159.731 120.069 159.814 cv
120.271 159.969 li
120.374 160.056 120.432 160.149 120.442 160.249 cv
120.455 160.348 120.425 160.44 120.354 160.524 cv
120.284 160.607 120.197 160.651 120.095 160.655 cv
119.993 160.658 119.891 160.618 119.79 160.534 cv
119.597 160.372 119.503 160.126 119.506 159.795 cv
119.511 159.462 119.663 159.12 119.962 158.765 cv
120.192 158.493 120.427 158.307 120.665 158.211 cv
120.847 158.137 121.037 158.131 121.237 158.191 cv
121.368 158.233 121.583 158.377 121.881 158.626 cv
122.929 159.5 li
123.222 159.747 123.407 159.891 123.483 159.935 cv
123.56 159.979 123.618 159.998 123.663 159.991 cv
123.706 159.984 123.743 159.963 123.771 159.93 cv
123.802 159.893 123.819 159.856 123.826 159.817 cv
123.837 159.746 123.831 159.586 123.81 159.34 cv
123.999 159.497 li
124.124 160.028 124.091 160.408 123.899 160.635 cv
123.807 160.745 123.694 160.8 123.563 160.801 cv
123.433 160.802 123.274 160.727 123.089 160.576 cv
cp
f
121.288 155.33 mo
122.302 156.176 li
122.907 155.459 li
123.143 155.657 li
122.538 156.373 li
124.538 158.042 li
124.737 158.209 124.896 158.293 125.014 158.294 cv
125.132 158.295 125.228 158.251 125.304 158.162 cv
125.365 158.088 125.403 157.998 125.415 157.89 cv
125.428 157.783 125.405 157.672 125.349 157.559 cv
125.458 157.428 li
125.612 157.69 125.685 157.94 125.674 158.174 cv
125.665 158.411 125.597 158.604 125.468 158.756 cv
125.381 158.859 125.269 158.935 125.128 158.987 cv
124.987 159.036 124.845 159.041 124.698 158.998 cv
124.553 158.956 124.368 158.842 124.146 158.657 cv
122.071 156.925 li
121.661 157.411 li
121.551 157.318 li
121.604 157.154 121.627 156.959 121.617 156.731 cv
121.608 156.504 121.565 156.274 121.487 156.04 cv
121.446 155.917 121.351 155.713 121.201 155.433 cv
121.288 155.33 li
cp
f
123.962 154.027 mo
126.438 156.095 li
126.633 156.256 126.772 156.35 126.86 156.375 cv
126.948 156.401 127.03 156.4 127.108 156.372 cv
127.185 156.342 127.286 156.256 127.408 156.11 cv
127.529 156.211 li
126.271 157.702 li
126.15 157.6 li
126.276 157.452 126.347 157.338 126.361 157.262 cv
126.376 157.187 126.361 157.106 126.319 157.02 cv
126.277 156.933 126.161 156.811 125.97 156.651 cv
124.782 155.66 li
124.447 155.38 124.222 155.209 124.106 155.147 cv
124.021 155.102 123.951 155.086 123.895 155.095 cv
123.839 155.106 123.786 155.139 123.736 155.198 cv
123.684 155.26 123.636 155.349 123.595 155.467 cv
123.435 155.414 li
123.837 154.174 li
123.962 154.027 li
cp
122.114 152.958 mo
122.192 152.865 122.293 152.812 122.415 152.801 cv
122.537 152.792 122.646 152.825 122.739 152.904 cv
122.834 152.983 122.887 153.083 122.898 153.205 cv
122.91 153.327 122.876 153.436 122.798 153.529 cv
122.718 153.623 122.616 153.674 122.493 153.685 cv
122.368 153.696 122.26 153.663 122.165 153.584 cv
122.071 153.504 122.019 153.405 122.009 153.284 cv
121.997 153.163 122.032 153.054 122.114 152.958 cv
cp
f
124.634 153.413 mo
125.853 151.969 li
125.978 152.074 li
125.898 152.167 li
125.825 152.254 125.79 152.338 125.794 152.419 cv
125.798 152.501 125.837 152.573 125.907 152.631 cv
125.986 152.698 126.1 152.752 126.246 152.794 cv
128.552 153.504 li
127.39 151.311 li
127.308 151.155 127.233 151.05 127.168 150.997 cv
127.137 150.969 127.104 150.958 127.067 150.958 cv
127.014 150.955 126.964 150.966 126.921 150.995 cv
126.876 151.022 126.804 151.094 126.706 151.209 cv
126.582 151.106 li
127.427 150.104 li
127.552 150.208 li
127.462 150.333 127.419 150.432 127.418 150.508 cv
127.42 150.643 127.474 150.807 127.577 151 cv
129.306 154.298 li
129.19 154.435 li
125.662 153.358 li
125.499 153.306 125.373 153.28 125.283 153.28 cv
125.192 153.282 125.1 153.301 125.005 153.34 cv
124.953 153.362 124.871 153.42 124.759 153.517 cv
124.634 153.413 li
cp
f
129.063 150.118 mo
130.262 148.698 li
130.055 148.543 129.896 148.452 129.785 148.418 cv
129.612 148.37 129.443 148.372 129.278 148.422 cv
129.112 148.472 128.979 148.557 128.878 148.678 cv
128.721 148.864 128.653 149.09 128.675 149.358 cv
128.696 149.625 128.826 149.877 129.063 150.118 cv
cp
129.258 150.28 mo
129.714 150.665 130.167 150.854 130.616 150.849 cv
131.065 150.842 131.417 150.689 131.671 150.387 cv
131.841 150.187 131.933 149.965 131.946 149.724 cv
131.96 149.483 131.875 149.2 131.69 148.875 cv
131.846 148.827 li
132.114 149.13 132.278 149.5 132.341 149.936 cv
132.403 150.374 132.292 150.76 132.005 151.1 cv
131.694 151.469 131.283 151.663 130.774 151.686 cv
130.265 151.706 129.766 151.514 129.278 151.108 cv
128.751 150.667 128.453 150.19 128.386 149.673 cv
128.316 149.159 128.454 148.698 128.796 148.292 cv
129.087 147.948 129.438 147.76 129.853 147.729 cv
130.268 147.699 130.666 147.842 131.048 148.161 cv
129.258 150.28 li
cp
f
131.417 143.331 mo
132.431 144.177 li
133.034 143.461 li
133.271 143.658 li
132.665 144.374 li
134.665 146.043 li
134.866 146.21 135.024 146.294 135.142 146.295 cv
135.259 146.297 135.354 146.252 135.431 146.164 cv
135.493 146.089 135.53 146 135.542 145.891 cv
135.556 145.784 135.532 145.673 135.476 145.561 cv
135.586 145.43 li
135.739 145.692 135.812 145.941 135.802 146.176 cv
135.792 146.413 135.724 146.606 135.595 146.757 cv
135.509 146.86 135.396 146.936 135.255 146.988 cv
135.115 147.038 134.972 147.042 134.826 147 cv
134.681 146.958 134.495 146.844 134.272 146.659 cv
132.198 144.927 li
131.789 145.413 li
131.679 145.319 li
131.731 145.156 131.755 144.961 131.745 144.733 cv
131.735 144.506 131.692 144.276 131.615 144.041 cv
131.573 143.918 131.478 143.715 131.329 143.435 cv
131.417 143.331 li
cp
f
134.593 141.874 mo
134.493 141.992 134.427 142.141 134.397 142.319 cv
134.366 142.497 134.41 142.698 134.524 142.918 cv
134.641 143.14 134.837 143.368 135.115 143.6 cv
135.563 143.975 136.026 144.209 136.502 144.303 cv
136.978 144.397 137.337 144.3 137.582 144.01 cv
137.765 143.793 137.825 143.54 137.766 143.249 cv
137.704 142.959 137.455 142.629 137.017 142.264 cv
136.47 141.807 135.939 141.565 135.427 141.538 cv
135.077 141.516 134.8 141.628 134.593 141.874 cv
cp
134.462 141.587 mo
134.854 141.123 135.345 140.899 135.937 140.913 cv
136.441 140.926 136.892 141.098 137.284 141.426 cv
137.56 141.657 137.784 141.956 137.955 142.324 cv
138.127 142.691 138.187 143.051 138.136 143.401 cv
138.085 143.752 137.939 144.069 137.7 144.353 cv
137.31 144.815 136.815 145.028 136.214 144.991 cv
135.708 144.961 135.261 144.783 134.872 144.458 cv
134.59 144.223 134.367 143.918 134.206 143.545 cv
134.044 143.172 133.992 142.817 134.052 142.477 cv
134.11 142.139 134.247 141.842 134.462 141.587 cv
cp
f
135.919 137.997 mo
136.933 138.843 li
137.537 138.127 li
137.772 138.324 li
137.168 139.04 li
139.168 140.709 li
139.368 140.876 139.526 140.96 139.644 140.961 cv
139.762 140.963 139.857 140.918 139.933 140.829 cv
139.995 140.755 140.034 140.665 140.045 140.557 cv
140.058 140.45 140.035 140.338 139.978 140.227 cv
140.089 140.096 li
140.241 140.358 140.313 140.607 140.304 140.842 cv
140.295 141.078 140.226 141.271 140.098 141.423 cv
140.011 141.526 139.897 141.602 139.758 141.653 cv
139.618 141.704 139.474 141.708 139.329 141.665 cv
139.183 141.624 138.997 141.509 138.775 141.325 cv
136.701 139.592 li
136.292 140.079 li
136.181 139.985 li
136.234 139.821 136.257 139.626 136.247 139.399 cv
136.238 139.172 136.195 138.942 136.118 138.706 cv
136.076 138.584 135.98 138.381 135.831 138.1 cv
135.919 137.997 li
cp
f
141.677 138.112 mo
140.501 137.131 li
140.351 137.581 140.264 137.877 140.236 138.023 cv
140.187 138.282 140.183 138.495 140.228 138.66 cv
140.271 138.826 140.356 138.962 140.483 139.069 cv
140.646 139.204 140.821 139.268 141.008 139.26 cv
141.196 139.253 141.342 139.188 141.448 139.062 cv
141.591 138.893 141.667 138.577 141.677 138.112 cv
cp
141.896 138.294 mo
141.874 138.814 141.849 139.129 141.819 139.241 cv
141.773 139.409 141.692 139.561 141.578 139.696 cv
141.399 139.909 141.179 140.024 140.917 140.038 cv
140.655 140.053 140.406 139.961 140.167 139.762 cv
140.018 139.637 139.915 139.497 139.861 139.336 cv
139.786 139.118 139.776 138.838 139.833 138.5 cv
139.89 138.161 140.044 137.647 140.296 136.959 cv
140.175 136.858 li
139.867 136.602 139.614 136.474 139.419 136.475 cv
139.222 136.477 139.046 136.571 138.89 136.756 cv
138.771 136.897 138.715 137.041 138.721 137.186 cv
138.726 137.334 138.778 137.45 138.877 137.533 cv
139.077 137.689 li
139.181 137.776 139.238 137.868 139.249 137.967 cv
139.262 138.067 139.231 138.159 139.161 138.243 cv
139.091 138.327 139.004 138.37 138.902 138.374 cv
138.8 138.377 138.697 138.336 138.597 138.252 cv
138.403 138.09 138.31 137.845 138.313 137.514 cv
138.317 137.182 138.47 136.839 138.769 136.484 cv
138.999 136.211 139.233 136.026 139.472 135.93 cv
139.653 135.856 139.844 135.85 140.044 135.911 cv
140.175 135.952 140.39 136.096 140.688 136.345 cv
141.735 137.219 li
142.029 137.465 142.214 137.61 142.29 137.654 cv
142.366 137.698 142.425 137.717 142.47 137.709 cv
142.514 137.703 142.55 137.682 142.579 137.649 cv
142.608 137.613 142.627 137.575 142.634 137.536 cv
142.644 137.465 142.638 137.305 142.616 137.059 cv
142.806 137.216 li
142.931 137.747 142.897 138.127 142.706 138.354 cv
142.613 138.464 142.501 138.519 142.37 138.52 cv
142.239 138.521 142.081 138.446 141.896 138.294 cv
cp
f
139.544 132.307 mo
143.636 135.723 li
143.829 135.884 143.968 135.977 144.055 136 cv
144.141 136.026 144.226 136.023 144.306 135.993 cv
144.388 135.961 144.495 135.866 144.63 135.708 cv
144.751 135.809 li
143.481 137.313 li
143.36 137.211 li
143.479 137.071 143.546 136.963 143.56 136.887 cv
143.574 136.811 143.56 136.731 143.517 136.646 cv
143.474 136.561 143.357 136.438 143.166 136.278 cv
140.364 133.94 li
140.017 133.649 139.796 133.479 139.704 133.428 cv
139.61 133.377 139.535 133.357 139.476 133.368 cv
139.418 133.377 139.366 133.41 139.321 133.463 cv
139.272 133.522 139.229 133.61 139.188 133.729 cv
139.022 133.688 li
139.417 132.458 li
139.544 132.307 li
cp
f
.698354 lw
[] 0 dsh
33.9443 136.952 mo
34.0718 136.927 li
36.0112 136.724 li
39.4565 136.317 li
42.3916 136.014 li
46.144 135.581 li
49.3076 135.251 li
53.6978 134.795 li
57.3218 134.439 li
60.4102 134.109 li
63.0908 133.856 li
65.4644 133.627 li
67.582 133.424 li
69.4966 133.247 li
71.2573 133.069 li
74.397 132.789 li
77.1025 132.536 li
79.5273 132.307 li
81.6699 132.105 li
85.3975 131.749 li
88.5361 131.445 li
92.5181 131.065 li
95.8613 130.708 li
100.43 130.201 li
104.181 129.744 li
107.346 129.338 li
110.103 128.931 li
112.527 128.55 li
114.697 128.196 li
116.662 127.839 li
118.449 127.51 li
121.612 126.85 li
124.369 126.242 li
126.794 125.632 li
128.964 125.048 li
132.741 123.957 li
135.906 122.891 li
139.913 121.418 li
143.256 120.023 li
147.85 117.917 li
151.627 115.988 li
154.793 114.21 li
157.549 112.561 li
159.974 111.012 li
162.168 109.566 li
164.133 108.247 li
165.92 106.977 li
169.085 104.667 li
171.841 102.561 li
174.291 100.632 li
176.46 98.8804 li
180.212 95.7583 li
183.403 93.0171 li
187.41 89.4888 li
190.752 86.4175 li
195.347 82.2046 li
199.125 78.6763 li
202.289 75.6304 li
205.045 72.9907 li
207.471 70.606 li
209.666 68.4985 li
211.63 66.5698 li
213.417 64.8188 li
216.606 61.6714 li
219.363 58.9565 li
221.789 56.519 li
223.958 54.3618 li
227.71 50.605 li
230.899 47.4077 li
234.907 43.397 li
238.251 40.021 li
242.869 35.3765 li
246.622 31.5942 li
249.786 28.3711 li
252.543 25.605 li
254.993 23.1177 li
257.163 20.9341 li
259.127 18.9297 li
260.914 17.1274 li
264.104 13.9043 li
266.86 11.1123 li
269.285 8.6499 li
271.455 6.44238 li
0 1 1 0 cmyk
@
.997649 lw
33.9443 115.378 mo
34.0718 115.353 li
36.0112 115.125 li
39.4565 114.693 li
42.3916 114.338 li
46.144 113.905 li
49.3076 113.525 li
53.6978 112.993 li
57.3218 112.561 li
60.4102 112.206 li
63.0908 111.901 li
65.4644 111.647 li
67.582 111.419 li
69.4966 111.215 li
71.2573 111.012 li
74.397 110.682 li
77.1025 110.404 li
79.5273 110.201 li
81.6699 110.022 li
85.3975 109.744 li
88.5361 109.541 li
92.5181 109.288 li
95.8613 109.109 li
100.43 108.88 li
104.181 108.678 li
107.346 108.551 li
110.103 108.423 li
112.527 108.297 li
114.697 108.196 li
116.662 108.094 li
118.449 108.018 li
121.612 107.865 li
124.369 107.713 li
126.794 107.585 li
128.964 107.459 li
132.741 107.256 li
135.906 107.053 li
139.913 106.774 li
143.256 106.521 li
147.85 106.115 li
151.627 105.759 li
154.793 105.403 li
157.549 105.073 li
159.974 104.744 li
162.168 104.414 li
164.133 104.109 li
165.92 103.831 li
169.085 103.246 li
171.841 102.688 li
174.291 102.129 li
176.46 101.596 li
180.212 100.582 li
183.403 99.6421 li
187.41 98.271 li
190.752 96.9761 li
195.347 95.0229 li
199.125 93.2202 li
202.289 91.5454 li
205.045 89.9966 li
207.471 88.5513 li
209.666 87.1792 li
211.63 85.9116 li
213.417 84.7173 li
216.606 82.5093 li
219.363 80.5044 li
221.789 78.6509 li
223.958 76.9507 li
227.71 73.9302 li
230.899 71.2661 li
234.907 67.7886 li
238.251 64.8188 li
242.869 60.6304 li
246.622 57.103 li
249.786 54.0825 li
252.543 51.4429 li
254.993 49.0825 li
257.163 46.9507 li
259.127 45.022 li
260.914 43.27 li
264.104 40.0972 li
266.86 37.356 li
269.285 34.894 li
271.455 32.7124 li
0 0 1 .279297 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
