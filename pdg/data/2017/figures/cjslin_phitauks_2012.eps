%!PS-Adobe-3.1 EPSF-3.0
%%Title: phi_vs_TauS_noCPT_2012_v2.ai
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Paul Schaffner
%%CreationDate: 4/18/12
%%BoundingBox: 0 0 505 488
%%HiResBoundingBox: 0 0 504.9551 487.8687
%%CropBox: 0 0 504.9551 487.8687
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 124 8
%%BeginData: 18498 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0AFFA87DA8FD7CFF52275252FFFFA8FD057DA87D7D7DA8FD077D
%A87D7D7DA87D7D7DA87D7D7DA8FD077DA87D7D7DA87D7D7DA87D7D7DA8FD
%077DA87D7D7DA87D7D7DA87D7D7DA8FD077DA87D7D7DA87D7D7DA87D7D7D
%A87D7D7DA7587D777D777D777E7D7D777E777EFD0DFF5252527DFFFF7DA8
%A8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FF
%A8A8A8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FF
%AE7D27476C6D6C916C6C6C916C6D6C914DFD10FFA8FFFFA8A8FD05FFA8FD
%13FFA8FD13FFA8FD21FFA8FD09FF7D7747916D976D976D976D976D976D97
%9172AEFD12FF7DFD2FFFA8A8A8A9A8A97DFD04A8A9A8A9A8A9A8A8A8CBA8
%A8A8A9A8A8A8A9FD0DFFA84C726D97919791979197919791979197919771
%FD13FFA8A8FD2DFF7D57577B577B577B577B577B577B577B577B577B577B
%577B577B577B507DFD0AFF7D71479191976D976D976D976D976D976D976D
%979172AEFD12FF7DFD2EFFA77BACABACA5ACABACA5ACABACABACABACA5AC
%ABACA5ACABACA5ACAB817DFD07FFCFA84C6C6D9791979197919791979197
%919791979197919771FD13FFA87DFD2DFF7D8181AC81AC81AC81AC81AC81
%A581AC81AC81AC81AC81AC81AC81AC7B7DFD06FF7D4D479191976D976D97
%6D976D976D976D976D976D976D976C71A8FD12FFA8FD2EFFA87BACA5AC81
%ACA5AC81ACA5AC8182ABAC81ACA5AC81ACA5AC81ACAB817DFFFFFFAE7D4C
%6C91979197919791979197919791979197919791979197919772FD13FFA8
%A8FD2DFF7D8181AC81AC81AC81AC81AC817B2CAC81AC81AC81AC81AC81AC
%81AC817DFFFF7D4D479791976D976D976D976D976D976D976D976D976D97
%6D976D979172AEFD12FFA8FD2EFFA881ACABACABACABACA5AC81AC7B51A5
%ACA5AC81ACA5AC81ACA5ACABAB587E466C91979197919791979197919791
%97919791979197919791979197919772FD13FFA8A8FD2DFF7D5751575157
%515751AC81AC81A681AC81AC81AC81AC81AC81AC878151466C916D976D97
%6D976D976D976D976D976D976D976D976D976D976D976D976D72AEFD12FF
%A8A8FD2DFFA82D7E7E857E847E5981AC81ACABAC81ACA5AC81ACA5ACABAC
%8151466C6D97919791979197919791979197919791979197919791979197
%91979197919771FD13FFA8A8FD2DFF7D517EA984A984A9528181AC81AC81
%AC81AC81AC81AC8781514D6C916C7391976D976D976D976D976D976D976D
%976D976D976D976D976D976D976D979172AEFD12FF7DFD2EFFA72DA984A9
%84A9A95981ACA5AC81ACA5AC81ACABAC8152476D919791976C9791979197
%919791979197919791979197919791979197919791979197919771FD13FF
%A8A8FD2DFF7D2D7E592EA97EA9528181AC81AC81AC81AC81814B476C976C
%916C976C6C6D976D976D976D976D976D976D976D976D976D976D976D976D
%976D976D979172A8FD12FFA8FD2EFFA82DA97E2752AFA97D81ACA5AC81AC
%ABAC7B524791919791976C9791976C979197919791979197919791979197
%9197919791979197919791979197919772FD13FFA8A8FD2DFF7D517E7D27
%5284A9528181AC81AC81814B476C976C976C976C976C976C6C6D976D976D
%976D976D976D976D976D976D976D976D976D976D976D976D976C71AEFD12
%FFA8FD2EFFA82D8484A884A9857D81ACABAC7B52479191976C9791976C97
%91976C976C97919791979197919791979197919791979197919791979197
%91979197919771FD13FFA8A8FD2DFF7D517EA984A984A952A5817B276B6C
%916C976C916C976C916C976C916C6C91976D976D976D976D976D976D976D
%976D976D976D976D976D976D976D976D72AEFD12FFA8FD2EFFA82D8584A9
%84A9A97D564C479791976C9791976C9791976C9791976D976C9791979197
%919791979197919791979197919791979197919791979197919772FD10FF
%A8FFFFA8A8FD2DFF7D517EA984AF8459226C6D976C976C976C976C976C97
%6C976C976C976C7391976D976D976D976D976D97214791976D976D976D97
%6D976D976D9791979172AEFD0CFFA87D527DFFFF7DFD2EFFA72DA9A98453
%4D6C6D6D9791976C9791976C9791976C9791976C9791976C979197919791
%97919791976C4C47979197919791979197919791979197919771FD0CFFA8
%52F82752FFFFA87DFFA8FD2BFF7D515959466C6D976C6C6C976C916C976C
%916C976C916C976C916C976C6C6D976D976D976D976D97916CF84791976D
%976D976D976D976D976D976C736C71A8FD0CFFA8A87DA8FFFFA8FD2EFFA7
%264D6C97919791736C9791976C9791976C9791976C9791976C9791976C97
%919791979197919791976D97919791979197919791979197919791979197
%72FD13FFA8A8FD2BFFA87D46476D976D916D976C916C976C976C976C976C
%976C976C976C976C976C6C6D976D976D976D976D976D976D976D976D976D
%976D976D976D976D976D979172AEFD12FF7D7DA8FD29FF7D4D6C976C976D
%9791976D976C976C9791976C9791976C9791976C9791976C976C97919791
%97919791979197919791979197919791979197919791979197919772FD13
%FFA1767676A8FD24FFA87D466C91976C6C6C916C976D916C976C916C976C
%916C976C916C976C916C976C916C6C91976D976D976D976D976D976D976D
%976D976D976D976D976D976D976D976D72AEFD12FF7DA7A1A1767DA8FD21
%FF774D6C97919791976C976D97919791976C976C9791976C9791976C9791
%976C9791976D976C97919791979197919791979197919791979197919791
%97919791979197919771FD13FFA1A1CACACAA17D52A8A8FD1BFFA877476D
%91976D976D976C6C6C916D976D916C976C976C976C976C976C976C976C97
%6C976C976C7391976D976D976D976D976D976D976D976D976D976D976D97
%6D976D976D976D72AEFD12FF7DFD07CA7D7D7DFD18FFAE52716C97919791
%97919791976C9791976D9791736C9791976C9791976C9791976C9791976C
%9791976C9791979197919791979197919791979197919791979197919791
%979197919772FD13FF7DA1FD05CAA1CACAA1527D84FD13FF8377476C9197
%6D976D976D976D976C6C6C976D916C976C6C6C976C916C976C916C976C91
%6C976C916C976C6C6D976D976D976D976D976D976D976D976D976D976D97
%6D976D976D976D976C71AEFD12FF7DFD07CAA1CACAFFA17D76A8FD0FFFA8
%52716C979197919791979197919791976C9791976D9791736C9791976C97
%91976C9791976C9791976C9791976C979197919791979197919791979197
%919791979197919791979197919747777DFD05FFA8527D52A8FD09FF7DA1
%FD07CAA1FD05CA76767DFD0BFF7D77476D91976D976D976D976D976D976D
%976C6C6C976D916D976C916C976C976C976C976C976C976C976C976C976C
%6C6D976D976D976D976D976D976D976D976D976D976D976D976D976C474C
%A8FFFFA8FD04FF52A8A87D7DFD09FF7DA1FD08CAA1FD04CAFFCAA1527DA8
%FD06FFA84C6B6C97919791979197919791979197919791976C976D979197
%6D976C976C9791976C9791976C9791976C9791976C976C97919791979197
%9197919791979197919791979197919791914777A8FFFFFFA8FD06FF5252
%27FD0AFFA1A1FD09CAA1CAA1FD05CAA17D52A8FFFF7D53479191976D976D
%976D976D976D976D976D976D976C6C6C916C976D916C976C916C976C916C
%976C916C976C916C976C916C6C91976D976D976D976D976D976D976D976D
%976D9791916C4752A8FD06FFA8FD05FF527D7DA8FD09FF7DFD0ACAFFCACA
%A1FFCACACAFFCACA767D4C4791B991979197919791979197919791979197
%919791976C976D97919791976C976C9791976C9791976C9791976C979197
%6D976C9791979197919791979197919791979197919791914777A8FD07FF
%A8FD06FF527DA8FD0AFFA1A1FD0DCAA1FD05CAA1CAA1A14C476C9791976D
%976D976D976D976D976D976D976D976C6C6C916D976D916C976C976C976C
%976C976C976C976C976C976C976C7391976D976D976D976D976D976D976D
%9791916C7153A8FD0FFFA8275252A8FD09FF7DFD0FCAA1CACACAA1FD04CA
%CFA17747739197919791979197919791979197919791976C9791976D9791
%736C9791976C9791976C9791976C9791976C9791976C9791979197919791
%97919791979197916C477DA8FD0BFFA8FD06FF522752FD0AFF7D7CFD0FCA
%A1A1A1FD08CAA7524D479191976D976D976D976D976D976D976C6C6D916D
%916C976C6C6C976C916C976C916C976C916C976C916C976C6C6D976D976D
%976D976D976D976D916C4D52AEFD0CFFA8A8A8FD05FF7D52FD0BFF7DFD04
%CAFFCACACAFFCACACAFFCACAA1FD04CAFFCACACAFFCACACAFFCAA14C726D
%979197919791979197919797976C7270716D9791976C9791979197919791
%97919791979197919791976C979197919791979197919791974D7EFD17FF
%277D52FD0AFF7DA1CAA1CAA1CAA1CAA1CAFD05A1CAA1CAA1A1A1CAA1CAA1
%CAA1CAA1CACAA7764C476C6C976C6C6C736C6C6C976C4844B4684C489747
%6C6C726C6C6C726C6C6C726C6C6C726C6C6C726C6C6C736C6C6C736C6C6C
%6D4746267C7D7D7C7D7D7D7C7D7D7D7C7D7D7D7C7D7C7DA8FD05FF7D277D
%FD0AFF7DFD09CAA1CAA1FD09CAA1FD0CCAA7524D479791976C976C976C96
%486FFCB4FC6F6C976C976C9790976C9790976C9790976C9790976C976C97
%6C976C976C976D6C457BABCCA5CCA5CCA4CCA5CCA4CCA5A5A4CCA5CCA4CC
%7BFD06FF52A8A8FD05FF7DFF7DFFFF7D4BA2FD06CAA1CAA1FD0BCAA1FD0D
%CAA1764C6B6C976C976C976C7268B468688C7048976C976C976C976C976C
%976C976C976C976C976C9690976C979191474C7AFD0DCC7A51A5FD06CCA6
%A8FD05FF522752A8FFFFFFFD0452FFFF7D984A76A1CBCACAA1CACAFFFD0C
%CAA1FD0FCA7D774797919791976C70FCB4446E8C4C919790979197909791
%97909791979097919791976C979197916C4BA5CCCDCCCDCCCDCCCDCCCDCC
%CDCCCDCC7B51CDCCCDCCCCA5CC7BFD06FF27522727A8FFFF7D277D52FFFF
%A198C098744B76A1FFFD10CAA1FD0ECAFFCAA14C716C916C6D47928C4468
%B4687291976C976C976C976C976C976C976C976C976C96919147707AFD11
%CC7A7BFD07CCA6A9FD04FFA852FF7D527DFD08FF7C9EFD04C0987576FD22
%CACFA17D4C6C6C9777CA92B4FCB44B979197909791979097919790979197
%909791976C724BA5CCCDCCCCCCCDCCCCCCCDFD06CCA5CCA5CCFD04A57BA6
%7BA651FD06FF525252A87DFD08FF7DF874FD05C0984A767DFD11CAA1FD11
%CA764C47CBFFA78CB48C9247976C976C9790916C97919190976C916C9047
%4B7ACCCCCCA4A5FD077B7C7C7C527D527D525352FD045354537E5352A8FD
%06FF7DFD0BFF7D6D6B75C0C6C0C0C0C69E7451A2CAFFFD0ECAA8CACAFFCA
%CACAFFCACACAFFCAFFCAFFCACFA1A1A8FFFFBCFCB4FC706C966C966C726B
%7271724D7271784D7753535284537D537D537E547E7E28527E537D53FD05
%7D7C7C7BA67BA67BA67BA57BFD06FF277D7DFD0AFF7D6C976C4B74C0C0C0
%98C0C0C0747576FD0FCAA1CACACAA1CAA1CAA1CAFD04A176A1527676FFFF
%FFA18C8CFC685253535259527D597D59595353282E27535252527C517B51
%7B517B5051F8507AA5A4A57AA5A4A5A4CCA4CCA4CCA4FD04CCA5A8FD05FF
%525252A8FD09FF7D6C90976C4D6EFD07C098744A5276A8A1A17DA17D7D76
%7D767D767D5277527D537D535953535253535952532E52A8A827FF6E928C
%924B784D724D724D72477247224B7C7C7C527C527C7CA77CA77CA77CA751
%277CA77CA77CA77CA77C7D7CA77C7D7CA77C7BCCCC7BFD04FF7D5227F827
%FD0AFF7D6B6C476C6C464A75747574757576767D525328FD065359537E53
%5352535253537D537D777D777D767D77A1767DA1CA7D2784BB8C928C6F6C
%FD049197916D4777A7CFCFFFFD07CFFFCFCFCFFFCF5252FFCFCFCFFFCFCF
%CFFFCFCFCFFFFD04CF7BCCCCA6A8FD04FF5252A852A8FD09FF7D53527D52
%7D7D7E5359537D537D537D777D767C7552287DA1A17DA17DA8A1CAC9CAA1
%A1A1CACACFCAFFCAFFCAFFCACAA7CAA8FFFFFF768CFCB46E53479791B96C
%7152AECFFFCFFFFD04CFA8CFCFFFCFCFCFFFCFA751FD04CFFFCFCFCFFFCF
%CFCFFFCFCFCFFFA8A5CCCDA5FD06FF27A827FD0AFF7D4C714D714D714772
%464A98C098C098C098FD04C09875A1A8FFFD0ACAA1FD09CAA1A8CACAA8FF
%FFA84B928C6FCAA7524D227DA7FD09CFA7FD08CFFF7CA7FD12CF7BCCCCA6
%A9FD06FF52FD0BFF7D9191976CB9919791976C6F9EC6FD0AC0987576A2CA
%FFFD08CAA1FD09CAA1CACAA8FFFFCACA7D7DA1CACACAA17C7CA7CFFFFD08
%CFA7FFFD07CF7CA7FFFD10CFA8A5CCCC7BFD04FFA87D7DA87D7DA8FD08FF
%7D47976C6C6D976D976C976C4C74FD0CC09E6E7677FD09CAA1FD07CAA1A1
%A1CAA1A8A8A8A1CACACAA1CAA1CACACA76767CFD07CFA8A8FD08CF52FD12
%CFA87BCCA57BA8FD04FFA87D527DA8FD09FF7D9691976C97919791979197
%917174FD0CC0C69E9875A1A8FFFD06CAA1FD07CAA1CACACAA1CACACAA1CA
%A8FD06CAFFCAA1767DA7FFCFFFCFCFA7FFCFCFCFFFCFCFCFFFCFCFCFFFCF
%CFCFFFCFCFCFFFCFCFCFFFCFFFA8A5CCCC7BFD0AFFA8FD08FF7D6C976C6C
%6D976D976D976D97916C4B9EFD0EC0747576A8FD06CAA1FD05CAA1A1A1FD
%05CAA1A8FD0CCAA17D52A7CFFFFD1ACFA7CFCFA87BCCCCA6A8FD08FF7DFD
%09FF7D9091976C97919791979197919791974698FD0DC0C6C09E7476A1CB
%FD0ACAA1FD05CAA1FD11CA767C7DCFCFFFFD15CFA8517DCFFFA87BCCCCA5
%FD09FFA8A8FD08FF7D6C976C6C91976C976D976C976D976D9747749EFD0F
%C0987451A1A2CBFD04CAA1CAA1A8A8CAA1CACACAA1FD11CAA17D517CA7FD
%15CF7D527DCFCFCF7BCCCCA6A8FD08FF27A8FD08FF7D6C91976C97919791
%9791979197919791976C6F9EC6FD0DC0C6C0C0747577CACAFFCACAA8CAA1
%CAA1FD19CA7D7D7CCFCFFFCFFFCFCFCFFFCFCFCFFFCFCFCFFFCFCFCFFFA8
%CFCFFFA8A5CCCDA5FD06FFA87DA87DA8FD08FF7D6B976C7291976D976D97
%6D976D976D976D976D4C74FD12C0984A76A1CBCACA76A1FD06CAA1FD13CA
%A1CACAA1767C7DFD17CF7BCCA5A6A9FD04FFA8527D7DA8FD09FF7D909197
%6C97919791979197919791979197919791724AFD13C0987551A1CACAA1FD
%1BCAA1CACAFFA1A176A7AEFFFD12CFA8A5CCCC7BFD04FFA87D2752277DA8
%FD08FF7D6C976C6C6D9791976D9791976D9791976D979197916D459EFD12
%C0989E747576A2CACAA1CACACAA1FD1BCA77767CFD04CFFFCFCFCFFFCFCF
%CFFFCFCFCFFFCFCF7BCCCCA5A8FD05FFA852A8FD06FFA8FFFFFF7D979197
%6C976C976C976C976C976C976C976C976C976C6D4674C0C098C09EC09EC0
%9EC09EC09EC0989E98C09EC09E744B7DA1A8A1CACAA1A1CAA1CAA1CAA1CA
%A1CAA1CAA1CAA1CAA1CAA8CAA1CAA1CAA1CAA8CAA1A1527D52A77CA77CA7
%7CA77CA77CA77CA77CA77CA5CCCCA5FD0DFFA8527D52FFFF7D6C976C976C
%976C976C976C976C976C976C976C976C976C91474B9EFD09C098C098FD07
%C09E9E7475527DA1CAA1FD13CAA1A8FD0ACAA1764A7BA4CCA4CCA5CCA4CC
%A5CCA4CCA5FD04CCA5A8FD0CFF2727527DFFFF7D6B6B726C966C976C966C
%976C966C976C966C976C966C976C97484C74C098C09EC09EC0989E98C09E
%C098C09EC09E9E98C0C09E747676A2CACAA1CAA1CAA1CAA1CAA1CAA1CAA1
%CAA1CAA1CAA1CAA1CAA1CAA1CAA1CAA1CACAA8767C7B7B7BA67BA57BA57B
%A57BA57B7B517B51FD0DFFA87D527DFFFF7E6C916C976C916C976C916C97
%6C916C976C916C976C916C976C916D474AC0C0C0989E98C0C0C098C09EC0
%98C09EC0989E98C098C098744A77A1CAC3CAA1CAA1CAA1CAA1CAA1CAA1CA
%A1CAA1A8CACAA1CAA1CAA1CAA1CAA1CACACAA2A14C537EFFA9A9A8FFA8A9
%A8FFA8FFA8A8A8FD12FF7D91919791979197919791979197919791979197
%919791979197919791724BFD11C09EFD07C0744B52CACAFFFD0ECAA8FD0E
%CAFFCAFFA17D7DA8FD0AFFA8FD13FFA26C976D976D976D976D976D976D97
%6D976D976D976D976D976D9791976C472798FD0EC0989EFD06C098C0984A
%267CA1FD0DCAA1FD15CA76767DFD1CFF7D97919791979197919791979197
%919791979197919791979197916C467DA8FF7D74FD0EC098FD08C0C6C098
%2C7B52A1C4FFFD0ACAA1FD14CAFFCAA152A8A8FD05FFA8FD13FF7D47976D
%976D976D976D976D976D976D976D976D976D979191474D77AEFD04FF8475
%98FD0BC0989E98FD05C098FD04C0985081575176FD09CAA1A8FD18CA7676
%76A8FFFFA8A8A8FD12FF7D97919791979197919791979197919791979197
%9197916C4C7DAEFD08FF7C74FD0BC098FD0DC050818781517DA1FFFD06CA
%A1FFFD17CAFFCAA8767DA8FFA8FD13FF7D6C976D976D976D976D976D976D
%976D976D979191474D7DFD0CFF7D4AFD09C0989E9EFD05C098FD07C07451
%81AC815751A1FD22CAA17D527DFD13FF7D91919791979197919791979197
%91979197916C4C7DAEFD0EFFA9519EFD08C098FD0EC0C698517BACAB8157
%7C7DCACACAA1FD1FCA7DFD13FF7E6C976D976D976D976D976D976D979191
%474D7DFD13FF5274FD06C0989E9EFD05C098FD09C0BA7450AC81AC817B51
%76A1FD20CAA1A8FD12FF7D6D91979197919791979197919791724C83FD16
%FF7E7598C6FD04C09EFD12C09851ACABACABAC7B7B52A1CAFFFD1CCAA1FD
%13FF7E6C976D976D976D976D979191474D7DFD19FFA85174C0C0C0989EFD
%06C098FD0DC04A8181AC81AC817C7D7676FD13CA7676FD06CAA1A1A8FD12
%FF7D9791979197919791976D6C4CA8FD1DFF7D6EC0C0C098FD15C0745781
%ACA5817DFFFFA852A1A1FFFD0DCAFFA15252FFFD06CA7DFD13FF7D6C976D
%976D97916D47777DFD20FFA84AC0C09E98FD05C098FD0FC0745181AC817D
%FD04FF7D7D76A1FD0DCAA14B52FD07CAA1A8FD12FF7D97919791B96D724C
%A8FD24FF51989EFD16C0C698757BAB7DFD06FFAF7D7DA1CACAFFFD0ACAA8
%FD07CAA1FD13FF7D6C97916D4777A7FD27FF524ABAFD05C098FD12C0742C
%7DFD08FFA87D527DA1FD12CAA1A8FD12FF7D6C6C7152A8FD29FFA8275198
%C6FD17C09851FD0BFF7D7D76FD11CA7DFD13FF7D2277A7FD2BFF7D515A52
%6EC0C0C098FD14C0984A84FD0BFFA8527DA1FD0DCAC3A1A8FD12FF7DA8FD
%2DFFA82DA9857D74FD19C0747DFD0CFFA87D76A1CAFFFD09CAFFA1FD13FF
%A8A8FD2DFF7D517EA9847E4B9898FD13C098C0C0C07475A8FD0DFF7D7D76
%FD0ACAA1A8FD0DFFA87DA8FFFF7DFD2EFFA72D8584A985855274FD14C098
%C0C0C098757DFD0EFFA8767DA1FFFD06CA7DFD0DFF52277D52FFFFA87DFF
%A8FD2BFF7D2D7EA9848484A9284A98FD11C09E9EFD05C07452FD0FFFA87D
%52A1CACAA1CAA17DA8FD0CFF5252527DFFFF7DFD2EFFA82DA984A984A9A9
%7D577598C6FD10C09EC6FD05C09E51AFFD10FF7D7D7DCACACA7DFD10FFA8
%FFFFA8A8FD2DFF7D517EA9848584A95281815774FD19C04A7DFD10FFAF7D
%527DA1A1A8FD12FFA8FD2EFFA82D8484A984A9857D81AC877B4AFD0FC09E
%FD09C0747CAFFD11FFA87D52FD13FFA8A8FD2DFF7D517EA97EA984A95281
%81AC81824A98FD0CC098FD0BC098757EFD12FFA8A8FD12FFA8FD2EFFA82D
%8584A984A9857D81AC81ACACAC5174FD0CC09EFD0AC0C6C0747DFD11FFA8
%FD13FFA8A8FD2DFF7D517EA984A984A9528181AC81AC81AC575098FD09C0
%98FD0EC09851FD0FFFA8A8FD13FF7DFD2EFFA72D8584A984A9A95981ACA5
%AC81ACA5AC815198FD09C098FD0FC04AA8FD0EFFA8FD13FFA8A8FD2DFF7D
%2D7EA984847EA9528181AC81AC81AC81AC81576EFD07C09E9EFD10C06E7D
%FD0DFFA8A8FD12FF7DFD2EFFA82DA984A984A9A97D81ACA5AC81ACA5AC81
%ACAC824AFD07C09EC6FD0FC0C69876A8FD0BFFA8FD13FFA8A8FD2DFF7D51
%7EA984A984A9528181AC81AC81AC81AC81ACAB825098FD18C098747DFD0B
%FFA8FD12FF7DA8FD2DFFA82D7E7EA97E85845981AC81ACA5AC81ACA5AC81
%ACABAC5774FD04C09EFD08C07474FD0AC07452FD09FFA8FD13FFA8A8FD2D
%FF7D5151585158515851A681AC81AC81AC81AC81AC81AC81AC575098C098
%FD08C09EF84AFD0BC0984BA8FD06FFA8A8A8FD12FFA8FD2EFFA881AC81AC
%ABAC81ACA5AC81ACA5AC81ACA5AC81ACA5AC81AC815174FD0AC07498C6FD
%0CC074A8FD06FFA8FD13FFA8A8FD2DFF7D8181AC81AC81AC81AC81AC81AC
%81AC81AC81AC81AC81AC81AC81574AFD19C07476A9FD18FF7DFD2EFFA77B
%ACA5AC81ACA5AC81ACA5AC81ACA5AC81ACA5AC81ACA5AC81ACAC81269EFD
%17C0C69875A8FFFFFFA8FD13FFA8A8FD2DFF7D8181AC81AC81AC81AC81AC
%81AC81AC81AC81AC81AC81AC81AC81AC817D7674FD18C0BA747DFFFFA8A8
%FD12FF7DA8FD2DFFA87BACABACA5ACABACA5ACABACA5ACABACA5ACABACA5
%ACABACA5ACAB817DFF7E7598C6FD17C09852A9A8FD13FFA8A8FD2DFF7D57
%FD04817B8181817B8181817B8181817B8181817B8181817B81567DFFFFA8
%5174FD19C0517EFD13FF7DFD2FFFFD067D7CFD0C7D83FD087DA8FD04FF7D
%6EFD19C074FD13FFA8A8FD05FFA8FD13FFA8FD35FFA9844AFD0BC098FD0C
%C09FA8FD0CFF7DA8A8A8FFFF7DFD0DFFA8FD05FFA8FD0DFFA8FD13FFA8FD
%0DFFA8FD05FFA8FD09FF5298C0C098FD13C074FD0DFF7D275252FFFFA87D
%7D7DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87D
%A87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87DA87D
%A87DA87DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA85275757B759F75
%9F757B759F757B75A0759F75A0759F757CFD0DFF5252527DFD7CFFA8A8FF
%A8FD7EFFA8A8FFFF7DA87DA87DFD13FF7DFFFD04A87DA8FD12FFA87DFFFF
%7DA87DA87DFD14FFA87DFFA8A8FD14FFA8A8FFA87DA87DFFA8FD0BFF7D52
%A87D2752525227A8FD11FF7D7DA87D2752277D52FD12FF7D52A852275252
%F852A8FD13FF7D7DA87D27FD14FF7D52A85227527D2752FD0BFFFD047D52
%7D527D52FD12FFA852A87D525252277DFD12FFFD047D527D275252FD14FF
%7D52A85252FD14FF7D7DA87D277D527D52FD0CFFA8FFFD06A8FD12FFA8A8
%A8FFA8FFA8A8A8FD13FFA8FFA8FFA8FFFFA8FD14FFFD05A8FD15FFA8FFA8
%FFA8FD48FFFD04A8FD6DFFA8FD05FFA87DA827FFA82752A8A8277D52A8FF
%FFA87DFD67FF52277DFD04FF7D7DFF27FF52FF527D7D7D527DFF7D27FF52
%FD67FFA852FF7DA8A8FF52A8FF52A852A8527DFFFFFFA8FF7D52A87D7DFD
%67FF527D275252FF7D7DFF52FFA85252FD06FFA827A87DFD69FFA8525227
%FFA87DFD04FFA8FD07FFA8FFA87DFD6BFFA8FDC5FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: phi_vs_TauS_noCPT_2012_v2.ai 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:cae7766a-89a0-11e1-85e2-001f5bcc829f'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:cae7766a-89a0-11e1-85e2-001f5bcc829f'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:cae7766a-89a0-11e1-85e2-001f5bcc829f'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2012-04-09T23:27:55Z</xap:CreateDate>
  <xap:ModifyDate>2012-04-18T21:59:31Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2012-04-09T17:43:56-07:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>248</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXlH5k6b+cd35jk&#xA;k0Ar/h02bQRLZ3jw3ClpbdppZIaW/OXiJFiCXKfDWjxsa4qybSL3zJon5WG+1dS+u6ZptxPItyxk&#xA;ZngR3j9UiSRqlVXkPVY9ubH4iqjxY/mFXfWtJI9tKuR/3ccVaa2/MEXCRjVtLMbI7NJ+i7mgKlQB&#xA;/wAdDvyP3Yqv+peff+rzpX/cLuP+8hiqyK2/MFnlVtW0tQjhUb9F3PxDgrV/46HiSPoxV1xbfmDH&#xA;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&#xA;fng2Kqn6M80/9XyP/pDT/qpiqnFovmaN5XXXErM4dv8AQ06hFT/fnguKqn6M80/9XyP/AKQ0/wCq&#xA;mKqdvovmaC3igTXE4RIqLWzStFFB/uzFXS6L5mkeJ21xKwuXX/Q06lGT/fng2Kqn6M80/wDV8j/6&#xA;Q0/6qYqprovmYXDzjXE5uiof9DSlELEf7s/yziqp+jPNP/V8j/6Q0/6qYqp2+i+ZoLeKBNcThEio&#xA;tbNK0UUH+7MVdPovmaZAja4lA6PtZp1jcOP92eK4qqfozzT/ANXyP/pDT/qpiqmui+ZhcPONcTm6&#xA;Kh/0NKUQsR/uz/LOKqn6M80/9XyP/pDT/qpiqXan5L1HVdKn0rU9SgvLC4ZmlhlslIqzmTkCJAVZ&#xA;WNVZdwdwa4JRBFFINbhjcf5MX8dutuPM0skaMCjTWqSSUVgygvzBalKVO57knfOfyezOmlMyFxvo&#xA;OTtodtZhEA0Vf/lUmpf9TD/05p/1Uyn/AEKabvkz/l3N3Bafyg1AyrJ/iI8lVlH+hp0Ygn/dn+Th&#xA;/wBC2mqrkv8ALma7oL1/KTUK/F5hJHtaIP8AmYcH+hTTd8l/l3N3BqL8obyNSo8wNQszf7yx9WYs&#xA;f2/fCfZbTHrJA7czDoFtz+Tk11bS2s+vOYJ0aKULbRqxRxxah5GhofDJ4vZnT45iYMriQfkjJ21l&#xA;lExIFEU9Lzo3TuxV2KpR5th1qfyvq0OhuU1iS0mWwYMqMJih4cWb4VavQnYHFXmfmPTPzNn8kR2G&#xA;ixarazpqE08DSXXrXqWUkdwttDLL9cgmkZJ/Tdq3J4qU5eooePFUk1fQPzyk/TP1aXUk9a+M1p6d&#xA;x9lv9N9MRf6dHWIepa1YcIhxHK1eknJV75GXKKXUK5ALKDUA9wDQVxVdirsVdirDfzOsvMt3pdmm&#xA;iLeSqs0hu4dOuPqlya20q27CX1IDwS6MTOvPcdQy8gVWFectN/OK812G50v69HAunfV50t5o443l&#xA;WC5WdlAuoI1eSZojH+5504lZoxyTFVTyBpv5mR+bNNbXodVtrOD6y8kkt4bq1a3kE/1a0kRrmT4o&#xA;1aJ2ncSTFxw5BKsyr2PFXYq7FXYqwLzFa+c18/Wl9ZRXs2lQpbtH9XuFS1EaC4+vRz27SosksvKD&#xA;0mZGpT4WWjVVee6roX56NPq5tf0jJ69272MYvDDHHMzXfouHW95GCNXt+QVUibiA1vXmxVZ5+Uul&#xA;+f7F9ZPm6a4uJZniZJp5Ko0/Kb1/q8X1i6WODj6XDj6YPT0141ZV6HirsVdirsVYT+aNj5rvNPtE&#xA;0AXjsGnDLYXAtZVuGgZbOWRzJDygjnIMiVII6owqMVSy3s/zDm/NGxvmjuovLwiBvmlnAt+AtZI/&#xA;RS2Sd4y7XZSXmYeYUU58fhxV6TirsVdirsVSbzjBrM/lfUodFLjU3gYW/pOI5Cf2ljkYqEdlqEao&#xA;o1DUdcVeZeYdL/NWbyxptposOpR3qXN41r615SSGKeR/0ebydboSzG1jA9RXaVW2DhziqGk0X89R&#xA;E4031Fj+s2MmpLfaiyzT3MN07XT2LKLtYrOaJ4uUdY6KhATchlXt+KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KsI1/zx5rsPO9h5b03yzHe2t7FJP+k579bUCO3e3SdliEMxYIb2NVqwLNUU2qVWVabrWj&#xA;6ojSaZf298iCNne2lSYATRrLESULbPG6uvipBGxxV5b5w83+dV/Lbzt5p0nVhp9xpWpXsOnr9Xhn&#xA;9O20yQ2bRqJBx5SzxNIXcPseIA2IVV/zF83+cLbVfNR0XVU0m18maJBrJt5IIZRqE0xuH9KRpVZl&#xA;h4WnD90Vbm32u2KonzNY/mRrM8Op2FvNZ2sthPFJZWGpuplhN9p08QAlWzW3vZrMXkautRGafvRU&#xA;YqiLnzP5j8i/lxY32p6bPqN8bySKSO6uWkNnaTTzSW7X95El4xFvb+nFJKBJV9ySCWxVN/KfmHUb&#xA;zzTrGm3VwlzavZabrWlvGySIkGoLNE8KSxqgkRZbNnRzuQ/gMVZhirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqT6z5S8va1qWl6lqdmLi90aRptNmLyJ6bsUY1VG&#xA;VXHKJGo4IqoPUDFWAeQvyJXyfrmi6hbavFc2+j2jWvpvZf6RJ6sREtJ3nkESNcO8wCR86ERmRo1U&#xA;Yqy2H8vdJbTvMmjagRe6B5iu5byTTyHiMZulU3KetG4ZhJMrSAjiVLEVO2Kq/mP8vPJ3mS/gv9a0&#xA;4XV1AghDerNEskSyCURTpE6JPGJByCShlr2xVkeKpV5k8saP5jsBYask0lqH9ThBc3FoxPFkoz20&#xA;kLspVyCpND4Yqg/LXk6z0LUdSvIGXjeJaWlnbRR+lHa2NhEY7a2Qcm5cGkkblt9qlBTFWQ4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FX/9k=</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:cae7766a-89a0-11e1-85e2-001f5bcc829f'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:55855e0c-82a0-11e1-b05a-001ff3d2e431</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:cae7766a-89a0-11e1-85e2-001f5bcc829f'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -487.869 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 487.869 li
504.956 487.869 li
504.956 0 li
clp
[1 0 0 1 0 0 ] concat
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
451.504 431.307 mo
62.253 431.307 li
62.253 432.054 li
63 432.054 li
63 6.804 li
62.253 6.804 li
62.253 7.56 li
451.504 7.56 li
451.504 6.057 li
62.253 6.057 li
61.497 6.057 li
61.497 6.804 li
61.497 432.054 li
61.497 432.81 li
62.253 432.81 li
451.504 432.81 li
451.504 431.307 li
false sop
/0 
[/DeviceRGB] add_csa
0 0 0 rgb
f
grestore % PSGState
248.248 418.806 mo
248.248 20.052 li
360 20.052 li
360 418.806 li
248.248 418.806 li
false sop
0.725491 0.89804 0.29804 rgb
ef
248.248 418.806 mo
249.003 418.806 li
249.003 20.052 li
248.248 20.052 li
248.248 20.808 li
360 20.808 li
360 20.052 li
359.254 20.052 li
359.254 418.806 li
360 418.806 li
360 418.06 li
248.248 418.06 li
248.248 418.806 li
249.003 418.806 li
248.248 418.806 li
248.248 419.553 li
360 419.553 li
360.747 419.553 li
360.747 418.806 li
360.747 20.052 li
360.747 19.305 li
360 19.305 li
248.248 19.305 li
247.5 19.305 li
247.5 20.052 li
247.5 418.806 li
247.5 419.553 li
248.248 419.553 li
248.248 418.806 li
0 0 0 rgb
f
62.253 263.556 mo
62.253 164.808 li
487.746 164.808 li
487.746 263.556 li
62.253 263.556 li
1 1 0.243138 rgb
ef
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
62.253 263.556 mo
63 263.556 li
63 164.808 li
62.253 164.808 li
62.253 165.556 li
487.746 165.556 li
487.746 164.808 li
487 164.808 li
487 263.556 li
487.746 263.556 li
487.746 262.81 li
62.253 262.81 li
62.253 263.556 li
63 263.556 li
62.253 263.556 li
62.253 264.303 li
487.746 264.303 li
488.502 264.303 li
488.502 263.556 li
488.502 164.808 li
488.502 164.052 li
487.746 164.052 li
62.253 164.052 li
61.497 164.052 li
61.497 164.808 li
61.497 263.556 li
61.497 264.303 li
62.253 264.303 li
62.253 263.556 li
0 0 0 rgb
f
grestore % PSGState
75.501 255.556 mo
75.501 198.054 li
474.246 198.054 li
474.246 255.556 li
75.501 255.556 li
1 1 0.811765 rgb
ef
75.501 255.556 mo
76.248 255.556 li
76.248 198.054 li
75.501 198.054 li
75.501 198.81 li
474.246 198.81 li
474.246 198.054 li
473.5 198.054 li
473.5 255.556 li
474.246 255.556 li
474.246 254.808 li
75.501 254.808 li
75.501 255.556 li
76.248 255.556 li
75.501 255.556 li
75.501 256.302 li
474.246 256.302 li
475.002 256.302 li
475.002 255.556 li
475.002 198.054 li
475.002 197.307 li
474.246 197.307 li
75.501 197.307 li
74.754 197.307 li
74.754 198.054 li
74.754 255.556 li
74.754 256.302 li
75.501 256.302 li
75.501 255.556 li
0 0 0 rgb
f
251.001 392.31 mo
251.001 46.557 li
278.748 46.557 li
278.748 392.31 li
251.001 392.31 li
0.686275 0.784314 0.886275 rgb
ef
251.001 392.31 mo
251.748 392.31 li
251.748 46.557 li
251.001 46.557 li
251.001 47.304 li
278.748 47.304 li
278.748 46.557 li
278.001 46.557 li
278.001 392.31 li
278.748 392.31 li
278.748 391.554 li
251.001 391.554 li
251.001 392.31 li
251.748 392.31 li
251.001 392.31 li
251.001 393.057 li
278.748 393.057 li
279.504 393.057 li
279.504 392.31 li
279.504 46.557 li
279.504 45.81 li
278.748 45.81 li
251.001 45.81 li
250.254 45.81 li
250.254 46.557 li
250.254 392.31 li
250.254 393.057 li
251.001 393.057 li
251.001 392.31 li
0 0 0 rgb
f
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
63 331.693 mo
63 264.303 li
202.024 264.303 li
63 331.693 li
247.5 164.052 mo
114.352 164.052 li
247.5 99.51 li
247.5 164.052 li
0.75594 0.0980393 1 rgb
f
62.253 332.056 mo
62.253 264.303 li
63 264.303 li
63 331.693 li
62.253 332.056 li
0.658824 0 0.901961 rgb
f
250.254 164.052 mo
249.003 164.052 li
249.003 98.7814 li
250.254 98.175 li
250.254 164.052 li
0.729412 0.0862746 0.929412 rgb
f
249.003 164.052 mo
247.5 164.052 li
247.5 99.51 li
249.003 98.7814 li
249.003 164.052 li
0.658824 0 0.901961 rgb
f
205.106 262.81 mo
63 262.81 li
63 188.944 li
111.251 165.556 li
250.254 165.556 li
250.254 197.307 li
75.501 197.307 li
74.754 197.307 li
74.754 198.054 li
74.754 255.556 li
74.754 256.302 li
75.501 256.302 li
75.501 255.556 li
76.248 255.556 li
75.501 255.556 li
75.501 256.302 li
218.529 256.302 li
205.106 262.81 li
0.756863 0.0980393 0.925491 rgb
f
202.024 264.303 mo
63 264.303 li
62.253 264.303 li
62.253 263.556 li
63 263.556 li
62.253 263.556 li
62.253 189.306 li
63 188.944 li
63 262.81 li
205.106 262.81 li
202.024 264.303 li
250.254 165.556 mo
111.251 165.556 li
114.352 164.052 li
247.5 164.052 li
249.003 164.052 li
250.254 164.052 li
250.254 165.556 li
0.658824 0 0.901961 rgb
f
408.838 164.052 mo
360.747 164.052 li
360.747 44.615 li
437.191 7.56 li
451.504 7.56 li
451.504 6.804 li
487.746 6.804 li
487.746 125.802 li
408.838 164.052 li
0.75594 0.0980393 1 rgb
f
451.504 7.56 mo
437.191 7.56 li
438.75 6.804 li
451.504 6.804 li
451.504 7.56 li
0.658824 0 0.901961 rgb
f
359.254 164.052 mo
279.504 164.052 li
279.504 83.9965 li
359.254 45.3392 li
359.254 164.052 li
0.729412 0.0862746 0.929412 rgb
f
360.747 164.052 mo
359.254 164.052 li
359.254 45.3392 li
360.747 44.615 li
360.747 164.052 li
0.658824 0 0.901961 rgb
f
340.234 197.307 mo
279.504 197.307 li
279.504 165.556 li
405.737 165.556 li
340.234 197.307 li
0.756863 0.0980393 0.925491 rgb
f
405.737 165.556 mo
279.504 165.556 li
279.504 164.052 li
359.254 164.052 li
360.747 164.052 li
408.838 164.052 li
405.737 165.556 li
0.658824 0 0.901961 rgb
f
221.611 254.808 mo
76.248 254.808 li
76.248 198.81 li
250.254 198.81 li
250.254 240.924 li
221.611 254.808 li
279.504 226.745 mo
279.504 198.81 li
337.133 198.81 li
279.504 226.745 li
0.756863 0.0980393 0.980393 rgb
f
218.529 256.302 mo
75.501 256.302 li
75.501 255.556 li
76.248 255.556 li
75.501 255.556 li
75.501 256.302 li
74.754 256.302 li
74.754 255.556 li
74.754 198.054 li
74.754 197.307 li
75.501 197.307 li
250.254 197.307 li
250.254 198.81 li
76.248 198.81 li
76.248 254.808 li
221.611 254.808 li
218.529 256.302 li
337.133 198.81 mo
279.504 198.81 li
279.504 197.307 li
340.234 197.307 li
337.133 198.81 li
0.658824 0 0.901961 rgb
f
251.748 240.2 mo
251.748 97.4508 li
278.001 84.725 li
278.001 227.474 li
251.748 240.2 li
0.725491 0.0784314 0.988236 rgb
f
250.254 240.924 mo
250.254 198.81 li
250.254 197.307 li
250.254 165.556 li
250.254 164.052 li
250.254 98.175 li
251.748 97.4508 li
251.748 240.2 li
250.254 240.924 li
278.001 227.474 mo
278.001 84.725 li
279.504 83.9965 li
279.504 164.052 li
279.504 165.556 li
279.504 197.307 li
279.504 198.81 li
279.504 226.745 li
278.001 227.474 li
0.658824 0 0.901961 rgb
f
438.75 6.80616 mo
438.75 7.55616 li
487.75 7.55616 li
487.75 6.80616 li
487 6.80616 li
487 125.807 li
487.75 125.807 li
487.423 125.132 li
61.9229 331.382 li
62.25 332.057 li
63 332.057 li
63 189.307 li
62.25 189.307 li
62.5772 189.982 li
439.078 7.48105 li
438.75 6.80616 li
438.75 7.55616 li
438.75 6.80616 li
438.423 6.13126 li
61.9229 188.632 li
61.5 188.837 li
61.5 189.307 li
61.5 332.057 li
61.5 333.254 li
62.5772 332.732 li
488.078 126.482 li
488.5 126.277 li
488.5 125.807 li
488.5 6.80616 li
488.5 6.05616 li
487.75 6.05616 li
438.75 6.05616 li
438.578 6.05616 li
438.423 6.13126 li
438.75 6.80616 li
0 0 0 rgb
f
grestore % PSGState
62.25 184.307 mo
62.25 106.057 li
487.75 419.057 li
487.75 432.057 li
398.75 432.057 li
62.25 184.307 li
1 0.6 0 rgb
ef
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
62.25 184.307 mo
63 184.307 li
63 106.057 li
62.25 106.057 li
61.8056 106.661 li
487.306 419.661 li
487.75 419.057 li
487 419.057 li
487 432.057 li
487.75 432.057 li
487.75 431.307 li
398.75 431.307 li
398.75 432.057 li
399.195 431.453 li
62.6947 183.703 li
62.25 184.307 li
63 184.307 li
62.25 184.307 li
61.8054 184.911 li
398.306 432.661 li
398.504 432.807 li
398.75 432.807 li
487.75 432.807 li
488.5 432.807 li
488.5 432.057 li
488.5 419.057 li
488.5 418.677 li
488.195 418.452 li
62.6945 105.452 li
61.5 104.574 li
61.5 106.057 li
61.5 184.307 li
61.5 184.686 li
61.8054 184.911 li
62.25 184.307 li
0 0 0 rgb
f
grestore % PSGState
62.25 171.307 mo
62.25 104.807 li
487.75 292.057 li
487.75 358.307 li
62.25 171.307 li
1 0.8 0.8 rgb
ef
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
62.25 171.307 mo
63 171.307 li
63 104.807 li
62.25 104.807 li
61.948 105.493 li
487.448 292.743 li
487.75 292.057 li
487 292.057 li
487 358.307 li
487.75 358.307 li
488.052 357.62 li
62.5518 170.62 li
62.25 171.307 li
63 171.307 li
62.25 171.307 li
61.9483 171.993 li
487.449 358.993 li
488.5 359.456 li
488.5 358.307 li
488.5 292.057 li
488.5 291.567 li
488.053 291.37 li
62.5521 104.12 li
61.5 103.657 li
61.5 104.807 li
61.5 171.307 li
61.5 171.796 li
61.9483 171.993 li
62.25 171.307 li
0 0 0 rgb
f
grestore % PSGState
487.75 184.307 mo
487.75 189.057 li
62.25 210.807 li
62.25 206.057 li
487.75 184.307 li
0.8 0.8 1 rgb
ef
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
487.75 184.307 mo
487 184.307 li
487 189.057 li
487.75 189.057 li
487.712 188.308 li
62.2118 210.058 li
62.25 210.807 li
63 210.807 li
63 206.057 li
62.25 206.057 li
62.2883 206.806 li
487.789 185.056 li
487.75 184.307 li
487 184.307 li
487.75 184.307 li
487.712 183.558 li
62.2118 205.308 li
61.5 205.344 li
61.5 206.057 li
61.5 210.807 li
61.5 211.596 li
62.2883 211.556 li
487.789 189.806 li
488.5 189.769 li
488.5 189.057 li
488.5 184.307 li
488.5 183.517 li
487.712 183.558 li
487.75 184.307 li
0 0 0 rgb
f
grestore % PSGState
278.5 177.557 mo
279.75 179.307 li
280.75 181.057 li
281.75 182.807 li
282.75 184.557 li
283.75 186.307 li
284.75 188.057 li
285.5 189.807 li
286.5 191.557 li
287.25 193.307 li
287.75 195.057 li
288.5 196.807 li
289 198.307 li
289.5 200.057 li
289.75 201.557 li
290.25 203.057 li
290.5 204.557 li
290.5 205.807 li
290.75 207.057 li
290.75 208.307 li
290.5 209.307 li
290.5 210.307 li
290.25 211.057 li
289.75 212.057 li
289.5 212.557 li
289 213.307 li
288.5 213.557 li
287.75 214.057 li
287.25 214.307 li
284.75 214.307 li
283.75 214.057 li
283 213.557 li
282 213.057 li
280.75 212.557 li
279.75 211.807 li
278.5 211.057 li
277.5 210.307 li
276.25 209.307 li
275 208.057 li
274 207.057 li
272.75 205.807 li
271.5 204.307 li
270.25 202.807 li
269 201.557 li
267.75 199.807 li
266.75 198.307 li
265.5 196.557 li
264.5 195.057 li
263.25 193.307 li
262.25 191.557 li
261.25 189.807 li
260.25 188.057 li
259.25 186.057 li
258.5 184.307 li
257.75 182.557 li
257 180.807 li
256.25 179.057 li
255.75 177.557 li
255 175.807 li
254.5 174.307 li
254.25 172.807 li
254 171.307 li
253.75 169.807 li
253.5 168.557 li
253.5 165.057 li
253.75 164.057 li
254 163.057 li
254.25 162.307 li
254.5 161.557 li
255 161.057 li
255.5 160.557 li
256.25 160.307 li
256.75 160.057 li
257.5 159.807 li
258.5 159.807 li
259.25 160.057 li
260.25 160.307 li
261.25 160.557 li
262.25 161.057 li
263.25 161.557 li
264.25 162.307 li
265.5 163.057 li
266.5 164.057 li
267.75 165.057 li
269 166.057 li
270.25 167.307 li
271.25 168.557 li
272.5 169.807 li
273.75 171.307 li
275 172.807 li
276.25 174.307 li
277.5 176.057 li
278.5 177.557 li
1 0.101961 0 rgb
ef
gsave % PSGState
62.253 432.054 mo
62.253 6.804 li
487.746 6.804 li
487.746 432.054 li
62.253 432.054 li
clp
278.5 177.557 mo
277.89 177.993 li
279.14 179.743 li
279.75 179.307 li
279.099 179.679 li
280.099 181.429 li
281.099 183.179 li
282.099 184.929 li
283.099 186.679 li
284.099 188.429 li
284.75 188.057 li
284.061 188.352 li
284.811 190.102 li
284.828 190.141 li
284.849 190.179 li
285.849 191.929 li
286.5 191.557 li
285.811 191.852 li
286.561 193.602 li
287.25 193.307 li
286.529 193.513 li
287.029 195.263 li
287.042 195.308 li
287.061 195.352 li
287.811 197.102 li
288.5 196.807 li
287.789 197.044 li
288.289 198.544 li
289 198.307 li
288.279 198.513 li
288.779 200.263 li
289.5 200.057 li
288.761 200.18 li
289.011 201.68 li
289.02 201.738 li
289.039 201.794 li
289.539 203.294 li
290.25 203.057 li
289.511 203.18 li
289.761 204.68 li
290.5 204.557 li
289.75 204.557 li
289.75 205.807 li
289.75 205.881 li
289.765 205.954 li
290.015 207.204 li
290.75 207.057 li
290 207.057 li
290 208.307 li
290.75 208.307 li
290.023 208.125 li
289.773 209.125 li
289.75 209.214 li
289.75 209.307 li
289.75 210.307 li
290.5 210.307 li
289.789 210.069 li
289.539 210.819 li
290.25 211.057 li
289.58 210.721 li
289.08 211.721 li
288.83 212.221 li
289.5 212.557 li
288.876 212.141 li
288.376 212.891 li
289 213.307 li
288.665 212.636 li
288.165 212.886 li
288.123 212.907 li
288.084 212.933 li
287.334 213.433 li
287.75 214.057 li
287.415 213.386 li
286.915 213.636 li
287.25 214.307 li
287.25 213.557 li
284.75 213.557 li
284.75 214.307 li
284.932 213.579 li
283.932 213.329 li
283.75 214.057 li
284.166 213.433 li
283.416 212.933 li
283.378 212.907 li
283.336 212.886 li
282.336 212.386 li
282.308 212.372 li
282.279 212.36 li
281.029 211.86 li
280.75 212.557 li
281.2 211.957 li
280.2 211.207 li
280.17 211.183 li
280.136 211.164 li
278.886 210.414 li
278.5 211.057 li
278.95 210.457 li
277.95 209.707 li
277.5 210.307 li
277.969 209.721 li
276.719 208.721 li
276.25 209.307 li
276.781 208.776 li
275.531 207.526 li
274.531 206.526 li
273.281 205.276 li
272.75 205.807 li
273.327 205.326 li
272.077 203.826 li
270.827 202.326 li
270.805 202.3 li
270.781 202.276 li
269.531 201.026 li
269 201.557 li
269.611 201.121 li
268.361 199.371 li
267.75 199.807 li
268.375 199.391 li
267.375 197.891 li
267.368 197.881 li
267.361 197.871 li
266.111 196.121 li
265.5 196.557 li
266.125 196.141 li
265.125 194.641 li
265.118 194.631 li
265.111 194.621 li
263.861 192.871 li
263.25 193.307 li
263.902 192.935 li
262.902 191.185 li
261.902 189.435 li
260.902 187.685 li
260.25 188.057 li
260.921 187.721 li
259.921 185.721 li
259.25 186.057 li
259.94 185.761 li
259.19 184.011 li
258.44 182.261 li
257.69 180.511 li
256.94 178.761 li
256.25 179.057 li
256.962 178.819 li
256.462 177.319 li
256.452 177.29 li
256.44 177.261 li
255.69 175.511 li
255 175.807 li
255.712 175.569 li
255.212 174.069 li
254.5 174.307 li
255.24 174.183 li
254.99 172.683 li
254.74 171.183 li
254.49 169.683 li
254.488 169.671 li
254.486 169.66 li
254.236 168.41 li
253.5 168.557 li
254.25 168.557 li
254.25 165.057 li
253.5 165.057 li
254.228 165.239 li
254.478 164.239 li
254.728 163.239 li
254 163.057 li
254.712 163.294 li
254.962 162.544 li
255.212 161.794 li
254.5 161.557 li
255.031 162.087 li
255.531 161.587 li
256.031 161.087 li
255.5 160.557 li
255.738 161.268 li
256.488 161.018 li
256.538 161.001 li
256.586 160.977 li
257.086 160.727 li
256.75 160.057 li
256.988 160.768 li
257.738 160.518 li
257.5 159.807 li
257.5 160.557 li
258.5 160.557 li
258.5 159.807 li
258.263 160.518 li
259.013 160.768 li
259.041 160.777 li
259.069 160.784 li
260.069 161.034 li
261.069 161.284 li
261.25 160.557 li
260.915 161.227 li
261.915 161.727 li
262.915 162.227 li
263.25 161.557 li
262.8 162.157 li
263.8 162.907 li
263.831 162.93 li
263.865 162.95 li
265.115 163.7 li
265.5 163.057 li
264.97 163.587 li
265.97 164.587 li
266 164.616 li
266.032 164.642 li
267.282 165.642 li
268.532 166.642 li
269 166.057 li
268.47 166.587 li
269.72 167.837 li
270.25 167.307 li
269.665 167.775 li
270.665 169.025 li
270.691 169.058 li
270.72 169.087 li
271.97 170.337 li
272.5 169.807 li
271.924 170.287 li
273.174 171.787 li
274.424 173.287 li
275.674 174.787 li
276.25 174.307 li
275.64 174.743 li
276.89 176.493 li
277.5 176.057 li
276.876 176.473 li
277.876 177.973 li
277.883 177.983 li
277.89 177.993 li
278.5 177.557 li
279.125 177.141 li
278.125 175.641 li
278.118 175.631 li
278.111 175.621 li
276.861 173.871 li
276.845 173.848 li
276.827 173.826 li
275.577 172.326 li
274.327 170.826 li
273.077 169.326 li
273.055 169.3 li
273.031 169.276 li
271.781 168.026 li
271.25 168.557 li
271.836 168.088 li
270.836 166.838 li
270.81 166.806 li
270.781 166.776 li
269.531 165.526 li
269.501 165.497 li
269.469 165.471 li
268.219 164.471 li
266.969 163.471 li
266.5 164.057 li
267.031 163.526 li
266.031 162.526 li
265.966 162.461 li
265.886 162.414 li
264.636 161.664 li
264.25 162.307 li
264.7 161.707 li
263.7 160.957 li
263.646 160.916 li
263.586 160.886 li
262.586 160.386 li
261.586 159.886 li
261.512 159.849 li
261.432 159.829 li
260.432 159.579 li
259.432 159.329 li
259.25 160.057 li
259.488 159.345 li
258.738 159.095 li
258.622 159.057 li
258.5 159.057 li
257.5 159.057 li
257.379 159.057 li
257.263 159.095 li
256.513 159.345 li
256.463 159.362 li
256.415 159.386 li
255.915 159.636 li
256.25 160.307 li
256.013 159.595 li
255.263 159.845 li
255.095 159.901 li
254.97 160.026 li
254.47 160.526 li
253.97 161.026 li
253.845 161.152 li
253.789 161.319 li
253.539 162.069 li
253.289 162.819 li
253.28 162.847 li
253.273 162.875 li
253.023 163.875 li
252.773 164.875 li
252.75 164.964 li
252.75 165.057 li
252.75 168.557 li
252.75 168.631 li
252.765 168.704 li
253.015 169.954 li
253.75 169.807 li
253.011 169.93 li
253.261 171.43 li
253.511 172.93 li
253.761 174.43 li
253.77 174.488 li
253.789 174.544 li
254.289 176.044 li
254.299 176.073 li
254.311 176.102 li
255.061 177.852 li
255.75 177.557 li
255.039 177.794 li
255.539 179.294 li
255.549 179.323 li
255.561 179.352 li
256.311 181.102 li
257.061 182.852 li
257.811 184.602 li
258.561 186.352 li
258.57 186.372 li
258.58 186.392 li
259.58 188.392 li
259.589 188.411 li
259.599 188.429 li
260.599 190.179 li
261.599 191.929 li
262.599 193.679 li
262.618 193.712 li
262.64 193.743 li
263.89 195.493 li
264.5 195.057 li
263.876 195.473 li
264.876 196.973 li
264.883 196.983 li
264.89 196.993 li
266.14 198.743 li
266.75 198.307 li
266.126 198.723 li
267.126 200.223 li
267.133 200.233 li
267.14 200.243 li
268.39 201.993 li
268.426 202.043 li
268.47 202.087 li
269.72 203.337 li
270.25 202.807 li
269.674 203.287 li
270.924 204.787 li
272.174 206.287 li
272.196 206.313 li
272.22 206.337 li
273.47 207.587 li
274.47 208.587 li
275.72 209.837 li
275.75 209.866 li
275.782 209.892 li
277.032 210.892 li
277.041 210.9 li
277.05 210.907 li
278.05 211.657 li
278.081 211.68 li
278.115 211.7 li
279.365 212.45 li
279.75 211.807 li
279.3 212.407 li
280.3 213.157 li
280.38 213.216 li
280.472 213.253 li
281.722 213.753 li
282 213.057 li
281.665 213.727 li
282.665 214.227 li
283 213.557 li
282.584 214.181 li
283.334 214.681 li
283.443 214.753 li
283.569 214.784 li
284.569 215.034 li
284.658 215.057 li
284.75 215.057 li
287.25 215.057 li
287.428 215.057 li
287.586 214.977 li
288.086 214.727 li
288.128 214.707 li
288.166 214.681 li
288.916 214.181 li
288.5 213.557 li
288.836 214.227 li
289.336 213.977 li
289.514 213.888 li
289.625 213.723 li
290.125 212.973 li
290.15 212.934 li
290.171 212.892 li
290.421 212.392 li
290.921 211.392 li
290.945 211.344 li
290.962 211.294 li
291.212 210.544 li
291.25 210.428 li
291.25 210.307 li
291.25 209.307 li
290.5 209.307 li
291.228 209.489 li
291.478 208.489 li
291.5 208.399 li
291.5 208.307 li
291.5 207.057 li
291.5 206.982 li
291.486 206.91 li
291.236 205.66 li
290.5 205.807 li
291.25 205.807 li
291.25 204.557 li
291.25 204.495 li
291.24 204.433 li
290.99 202.933 li
290.981 202.875 li
290.962 202.819 li
290.462 201.319 li
289.75 201.557 li
290.49 201.433 li
290.24 199.933 li
290.233 199.891 li
290.222 199.851 li
289.722 198.101 li
289.717 198.085 li
289.712 198.069 li
289.212 196.569 li
289.202 196.54 li
289.19 196.511 li
288.44 194.761 li
287.75 195.057 li
288.472 194.851 li
287.972 193.101 li
287.959 193.055 li
287.94 193.011 li
287.19 191.261 li
287.173 191.222 li
287.152 191.185 li
286.152 189.435 li
285.5 189.807 li
286.19 189.511 li
285.44 187.761 li
285.423 187.722 li
285.402 187.685 li
284.402 185.935 li
283.402 184.185 li
282.402 182.435 li
281.402 180.685 li
280.402 178.935 li
280.383 178.902 li
280.361 178.871 li
279.111 177.121 li
278.5 177.557 li
279.125 177.141 li
278.5 177.557 li
0 0 0 rgb
f
487.75 184.307 mo
487.626 184.307 li
487.626 189.057 li
487.75 189.057 li
487.744 188.932 li
62.2437 210.682 li
62.25 210.807 li
62.375 210.807 li
62.375 206.057 li
62.25 206.057 li
62.2564 206.181 li
487.757 184.431 li
487.75 184.307 li
487.626 184.307 li
487.75 184.307 li
487.744 184.182 li
62.2437 205.932 li
62.125 205.938 li
62.125 206.057 li
62.125 210.807 li
62.125 210.938 li
62.2564 210.931 li
487.757 189.181 li
487.875 189.175 li
487.875 189.057 li
487.875 184.307 li
487.875 184.175 li
487.744 184.182 li
487.75 184.307 li
62.25 171.307 mo
62.375 171.307 li
62.375 104.807 li
62.25 104.807 li
62.1997 104.921 li
487.7 292.171 li
487.75 292.057 li
487.626 292.057 li
487.626 358.307 li
487.75 358.307 li
487.801 358.192 li
62.3003 171.192 li
62.25 171.307 li
62.375 171.307 li
62.25 171.307 li
62.1998 171.421 li
487.7 358.421 li
487.875 358.498 li
487.875 358.307 li
487.875 292.057 li
487.875 291.975 li
487.801 291.942 li
62.3004 104.692 li
62.125 104.615 li
62.125 104.807 li
62.125 171.307 li
62.125 171.388 li
62.1998 171.421 li
62.25 171.307 li
62.25 184.307 mo
62.375 184.307 li
62.375 106.057 li
62.25 106.057 li
62.176 106.157 li
487.676 419.157 li
487.75 419.057 li
487.626 419.057 li
487.626 432.057 li
487.75 432.057 li
487.75 431.932 li
398.75 431.932 li
398.75 432.057 li
398.825 431.956 li
62.3242 184.206 li
62.25 184.307 li
62.375 184.307 li
62.25 184.307 li
62.1759 184.407 li
398.676 432.157 li
398.709 432.182 li
398.75 432.182 li
487.75 432.182 li
487.875 432.182 li
487.875 432.057 li
487.875 419.057 li
487.875 418.993 li
487.825 418.956 li
62.3241 105.956 li
62.125 105.81 li
62.125 106.057 li
62.125 184.307 li
62.125 184.37 li
62.1759 184.407 li
62.25 184.307 li
438.75 6.80616 mo
438.75 6.93116 li
487.75 6.93116 li
487.75 6.80616 li
487.626 6.80616 li
487.626 125.807 li
487.75 125.807 li
487.696 125.694 li
62.1955 331.944 li
62.25 332.057 li
62.375 332.057 li
62.375 189.307 li
62.25 189.307 li
62.3046 189.419 li
438.805 6.91864 li
438.75 6.80616 li
438.75 6.93116 li
438.75 6.80616 li
438.696 6.69368 li
62.1955 189.194 li
62.125 189.228 li
62.125 189.307 li
62.125 332.057 li
62.125 332.256 li
62.3046 332.169 li
487.805 125.919 li
487.875 125.885 li
487.875 125.807 li
487.875 6.80616 li
487.875 6.68116 li
487.75 6.68116 li
438.75 6.68116 li
438.722 6.68116 li
438.696 6.69368 li
438.75 6.80616 li
251 392.307 mo
251.125 392.307 li
251.125 46.5562 li
251 46.5562 li
251 46.6812 li
278.75 46.6812 li
278.75 46.5562 li
278.626 46.5562 li
278.626 392.307 li
278.75 392.307 li
278.75 392.182 li
251 392.182 li
251 392.307 li
251.125 392.307 li
251 392.307 li
251 392.432 li
278.75 392.432 li
278.875 392.432 li
278.875 392.307 li
278.875 46.5562 li
278.875 46.4312 li
278.75 46.4312 li
251 46.4312 li
250.876 46.4312 li
250.876 46.5562 li
250.876 392.307 li
250.876 392.432 li
251 392.432 li
251 392.307 li
75.5 255.557 mo
75.625 255.557 li
75.625 198.057 li
75.5 198.057 li
75.5 198.182 li
474.25 198.182 li
474.25 198.057 li
474.126 198.057 li
474.126 255.557 li
474.25 255.557 li
474.25 255.432 li
75.5 255.432 li
75.5 255.557 li
75.625 255.557 li
75.5 255.557 li
75.5 255.682 li
474.25 255.682 li
474.375 255.682 li
474.375 255.557 li
474.375 198.057 li
474.375 197.932 li
474.25 197.932 li
75.5 197.932 li
75.375 197.932 li
75.375 198.057 li
75.375 255.557 li
75.375 255.682 li
75.5 255.682 li
75.5 255.557 li
62.25 263.557 mo
62.375 263.557 li
62.375 164.807 li
62.25 164.807 li
62.25 164.932 li
487.75 164.932 li
487.75 164.807 li
487.626 164.807 li
487.626 263.557 li
487.75 263.557 li
487.75 263.432 li
62.25 263.432 li
62.25 263.557 li
62.375 263.557 li
62.25 263.557 li
62.25 263.682 li
487.75 263.682 li
487.875 263.682 li
487.875 263.557 li
487.875 164.807 li
487.875 164.682 li
487.75 164.682 li
62.25 164.682 li
62.125 164.682 li
62.125 164.807 li
62.125 263.557 li
62.125 263.682 li
62.25 263.682 li
62.25 263.557 li
248.25 418.807 mo
248.375 418.807 li
248.375 20.0562 li
248.25 20.0562 li
248.25 20.1812 li
360 20.1812 li
360 20.0562 li
359.876 20.0562 li
359.876 418.807 li
360 418.807 li
360 418.682 li
248.25 418.682 li
248.25 418.807 li
248.375 418.807 li
248.25 418.807 li
248.25 418.932 li
360 418.932 li
360.125 418.932 li
360.125 418.807 li
360.125 20.0562 li
360.125 19.9312 li
360 19.9312 li
248.25 19.9312 li
248.126 19.9312 li
248.126 20.0562 li
248.126 418.807 li
248.126 418.932 li
248.25 418.932 li
248.25 418.807 li
451.5 431.932 mo
62.25 431.932 li
62.25 432.057 li
62.375 432.057 li
62.375 6.80616 li
62.25 6.80616 li
62.25 6.93116 li
451.5 6.93116 li
451.5 6.68116 li
62.25 6.68116 li
62.125 6.68116 li
62.125 6.80616 li
62.125 432.057 li
62.125 432.182 li
62.25 432.182 li
451.5 432.182 li
451.5 431.932 li
f
grestore % PSGState
278.5 177.557 mo
278.399 177.629 li
279.649 179.379 li
279.75 179.307 li
279.642 179.369 li
280.642 181.119 li
281.642 182.869 li
282.642 184.619 li
283.642 186.369 li
284.642 188.119 li
284.75 188.057 li
284.636 188.106 li
285.386 189.856 li
285.388 189.862 li
285.392 189.869 li
286.392 191.619 li
286.5 191.557 li
286.386 191.606 li
287.136 193.356 li
287.25 193.307 li
287.13 193.341 li
287.63 195.091 li
287.632 195.099 li
287.636 195.106 li
288.386 196.856 li
288.5 196.807 li
288.382 196.846 li
288.882 198.346 li
289 198.307 li
288.88 198.341 li
289.38 200.091 li
289.5 200.057 li
289.377 200.077 li
289.627 201.577 li
289.629 201.587 li
289.632 201.596 li
290.132 203.096 li
290.25 203.057 li
290.127 203.077 li
290.377 204.577 li
290.5 204.557 li
290.376 204.557 li
290.376 205.807 li
290.376 205.819 li
290.378 205.831 li
290.628 207.081 li
290.75 207.057 li
290.626 207.057 li
290.626 208.307 li
290.75 208.307 li
290.629 208.276 li
290.379 209.276 li
290.376 209.291 li
290.376 209.307 li
290.376 210.307 li
290.5 210.307 li
290.382 210.267 li
290.132 211.017 li
290.25 211.057 li
290.139 211.001 li
289.639 212.001 li
289.389 212.501 li
289.5 212.557 li
289.396 212.487 li
288.896 213.237 li
289 213.307 li
288.945 213.195 li
288.445 213.445 li
288.438 213.448 li
288.431 213.453 li
287.681 213.953 li
287.75 214.057 li
287.695 213.945 li
287.195 214.195 li
287.25 214.307 li
287.25 214.182 li
284.75 214.182 li
284.75 214.307 li
284.781 214.185 li
283.781 213.935 li
283.75 214.057 li
283.82 213.953 li
283.07 213.453 li
283.063 213.448 li
283.056 213.445 li
282.056 212.945 li
282.052 212.943 li
282.047 212.941 li
280.797 212.441 li
280.75 212.557 li
280.825 212.457 li
279.825 211.707 li
279.82 211.703 li
279.815 211.699 li
278.565 210.949 li
278.5 211.057 li
278.575 210.957 li
277.575 210.207 li
277.5 210.307 li
277.579 210.209 li
276.329 209.209 li
276.25 209.307 li
276.339 209.218 li
275.089 207.968 li
274.089 206.968 li
272.839 205.718 li
272.75 205.807 li
272.846 205.727 li
271.596 204.227 li
270.346 202.727 li
270.343 202.722 li
270.339 202.718 li
269.089 201.468 li
269 201.557 li
269.102 201.484 li
267.852 199.734 li
267.75 199.807 li
267.854 199.737 li
266.854 198.237 li
266.853 198.236 li
266.852 198.234 li
265.602 196.484 li
265.5 196.557 li
265.604 196.487 li
264.604 194.987 li
264.603 194.986 li
264.602 194.984 li
263.352 193.234 li
263.25 193.307 li
263.359 193.245 li
262.359 191.495 li
261.359 189.745 li
260.359 187.995 li
260.25 188.057 li
260.362 188.001 li
259.362 186.001 li
259.25 186.057 li
259.365 186.007 li
258.615 184.257 li
257.865 182.507 li
257.115 180.757 li
256.365 179.007 li
256.25 179.057 li
256.369 179.017 li
255.869 177.517 li
255.867 177.512 li
255.865 177.507 li
255.115 175.757 li
255 175.807 li
255.119 175.767 li
254.619 174.267 li
254.5 174.307 li
254.624 174.286 li
254.374 172.786 li
254.124 171.286 li
253.874 169.786 li
253.873 169.784 li
253.873 169.782 li
253.623 168.532 li
253.5 168.557 li
253.625 168.557 li
253.625 165.057 li
253.5 165.057 li
253.622 165.087 li
253.872 164.087 li
254.122 163.087 li
254 163.057 li
254.119 163.096 li
254.369 162.346 li
254.619 161.596 li
254.5 161.557 li
254.589 161.645 li
255.089 161.145 li
255.589 160.645 li
255.5 160.557 li
255.54 160.675 li
256.29 160.425 li
256.298 160.422 li
256.306 160.418 li
256.806 160.168 li
256.75 160.057 li
256.79 160.175 li
257.54 159.925 li
257.5 159.807 li
257.5 159.932 li
258.5 159.932 li
258.5 159.807 li
258.461 159.925 li
259.211 160.175 li
259.216 160.177 li
259.22 160.178 li
260.22 160.428 li
261.22 160.678 li
261.25 160.557 li
261.195 160.668 li
262.195 161.168 li
263.195 161.668 li
263.25 161.557 li
263.176 161.657 li
264.176 162.407 li
264.181 162.41 li
264.186 162.414 li
265.436 163.164 li
265.5 163.057 li
265.412 163.145 li
266.412 164.145 li
266.417 164.15 li
266.422 164.154 li
267.672 165.154 li
268.922 166.154 li
269 166.057 li
268.912 166.145 li
270.162 167.395 li
270.25 167.307 li
270.153 167.385 li
271.153 168.635 li
271.157 168.64 li
271.162 168.645 li
272.412 169.895 li
272.5 169.807 li
272.404 169.887 li
273.654 171.387 li
274.904 172.887 li
276.154 174.387 li
276.25 174.307 li
276.149 174.379 li
277.399 176.129 li
277.5 176.057 li
277.396 176.126 li
278.396 177.626 li
278.398 177.628 li
278.399 177.629 li
278.5 177.557 li
278.604 177.487 li
277.604 175.987 li
277.603 175.986 li
277.602 175.984 li
276.352 174.234 li
276.35 174.23 li
276.346 174.227 li
275.096 172.727 li
273.846 171.227 li
272.596 169.727 li
272.593 169.722 li
272.589 169.718 li
271.339 168.468 li
271.25 168.557 li
271.348 168.479 li
270.348 167.229 li
270.344 167.223 li
270.339 167.218 li
269.089 165.968 li
269.084 165.963 li
269.079 165.959 li
267.829 164.959 li
266.579 163.959 li
266.5 164.057 li
266.589 163.968 li
265.589 162.968 li
265.578 162.957 li
265.565 162.949 li
264.315 162.199 li
264.25 162.307 li
264.325 162.207 li
263.325 161.457 li
263.316 161.45 li
263.306 161.445 li
262.306 160.945 li
261.306 160.445 li
261.294 160.439 li
261.281 160.435 li
260.281 160.185 li
259.281 159.935 li
259.25 160.057 li
259.29 159.938 li
258.54 159.688 li
258.521 159.682 li
258.5 159.682 li
257.5 159.682 li
257.48 159.682 li
257.461 159.688 li
256.711 159.938 li
256.703 159.941 li
256.695 159.945 li
256.195 160.195 li
256.25 160.307 li
256.211 160.188 li
255.461 160.438 li
255.433 160.447 li
255.412 160.468 li
254.912 160.968 li
254.412 161.468 li
254.391 161.489 li
254.382 161.517 li
254.132 162.267 li
253.882 163.017 li
253.88 163.022 li
253.879 163.026 li
253.629 164.026 li
253.379 165.026 li
253.376 165.041 li
253.376 165.057 li
253.376 168.557 li
253.376 168.569 li
253.378 168.581 li
253.628 169.831 li
253.75 169.807 li
253.627 169.827 li
253.877 171.327 li
254.127 172.827 li
254.377 174.327 li
254.379 174.337 li
254.382 174.346 li
254.882 175.846 li
254.884 175.851 li
254.886 175.856 li
255.636 177.606 li
255.75 177.557 li
255.632 177.596 li
256.132 179.096 li
256.134 179.101 li
256.136 179.106 li
256.886 180.856 li
257.636 182.606 li
258.386 184.356 li
259.136 186.106 li
259.137 186.109 li
259.139 186.113 li
260.139 188.113 li
260.14 188.116 li
260.142 188.119 li
261.142 189.869 li
262.142 191.619 li
263.142 193.369 li
263.145 193.374 li
263.149 193.379 li
264.399 195.129 li
264.5 195.057 li
264.396 195.126 li
265.396 196.626 li
265.398 196.628 li
265.399 196.629 li
266.649 198.379 li
266.75 198.307 li
266.646 198.376 li
267.646 199.876 li
267.648 199.878 li
267.649 199.879 li
268.899 201.629 li
268.905 201.638 li
268.912 201.645 li
270.162 202.895 li
270.25 202.807 li
270.154 202.887 li
271.404 204.387 li
272.654 205.887 li
272.658 205.891 li
272.662 205.895 li
273.912 207.145 li
274.912 208.145 li
276.162 209.395 li
276.167 209.4 li
276.172 209.404 li
277.422 210.404 li
277.424 210.405 li
277.426 210.407 li
278.426 211.157 li
278.431 211.16 li
278.436 211.164 li
279.686 211.914 li
279.75 211.807 li
279.676 211.907 li
280.676 212.657 li
280.689 212.667 li
280.704 212.673 li
281.954 213.173 li
282 213.057 li
281.945 213.168 li
282.945 213.668 li
283 213.557 li
282.931 213.661 li
283.681 214.161 li
283.699 214.173 li
283.72 214.178 li
284.72 214.428 li
284.735 214.432 li
284.75 214.432 li
287.25 214.432 li
287.28 214.432 li
287.306 214.418 li
287.806 214.168 li
287.813 214.165 li
287.82 214.161 li
288.57 213.661 li
288.5 213.557 li
288.556 213.668 li
289.056 213.418 li
289.086 213.404 li
289.104 213.376 li
289.604 212.626 li
289.609 212.62 li
289.612 212.613 li
289.862 212.113 li
290.362 211.113 li
290.366 211.105 li
290.369 211.096 li
290.619 210.346 li
290.626 210.327 li
290.626 210.307 li
290.626 209.307 li
290.5 209.307 li
290.622 209.337 li
290.872 208.337 li
290.875 208.322 li
290.875 208.307 li
290.875 207.057 li
290.875 207.044 li
290.873 207.032 li
290.623 205.782 li
290.5 205.807 li
290.625 205.807 li
290.625 204.557 li
290.625 204.546 li
290.624 204.536 li
290.374 203.036 li
290.372 203.026 li
290.369 203.017 li
289.869 201.517 li
289.75 201.557 li
289.874 201.536 li
289.624 200.036 li
289.623 200.029 li
289.621 200.022 li
289.121 198.272 li
289.12 198.27 li
289.119 198.267 li
288.619 196.767 li
288.617 196.762 li
288.615 196.757 li
287.865 195.007 li
287.75 195.057 li
287.871 195.022 li
287.371 193.272 li
287.368 193.265 li
287.365 193.257 li
286.615 191.507 li
286.613 191.501 li
286.609 191.495 li
285.609 189.745 li
285.5 189.807 li
285.615 189.757 li
284.865 188.007 li
284.863 188.001 li
284.859 187.995 li
283.859 186.245 li
282.859 184.495 li
281.859 182.745 li
280.859 180.995 li
279.859 179.245 li
279.856 179.239 li
279.852 179.234 li
278.602 177.484 li
278.5 177.557 li
278.604 177.487 li
278.5 177.557 li
0.8 1 0.8 rgb
f
278.5 177.557 mo
278.399 177.629 li
279.649 179.379 li
279.75 179.307 li
279.642 179.369 li
280.642 181.119 li
281.642 182.869 li
282.642 184.619 li
283.642 186.369 li
284.642 188.119 li
284.75 188.057 li
284.636 188.106 li
285.386 189.856 li
285.388 189.862 li
285.392 189.869 li
286.392 191.619 li
286.5 191.557 li
286.386 191.606 li
287.136 193.356 li
287.25 193.307 li
287.13 193.341 li
287.63 195.091 li
287.632 195.099 li
287.636 195.106 li
288.386 196.856 li
288.5 196.807 li
288.382 196.846 li
288.882 198.346 li
289 198.307 li
288.88 198.341 li
289.38 200.091 li
289.5 200.057 li
289.377 200.077 li
289.627 201.577 li
289.629 201.587 li
289.632 201.596 li
290.132 203.096 li
290.25 203.057 li
290.127 203.077 li
290.377 204.577 li
290.5 204.557 li
290.376 204.557 li
290.376 205.807 li
290.376 205.819 li
290.378 205.831 li
290.628 207.081 li
290.75 207.057 li
290.626 207.057 li
290.626 208.307 li
290.75 208.307 li
290.629 208.276 li
290.379 209.276 li
290.376 209.291 li
290.376 209.307 li
290.376 210.307 li
290.5 210.307 li
290.382 210.267 li
290.132 211.017 li
290.25 211.057 li
290.139 211.001 li
289.639 212.001 li
289.389 212.501 li
289.5 212.557 li
289.396 212.487 li
288.896 213.237 li
289 213.307 li
288.945 213.195 li
288.445 213.445 li
288.438 213.448 li
288.431 213.453 li
287.681 213.953 li
287.75 214.057 li
287.695 213.945 li
287.195 214.195 li
287.25 214.307 li
287.25 214.182 li
284.75 214.182 li
284.75 214.307 li
284.781 214.185 li
283.781 213.935 li
283.75 214.057 li
283.82 213.953 li
283.07 213.453 li
283.063 213.448 li
283.056 213.445 li
282.056 212.945 li
282.052 212.943 li
282.047 212.941 li
280.797 212.441 li
280.75 212.557 li
280.825 212.457 li
279.825 211.707 li
279.82 211.703 li
279.815 211.699 li
278.565 210.949 li
278.5 211.057 li
278.575 210.957 li
277.575 210.207 li
277.5 210.307 li
277.579 210.209 li
276.329 209.209 li
276.25 209.307 li
276.339 209.218 li
275.089 207.968 li
274.089 206.968 li
272.839 205.718 li
272.75 205.807 li
272.846 205.727 li
271.596 204.227 li
270.346 202.727 li
270.343 202.722 li
270.339 202.718 li
269.089 201.468 li
269 201.557 li
269.102 201.484 li
267.852 199.734 li
267.75 199.807 li
267.854 199.737 li
266.854 198.237 li
266.853 198.236 li
266.852 198.234 li
265.602 196.484 li
265.5 196.557 li
265.604 196.487 li
264.604 194.987 li
264.603 194.986 li
264.602 194.984 li
263.352 193.234 li
263.25 193.307 li
263.359 193.245 li
262.359 191.495 li
261.359 189.745 li
260.359 187.995 li
260.25 188.057 li
260.362 188.001 li
259.362 186.001 li
259.25 186.057 li
259.365 186.007 li
258.615 184.257 li
257.865 182.507 li
257.115 180.757 li
256.365 179.007 li
256.25 179.057 li
256.369 179.017 li
255.869 177.517 li
255.867 177.512 li
255.865 177.507 li
255.115 175.757 li
255 175.807 li
255.119 175.767 li
254.619 174.267 li
254.5 174.307 li
254.624 174.286 li
254.374 172.786 li
254.124 171.286 li
253.874 169.786 li
253.873 169.784 li
253.873 169.782 li
253.623 168.532 li
253.5 168.557 li
253.625 168.557 li
253.625 165.057 li
253.5 165.057 li
253.622 165.087 li
253.872 164.087 li
254.122 163.087 li
254 163.057 li
254.119 163.096 li
254.369 162.346 li
254.619 161.596 li
254.5 161.557 li
254.589 161.645 li
255.089 161.145 li
255.589 160.645 li
255.5 160.557 li
255.54 160.675 li
256.29 160.425 li
256.298 160.422 li
256.306 160.418 li
256.806 160.168 li
256.75 160.057 li
256.79 160.175 li
257.54 159.925 li
257.5 159.807 li
257.5 159.932 li
258.5 159.932 li
258.5 159.807 li
258.461 159.925 li
259.211 160.175 li
259.216 160.177 li
259.22 160.178 li
260.22 160.428 li
261.22 160.678 li
261.25 160.557 li
261.195 160.668 li
262.195 161.168 li
263.195 161.668 li
263.25 161.557 li
263.176 161.657 li
264.176 162.407 li
264.181 162.41 li
264.186 162.414 li
265.436 163.164 li
265.5 163.057 li
265.412 163.145 li
266.412 164.145 li
266.417 164.15 li
266.422 164.154 li
267.672 165.154 li
268.922 166.154 li
269 166.057 li
268.912 166.145 li
270.162 167.395 li
270.25 167.307 li
270.153 167.385 li
271.153 168.635 li
271.157 168.64 li
271.162 168.645 li
272.412 169.895 li
272.5 169.807 li
272.404 169.887 li
273.654 171.387 li
274.904 172.887 li
276.154 174.387 li
276.25 174.307 li
276.149 174.379 li
277.399 176.129 li
277.5 176.057 li
277.396 176.126 li
278.396 177.626 li
278.398 177.628 li
278.399 177.629 li
278.5 177.557 li
278.604 177.487 li
277.604 175.987 li
277.603 175.986 li
277.602 175.984 li
276.352 174.234 li
276.35 174.23 li
276.346 174.227 li
275.096 172.727 li
273.846 171.227 li
272.596 169.727 li
272.593 169.722 li
272.589 169.718 li
271.339 168.468 li
271.25 168.557 li
271.348 168.479 li
270.348 167.229 li
270.344 167.223 li
270.339 167.218 li
269.089 165.968 li
269.084 165.963 li
269.079 165.959 li
267.829 164.959 li
266.579 163.959 li
266.5 164.057 li
266.589 163.968 li
265.589 162.968 li
265.578 162.957 li
265.565 162.949 li
264.315 162.199 li
264.25 162.307 li
264.325 162.207 li
263.325 161.457 li
263.316 161.45 li
263.306 161.445 li
262.306 160.945 li
261.306 160.445 li
261.294 160.439 li
261.281 160.435 li
260.281 160.185 li
259.281 159.935 li
259.25 160.057 li
259.29 159.938 li
258.54 159.688 li
258.521 159.682 li
258.5 159.682 li
257.5 159.682 li
257.48 159.682 li
257.461 159.688 li
256.711 159.938 li
256.703 159.941 li
256.695 159.945 li
256.195 160.195 li
256.25 160.307 li
256.211 160.188 li
255.461 160.438 li
255.433 160.447 li
255.412 160.468 li
254.912 160.968 li
254.412 161.468 li
254.391 161.489 li
254.382 161.517 li
254.132 162.267 li
253.882 163.017 li
253.88 163.022 li
253.879 163.026 li
253.629 164.026 li
253.379 165.026 li
253.376 165.041 li
253.376 165.057 li
253.376 168.557 li
253.376 168.569 li
253.378 168.581 li
253.628 169.831 li
253.75 169.807 li
253.627 169.827 li
253.877 171.327 li
254.127 172.827 li
254.377 174.327 li
254.379 174.337 li
254.382 174.346 li
254.882 175.846 li
254.884 175.851 li
254.886 175.856 li
255.636 177.606 li
255.75 177.557 li
255.632 177.596 li
256.132 179.096 li
256.134 179.101 li
256.136 179.106 li
256.886 180.856 li
257.636 182.606 li
258.386 184.356 li
259.136 186.106 li
259.137 186.109 li
259.139 186.113 li
260.139 188.113 li
260.14 188.116 li
260.142 188.119 li
261.142 189.869 li
262.142 191.619 li
263.142 193.369 li
263.145 193.374 li
263.149 193.379 li
264.399 195.129 li
264.5 195.057 li
264.396 195.126 li
265.396 196.626 li
265.398 196.628 li
265.399 196.629 li
266.649 198.379 li
266.75 198.307 li
266.646 198.376 li
267.646 199.876 li
267.648 199.878 li
267.649 199.879 li
268.899 201.629 li
268.905 201.638 li
268.912 201.645 li
270.162 202.895 li
270.25 202.807 li
270.154 202.887 li
271.404 204.387 li
272.654 205.887 li
272.658 205.891 li
272.662 205.895 li
273.912 207.145 li
274.912 208.145 li
276.162 209.395 li
276.167 209.4 li
276.172 209.404 li
277.422 210.404 li
277.424 210.405 li
277.426 210.407 li
278.426 211.157 li
278.431 211.16 li
278.436 211.164 li
279.686 211.914 li
279.75 211.807 li
279.676 211.907 li
280.676 212.657 li
280.689 212.667 li
280.704 212.673 li
281.954 213.173 li
282 213.057 li
281.945 213.168 li
282.945 213.668 li
283 213.557 li
282.931 213.661 li
283.681 214.161 li
283.699 214.173 li
283.72 214.178 li
284.72 214.428 li
284.735 214.432 li
284.75 214.432 li
287.25 214.432 li
287.28 214.432 li
287.306 214.418 li
287.806 214.168 li
287.813 214.165 li
287.82 214.161 li
288.57 213.661 li
288.5 213.557 li
288.556 213.668 li
289.056 213.418 li
289.086 213.404 li
289.104 213.376 li
289.604 212.626 li
289.609 212.62 li
289.612 212.613 li
289.862 212.113 li
290.362 211.113 li
290.366 211.105 li
290.369 211.096 li
290.619 210.346 li
290.626 210.327 li
290.626 210.307 li
290.626 209.307 li
290.5 209.307 li
290.622 209.337 li
290.872 208.337 li
290.875 208.322 li
290.875 208.307 li
290.875 207.057 li
290.875 207.044 li
290.873 207.032 li
290.623 205.782 li
290.5 205.807 li
290.625 205.807 li
290.625 204.557 li
290.625 204.546 li
290.624 204.536 li
290.374 203.036 li
290.372 203.026 li
290.369 203.017 li
289.869 201.517 li
289.75 201.557 li
289.874 201.536 li
289.624 200.036 li
289.623 200.029 li
289.621 200.022 li
289.121 198.272 li
289.12 198.27 li
289.119 198.267 li
288.619 196.767 li
288.617 196.762 li
288.615 196.757 li
287.865 195.007 li
287.75 195.057 li
287.871 195.022 li
287.371 193.272 li
287.368 193.265 li
287.365 193.257 li
286.615 191.507 li
286.613 191.501 li
286.609 191.495 li
285.609 189.745 li
285.5 189.807 li
285.615 189.757 li
284.865 188.007 li
284.863 188.001 li
284.859 187.995 li
283.859 186.245 li
282.859 184.495 li
281.859 182.745 li
280.859 180.995 li
279.859 179.245 li
279.856 179.239 li
279.852 179.234 li
278.602 177.484 li
278.5 177.557 li
278.604 177.487 li
278.5 177.557 li
0 0 0 rgb
f
269.75 192.307 mo
270.25 193.307 li
270.75 194.557 li
271.25 195.807 li
271.75 197.057 li
272 198.557 li
272.5 199.807 li
272.75 201.057 li
273 202.557 li
273.25 203.807 li
273.5 205.057 li
273.75 206.557 li
274 207.807 li
274 209.057 li
274.25 210.307 li
274.25 215.057 li
274 216.057 li
274 217.057 li
273.75 218.057 li
273.5 218.807 li
273.25 219.557 li
273 220.307 li
272.75 221.057 li
272.25 221.557 li
272 222.057 li
271.5 222.557 li
271.25 222.807 li
270.75 223.057 li
270.25 223.057 li
269.75 223.307 li
269.25 223.057 li
268.75 223.057 li
268.25 222.807 li
267.5 222.557 li
267 222.057 li
266.5 221.807 li
265.75 221.057 li
265.25 220.557 li
264.75 219.807 li
264 219.057 li
263.5 218.057 li
263 217.307 li
262.5 216.307 li
261.75 215.307 li
261.25 214.057 li
260.75 213.057 li
260.25 211.807 li
259.75 210.557 li
259.5 209.307 li
259 208.057 li
258.5 206.807 li
258.25 205.557 li
258 204.057 li
257.5 202.807 li
257.25 201.307 li
257 200.057 li
256.75 198.807 li
256.75 197.557 li
256.5 196.057 li
256.5 189.057 li
256.75 188.057 li
257 187.307 li
257 186.307 li
257.25 185.557 li
257.75 184.807 li
258 184.307 li
258.25 183.557 li
258.75 183.307 li
259 182.807 li
259.5 182.557 li
260 182.307 li
260.5 182.057 li
261.5 182.057 li
262 182.307 li
262.5 182.307 li
263 182.807 li
263.75 183.057 li
264.25 183.557 li
264.75 184.057 li
265.5 184.807 li
266 185.557 li
266.5 186.307 li
267 187.057 li
267.75 188.057 li
268.25 189.057 li
268.75 190.057 li
269.25 191.057 li
269.75 192.307 li
1 1 1 rgb
ef
487.626 419.307 mo
487.626 432.057 li
487.876 432.057 li
487.876 419.307 li
460.876 425.807 mo
460.876 432.057 li
461.126 432.057 li
461.126 425.807 li
434.376 425.807 mo
434.376 432.057 li
434.626 432.057 li
434.626 425.807 li
407.876 425.807 mo
407.876 432.057 li
408.126 432.057 li
408.126 425.807 li
381.126 419.307 mo
381.126 432.057 li
381.376 432.057 li
381.376 419.307 li
354.626 425.807 mo
354.626 432.057 li
354.876 432.057 li
354.876 425.807 li
328.126 425.807 mo
328.126 432.057 li
328.376 432.057 li
328.376 425.807 li
301.376 425.807 mo
301.376 432.057 li
301.626 432.057 li
301.626 425.807 li
274.876 419.307 mo
274.876 432.057 li
275.126 432.057 li
275.126 419.307 li
248.126 425.807 mo
248.126 432.057 li
248.376 432.057 li
248.376 425.807 li
221.626 425.807 mo
221.626 432.057 li
221.876 432.057 li
221.876 425.807 li
195.126 425.807 mo
195.126 432.057 li
195.376 432.057 li
195.376 425.807 li
168.376 419.307 mo
168.376 432.057 li
168.626 432.057 li
168.626 419.307 li
141.876 425.807 mo
141.876 432.057 li
142.126 432.057 li
142.126 425.807 li
115.376 425.807 mo
115.376 432.057 li
115.626 432.057 li
115.626 425.807 li
88.625 425.807 mo
88.625 432.057 li
88.875 432.057 li
88.875 425.807 li
62.125 419.307 mo
62.125 432.057 li
62.375 432.057 li
62.375 419.307 li
269.75 192.307 mo
269.639 192.363 li
270.139 193.363 li
270.25 193.307 li
270.134 193.353 li
270.634 194.603 li
271.134 195.853 li
271.634 197.103 li
271.75 197.057 li
271.627 197.077 li
271.877 198.577 li
271.879 198.59 li
271.884 198.603 li
272.384 199.853 li
272.5 199.807 li
272.378 199.831 li
272.628 201.081 li
272.75 201.057 li
272.627 201.077 li
272.877 202.577 li
272.878 202.579 li
272.878 202.581 li
273.128 203.831 li
273.378 205.081 li
273.5 205.057 li
273.377 205.077 li
273.627 206.577 li
273.628 206.579 li
273.628 206.581 li
273.878 207.831 li
274 207.807 li
273.876 207.807 li
273.876 209.057 li
273.876 209.069 li
273.878 209.081 li
274.128 210.331 li
274.25 210.307 li
274.126 210.307 li
274.126 215.057 li
274.25 215.057 li
274.129 215.026 li
273.879 216.026 li
273.876 216.041 li
273.876 216.057 li
273.876 217.057 li
274 217.057 li
273.879 217.026 li
273.629 218.026 li
273.75 218.057 li
273.632 218.017 li
273.382 218.767 li
273.132 219.517 li
272.882 220.267 li
272.632 221.017 li
272.75 221.057 li
272.662 220.968 li
272.162 221.468 li
272.148 221.483 li
272.139 221.501 li
271.889 222.001 li
272 222.057 li
271.912 221.968 li
271.412 222.468 li
271.162 222.718 li
271.25 222.807 li
271.195 222.695 li
270.695 222.945 li
270.75 223.057 li
270.75 222.932 li
270.25 222.932 li
270.221 222.932 li
270.195 222.945 li
269.695 223.195 li
269.75 223.307 li
269.806 223.195 li
269.306 222.945 li
269.28 222.932 li
269.25 222.932 li
268.75 222.932 li
268.75 223.057 li
268.806 222.945 li
268.306 222.695 li
268.298 222.691 li
268.29 222.688 li
267.54 222.438 li
267.5 222.557 li
267.589 222.468 li
267.089 221.968 li
267.074 221.954 li
267.056 221.945 li
266.556 221.695 li
266.5 221.807 li
266.589 221.718 li
265.839 220.968 li
265.339 220.468 li
265.25 220.557 li
265.354 220.487 li
264.854 219.737 li
264.848 219.727 li
264.839 219.718 li
264.089 218.968 li
264 219.057 li
264.112 219.001 li
263.612 218.001 li
263.609 217.994 li
263.604 217.987 li
263.104 217.237 li
263 217.307 li
263.112 217.251 li
262.612 216.251 li
262.607 216.241 li
262.6 216.232 li
261.85 215.232 li
261.75 215.307 li
261.867 215.26 li
261.367 214.01 li
261.365 214.005 li
261.362 214.001 li
260.862 213.001 li
260.75 213.057 li
260.867 213.01 li
260.367 211.76 li
259.867 210.51 li
259.75 210.557 li
259.873 210.532 li
259.623 209.282 li
259.621 209.271 li
259.617 209.26 li
259.117 208.01 li
258.617 206.76 li
258.5 206.807 li
258.623 206.782 li
258.373 205.532 li
258.25 205.557 li
258.374 205.536 li
258.124 204.036 li
258.122 204.023 li
258.117 204.01 li
257.617 202.76 li
257.5 202.807 li
257.624 202.786 li
257.374 201.286 li
257.373 201.284 li
257.373 201.282 li
257.123 200.032 li
256.873 198.782 li
256.75 198.807 li
256.875 198.807 li
256.875 197.557 li
256.875 197.546 li
256.874 197.536 li
256.624 196.036 li
256.5 196.057 li
256.625 196.057 li
256.625 189.057 li
256.5 189.057 li
256.622 189.087 li
256.872 188.087 li
256.75 188.057 li
256.869 188.096 li
257.119 187.346 li
257.126 187.327 li
257.126 187.307 li
257.126 186.307 li
257 186.307 li
257.119 186.346 li
257.369 185.596 li
257.25 185.557 li
257.354 185.626 li
257.854 184.876 li
257.859 184.87 li
257.862 184.863 li
258.112 184.363 li
258.116 184.355 li
258.119 184.346 li
258.369 183.596 li
258.25 183.557 li
258.306 183.668 li
258.806 183.418 li
258.844 183.4 li
258.862 183.363 li
259.112 182.863 li
259 182.807 li
259.056 182.918 li
259.556 182.668 li
260.056 182.418 li
260.556 182.168 li
260.5 182.057 li
260.5 182.182 li
261.5 182.182 li
261.5 182.057 li
261.445 182.168 li
261.945 182.418 li
261.971 182.432 li
262 182.432 li
262.5 182.432 li
262.5 182.307 li
262.412 182.395 li
262.912 182.895 li
262.933 182.916 li
262.961 182.925 li
263.711 183.175 li
263.75 183.057 li
263.662 183.145 li
264.162 183.645 li
264.662 184.145 li
265.412 184.895 li
265.5 184.807 li
265.396 184.876 li
265.896 185.626 li
266.396 186.376 li
266.896 187.126 li
266.898 187.129 li
266.9 187.132 li
267.65 188.132 li
267.75 188.057 li
267.639 188.113 li
268.139 189.113 li
268.639 190.113 li
269.139 191.113 li
269.25 191.057 li
269.134 191.103 li
269.634 192.353 li
269.636 192.358 li
269.639 192.363 li
269.75 192.307 li
269.867 192.26 li
269.367 191.01 li
269.365 191.005 li
269.362 191.001 li
268.862 190.001 li
268.362 189.001 li
267.862 188.001 li
267.857 187.991 li
267.85 187.982 li
267.1 186.982 li
267 187.057 li
267.104 186.987 li
266.604 186.237 li
266.104 185.487 li
265.604 184.737 li
265.598 184.727 li
265.589 184.718 li
264.839 183.968 li
264.339 183.468 li
263.839 182.968 li
263.818 182.947 li
263.79 182.938 li
263.04 182.688 li
263 182.807 li
263.089 182.718 li
262.589 182.218 li
262.552 182.182 li
262.5 182.182 li
262 182.182 li
262 182.307 li
262.056 182.195 li
261.556 181.945 li
261.53 181.932 li
261.5 181.932 li
260.5 181.932 li
260.471 181.932 li
260.445 181.945 li
259.945 182.195 li
259.445 182.445 li
258.945 182.695 li
258.907 182.713 li
258.889 182.751 li
258.639 183.251 li
258.75 183.307 li
258.695 183.195 li
258.195 183.445 li
258.148 183.468 li
258.132 183.517 li
257.882 184.267 li
258 184.307 li
257.889 184.251 li
257.639 184.751 li
257.75 184.807 li
257.646 184.737 li
257.146 185.487 li
257.137 185.501 li
257.132 185.517 li
256.882 186.267 li
256.876 186.286 li
256.876 186.307 li
256.876 187.307 li
257 187.307 li
256.882 187.267 li
256.632 188.017 li
256.63 188.022 li
256.629 188.026 li
256.379 189.026 li
256.376 189.041 li
256.376 189.057 li
256.376 196.057 li
256.376 196.067 li
256.377 196.077 li
256.627 197.577 li
256.75 197.557 li
256.626 197.557 li
256.626 198.807 li
256.626 198.819 li
256.628 198.831 li
256.878 200.081 li
257.128 201.331 li
257.25 201.307 li
257.127 201.327 li
257.377 202.827 li
257.379 202.84 li
257.384 202.853 li
257.884 204.103 li
258 204.057 li
257.877 204.077 li
258.127 205.577 li
258.128 205.579 li
258.128 205.581 li
258.378 206.831 li
258.38 206.842 li
258.384 206.853 li
258.884 208.103 li
259.384 209.353 li
259.5 209.307 li
259.378 209.331 li
259.628 210.581 li
259.63 210.592 li
259.634 210.603 li
260.134 211.853 li
260.634 213.103 li
260.636 213.108 li
260.639 213.113 li
261.139 214.113 li
261.25 214.057 li
261.134 214.103 li
261.634 215.353 li
261.641 215.368 li
261.65 215.382 li
262.4 216.382 li
262.5 216.307 li
262.389 216.363 li
262.889 217.363 li
262.892 217.369 li
262.896 217.376 li
263.396 218.126 li
263.5 218.057 li
263.389 218.113 li
263.889 219.113 li
263.898 219.131 li
263.912 219.145 li
264.662 219.895 li
264.75 219.807 li
264.646 219.876 li
265.146 220.626 li
265.153 220.636 li
265.162 220.645 li
265.662 221.145 li
266.412 221.895 li
266.426 221.909 li
266.445 221.918 li
266.945 222.168 li
267 222.057 li
266.912 222.145 li
267.412 222.645 li
267.433 222.666 li
267.461 222.675 li
268.211 222.925 li
268.25 222.807 li
268.195 222.918 li
268.695 223.168 li
268.721 223.182 li
268.75 223.182 li
269.25 223.182 li
269.25 223.057 li
269.195 223.168 li
269.695 223.418 li
269.75 223.446 li
269.806 223.418 li
270.306 223.168 li
270.25 223.057 li
270.25 223.182 li
270.75 223.182 li
270.78 223.182 li
270.806 223.168 li
271.306 222.918 li
271.325 222.909 li
271.339 222.895 li
271.589 222.645 li
272.089 222.145 li
272.103 222.131 li
272.112 222.113 li
272.362 221.613 li
272.25 221.557 li
272.339 221.645 li
272.839 221.145 li
272.86 221.124 li
272.869 221.096 li
273.119 220.346 li
273.369 219.596 li
273.619 218.846 li
273.869 218.096 li
273.871 218.092 li
273.872 218.087 li
274.122 217.087 li
274.126 217.072 li
274.126 217.057 li
274.126 216.057 li
274 216.057 li
274.122 216.087 li
274.372 215.087 li
274.375 215.072 li
274.375 215.057 li
274.375 210.307 li
274.375 210.294 li
274.373 210.282 li
274.123 209.032 li
274 209.057 li
274.125 209.057 li
274.125 207.807 li
274.125 207.794 li
274.123 207.782 li
273.873 206.532 li
273.75 206.557 li
273.874 206.536 li
273.624 205.036 li
273.623 205.034 li
273.623 205.032 li
273.373 203.782 li
273.123 202.532 li
273 202.557 li
273.124 202.536 li
272.874 201.036 li
272.873 201.034 li
272.873 201.032 li
272.623 199.782 li
272.621 199.771 li
272.617 199.76 li
272.117 198.51 li
272 198.557 li
272.124 198.536 li
271.874 197.036 li
271.872 197.023 li
271.867 197.01 li
271.367 195.76 li
270.867 194.51 li
270.367 193.26 li
270.365 193.255 li
270.362 193.251 li
269.862 192.251 li
269.75 192.307 li
269.867 192.26 li
269.75 192.307 li
0 0 0 rgb
f
75 6.68116 mo
62.25 6.68116 li
62.25 6.93116 li
75 6.93116 li
68.75 27.9312 mo
62.25 27.9312 li
62.25 28.1812 li
68.75 28.1812 li
68.75 49.1812 mo
62.25 49.1812 li
62.25 49.4312 li
68.75 49.4312 li
68.75 70.4312 mo
62.25 70.4312 li
62.25 70.6812 li
68.75 70.6812 li
75 91.6812 mo
62.25 91.6812 li
62.25 91.9312 li
75 91.9312 li
68.75 112.932 mo
62.25 112.932 li
62.25 113.182 li
68.75 113.182 li
68.75 134.182 mo
62.25 134.182 li
62.25 134.432 li
68.75 134.432 li
68.75 155.432 mo
62.25 155.432 li
62.25 155.682 li
68.75 155.682 li
75 176.682 mo
62.25 176.682 li
62.25 176.932 li
75 176.932 li
68.75 198.182 mo
62.25 198.182 li
62.25 198.432 li
68.75 198.432 li
68.75 219.432 mo
62.25 219.432 li
62.25 219.682 li
68.75 219.682 li
68.75 240.682 mo
62.25 240.682 li
62.25 240.932 li
68.75 240.932 li
75 261.932 mo
62.25 261.932 li
62.25 262.182 li
75 262.182 li
68.75 283.182 mo
62.25 283.182 li
62.25 283.432 li
68.75 283.432 li
68.75 304.432 mo
62.25 304.432 li
62.25 304.682 li
68.75 304.682 li
68.75 325.682 mo
62.25 325.682 li
62.25 325.932 li
68.75 325.932 li
75 346.932 mo
62.25 346.932 li
62.25 347.182 li
75 347.182 li
68.75 368.182 mo
62.25 368.182 li
62.25 368.432 li
68.75 368.432 li
68.75 389.432 mo
62.25 389.432 li
62.25 389.682 li
68.75 389.682 li
68.75 410.682 mo
62.25 410.682 li
62.25 410.932 li
68.75 410.932 li
75 431.932 mo
62.25 431.932 li
62.25 432.182 li
75 432.182 li
487.876 19.5562 mo
487.876 6.80616 li
487.626 6.80616 li
487.626 19.5562 li
461.126 13.0562 mo
461.126 6.80616 li
460.876 6.80616 li
460.876 13.0562 li
434.626 13.0562 mo
434.626 6.80616 li
434.376 6.80616 li
434.376 13.0562 li
408.126 13.0562 mo
408.126 6.80616 li
407.876 6.80616 li
407.876 13.0562 li
381.376 19.5562 mo
381.376 6.80616 li
381.126 6.80616 li
381.126 19.5562 li
354.876 13.0562 mo
354.876 6.80616 li
354.626 6.80616 li
354.626 13.0562 li
328.376 13.0562 mo
328.376 6.80616 li
328.126 6.80616 li
328.126 13.0562 li
301.626 13.0562 mo
301.626 6.80616 li
301.376 6.80616 li
301.376 13.0562 li
275.126 19.5562 mo
275.126 6.80616 li
274.876 6.80616 li
274.876 19.5562 li
248.376 13.0562 mo
248.376 6.80616 li
248.126 6.80616 li
248.126 13.0562 li
221.876 13.0562 mo
221.876 6.80616 li
221.626 6.80616 li
221.626 13.0562 li
195.376 13.0562 mo
195.376 6.80616 li
195.126 6.80616 li
195.126 13.0562 li
168.626 19.5562 mo
168.626 6.80616 li
168.376 6.80616 li
168.376 19.5562 li
142.126 13.0562 mo
142.126 6.80616 li
141.876 6.80616 li
141.876 13.0562 li
115.626 13.0562 mo
115.626 6.80616 li
115.376 6.80616 li
115.376 13.0562 li
88.875 13.0562 mo
88.875 6.80616 li
88.625 6.80616 li
88.625 13.0562 li
62.375 19.5562 mo
62.375 6.80616 li
62.125 6.80616 li
62.125 19.5562 li
f
62.25 432.057 mo
62.375 432.057 li
62.375 6.80616 li
62.25 6.80616 li
62.25 6.93116 li
487.75 6.93116 li
487.75 6.80616 li
487.626 6.80616 li
487.626 432.057 li
487.75 432.057 li
487.75 431.932 li
62.25 431.932 li
62.25 432.057 li
62.375 432.057 li
62.25 432.057 li
62.25 432.182 li
487.75 432.182 li
487.875 432.182 li
487.875 432.057 li
487.875 6.80616 li
487.875 6.68116 li
487.75 6.68116 li
62.25 6.68116 li
62.125 6.68116 li
62.125 6.80616 li
62.125 432.057 li
62.125 432.182 li
62.25 432.182 li
62.25 432.057 li
475 6.93116 mo
487.75 6.93116 li
487.75 6.68116 li
475 6.68116 li
481.25 28.1812 mo
487.75 28.1812 li
487.75 27.9312 li
481.25 27.9312 li
481.25 49.4312 mo
487.75 49.4312 li
487.75 49.1812 li
481.25 49.1812 li
481.25 70.6812 mo
487.75 70.6812 li
487.75 70.4312 li
481.25 70.4312 li
475 91.9312 mo
487.75 91.9312 li
487.75 91.6812 li
475 91.6812 li
481.25 113.182 mo
487.75 113.182 li
487.75 112.932 li
481.25 112.932 li
481.25 134.432 mo
487.75 134.432 li
487.75 134.182 li
481.25 134.182 li
481.25 155.682 mo
487.75 155.682 li
487.75 155.432 li
481.25 155.432 li
475 176.932 mo
487.75 176.932 li
487.75 176.682 li
475 176.682 li
481.25 198.432 mo
487.75 198.432 li
487.75 198.182 li
481.25 198.182 li
481.25 219.682 mo
487.75 219.682 li
487.75 219.432 li
481.25 219.432 li
481.25 240.932 mo
487.75 240.932 li
487.75 240.682 li
481.25 240.682 li
475 262.182 mo
487.75 262.182 li
487.75 261.932 li
475 261.932 li
481.25 283.432 mo
487.75 283.432 li
487.75 283.182 li
481.25 283.182 li
481.25 304.682 mo
487.75 304.682 li
487.75 304.432 li
481.25 304.432 li
481.25 325.932 mo
487.75 325.932 li
487.75 325.682 li
481.25 325.682 li
475 347.182 mo
487.75 347.182 li
487.75 346.932 li
475 346.932 li
481.25 368.432 mo
487.75 368.432 li
487.75 368.182 li
481.25 368.182 li
481.25 389.682 mo
487.75 389.682 li
487.75 389.432 li
481.25 389.432 li
481.25 410.932 mo
487.75 410.932 li
487.75 410.682 li
481.25 410.682 li
475 432.182 mo
487.75 432.182 li
487.75 431.932 li
475 431.932 li
f
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 57 /nine put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-
/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17
CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D289562798
79C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB
330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F
5B0E3B0C4781A3901> |-
/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22B
DC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A43
57093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1
A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290
FB46DD6A2918F4C2C2BDEECA159D78> |-
/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725
328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE71
6864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23
745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD
739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405
CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A3143
62D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-
/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB181
58BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-
/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF23
96DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F0
8B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF
9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BF
F7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9
EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7A
B1C1C6CA> |-
/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA
310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E6389
3114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446
DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B
078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C
7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1
255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31
755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-
/nine <1C60D8A8C9B7EF326B464DF43714564059769E71FFFC685FC18F48C77
D53AC88FCBBC12F494C4F63EED0BC4E888DFF584BE7D2D816586B9A4264CD850
BFF6D2740D48815051A0D66B2C6D52B7F71CA6A6822ACB78F611F031D0F31B29
F8F7C82DE8795DAD0A78F20A0C158D57307DA2BB022E8173A55705FD29D68A57
A980A4A8A50AA38F194766F67D892E4FFF95162BD634B3243B2EC97981B62535
F84C02C407EE586AAFD00BF4926CA361322725073A4D1FB7F2047C32550A5DE1
5> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/MJIFEK+Helvetica /Helvetica findfont def
/MJIFEK+Helvetica*1 
[
46{/.notdef}repeat /period /.notdef /zero /.notdef /two /three /four 
/.notdef /six /.notdef /eight /nine 198{/.notdef}repeat
] MJIFEK+Helvetica nfnt
MJIFEK+Helvetica*1  [13.75 0 -0 -13.75 0 0 ]mfnt sfnt
45.0474 453.306 mov
(0.88) sh
71.8086 453.306 mov
(8) sh
151.297 453.306 mov
-0.000244141 0 57 (0.892) wsh
257.797 453.306 mov
-0.0012207 0 46 0.000366211 0 (0.896) awsh
371.692 453.306 mov
-0.000244141 0 46 0.000366211 0 (0.9) awsh
470.547 453.306 mov
-0.0012207 0 46 0.000366211 0 (0.904) awsh
35.7085 437.056 mov
(38) sh
35.7085 352.056 mov
(40) sh
35.7085 267.056 mov
(42) sh
35.7085 181.806 mov
(44) sh
35.7085 96.8062 mov
(46) sh
35.7085 11.8062 mov
(48) sh
0 0 0 rgb
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /Symbol def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /phi put
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/phi <1C60D8A8C9B7B202FA70E5D913E85DBEA26431CA15D23170272CFFE17D
051ED827955A3FB44F8C33E06AB56DEE6FD4527737281A8670E09920133655E0
78B066AEB50ED856BC5346837C9EA878F79B919656003C43B8A11643B4C5A94D
8DF4C7D6E45B471EEE9FD8C89BFDF2173E61CE358396D48F5C326536DCCF> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/JJIFEK+Symbol /Symbol findfont def
/JJIFEK+Symbol*1 
[
102{/.notdef}repeat /phi 153{/.notdef}repeat
] JJIFEK+Symbol nfnt
JJIFEK+Symbol*1  [0 -24 -24 -0 0 0 ]mfnt sfnt
21.1201 256.465 mov
(f) sh
%ADOBeginSubsetFont: Myriad-Roman Initial
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /Myriad-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 114 /r put
dup 115 /s put
def
/UniqueID 41987 def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/FamilyBlues [-11 0 674 685 484 496 650 661 710 721] def
/FamilyOtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/space <1C60D8A8C9B896187A> |-
/parenleft <1C60D8A8C9B84E0A775A339A6920AB0DE430B7DCF862E785DB9E
7AE6B14847A83A280DDCE1A6BA16686796D8801002CE462B6E901D06A69A29BF
2A4A53> |-
/parenright <1C60D8A8C9B84E0A4B31431D5481E823C52558C705892FE29F3
6A28E2E378B339A3E83F4F55337115DAEFD302EA0B7F069AF6D476C66B7F850D
B18A29D> |-
/plus <1C60D8A8C9B7C7F3ABA7E73C9CBC125023CE3DD603B119E06943787BD
52ABA637658F408B68ABF9D552EB91CE4B8D0075AFC4EC21BD839F1> |-
/d <1C60D8A8C9B7E7C1E9415B382C0EF9C60E6021BB1E95C03A2DD89F360B56
63D6551C4C39C5506F0B5916330D8761AFD7B1B7AFD2B01F3C1D7C981BD3EEF9
982FF295D03CBFC77917EEBB4B17167D69AC6077ECAAE3BA44137709C4EEBB4C
2CD3A2B93DCED388AD49D33DBB886AABFB9E38F70AFD27773BBB85AE81FFFF3F
F60B6F91C615C0CD7E0629A20701802295AB92AB907BAA81A72F666D01972B6C
079C75CFEFD41DFFB9EA> |-
/e <1C60D8A8C9B7A66FB4E9209DE48656974FCFF6918874F1136043F0EE8172
F4D638772B3B7F4B5346ABF7A80D482099561C97EACC6F77A33F735C7F526F3A
D9C6597D65CC687E05FF3F3D831F11A36D65E3B2668B0C94721274A694DE1BF9
4BC567A2314B6F8010DDBF586B4DD5CDAA4D122F00> |-
/g <1C60D8A8C9B7ECD907F624365D438F0401F823B73EA66C47C7E6F281CDBD
29E1DF24F38B45400CB92D1773CBC7D50FCB7995F10368A24D5E58E4D952E59F
C7474F76DA6B34C3DA78B95EC1EF9CF6F4F63352FB906DDA03E2A5E4C969C169
E59D202129BB858FF2389396F4B948C04E75496FBEB13EFD11C93AA00D90D167
33338CEB82FA27143EC77B2C20532B0E3472C981FFF7D331E2727D5298A3DEB5
54E7B9520D81862C9F7096CAAEF2A0777B1B46BAC159DF161C1CC74E3EBE289F
453E0E8DD297E3F240E1B2> |-
/r <1C60D8A8C9B825FA5220A9740606B50B33E010C4BCC4C01AD0977A1A669B
FA1A38816F7F3AFEDC1C339BC9FE77C7DB80E163C95852F64B999476B735BD17
BE5250D15A9BA973A020C54D1BE5E2686C3A86A44295463DE15129469ED396D6
199BF1BFF0CA9745121C3A314D02EB3FCC22E2B5> |-
/s <1C60D8A8C9B70FAD2F81CC8BBF4E6A0E18D42D6949A9CEA98F96BB91C9CE
EEE4953B2FD83F05669F83DD630625A425EBBE7CE79373EE324743431698E23D
247D1ABC2EF04C298E5A1B13987DC1A4A8FE49BE4106E5A1C884B4074CFD17B6
1C7D93D85F5BD451BA630B50AF> |-
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/IJIFEK+Myriad-Roman /Myriad-Roman findfont def
/IJIFEK+Myriad-Roman*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright /.notdef /plus 56{/.notdef}repeat 
/d /e /.notdef /g 10{/.notdef}repeat /r /s 140{/.notdef}repeat
] IJIFEK+Myriad-Roman nfnt
IJIFEK+Myriad-Roman*1  [0 -13.992 -13.992 -0 0 0 ]mfnt sfnt
26.1123 243.961 mov
0 0.000564575 32 0 -0.000213623 (+  ) awsh
IJIFEK+Myriad-Roman*1  [0 -24 -24 -0 0 0 ]mfnt sfnt
21.1201 229.689 mov
0 0.000244141 103 ( \(degr) wsh
21.1201 171.103 mov
(ee) sh
21.1201 147.056 mov
(s\)) sh
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Times-Roman def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
def
/FontBBox {-203 -428 1700 1271} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
11 dict dup begin
/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963
E3987D5E4E6C9FCD> |-
/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBAD
FFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23
F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EF
D64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752
C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DE
DC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C0
4061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE3
8746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B679
71885F8F1CB6195A6A7B0FFC> |-
/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E52
80D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B0
5CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9
C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9
F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B92
7D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-
/c <1C60D8A8C9B77FE2CE939B120B8C530BA36A1D378ED7528AD7B7A10AC71B
EF208D8B385B11077F2A13A81C13DFBF440D42A243A800735CB8F4DC3746EB40
39E43E77D867A7AA457E639AE6CCAFB17D4572C0E8FCF8662A95CB9A94DBFA33
9E8C89716E4D6EB7EE669FEA0FD73F1B364D57426E512088C7E414CE09DC0040
B747838B6828750C7FA69A58B3FBD05411AA3233E35DCBE1E5C8A3302EE901E3
00C17D> |-
/d <1C60D8A8C9B7A73DB9A50E659DB775F0445838B52D4AD3E4EA55A04AF1E6
6EB3E22000826F80E46C696D55B3FE9B16954A0FDDDCF9A25B9DBBDA281BC374
3A32DF4E962666420F0E46505362A6A9911C122E7E5925E4098A8375B6420427
5CB8C487667CDFFB7001810B24CEFAA2B80CAD8B87A3E1168C62B165D1D52436
E632F3BD5E44BCAD1D3E08911E568C3ADE5A148D88E7C75A5F95F7018097A855
F01058BEA6CAD1F5CFBA99049D028F229C0A374E791F4E6F00190E23FDB14CB2
BF5215AC36154229670311F93C06828FE397A9700C53BE1A07DF9AE66151E66A
3E4BE4B17FDA8F9875D90067B1D7D9914E47FA1ED2D057561417FDB2931E47F3
C120E5878FF702> |-
/e <1C60D8A8C9B77FE2CE67108D1280ADC9682165E381A1DB7E740A05B18E65
167A034DB250F6D5492B270110B05E60263A42B2C42DDF9AB2E4A276D8ABFFBD
6680C39C89C62CEAE031CFF89EF16FD9FC76CF19CB9F9E34BA9AA837F4D55163
017EBBAC9FCE57F666560D76840A1E9FB941AF2DF15742DAEB79EA2886404B23
75DA19EFBEAC2017EDAD03B37508> |-
/f <1C60D8A8C9B81F2C5200FF77F5CC74A969F74B97E3CB0139862AF77A9D0A
CBF3A9D6D9D7DFD3746D263F91E033F5CA0320628020691D4C3124BFE6A21E6C
83BCBE09CD5D12CC21985F4F5AFA1A376E8DE99902DF7BF2E77B55D090DC8BBC
539FB00E70FEE139F0FC4E0E2A68FC9AB61AE1A0D629C6435B8A2E09E0E0D78B
08DE40CDACCDB12252A395979017F0F46F00D30915E02E70A215B3DDCC> |-
/g <1C60D8A8C9B7A73DA347F0DC0A4CC25AD3382B8351D419D81B2F540C0F66
5DA2122211CB75D621F53ADCDBE7815157FCF3A7D9C98329945893598F8138F5
D5F74388A15B63DC4DDBDB1A01CEDC68DBC335D575F070C3086679BC845D2E73
8427D0F7B681E970CAECC1ECA0192676764BEA6F787CBC115862B9B44CFD83A9
6CAFA21CE91235F59FAB64DFE50A98E215046D4BF1AB210098434AE88D505933
B6B31BEC443E9C48567AB352DDD15143CE343B08927EA9C965F9F904D0C1E9AE
4FECE14141B4365C351A577CA516601FBE0AFA3AD74B770DF0E6D6A50EC77FBA
93516C03FCA671EDEBF2CCDCA919590D5C9DEA3D43029A729D3EC913B24C08E5
BEFE573AAB22339502EECDF5C8F0B813EECA1A3643E46181D1A26BD0E961251C
6FA14F9824242DA4E6EBAD7E5F2872BFD0F6F6BE709AF20CDE3BC39F29118C3A
BE69D00325A184273C17639A8F614CF5086AF810778C30368743992A90E37B88
A00B0EFB39F462A8B7048C5ABBCF6C197AE88D4F99C80A2B8E1DBB> |-
/h <1C60D8A8C9B7A73DDAD434B9B0934880641DF5380C3FF34924474584582E
239C6F8521E020E224191300F7D305E7CE3E9B26FD63D19146E9A792CE58AAA1
D1E0988290FCF859899DD695C8334DEB5EEA9B27FF4F22DA997D31BE2F34FA45
8B76E64B6795EF577D8D66464865BCBF56924A7B28803783086BA628F44B2C71
B5D443B3791F12685C141C83F9E10FE5E0058D368A19DE504B892831FC37A9C1
39A777D98619540D7044EEF1D80D5AA72984210B0E3A3AA2A9488D2A3C7F6CEB
9756D12E8F0AC9CA1CD21E> |-
/i <1C60D8A8C9B854D0DE8FF03001C7DDCDF6D3A68A6B597D794E646C678EE5
84A1666CB56CA9FE75811CEA2087E2C341C7E1E2BD6147E5E1B64DFF133BC2DE
FF475DA598F822B2BE3A9DBFD7105A3889BD250D9F71DE0C91B5EA539C526B64
89E8D9E79757A61E2352A71C3AC0EEEBBBD4B096AC9707E6604D45F8B4EB690B
CE5B5F037666EE3D29DC12074786C8164E88903799783957677A476A9FAD9CB2
91219231A21175873BB2> |-
/j <1C60D8A8C9B854D0F4318DDDE14D8864CEE5F1B93F7E5E0DD899A62B6E7D
037EA34803024A344526BC98303A7A7B3923E2C877CEC46D1EF2BE3AEF7DDB0F
B664295F5CB9B1BAD65C39285A328A1CD1D26B4BE92BAFE3188695C19F95D076
17AFFCB1397DBD5802C97EE7FB79C026E1BDD74A5F83B65785D331FCCE6C7453
8D08BC4C608233D45F618D6866CE4E0EC28093EB918FE94682B26A8440EEB5D5
D4C6F9574795C47EB7026AC188154C4F5F264E27E9C7D82AD9B338C0D393483C
38880CE0D1947B96533CEBB4A1C9C8B4D279956BD2CCA747883C18> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/HJIFEK+Times-Roman /Times-Roman findfont def
/HJIFEK+Times-Roman*1 
[
97{/.notdef}repeat /a /b /c /d /e /f /g 
/h /i /j 149{/.notdef}repeat
] HJIFEK+Times-Roman nfnt
HJIFEK+Times-Roman*1  [18 0 -0 -18 0 0 ]mfnt sfnt
261.12 205.344 mov
(a) sh
262.62 180.844 mov
(b) sh
259.12 71.8442 mov
(h) sh
298.12 43.8442 mov
(i) sh
408.62 90.8442 mov
(g) sh
451.12 181.344 mov
(f) sh
452.62 235.844 mov
(c) sh
448.12 315.844 mov
(d) sh
394.12 396.344 mov
(e) sh
395.12 215.844 mov
(j) sh
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.21)
systemdict begin
JJIFEK+Symbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/tau <1C60D8A8C9B76427D0C3408C9782179B56EA2441FF06F27A68B451F7F4
7C7F0A819FCCAD2AC6AF20C05D03A0D30FBACD60459B2C493F3D24A815033661
373A8E97F7A8C3AC532B5A19C54574A165DE7CEA6E8253770C3C6C02EE400D1A
FD239D1ED5606D6639B83E6EC35E4BA9B4A1D1A838287D9F8522BCCA3BC58155
7F3BD76240E5863AC20514A2D8B8CA89EB3724AEA0DDD2D89A166E5D5B29CC41
6A0A5FCC8CCD0B6B7A65685E5CAD241CE09646BFCC17816156DB77FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
JJIFEK+Symbol /Encoding get
dup 116 /tau put
pop
%ADOEndSubsetFont
/JJIFEK+Symbol*2 
[
116{/.notdef}repeat /tau 139{/.notdef}repeat
] JJIFEK+Symbol nfnt
JJIFEK+Symbol*2  [24 0 -0 -24 0 0 ]mfnt sfnt
209.12 476.844 mov
(t) sh
%ADOBeginSubsetFont: Myriad-Roman AddGlyphs
%ADOt1write: (1.0.21)
systemdict begin
IJIFEK+Myriad-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B8391559F1821741C613E91B4B8DDFEE52BE990936F42
6B6> |-
/zero <1C60D8A8C9B7BA8F4DE47D81087F07C8C29DE694F434CEABCB7B06FEF
D718676E5BAAE98169477024EBF8F274B8E0BB63321B197E44D9F7019B79D36C
BA8E5BA13181F0C598767F1A47178F25668BBF84EF6C6C7BC5E2097565284A6> |-
/one <1C60D8A8C9B7BA8F155F998EB98B2861EA3AB552B4E45B53DBE462EFF6
0F5DAAAD9CF5ADECEB83D932466E1D32D6D58D0D419C6D3A463E094C> |-
/K <1C60D8A8C9B79D2D887F02AAD0DEDD320DA849CA8D45E9FD93B18533E770
108FC37D13649022C57443E425D4D6F0511E0306CE893C0048B2EE29CC775F55
DCC2BF128C8BDE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
IJIFEK+Myriad-Roman /Encoding get
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 75 /K put
pop
%ADOEndSubsetFont
/IJIFEK+Myriad-Roman*2 
[
45{/.notdef}repeat /hyphen 2{/.notdef}repeat /zero /one 25{/.notdef}repeat /K 180{/.notdef}repeat
] IJIFEK+Myriad-Roman nfnt
IJIFEK+Myriad-Roman*2  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
219.656 480.836 mov
(K) sh
IJIFEK+Myriad-Roman*1  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
227.24 480.836 mov
(s) sh
IJIFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
232.78 476.844 mov
( \() sh
IJIFEK+Myriad-Roman*2  [24 0 -0 -24 0 0 ]mfnt sfnt
244.684 476.844 mov
(10) sh
IJIFEK+Myriad-Roman*2  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
269.307 468.852 mov
(-10) sh
IJIFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
287.958 476.844 mov
( s\)) sh
400.939 207.743 mo
404.303 195.187 li
f
405.865 189.357 mo
406.148 192.373 406.973 196.241 408.247 198.843 cv
404.098 195.952 li
399.06 196.382 li
401.464 194.766 404.113 191.828 405.865 189.357 cv
f
402.388 208.131 mo
405.752 195.575 li
402.854 194.798 li
399.49 207.355 li
f
22.1207 234.466 mo
22.1207 227.132 li
f
22.6207 234.466 mo
22.6207 227.132 li
21.6207 227.132 li
21.6207 234.466 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
/MJIFEK+Helvetica*1 ufnt
/JJIFEK+Symbol*1 ufnt
/JJIFEK+Symbol*2 ufnt
/IJIFEK+Myriad-Roman*1 ufnt
/IJIFEK+Myriad-Roman*2 ufnt
/HJIFEK+Times-Roman*1 ufnt
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
