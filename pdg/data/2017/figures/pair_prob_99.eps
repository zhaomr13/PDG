%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: passage-web-27.17.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/12/12
%%BoundingBox: 0 -10 263 212
%%HiResBoundingBox: 0 0 262.1455 211.9634
%%CropBox: 0 0 262.1455 211.9634
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.70</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-12T17:53:32-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-12T17:53:31-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-12T17:53:32-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwa+0HX2sPOlpZWrQ&#xA;Sa5e+pYSiSJF4Np9vbu7FWLKGlt35bcqNWla0VTbQdPvdI8uX4aMWpaS6urOzTgRbROS8cQ48o6r&#xA;1oPhBNBUDFU3it7p05Nc3ER/kcW5P/Cow/HFV/1S4/5bZvuh/wCqeKrDZ3nrKRfS+kFYMvGGpYkc&#xA;T/d+FcVX/VLj/ltm+6H/AKp4qsis7wKfUvpWbkxBCw/ZLHiP7vstMVdFZ3gU+pfSs3JiCFh+yWPE&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0A7056DAC9206811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0A7056DAC9206811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:097056DAC9206811808399C81683386A</stRef:instanceID>
            <stRef:documentID>xmp.did:097056DAC9206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>4ec454ee-8eb7-11ec-0000-155894ebe8d9</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:097056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T17:43:40-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0A7056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T17:53:32-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">passagerpp.dvi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.791667</stDim:w>
            <stDim:h>3.083333</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=66 M=0 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>66.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=99 Y=97 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.466925</xmpG:cyan>
                           <xmpG:magenta>98.590065</xmpG:magenta>
                           <xmpG:yellow>97.497520</xmpG:yellow>
                           <xmpG:black>0.094604</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=26 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>26.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=85 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>85.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=51 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>51.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=32 Y=0 K=37 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>32.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>37.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -211.963 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 211.963 li
262.146 211.963 li
262.146 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.377779 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
24.2861 2.16797 mo
24.2861 188.303 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
24.2861 188.303 mo
261.957 188.303 li
@
261.957 188.303 mo
261.957 2.16797 li
@
261.957 2.16797 mo
24.2861 2.16797 li
@
46 185.451 mo
46 188.303 li
@
58.5088 188.303 mo
58.5088 185.451 li
@
67.4771 185.451 mo
67.4771 188.303 li
@
74.5576 188.303 mo
74.5576 185.451 li
@
80.2222 185.451 mo
80.2222 188.303 li
@
85.1782 188.303 mo
85.1782 185.451 li
@
89.1909 185.451 mo
89.1909 188.303 li
@
92.9673 188.303 mo
92.9673 185.451 li
@
96.2715 180.221 mo
96.2715 188.303 li
@
117.985 188.303 mo
117.985 185.451 li
@
130.494 185.451 mo
130.494 188.303 li
@
139.463 188.303 mo
139.463 185.451 li
@
146.543 185.451 mo
146.543 188.303 li
@
152.208 188.303 mo
152.208 185.451 li
@
157.164 185.451 mo
157.164 188.303 li
@
161.177 188.303 mo
161.177 185.451 li
@
164.953 185.451 mo
164.953 188.303 li
@
168.257 188.303 mo
168.257 180.221 li
@
189.971 185.451 mo
189.971 188.303 li
@
202.48 188.303 mo
202.48 185.451 li
@
211.449 185.451 mo
211.449 188.303 li
@
218.529 188.303 mo
218.529 185.451 li
@
224.194 185.451 mo
224.194 188.303 li
@
228.914 188.303 mo
228.914 185.451 li
@
233.163 185.451 mo
233.163 188.303 li
@
236.939 188.303 mo
236.939 185.451 li
@
240.243 180.221 mo
240.243 188.303 li
@
46 2.16797 mo
46 4.78271 li
@
58.5088 4.78271 mo
58.5088 2.16797 li
@
67.4771 2.16797 mo
67.4771 4.78271 li
@
74.5576 4.78271 mo
74.5576 2.16797 li
@
80.2222 2.16797 mo
80.2222 4.78271 li
@
85.1782 4.78271 mo
85.1782 2.16797 li
@
89.1909 2.16797 mo
89.1909 4.78271 li
@
92.9673 4.78271 mo
92.9673 2.16797 li
@
96.2715 2.16797 mo
96.2715 10.0132 li
@
117.985 4.78271 mo
117.985 2.16797 li
@
130.494 2.16797 mo
130.494 4.78271 li
@
139.463 4.78271 mo
139.463 2.16797 li
@
146.543 2.16797 mo
146.543 4.78271 li
@
152.208 4.78271 mo
152.208 2.16797 li
@
157.164 2.16797 mo
157.164 4.78271 li
@
161.177 4.78271 mo
161.177 2.16797 li
@
164.953 2.16797 mo
164.953 4.78271 li
@
168.257 10.0132 mo
168.257 2.16797 li
@
189.971 2.16797 mo
189.971 4.78271 li
@
202.48 4.78271 mo
202.48 2.16797 li
@
211.449 2.16797 mo
211.449 4.78271 li
@
218.529 4.78271 mo
218.529 2.16797 li
@
224.194 2.16797 mo
224.194 4.78271 li
@
228.914 4.78271 mo
228.914 2.16797 li
@
233.163 2.16797 mo
233.163 4.78271 li
@
236.939 4.78271 mo
236.939 2.16797 li
@
240.243 2.16797 mo
240.243 10.0132 li
@
26.8818 184.5 mo
24.2861 184.5 li
@
24.2861 180.696 mo
26.8818 180.696 li
@
26.8818 177.13 mo
24.2861 177.13 li
@
24.2861 173.327 mo
26.8818 173.327 li
@
32.0742 169.523 mo
24.2861 169.523 li
@
24.2861 165.958 mo
26.8818 165.958 li
@
26.8818 162.154 mo
24.2861 162.154 li
@
24.2861 158.35 mo
26.8818 158.35 li
@
26.8818 154.785 mo
24.2861 154.785 li
@
24.2861 150.981 mo
32.0742 150.981 li
@
26.8818 147.178 mo
24.2861 147.178 li
@
24.2861 143.612 mo
26.8818 143.612 li
@
26.8818 139.809 mo
24.2861 139.809 li
@
24.2861 136.005 mo
26.8818 136.005 li
@
32.0742 132.439 mo
24.2861 132.439 li
@
24.2861 128.635 mo
26.8818 128.635 li
@
26.8818 124.832 mo
24.2861 124.832 li
@
24.2861 121.266 mo
26.8818 121.266 li
@
26.8818 117.462 mo
24.2861 117.462 li
@
24.2861 113.659 mo
32.0742 113.659 li
@
26.8818 110.093 mo
24.2861 110.093 li
@
24.2861 106.29 mo
26.8818 106.29 li
@
26.8818 102.486 mo
24.2861 102.486 li
@
24.2861 98.9204 mo
26.8818 98.9204 li
@
32.0742 95.1167 mo
24.2861 95.1167 li
@
24.2861 91.313 mo
26.8818 91.313 li
@
26.8818 87.7471 mo
24.2861 87.7471 li
@
24.2861 83.9438 mo
26.8818 83.9438 li
@
26.8818 80.1401 mo
24.2861 80.1401 li
@
24.2861 76.5742 mo
32.0742 76.5742 li
@
26.8818 72.7705 mo
24.2861 72.7705 li
@
24.2861 69.2051 mo
26.8818 69.2051 li
@
26.8818 65.4014 mo
24.2861 65.4014 li
@
24.2861 61.5986 mo
26.8818 61.5986 li
@
32.0742 58.0317 mo
24.2861 58.0317 li
@
24.2861 54.2285 mo
26.8818 54.2285 li
@
26.8818 50.4258 mo
24.2861 50.4258 li
@
24.2861 46.8589 mo
26.8818 46.8589 li
@
26.8818 43.0552 mo
24.2861 43.0552 li
@
24.2861 39.252 mo
32.0742 39.252 li
@
26.8818 35.687 mo
24.2861 35.687 li
@
24.2861 31.8833 mo
26.8818 31.8833 li
@
26.8818 28.0796 mo
24.2861 28.0796 li
@
24.2861 24.5142 mo
26.8818 24.5142 li
@
32.0742 20.7104 mo
24.2861 20.7104 li
@
24.2861 16.9067 mo
26.8818 16.9067 li
@
26.8818 13.3413 mo
24.2861 13.3413 li
@
24.2861 9.5376 mo
26.8818 9.5376 li
@
26.8818 5.73389 mo
24.2861 5.73389 li
@
261.957 184.5 mo
259.124 184.5 li
@
259.124 180.696 mo
261.957 180.696 li
@
261.957 177.13 mo
259.124 177.13 li
@
259.124 173.327 mo
261.957 173.327 li
@
261.957 169.523 mo
253.932 169.523 li
@
259.124 165.958 mo
261.957 165.958 li
@
261.957 162.154 mo
259.124 162.154 li
@
259.124 158.35 mo
261.957 158.35 li
@
261.957 154.785 mo
259.124 154.785 li
@
253.932 150.981 mo
261.957 150.981 li
@
261.957 147.178 mo
259.124 147.178 li
@
259.124 143.612 mo
261.957 143.612 li
@
261.957 139.809 mo
259.124 139.809 li
@
259.124 136.005 mo
261.957 136.005 li
@
261.957 132.439 mo
253.932 132.439 li
@
259.124 128.635 mo
261.957 128.635 li
@
261.957 124.832 mo
259.124 124.832 li
@
259.124 121.266 mo
261.957 121.266 li
@
261.957 117.462 mo
259.124 117.462 li
@
253.932 113.659 mo
261.957 113.659 li
@
261.957 110.093 mo
259.124 110.093 li
@
259.124 106.29 mo
261.957 106.29 li
@
261.957 102.486 mo
259.124 102.486 li
@
259.124 98.9204 mo
261.957 98.9204 li
@
261.957 95.1167 mo
253.932 95.1167 li
@
259.124 91.313 mo
261.957 91.313 li
@
261.957 87.7471 mo
259.124 87.7471 li
@
259.124 83.9438 mo
261.957 83.9438 li
@
261.957 80.1401 mo
259.124 80.1401 li
@
253.932 76.5742 mo
261.957 76.5742 li
@
261.957 72.7705 mo
259.124 72.7705 li
@
259.124 69.2051 mo
261.957 69.2051 li
@
261.957 65.4014 mo
259.124 65.4014 li
@
259.124 61.5986 mo
261.957 61.5986 li
@
261.957 58.0317 mo
253.932 58.0317 li
@
259.124 54.2285 mo
261.957 54.2285 li
@
261.957 50.4258 mo
259.124 50.4258 li
@
259.124 46.8589 mo
261.957 46.8589 li
@
261.957 43.0552 mo
259.124 43.0552 li
@
253.932 39.252 mo
261.957 39.252 li
@
261.957 35.687 mo
259.124 35.687 li
@
259.124 31.8833 mo
261.957 31.8833 li
@
261.957 28.0796 mo
259.124 28.0796 li
@
259.124 24.5142 mo
261.957 24.5142 li
@
261.957 20.7104 mo
253.932 20.7104 li
@
259.124 16.9067 mo
261.957 16.9067 li
@
261.957 13.3413 mo
259.124 13.3413 li
@
259.124 9.5376 mo
261.957 9.5376 li
@
261.957 5.73389 mo
259.124 5.73389 li
@
115.74 204.146 mo
115.473 204.029 115.136 203.971 114.729 203.971 cv
114.536 203.971 114.417 203.99 114.373 204.028 cv
114.329 204.067 114.306 204.153 114.306 204.286 cv
114.306 206.757 li
114.475 206.772 114.585 206.782 114.637 206.785 cv
114.689 206.788 114.74 206.789 114.789 206.789 cv
115.221 206.789 115.561 206.728 115.809 206.604 cv
116.259 206.379 116.484 205.958 116.484 205.341 cv
116.484 204.761 116.236 204.363 115.74 204.146 cv
cp
112.565 209.714 mo
112.923 209.681 113.146 209.609 113.236 209.5 cv
113.324 209.391 113.369 209.142 113.369 208.751 cv
113.369 204.646 li
113.369 204.316 113.319 204.099 113.22 203.994 cv
113.12 203.889 112.902 203.823 112.565 203.795 cv
112.565 203.619 li
115.046 203.619 li
115.842 203.619 116.452 203.775 116.875 204.086 cv
117.297 204.398 117.509 204.809 117.509 205.317 cv
117.509 205.962 117.274 206.43 116.806 206.72 cv
116.337 207.01 115.75 207.155 115.046 207.155 cv
114.945 207.155 114.815 207.152 114.658 207.148 cv
114.5 207.144 114.383 207.141 114.306 207.141 cv
114.306 208.863 li
114.306 209.219 114.36 209.443 114.469 209.535 cv
114.578 209.627 114.821 209.687 115.198 209.714 cv
115.198 209.89 li
112.565 209.89 li
112.565 209.714 li
cp
f
117.729 209.761 mo
117.981 209.727 118.146 209.664 118.224 209.573 cv
118.302 209.482 118.341 209.267 118.341 208.927 cv
118.341 204.484 li
118.341 204.312 118.318 204.185 118.274 204.103 cv
118.23 204.021 118.122 203.98 117.95 203.98 cv
117.917 203.98 117.884 203.982 117.852 203.987 cv
117.819 203.992 117.783 203.997 117.744 204.003 cv
117.744 203.836 li
117.878 203.796 118.044 203.748 118.242 203.691 cv
118.439 203.634 118.577 203.593 118.653 203.568 cv
119.094 203.429 li
119.104 203.461 li
119.104 206.303 li
119.296 206.081 119.468 205.917 119.618 205.813 cv
119.888 205.627 120.179 205.535 120.491 205.535 cv
120.988 205.535 121.326 205.745 121.507 206.165 cv
121.604 206.387 121.653 206.678 121.653 207.039 cv
121.653 208.927 li
121.653 209.254 121.69 209.467 121.767 209.566 cv
121.841 209.665 121.995 209.73 122.228 209.761 cv
122.228 209.89 li
120.239 209.89 li
120.239 209.761 li
120.505 209.724 120.677 209.66 120.753 209.571 cv
120.83 209.481 120.868 209.267 120.868 208.927 cv
120.868 207.053 li
120.868 206.754 120.818 206.512 120.719 206.327 cv
120.619 206.141 120.432 206.049 120.156 206.049 cv
119.917 206.049 119.686 206.135 119.462 206.308 cv
119.238 206.481 119.126 206.593 119.126 206.646 cv
119.126 208.927 li
119.126 209.273 119.167 209.489 119.246 209.575 cv
119.326 209.662 119.496 209.724 119.756 209.761 cv
119.756 209.89 li
117.729 209.89 li
117.729 209.761 li
cp
f
123.906 206.067 mo
123.6 206.348 123.446 206.833 123.446 207.521 cv
123.446 208.07 123.569 208.582 123.816 209.057 cv
124.063 209.532 124.406 209.77 124.846 209.77 cv
125.189 209.77 125.454 209.611 125.64 209.293 cv
125.825 208.976 125.918 208.559 125.918 208.043 cv
125.918 207.51 125.8 207.007 125.563 206.535 cv
125.327 206.063 124.985 205.827 124.537 205.827 cv
124.295 205.827 124.085 205.907 123.906 206.067 cv
cp
123.173 206.185 mo
123.561 205.761 124.059 205.549 124.668 205.549 cv
125.275 205.549 125.777 205.75 126.176 206.15 cv
126.574 206.552 126.773 207.085 126.773 207.752 cv
126.773 208.366 126.58 208.9 126.194 209.353 cv
125.808 209.807 125.309 210.034 124.696 210.034 cv
124.107 210.034 123.61 209.816 123.202 209.381 cv
122.795 208.946 122.592 208.4 122.592 207.743 cv
122.592 207.129 122.785 206.609 123.173 206.185 cv
cp
f
129.451 205.623 mo
129.451 205.956 li
128.515 205.956 li
128.505 208.622 li
128.505 208.856 128.525 209.034 128.564 209.154 cv
128.639 209.367 128.782 209.474 128.997 209.474 cv
129.107 209.474 129.203 209.447 129.284 209.395 cv
129.365 209.342 129.458 209.259 129.562 209.145 cv
129.682 209.247 li
129.58 209.386 li
129.421 209.602 129.253 209.754 129.075 209.844 cv
128.897 209.933 128.726 209.978 128.561 209.978 cv
128.198 209.978 127.954 209.816 127.825 209.492 cv
127.755 209.316 127.72 209.073 127.72 208.761 cv
127.72 205.956 li
127.219 205.956 li
127.203 205.947 127.191 205.938 127.184 205.928 cv
127.177 205.919 127.173 205.907 127.173 205.892 cv
127.173 205.86 127.18 205.836 127.193 205.82 cv
127.207 205.803 127.251 205.763 127.324 205.702 cv
127.535 205.526 127.688 205.383 127.781 205.273 cv
127.875 205.164 128.095 204.875 128.44 204.406 cv
128.48 204.406 128.504 204.409 128.512 204.415 cv
128.52 204.421 128.523 204.444 128.523 204.484 cv
128.523 205.623 li
129.451 205.623 li
cp
f
131.226 206.067 mo
130.919 206.348 130.766 206.833 130.766 207.521 cv
130.766 208.07 130.889 208.582 131.136 209.057 cv
131.383 209.532 131.726 209.77 132.165 209.77 cv
132.509 209.77 132.773 209.611 132.959 209.293 cv
133.145 208.976 133.237 208.559 133.237 208.043 cv
133.237 207.51 133.119 207.007 132.883 206.535 cv
132.646 206.063 132.305 205.827 131.856 205.827 cv
131.614 205.827 131.404 205.907 131.226 206.067 cv
cp
130.492 206.185 mo
130.88 205.761 131.378 205.549 131.987 205.549 cv
132.595 205.549 133.097 205.75 133.495 206.15 cv
133.894 206.552 134.093 207.085 134.093 207.752 cv
134.093 208.366 133.899 208.9 133.514 209.353 cv
133.127 209.807 132.628 210.034 132.016 210.034 cv
131.427 210.034 130.93 209.816 130.521 209.381 cv
130.114 208.946 129.911 208.4 129.911 207.743 cv
129.911 207.129 130.104 206.609 130.492 206.185 cv
cp
f
134.547 209.761 mo
134.765 209.733 134.917 209.678 135.004 209.596 cv
135.092 209.515 135.135 209.332 135.135 209.048 cv
135.135 206.697 li
135.135 206.501 135.117 206.363 135.08 206.284 cv
135.021 206.167 134.902 206.109 134.722 206.109 cv
134.694 206.109 134.666 206.11 134.637 206.114 cv
134.607 206.117 134.571 206.121 134.528 206.127 cv
134.528 205.965 li
134.654 205.928 134.951 205.833 135.42 205.679 cv
135.852 205.535 li
135.873 205.535 135.887 205.543 135.891 205.558 cv
135.896 205.574 135.897 205.595 135.897 205.623 cv
135.897 206.303 li
136.18 206.038 136.399 205.856 136.559 205.757 cv
136.797 205.606 137.045 205.53 137.302 205.53 cv
137.51 205.53 137.699 205.59 137.87 205.711 cv
138.2 205.945 138.365 206.363 138.365 206.965 cv
138.365 209.126 li
138.365 209.349 138.409 209.509 138.498 209.608 cv
138.586 209.707 138.733 209.757 138.939 209.761 cv
138.939 209.89 li
136.978 209.89 li
136.978 209.761 li
137.201 209.73 137.357 209.667 137.446 209.573 cv
137.535 209.479 137.58 209.274 137.58 208.96 cv
137.58 206.984 li
137.58 206.718 137.531 206.499 137.434 206.324 cv
137.336 206.15 137.156 206.063 136.895 206.063 cv
136.715 206.063 136.532 206.125 136.346 206.248 cv
136.242 206.319 136.108 206.436 135.944 206.6 cv
135.944 209.191 li
135.944 209.414 135.993 209.563 136.091 209.638 cv
136.188 209.713 136.344 209.754 136.555 209.761 cv
136.555 209.89 li
134.547 209.89 li
134.547 209.761 li
cp
f
142.524 206.354 mo
142.427 206.521 142.356 206.73 142.313 206.984 cv
144.252 206.984 li
144.219 206.675 144.16 206.445 144.078 206.294 cv
143.928 206.022 143.677 205.887 143.324 205.887 cv
142.975 205.887 142.708 206.042 142.524 206.354 cv
cp
144.726 206 mo
145.05 206.301 145.213 206.728 145.213 207.28 cv
142.295 207.28 li
142.325 207.994 142.486 208.515 142.777 208.841 cv
143.068 209.167 143.413 209.33 143.812 209.33 cv
144.133 209.33 144.404 209.246 144.624 209.076 cv
144.845 208.907 145.049 208.667 145.235 208.356 cv
145.396 208.411 li
145.271 208.804 145.036 209.167 144.691 209.5 cv
144.347 209.834 143.925 210.001 143.425 210.001 cv
142.85 210.001 142.404 209.782 142.091 209.344 cv
141.776 208.906 141.619 208.401 141.619 207.831 cv
141.619 207.21 141.802 206.675 142.166 206.225 cv
142.53 205.774 143.006 205.549 143.591 205.549 cv
144.022 205.549 144.4 205.699 144.726 206 cv
cp
f
145.782 209.761 mo
146 209.733 146.152 209.678 146.239 209.596 cv
146.327 209.515 146.37 209.332 146.37 209.048 cv
146.37 206.697 li
146.37 206.501 146.353 206.363 146.315 206.284 cv
146.257 206.167 146.138 206.109 145.957 206.109 cv
145.93 206.109 145.901 206.11 145.872 206.114 cv
145.843 206.117 145.807 206.121 145.764 206.127 cv
145.764 205.965 li
145.89 205.928 146.187 205.833 146.655 205.679 cv
147.087 205.535 li
147.108 205.535 147.122 205.543 147.126 205.558 cv
147.131 205.574 147.133 205.595 147.133 205.623 cv
147.133 206.303 li
147.415 206.038 147.635 205.856 147.794 205.757 cv
148.032 205.606 148.28 205.53 148.537 205.53 cv
148.745 205.53 148.935 205.59 149.105 205.711 cv
149.436 205.945 149.601 206.363 149.601 206.965 cv
149.601 209.126 li
149.601 209.349 149.645 209.509 149.733 209.608 cv
149.821 209.707 149.969 209.757 150.175 209.761 cv
150.175 209.89 li
148.213 209.89 li
148.213 209.761 li
148.437 209.73 148.593 209.667 148.682 209.573 cv
148.771 209.479 148.815 209.274 148.815 208.96 cv
148.815 206.984 li
148.815 206.718 148.767 206.499 148.669 206.324 cv
148.571 206.15 148.392 206.063 148.13 206.063 cv
147.95 206.063 147.768 206.125 147.581 206.248 cv
147.478 206.319 147.344 206.436 147.18 206.6 cv
147.18 209.191 li
147.18 209.414 147.229 209.563 147.326 209.638 cv
147.424 209.713 147.579 209.754 147.79 209.761 cv
147.79 209.89 li
145.782 209.89 li
145.782 209.761 li
cp
f
151.406 206.354 mo
151.309 206.521 151.238 206.73 151.195 206.984 cv
153.134 206.984 li
153.101 206.675 153.042 206.445 152.96 206.294 cv
152.81 206.022 152.559 205.887 152.206 205.887 cv
151.856 205.887 151.59 206.042 151.406 206.354 cv
cp
153.607 206 mo
153.932 206.301 154.095 206.728 154.095 207.28 cv
151.177 207.28 li
151.207 207.994 151.368 208.515 151.659 208.841 cv
151.95 209.167 152.295 209.33 152.693 209.33 cv
153.015 209.33 153.286 209.246 153.506 209.076 cv
153.727 208.907 153.931 208.667 154.117 208.356 cv
154.278 208.411 li
154.152 208.804 153.918 209.167 153.573 209.5 cv
153.229 209.834 152.807 210.001 152.307 210.001 cv
151.731 210.001 151.286 209.782 150.973 209.344 cv
150.658 208.906 150.501 208.401 150.501 207.831 cv
150.501 207.21 150.684 206.675 151.048 206.225 cv
151.412 205.774 151.888 205.549 152.473 205.549 cv
152.904 205.549 153.282 205.699 153.607 206 cv
cp
f
154.535 209.737 mo
154.817 209.713 155.004 209.663 155.096 209.587 cv
155.188 209.511 155.234 209.35 155.234 209.104 cv
155.234 207.016 li
155.234 206.71 155.206 206.492 155.149 206.361 cv
155.092 206.23 154.989 206.165 154.839 206.165 cv
154.809 206.165 154.768 206.168 154.717 206.176 cv
154.666 206.184 154.613 206.194 154.559 206.206 cv
154.559 206.053 li
154.732 205.992 154.911 205.928 155.095 205.864 cv
155.277 205.799 155.404 205.752 155.475 205.725 cv
155.627 205.666 155.784 205.6 155.946 205.526 cv
155.968 205.526 155.98 205.534 155.985 205.549 cv
155.99 205.564 155.992 205.597 155.992 205.646 cv
155.992 206.405 li
156.188 206.13 156.378 205.916 156.562 205.762 cv
156.744 205.607 156.934 205.53 157.13 205.53 cv
157.287 205.53 157.414 205.578 157.513 205.671 cv
157.611 205.766 157.66 205.884 157.66 206.025 cv
157.66 206.152 157.623 206.259 157.548 206.345 cv
157.473 206.431 157.378 206.475 157.265 206.475 cv
157.148 206.475 157.031 206.42 156.913 206.313 cv
156.796 206.205 156.703 206.15 156.636 206.15 cv
156.528 206.15 156.396 206.238 156.24 206.412 cv
156.084 206.586 156.006 206.766 156.006 206.951 cv
156.006 209.039 li
156.006 209.304 156.067 209.488 156.189 209.592 cv
156.313 209.695 156.516 209.744 156.801 209.737 cv
156.801 209.89 li
154.535 209.89 li
154.535 209.737 li
cp
f
160.444 208.104 mo
160.629 207.956 160.721 207.698 160.721 207.331 cv
160.721 207.038 160.646 206.708 160.497 206.34 cv
160.349 205.973 160.102 205.79 159.756 205.79 cv
159.455 205.79 159.248 205.933 159.135 206.22 cv
159.077 206.371 159.048 206.558 159.048 206.78 cv
159.048 207.156 159.138 207.494 159.319 207.793 cv
159.5 208.093 159.734 208.243 160.021 208.243 cv
160.19 208.243 160.331 208.196 160.444 208.104 cv
cp
158.985 211.283 mo
159.275 211.382 159.606 211.431 159.98 211.431 cv
160.489 211.431 160.902 211.343 161.222 211.165 cv
161.54 210.988 161.699 210.77 161.699 210.51 cv
161.699 210.304 161.57 210.166 161.313 210.099 cv
161.152 210.058 160.851 210.035 160.405 210.029 cv
160.292 210.026 160.172 210.022 160.046 210.018 cv
159.92 210.013 159.806 210.007 159.701 210.001 cv
159.633 209.998 159.524 209.986 159.374 209.964 cv
159.224 209.942 159.111 209.924 159.038 209.909 cv
159.001 209.909 158.911 210.006 158.77 210.2 cv
158.624 210.397 158.552 210.58 158.552 210.747 cv
158.552 211.005 158.696 211.185 158.985 211.283 cv
cp
158.499 207.84 mo
158.344 207.603 158.267 207.335 158.267 207.039 cv
158.267 206.678 158.409 206.336 158.694 206.012 cv
158.979 205.688 159.382 205.526 159.902 205.526 cv
160.126 205.526 160.373 205.579 160.643 205.686 cv
160.912 205.792 161.171 205.845 161.419 205.845 cv
161.483 205.845 161.58 205.843 161.711 205.838 cv
161.841 205.833 161.935 205.831 161.993 205.831 cv
162.049 205.831 li
162.049 206.206 li
161.253 206.206 li
161.309 206.336 161.352 206.448 161.382 206.544 cv
161.435 206.723 161.46 206.893 161.46 207.053 cv
161.46 207.405 161.315 207.728 161.026 208.022 cv
160.736 208.317 160.347 208.465 159.856 208.465 cv
159.78 208.465 159.642 208.451 159.443 208.423 cv
159.354 208.423 159.236 208.499 159.089 208.65 cv
158.942 208.801 158.868 208.924 158.868 209.02 cv
158.868 209.119 158.976 209.191 159.19 209.238 cv
159.332 209.269 159.488 209.284 159.66 209.284 cv
160.448 209.284 160.983 209.329 161.267 209.418 cv
161.729 209.563 161.961 209.875 161.961 210.353 cv
161.961 210.84 161.69 211.229 161.15 211.519 cv
160.609 211.809 160.063 211.954 159.512 211.954 cv
159.01 211.954 158.611 211.852 158.317 211.646 cv
158.023 211.441 157.876 211.226 157.876 211.001 cv
157.876 210.89 157.915 210.781 157.993 210.675 cv
158.07 210.568 158.224 210.41 158.453 210.2 cv
158.755 209.927 li
158.81 209.872 li
158.67 209.816 158.565 209.762 158.495 209.709 cv
158.373 209.614 158.313 209.504 158.313 209.381 cv
158.313 209.267 158.365 209.141 158.471 209.004 cv
158.577 208.867 158.803 208.644 159.148 208.335 cv
158.87 208.243 158.653 208.078 158.499 207.84 cv
cp
f
162.462 205.637 mo
164.4 205.637 li
164.4 205.767 li
164.247 205.77 164.134 205.784 164.061 205.809 cv
163.92 205.85 163.85 205.931 163.85 206.05 cv
163.85 206.095 163.857 206.14 163.872 206.186 cv
163.888 206.231 163.915 206.3 163.955 206.391 cv
165.019 208.708 li
165.895 206.373 li
165.903 206.348 165.918 206.291 165.938 206.202 cv
165.958 206.114 165.968 206.054 165.968 206.022 cv
165.968 205.94 165.94 205.88 165.885 205.842 cv
165.83 205.804 165.76 205.782 165.674 205.776 cv
165.531 205.767 li
165.531 205.637 li
166.795 205.637 li
166.795 205.767 li
166.669 205.782 166.575 205.827 166.512 205.9 cv
166.449 205.974 166.395 206.076 166.349 206.206 cv
164.901 210.066 li
164.65 210.732 164.41 211.215 164.181 211.515 cv
163.95 211.814 163.659 211.963 163.308 211.963 cv
163.136 211.963 162.975 211.92 162.824 211.834 cv
162.675 211.748 162.6 211.61 162.6 211.422 cv
162.6 211.299 162.645 211.198 162.733 211.119 cv
162.822 211.04 162.936 211.001 163.071 211.001 cv
163.15 211.001 163.268 211.03 163.423 211.089 cv
163.579 211.147 163.69 211.177 163.757 211.177 cv
163.926 211.177 164.104 210.967 164.292 210.548 cv
164.479 210.129 164.574 209.853 164.574 209.719 cv
164.574 209.691 164.569 209.658 164.561 209.618 cv
164.552 209.578 164.542 209.543 164.53 209.513 cv
163.082 206.359 li
162.978 206.13 162.887 205.98 162.809 205.908 cv
162.73 205.835 162.615 205.788 162.462 205.767 cv
162.462 205.637 li
cp
f
170.779 204.684 mo
171.171 204.187 171.634 203.787 172.167 203.485 cv
172.254 203.638 li
171.761 204.032 171.409 204.417 171.197 204.79 cv
170.827 205.441 170.642 206.308 170.642 207.391 cv
170.642 208.193 170.712 208.855 170.853 209.376 cv
171.101 210.29 171.568 210.973 172.254 211.427 cv
172.135 211.58 li
171.758 211.397 171.351 211.041 170.912 210.51 cv
170.187 209.631 169.823 208.631 169.823 207.511 cv
169.823 206.438 170.143 205.495 170.779 204.684 cv
cp
f
172.631 209.714 mo
173.021 209.674 173.27 209.585 173.38 209.448 cv
173.49 209.311 173.546 208.993 173.546 208.493 cv
173.546 204.646 li
173.546 204.304 173.492 204.081 173.385 203.978 cv
173.277 203.874 173.034 203.813 172.654 203.795 cv
172.654 203.619 li
174.51 203.619 li
176.671 208.34 li
178.779 203.619 li
180.649 203.619 li
180.649 203.795 li
180.3 203.819 180.075 203.883 179.974 203.987 cv
179.873 204.09 179.822 204.31 179.822 204.646 cv
179.822 208.859 li
179.822 209.204 179.873 209.425 179.974 209.522 cv
180.075 209.62 180.3 209.684 180.649 209.714 cv
180.649 209.89 li
178.017 209.89 li
178.017 209.714 li
178.396 209.684 178.633 209.615 178.727 209.508 cv
178.819 209.402 178.866 209.148 178.866 208.748 cv
178.866 204.493 li
176.456 209.89 li
176.328 209.89 li
173.959 204.715 li
173.959 208.493 li
173.959 209.011 174.034 209.349 174.185 209.506 cv
174.282 209.608 174.501 209.677 174.841 209.714 cv
174.841 209.89 li
172.631 209.89 li
172.631 209.714 li
cp
f
181.981 206.354 mo
181.884 206.521 181.813 206.73 181.771 206.984 cv
183.709 206.984 li
183.676 206.675 183.617 206.445 183.535 206.294 cv
183.385 206.022 183.134 205.887 182.781 205.887 cv
182.432 205.887 182.165 206.042 181.981 206.354 cv
cp
184.183 206 mo
184.507 206.301 184.67 206.728 184.67 207.28 cv
181.752 207.28 li
181.782 207.994 181.943 208.515 182.234 208.841 cv
182.525 209.167 182.87 209.33 183.269 209.33 cv
183.59 209.33 183.861 209.246 184.081 209.076 cv
184.302 208.907 184.506 208.667 184.692 208.356 cv
184.854 208.411 li
184.728 208.804 184.493 209.167 184.148 209.5 cv
183.804 209.834 183.382 210.001 182.882 210.001 cv
182.307 210.001 181.861 209.782 181.548 209.344 cv
181.233 208.906 181.076 208.401 181.076 207.831 cv
181.076 207.21 181.259 206.675 181.623 206.225 cv
181.987 205.774 182.463 205.549 183.048 205.549 cv
183.479 205.549 183.857 205.699 184.183 206 cv
cp
f
187.726 203.619 mo
187.726 203.781 li
187.49 203.784 187.329 203.8 187.244 203.828 cv
187.094 203.878 187.019 203.98 187.019 204.134 cv
187.019 204.212 187.046 204.322 187.1 204.463 cv
187.152 204.604 187.253 204.838 187.398 205.165 cv
188.872 208.465 li
190.209 204.893 li
190.268 204.735 190.313 204.601 190.344 204.491 cv
190.374 204.381 190.39 204.292 190.39 204.223 cv
190.39 204.038 190.312 203.913 190.155 203.847 cv
190.063 203.809 189.912 203.787 189.701 203.781 cv
189.701 203.619 li
191.626 203.619 li
191.626 203.781 li
191.427 203.809 191.28 203.863 191.185 203.943 cv
191.041 204.063 190.898 204.306 190.758 204.67 cv
188.674 210.001 li
188.532 210.001 li
186.206 204.792 li
186.01 204.35 185.854 204.075 185.735 203.966 cv
185.617 203.858 185.445 203.796 185.219 203.781 cv
185.219 203.619 li
187.726 203.619 li
cp
f
194.365 208.863 mo
194.245 209.273 194.071 209.66 193.841 210.024 cv
193.599 210.413 193.276 210.776 192.871 211.112 cv
192.605 211.334 192.382 211.49 192.2 211.58 cv
192.113 211.427 li
192.585 211.066 192.93 210.697 193.147 210.321 cv
193.533 209.654 193.727 208.773 193.727 207.678 cv
193.727 206.792 193.638 206.069 193.46 205.507 cv
193.212 204.714 192.763 204.091 192.113 203.638 cv
192.232 203.485 li
192.717 203.756 193.167 204.167 193.584 204.716 cv
194.224 205.561 194.544 206.508 194.544 207.558 cv
194.544 208.017 194.484 208.452 194.365 208.863 cv
cp
f
[4.72224 1.88889 .944448 .944448 .944448 1.88889 ] 0 dsh
24.2861 188.303 mo
37.0313 188.303 li
39.8628 188.065 li
46.707 188.065 li
50.4834 187.828 li
54.4961 187.59 li
58.5088 187.353 li
61.5767 187.115 li
64.6455 186.877 li
67.4771 186.401 li
69.8379 185.925 li
72.1973 185.451 li
74.5576 184.975 li
76.4458 184.5 li
78.334 184.025 li
80.2222 183.549 li
81.8745 183.073 li
83.5264 182.598 li
85.1782 182.123 li
86.5942 181.647 li
87.7749 180.934 li
89.1909 180.458 li
90.3716 179.746 li
91.7876 179.27 li
92.9673 178.794 li
94.147 178.082 li
95.0918 177.606 li
96.2715 176.893 li
97.2148 176.417 li
98.1597 175.704 li
99.104 175.228 li
100.048 174.516 li
100.992 174.04 li
101.936 173.327 li
102.879 172.614 li
103.588 172.138 li
104.533 171.426 li
105.24 170.95 li
105.949 170.236 li
106.656 169.761 li
107.364 169.048 li
108.073 168.572 li
108.78 167.859 li
109.489 167.384 li
110.196 166.67 li
110.905 166.195 li
112.085 165.007 li
113.265 163.818 li
114.681 162.629 li
115.625 161.441 li
116.805 160.252 li
117.985 159.063 li
120.818 155.735 li
123.413 152.408 li
126.01 149.08 li
127.662 146.94 li
129.078 144.8 li
130.494 142.661 li
133.562 138.145 li
136.631 133.627 li
139.463 128.874 li
141.823 125.07 li
144.184 121.028 li
146.543 116.987 li
148.432 113.659 li
150.319 110.331 li
152.208 107.003 li
155.276 101.773 li
158.108 96.5425 li
161.177 91.0752 li
163.537 87.0347 li
165.897 83.231 li
168.257 79.1895 li
172.27 72.5337 li
176.518 65.877 li
180.767 59.459 li
183.599 55.4175 li
186.666 51.6138 li
189.971 47.8105 li
193.983 43.2935 li
198.231 38.7769 li
202.48 34.7358 li
205.548 32.1201 li
208.38 29.7437 li
211.449 27.3662 li
213.809 25.9399 li
216.169 24.2764 li
218.529 22.8501 li
220.418 21.6606 li
222.306 20.7104 li
224.194 19.7593 li
227.262 18.333 li
230.094 17.1445 li
233.163 15.9556 li
235.522 15.0049 li
237.883 14.0547 li
240.243 13.3413 li
244.256 11.915 li
248.503 10.7256 li
252.752 9.77539 li
255.82 9.06201 li
258.889 8.34912 li
261.957 7.87354 li
1 0 0 0 cmyk
@
24.0972 192.644 mo
24.0981 192.651 24.0991 192.667 24.0991 192.692 cv
24.0991 197.707 li
24.0991 197.921 24.1558 198.057 24.2695 198.115 cv
24.3833 198.173 24.5952 198.208 24.9053 198.219 cv
24.9053 198.336 li
22.5688 198.336 li
22.5688 198.211 li
22.9023 198.194 23.1201 198.148 23.2222 198.074 cv
23.3242 197.999 23.3755 197.836 23.3755 197.586 cv
23.3755 193.729 li
23.3755 193.596 23.3589 193.495 23.3257 193.425 cv
23.2925 193.355 23.2207 193.321 23.1108 193.321 cv
23.0391 193.321 22.9458 193.341 22.8315 193.381 cv
22.7173 193.421 22.6104 193.464 22.5112 193.508 cv
22.5112 193.392 li
24.0288 192.613 li
24.0786 192.613 li
24.0894 192.626 24.0957 192.637 24.0972 192.644 cv
cp
0 0 0 1 cmyk
f
43.312 198.24 mo
44.3208 197.186 45.0059 196.412 45.3672 195.917 cv
45.7285 195.424 45.9092 194.942 45.9092 194.474 cv
45.9092 194.063 45.7988 193.75 45.5781 193.535 cv
45.3574 193.32 45.0942 193.212 44.7881 193.212 cv
44.4106 193.212 44.1045 193.351 43.8701 193.629 cv
43.7407 193.781 43.6162 194.016 43.498 194.332 cv
43.3203 194.294 li
43.458 193.656 43.6914 193.213 44.021 192.964 cv
44.3506 192.716 44.7041 192.592 45.082 192.592 cv
45.5479 192.592 45.9248 192.74 46.2129 193.035 cv
46.501 193.331 46.645 193.692 46.645 194.119 cv
46.645 194.574 46.4893 195.013 46.1777 195.435 cv
45.8657 195.856 45.189 196.607 44.1465 197.686 cv
46.0449 197.686 li
46.3101 197.686 46.4961 197.654 46.6035 197.59 cv
46.7109 197.527 46.8325 197.371 46.9678 197.125 cv
47.0752 197.174 li
46.6162 198.336 li
43.312 198.336 li
43.312 198.24 li
cp
f
73.1084 197.842 mo
73.3638 198.021 73.5605 198.111 73.6987 198.111 cv
74.0161 198.111 74.2935 197.97 74.5313 197.688 cv
74.7686 197.406 74.8872 197.06 74.8872 196.649 cv
74.8872 195.93 74.5063 195.412 73.7441 195.095 cv
73.3218 194.92 72.9287 194.833 72.564 194.833 cv
72.5034 194.833 72.4653 194.831 72.4502 194.827 cv
72.4351 194.822 72.4165 194.808 72.394 194.783 cv
72.3999 194.761 72.4048 194.742 72.4087 194.727 cv
72.4131 194.711 72.4175 194.697 72.4233 194.683 cv
73.3252 192.692 li
75.0986 192.692 li
75.1865 192.692 75.2549 192.677 75.3032 192.646 cv
75.3511 192.616 75.4141 192.559 75.4912 192.475 cv
75.5571 192.534 li
75.2388 193.304 li
75.2275 193.329 75.1973 193.345 75.1479 193.352 cv
75.0981 193.359 75.0439 193.362 74.9863 193.362 cv
73.3838 193.362 li
73.0317 194.091 li
73.4844 194.169 73.8159 194.243 74.0254 194.312 cv
74.3706 194.429 74.6587 194.601 74.8906 194.829 cv
75.0894 195.026 75.2397 195.248 75.3418 195.493 cv
75.4443 195.739 75.4951 195.999 75.4951 196.274 cv
75.4951 196.888 75.2778 197.4 74.8433 197.811 cv
74.4082 198.222 73.8584 198.428 73.1929 198.428 cv
72.9224 198.428 72.7046 198.401 72.5391 198.349 cv
72.2627 198.262 72.125 198.108 72.125 197.886 cv
72.125 197.803 72.1543 197.73 72.2139 197.667 cv
72.2729 197.605 72.3647 197.574 72.4893 197.574 cv
72.6465 197.574 72.853 197.663 73.1084 197.842 cv
cp
f
94.9619 192.644 mo
94.9629 192.651 94.9639 192.667 94.9639 192.692 cv
94.9639 197.707 li
94.9639 197.921 95.0205 198.057 95.1343 198.115 cv
95.248 198.173 95.46 198.208 95.77 198.219 cv
95.77 198.336 li
93.4336 198.336 li
93.4336 198.211 li
93.7671 198.194 93.9849 198.148 94.0869 198.074 cv
94.189 197.999 94.2402 197.836 94.2402 197.586 cv
94.2402 193.729 li
94.2402 193.596 94.2236 193.495 94.1904 193.425 cv
94.1572 193.355 94.0854 193.321 93.9756 193.321 cv
93.9038 193.321 93.8105 193.341 93.6963 193.381 cv
93.582 193.421 93.4751 193.464 93.376 193.508 cv
93.376 193.392 li
94.8936 192.613 li
94.9434 192.613 li
94.9541 192.626 94.9604 192.637 94.9619 192.644 cv
cp
f
99.5337 197.507 mo
99.6851 197.061 99.7612 196.415 99.7612 195.568 cv
99.7612 194.894 99.7158 194.355 99.6245 193.953 cv
99.4536 193.204 99.1338 192.829 98.665 192.829 cv
98.1963 192.829 97.8755 193.215 97.7017 193.986 cv
97.6108 194.397 97.5649 194.938 97.5649 195.61 cv
97.5649 196.24 97.6118 196.743 97.7056 197.121 cv
97.8823 197.825 98.2129 198.178 98.6982 198.178 cv
99.1035 198.178 99.3818 197.954 99.5337 197.507 cv
cp
100.162 193.608 mo
100.441 194.15 100.58 194.772 100.58 195.474 cv
100.58 196.027 100.495 196.548 100.324 197.036 cv
100.001 197.956 99.4429 198.415 98.6484 198.415 cv
98.1055 198.415 97.6587 198.167 97.3086 197.669 cv
96.9336 197.139 96.7461 196.418 96.7461 195.508 cv
96.7461 194.791 96.8716 194.175 97.1226 193.658 cv
97.4619 192.956 97.9829 192.604 98.686 192.604 cv
99.3198 192.604 99.812 192.939 100.162 193.608 cv
cp
f
114.541 198.24 mo
115.55 197.186 116.235 196.412 116.596 195.917 cv
116.958 195.424 117.138 194.942 117.138 194.474 cv
117.138 194.063 117.028 193.75 116.807 193.535 cv
116.586 193.32 116.323 193.212 116.017 193.212 cv
115.64 193.212 115.333 193.351 115.099 193.629 cv
114.97 193.781 114.845 194.016 114.727 194.332 cv
114.549 194.294 li
114.687 193.656 114.92 193.213 115.25 192.964 cv
115.58 192.716 115.933 192.592 116.311 192.592 cv
116.777 192.592 117.154 192.74 117.442 193.035 cv
117.73 193.331 117.874 193.692 117.874 194.119 cv
117.874 194.574 117.718 195.013 117.407 195.435 cv
117.095 195.856 116.418 196.607 115.375 197.686 cv
117.274 197.686 li
117.539 197.686 117.725 197.654 117.833 197.59 cv
117.94 197.527 118.062 197.371 118.197 197.125 cv
118.304 197.174 li
117.845 198.336 li
114.541 198.336 li
114.541 198.24 li
cp
f
121.386 197.507 mo
121.537 197.061 121.612 196.415 121.612 195.568 cv
121.612 194.894 121.567 194.355 121.476 193.953 cv
121.306 193.204 120.985 192.829 120.517 192.829 cv
120.048 192.829 119.727 193.215 119.553 193.986 cv
119.462 194.397 119.417 194.938 119.417 195.61 cv
119.417 196.24 119.463 196.743 119.557 197.121 cv
119.734 197.825 120.064 198.178 120.55 198.178 cv
120.955 198.178 121.233 197.954 121.386 197.507 cv
cp
122.014 193.608 mo
122.292 194.15 122.432 194.772 122.432 195.474 cv
122.432 196.027 122.346 196.548 122.175 197.036 cv
121.853 197.956 121.294 198.415 120.5 198.415 cv
119.957 198.415 119.51 198.167 119.16 197.669 cv
118.785 197.139 118.598 196.418 118.598 195.508 cv
118.598 194.791 118.723 194.175 118.974 193.658 cv
119.313 192.956 119.834 192.604 120.538 192.604 cv
121.171 192.604 121.664 192.939 122.014 193.608 cv
cp
f
143.914 197.842 mo
144.169 198.021 144.366 198.111 144.504 198.111 cv
144.821 198.111 145.099 197.97 145.336 197.688 cv
145.573 197.406 145.692 197.06 145.692 196.649 cv
145.692 195.93 145.312 195.412 144.55 195.095 cv
144.127 194.92 143.733 194.833 143.369 194.833 cv
143.309 194.833 143.271 194.831 143.255 194.827 cv
143.24 194.822 143.222 194.808 143.199 194.783 cv
143.205 194.761 143.21 194.742 143.214 194.727 cv
143.218 194.711 143.223 194.697 143.229 194.683 cv
144.13 192.692 li
145.903 192.692 li
145.992 192.692 146.06 192.677 146.108 192.646 cv
146.156 192.616 146.219 192.559 146.296 192.475 cv
146.362 192.534 li
146.044 193.304 li
146.033 193.329 146.003 193.345 145.953 193.352 cv
145.903 193.359 145.85 193.362 145.791 193.362 cv
144.189 193.362 li
143.837 194.091 li
144.29 194.169 144.621 194.243 144.831 194.312 cv
145.176 194.429 145.464 194.601 145.696 194.829 cv
145.895 195.026 146.045 195.248 146.147 195.493 cv
146.249 195.739 146.301 195.999 146.301 196.274 cv
146.301 196.888 146.083 197.4 145.648 197.811 cv
145.214 198.222 144.663 198.428 143.998 198.428 cv
143.728 198.428 143.51 198.401 143.344 198.349 cv
143.068 198.262 142.93 198.108 142.93 197.886 cv
142.93 197.803 142.96 197.73 143.019 197.667 cv
143.078 197.605 143.17 197.574 143.294 197.574 cv
143.452 197.574 143.658 197.663 143.914 197.842 cv
cp
f
149.758 197.507 mo
149.91 197.061 149.985 196.415 149.985 195.568 cv
149.985 194.894 149.94 194.355 149.85 193.953 cv
149.679 193.204 149.358 192.829 148.89 192.829 cv
148.421 192.829 148.1 193.215 147.926 193.986 cv
147.835 194.397 147.79 194.938 147.79 195.61 cv
147.79 196.24 147.837 196.743 147.931 197.121 cv
148.106 197.825 148.438 198.178 148.923 198.178 cv
149.328 198.178 149.606 197.954 149.758 197.507 cv
cp
150.387 193.608 mo
150.665 194.15 150.805 194.772 150.805 195.474 cv
150.805 196.027 150.719 196.548 150.548 197.036 cv
150.226 197.956 149.667 198.415 148.873 198.415 cv
148.33 198.415 147.884 198.167 147.533 197.669 cv
147.158 197.139 146.971 196.418 146.971 195.508 cv
146.971 194.791 147.097 194.175 147.348 193.658 cv
147.687 192.956 148.207 192.604 148.91 192.604 cv
149.545 192.604 150.037 192.939 150.387 193.608 cv
cp
f
164.666 192.644 mo
164.668 192.651 164.668 192.667 164.668 192.692 cv
164.668 197.707 li
164.668 197.921 164.726 198.057 164.839 198.115 cv
164.952 198.173 165.164 198.208 165.475 198.219 cv
165.475 198.336 li
163.139 198.336 li
163.139 198.211 li
163.472 198.194 163.689 198.148 163.792 198.074 cv
163.894 197.999 163.944 197.836 163.944 197.586 cv
163.944 193.729 li
163.944 193.596 163.928 193.495 163.896 193.425 cv
163.862 193.355 163.79 193.321 163.68 193.321 cv
163.608 193.321 163.516 193.341 163.4 193.381 cv
163.286 193.421 163.18 193.464 163.08 193.508 cv
163.08 193.392 li
164.598 192.613 li
164.647 192.613 li
164.659 192.626 164.665 192.637 164.666 192.644 cv
cp
f
169.237 197.507 mo
169.39 197.061 169.465 196.415 169.465 195.568 cv
169.465 194.894 169.42 194.355 169.329 193.953 cv
169.158 193.204 168.838 192.829 168.369 192.829 cv
167.9 192.829 167.579 193.215 167.405 193.986 cv
167.314 194.397 167.27 194.938 167.27 195.61 cv
167.27 196.24 167.316 196.743 167.41 197.121 cv
167.586 197.825 167.917 198.178 168.402 198.178 cv
168.808 198.178 169.086 197.954 169.237 197.507 cv
cp
169.866 193.608 mo
170.145 194.15 170.284 194.772 170.284 195.474 cv
170.284 196.027 170.198 196.548 170.027 197.036 cv
169.705 197.956 169.146 198.415 168.353 198.415 cv
167.81 198.415 167.363 198.167 167.013 197.669 cv
166.638 197.139 166.45 196.418 166.45 195.508 cv
166.45 194.791 166.576 194.175 166.827 193.658 cv
167.166 192.956 167.687 192.604 168.39 192.604 cv
169.024 192.604 169.517 192.939 169.866 193.608 cv
cp
f
173.473 197.507 mo
173.625 197.061 173.7 196.415 173.7 195.568 cv
173.7 194.894 173.655 194.355 173.564 193.953 cv
173.394 193.204 173.073 192.829 172.604 192.829 cv
172.136 192.829 171.814 193.215 171.641 193.986 cv
171.55 194.397 171.505 194.938 171.505 195.61 cv
171.505 196.24 171.552 196.743 171.646 197.121 cv
171.821 197.825 172.152 198.178 172.638 198.178 cv
173.043 198.178 173.321 197.954 173.473 197.507 cv
cp
174.102 193.608 mo
174.38 194.15 174.52 194.772 174.52 195.474 cv
174.52 196.027 174.434 196.548 174.263 197.036 cv
173.94 197.956 173.382 198.415 172.588 198.415 cv
172.045 198.415 171.599 198.167 171.248 197.669 cv
170.873 197.139 170.686 196.418 170.686 195.508 cv
170.686 194.791 170.812 194.175 171.063 193.658 cv
171.401 192.956 171.922 192.604 172.625 192.604 cv
173.26 192.604 173.752 192.939 174.102 193.608 cv
cp
f
184.414 198.24 mo
185.424 197.186 186.108 196.412 186.47 195.917 cv
186.831 195.424 187.012 194.942 187.012 194.474 cv
187.012 194.063 186.901 193.75 186.681 193.535 cv
186.46 193.32 186.197 193.212 185.891 193.212 cv
185.513 193.212 185.207 193.351 184.973 193.629 cv
184.843 193.781 184.719 194.016 184.601 194.332 cv
184.423 194.294 li
184.561 193.656 184.794 193.213 185.124 192.964 cv
185.453 192.716 185.807 192.592 186.185 192.592 cv
186.65 192.592 187.027 192.74 187.315 193.035 cv
187.604 193.331 187.748 193.692 187.748 194.119 cv
187.748 194.574 187.592 195.013 187.28 195.435 cv
186.969 195.856 186.291 196.607 185.249 197.686 cv
187.147 197.686 li
187.412 197.686 187.599 197.654 187.706 197.59 cv
187.813 197.527 187.935 197.371 188.07 197.125 cv
188.178 197.174 li
187.719 198.336 li
184.414 198.336 li
184.414 198.24 li
cp
f
191.259 197.507 mo
191.411 197.061 191.486 196.415 191.486 195.568 cv
191.486 194.894 191.441 194.355 191.351 193.953 cv
191.18 193.204 190.859 192.829 190.391 192.829 cv
189.922 192.829 189.601 193.215 189.427 193.986 cv
189.336 194.397 189.291 194.938 189.291 195.61 cv
189.291 196.24 189.338 196.743 189.432 197.121 cv
189.607 197.825 189.938 198.178 190.424 198.178 cv
190.829 198.178 191.107 197.954 191.259 197.507 cv
cp
191.888 193.608 mo
192.166 194.15 192.306 194.772 192.306 195.474 cv
192.306 196.027 192.22 196.548 192.049 197.036 cv
191.727 197.956 191.168 198.415 190.374 198.415 cv
189.831 198.415 189.385 198.167 189.034 197.669 cv
188.659 197.139 188.472 196.418 188.472 195.508 cv
188.472 194.791 188.598 194.175 188.849 193.658 cv
189.188 192.956 189.708 192.604 190.411 192.604 cv
191.046 192.604 191.538 192.939 191.888 193.608 cv
cp
f
195.493 197.507 mo
195.646 197.061 195.721 196.415 195.721 195.568 cv
195.721 194.894 195.676 194.355 195.585 193.953 cv
195.414 193.204 195.094 192.829 194.625 192.829 cv
194.156 192.829 193.835 193.215 193.661 193.986 cv
193.57 194.397 193.525 194.938 193.525 195.61 cv
193.525 196.24 193.572 196.743 193.666 197.121 cv
193.842 197.825 194.173 198.178 194.658 198.178 cv
195.063 198.178 195.342 197.954 195.493 197.507 cv
cp
196.122 193.608 mo
196.4 194.15 196.54 194.772 196.54 195.474 cv
196.54 196.027 196.454 196.548 196.283 197.036 cv
195.961 197.956 195.402 198.415 194.608 198.415 cv
194.065 198.415 193.619 198.167 193.269 197.669 cv
192.894 197.139 192.706 196.418 192.706 195.508 cv
192.706 194.791 192.832 194.175 193.083 193.658 cv
193.422 192.956 193.942 192.604 194.646 192.604 cv
195.28 192.604 195.772 192.939 196.122 193.608 cv
cp
f
213.788 197.842 mo
214.043 198.021 214.24 198.111 214.378 198.111 cv
214.695 198.111 214.973 197.97 215.21 197.688 cv
215.447 197.406 215.566 197.06 215.566 196.649 cv
215.566 195.93 215.186 195.412 214.424 195.095 cv
214.001 194.92 213.607 194.833 213.243 194.833 cv
213.183 194.833 213.145 194.831 213.129 194.827 cv
213.114 194.822 213.096 194.808 213.073 194.783 cv
213.079 194.761 213.084 194.742 213.088 194.727 cv
213.092 194.711 213.097 194.697 213.103 194.683 cv
214.004 192.692 li
215.777 192.692 li
215.866 192.692 215.934 192.677 215.982 192.646 cv
216.03 192.616 216.093 192.559 216.17 192.475 cv
216.236 192.534 li
215.918 193.304 li
215.907 193.329 215.877 193.345 215.827 193.352 cv
215.777 193.359 215.724 193.362 215.665 193.362 cv
214.063 193.362 li
213.711 194.091 li
214.164 194.169 214.495 194.243 214.705 194.312 cv
215.05 194.429 215.338 194.601 215.57 194.829 cv
215.769 195.026 215.919 195.248 216.021 195.493 cv
216.123 195.739 216.175 195.999 216.175 196.274 cv
216.175 196.888 215.957 197.4 215.522 197.811 cv
215.088 198.222 214.537 198.428 213.872 198.428 cv
213.602 198.428 213.384 198.401 213.218 198.349 cv
212.942 198.262 212.804 198.108 212.804 197.886 cv
212.804 197.803 212.834 197.73 212.893 197.667 cv
212.952 197.605 213.044 197.574 213.168 197.574 cv
213.326 197.574 213.532 197.663 213.788 197.842 cv
cp
f
219.631 197.507 mo
219.783 197.061 219.858 196.415 219.858 195.568 cv
219.858 194.894 219.813 194.355 219.723 193.953 cv
219.552 193.204 219.231 192.829 218.763 192.829 cv
218.294 192.829 217.973 193.215 217.799 193.986 cv
217.708 194.397 217.663 194.938 217.663 195.61 cv
217.663 196.24 217.71 196.743 217.804 197.121 cv
217.979 197.825 218.311 198.178 218.796 198.178 cv
219.201 198.178 219.479 197.954 219.631 197.507 cv
cp
220.26 193.608 mo
220.538 194.15 220.678 194.772 220.678 195.474 cv
220.678 196.027 220.592 196.548 220.421 197.036 cv
220.099 197.956 219.54 198.415 218.746 198.415 cv
218.203 198.415 217.757 198.167 217.406 197.669 cv
217.031 197.139 216.844 196.418 216.844 195.508 cv
216.844 194.791 216.97 194.175 217.221 193.658 cv
217.56 192.956 218.08 192.604 218.783 192.604 cv
219.418 192.604 219.91 192.939 220.26 193.608 cv
cp
f
223.866 197.507 mo
224.019 197.061 224.094 196.415 224.094 195.568 cv
224.094 194.894 224.049 194.355 223.958 193.953 cv
223.787 193.204 223.467 192.829 222.998 192.829 cv
222.529 192.829 222.208 193.215 222.034 193.986 cv
221.943 194.397 221.898 194.938 221.898 195.61 cv
221.898 196.24 221.945 196.743 222.039 197.121 cv
222.215 197.825 222.546 198.178 223.031 198.178 cv
223.437 198.178 223.715 197.954 223.866 197.507 cv
cp
224.495 193.608 mo
224.773 194.15 224.913 194.772 224.913 195.474 cv
224.913 196.027 224.827 196.548 224.656 197.036 cv
224.334 197.956 223.775 198.415 222.981 198.415 cv
222.438 198.415 221.992 198.167 221.642 197.669 cv
221.267 197.139 221.079 196.418 221.079 195.508 cv
221.079 194.791 221.205 194.175 221.456 193.658 cv
221.795 192.956 222.315 192.604 223.019 192.604 cv
223.653 192.604 224.146 192.939 224.495 193.608 cv
cp
f
234.624 192.644 mo
234.626 192.651 234.626 192.667 234.626 192.692 cv
234.626 197.707 li
234.626 197.921 234.684 198.057 234.797 198.115 cv
234.91 198.173 235.122 198.208 235.433 198.219 cv
235.433 198.336 li
233.097 198.336 li
233.097 198.211 li
233.43 198.194 233.647 198.148 233.75 198.074 cv
233.852 197.999 233.902 197.836 233.902 197.586 cv
233.902 193.729 li
233.902 193.596 233.886 193.495 233.854 193.425 cv
233.82 193.355 233.748 193.321 233.638 193.321 cv
233.566 193.321 233.474 193.341 233.358 193.381 cv
233.244 193.421 233.138 193.464 233.038 193.508 cv
233.038 193.392 li
234.556 192.613 li
234.605 192.613 li
234.617 192.626 234.623 192.637 234.624 192.644 cv
cp
f
239.196 197.507 mo
239.349 197.061 239.424 196.415 239.424 195.568 cv
239.424 194.894 239.379 194.355 239.288 193.953 cv
239.117 193.204 238.797 192.829 238.328 192.829 cv
237.859 192.829 237.538 193.215 237.364 193.986 cv
237.273 194.397 237.229 194.938 237.229 195.61 cv
237.229 196.24 237.275 196.743 237.369 197.121 cv
237.545 197.825 237.876 198.178 238.361 198.178 cv
238.767 198.178 239.045 197.954 239.196 197.507 cv
cp
239.825 193.608 mo
240.104 194.15 240.243 194.772 240.243 195.474 cv
240.243 196.027 240.157 196.548 239.986 197.036 cv
239.664 197.956 239.105 198.415 238.312 198.415 cv
237.769 198.415 237.322 198.167 236.972 197.669 cv
236.597 197.139 236.409 196.418 236.409 195.508 cv
236.409 194.791 236.535 194.175 236.786 193.658 cv
237.125 192.956 237.646 192.604 238.349 192.604 cv
238.983 192.604 239.476 192.939 239.825 193.608 cv
cp
f
243.431 197.507 mo
243.583 197.061 243.658 196.415 243.658 195.568 cv
243.658 194.894 243.613 194.355 243.522 193.953 cv
243.352 193.204 243.031 192.829 242.563 192.829 cv
242.094 192.829 241.772 193.215 241.599 193.986 cv
241.508 194.397 241.463 194.938 241.463 195.61 cv
241.463 196.24 241.51 196.743 241.604 197.121 cv
241.779 197.825 242.11 198.178 242.596 198.178 cv
243.001 198.178 243.279 197.954 243.431 197.507 cv
cp
244.06 193.608 mo
244.338 194.15 244.478 194.772 244.478 195.474 cv
244.478 196.027 244.392 196.548 244.221 197.036 cv
243.898 197.956 243.34 198.415 242.546 198.415 cv
242.003 198.415 241.557 198.167 241.206 197.669 cv
240.831 197.139 240.644 196.418 240.644 195.508 cv
240.644 194.791 240.77 194.175 241.021 193.658 cv
241.359 192.956 241.88 192.604 242.583 192.604 cv
243.218 192.604 243.71 192.939 244.06 193.608 cv
cp
f
247.665 197.507 mo
247.817 197.061 247.893 196.415 247.893 195.568 cv
247.893 194.894 247.848 194.355 247.757 193.953 cv
247.586 193.204 247.266 192.829 246.797 192.829 cv
246.328 192.829 246.007 193.215 245.833 193.986 cv
245.742 194.397 245.697 194.938 245.697 195.61 cv
245.697 196.24 245.744 196.743 245.838 197.121 cv
246.014 197.825 246.345 198.178 246.83 198.178 cv
247.235 198.178 247.514 197.954 247.665 197.507 cv
cp
248.294 193.608 mo
248.572 194.15 248.712 194.772 248.712 195.474 cv
248.712 196.027 248.626 196.548 248.455 197.036 cv
248.133 197.956 247.574 198.415 246.78 198.415 cv
246.237 198.415 245.791 198.167 245.44 197.669 cv
245.065 197.139 244.878 196.418 244.878 195.508 cv
244.878 194.791 245.004 194.175 245.255 193.658 cv
245.594 192.956 246.114 192.604 246.817 192.604 cv
247.452 192.604 247.944 192.939 248.294 193.608 cv
cp
f
.944448 lw
[] 0 dsh
24.2861 188.303 mo
32.0742 188.303 li
@
11.4697 191.038 mo
11.6211 190.592 11.6973 189.945 11.6973 189.099 cv
11.6973 188.424 11.6519 187.886 11.5605 187.484 cv
11.3896 186.735 11.0698 186.36 10.6011 186.36 cv
10.1323 186.36 9.81152 186.746 9.6377 187.517 cv
9.54688 187.928 9.50098 188.469 9.50098 189.141 cv
9.50098 189.771 9.54785 190.274 9.6416 190.651 cv
9.81836 191.356 10.1489 191.708 10.6343 191.708 cv
11.0396 191.708 11.3179 191.485 11.4697 191.038 cv
cp
12.0981 187.139 mo
12.377 187.681 12.5161 188.303 12.5161 189.005 cv
12.5161 189.558 12.4307 190.079 12.2598 190.567 cv
11.937 191.486 11.3789 191.946 10.5845 191.946 cv
10.0415 191.946 9.59473 191.697 9.24463 191.2 cv
8.86963 190.67 8.68213 189.949 8.68213 189.039 cv
8.68213 188.322 8.80762 187.706 9.05859 187.189 cv
9.39795 186.486 9.91895 186.135 10.6221 186.135 cv
11.2559 186.135 11.748 186.47 12.0981 187.139 cv
cp
f
13.8892 191.827 mo
13.7979 191.734 13.7524 191.623 13.7524 191.492 cv
13.7524 191.361 13.7988 191.25 13.8911 191.159 cv
13.9834 191.067 14.0942 191.021 14.2241 191.021 cv
14.3535 191.021 14.4639 191.067 14.5547 191.159 cv
14.646 191.25 14.6914 191.361 14.6914 191.492 cv
14.6914 191.623 14.6465 191.734 14.5571 191.827 cv
14.4673 191.92 14.3564 191.967 14.2241 191.967 cv
14.0918 191.967 13.98 191.92 13.8892 191.827 cv
cp
f
17.8218 191.038 mo
17.9731 190.592 18.0493 189.945 18.0493 189.099 cv
18.0493 188.424 18.0039 187.886 17.9126 187.484 cv
17.7417 186.735 17.4219 186.36 16.9531 186.36 cv
16.4844 186.36 16.1636 186.746 15.9897 187.517 cv
15.8989 187.928 15.853 188.469 15.853 189.141 cv
15.853 189.771 15.8999 190.274 15.9937 190.651 cv
16.1704 191.356 16.501 191.708 16.9863 191.708 cv
17.3916 191.708 17.6699 191.485 17.8218 191.038 cv
cp
18.4502 187.139 mo
18.729 187.681 18.8682 188.303 18.8682 189.005 cv
18.8682 189.558 18.7827 190.079 18.6118 190.567 cv
18.2891 191.486 17.731 191.946 16.9365 191.946 cv
16.3936 191.946 15.9468 191.697 15.5967 191.2 cv
15.2217 190.67 15.0342 189.949 15.0342 189.039 cv
15.0342 188.322 15.1597 187.706 15.4106 187.189 cv
15.75 186.486 16.271 186.135 16.9741 186.135 cv
17.6079 186.135 18.1001 186.47 18.4502 187.139 cv
cp
f
11.4697 172.259 mo
11.6211 171.813 11.6973 171.166 11.6973 170.319 cv
11.6973 169.645 11.6519 169.107 11.5605 168.705 cv
11.3896 167.956 11.0698 167.581 10.6011 167.581 cv
10.1323 167.581 9.81152 167.966 9.6377 168.738 cv
9.54688 169.148 9.50098 169.689 9.50098 170.361 cv
9.50098 170.991 9.54785 171.495 9.6416 171.872 cv
9.81836 172.577 10.1489 172.929 10.6343 172.929 cv
11.0396 172.929 11.3179 172.706 11.4697 172.259 cv
cp
12.0981 168.36 mo
12.377 168.901 12.5161 169.523 12.5161 170.226 cv
12.5161 170.778 12.4307 171.299 12.2598 171.788 cv
11.937 172.707 11.3789 173.167 10.5845 173.167 cv
10.0415 173.167 9.59473 172.918 9.24463 172.421 cv
8.86963 171.891 8.68213 171.17 8.68213 170.259 cv
8.68213 169.542 8.80762 168.926 9.05859 168.41 cv
9.39795 167.707 9.91895 167.356 10.6221 167.356 cv
11.2559 167.356 11.748 167.69 12.0981 168.36 cv
cp
f
13.8892 173.048 mo
13.7979 172.955 13.7524 172.843 13.7524 172.712 cv
13.7524 172.582 13.7988 172.471 13.8911 172.379 cv
13.9834 172.288 14.0942 172.242 14.2241 172.242 cv
14.3535 172.242 14.4639 172.288 14.5547 172.379 cv
14.646 172.471 14.6914 172.582 14.6914 172.712 cv
14.6914 172.843 14.6465 172.955 14.5571 173.048 cv
14.4673 173.141 14.3564 173.188 14.2241 173.188 cv
14.0918 173.188 13.98 173.141 13.8892 173.048 cv
cp
f
17.4849 167.396 mo
17.4858 167.402 17.4868 167.418 17.4868 167.443 cv
17.4868 172.458 li
17.4868 172.672 17.5435 172.808 17.6572 172.867 cv
17.771 172.925 17.9829 172.959 18.293 172.971 cv
18.293 173.087 li
15.9565 173.087 li
15.9565 172.962 li
16.29 172.946 16.5078 172.9 16.6099 172.825 cv
16.7119 172.75 16.7632 172.587 16.7632 172.337 cv
16.7632 168.48 li
16.7632 168.347 16.7466 168.246 16.7134 168.176 cv
16.6802 168.107 16.6084 168.072 16.4985 168.072 cv
16.4268 168.072 16.3335 168.092 16.2192 168.133 cv
16.105 168.173 15.998 168.215 15.8989 168.26 cv
15.8989 168.143 li
17.4165 167.364 li
17.4663 167.364 li
17.4771 167.378 17.4834 167.389 17.4849 167.396 cv
cp
f
11.4697 153.716 mo
11.6211 153.27 11.6973 152.623 11.6973 151.776 cv
11.6973 151.102 11.6519 150.564 11.5605 150.162 cv
11.3896 149.413 11.0698 149.038 10.6011 149.038 cv
10.1323 149.038 9.81152 149.423 9.6377 150.195 cv
9.54688 150.605 9.50098 151.146 9.50098 151.818 cv
9.50098 152.448 9.54785 152.952 9.6416 153.329 cv
9.81836 154.034 10.1489 154.386 10.6343 154.386 cv
11.0396 154.386 11.3179 154.163 11.4697 153.716 cv
cp
12.0981 149.817 mo
12.377 150.358 12.5161 150.98 12.5161 151.683 cv
12.5161 152.235 12.4307 152.756 12.2598 153.245 cv
11.937 154.164 11.3789 154.624 10.5845 154.624 cv
10.0415 154.624 9.59473 154.375 9.24463 153.878 cv
8.86963 153.348 8.68213 152.627 8.68213 151.716 cv
8.68213 151 8.80762 150.383 9.05859 149.867 cv
9.39795 149.164 9.91895 148.813 10.6221 148.813 cv
11.2559 148.813 11.748 149.147 12.0981 149.817 cv
cp
f
13.8892 154.505 mo
13.7979 154.412 13.7524 154.3 13.7524 154.169 cv
13.7524 154.039 13.7988 153.928 13.8911 153.836 cv
13.9834 153.745 14.0942 153.699 14.2241 153.699 cv
14.3535 153.699 14.4639 153.745 14.5547 153.836 cv
14.646 153.928 14.6914 154.039 14.6914 154.169 cv
14.6914 154.3 14.6465 154.412 14.5571 154.505 cv
14.4673 154.598 14.3564 154.645 14.2241 154.645 cv
14.0918 154.645 13.98 154.598 13.8892 154.505 cv
cp
f
15.2124 154.449 mo
16.2212 153.394 16.9063 152.62 17.2676 152.126 cv
17.6289 151.632 17.8096 151.151 17.8096 150.682 cv
17.8096 150.271 17.6992 149.958 17.4785 149.744 cv
17.2578 149.528 16.9946 149.421 16.6885 149.421 cv
16.311 149.421 16.0049 149.56 15.7705 149.837 cv
15.6411 149.99 15.5166 150.224 15.3984 150.541 cv
15.2207 150.503 li
15.3584 149.865 15.5918 149.421 15.9214 149.173 cv
16.251 148.925 16.6045 148.8 16.9824 148.8 cv
17.4482 148.8 17.8252 148.948 18.1133 149.244 cv
18.4014 149.539 18.5454 149.9 18.5454 150.328 cv
18.5454 150.783 18.3896 151.221 18.0781 151.643 cv
17.7661 152.065 17.0894 152.815 16.0469 153.895 cv
17.9453 153.895 li
18.2104 153.895 18.3965 153.863 18.5039 153.799 cv
18.6113 153.735 18.7329 153.58 18.8682 153.333 cv
18.9756 153.383 li
18.5166 154.544 li
15.2124 154.544 li
15.2124 154.449 li
cp
f
11.4697 135.174 mo
11.6211 134.728 11.6973 134.081 11.6973 133.234 cv
11.6973 132.56 11.6519 132.022 11.5605 131.62 cv
11.3896 130.871 11.0698 130.496 10.6011 130.496 cv
10.1323 130.496 9.81152 130.881 9.6377 131.653 cv
9.54688 132.063 9.50098 132.604 9.50098 133.276 cv
9.50098 133.906 9.54785 134.41 9.6416 134.787 cv
9.81836 135.492 10.1489 135.844 10.6343 135.844 cv
11.0396 135.844 11.3179 135.621 11.4697 135.174 cv
cp
12.0981 131.275 mo
12.377 131.816 12.5161 132.438 12.5161 133.141 cv
12.5161 133.693 12.4307 134.214 12.2598 134.703 cv
11.937 135.622 11.3789 136.082 10.5845 136.082 cv
10.0415 136.082 9.59473 135.833 9.24463 135.336 cv
8.86963 134.806 8.68213 134.085 8.68213 133.174 cv
8.68213 132.458 8.80762 131.841 9.05859 131.325 cv
9.39795 130.622 9.91895 130.271 10.6221 130.271 cv
11.2559 130.271 11.748 130.605 12.0981 131.275 cv
cp
f
13.8892 135.963 mo
13.7979 135.87 13.7524 135.758 13.7524 135.627 cv
13.7524 135.497 13.7988 135.386 13.8911 135.294 cv
13.9834 135.203 14.0942 135.157 14.2241 135.157 cv
14.3535 135.157 14.4639 135.203 14.5547 135.294 cv
14.646 135.386 14.6914 135.497 14.6914 135.627 cv
14.6914 135.758 14.6465 135.87 14.5571 135.963 cv
14.4673 136.056 14.3564 136.103 14.2241 136.103 cv
14.0918 136.103 13.98 136.056 13.8892 135.963 cv
cp
f
16.2192 135.517 mo
16.4688 135.677 16.6802 135.757 16.854 135.757 cv
17.2402 135.757 17.5269 135.625 17.7144 135.362 cv
17.9019 135.1 17.9956 134.814 17.9956 134.505 cv
17.9956 134.208 17.9194 133.946 17.7681 133.721 cv
17.5117 133.34 17.0786 133.149 16.4692 133.149 cv
16.4336 133.149 16.3989 133.15 16.3662 133.151 cv
16.333 133.153 16.2944 133.156 16.2505 133.162 cv
16.2422 133.053 li
16.6831 132.893 17.0303 132.708 17.2842 132.5 cv
17.5376 132.291 17.6646 132.016 17.6646 131.675 cv
17.6646 131.372 17.5645 131.142 17.3647 130.983 cv
17.165 130.825 16.9365 130.746 16.6802 130.746 cv
16.377 130.746 16.1099 130.858 15.8779 131.083 cv
15.751 131.206 15.6147 131.394 15.4688 131.649 cv
15.3403 131.621 li
15.4507 131.198 15.6563 130.861 15.9565 130.608 cv
16.2573 130.355 16.6045 130.229 16.9985 130.229 cv
17.4204 130.229 17.7466 130.346 17.9771 130.579 cv
18.207 130.813 18.3223 131.082 18.3223 131.387 cv
18.3223 131.657 18.2271 131.904 18.0366 132.128 cv
17.9292 132.256 17.7622 132.399 17.5366 132.558 cv
17.8013 132.671 18.0132 132.805 18.1733 132.958 cv
18.4736 133.249 18.624 133.619 18.624 134.065 cv
18.624 134.593 18.418 135.058 18.0059 135.461 cv
17.5938 135.864 17.0068 136.065 16.2461 136.065 cv
15.9072 136.065 15.6694 136.014 15.5327 135.913 cv
15.3965 135.812 15.3281 135.703 15.3281 135.586 cv
15.3281 135.514 15.3506 135.444 15.3965 135.377 cv
15.4419 135.311 15.5156 135.278 15.6177 135.278 cv
15.769 135.278 15.9697 135.357 16.2192 135.517 cv
cp
f
11.4697 116.394 mo
11.6211 115.948 11.6973 115.301 11.6973 114.455 cv
11.6973 113.78 11.6519 113.242 11.5605 112.84 cv
11.3896 112.091 11.0698 111.716 10.6011 111.716 cv
10.1323 111.716 9.81152 112.102 9.6377 112.873 cv
9.54688 113.284 9.50098 113.825 9.50098 114.497 cv
9.50098 115.126 9.54785 115.63 9.6416 116.007 cv
9.81836 116.712 10.1489 117.064 10.6343 117.064 cv
11.0396 117.064 11.3179 116.841 11.4697 116.394 cv
cp
12.0981 112.495 mo
12.377 113.037 12.5161 113.659 12.5161 114.361 cv
12.5161 114.914 12.4307 115.435 12.2598 115.923 cv
11.937 116.842 11.3789 117.302 10.5845 117.302 cv
10.0415 117.302 9.59473 117.053 9.24463 116.556 cv
8.86963 116.026 8.68213 115.305 8.68213 114.395 cv
8.68213 113.678 8.80762 113.062 9.05859 112.545 cv
9.39795 111.842 9.91895 111.491 10.6221 111.491 cv
11.2559 111.491 11.748 111.826 12.0981 112.495 cv
cp
f
13.8892 117.183 mo
13.7979 117.09 13.7524 116.979 13.7524 116.848 cv
13.7524 116.717 13.7988 116.606 13.8911 116.515 cv
13.9834 116.423 14.0942 116.377 14.2241 116.377 cv
14.3535 116.377 14.4639 116.423 14.5547 116.515 cv
14.646 116.606 14.6914 116.717 14.6914 116.848 cv
14.6914 116.979 14.6465 117.09 14.5571 117.183 cv
14.4673 117.276 14.3564 117.323 14.2241 117.323 cv
14.0918 117.323 13.98 117.276 13.8892 117.183 cv
cp
f
17.4287 112.359 mo
15.3994 115.248 li
17.4287 115.248 li
17.4287 112.359 li
cp
17.7017 111.5 mo
18.0947 111.5 li
18.0947 115.248 li
18.959 115.248 li
18.959 115.802 li
18.0947 115.802 li
18.0947 117.223 li
17.437 117.223 li
17.437 115.802 li
15.0552 115.802 li
15.0552 115.248 li
17.7017 111.5 li
cp
f
11.4697 97.8516 mo
11.6211 97.4053 11.6973 96.7588 11.6973 95.9121 cv
11.6973 95.2378 11.6519 94.6997 11.5605 94.2974 cv
11.3896 93.5483 11.0698 93.1733 10.6011 93.1733 cv
10.1323 93.1733 9.81152 93.5591 9.6377 94.3306 cv
9.54688 94.7412 9.50098 95.2822 9.50098 95.9541 cv
9.50098 96.584 9.54785 97.0874 9.6416 97.4648 cv
9.81836 98.1694 10.1489 98.522 10.6343 98.522 cv
11.0396 98.522 11.3179 98.2983 11.4697 97.8516 cv
cp
12.0981 93.9526 mo
12.377 94.4941 12.5161 95.1162 12.5161 95.8184 cv
12.5161 96.3711 12.4307 96.8921 12.2598 97.3804 cv
11.937 98.2998 11.3789 98.7593 10.5845 98.7593 cv
10.0415 98.7593 9.59473 98.5107 9.24463 98.0137 cv
8.86963 97.4834 8.68213 96.7627 8.68213 95.8521 cv
8.68213 95.1353 8.80762 94.519 9.05859 94.0024 cv
9.39795 93.2998 9.91895 92.9487 10.6221 92.9487 cv
11.2559 92.9487 11.748 93.2832 12.0981 93.9526 cv
cp
f
13.8892 98.6406 mo
13.7979 98.5474 13.7524 98.436 13.7524 98.3052 cv
13.7524 98.1748 13.7988 98.0635 13.8911 97.9722 cv
13.9834 97.8804 14.0942 97.8345 14.2241 97.8345 cv
14.3535 97.8345 14.4639 97.8804 14.5547 97.9722 cv
14.646 98.0635 14.6914 98.1748 14.6914 98.3052 cv
14.6914 98.436 14.6465 98.5474 14.5571 98.6406 cv
14.4673 98.7334 14.3564 98.7803 14.2241 98.7803 cv
14.0918 98.7803 13.98 98.7334 13.8892 98.6406 cv
cp
f
16.2124 98.1865 mo
16.4678 98.3657 16.6646 98.4551 16.8027 98.4551 cv
17.1201 98.4551 17.3975 98.3145 17.6353 98.0322 cv
17.8726 97.7505 17.9912 97.4043 17.9912 96.9932 cv
17.9912 96.2739 17.6104 95.7559 16.8481 95.4395 cv
16.4258 95.2646 16.0327 95.1772 15.668 95.1772 cv
15.6074 95.1772 15.5693 95.1748 15.5542 95.1709 cv
15.5391 95.1665 15.5205 95.1523 15.498 95.127 cv
15.5039 95.105 15.5088 95.0864 15.5127 95.0708 cv
15.5171 95.0557 15.5215 95.041 15.5273 95.0273 cv
16.4292 93.0361 li
18.2026 93.0361 li
18.2905 93.0361 18.3589 93.021 18.4072 92.9902 cv
18.4551 92.96 18.5181 92.9028 18.5952 92.8193 cv
18.6611 92.8779 li
18.3428 93.6484 li
18.3315 93.6733 18.3013 93.6895 18.252 93.6963 cv
18.2021 93.7031 18.1479 93.7065 18.0903 93.7065 cv
16.4878 93.7065 li
16.1357 94.4355 li
16.5884 94.5137 16.9199 94.5869 17.1294 94.6563 cv
17.4746 94.7729 17.7627 94.9453 17.9946 95.1729 cv
18.1934 95.3701 18.3438 95.5918 18.4458 95.8374 cv
18.5483 96.083 18.5991 96.3433 18.5991 96.6182 cv
18.5991 97.2319 18.3818 97.7446 17.9473 98.1553 cv
17.5122 98.5664 16.9624 98.772 16.2969 98.772 cv
16.0264 98.772 15.8086 98.7456 15.6431 98.6929 cv
15.3667 98.6064 15.229 98.4526 15.229 98.2305 cv
15.229 98.147 15.2583 98.0742 15.3179 98.0117 cv
15.377 97.9492 15.4688 97.918 15.5933 97.918 cv
15.7505 97.918 15.957 98.0073 16.2124 98.1865 cv
cp
f
11.4697 79.3091 mo
11.6211 78.8628 11.6973 78.2163 11.6973 77.3696 cv
11.6973 76.6953 11.6519 76.1572 11.5605 75.7549 cv
11.3896 75.0059 11.0698 74.6309 10.6011 74.6309 cv
10.1323 74.6309 9.81152 75.0166 9.6377 75.7881 cv
9.54688 76.1987 9.50098 76.7397 9.50098 77.4116 cv
9.50098 78.0415 9.54785 78.5449 9.6416 78.9224 cv
9.81836 79.627 10.1489 79.9795 10.6343 79.9795 cv
11.0396 79.9795 11.3179 79.7559 11.4697 79.3091 cv
cp
12.0981 75.4102 mo
12.377 75.9517 12.5161 76.5737 12.5161 77.2759 cv
12.5161 77.8286 12.4307 78.3496 12.2598 78.8379 cv
11.937 79.7573 11.3789 80.2168 10.5845 80.2168 cv
10.0415 80.2168 9.59473 79.9683 9.24463 79.4712 cv
8.86963 78.9409 8.68213 78.2202 8.68213 77.3096 cv
8.68213 76.5928 8.80762 75.9766 9.05859 75.46 cv
9.39795 74.7573 9.91895 74.4063 10.6221 74.4063 cv
11.2559 74.4063 11.748 74.7407 12.0981 75.4102 cv
cp
f
13.8892 80.0981 mo
13.7979 80.0049 13.7524 79.8936 13.7524 79.7627 cv
13.7524 79.6323 13.7988 79.521 13.8911 79.4297 cv
13.9834 79.3379 14.0942 79.292 14.2241 79.292 cv
14.3535 79.292 14.4639 79.3379 14.5547 79.4297 cv
14.646 79.521 14.6914 79.6323 14.6914 79.7627 cv
14.6914 79.8936 14.6465 80.0049 14.5571 80.0981 cv
14.4673 80.1909 14.3564 80.2378 14.2241 80.2378 cv
14.0918 80.2378 13.98 80.1909 13.8892 80.0981 cv
cp
f
17.9912 77.5801 mo
17.7983 77.1025 17.4702 76.8638 17.0068 76.8638 cv
16.5796 76.8638 16.2959 76.9917 16.1553 77.2471 cv
16.0723 77.397 16.0313 77.647 16.0313 77.9966 cv
16.0313 78.4492 16.127 78.8921 16.3184 79.3257 cv
16.5103 79.7588 16.8125 79.9751 17.2261 79.9751 cv
17.5542 79.9751 17.793 79.8345 17.9419 79.5522 cv
18.0903 79.2705 18.165 78.9409 18.165 78.563 cv
18.165 78.1938 18.1069 77.8662 17.9912 77.5801 cv
cp
18.436 79.6172 mo
18.1118 80.0254 17.6909 80.2295 17.1724 80.2295 cv
16.687 80.2295 16.2456 80 15.8472 79.542 cv
15.4487 79.084 15.2495 78.4741 15.2495 77.7134 cv
15.2495 76.7334 15.6353 75.8916 16.4072 75.1895 cv
17.0967 74.6006 17.8716 74.3062 18.7314 74.3062 cv
18.7524 74.4438 li
18.4077 74.5073 18.1104 74.5942 17.8608 74.7041 cv
17.6113 74.8135 17.3887 74.9673 17.1934 75.1641 cv
16.9917 75.3643 16.8032 75.6182 16.6265 75.9268 cv
16.4502 76.2349 16.3286 76.54 16.2627 76.8428 cv
16.4336 76.7373 16.5811 76.6597 16.7051 76.6099 cv
16.9258 76.521 17.1475 76.4766 17.3711 76.4766 cv
17.8096 76.4766 18.1772 76.6289 18.4751 76.9346 cv
18.7729 77.2402 18.9219 77.6758 18.9219 78.2427 cv
18.9219 78.7505 18.7598 79.209 18.436 79.6172 cv
cp
f
11.4697 60.7671 mo
11.6211 60.3208 11.6973 59.6743 11.6973 58.8276 cv
11.6973 58.1533 11.6519 57.6152 11.5605 57.2129 cv
11.3896 56.4639 11.0698 56.0889 10.6011 56.0889 cv
10.1323 56.0889 9.81152 56.4746 9.6377 57.2461 cv
9.54688 57.6567 9.50098 58.1978 9.50098 58.8696 cv
9.50098 59.4995 9.54785 60.0029 9.6416 60.3804 cv
9.81836 61.085 10.1489 61.4375 10.6343 61.4375 cv
11.0396 61.4375 11.3179 61.2139 11.4697 60.7671 cv
cp
12.0981 56.8682 mo
12.377 57.4097 12.5161 58.0317 12.5161 58.7339 cv
12.5161 59.2866 12.4307 59.8076 12.2598 60.2959 cv
11.937 61.2153 11.3789 61.6748 10.5845 61.6748 cv
10.0415 61.6748 9.59473 61.4263 9.24463 60.9292 cv
8.86963 60.3989 8.68213 59.6782 8.68213 58.7676 cv
8.68213 58.0508 8.80762 57.4346 9.05859 56.918 cv
9.39795 56.2153 9.91895 55.8643 10.6221 55.8643 cv
11.2559 55.8643 11.748 56.1987 12.0981 56.8682 cv
cp
f
13.8892 61.5562 mo
13.7979 61.4629 13.7524 61.3516 13.7524 61.2207 cv
13.7524 61.0903 13.7988 60.979 13.8911 60.8877 cv
13.9834 60.7959 14.0942 60.75 14.2241 60.75 cv
14.3535 60.75 14.4639 60.7959 14.5547 60.8877 cv
14.646 60.979 14.6914 61.0903 14.6914 61.2207 cv
14.6914 61.3516 14.6465 61.4629 14.5571 61.5562 cv
14.4673 61.6489 14.3564 61.6958 14.2241 61.6958 cv
14.0918 61.6958 13.98 61.6489 13.8892 61.5562 cv
cp
f
18.7607 55.9517 mo
18.7607 56.0889 li
16.9658 61.6748 li
16.4224 61.6748 li
18.0942 56.5806 li
16.2915 56.5806 li
16.0239 56.5806 15.8315 56.625 15.7144 56.7139 cv
15.5977 56.8027 15.4492 56.9888 15.27 57.272 cv
15.1255 57.2056 li
15.3047 56.7612 15.4155 56.4868 15.4585 56.3828 cv
15.501 56.2788 15.5566 56.1348 15.626 55.9517 cv
18.7607 55.9517 li
cp
f
11.4697 41.9868 mo
11.6211 41.5405 11.6973 40.894 11.6973 40.0474 cv
11.6973 39.373 11.6519 38.835 11.5605 38.4326 cv
11.3896 37.6836 11.0698 37.3086 10.6011 37.3086 cv
10.1323 37.3086 9.81152 37.6943 9.6377 38.4658 cv
9.54688 38.8765 9.50098 39.4175 9.50098 40.0894 cv
9.50098 40.7192 9.54785 41.2227 9.6416 41.6001 cv
9.81836 42.3047 10.1489 42.6572 10.6343 42.6572 cv
11.0396 42.6572 11.3179 42.4336 11.4697 41.9868 cv
cp
12.0981 38.0879 mo
12.377 38.6294 12.5161 39.2515 12.5161 39.9536 cv
12.5161 40.5063 12.4307 41.0273 12.2598 41.5156 cv
11.937 42.4351 11.3789 42.8945 10.5845 42.8945 cv
10.0415 42.8945 9.59473 42.646 9.24463 42.1489 cv
8.86963 41.6187 8.68213 40.8979 8.68213 39.9873 cv
8.68213 39.2705 8.80762 38.6543 9.05859 38.1377 cv
9.39795 37.4351 9.91895 37.084 10.6221 37.084 cv
11.2559 37.084 11.748 37.4185 12.0981 38.0879 cv
cp
f
13.8892 42.7759 mo
13.7979 42.6826 13.7524 42.5713 13.7524 42.4404 cv
13.7524 42.3101 13.7988 42.1987 13.8911 42.1074 cv
13.9834 42.0156 14.0942 41.9697 14.2241 41.9697 cv
14.3535 41.9697 14.4639 42.0156 14.5547 42.1074 cv
14.646 42.1987 14.6914 42.3101 14.6914 42.4404 cv
14.6914 42.5713 14.6465 42.6826 14.5571 42.7759 cv
14.4673 42.8687 14.3564 42.9155 14.2241 42.9155 cv
14.0918 42.9155 13.98 42.8687 13.8892 42.7759 cv
cp
f
17.6812 39.0308 mo
17.8521 38.8174 17.9375 38.5591 17.9375 38.2568 cv
17.9375 37.9937 17.8569 37.77 17.6958 37.5854 cv
17.5342 37.4009 17.2896 37.3086 16.9614 37.3086 cv
16.708 37.3086 16.4985 37.3892 16.333 37.5503 cv
16.1675 37.7109 16.085 37.9063 16.085 38.1362 cv
16.085 38.397 16.1821 38.6392 16.3765 38.8623 cv
16.5708 39.0854 16.8267 39.2954 17.1436 39.4922 cv
17.4028 39.3091 17.582 39.1553 17.6812 39.0308 cv
cp
17.8096 42.4033 mo
17.9722 42.2261 18.0532 42.0044 18.0532 41.7378 cv
18.0532 41.436 17.9673 41.1914 17.7949 41.0039 cv
17.6226 40.8169 17.269 40.5332 16.7339 40.1533 cv
16.4971 40.3032 16.3247 40.4976 16.2173 40.7358 cv
16.1099 40.9741 16.0557 41.2046 16.0557 41.4263 cv
16.0557 41.8062 16.1528 42.1084 16.3477 42.333 cv
16.542 42.5571 16.7891 42.6694 17.0898 42.6694 cv
17.4067 42.6694 17.6465 42.5811 17.8096 42.4033 cv
cp
15.7622 39.2705 mo
15.5581 39.0039 15.4561 38.71 15.4561 38.3877 cv
15.4561 38.021 15.6069 37.71 15.9092 37.4546 cv
16.2109 37.1992 16.603 37.0713 17.0854 37.0713 cv
17.5293 37.0713 17.8823 37.1924 18.1445 37.4341 cv
18.4063 37.6753 18.5371 37.9561 18.5371 38.2754 cv
18.5371 38.6006 18.4033 38.8921 18.1362 39.1504 cv
17.9814 39.2974 17.7319 39.4668 17.3877 39.6587 cv
17.856 40.0083 18.1919 40.313 18.3945 40.5728 cv
18.5972 40.8325 18.6982 41.1387 18.6982 41.4912 cv
18.6982 41.8911 18.5488 42.2271 18.25 42.499 cv
17.9507 42.771 17.5503 42.9072 17.0483 42.9072 cv
16.5991 42.9072 16.2139 42.7813 15.8926 42.5303 cv
15.5713 42.2788 15.4106 41.9478 15.4106 41.5366 cv
15.4106 41.1841 15.5225 40.873 15.7456 40.6035 cv
15.8916 40.4287 16.1455 40.2192 16.5068 39.9746 cv
16.1426 39.6802 15.8945 39.4458 15.7622 39.2705 cv
cp
f
11.4697 23.4448 mo
11.6211 22.9985 11.6973 22.3521 11.6973 21.5054 cv
11.6973 20.8311 11.6519 20.293 11.5605 19.8906 cv
11.3896 19.1416 11.0698 18.7666 10.6011 18.7666 cv
10.1323 18.7666 9.81152 19.1523 9.6377 19.9238 cv
9.54688 20.3345 9.50098 20.8755 9.50098 21.5474 cv
9.50098 22.1772 9.54785 22.6807 9.6416 23.0581 cv
9.81836 23.7627 10.1489 24.1152 10.6343 24.1152 cv
11.0396 24.1152 11.3179 23.8916 11.4697 23.4448 cv
cp
12.0981 19.5459 mo
12.377 20.0874 12.5161 20.7095 12.5161 21.4116 cv
12.5161 21.9644 12.4307 22.4854 12.2598 22.9736 cv
11.937 23.8931 11.3789 24.3525 10.5845 24.3525 cv
10.0415 24.3525 9.59473 24.104 9.24463 23.6069 cv
8.86963 23.0767 8.68213 22.356 8.68213 21.4453 cv
8.68213 20.7285 8.80762 20.1123 9.05859 19.5957 cv
9.39795 18.8931 9.91895 18.542 10.6221 18.542 cv
11.2559 18.542 11.748 18.8765 12.0981 19.5459 cv
cp
f
13.8892 24.2339 mo
13.7979 24.1406 13.7524 24.0293 13.7524 23.8984 cv
13.7524 23.7681 13.7988 23.6567 13.8911 23.5654 cv
13.9834 23.4736 14.0942 23.4277 14.2241 23.4277 cv
14.3535 23.4277 14.4639 23.4736 14.5547 23.5654 cv
14.646 23.6567 14.6914 23.7681 14.6914 23.8984 cv
14.6914 24.0293 14.6465 24.1406 14.5571 24.2339 cv
14.4673 24.3267 14.3564 24.3735 14.2241 24.3735 cv
14.0918 24.3735 13.98 24.3267 13.8892 24.2339 cv
cp
f
17.6577 21.7285 mo
17.8579 21.623 17.9717 21.5342 17.9995 21.4619 cv
18.0103 21.4341 18.02 21.3306 18.0283 21.1514 cv
18.0366 20.9722 18.041 20.8271 18.041 20.7163 cv
18.041 20.1387 17.9443 19.6694 17.751 19.3081 cv
17.5576 18.9473 17.2744 18.7666 16.9014 18.7666 cv
16.6304 18.7666 16.4116 18.8906 16.2446 19.1377 cv
16.0771 19.3848 15.9937 19.7539 15.9937 20.2456 cv
15.9937 20.6509 16.0718 21.0259 16.228 21.3701 cv
16.3843 21.7144 16.6665 21.8867 17.0752 21.8867 cv
17.2632 21.8867 17.457 21.834 17.6577 21.7285 cv
cp
18.3633 19.2603 mo
18.6943 19.7476 18.8599 20.2915 18.8599 20.8911 cv
18.8599 21.3135 18.7813 21.7422 18.624 22.1782 cv
18.4668 22.6143 18.2378 23.0029 17.9375 23.3447 cv
17.5874 23.7388 17.1436 24.0317 16.606 24.2236 cv
16.3052 24.3315 15.9263 24.415 15.4688 24.4731 cv
15.4272 24.3066 li
15.7144 24.2402 15.9531 24.1694 16.144 24.0942 cv
16.4863 23.9585 16.7607 23.7915 16.9683 23.5947 cv
17.2607 23.314 17.4946 23.001 17.6699 22.6553 cv
17.8457 22.3096 17.9551 22.02 17.9995 21.7866 cv
17.8545 21.894 li
17.6504 22.0483 17.4102 22.1543 17.1338 22.2119 cv
16.9902 22.2451 16.8594 22.2617 16.7407 22.2617 cv
16.271 22.2617 15.8989 22.0947 15.6245 21.7603 cv
15.3496 21.4258 15.2124 21.0273 15.2124 20.564 cv
15.2124 19.9731 15.3755 19.4863 15.7021 19.1035 cv
16.0288 18.7207 16.4473 18.5293 16.9575 18.5293 cv
17.564 18.5293 18.0327 18.7729 18.3633 19.2603 cv
cp
f
11.1328 .0395508 mo
11.1338 .0463867 11.1348 .0625 11.1348 .0874023 cv
11.1348 5.10254 li
11.1348 5.31641 11.1914 5.45215 11.3052 5.51074 cv
11.4189 5.56885 11.6309 5.60352 11.9409 5.61475 cv
11.9409 5.73145 li
9.60449 5.73145 li
9.60449 5.60645 li
9.93799 5.58984 10.1558 5.54395 10.2578 5.46924 cv
10.3599 5.39404 10.4111 5.23145 10.4111 4.98145 cv
10.4111 1.12451 li
10.4111 .991211 10.3945 .890137 10.3613 .820313 cv
10.3281 .750977 10.2563 .716309 10.1465 .716309 cv
10.0747 .716309 9.98145 .736328 9.86719 .776855 cv
9.75293 .816895 9.646 .859375 9.54688 .903809 cv
9.54688 .787109 li
11.0645 .00830078 li
11.1143 .00830078 li
11.125 .0219727 11.1313 .0327148 11.1328 .0395508 cv
cp
f
13.8892 5.69189 mo
13.7979 5.59863 13.7524 5.4873 13.7524 5.35645 cv
13.7524 5.22607 13.7988 5.11475 13.8911 5.02344 cv
13.9834 4.93164 14.0942 4.88574 14.2241 4.88574 cv
14.3535 4.88574 14.4639 4.93164 14.5547 5.02344 cv
14.646 5.11475 14.6914 5.22607 14.6914 5.35645 cv
14.6914 5.4873 14.6465 5.59863 14.5571 5.69189 cv
14.4673 5.78467 14.3564 5.83154 14.2241 5.83154 cv
14.0918 5.83154 13.98 5.78467 13.8892 5.69189 cv
cp
f
17.8218 4.90283 mo
17.9731 4.45654 18.0493 3.81006 18.0493 2.96338 cv
18.0493 2.28906 18.0039 1.75098 17.9126 1.34863 cv
17.7417 .599609 17.4219 .224609 16.9531 .224609 cv
16.4844 .224609 16.1636 .610352 15.9897 1.38184 cv
15.8989 1.79248 15.853 2.3335 15.853 3.00537 cv
15.853 3.63525 15.8999 4.13867 15.9937 4.51611 cv
16.1704 5.2207 16.501 5.57324 16.9863 5.57324 cv
17.3916 5.57324 17.6699 5.34961 17.8218 4.90283 cv
cp
18.4502 1.00391 mo
18.729 1.54541 18.8682 2.16748 18.8682 2.86963 cv
18.8682 3.42236 18.7827 3.94336 18.6118 4.43164 cv
18.2891 5.35107 17.731 5.81055 16.9365 5.81055 cv
16.3936 5.81055 15.9468 5.56201 15.5967 5.06494 cv
15.2217 4.53467 15.0342 3.81396 15.0342 2.90332 cv
15.0342 2.18652 15.1597 1.57031 15.4106 1.05371 cv
15.75 .351074 16.271 0 16.9741 0 cv
17.6079 0 18.1001 .334473 18.4502 1.00391 cv
cp
f
.377779 lw
24.2861 188.303 mo
31.1304 188.303 li
33.0186 188.065 li
35.1431 188.065 li
37.0313 187.828 li
39.8628 187.59 li
42.9316 187.353 li
46 186.877 li
46.4722 186.877 li
46.707 186.639 li
50.7197 185.688 li
54.7324 184.5 li
58.5088 183.311 li
61.8125 182.123 li
64.6455 180.696 li
67.4771 178.794 li
70.0737 177.368 li
72.4336 175.704 li
74.5576 173.802 li
76.4458 172.138 li
78.334 170.474 li
80.2222 168.572 li
81.8745 166.909 li
83.5264 165.245 li
85.1782 163.343 li
86.5942 161.679 li
87.7749 160.015 li
89.1909 158.35 li
90.6069 156.686 li
91.7876 155.022 li
92.9673 153.12 li
94.147 151.456 li
95.0918 150.03 li
96.2715 148.366 li
97.2148 146.702 li
98.1597 145.038 li
99.104 143.612 li
100.048 142.185 li
100.992 140.521 li
101.936 139.095 li
102.879 137.669 li
103.588 136.243 li
104.533 134.815 li
105.949 132.201 li
107.364 129.586 li
108.78 126.972 li
109.489 125.782 li
110.196 124.356 li
110.905 123.168 li
112.085 121.028 li
113.265 118.651 li
114.681 116.274 li
115.625 114.373 li
116.805 112.233 li
117.985 110.093 li
120.582 104.864 li
123.413 99.6338 li
126.01 94.4038 li
127.662 91.7886 li
129.078 88.9365 li
130.494 86.3213 li
133.562 81.0913 li
136.395 75.8618 li
139.463 70.6309 li
141.823 67.0664 li
144.184 63.2627 li
146.543 59.6958 li
148.432 57.0815 li
150.319 54.4663 li
152.208 51.6138 li
155.04 48.0483 li
158.108 44.4824 li
161.177 40.9165 li
163.537 38.5391 li
165.897 36.1616 li
168.257 34.0229 li
172.27 30.4565 li
176.518 27.1284 li
180.767 24.0386 li
183.835 22.1367 li
186.666 20.4727 li
189.971 19.0464 li
193.983 17.1445 li
198.231 15.2427 li
202.48 13.5791 li
205.548 12.6274 li
208.616 11.6772 li
211.449 10.9634 li
213.809 10.25 li
216.169 9.77539 li
218.529 9.2998 li
220.418 8.82373 li
222.306 8.58691 li
224.194 8.11133 li
227.262 7.63574 li
230.094 7.16016 li
233.163 6.68506 li
235.522 6.44727 li
237.883 6.20947 li
240.243 5.97168 li
244.491 5.49609 li
248.503 5.02051 li
252.752 4.78271 li
255.82 4.54541 li
258.889 4.30762 li
261.957 4.06982 li
.66 0 1 0 cmyk
@
[3.77779 1.88889 1.88889 1.88889 ] 0 dsh
24.2861 188.303 mo
31.1304 188.303 li
32.7822 188.065 li
34.1982 188.065 li
35.6143 187.59 li
37.0313 187.353 li
39.1543 186.639 li
41.5151 185.688 li
43.6392 184.975 li
46 184.025 li
46.2349 184.025 li
46.4722 183.787 li
46.707 183.787 li
49.7764 181.647 li
52.8442 179.27 li
55.6768 176.893 li
58.5088 174.516 li
61.1055 171.9 li
63.4648 169.048 li
65.5889 166.195 li
67.4771 163.105 li
69.3652 160.252 li
71.2539 157.637 li
72.9058 154.785 li
74.5576 151.932 li
75.9736 149.317 li
77.3906 146.702 li
78.8066 144.087 li
80.2222 141.235 li
81.4019 138.857 li
82.583 136.479 li
83.9985 133.865 li
85.1782 131.489 li
86.123 129.348 li
87.0664 126.972 li
88.2476 124.832 li
89.1909 122.692 li
90.1348 120.791 li
91.0791 118.651 li
92.0239 116.749 li
92.9673 114.609 li
93.6748 112.945 li
94.6191 111.044 li
95.3276 109.38 li
96.2715 107.478 li
96.98 105.814 li
97.6875 104.388 li
98.3955 102.724 li
99.104 101.06 li
99.8115 99.6338 li
100.52 98.2065 li
101.228 96.7808 li
101.936 95.3545 li
102.645 94.166 li
103.116 92.7393 li
103.824 91.5508 li
104.533 90.1245 li
105.476 87.9849 li
106.656 85.6074 li
107.837 83.4692 li
108.78 81.0913 li
109.489 80.1401 li
109.961 79.1895 li
110.432 78.2383 li
110.905 77.2881 li
111.848 75.624 li
112.793 73.96 li
113.736 72.0581 li
114.681 70.394 li
115.389 68.9673 li
116.097 67.541 li
117.042 66.1147 li
117.985 64.689 li
119.873 61.3608 li
121.998 58.27 li
123.886 54.9419 li
126.01 51.8521 li
127.189 50.188 li
128.37 48.7607 li
129.314 47.0967 li
130.494 45.6709 li
132.618 43.0552 li
134.979 40.4409 li
137.104 37.8257 li
139.463 35.4492 li
141.351 33.7852 li
143.003 32.1201 li
144.655 30.4565 li
146.543 29.0303 li
147.96 27.8418 li
149.376 26.6528 li
150.792 25.7021 li
152.208 24.5142 li
154.332 23.0879 li
156.692 21.6606 li
158.816 20.2349 li
161.177 19.0464 li
162.828 18.0952 li
164.717 17.1445 li
166.368 16.4312 li
168.257 15.7178 li
171.325 14.5293 li
174.394 13.3413 li
177.697 12.3906 li
180.767 11.2017 li
183.126 10.7256 li
185.25 10.0132 li
187.611 9.5376 li
189.971 9.06201 li
193.039 8.34912 li
196.107 7.87354 li
199.412 7.39795 li
202.48 6.92334 li
204.84 6.44727 li
206.964 6.20947 li
209.324 5.97168 li
211.449 5.73389 li
213.337 5.49609 li
214.989 5.2583 li
216.877 5.2583 li
218.529 5.02051 li
219.945 5.02051 li
221.361 4.78271 li
222.777 4.78271 li
224.194 4.54541 li
226.554 4.54541 li
228.678 4.30762 li
231.038 4.06982 li
233.163 4.06982 li
235.051 3.83203 li
238.354 3.83203 li
240.243 3.59424 li
0 .26 1 .2 cmyk
@
[] 0 dsh
24.2861 188.303 mo
31.1304 188.303 li
32.7822 188.065 li
34.1982 187.828 li
35.6143 187.353 li
37.0313 186.877 li
39.1543 185.925 li
41.5151 184.737 li
43.6392 183.549 li
46 182.361 li
46 182.123 li
46.2349 181.885 li
46.4722 181.885 li
46.707 181.647 li
49.7764 178.557 li
52.8442 175.228 li
55.6768 171.9 li
58.5088 168.572 li
61.3403 165.245 li
63.4648 161.679 li
65.5889 157.875 li
67.4771 154.072 li
69.3652 150.506 li
71.2539 147.178 li
72.9058 143.612 li
74.5576 140.283 li
75.9736 137.193 li
77.3906 133.865 li
78.8066 130.775 li
80.2222 127.684 li
81.4019 124.832 li
82.583 122.216 li
83.7627 119.364 li
85.1782 116.512 li
86.123 114.135 li
87.0664 111.757 li
88.2476 109.38 li
89.1909 107.003 li
90.1348 104.864 li
91.0791 102.961 li
92.0239 100.822 li
92.9673 98.6821 li
93.6748 96.7808 li
94.6191 94.8789 li
95.3276 93.2148 li
96.2715 91.313 li
96.98 89.6489 li
97.6875 88.2231 li
98.3955 86.5591 li
99.104 84.895 li
99.8115 83.4692 li
100.52 82.042 li
101.228 80.8535 li
101.936 79.4272 li
102.645 78.0015 li
103.116 76.812 li
103.824 75.624 li
104.533 74.4346 li
105.476 72.2959 li
106.656 70.1563 li
107.837 68.0166 li
108.78 66.1147 li
109.489 65.1646 li
109.961 64.2129 li
110.432 63.2627 li
110.905 62.5493 li
111.848 60.8853 li
112.793 59.459 li
113.736 57.7954 li
114.681 56.3682 li
115.389 55.1797 li
116.097 53.7534 li
117.042 52.5645 li
117.985 51.376 li
119.873 48.5239 li
121.998 45.9087 li
123.886 43.0552 li
126.01 40.4409 li
127.189 39.0151 li
128.37 37.8257 li
129.314 36.6372 li
130.494 35.4492 li
132.854 33.3096 li
134.979 31.1699 li
137.339 29.0303 li
139.463 27.1284 li
141.351 25.7021 li
143.003 24.5142 li
144.655 23.3257 li
146.543 22.1367 li
147.96 21.1851 li
149.376 20.4727 li
150.792 19.521 li
152.208 18.8086 li
154.332 17.6206 li
156.692 16.6689 li
159.053 15.481 li
161.177 14.5293 li
162.828 13.8169 li
164.717 13.103 li
166.368 12.6274 li
168.257 12.1528 li
171.325 11.2017 li
174.394 10.25 li
177.697 9.5376 li
180.767 8.82373 li
183.126 8.34912 li
185.25 7.87354 li
187.611 7.39795 li
189.971 7.16016 li
193.039 6.68506 li
196.107 6.20947 li
199.412 5.97168 li
202.48 5.49609 li
204.84 5.2583 li
206.964 5.02051 li
209.324 4.78271 li
211.449 4.78271 li
213.337 4.54541 li
214.989 4.54541 li
216.877 4.30762 li
218.529 4.30762 li
219.945 4.06982 li
222.777 4.06982 li
224.194 3.83203 li
.5 .85 0 0 cmyk
@
.944448 lw
24.0498 188.303 mo
24.521 188.303 li
0 0 0 1 cmyk
@
24.7583 188.303 mo
25.2295 188.303 li
@
.377779 lw
[2.83335 2.83335 ] 0 dsh
24.9937 188.303 mo
26.4106 188.065 li
28.0625 187.59 li
29.7144 187.353 li
31.1304 186.877 li
33.0186 186.164 li
34.4346 184.975 li
35.8506 183.311 li
37.0313 181.647 li
39.1543 177.844 li
41.5151 174.04 li
43.8755 170.236 li
46 166.195 li
46 165.958 li
46.2349 165.482 li
46.4722 165.245 li
46.707 164.769 li
49.54 157.637 li
52.6079 150.268 li
55.6768 142.898 li
58.5088 135.767 li
60.8682 129.824 li
63.2295 123.88 li
65.353 117.938 li
67.4771 111.995 li
69.3652 107.716 li
71.0176 103.2 li
72.6694 98.6821 li
74.5576 94.166 li
75.9736 90.8384 li
77.3906 87.5093 li
78.8066 84.1816 li
80.2222 80.8535 li
81.4019 78.2383 li
82.583 75.3862 li
83.7627 72.7705 li
85.1782 70.1563 li
86.123 68.2544 li
87.0664 66.1147 li
88.2476 63.9751 li
89.1909 62.0732 li
90.1348 60.4097 li
91.0791 58.7456 li
92.0239 57.0815 li
92.9673 55.4175 li
93.6748 53.9917 li
94.6191 52.5645 li
95.3276 51.1382 li
96.2715 49.7124 li
96.98 48.5239 li
97.6875 47.5728 li
98.3955 46.3843 li
99.104 45.1958 li
99.8115 44.2446 li
100.52 43.2935 li
101.228 42.3428 li
101.936 41.3916 li
102.645 40.4409 li
103.116 39.7285 li
103.824 38.7769 li
104.533 38.0635 li
105.476 36.8755 li
106.656 35.4492 li
107.837 34.2612 li
108.78 32.834 li
109.489 32.3579 li
109.961 31.8833 li
110.432 31.1699 li
110.905 30.6943 li
111.848 29.7437 li
1 .32 0 .37 cmyk
@
111.848 29.7437 mo
112.793 29.0303 li
113.736 28.0796 li
114.681 27.3662 li
115.389 26.6528 li
116.097 25.9399 li
117.042 25.2266 li
117.985 24.5142 li
119.873 23.0879 li
121.998 21.6606 li
124.122 20.2349 li
126.01 18.8086 li
127.189 18.333 li
128.37 17.6206 li
129.314 16.9067 li
130.494 16.4312 li
132.854 15.481 li
134.979 14.5293 li
137.339 13.5791 li
139.463 12.6274 li
141.351 11.915 li
143.003 11.4395 li
144.655 10.9634 li
146.543 10.25 li
147.96 10.0132 li
149.376 9.5376 li
150.792 9.2998 li
152.208 8.82373 li
154.568 8.34912 li
156.692 7.87354 li
159.053 7.63574 li
161.177 7.16016 li
163.064 6.92334 li
164.717 6.68506 li
166.368 6.44727 li
168.257 6.20947 li
171.325 5.73389 li
174.63 5.49609 li
177.697 5.02051 li
180.767 4.78271 li
183.126 4.54541 li
185.25 4.54541 li
187.611 4.30762 li
189.971 4.06982 li
193.039 4.06982 li
196.107 3.83203 li
199.412 3.59424 li
202.48 3.35645 li
@
.944448 lw
[] 0 dsh
24.0498 188.303 mo
24.521 188.303 li
0 0 0 1 cmyk
@
24.7583 188.303 mo
25.2295 188.303 li
@
.377779 lw
[.944448 .944448 ] 0 dsh
24.9937 188.303 mo
26.4106 188.065 li
28.0625 188.065 li
29.7144 187.828 li
31.1304 187.59 li
32.7822 187.353 li
34.1982 186.877 li
35.6143 186.164 li
37.0313 185.213 li
39.1543 183.073 li
41.5151 181.171 li
43.8755 179.032 li
46 176.655 li
46 176.417 li
46.2349 176.18 li
46.4722 175.942 li
46.707 175.704 li
49.7764 170.712 li
52.8442 165.72 li
55.6768 160.489 li
58.5088 155.26 li
61.1055 150.268 li
63.4648 145.276 li
65.5889 140.046 li
67.4771 135.053 li
69.3652 130.775 li
71.0176 126.496 li
72.9058 122.216 li
74.5576 117.938 li
75.9736 114.609 li
77.3906 111.044 li
78.8066 107.478 li
80.2222 104.15 li
81.4019 101.298 li
82.583 98.2065 li
83.7627 95.3545 li
85.1782 92.5024 li
86.123 90.1245 li
87.0664 87.7471 li
88.2476 85.3706 li
89.1909 82.9932 li
90.1348 81.0913 li
91.0791 78.9517 li
92.0239 77.0498 li
92.9673 75.1479 li
93.6748 73.4844 li
94.6191 71.8203 li
95.3276 70.1563 li
96.2715 68.4922 li
97.6875 65.877 li
99.104 63.0249 li
100.52 60.4097 li
101.936 57.7954 li
102.645 56.8438 li
103.116 55.6553 li
103.824 54.7041 li
104.533 53.7534 li
105.476 51.8521 li
106.656 50.188 li
107.837 48.5239 li
108.78 46.8589 li
109.489 46.1465 li
109.961 45.4331 li
110.432 44.7192 li
110.905 44.0068 li
111.848 42.8184 li
112.793 41.6294 li
113.736 40.4409 li
114.681 39.252 li
115.389 38.3013 li
116.097 37.3511 li
117.042 36.3994 li
117.985 35.4492 li
119.873 33.3096 li
121.998 31.4077 li
123.886 29.5059 li
126.01 27.3662 li
127.189 26.416 li
128.37 25.7021 li
129.314 24.752 li
130.494 24.0386 li
132.854 22.3745 li
134.979 20.9482 li
137.339 19.521 li
139.463 18.333 li
141.351 17.3823 li
143.003 16.4312 li
144.655 15.7178 li
146.543 15.0049 li
147.96 14.2915 li
149.376 13.5791 li
150.792 13.103 li
152.208 12.6274 li
154.568 11.915 li
156.692 11.2017 li
159.053 10.4878 li
161.177 10.0132 li
163.064 9.5376 li
164.717 9.06201 li
166.368 8.82373 li
168.257 8.34912 li
171.325 7.87354 li
174.63 7.16016 li
177.697 6.68506 li
180.767 6.20947 li
183.126 5.97168 li
185.25 5.73389 li
187.611 5.49609 li
189.971 5.2583 li
193.039 5.02051 li
196.107 4.78271 li
199.412 4.54541 li
202.48 4.30762 li
204.84 4.06982 li
206.964 4.06982 li
209.324 3.83203 li
211.449 3.83203 li
1 0 .51 0 cmyk
@
[3.77779 3.77779 ] 0 dsh
24.2861 188.303 mo
31.1304 188.303 li
33.0186 188.065 li
35.1431 188.065 li
37.0313 187.828 li
39.8628 187.59 li
42.9316 187.115 li
46 186.639 li
46.707 186.639 li
50.7197 185.451 li
54.7324 184.261 li
58.5088 183.073 li
61.8125 181.647 li
64.6455 179.983 li
67.4771 178.082 li
70.0737 176.18 li
72.4336 174.516 li
74.5576 172.614 li
76.4458 170.712 li
78.334 168.81 li
80.2222 166.909 li
81.8745 165.245 li
83.5264 163.343 li
85.1782 161.441 li
86.5942 159.539 li
88.0112 157.875 li
89.1909 155.973 li
90.6069 154.31 li
91.7876 152.408 li
92.9673 150.506 li
94.147 148.842 li
95.0918 147.178 li
96.2715 145.514 li
98.1597 142.424 li
100.048 139.333 li
101.936 136.005 li
102.879 134.579 li
103.588 133.152 li
104.533 131.726 li
105.949 128.874 li
107.364 126.258 li
108.78 123.406 li
109.489 122.216 li
110.196 121.028 li
110.905 119.602 li
112.085 117.225 li
113.265 115.086 li
114.681 112.708 li
115.625 110.569 li
116.805 108.429 li
117.985 106.29 li
120.582 101.06 li
123.413 96.0679 li
126.01 90.8384 li
127.662 87.9849 li
129.078 85.3706 li
130.494 82.5176 li
133.562 77.2881 li
136.395 72.2959 li
139.463 67.3042 li
141.823 63.7373 li
144.184 60.1714 li
146.543 56.606 li
148.432 53.9917 li
150.319 51.376 li
152.208 48.9985 li
155.04 45.4331 li
158.108 41.8672 li
161.177 38.5391 li
163.537 36.1616 li
165.661 34.0229 li
168.257 31.8833 li
172.27 28.5557 li
176.518 25.4644 li
180.767 22.6123 li
183.835 20.9482 li
186.902 19.2842 li
189.971 17.8584 li
193.983 15.9556 li
198.231 14.2915 li
202.48 12.8652 li
205.548 11.915 li
208.616 11.2017 li
211.449 10.25 li
213.809 9.77539 li
216.169 9.2998 li
218.529 8.82373 li
220.418 8.58691 li
222.306 8.11133 li
224.194 7.87354 li
227.262 7.39795 li
230.094 6.92334 li
233.163 6.44727 li
235.522 6.20947 li
237.883 5.97168 li
240.243 5.73389 li
244.491 5.2583 li
248.503 4.78271 li
252.752 4.54541 li
255.82 4.30762 li
258.889 4.06982 li
261.957 3.83203 li
.00466925 .985901 .974975 .000946045 cmyk
@
156.98 54.7017 mo
157.304 54.793 157.484 54.8389 157.522 54.8389 cv
157.603 54.8389 157.679 54.8169 157.75 54.7725 cv
157.822 54.728 157.871 54.6587 157.899 54.564 cv
158.077 54.564 li
158.155 56.48 li
157.961 56.48 li
157.848 56.0996 157.7 55.793 157.519 55.5596 cv
157.171 55.1211 156.704 54.9014 156.116 54.9014 cv
155.523 54.9014 155.039 55.1377 154.663 55.6094 cv
154.287 56.0815 154.099 56.7314 154.099 57.5591 cv
154.099 58.3198 154.296 58.9272 154.692 59.3813 cv
155.088 59.8354 155.589 60.0625 156.195 60.0625 cv
156.634 60.0625 157.037 59.957 157.407 59.7456 cv
157.619 59.6265 157.853 59.4458 158.105 59.2041 cv
158.263 59.3628 li
158.075 59.6016 157.843 59.811 157.564 59.9917 cv
157.09 60.2969 156.575 60.4497 156.021 60.4497 cv
155.111 60.4497 154.39 60.1567 153.854 59.5708 cv
153.361 59.0293 153.114 58.353 153.114 57.5425 cv
153.114 56.7119 153.375 56.0151 153.896 55.4512 cv
154.444 54.8599 155.158 54.564 156.038 54.564 cv
156.344 54.564 156.658 54.6099 156.98 54.7017 cv
cp
.66 0 1 0 cmyk
f
78.8188 74.8359 mo
88.3252 74.8359 li
88.3252 63.2798 li
78.8188 63.2798 li
78.8188 74.8359 li
cp
0 0 0 0 cmyk
f
.944448 lw
[] 0 dsh
88.3262 74.8379 mo
88.3262 63.2817 li
78.8193 63.2817 li
78.8193 74.8379 li
88.3262 74.8379 li
cp
@
113.894 40.168 mo
125.039 40.168 li
125.039 30.5928 li
113.894 30.5928 li
113.894 40.168 li
cp
f
125.04 40.1699 mo
125.04 30.5947 li
113.894 30.5947 li
113.894 40.1699 li
125.04 40.1699 li
cp
@
91.9312 96.627 mo
100.126 96.627 li
100.126 86.7217 li
91.9312 86.7217 li
91.9312 96.627 li
cp
f
100.126 96.6289 mo
100.126 86.7236 li
91.9312 86.7236 li
91.9312 96.6289 li
100.126 96.6289 li
cp
@
126.064 64.6211 mo
123.073 57.0059 li
117.5 55.355 li
116.558 64.6211 li
126.064 64.6211 li
f
126.063 64.6235 mo
123.073 57.0093 li
117.5 55.3584 li
116.557 64.6235 li
126.063 64.6235 li
cp
@
168.31 93.3247 mo
167.654 80.4478 li
158.803 81.769 li
158.803 93.3247 li
168.31 93.3247 li
f
168.31 93.3271 mo
167.654 80.4512 li
158.803 81.771 li
158.803 93.3271 li
168.31 93.3271 li
cp
@
82.7544 68.0146 mo
82.5146 67.9092 82.2114 67.8564 81.8447 67.8564 cv
81.6709 67.8564 81.564 67.874 81.5239 67.9087 cv
81.4839 67.9434 81.4639 68.0205 81.4639 68.1396 cv
81.4639 70.3643 li
81.6157 70.3779 81.7148 70.3862 81.7617 70.3892 cv
81.8086 70.3921 81.854 70.3931 81.8984 70.3931 cv
82.2871 70.3931 82.5933 70.3379 82.8164 70.2266 cv
83.2217 70.0239 83.4243 69.645 83.4243 69.0894 cv
83.4243 68.5674 83.2012 68.2095 82.7544 68.0146 cv
cp
79.8965 73.0259 mo
80.2192 72.9956 80.4204 72.9312 80.5005 72.833 cv
80.5806 72.7349 80.6206 72.5103 80.6206 72.1592 cv
80.6206 68.4648 li
80.6206 68.1675 80.5757 67.9717 80.4858 67.8774 cv
80.3965 67.7832 80.2002 67.7231 79.8965 67.6982 cv
79.8965 67.54 li
82.1299 67.54 li
82.8467 67.54 83.3955 67.6802 83.7759 67.9609 cv
84.1563 68.2412 84.3467 68.6104 84.3467 69.0688 cv
84.3467 69.6489 84.1357 70.0698 83.7139 70.3311 cv
83.292 70.5918 82.7642 70.7222 82.1299 70.7222 cv
82.0391 70.7222 81.9224 70.7202 81.7803 70.7163 cv
81.6387 70.7119 81.5332 70.71 81.4639 70.71 cv
81.4639 72.2593 li
81.4639 72.5796 81.5132 72.7813 81.6108 72.8643 cv
81.7085 72.9473 81.9272 73.001 82.2666 73.0259 cv
82.2666 73.1841 li
79.8965 73.1841 li
79.8965 73.0259 li
cp
1 .32 0 .37 cmyk
f
86.0737 72.8823 mo
86.2632 72.9448 86.4292 72.9756 86.5723 72.9756 cv
86.9565 72.9756 87.2412 72.8301 87.4268 72.5391 cv
87.6118 72.248 87.7046 71.8955 87.7046 71.4824 cv
87.7046 71.0693 87.6182 70.687 87.4453 70.3364 cv
87.2725 69.9858 86.9922 69.8101 86.605 69.8101 cv
86.4102 69.8101 86.2192 69.8706 86.0327 69.9912 cv
85.8462 70.1118 85.7529 70.2651 85.7529 70.4507 cv
85.7529 72.5723 li
85.7773 72.7163 85.8843 72.8198 86.0737 72.8823 cv
cp
84.4995 67.8857 mo
84.4995 67.7441 li
84.8149 67.6719 85.0986 67.5913 85.3501 67.5024 cv
85.6021 67.4136 85.7373 67.3691 85.7568 67.3691 cv
85.7622 67.3857 85.7651 67.4023 85.7651 67.4194 cv
85.7651 69.9556 li
85.8364 69.8223 85.9438 69.6963 86.0874 69.5767 cv
86.3403 69.3687 86.6323 69.2646 86.9624 69.2646 cv
87.3672 69.2646 87.7129 69.4365 87.999 69.7808 cv
88.2852 70.1255 88.4282 70.5723 88.4282 71.1221 cv
88.4282 71.7109 88.2422 72.2148 87.8701 72.6343 cv
87.498 73.0537 87.0083 73.2632 86.4019 73.2632 cv
86.0962 73.2632 85.7954 73.2021 85.5005 73.0801 cv
85.2056 72.958 85.0581 72.8354 85.0581 72.7134 cv
85.0581 68.3105 li
85.0581 68.1494 85.0356 68.0352 84.9917 67.9668 cv
84.9478 67.8989 84.8457 67.8647 84.6855 67.8647 cv
84.4995 67.8857 li
cp
f
110.145 38.7607 mo
110.495 38.7246 110.719 38.645 110.818 38.5215 cv
110.918 38.3979 110.967 38.1113 110.967 37.6616 cv
110.967 33.9033 li
110.852 33.7661 li
110.728 33.6191 110.622 33.5283 110.535 33.4937 cv
110.448 33.459 110.318 33.439 110.145 33.4331 cv
110.145 33.2749 li
111.59 33.2749 li
114.859 37.3564 li
114.859 34.5215 li
114.859 34.0552 114.79 33.752 114.652 33.6113 cv
114.561 33.52 114.36 33.4609 114.048 33.4331 cv
114.048 33.2749 li
116.038 33.2749 li
116.038 33.4331 li
115.715 33.4663 115.5 33.5454 115.393 33.6704 cv
115.285 33.7954 115.231 34.0815 115.231 34.5288 cv
115.231 39.019 li
115.086 39.019 li
111.34 34.3413 li
111.34 37.6621 li
111.34 38.1284 111.407 38.4321 111.542 38.5732 cv
111.63 38.665 111.828 38.7275 112.134 38.7607 cv
112.134 38.9189 li
110.145 38.9189 li
110.145 38.7607 li
cp
1 0 .51 0 cmyk
f
118.593 36.6113 mo
118.276 36.7168 118.014 36.8335 117.807 36.9614 cv
117.41 37.2085 117.212 37.4888 117.212 37.8027 cv
117.212 38.0552 117.294 38.2412 117.46 38.3608 cv
117.567 38.4385 117.688 38.4775 117.82 38.4775 cv
118.001 38.4775 118.176 38.4263 118.343 38.3232 cv
118.51 38.2207 118.593 38.0898 118.593 37.9316 cv
118.593 36.6113 li
cp
117.075 37.082 mo
117.329 36.9155 117.835 36.689 118.593 36.4028 cv
118.593 36.0488 li
118.593 35.7656 118.565 35.5688 118.51 35.4575 cv
118.417 35.2715 118.222 35.1782 117.927 35.1782 cv
117.787 35.1782 117.653 35.2144 117.526 35.2866 cv
117.399 35.3618 117.336 35.4644 117.336 35.5952 cv
117.336 35.6284 117.343 35.6846 117.356 35.7637 cv
117.37 35.8428 117.377 35.8936 117.377 35.9155 cv
117.377 36.0713 117.326 36.1797 117.224 36.2407 cv
117.167 36.2769 117.097 36.2949 117.018 36.2949 cv
116.894 36.2949 116.798 36.2539 116.732 36.1719 cv
116.666 36.0898 116.633 35.999 116.633 35.8989 cv
116.633 35.7046 116.752 35.5015 116.991 35.2891 cv
117.229 35.0762 117.579 34.9702 118.039 34.9702 cv
118.574 34.9702 118.937 35.145 119.126 35.4951 cv
119.229 35.6865 119.28 35.9658 119.28 36.332 cv
119.28 38.0024 li
119.28 38.1636 119.291 38.2749 119.313 38.3359 cv
119.349 38.4443 119.423 38.498 119.536 38.498 cv
119.6 38.498 119.652 38.4888 119.693 38.4692 cv
119.734 38.4497 119.806 38.4023 119.908 38.3276 cv
119.908 38.5439 li
119.82 38.6523 119.725 38.7412 119.623 38.8105 cv
119.468 38.916 119.311 38.9688 119.151 38.9688 cv
118.964 38.9688 118.828 38.9077 118.744 38.7856 cv
118.66 38.6636 118.614 38.5176 118.605 38.3481 cv
118.396 38.5317 118.217 38.6675 118.068 38.7563 cv
117.817 38.9063 117.579 38.9814 117.353 38.9814 cv
117.115 38.9814 116.91 38.8975 116.736 38.7295 cv
116.563 38.5615 116.476 38.3481 116.476 38.0898 cv
116.476 37.6875 116.676 37.3516 117.075 37.082 cv
cp
f
120.061 38.7607 mo
120.406 38.7358 120.629 38.6841 120.731 38.6055 cv
120.833 38.5269 120.884 38.3228 120.884 37.9941 cv
120.884 34.1997 li
120.884 33.8857 120.833 33.6836 120.731 33.5938 cv
120.629 33.5034 120.406 33.4497 120.061 33.4331 cv
120.061 33.2749 li
122.567 33.2749 li
122.567 33.4331 li
122.223 33.4497 121.999 33.5034 121.897 33.5938 cv
121.796 33.6836 121.745 33.8857 121.745 34.1997 cv
121.745 37.9941 li
121.745 38.3228 121.796 38.5269 121.897 38.6055 cv
121.999 38.6841 122.223 38.7358 122.567 38.7607 cv
122.567 38.9189 li
120.061 38.9189 li
120.061 38.7607 li
cp
f
90.0825 94.7178 mo
90.416 94.6816 90.6235 94.6201 90.7046 94.5332 cv
90.7861 94.4463 90.8267 94.2188 90.8267 93.8511 cv
90.8267 90.1567 li
90.8267 89.854 90.7813 89.6563 90.6904 89.563 cv
90.5991 89.4702 90.3965 89.4126 90.0825 89.3901 cv
90.0825 89.2319 li
94.5942 89.2319 li
94.623 90.4521 li
94.3877 90.4521 li
94.3296 90.0625 94.2207 89.8159 94.061 89.7124 cv
93.9009 89.6089 93.5854 89.5566 93.1138 89.5566 cv
91.9526 89.5566 li
91.8389 89.5566 91.7666 89.5762 91.7349 89.6152 cv
91.7031 89.6538 91.687 89.7305 91.687 89.8442 cv
91.687 91.7476 li
92.915 91.7476 li
93.2764 91.7476 93.5068 91.6938 93.606 91.5864 cv
93.7051 91.4785 93.7852 91.2603 93.8457 90.9312 cv
94.0444 90.9312 li
94.0444 92.9014 li
93.8457 92.9014 li
93.7822 92.5713 93.7012 92.3525 93.6016 92.2456 cv
93.5024 92.1387 93.2734 92.085 92.915 92.085 cv
91.687 92.085 li
91.687 93.9512 li
91.687 94.2632 91.7344 94.4629 91.8296 94.5498 cv
91.9248 94.6367 92.1323 94.6929 92.4521 94.7178 cv
92.4521 94.876 li
90.0825 94.876 li
90.0825 94.7178 li
cp
.5 .85 0 0 cmyk
f
95.6777 91.6938 mo
95.5898 91.8438 95.5264 92.0322 95.4878 92.2603 cv
97.2329 92.2603 li
97.2026 91.9824 97.1499 91.7754 97.0757 91.6396 cv
96.9404 91.395 96.7144 91.2729 96.3975 91.2729 cv
96.083 91.2729 95.8433 91.4131 95.6777 91.6938 cv
cp
97.6587 91.375 mo
97.9512 91.6455 98.0972 92.0298 98.0972 92.5269 cv
95.4712 92.5269 li
95.4985 93.1694 95.6436 93.6377 95.9053 93.9316 cv
96.167 94.2251 96.4775 94.3721 96.8359 94.3721 cv
97.1255 94.3721 97.3691 94.2959 97.5679 94.1436 cv
97.7661 93.9912 97.9497 93.7749 98.1177 93.4951 cv
98.2627 93.5449 li
98.1494 93.8984 97.938 94.2251 97.6279 94.5254 cv
97.3174 94.8257 96.938 94.9761 96.4883 94.9761 cv
95.9702 94.9761 95.5698 94.7788 95.2871 94.3843 cv
95.0044 93.9902 94.8633 93.5361 94.8633 93.0225 cv
94.8633 92.4644 95.0273 91.9824 95.3555 91.5771 cv
95.6836 91.1714 96.1108 90.9688 96.6372 90.9688 cv
97.0259 90.9688 97.3667 91.104 97.6587 91.375 cv
cp
f
119.591 61.0884 mo
118.62 58.7393 li
117.645 61.0884 li
119.591 61.0884 li
cp
115.943 63.2793 mo
115.943 63.1211 li
116.161 63.0962 116.324 63.0137 116.433 62.8735 cv
116.542 62.7329 116.729 62.3491 116.993 61.7217 cv
118.758 57.5352 li
118.926 57.5352 li
121.037 62.3716 li
121.177 62.6919 121.29 62.8896 121.374 62.9658 cv
121.458 63.0415 121.599 63.0933 121.798 63.1211 cv
121.798 63.2793 li
119.644 63.2793 li
119.644 63.1211 li
119.891 63.0991 120.051 63.0718 120.123 63.04 cv
120.194 63.0083 120.23 62.9302 120.23 62.8062 cv
120.23 62.7646 120.216 62.6914 120.188 62.5864 cv
120.161 62.4814 120.123 62.3706 120.073 62.2544 cv
119.734 61.4341 li
117.501 61.4341 li
117.282 61.9922 117.15 62.333 117.107 62.4556 cv
117.065 62.5786 117.043 62.6763 117.043 62.748 cv
117.043 62.8916 117.101 62.9912 117.217 63.0464 cv
117.289 63.0796 117.423 63.1045 117.622 63.1211 cv
117.622 63.2793 li
115.943 63.2793 li
cp
0 .26 1 .2 cmyk
f
121.972 63.1416 mo
122.226 63.1196 122.394 63.0747 122.477 63.0063 cv
122.559 62.9385 122.601 62.7935 122.601 62.5713 cv
122.601 60.6924 li
122.601 60.4175 122.575 60.2212 122.523 60.103 cv
122.473 59.9854 122.38 59.9263 122.245 59.9263 cv
122.217 59.9263 122.181 59.9297 122.135 59.9365 cv
122.09 59.9434 122.042 59.9526 121.992 59.9639 cv
121.992 59.8262 li
122.149 59.7705 122.31 59.7139 122.475 59.6553 cv
122.64 59.5972 122.754 59.5557 122.817 59.5303 cv
122.954 59.4775 123.096 59.418 123.241 59.3516 cv
123.261 59.3516 123.272 59.3584 123.276 59.3721 cv
123.28 59.3862 123.283 59.415 123.283 59.4595 cv
123.283 60.1426 li
123.46 59.8955 123.63 59.7026 123.795 59.564 cv
123.959 59.4248 124.13 59.3555 124.307 59.3555 cv
124.448 59.3555 124.563 59.3979 124.651 59.4824 cv
124.739 59.5674 124.784 59.6733 124.784 59.8013 cv
124.784 59.915 124.75 60.0107 124.683 60.0889 cv
124.615 60.1665 124.53 60.2051 124.429 60.2051 cv
124.323 60.2051 124.218 60.1567 124.112 60.0596 cv
124.006 59.9624 123.922 59.9136 123.861 59.9136 cv
123.766 59.9136 123.646 59.9922 123.506 60.1489 cv
123.365 60.3062 123.295 60.4678 123.295 60.6343 cv
123.295 62.5127 li
123.295 62.752 123.351 62.9175 123.461 63.0107 cv
123.571 63.1035 123.754 63.1475 124.011 63.1416 cv
124.011 63.2793 li
121.972 63.2793 li
121.972 63.1416 li
cp
f
160.251 90.5249 mo
160.582 90.4888 160.788 90.4272 160.871 90.3403 cv
160.954 90.2534 160.995 90.0259 160.995 89.6582 cv
160.995 85.9639 li
160.995 85.6582 160.949 85.46 160.856 85.3682 cv
160.765 85.2764 160.563 85.2197 160.251 85.1973 cv
160.251 85.0391 li
162.6 85.0391 li
162.6 85.1973 li
162.29 85.2197 162.088 85.2764 161.995 85.3682 cv
161.902 85.46 161.855 85.6582 161.855 85.9639 cv
161.855 87.626 li
164.428 87.626 li
164.428 85.9639 li
164.428 85.6582 164.382 85.46 164.291 85.3682 cv
164.2 85.2764 163.997 85.2197 163.684 85.1973 cv
163.684 85.0391 li
166.032 85.0391 li
166.032 85.1973 li
165.721 85.2197 165.519 85.2764 165.427 85.3682 cv
165.334 85.46 165.288 85.6582 165.288 85.9639 cv
165.288 89.7583 li
165.288 90.0679 165.334 90.2661 165.427 90.353 cv
165.519 90.4399 165.721 90.4971 166.032 90.5249 cv
166.032 90.6831 li
163.684 90.6831 li
163.684 90.5249 li
164.017 90.4917 164.225 90.4307 164.306 90.3423 cv
164.387 90.2539 164.428 90.0259 164.428 89.6582 cv
164.428 88.0005 li
161.855 88.0005 li
161.855 89.7583 li
161.855 90.0679 161.902 90.2666 161.995 90.355 cv
162.088 90.4434 162.29 90.5 162.6 90.5249 cv
162.6 90.6831 li
160.251 90.6831 li
160.251 90.5249 li
cp
1 0 0 0 cmyk
f
127.662 87.9829 mo
130.94 83.4199 li
133.89 78.1367 li
135.529 74.8359 li
127.334 70.2129 li
123.729 85.0708 li
127.662 87.9829 li
0 0 0 0 cmyk
f
127.662 87.9849 mo
130.94 83.4229 li
133.891 78.1401 li
135.529 74.8379 li
127.334 70.2153 li
123.729 85.0728 li
127.662 87.9849 li
cp
@
114.095 81.2808 mo
114.426 81.2446 114.633 81.1831 114.715 81.0962 cv
114.798 81.0093 114.839 80.7817 114.839 80.4141 cv
114.839 76.7197 li
114.839 76.4141 114.793 76.2158 114.701 76.124 cv
114.608 76.0322 114.406 75.9756 114.095 75.9531 cv
114.095 75.7949 li
116.444 75.7949 li
116.444 75.9531 li
116.134 75.9756 115.933 76.0322 115.839 76.124 cv
115.746 76.2158 115.7 76.4141 115.7 76.7197 cv
115.7 78.3818 li
118.272 78.3818 li
118.272 76.7197 li
118.272 76.4141 118.227 76.2158 118.135 76.124 cv
118.044 76.0322 117.842 75.9756 117.527 75.9531 cv
117.527 75.7949 li
119.876 75.7949 li
119.876 75.9531 li
119.565 75.9756 119.363 76.0322 119.271 76.124 cv
119.178 76.2158 119.132 76.4141 119.132 76.7197 cv
119.132 80.5142 li
119.132 80.8237 119.178 81.022 119.271 81.1089 cv
119.363 81.1958 119.565 81.2529 119.876 81.2808 cv
119.876 81.439 li
117.527 81.439 li
117.527 81.2808 li
117.861 81.2476 118.068 81.1865 118.15 81.0981 cv
118.231 81.0098 118.272 80.7817 118.272 80.4141 cv
118.272 78.7563 li
115.7 78.7563 li
115.7 80.5142 li
115.7 80.8237 115.746 81.0225 115.839 81.1108 cv
115.933 81.1992 116.134 81.2559 116.444 81.2808 cv
116.444 81.439 li
114.095 81.439 li
114.095 81.2808 li
cp
.00466925 .985901 .974975 .000946045 cmyk
f
120.517 83.1548 mo
121.414 82.2173 122.023 81.5293 122.344 81.0898 cv
122.665 80.6509 122.826 80.2231 122.826 79.8066 cv
122.826 79.4414 122.728 79.1636 122.531 78.9722 cv
122.336 78.7813 122.102 78.6855 121.829 78.6855 cv
121.494 78.6855 121.222 78.8091 121.014 79.0557 cv
120.898 79.1914 120.788 79.3994 120.683 79.6807 cv
120.524 79.6475 li
120.647 79.0801 120.855 78.686 121.147 78.4653 cv
121.44 78.2441 121.755 78.1338 122.091 78.1338 cv
122.505 78.1338 122.84 78.2651 123.096 78.5278 cv
123.352 78.7905 123.48 79.1118 123.48 79.4917 cv
123.48 79.896 123.342 80.2856 123.064 80.6606 cv
122.787 81.0356 122.186 81.7026 121.259 82.6621 cv
122.946 82.6621 li
123.182 82.6621 123.348 82.6338 123.443 82.5771 cv
123.539 82.5205 123.646 82.3823 123.767 82.1626 cv
123.862 82.207 li
123.454 83.2397 li
120.517 83.2397 li
120.517 83.1548 li
cp
f
126.217 80.6079 mo
126.567 81.0371 126.998 81.2515 127.509 81.2515 cv
128.009 81.2515 128.436 81.0425 128.79 80.6245 cv
129.145 80.2065 129.322 79.5381 129.322 78.6191 cv
129.322 77.689 129.143 77.0166 128.784 76.603 cv
128.425 76.1895 128 75.9824 127.509 75.9824 cv
127.001 75.9824 126.571 76.1968 126.219 76.626 cv
125.867 77.0547 125.691 77.7192 125.691 78.6191 cv
125.691 79.5161 125.866 80.1787 126.217 80.6079 cv
cp
125.584 76.4282 mo
126.104 75.9253 126.746 75.6743 127.507 75.6743 cv
128.271 75.6743 128.913 75.9268 129.434 76.4321 cv
129.999 76.9795 130.281 77.708 130.281 78.6191 cv
130.281 79.5439 129.989 80.2798 129.405 80.8267 cv
128.881 81.3154 128.248 81.5596 127.507 81.5596 cv
126.713 81.5596 126.054 81.2891 125.53 80.7476 cv
124.998 80.1948 124.731 79.4854 124.731 78.6191 cv
124.731 77.708 125.016 76.978 125.584 76.4282 cv
cp
f
165.032 50.0728 mo
160.896 44.3301 li
169.283 48.3218 li
165.836 48.481 li
165.032 50.0728 li
.66 0 1 0 cmyk
f
131.113 65.4648 mo
138.155 65.291 li
130.133 69.9849 li
131.958 67.0347 li
131.113 65.4648 li
.00466925 .985901 .974975 .000946045 cmyk
f
.472224 lw
131.958 67.0371 mo
126.495 68.1353 124.057 69.5552 122.089 73.187 cv
@
165.359 47.4341 mo
166.671 48.7549 174.538 55.0283 160.77 57.0093 cv
.66 0 1 0 cmyk
@
3.1748 93.5244 mo
2.9082 93.4072 2.57129 93.3486 2.16406 93.3486 cv
1.97119 93.3486 1.85205 93.3682 1.80811 93.4063 cv
1.76367 93.4453 1.74121 93.5308 1.74121 93.6636 cv
1.74121 96.1348 li
1.90967 96.1504 2.02002 96.1597 2.07227 96.1626 cv
2.12402 96.1655 2.1748 96.167 2.22363 96.167 cv
2.65576 96.167 2.99561 96.1055 3.24365 95.9819 cv
3.69434 95.7568 3.91943 95.3359 3.91943 94.7188 cv
3.91943 94.1387 3.67139 93.7407 3.1748 93.5244 cv
cp
0 99.0923 mo
.358398 99.0586 .581543 98.9868 .670898 98.8779 cv
.759277 98.769 .803711 98.5195 .803711 98.1294 cv
.803711 94.0244 li
.803711 93.6943 .753906 93.4766 .654785 93.3716 cv
.555176 93.2671 .336914 93.2007 0 93.1729 cv
0 92.9971 li
2.48096 92.9971 li
3.27734 92.9971 3.88721 93.1528 4.31006 93.4644 cv
4.73242 93.7759 4.94385 94.1865 4.94385 94.6953 cv
4.94385 95.3403 4.70947 95.8076 4.24121 96.0977 cv
3.77246 96.3877 3.18555 96.5327 2.48096 96.5327 cv
2.37988 96.5327 2.25049 96.5303 2.09277 96.5259 cv
1.93506 96.5215 1.81787 96.519 1.74121 96.519 cv
1.74121 98.2407 li
1.74121 98.5967 1.79541 98.8208 1.9043 98.9126 cv
2.01318 99.0049 2.25586 99.0645 2.63281 99.0923 cv
2.63281 99.2681 li
0 99.2681 li
0 99.0923 li
cp
0 0 0 1 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
