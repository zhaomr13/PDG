%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 7.0%%AI8_CreatorVersion: 10.0%%For: (Don Groom) ()%%Title: (dedx_table_98.eps)%%CreationDate: 11/1/13 4:38 PM%%BoundingBox: 140 106 440 435%%HiResBoundingBox: 140 106 439.6665 434.5%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentFonts: Symbol%%+ Times-Roman%%+ Times-Italic%%+ NewCenturySchlbk-Roman%%DocumentNeededFonts: Symbol%%+ Times-Roman%%+ Times-Italic%%+ NewCenturySchlbk-Roman%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 228 391.5 228 391.5%AI3_TileBox: 0 0 552 730%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 2%AI5_OpenToView: -403 929.5 1 1267 1089 26 0 1 915 87 0 0%AI5_OpenViewLayers: 77%%PageOrigin:0 0%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -31 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Symbol%%IncludeFont: Times-Roman%%IncludeFont: Times-Italic%%IncludeFont: NewCenturySchlbk-Romanuserdict /_useSmoothShade true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Symbol Symbol[/_Symbol/Symbol 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _Times-Roman Times-Roman[/_Times-Roman/Times-Roman 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _Times-Italic Times-Italic[/_Times-Italic/Times-Italic 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _NewCenturySchlbk-Roman NewCenturySchlbk-Roman[/_NewCenturySchlbk-Roman/NewCenturySchlbk-Roman 0 0 1 TZ%AI3_EndEncoding AdobeType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registration]) Pc1 1 1 1 k([Registration]) Pc([Registration]) Pc0 g(K=100) Pc1 g(K=0) Pc0 1 1 0 k(New Color Swatch 1) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 Auu0 R0.25 0 0 0.01 K0 J 0 j 0.6 w 4 M []0 d0 XR415.5991 253.6299 m179.439 253.6299 LS415.5991 266.1099 m179.439 266.1099 LS415.5991 277.1499 m179.439 277.1499 LS415.5991 286.75 m179.439 286.75 LS410.3193 295.1499 m184.7192 295.1499 LS415.5991 303.0698 m179.439 303.0698 LS415.5991 310.0298 m179.439 310.0298 LS415.5991 316.75 m179.439 316.75 LS415.5991 322.75 m179.439 322.75 LS410.3193 328.27 m184.7192 328.27 LS418.6665 340.7773 m177.3335 340.7773 LS410.3193 351.79 m184.7192 351.79 LS410.3193 370.0298 m184.7192 370.0298 LS410.3193 384.9102 m184.7192 384.9102 LS410.3193 397.3901 m184.7192 397.3901 LS410.3193 408.4302 m184.7192 408.4302 LS410.3193 418.0298 m184.7192 418.0298 LSU191.3101 424.0801 m191.2798 241.5498 lS199.9199 241.5498 m199.9502 424.0801 lS205.9502 424.0801 m205.9199 241.5498 lS210.7202 241.5498 m210.75 424.0801 lS214.5898 424.0801 m214.5601 241.5498 lS217.6802 241.5498 m217.71 424.0801 lS220.5898 424.0801 m220.5601 241.5498 lS222.96 241.5498 m222.9902 424.0801 lS225.1201 418.5601 m225.1201 246.7998 lS239.7598 241.5498 m239.79 424.0801 lS248.1899 424.0801 m248.1602 241.5498 lS254.1602 241.5498 m254.1899 424.0801 lS258.9902 424.0801 m258.96 241.5498 lS262.7998 241.5498 m262.8301 424.0801 lS265.9502 424.0801 m265.9199 241.5498 lS268.7998 241.5498 m268.8301 424.0801 lS271.23 424.0801 m271.2002 241.5498 lS273.6001 246.7998 m273.6001 418.5601 lS288.0298 424.0801 m288 241.5498 lS296.6401 241.5498 m296.6699 424.0801 lS302.6699 424.0801 m302.6401 241.5498 lS307.2002 241.5498 m307.23 424.0801 lS311.0698 424.0801 m311.04 241.5498 lS314.3999 241.5498 m314.4302 424.0801 lS317.0698 424.0801 m317.04 241.5498 lS319.6802 241.5498 m319.71 424.0801 lS321.8398 418.5601 m321.8398 246.7998 lS336.2402 241.5498 m336.27 424.0801 lS344.9102 424.0801 m344.8799 241.5498 lS350.8799 241.5498 m350.9102 424.0801 lS355.71 424.0801 m355.6802 241.5498 lS359.52 241.5498 m359.5498 424.0801 lS362.6699 424.0801 m362.6401 241.5498 lS365.52 241.5498 m365.5498 424.0801 lS367.9502 424.0801 m367.9199 241.5498 lS370.0801 246.7998 m370.0801 418.75 lS384.75 424.0801 m384.7202 241.5498 lS393.1201 241.5498 m393.1499 424.0801 lS399.1499 424.0801 m399.1201 241.5498 lS403.9199 241.5498 m403.9502 424.0801 lS407.79 424.0801 m407.7598 241.5498 lS410.8799 241.5498 m410.9102 424.0801 lS413.79 424.0801 m413.7598 241.5498 lS416.1602 241.5498 m416.1899 424.0801 lSUu0 G0.4 w176.8799 426.7202 m176.8799 238.7998 lS176.8799 238.7998 m418.5601 238.7998 lS418.5601 238.7998 m418.5601 426.7202 lS418.5601 426.7202 m176.8799 426.7202 lS191.2798 241.4399 m191.2798 238.7998 lS199.9199 238.7998 m199.9199 241.4399 lS205.9199 241.4399 m205.9199 238.7998 lS210.7202 238.7998 m210.7202 241.4399 lS214.5601 241.4399 m214.5601 238.7998 lS217.6802 238.7998 m217.6802 241.4399 lS220.5601 241.4399 m220.5601 238.7998 lS222.96 238.7998 m222.96 241.4399 lS225.1201 246.7202 m225.1201 238.7998 lS239.7598 238.7998 m239.7598 241.4399 lS248.1602 241.4399 m248.1602 238.7998 lS254.1602 238.7998 m254.1602 241.4399 lS258.96 241.4399 m258.96 238.7998 lS262.7998 238.7998 m262.7998 241.4399 lS265.9199 241.4399 m265.9199 238.7998 lS268.7998 238.7998 m268.7998 241.4399 lS271.2002 241.4399 m271.2002 238.7998 lS273.6001 238.7998 m273.6001 246.7202 lS288 241.4399 m288 238.7998 lS296.6401 238.7998 m296.6401 241.4399 lS302.6401 241.4399 m302.6401 238.7998 lS307.2002 238.7998 m307.2002 241.4399 lS311.04 241.4399 m311.04 238.7998 lS314.3999 238.7998 m314.3999 241.4399 lS317.04 241.4399 m317.04 238.7998 lS319.6802 238.7998 m319.6802 241.4399 lS321.8398 246.7202 m321.8398 238.7998 lS336.2402 238.7998 m336.2402 241.4399 lS344.8799 241.4399 m344.8799 238.7998 lS350.8799 238.7998 m350.8799 241.4399 lS355.6802 241.4399 m355.6802 238.7998 lS359.52 238.7998 m359.52 241.4399 lS362.6401 241.4399 m362.6401 238.7998 lS365.52 238.7998 m365.52 241.4399 lS367.9199 241.4399 m367.9199 238.7998 lS370.0801 238.7998 m370.0801 246.7202 lS384.7202 241.4399 m384.7202 238.7998 lS393.1201 238.7998 m393.1201 241.4399 lS399.1201 241.4399 m399.1201 238.7998 lS403.9199 238.7998 m403.9199 241.4399 lS407.7598 241.4399 m407.7598 238.7998 lS410.8799 238.7998 m410.8799 241.4399 lS413.7598 241.4399 m413.7598 238.7998 lS416.1602 238.7998 m416.1602 241.4399 lS418.5601 246.7202 m418.5601 238.7998 lS176.8799 418.5601 m176.8799 426.7202 lS191.2798 426.7202 m191.2798 424.0801 lS199.9199 424.0801 m199.9199 426.7202 lS205.9199 426.7202 m205.9199 424.0801 lS210.7202 424.0801 m210.7202 426.7202 lS214.5601 426.7202 m214.5601 424.0801 lS217.6802 424.0801 m217.6802 426.7202 lS220.5601 426.7202 m220.5601 424.0801 lS222.96 424.0801 m222.96 426.7202 lS225.1201 426.7202 m225.1201 418.5601 lS239.7598 424.0801 m239.7598 426.7202 lS248.1602 426.7202 m248.1602 424.0801 lS254.1602 424.0801 m254.1602 426.7202 lS258.96 426.7202 m258.96 424.0801 lS262.7998 424.0801 m262.7998 426.7202 lS265.9199 426.7202 m265.9199 424.0801 lS268.7998 424.0801 m268.7998 426.7202 lS271.2002 426.7202 m271.2002 424.0801 lS273.6001 418.5601 m273.6001 426.7202 lS288 426.7202 m288 424.0801 lS296.6401 424.0801 m296.6401 426.7202 lS302.6401 426.7202 m302.6401 424.0801 lS307.2002 424.0801 m307.2002 426.7202 lS311.04 426.7202 m311.04 424.0801 lS314.3999 424.0801 m314.3999 426.7202 lS317.04 426.7202 m317.04 424.0801 lS319.6802 424.0801 m319.6802 426.7202 lS321.8398 426.7202 m321.8398 418.5601 lS336.2402 424.0801 m336.2402 426.7202 lS344.8799 426.7202 m344.8799 424.0801 lS350.8799 424.0801 m350.8799 426.7202 lS355.6802 426.7202 m355.6802 424.0801 lS359.52 424.0801 m359.52 426.7202 lS362.6401 426.7202 m362.6401 424.0801 lS365.52 424.0801 m365.52 426.7202 lS367.9199 426.7202 m367.9199 424.0801 lS370.0801 418.5601 m370.0801 426.7202 lS384.7202 426.7202 m384.7202 424.0801 lS393.1201 424.0801 m393.1201 426.7202 lS399.1201 426.7202 m399.1201 424.0801 lS403.9199 424.0801 m403.9199 426.7202 lS407.7598 426.7202 m407.7598 424.0801 lS410.8799 424.0801 m410.8799 426.7202 lS413.7598 426.7202 m413.7598 424.0801 lS416.1602 424.0801 m416.1602 426.7202 lS418.5601 426.7202 m418.5601 418.5601 lS179.52 253.6802 m176.8799 253.6802 lS176.8799 266.1602 m179.52 266.1602 lS179.52 277.2002 m176.8799 277.2002 lS176.8799 286.7998 m179.52 286.7998 lS184.7998 295.2002 m176.8799 295.2002 lS176.8799 303.1201 m179.52 303.1201 lS179.52 310.0801 m176.8799 310.0801 lS176.8799 316.7998 m179.52 316.7998 lS179.52 322.7998 m176.8799 322.7998 lS176.8799 328.3198 m184.7998 328.3198 lS179.52 333.6001 m176.8799 333.6001 lS176.8799 338.6401 m179.52 338.6401 lS179.52 343.2002 m176.8799 343.2002 lS176.8799 347.7598 m179.52 347.7598 lS184.7998 351.8398 m176.8799 351.8398 lS176.8799 355.9199 m179.52 355.9199 lS179.52 359.7598 m176.8799 359.7598 lS176.8799 363.3599 m179.52 363.3599 lS179.52 366.7202 m176.8799 366.7202 lS176.8799 370.0801 m184.7998 370.0801 lS179.52 373.2002 m176.8799 373.2002 lS176.8799 376.3198 m179.52 376.3198 lS179.52 379.4399 m176.8799 379.4399 lS176.8799 382.3198 m179.52 382.3198 lS184.7998 384.96 m176.8799 384.96 lS176.8799 387.6001 m179.52 387.6001 lS179.52 390.2402 m176.8799 390.2402 lS176.8799 392.6401 m179.52 392.6401 lS179.52 395.2798 m176.8799 395.2798 lS176.8799 397.4399 m184.7998 397.4399 lS179.52 399.8398 m176.8799 399.8398 lS176.8799 402 m179.52 402 lS179.52 404.1602 m176.8799 404.1602 lS176.8799 406.3198 m179.52 406.3198 lS184.7998 408.48 m176.8799 408.48 lS176.8799 410.3999 m179.52 410.3999 lS179.52 412.3198 m176.8799 412.3198 lS176.8799 414.2402 m179.52 414.2402 lS179.52 416.1602 m176.8799 416.1602 lS176.8799 418.0801 m184.7998 418.0801 lS179.52 419.7598 m176.8799 419.7598 lS176.8799 421.6802 m179.52 421.6802 lS179.52 423.3599 m176.8799 423.3599 lS176.8799 425.04 m179.52 425.04 lS418.5601 253.6802 m415.6802 253.6802 lS415.6802 266.1602 m418.5601 266.1602 lS418.5601 277.2002 m415.6802 277.2002 lS415.6802 286.7998 m418.5601 286.7998 lS418.5601 295.2002 m410.3999 295.2002 lS415.6802 303.1201 m418.5601 303.1201 lS418.5601 310.0801 m415.6802 310.0801 lS415.6802 316.7998 m418.5601 316.7998 lS418.5601 322.7998 m415.6802 322.7998 lS410.3999 328.3198 m418.5601 328.3198 lS418.5601 333.6001 m415.6802 333.6001 lS415.6802 338.6401 m418.5601 338.6401 lS418.5601 343.2002 m415.6802 343.2002 lS415.6802 347.7598 m418.5601 347.7598 lS418.5601 351.8398 m410.3999 351.8398 lS415.6802 355.9199 m418.5601 355.9199 lS418.5601 359.7598 m415.6802 359.7598 lS415.6802 363.3599 m418.5601 363.3599 lS418.5601 366.7202 m415.6802 366.7202 lS410.3999 370.0801 m418.5601 370.0801 lS418.5601 373.2002 m415.6802 373.2002 lS415.6802 376.3198 m418.5601 376.3198 lS418.5601 379.4399 m415.6802 379.4399 lS415.6802 382.3198 m418.5601 382.3198 lS418.5601 384.96 m410.3999 384.96 lS415.6802 387.6001 m418.5601 387.6001 lS418.5601 390.2402 m415.6802 390.2402 lS415.6802 392.6401 m418.5601 392.6401 lS418.5601 395.2798 m415.6802 395.2798 lS410.3999 397.4399 m418.5601 397.4399 lS418.5601 399.8398 m415.6802 399.8398 lS415.6802 402 m418.5601 402 lS418.5601 404.1602 m415.6802 404.1602 lS415.6802 406.3198 m418.5601 406.3198 lS418.5601 408.48 m410.3999 408.48 lS415.6802 410.3999 m418.5601 410.3999 lS418.5601 412.3198 m415.6802 412.3198 lS415.6802 414.2402 m418.5601 414.2402 lS418.5601 416.1602 m415.6802 416.1602 lS410.3999 418.0801 m418.5601 418.0801 lS418.5601 419.7598 m415.6802 419.7598 lS415.6802 421.6802 m418.5601 421.6802 lS418.5601 423.3599 m415.6802 423.3599 lS415.6802 425.04 m418.5601 425.04 lSU0.5 w215.9673 426.5225 m217.6475 417.8823 l220.5273 405.6426 l222.9277 395.8027 l225.0874 388.1226 l228.9277 376.6025 l233.7275 366.2827 l236.3677 361.9624 l239.7275 357.8823 l244.2876 354.5225 l248.1274 353.3223 l251.4873 352.6025 l254.1274 352.6025 l254.1274 352.6025 l256.7676 352.6025 l258.9277 352.8423 l260.8477 353.0825 l262.7676 353.3223 l265.8877 354.0425 l268.7676 354.5225 l271.1675 355.0024 l273.5674 355.4824 l277.1675 356.4424 l281.9673 357.4023 l284.6074 358.1226 l287.9673 358.8423 l292.7676 360.0425 l296.6074 361.0024 l299.7275 361.7227 l302.6074 362.2026 l305.0073 362.9224 l307.1675 363.4023 l309.3276 363.8823 l311.0073 364.1226 l314.3677 364.8423 l317.0073 365.5625 l319.6475 366.0425 l321.8076 366.2827 l325.6475 367.0024 l330.2075 367.9624 l332.8477 368.4424 l336.2075 368.9224 l341.0073 369.8823 l344.8477 370.3623 l347.9673 370.8423 l350.8477 371.3223 l353.2476 371.5625 l355.6475 372.0425 l357.5674 372.2827 l359.4873 372.5225 l362.6074 373.0024 l365.4873 373.2427 l367.8877 373.7227 l370.0474 373.9624 l373.8877 374.4424 l378.6875 374.9224 l381.3276 375.1626 l384.6875 375.6426 l389.2476 376.1226 l393.0874 376.6025 l396.4473 377.0825 l399.0874 377.3223 l401.7275 377.5625 l403.8877 377.8027 l405.8076 378.0425 l407.7275 378.2827 l410.8477 378.5225 l413.7275 379.0024 l416.1274 379.2427 l418.5273 379.4824 lS0 1 1 0 K204.4473 426.5225 m205.8877 418.3623 l208.2876 403.9624 l210.6875 391.7227 l212.6074 380.9224 l214.5273 371.5625 l217.6475 356.2026 l220.5273 343.9624 l222.9277 334.3623 l225.0874 326.6826 l228.9277 315.4023 l233.7275 305.3223 l236.3677 301.0024 l239.7275 297.1626 l244.2876 293.8027 l248.1274 292.6025 l250.7676 292.6025 l251.4873 292.6025 l254.1274 292.8423 l256.7676 293.3223 l258.9277 293.8027 l260.8477 294.5225 l262.7676 295.2427 l265.8877 296.4424 l268.7676 297.6426 l271.1675 298.8423 l273.5674 299.8027 l277.1675 301.7227 l281.9673 304.1226 l284.6074 305.3223 l287.9673 307.0024 l292.7676 309.1626 l296.6074 310.8423 l299.7275 312.5225 l302.6074 313.7227 l305.0073 314.6826 l307.1675 315.6426 l309.3276 316.6025 l311.0073 317.3223 l314.3677 318.7627 l317.0073 319.7227 l319.6475 320.6826 l321.8076 321.6426 l325.6475 323.0825 l330.2075 324.7627 l332.8477 325.7227 l336.2075 326.6826 l341.0073 327.8823 l344.8477 328.6025 l347.9673 329.3223 l350.8477 329.8027 l353.2476 330.0425 l355.6475 330.2827 l357.5674 330.7627 l359.4873 331.0024 l362.6074 331.2427 l365.4873 331.7227 l367.8877 331.9624 l370.0474 332.2026 l373.8877 332.4424 l378.6875 333.1626 l381.3276 333.4023 l384.6875 333.6426 l389.2476 334.1226 l393.0874 334.3623 l396.4473 334.8423 l399.0874 335.0825 l401.7275 335.3223 l403.8877 335.5625 l405.8076 335.5625 l407.7275 335.8027 l410.8477 336.0425 l413.7275 336.5225 l416.1274 336.5225 l418.5273 336.7627 lS0 G203.4873 426.5225 m205.8877 411.6426 l208.2876 397.4824 l210.6875 385.2427 l212.6074 374.6826 l214.5273 365.3223 l217.6475 349.9624 l220.5273 337.9624 l222.9277 328.3623 l225.0874 320.6826 l228.9277 309.1626 l233.7275 298.6025 l236.3677 294.2827 l239.7275 289.9624 l244.2876 286.1226 l248.1274 284.6826 l251.4873 283.9624 l253.6475 283.9624 l254.1274 283.9624 l256.7676 284.2026 l258.9277 284.4424 l260.8477 284.9224 l262.7676 285.1626 l265.8877 286.1226 l268.7676 286.8423 l271.1675 287.8027 l273.5674 288.2827 l277.1675 289.7227 l281.9673 291.1626 l284.6074 292.1226 l287.9673 293.0825 l292.7676 294.5225 l296.6074 295.7227 l299.7275 296.6826 l302.6074 297.6426 l305.0073 298.1226 l307.1675 298.8423 l309.3276 299.3223 l311.0073 299.8027 l314.3677 300.5225 l317.0073 301.2427 l319.6475 301.7227 l321.8076 302.2026 l325.6475 303.1626 l330.2075 304.1226 l332.8477 304.6025 l336.2075 305.3223 l341.0073 306.0425 l344.8477 306.7627 l347.9673 307.2427 l350.8477 307.7227 l353.2476 308.2026 l355.6475 308.4424 l357.5674 308.6826 l359.4873 309.1626 l362.6074 309.6426 l365.4873 309.8823 l367.8877 310.3623 l370.0474 310.6025 l373.8877 311.0825 l378.6875 311.8027 l381.3276 312.0425 l384.6875 312.5225 l389.2476 313.2427 l393.0874 313.7227 l396.4473 313.9624 l399.0874 314.4424 l401.7275 314.6826 l403.8877 314.9224 l405.8076 315.1626 l407.7275 315.4023 l410.8477 315.6426 l413.7275 316.1226 l416.1274 316.3623 l418.5273 316.6025 lSu[6 2 1 2 ]0 d201.3276 426.5225 m203.0073 416.2026 l205.8877 400.1226 l208.2876 386.2026 l210.6875 374.2026 l212.6074 363.8823 l214.5273 354.7627 l217.6475 339.6426 l220.5273 327.6426 l222.9277 318.2827 l225.0874 310.8423 l228.9277 299.8027 l233.7275 289.9624 l236.3677 285.8823 l239.7275 282.0425 l244.2876 279.1626 l248.1274 277.9624 l251.2476 277.7227 l251.4873 277.7227 l254.1274 277.7227 l256.7676 278.2026 l258.9277 278.6826 l260.8477 279.1626 l262.7676 279.6426 l265.8877 280.8423 l268.7676 281.8027 l271.1675 282.7627 l273.5674 283.4824 l277.1675 284.9224 l281.9673 286.6025 l284.6074 287.5625 l287.9673 288.7627 l292.7676 290.4424 l296.6074 291.6426 l299.7275 292.8423 l302.6074 293.5625 l305.0073 294.2827 l307.1675 295.0024 l309.3276 295.4824 l311.0073 295.9624 l314.3677 296.9224 l317.0073 297.6426 l319.6475 298.1226 l321.8076 298.8423 l325.6475 299.5625 l330.2075 300.7627 l332.8477 301.2427 l336.2075 301.9624 lS336.2075 301.9624 m341.0073 302.6826 l344.8477 303.4023 l347.9673 303.8823 l350.8477 304.3623 l353.2476 304.8423 l355.6475 305.0825 l357.5674 305.5625 l359.4873 305.8027 l362.6074 306.2827 l365.4873 306.5225 l367.8877 307.0024 l370.0474 307.2427 l373.8877 307.7227 l378.6875 308.4424 l381.3276 308.6826 l384.6875 309.1626 l389.2476 309.8823 l393.0874 310.3623 l396.4473 310.6025 l399.0874 311.0825 l401.7275 311.3223 l403.8877 311.5625 l405.8076 311.8027 l407.7275 312.0425 l410.8477 312.5225 l413.7275 312.7627 l416.1274 313.0024 l418.5273 313.2427 lSU[]0 d199.6475 426.5225 m199.8877 425.0825 l203.0073 406.3623 l205.8877 390.2827 l208.2876 376.6025 l210.6875 364.8423 l212.6074 354.5225 l214.5273 345.6426 l217.6475 330.5225 l220.5273 318.7627 l222.9277 309.6426 l225.0874 301.9624 l228.9277 291.1626 l233.7275 281.3223 l236.3677 277.2427 l239.7275 273.4023 l244.2876 270.2827 l248.1274 269.0825 l251.0073 268.8423 l251.4873 268.8423 l254.1274 269.0825 l256.7676 269.5625 l258.9277 270.0425 l260.8477 270.7627 l262.7676 271.2427 l265.8877 272.4424 l268.7676 273.6426 l271.1675 274.6025 l273.5674 275.5625 l277.1675 277.0024 l281.9673 278.9224 l284.6074 280.1226 l287.9673 281.3223 l292.7676 283.2427 l296.6074 284.6826 l299.7275 285.8823 l302.6074 286.8423 l305.0073 287.5625 l307.1675 288.2827 l309.3276 289.0024 l311.0073 289.4824 l314.3677 290.4424 l317.0073 291.1626 l319.6475 291.8823 l321.8076 292.6025 l325.6475 293.5625 l330.2075 294.5225 l332.8477 295.2427 l336.2075 295.9624 l341.0073 296.9224 l344.8477 297.6426 l347.9673 298.1226 l350.8477 298.8423 l353.2476 299.0825 l355.6475 299.5625 l357.5674 299.8027 l359.4873 300.0425 l362.6074 300.5225 l365.4873 301.0024 l367.8877 301.4824 l370.0474 301.7227 l373.8877 302.2026 l378.6875 302.9224 l381.3276 303.4023 l384.6875 303.6426 l389.2476 304.3623 l393.0874 304.8423 l396.4473 305.3223 l399.0874 305.5625 l401.7275 306.0425 l403.8877 306.2827 l405.8076 306.5225 l407.7275 306.7627 l410.8477 307.0024 l413.7275 307.4824 l416.1274 307.7227 l418.5273 307.9624 lS[5 2 ]0 d196.7676 426.5225 m199.8877 409.0024 l203.0073 390.5225 l205.8877 374.9224 l208.2876 361.4824 l210.6875 349.9624 l212.6074 339.8823 l214.5273 331.0024 l217.6475 316.3623 l220.5273 304.8423 l222.9277 295.7227 l225.0874 288.5225 l228.9277 277.9624 l233.7275 268.3623 l236.3677 264.5225 l239.7275 261.1626 l244.2876 258.5225 l248.1274 257.8027 l249.3276 257.5625 l251.4873 257.8027 l254.1274 258.2827 l256.7676 258.7627 l258.9277 259.4824 l260.8477 260.2026 l262.7676 260.9224 l265.8877 262.3623 l268.7676 263.5625 l271.1675 264.7627 l273.5674 265.7227 l277.1675 267.6426 l281.9673 269.8027 l284.6074 271.0024 l287.9673 272.4424 l292.7676 274.3623 l296.6074 275.8027 l299.7275 277.2427 l302.6074 278.2026 l305.0073 279.1626 l307.1675 279.8823 l309.3276 280.6025 l311.0073 281.0825 l314.3677 282.0425 l317.0073 283.0024 l319.6475 283.7227 l321.8076 284.4424 l325.6475 285.4023 l330.2075 286.6025 l332.8477 287.3223 l336.2075 288.0425 l341.0073 289.0024 l344.8477 289.7227 l347.9673 290.4424 l350.8477 290.9224 l353.2476 291.4023 l355.6475 291.8823 l357.5674 292.1226 l359.4873 292.3623 l362.6074 292.8423 l365.4873 293.3223 l367.8877 293.8027 l370.0474 294.0425 l373.8877 294.5225 l378.6875 295.2427 l381.3276 295.7227 l384.6875 295.9624 l389.2476 296.6826 l393.0874 297.1626 l396.4473 297.6426 l399.0874 297.8823 l401.7275 298.3623 l403.8877 298.6025 l405.8076 298.8423 l407.7275 299.0825 l410.8477 299.3223 l413.7275 299.8027 l416.1274 300.0425 l418.5273 300.2827 lS[]0 d194.3677 426.5225 m196.0474 416.6826 l199.8877 395.0825 l203.0073 377.0825 l205.8877 361.9624 l208.2876 348.7627 l210.6875 337.4824 l212.6074 327.6426 l214.5273 319.0024 l217.6475 304.6025 l220.5273 293.3223 l222.9277 284.2026 l225.0874 277.2427 l228.9277 266.9224 l233.7275 257.8027 l236.3677 254.2026 l239.7275 250.8423 l244.2876 248.4424 l248.1274 247.9624 l248.1274 247.9624 l251.4873 248.2026 l254.1274 248.9224 l256.7676 249.6426 l258.9277 250.6025 l260.8477 251.3223 l262.7676 252.2827 l265.8877 253.7227 l268.7676 255.1626 l271.1675 256.3623 l273.5674 257.5625 l277.1675 259.4824 l281.9673 261.8823 l284.6074 263.0825 l287.9673 264.7627 l292.7676 266.6826 l296.6074 268.3623 l299.7275 269.8027 l302.6074 270.7627 l305.0073 271.7227 l307.1675 272.6826 l309.3276 273.4023 l311.0073 273.8823 l314.3677 275.0825 l317.0073 276.0425 l319.6475 276.7627 l321.8076 277.4824 l325.6475 278.4424 l330.2075 279.8823 l332.8477 280.6025 l336.2075 281.3223 l341.0073 282.5225 l344.8477 283.2427 l347.9673 283.9624 l350.8477 284.4424 l353.2476 284.9224 l355.6475 285.4023 l357.5674 285.6426 l359.4873 286.1226 l362.6074 286.6025 l365.4873 287.0825 l367.8877 287.5625 l370.0474 287.8027 l373.8877 288.5225 l378.6875 289.0024 l381.3276 289.4824 l384.6875 289.9624 l389.2476 290.6826 l393.0874 291.1626 l396.4473 291.4023 l399.0874 291.8823 l401.7275 292.1226 l403.8877 292.3623 l405.8076 292.6025 l407.7275 292.8423 l410.8477 293.3223 l413.7275 293.5625 l416.1274 294.0425 l418.5273 294.2827 lSu176.8799 203.1201 m418.5601 203.1201 lSUu0 To1 0 0 1 173 238.2002 0 Tp0 TvTP-7.5 0 Td0 Tr0 O0 g1 w%_ 0 50 XQ/_Times-Roman 10 10 -4.2822 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV36 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti2 Ta0 1 2 2 99 Th0 Tq0 Tg9.84 0 Tl0 Tc0 Tw( 1) Tx (\r) TX TO0 To1 0 0 1 173 291.6001 0 Tp0 TvTP-7.5 0 Td0 Tr( 2) Tx (\r) TX TO0 To1 0 0 1 173 324.7202 0 Tp0 TvTP-7.5 0 Td0 Tr( 3) Tx (\r) TX TO0 To1 0 0 1 173 348.2402 0 Tp0 TvTP-7.5 0 Td0 Tr( 4) Tx (\r) TX TO0 To1 0 0 1 173 366.48 0 Tp0 TvTP-7.5 0 Td0 Tr( 5) Tx (\r) TX TO0 To1 0 0 1 173 381.3599 0 Tp0 TvTP-7.5 0 Td0 Tr( 6) Tx (\r) TX TO0 To1 0 0 1 173 404.8799 0 Tp0 TvTP-7.5 0 Td0 Tr( 8) Tx (\r) TX TO0 To1 0 0 1 173 423.1201 0 Tp0 TvTP-10 0 Td0 Tr(10) Tx (\r) TX TOU1 Ap140 434.5 m140 106 L439.6665 106 L439.6665 434.5 L140 434.5 Lnu0 To1 0 0 1 225.5 228 0 Tp0 TvTP-6.25 0 Td0 Tr0 O0 g1 Ta(1.0) Tx (\r) TX TO0 To1 0 0 1 273.5 228 0 Tp0 TvTP-5 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 321 228 0 Tp0 TvTP-7.5 0 Td0 Tr(100) Tx (\r) TX TO0 To1 0 0 1 369 228 0 Tp0 TvTP-10 0 Td0 Tr(1000) Tx (\r) TX TO0 To1 0 0 1 416 228 0 Tp0 TvTP-13.25 0 Td0 Tr(1) Tx 150 Tt1.5 Tc(0) Tx 0 Tt0 Tc(000) Tx (\r) TX TO0 To1 0 0 1 176.5 228 0 Tp0 TvTP-6.25 0 Td0 Tr(0.1) Tx (\r) TX TOUu0 Ap0 R0 G0.5 w177 168 m418.6802 168 lS184.4399 168 m184.4399 170.6401 lS193.0801 170.6401 m193.0801 168 lS199.0801 168 m199.0801 170.6401 lS203.6401 170.6401 m203.6401 168 lS207.48 168 m207.48 170.6401 lS210.8398 170.6401 m210.8398 168 lS213.7202 168 m213.7202 170.6401 lS216.1201 170.6401 m216.1201 168 lS218.2798 168 m218.2798 176.1602 lS232.9199 170.6401 m232.9199 168 lS241.3198 168 m241.3198 170.6401 lS247.3198 170.6401 m247.3198 168 lS252.1201 168 m252.1201 170.6401 lS255.96 170.6401 m255.96 168 lS259.0801 168 m259.0801 170.6401 lS261.96 170.6401 m261.96 168 lS264.3599 168 m264.3599 170.6401 lS266.52 176.1602 m266.52 168 lS281.1602 168 m281.1602 170.6401 lS289.5601 170.6401 m289.5601 168 lS295.7998 168 m295.7998 170.6401 lS300.3599 170.6401 m300.3599 168 lS304.2002 168 m304.2002 170.6401 lS307.5601 170.6401 m307.5601 168 lS310.2002 168 m310.2002 170.6401 lS312.6001 170.6401 m312.6001 168 lS315 168 m315 176.1602 lS329.3999 170.6401 m329.3999 168 lS338.04 168 m338.04 170.6401 lS344.04 170.6401 m344.04 168 lS348.6001 168 m348.6001 170.6401 lS352.4399 170.6401 m352.4399 168 lS355.7998 168 m355.7998 170.6401 lS358.6802 170.6401 m358.6802 168 lS361.0801 168 m361.0801 170.6401 lS363.2402 176.1602 m363.2402 168 lS377.8799 168 m377.8799 170.6401 lS386.2798 170.6401 m386.2798 168 lS392.2798 168 m392.2798 170.6401 lS397.0801 170.6401 m397.0801 168 lS400.9199 168 m400.9199 170.6401 lS404.04 170.6401 m404.04 168 lS406.9199 168 m406.9199 170.6401 lS409.3198 170.6401 m409.3198 168 lS411.48 168 m411.48 176.1602 lSUu177 132.4976 m418.6802 132.4976 lS178.2002 132.4976 m178.2002 140.4175 lS192.8398 135.1377 m192.8398 132.4976 lS201.2402 132.4976 m201.2402 135.1377 lS207.48 135.1377 m207.48 132.4976 lS212.04 132.4976 m212.04 135.1377 lS215.8799 135.1377 m215.8799 132.4976 lS219.2402 132.4976 m219.2402 135.1377 lS221.8799 135.1377 m221.8799 132.4976 lS224.52 132.4976 m224.52 135.1377 lS226.6802 140.4175 m226.6802 132.4976 lS241.0801 132.4976 m241.0801 135.1377 lS249.7202 135.1377 m249.7202 132.4976 lS255.7202 132.4976 m255.7202 135.1377 lS260.2798 135.1377 m260.2798 132.4976 lS264.1201 132.4976 m264.1201 135.1377 lS267.48 135.1377 m267.48 132.4976 lS270.3599 132.4976 m270.3599 135.1377 lS272.7598 135.1377 m272.7598 132.4976 lS274.9199 132.4976 m274.9199 140.4175 lS289.5601 135.1377 m289.5601 132.4976 lS297.96 132.4976 m297.96 135.1377 lS303.96 135.1377 m303.96 132.4976 lS308.7598 132.4976 m308.7598 135.1377 lS312.6001 135.1377 m312.6001 132.4976 lS315.7202 132.4976 m315.7202 135.1377 lS318.6001 135.1377 m318.6001 132.4976 lS321 132.4976 m321 135.1377 lS323.1602 140.4175 m323.1602 132.4976 lS337.7998 132.4976 m337.7998 135.1377 lS346.2002 135.1377 m346.2002 132.4976 lS352.4399 132.4976 m352.4399 135.1377 lS357 135.1377 m357 132.4976 lS360.8398 132.4976 m360.8398 135.1377 lS364.2002 135.1377 m364.2002 132.4976 lS366.8398 132.4976 m366.8398 135.1377 lS369.48 135.1377 m369.48 132.4976 lS371.6401 132.4976 m371.6401 140.4175 lS386.04 135.1377 m386.04 132.4976 lS394.6802 132.4976 m394.6802 135.1377 lS400.6802 135.1377 m400.6802 132.4976 lS405.2402 132.4976 m405.2402 135.1377 lS409.0801 135.1377 m409.0801 132.4976 lS412.4399 132.4976 m412.4399 135.1377 lS415.3198 135.1377 m415.3198 132.4976 lS417.7202 132.4976 m417.7202 135.1377 lSU0 To1 0 0 1 300.6201 148.48 0 Tp0 TvTP-50.8252 0 Td0 Tr0 O0 g1 w10.97 0 Tl(Pion momentum \(GeV/) Tx /_Times-Italic 10 10 -4.126 Tf(c) Tx /_Times-Roman 10 10 -4.2822 Tf(\)) Tx (\r) TX TO0 To1 0 0 1 301.1602 113.04 0 Tp0 TvTP-54.9902 0 Td0 Tr(Proton momentum \(GeV/) Tx /_Times-Italic 10 10 -4.126 Tf(c) Tx /_Times-Roman 10 10 -4.2822 Tf(\)) Tx (\r) TX TOu0 To1 0 0 1 267.1201 158.8799 0 Tp0 TvTP-6.25 0 Td0 Tr9.84 0 Tl(1.0) Tx (\r) TX TO0 To1 0 0 1 315.1201 158.8799 0 Tp0 TvTP-5 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 362.6201 158.8799 0 Tp0 TvTP-7.5 0 Td0 Tr(100) Tx (\r) TX TO0 To1 0 0 1 410.6201 158.8799 0 Tp0 TvTP-10 0 Td0 Tr(1000) Tx (\r) TX TO0 To1 0 0 1 218.1201 158.8799 0 Tp0 TvTP-6.25 0 Td0 Tr(0.1) Tx (\r) TX TOUu0 To1 0 0 1 273.1201 193.6401 0 Tp0 TvTP-6.25 0 Td0 Tr(1.0) Tx (\r) TX TO0 To1 0 0 1 321.1201 193.6401 0 Tp0 TvTP-5 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 369.6201 193.6401 0 Tp0 TvTP-7.5 0 Td0 Tr(100) Tx (\r) TX TO0 To1 0 0 1 417.6201 193.6401 0 Tp0 TvTP-10 0 Td0 Tr(1000) Tx (\r) TX TO0 To1 0 0 1 224.1201 193.6401 0 Tp0 TvTP-6.25 0 Td0 Tr(0.1) Tx (\r) TX TOU1 Ap1 g0.48 w390 312 m390 314.5 L381 314.5 L381 312 L390 312 Lf1 w343.3335 278.6665 m343.3335 285.1665 L330.3335 285.1665 L330.3335 278.6665 L343.3335 278.6665 Lf353 288.5 m353 292.5 L338.5 292.5 L338.5 288.5 L353 288.5 Lf377.521 304.8125 m377.521 309.3125 L364.521 309.3125 L364.521 304.8125 L377.521 304.8125 Lfu0 Ap0.5 w249.5 406 m249.5 224.5 lNUu0 R0 G0.48 w254.23 354.5024 m254.23 351.1426 lS250.8701 294.5024 m250.8701 290.9023 lS253.75 285.8623 m253.75 282.5024 lS251.3501 279.6226 m251.3501 276.0225 lS251.1099 270.9824 m251.1099 267.3823 lS249.4302 259.7026 m249.4302 256.1025 lS248.23 250.1025 m248.23 246.5024 lSU0 To1 0 0 1 300 217.5 0 Tp0 TvTP-25.3629 0 Td0 Tr0 O0 g1 w/_Symbol 10 8.2715 -2.9883 Tf10.97 0 Tl(bg) Tx /_NewCenturySchlbk-Roman 10 8.7801 -2.57 Tf( ) Tx /_Times-Roman 10 10 -4.2822 Tf(=) Tx /_NewCenturySchlbk-Roman 10 8.7801 -2.57 Tf( ) Tx /_Times-Italic 10 10 -4.126 Tf(p) Tx 50 Tt0.5 Tc(/) Tx 0 Tt0 Tc(M) Tx 50 Tt0.5 Tc(c) Tx (\r) TX TO0 R0 G0.5 w190.4399 203.4399 m190.4399 206.0801 lS198.8398 206.0801 m198.8398 203.4399 lS204.8398 203.4399 m204.8398 206.0801 lS209.6401 206.0801 m209.6401 203.4399 lS213.48 203.4399 m213.48 206.0801 lS216.6001 206.0801 m216.6001 203.4399 lS219.48 203.4399 m219.48 206.0801 lS221.8799 206.0801 m221.8799 203.4399 lS224.04 203.4399 m224.04 211.6001 lS238.6802 206.0801 m238.6802 203.4399 lS247.0801 203.4399 m247.0801 206.0801 lS253.3198 206.0801 m253.3198 203.4399 lS257.8799 203.4399 m257.8799 206.0801 lS261.7202 206.0801 m261.7202 203.4399 lS265.0801 203.4399 m265.0801 206.0801 lS267.7202 206.0801 m267.7202 203.4399 lS270.1201 203.4399 m270.1201 206.0801 lS272.52 211.6001 m272.52 203.4399 lS286.9199 203.4399 m286.9199 206.0801 lS295.5601 206.0801 m295.5601 203.4399 lS301.5601 203.4399 m301.5601 206.0801 lS306.1201 206.0801 m306.1201 203.4399 lS309.96 203.4399 m309.96 206.0801 lS313.3198 206.0801 m313.3198 203.4399 lS316.2002 203.4399 m316.2002 206.0801 lS318.6001 206.0801 m318.6001 203.4399 lS320.7598 203.4399 m320.7598 211.6001 lS335.3999 206.0801 m335.3999 203.4399 lS343.7998 203.4399 m343.7998 206.0801 lS349.7998 206.0801 m349.7998 203.4399 lS354.6001 203.4399 m354.6001 206.0801 lS358.4399 206.0801 m358.4399 203.4399 lS361.5601 203.4399 m361.5601 206.0801 lS364.4399 206.0801 m364.4399 203.4399 lS366.8398 203.4399 m366.8398 206.0801 lS369 211.6001 m369 203.4399 lS383.6401 203.4399 m383.6401 206.0801 lS392.04 206.0801 m392.04 203.4399 lS398.2798 203.4399 m398.2798 206.0801 lS402.8398 206.0801 m402.8398 203.4399 lS406.6802 203.4399 m406.6802 206.0801 lS410.04 206.0801 m410.04 203.4399 lS412.6802 203.4399 m412.6802 206.0801 lS415.0801 206.0801 m415.0801 203.4399 lS417.48 203.4399 m417.48 211.6001 lS0 To1 0 0 1 300 184.4199 0 Tp0 TvTP-53.6011 0 Td0 Tr0 O0 g1 w/_Times-Roman 10 10 -4.2822 Tf0 Tt0 Tc(Muon momentum \(GeV/) Tx /_Times-Italic 10 10 -4.126 Tf(c) Tx /_Times-Roman 10 10 -4.2822 Tf(\)) Tx (\r) TX TO1 Ap1 g376.5 376 m376.5 386.5 L336.5 386.5 L336.5 376 L376.5 376 Lf363.5 374.5 m363.5 376.5 L345 376.5 L345 374.5 L363.5 374.5 Lf0 To1 0 0 1 357.5 377.5 0 Tp0 TvTP-16.8755 0 Td0 Tr0 g/_Times-Roman 9 9 -3.854 Tf(H) Tx /_Times-Roman 8 8 -3.4258 Tf-3 Ts(2) Tx /_Times-Roman 9 9 -3.854 Tf0 Ts( liquid) Tx (\r) TX TO1 g367 333 m367 342.5 L337 342.5 L337 333 L367 333 Lf358 332 m358 334.5 L352 334.5 L352 332 L358 332 Lf0 To1 0 0 1 352 334.5 0 Tp0 TvTP-12.3706 0 Td0 Tr0 1 1 0 k(He gas) Tx (\r) TX TO1 g390 312 m390 319 L381.5 319 L381.5 312 L390 312 Lf0 To1 0 0 1 385.5 311 0 Tp0 TvTP-3.0015 0 Td0 Tr0 g(C) Tx (\r) TX TO1 g366.6665 309.1665 m366.6665 302.5 L376 302.5 L376 309.1665 L366.6665 309.1665 Lf0 To1 0 0 1 370.8335 303.1665 0 Tp0 TvTP-4.5 0 Td0 Tr0 g(Al) Tx (\r) TX TO1 g352.6875 303.8125 m352.6875 295.8335 L363.6665 295.8335 L363.6665 303.8125 L352.6875 303.8125 Lf364.5 297.5 m364.5 302 L351.5 302 L351.5 297.5 L364.5 297.5 Lf0 To1 0 0 1 358 296.5 0 Tp0 TvTP-4.5 0 Td0 Tr0 g(Fe) Tx (\r) TX TO1 g352 287.5 m352 295.8335 L340 295.8335 L340 287.5 L352 287.5 Lf0 To1 0 0 1 346 288.5 0 Tp0 TvTP-4.7527 0 Td0 Tr0 g(Sn) Tx (\r) TX TO0 To1 0 0 1 336.5 279 0 Tp0 TvTP-4.7527 0 Td0 Tr(Pb) Tx (\r) TX TO0 To0 1 -1 0 159.1914 332.502 0 Tp0 TvTP-51.3084 0 Td0 Tr/_Symbol 10.0001 8.2716 -2.9883 Tf9.9729 0 Tl(\341) Tx /_NewCenturySchlbk-Roman 10.0001 8.7801 -2.5701 Tf100 Tt1 Tc(\320) Tx /_Times-Italic 10.0001 10.0001 -4.126 Tf0 Tt0 Tc(dE/dx) Tx /_Symbol 10.0001 8.2716 -2.9883 Tf(\361) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf( \(MeV ) Tx 100 Tt1 Tc(g) Tx /_Times-Roman 9 9 -3.854 Tf3 Ts0 Tt0 Tc(\320) Tx (1) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf0 Ts(cm) Tx /_Times-Roman 9 9 -3.854 Tf3 Ts(2) Tx /_Times-Roman 10.0001 10.0001 -4.2823 Tf0 Ts(\)) Tx (\r) TX TOLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 255 79 79 Lb(Layer 2) Ln0 Auu0 To1 0 0 1 226.1201 123.3174 0 Tp0 TvTP-6.25 0 Td0 Tr0 O0 g0 J 0 j 1 w 4 M []0 d0 XR%_ 0 50 XQ/_Times-Roman 10 10 -4.2822 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV36 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti1 Ta0 1 2 2 99 Th0 Tq0 Tg9.84 0 Tl0 Tc0 Tw(1.0) Tx (\r) TX TO0 To1 0 0 1 274.1201 123.3174 0 Tp0 TvTP-5 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 321.6201 123.3174 0 Tp0 TvTP-7.5 0 Td0 Tr(100) Tx (\r) TX TO0 To1 0 0 1 369.6201 123.3174 0 Tp0 TvTP-10 0 Td0 Tr(1000) Tx (\r) TX TO0 To1 0 0 1 416.6201 123.3174 0 Tp0 TvTP-13.25 0 Td0 Tr(1) Tx 150 Tt1.5 Tc(0) Tx 0 Tt0 Tc(000) Tx (\r) TX TO0 To1 0 0 1 177.1201 123.3174 0 Tp0 TvTP-6.25 0 Td0 Tr(0.1) Tx (\r) TX TOU0 Ap0 R0 G0.1 w 2.5 M237 127 mSU0 O0 g1 w 4 M233.5 203.5 mFLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF