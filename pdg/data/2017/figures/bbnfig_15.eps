%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: bbnfig_15-7.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 3/7/16
%%BoundingBox: 0 -20 440 487
%%HiResBoundingBox: 0 -20 439.7456 486.8560
%%CropBox: 0 -20 439.7456 486.8560
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2016-03-07T12:12:53-08:00</xmp:CreateDate>
         <xmp:MetadataDate>2016-03-07T12:12:54-08:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-03-07T12:12:54-08:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>232</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXm/5pReeH13Rm8r/XKLbXJnWBpVgM4urJoFkKukSkwrcgNIrqO6n4cVSjUfO35tW8&#xA;2qSXdpa6Pplgl/PbXl3bNwuDE1utlbmQTlI3uHeZQfi+ytAeQqqjNQ8yfnPbuY00uDhWAvMtrJP6&#xA;aS/VWYr6c/7xl9S5Rl4Cnpqf2hyVX+atZ/NORfL9zpekS+pHbQahdW0RKrJdNa3QuLW4rJHxSKX6&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>6.541667</stDim:w>
            <stDim:h>7.194444</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=0 B=255 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">bbnfig_15-4</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:FA7F1174072068118083D4D13B8530DE</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FA7F1174072068118083D4D13B8530DE</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:02801174072068118083D6ECA56A546E</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F97F1174072068118083D4D13B8530DE</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F1174072068118083D4D13B8530DE</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:02801174072068118083D6ECA56A546E</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-24T13:31:43-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03801174072068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-24T13:31:53-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:04801174072068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-26T12:09:10-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-26T12:38:01-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:09801174072068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-26T15:02:05-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3A0769AD552068118083D6ECA56A546E</stEvt:instanceID>
                  <stEvt:when>2016-02-26T15:17:19-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083D1ABCCFD01D4</stEvt:instanceID>
                  <stEvt:when>2016-03-02T11:51:30-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03801174072068118083D1ABCCFD01D4</stEvt:instanceID>
                  <stEvt:when>2016-03-02T11:51:46-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:04801174072068118083D1ABCCFD01D4</stEvt:instanceID>
                  <stEvt:when>2016-03-02T11:52:12-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118083D4D13B8530DE</stEvt:instanceID>
                  <stEvt:when>2016-03-07T12:11:44-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068118083D4D13B8530DE</stEvt:instanceID>
                  <stEvt:when>2016-03-07T12:12:04-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118083D4D13B8530DE</stEvt:instanceID>
                  <stEvt:when>2016-03-07T12:12:42-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118083D4D13B8530DE</stEvt:instanceID>
                  <stEvt:when>2016-03-07T12:12:54-08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -486.856 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 486.856 li
439.746 486.856 li
439.746 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
1 lj
10 ml
[1.44 2.88 ] 0 dsh
true sadj
185.053 130.103 mo
185.053 72.9829 li
432.733 72.9829 li
432.733 130.103 li
185.053 130.103 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
185.053 72.9834 mo
432.733 72.9829 li
432.733 130.103 li
185.053 130.103 li
1 1 0 rgb
ef
185.053 130.103 mo
0 0 0 rgb
@
65.0527 167.063 mo
66.0127 166.583 li
66.0127 166.583 li
78.7329 161.303 li
91.2129 156.263 li
103.933 151.703 li
116.413 147.383 li
129.133 143.543 li
141.613 139.703 li
154.333 136.103 li
167.053 132.743 li
179.533 129.383 li
192.253 126.263 li
204.733 123.383 li
217.453 120.503 li
229.933 117.863 li
242.653 114.983 li
255.132 112.583 li
267.853 109.943 li
280.333 107.543 li
293.053 105.143 li
305.533 102.743 li
318.252 100.343 li
330.733 97.9434 li
343.453 95.7832 li
355.933 93.623 li
368.653 91.4629 li
381.132 89.3032 li
393.853 87.1431 li
406.333 84.9829 li
419.053 82.8232 li
431.533 80.6631 li
432.733 80.6631 li
432.733 83.3032 li
431.533 83.543 li
431.533 83.543 li
419.053 85.7031 li
406.333 87.8633 li
393.853 89.7832 li
381.132 91.9434 li
368.653 94.103 li
355.933 96.5029 li
343.453 98.6631 li
330.733 100.823 li
318.252 103.223 li
305.533 105.623 li
293.053 108.023 li
280.333 110.423 li
267.853 112.823 li
255.132 115.463 li
242.653 117.863 li
229.933 120.743 li
217.453 123.383 li
204.733 126.263 li
192.253 129.383 li
179.533 132.503 li
167.053 135.623 li
154.333 138.983 li
141.613 142.583 li
129.133 146.423 li
116.413 150.503 li
103.933 154.823 li
91.2129 159.383 li
78.7329 164.423 li
68.4126 168.503 li
65.0527 168.503 li
1 0 1 rgb
ef
.666667 lw
[] 0 dsh
65.0527 168.503 mo
66.0127 168.023 li
78.7329 162.743 li
91.2129 157.943 li
103.933 153.383 li
116.413 149.063 li
129.133 144.983 li
141.613 141.143 li
154.333 137.543 li
167.053 134.183 li
179.533 130.823 li
192.252 127.943 li
204.733 124.823 li
217.453 121.943 li
229.933 119.303 li
242.653 116.423 li
255.132 114.023 li
267.853 111.383 li
280.333 108.983 li
293.052 106.583 li
305.533 104.183 li
318.252 101.783 li
330.733 99.3833 li
343.453 97.2231 li
355.933 95.0635 li
368.653 92.6631 li
381.132 90.7432 li
393.853 88.583 li
406.333 86.4233 li
419.052 84.2632 li
431.533 82.103 li
432.733 82.103 li
0 0 0 rgb
@
344.893 168.503 mo
342.973 166.583 li
349.933 168.503 mo
342.973 161.543 li
354.733 168.503 mo
342.973 156.743 li
359.773 168.503 mo
342.973 151.703 li
364.813 168.503 mo
342.973 146.663 li
368.653 167.543 mo
342.973 141.863 li
368.653 162.743 mo
342.973 136.823 li
368.653 157.703 mo
342.973 132.023 li
368.653 152.663 mo
342.973 126.983 li
368.653 147.863 mo
342.973 121.943 li
368.653 142.823 mo
342.973 117.143 li
368.653 138.023 mo
342.973 112.103 li
368.653 132.983 mo
342.973 107.063 li
368.653 127.943 mo
342.973 102.263 li
368.653 123.143 mo
342.973 97.2231 li
368.653 118.103 mo
342.973 92.4233 li
368.653 113.063 mo
342.973 87.3833 li
368.653 108.263 mo
342.973 82.3433 li
368.653 103.223 mo
342.973 77.543 li
368.653 98.4233 mo
342.973 72.5029 li
368.653 93.3833 mo
342.973 67.4629 li
368.653 88.3433 mo
342.973 62.6631 li
368.653 83.543 mo
342.973 57.623 li
368.653 78.5029 mo
342.973 52.583 li
368.653 73.4629 mo
342.973 47.7832 li
368.653 68.6631 mo
342.973 42.7432 li
368.653 63.623 mo
342.973 37.9434 li
368.653 58.583 mo
342.973 32.9033 li
368.653 53.7832 mo
343.453 28.583 li
368.653 48.7432 mo
348.493 28.583 li
368.653 43.9434 mo
353.533 28.583 li
368.653 38.9033 mo
358.333 28.583 li
368.653 33.8633 mo
363.373 28.583 li
368.653 29.063 mo
368.172 28.583 li
1 0 1 rgb
@
342.973 166.583 mo
0 0 0 rgb
@
350.172 33.3833 mo
354.733 28.583 li
350.172 38.1831 mo
356.653 31.7031 li
350.172 43.2231 mo
356.653 36.5029 li
350.172 48.2632 mo
356.653 41.543 li
350.172 53.063 mo
356.653 46.583 li
350.172 58.103 mo
356.653 51.3833 li
350.172 62.9033 mo
356.653 56.4229 li
350.172 67.9434 mo
356.653 61.4629 li
350.172 72.9829 mo
356.653 66.2632 li
350.172 77.7832 mo
356.653 71.3032 li
350.172 82.8232 mo
356.653 76.103 li
350.172 87.8633 mo
356.653 81.1431 li
350.172 92.6631 mo
356.653 86.1831 li
350.172 97.7031 mo
356.653 90.9829 li
350.172 102.503 mo
356.653 96.0229 li
350.172 107.543 mo
356.653 101.063 li
350.172 112.583 mo
356.653 105.863 li
350.172 117.383 mo
356.653 110.903 li
350.172 122.423 mo
356.653 115.703 li
350.172 127.463 mo
356.653 120.743 li
350.172 132.263 mo
356.653 125.783 li
350.172 137.303 mo
356.653 130.583 li
350.172 142.343 mo
356.653 135.623 li
350.172 147.143 mo
356.653 140.663 li
350.172 152.183 mo
356.653 145.463 li
350.172 156.983 mo
356.653 150.503 li
350.172 162.023 mo
356.653 155.543 li
350.172 167.063 mo
356.653 160.343 li
353.533 168.503 mo
356.653 165.383 li
0 1 1 rgb
@
354.733 28.583 mo
0 0 0 rgb
@
1 lw
354.733 28.5835 mo
@
.333333 lw
354.733 28.5835 mo
0 0 1 rgb
@
65.0527 185.783 mo
66.0127 186.023 li
66.0127 186.023 li
78.7329 189.143 li
91.2129 192.263 li
103.933 195.623 li
116.413 198.743 li
129.133 201.863 li
141.613 204.983 li
154.333 208.103 li
167.053 211.223 li
179.533 214.343 li
192.253 217.463 li
204.733 220.343 li
217.453 223.463 li
229.933 226.343 li
242.653 229.463 li
255.132 232.343 li
267.853 235.223 li
280.333 238.343 li
293.053 241.223 li
305.533 244.103 li
318.252 246.983 li
330.733 249.863 li
343.453 252.983 li
355.933 255.863 li
368.653 258.983 li
381.132 261.863 li
393.853 264.983 li
406.333 268.104 li
419.053 271.463 li
431.533 274.824 li
432.733 275.064 li
432.733 281.542 li
431.533 281.302 li
431.533 281.302 li
419.053 277.462 li
406.333 273.863 li
393.853 270.503 li
381.132 267.144 li
368.653 263.783 li
355.933 260.663 li
343.453 257.543 li
330.733 254.423 li
318.252 251.303 li
305.533 248.183 li
293.053 245.303 li
280.333 242.183 li
267.853 239.303 li
255.132 236.183 li
242.653 233.303 li
229.933 230.183 li
217.453 227.303 li
204.733 224.183 li
192.253 221.063 li
179.533 217.943 li
167.053 214.823 li
154.333 211.703 li
141.613 208.583 li
129.133 205.463 li
116.413 202.343 li
103.933 198.983 li
91.2129 195.863 li
78.7329 192.743 li
66.0127 189.623 li
65.0527 189.383 li
ef
.666667 lw
65.0527 187.463 mo
66.0127 187.703 li
78.7329 190.823 li
91.2129 194.183 li
103.933 197.303 li
116.413 200.423 li
129.133 203.543 li
141.613 206.663 li
154.333 209.783 li
167.053 212.903 li
179.533 216.023 li
192.252 219.143 li
204.733 222.263 li
217.453 225.143 li
229.933 228.263 li
242.653 231.143 li
255.132 234.263 li
267.853 237.143 li
280.333 240.263 li
293.052 243.143 li
305.533 246.023 li
318.252 249.143 li
330.733 252.023 li
343.453 255.143 li
355.933 258.263 li
368.653 261.143 li
381.132 264.503 li
393.853 267.623 li
406.333 270.983 li
419.052 274.343 li
431.533 277.703 li
432.733 277.943 li
0 0 0 rgb
@
.333333 lw
432.733 277.943 mo
1 0 0 rgb
@
65.0527 248.423 mo
66.0127 248.663 li
66.0127 248.663 li
78.7329 250.103 li
91.2129 251.543 li
103.933 252.983 li
116.413 254.183 li
129.133 255.623 li
141.613 256.823 li
154.333 258.263 li
167.053 259.463 li
179.533 260.663 li
192.253 261.863 li
204.733 263.303 li
217.453 264.503 li
229.933 265.703 li
242.653 266.903 li
255.132 267.863 li
267.853 269.063 li
280.333 270.263 li
293.053 271.463 li
305.533 272.423 li
318.252 273.623 li
330.733 274.583 li
343.453 275.783 li
355.933 276.744 li
368.653 277.703 li
381.132 278.664 li
393.853 279.623 li
406.333 280.583 li
419.053 281.542 li
431.533 282.503 li
432.733 282.503 li
432.733 292.583 li
431.533 292.583 li
431.533 292.583 li
419.053 291.382 li
406.333 290.423 li
393.853 289.222 li
381.132 288.023 li
368.653 286.824 li
355.933 285.623 li
343.453 284.423 li
330.733 282.984 li
318.252 281.783 li
305.533 280.343 li
293.053 278.904 li
280.333 277.462 li
267.853 276.023 li
255.132 274.583 li
242.653 273.144 li
229.933 271.703 li
217.453 270.263 li
204.733 268.823 li
192.253 267.383 li
179.533 265.943 li
167.053 264.503 li
154.333 263.063 li
141.613 261.623 li
129.133 260.183 li
116.413 258.743 li
103.933 257.303 li
91.2129 255.863 li
78.7329 254.423 li
66.0127 252.983 li
65.0527 252.743 li
ef
.666667 lw
65.0527 250.583 mo
66.0127 250.583 li
78.7329 252.263 li
91.2129 253.703 li
103.933 255.143 li
116.413 256.343 li
129.133 257.783 li
141.613 259.223 li
154.333 260.423 li
167.053 261.863 li
179.533 263.063 li
192.252 264.503 li
204.733 265.943 li
217.453 267.144 li
229.933 268.583 li
242.653 269.783 li
255.132 270.983 li
267.853 272.423 li
280.333 273.623 li
293.052 274.824 li
305.533 276.023 li
318.252 277.224 li
330.733 278.423 li
343.453 279.623 li
355.933 280.824 li
368.653 281.783 li
381.132 282.984 li
393.853 283.943 li
406.333 284.904 li
419.052 285.863 li
431.533 287.064 li
432.733 287.064 li
0 0 0 rgb
@
[1.44 2.88 ] 0 dsh
342.973 258.743 mo
342.973 257.303 li
370.333 257.303 li
370.333 258.743 li
342.973 258.743 li
@
[] 0 dsh
344.893 308.664 mo
342.973 306.503 li
349.933 308.664 mo
342.973 301.703 li
354.733 308.664 mo
342.973 296.664 li
359.773 308.664 mo
342.973 291.863 li
364.813 308.664 mo
342.973 286.824 li
368.653 307.703 mo
342.973 281.783 li
368.653 302.664 mo
342.973 276.984 li
368.653 297.863 mo
342.973 271.943 li
368.653 292.824 mo
342.973 266.903 li
368.653 287.783 mo
342.973 262.103 li
368.653 282.984 mo
342.973 257.063 li
368.653 277.943 mo
342.973 252.263 li
368.653 272.904 mo
342.973 247.223 li
368.653 268.104 mo
342.973 242.183 li
368.653 263.063 mo
342.973 237.383 li
368.653 258.263 mo
342.973 232.343 li
368.653 253.223 mo
342.973 227.303 li
368.653 248.183 mo
342.973 222.503 li
368.653 243.383 mo
342.973 217.463 li
368.653 238.343 mo
342.973 212.663 li
368.653 233.303 mo
342.973 207.623 li
368.653 228.503 mo
342.973 202.583 li
368.653 223.463 mo
342.973 197.783 li
368.653 218.663 mo
342.973 192.743 li
368.653 213.623 mo
342.973 187.703 li
368.653 208.583 mo
342.973 182.903 li
368.653 203.783 mo
342.973 177.863 li
368.653 198.743 mo
342.973 172.823 li
368.653 193.703 mo
343.453 168.503 li
368.653 188.903 mo
348.493 168.503 li
368.653 183.863 mo
353.533 168.503 li
368.653 178.823 mo
358.333 168.503 li
368.653 174.023 mo
363.373 168.503 li
368.653 168.983 mo
368.172 168.503 li
1 0 1 rgb
@
342.973 306.503 mo
0 0 0 rgb
@
350.172 173.303 mo
354.733 168.503 li
350.172 178.343 mo
356.653 171.623 li
350.172 183.143 mo
356.653 176.663 li
350.172 188.183 mo
356.653 181.703 li
350.172 193.223 mo
356.653 186.503 li
350.172 198.023 mo
356.653 191.543 li
350.172 203.063 mo
356.653 196.343 li
350.172 208.103 mo
356.653 201.383 li
350.172 212.903 mo
356.653 206.423 li
350.172 217.943 mo
356.653 211.223 li
350.172 222.743 mo
356.653 216.263 li
350.172 227.783 mo
356.653 221.303 li
350.172 232.823 mo
356.653 226.103 li
350.172 237.623 mo
356.653 231.143 li
350.172 242.663 mo
356.653 235.943 li
350.172 247.703 mo
356.653 240.983 li
350.172 252.503 mo
356.653 246.023 li
350.172 257.543 mo
356.653 250.823 li
350.172 262.583 mo
356.653 255.863 li
350.172 267.383 mo
356.653 260.903 li
350.172 272.423 mo
356.653 265.703 li
350.172 277.222 mo
356.653 270.743 li
350.172 282.263 mo
356.653 275.542 li
350.172 287.302 mo
356.653 280.583 li
350.172 292.103 mo
356.653 285.623 li
350.172 297.144 mo
356.653 290.423 li
350.172 302.183 mo
356.653 295.462 li
350.172 306.984 mo
356.653 300.503 li
353.533 308.664 mo
356.653 305.302 li
0 1 1 rgb
@
1 lw
[1.44 2.88 ] 0 dsh
91.4526 424.583 mo
91.4526 391.943 li
312.013 391.943 li
312.013 424.583 li
91.4526 424.583 li
0 0 0 rgb
@
91.4526 391.943 mo
312.013 391.943 li
312.013 424.583 li
91.4526 424.583 li
1 1 0 rgb
ef
91.4526 424.583 mo
0 0 0 rgb
@
65.0527 346.343 mo
66.0127 347.064 li
66.0127 347.064 li
78.7329 354.503 li
91.2129 362.183 li
103.933 369.623 li
116.413 377.064 li
129.133 384.023 li
141.613 390.744 li
154.333 396.984 li
167.053 402.744 li
179.533 407.542 li
192.253 411.382 li
204.733 414.023 li
217.453 414.984 li
229.933 414.263 li
242.653 411.623 li
255.132 407.302 li
267.853 401.783 li
280.333 395.064 li
293.053 387.863 li
305.533 380.183 li
318.252 372.263 li
330.733 364.583 li
343.453 356.904 li
355.933 349.462 li
368.653 342.263 li
381.132 335.302 li
393.853 328.824 li
406.333 322.824 li
419.053 316.824 li
431.533 311.542 li
432.733 311.064 li
432.733 308.664 li
432.733 336.984 li
431.533 337.462 li
431.533 337.462 li
419.053 342.984 li
406.333 348.744 li
393.853 354.744 li
381.132 361.222 li
368.653 367.943 li
355.933 374.904 li
343.453 381.863 li
330.733 389.064 li
318.252 396.263 li
305.533 403.222 li
293.053 409.943 li
280.333 416.183 li
267.853 421.943 li
255.132 426.744 li
242.653 430.343 li
229.933 433.222 li
217.453 434.664 li
204.733 434.904 li
192.253 433.703 li
179.533 431.302 li
167.053 427.703 li
154.333 423.144 li
141.613 417.863 li
129.133 411.863 li
116.413 405.382 li
103.933 398.423 li
91.2129 391.462 li
78.7329 384.023 li
66.0127 376.824 li
65.0527 376.103 li
0 1 0 rgb
ef
.666667 lw
[] 0 dsh
65.0527 358.824 mo
66.0127 359.302 li
78.7329 366.984 li
91.2129 374.423 li
103.933 381.623 li
116.413 388.824 li
129.133 395.783 li
141.613 402.263 li
154.333 408.263 li
167.053 413.542 li
179.533 417.863 li
192.252 421.222 li
204.733 423.144 li
217.453 423.623 li
229.933 422.664 li
242.653 420.023 li
255.132 415.943 li
267.853 410.664 li
280.333 404.423 li
293.052 397.462 li
305.533 390.263 li
318.252 382.583 li
330.733 375.144 li
343.453 367.462 li
355.933 360.263 li
368.653 353.302 li
381.132 346.343 li
393.853 339.863 li
406.333 333.863 li
419.052 328.103 li
431.533 322.583 li
432.733 322.103 li
0 0 0 rgb
@
1 lw
432.733 322.103 mo
@
344.893 448.583 mo
342.973 446.664 li
349.933 448.583 mo
342.973 441.623 li
354.733 448.583 mo
342.973 436.824 li
359.773 448.583 mo
342.973 431.783 li
364.813 448.583 mo
342.973 426.744 li
368.653 447.623 mo
342.973 421.943 li
368.653 442.824 mo
342.973 416.904 li
368.653 437.783 mo
342.973 412.103 li
368.653 432.744 mo
342.973 407.064 li
368.653 427.943 mo
342.973 402.023 li
368.653 422.904 mo
342.973 397.222 li
368.653 418.103 mo
342.973 392.183 li
368.653 413.064 mo
342.973 387.144 li
368.653 408.023 mo
342.973 382.343 li
368.653 403.222 mo
342.973 377.302 li
368.653 398.183 mo
342.973 372.503 li
368.653 393.144 mo
342.973 367.462 li
368.653 388.343 mo
342.973 362.423 li
368.653 383.302 mo
342.973 357.623 li
368.653 378.503 mo
342.973 352.583 li
368.653 373.462 mo
342.973 347.542 li
368.653 368.423 mo
342.973 342.744 li
368.653 363.623 mo
342.973 337.703 li
368.653 358.583 mo
342.973 332.664 li
368.653 353.542 mo
342.973 327.863 li
368.653 348.744 mo
342.973 322.824 li
368.653 343.703 mo
342.973 318.023 li
368.653 338.664 mo
342.973 312.984 li
368.653 333.863 mo
343.453 308.664 li
368.653 328.824 mo
348.493 308.664 li
368.653 324.023 mo
353.533 308.664 li
368.653 318.984 mo
358.333 308.664 li
368.653 313.943 mo
363.373 308.664 li
368.653 309.144 mo
368.413 308.664 li
1 0 1 rgb
@
342.973 446.664 mo
0 0 0 rgb
@
350.172 313.462 mo
354.733 308.664 li
350.172 318.263 mo
356.653 311.783 li
350.172 323.302 mo
356.653 316.583 li
350.172 328.343 mo
356.653 321.623 li
350.172 333.144 mo
356.653 326.664 li
350.172 338.183 mo
356.653 331.462 li
350.172 342.984 mo
356.653 336.503 li
350.172 348.023 mo
356.653 341.542 li
350.172 353.064 mo
356.653 346.343 li
350.172 357.863 mo
356.653 351.382 li
350.172 362.904 mo
356.653 356.183 li
350.172 367.943 mo
356.653 361.222 li
350.172 372.744 mo
356.653 366.263 li
350.172 377.783 mo
356.653 371.064 li
350.172 382.583 mo
356.653 376.103 li
350.172 387.623 mo
356.653 381.144 li
350.172 392.664 mo
356.653 385.943 li
350.172 397.462 mo
356.653 390.984 li
350.172 402.503 mo
356.653 395.783 li
350.172 407.542 mo
356.653 400.824 li
350.172 412.343 mo
356.653 405.863 li
350.172 417.382 mo
356.653 410.664 li
350.172 422.423 mo
356.653 415.703 li
350.172 427.222 mo
356.653 420.744 li
350.172 432.263 mo
356.653 425.542 li
350.172 437.064 mo
356.653 430.583 li
350.172 442.103 mo
356.653 435.623 li
350.172 447.144 mo
356.653 440.423 li
353.533 448.583 mo
356.653 445.462 li
0 1 1 rgb
@
.5 lw
432.733 328.583 mo
421.693 328.583 li
432.733 333.144 mo
427.212 333.144 li
432.733 338.423 mo
427.212 338.423 li
432.733 344.183 mo
427.212 344.183 li
432.733 350.904 mo
427.212 350.904 li
432.733 358.824 mo
427.212 358.824 li
432.733 368.423 mo
427.212 368.423 li
432.733 380.904 mo
427.212 380.904 li
432.733 398.664 mo
427.212 398.664 li
432.733 428.664 mo
421.693 428.664 li
432.733 433.222 mo
427.212 433.222 li
432.733 438.263 mo
427.212 438.263 li
432.733 444.263 mo
427.212 444.263 li
432.733 448.583 mo
432.733 308.664 li
76.0928 328.583 mo
65.0527 328.583 mo
76.0928 328.583 li
65.0527 333.144 mo
70.5728 333.144 li
65.0527 338.423 mo
70.5728 338.423 li
65.0527 344.183 mo
70.5728 344.183 li
65.0527 350.904 mo
70.5728 350.904 li
65.0527 358.824 mo
70.5728 358.824 li
65.0527 368.423 mo
70.5728 368.423 li
65.0527 380.904 mo
70.5728 380.904 li
65.0527 398.664 mo
70.5728 398.664 li
76.0928 428.664 mo
65.0527 428.664 mo
76.0928 428.664 li
65.0527 433.222 mo
70.5728 433.222 li
65.0527 438.263 mo
70.5728 438.263 li
65.0527 444.263 mo
70.5728 444.263 li
65.0527 448.583 mo
65.0527 308.664 li
65.0527 448.583 mo
432.733 448.583 li
0 0 0 rgb
@
432.733 328.583 mo
421.693 328.583 li
76.0928 328.583 mo
65.0527 344.183 mo
70.5728 344.183 li
76.0928 428.664 mo
432.733 308.664 mo
432.733 319.462 li
432.733 437.783 mo
351.132 448.583 mo
351.132 443.302 li
65.0527 437.783 mo
421.693 168.504 mo
421.693 168.503 mo
421.693 168.503 mo
421.693 168.503 mo
421.693 168.503 mo
421.693 168.503 mo
432.733 168.503 mo
421.693 168.503 li
432.733 171.144 mo
427.212 171.144 li
432.733 174.023 mo
427.212 174.023 li
432.733 177.383 mo
427.212 177.383 li
432.733 180.983 mo
427.212 180.983 li
432.733 185.543 mo
427.212 185.543 li
432.733 190.823 mo
427.212 190.823 li
432.733 197.783 mo
427.212 197.783 li
432.733 207.863 mo
427.212 207.863 li
432.733 224.664 mo
421.693 224.664 li
432.733 227.063 mo
427.212 227.063 li
432.733 229.943 mo
427.212 229.943 li
432.733 233.304 mo
427.212 233.304 li
432.733 237.144 mo
427.212 237.144 li
432.733 241.463 mo
427.212 241.463 li
432.733 246.983 mo
427.212 246.983 li
432.733 253.943 mo
427.212 253.943 li
432.733 263.783 mo
427.212 263.783 li
432.733 280.583 mo
421.693 280.583 li
432.733 283.224 mo
427.212 283.224 li
432.733 286.103 mo
427.212 286.103 li
432.733 289.224 mo
427.212 289.224 li
432.733 293.064 mo
427.212 293.064 li
432.733 297.384 mo
427.212 297.384 li
432.733 302.904 mo
427.212 302.904 li
432.733 308.664 mo
432.733 168.503 li
76.0928 168.503 mo
65.0527 168.503 mo
76.0928 168.503 li
65.0527 171.144 mo
70.5728 171.144 li
65.0527 174.023 mo
70.5728 174.023 li
65.0527 177.383 mo
70.5728 177.383 li
65.0527 180.983 mo
70.5728 180.983 li
65.0527 185.543 mo
70.5728 185.543 li
65.0527 190.823 mo
70.5728 190.823 li
65.0527 197.783 mo
70.5728 197.783 li
65.0527 207.863 mo
70.5728 207.863 li
76.0928 224.663 mo
65.0527 224.663 mo
76.0928 224.663 li
65.0527 227.063 mo
70.5728 227.063 li
65.0527 229.943 mo
70.5728 229.943 li
65.0527 233.303 mo
70.5728 233.303 li
65.0527 237.143 mo
70.5728 237.143 li
65.0527 241.463 mo
70.5728 241.463 li
65.0527 246.983 mo
70.5728 246.983 li
65.0527 253.943 mo
70.5728 253.943 li
65.0527 263.783 mo
70.5728 263.783 li
76.0928 280.583 mo
65.0527 280.583 mo
76.0928 280.583 li
65.0527 283.222 mo
70.5728 283.222 li
65.0527 286.103 mo
70.5728 286.103 li
65.0527 289.222 mo
70.5728 289.222 li
65.0527 293.064 mo
70.5728 293.064 li
65.0527 297.382 mo
70.5728 297.382 li
65.0527 302.904 mo
70.5728 302.904 li
65.0527 308.664 mo
65.0527 168.503 li
432.733 168.503 mo
432.733 179.543 li
415.933 168.503 mo
415.933 174.023 li
396.973 168.503 mo
396.973 174.023 li
375.613 168.503 mo
375.613 174.023 li
351.132 168.503 mo
351.132 174.023 li
322.092 168.503 mo
322.092 174.023 li
286.333 168.503 mo
286.333 174.023 li
240.493 168.503 mo
240.493 174.023 li
175.693 168.503 mo
175.693 174.023 li
65.0527 168.503 mo
65.0527 179.543 li
65.0527 168.503 mo
432.733 168.503 li
432.733 308.664 mo
432.733 297.623 li
65.0527 308.664 mo
65.0527 297.623 li
421.693 28.584 mo
421.693 28.584 mo
421.693 28.584 mo
421.693 28.5835 mo
432.733 31.4639 mo
427.212 31.4639 li
432.733 34.3438 mo
427.212 34.3438 li
432.733 37.2236 mo
427.212 37.2236 li
432.733 40.3438 mo
427.212 40.3438 li
432.733 43.2236 mo
427.212 43.2236 li
432.733 46.1035 mo
427.212 46.1035 li
432.733 48.9834 mo
427.212 48.9834 li
432.733 51.8638 mo
427.212 51.8638 li
432.733 54.7437 mo
427.212 54.7437 li
432.733 57.6235 mo
421.693 57.6235 li
432.733 60.7437 mo
427.212 60.7437 li
432.733 63.6235 mo
427.212 63.6235 li
432.733 66.5034 mo
427.212 66.5034 li
432.733 69.3838 mo
427.212 69.3838 li
432.733 72.2637 mo
427.212 72.2637 li
432.733 75.1436 mo
427.212 75.1436 li
432.733 78.2637 mo
427.212 78.2637 li
432.733 81.1436 mo
427.212 81.1436 li
432.733 84.0234 mo
427.212 84.0234 li
432.733 86.9033 mo
421.693 86.9033 li
432.733 89.7837 mo
427.212 89.7837 li
432.733 92.6636 mo
427.212 92.6636 li
432.733 95.5435 mo
427.212 95.5435 li
432.733 98.6636 mo
427.212 98.6636 li
432.733 101.543 mo
427.212 101.543 li
432.733 104.424 mo
427.212 104.424 li
432.733 107.304 mo
427.212 107.304 li
432.733 110.184 mo
427.212 110.184 li
432.733 113.063 mo
427.212 113.063 li
432.733 116.184 mo
421.693 116.184 li
432.733 119.063 mo
427.212 119.063 li
432.733 121.943 mo
427.212 121.943 li
432.733 124.824 mo
427.212 124.824 li
432.733 127.704 mo
427.212 127.704 li
432.733 130.583 mo
427.212 130.583 li
432.733 133.704 mo
427.212 133.704 li
432.733 136.583 mo
427.212 136.583 li
432.733 139.464 mo
427.212 139.464 li
432.733 142.344 mo
427.212 142.344 li
432.733 145.224 mo
421.693 145.224 li
432.733 148.104 mo
427.212 148.104 li
432.733 150.983 mo
427.212 150.983 li
432.733 154.104 mo
427.212 154.104 li
432.733 156.983 mo
427.212 156.983 li
432.733 159.864 mo
427.212 159.864 li
432.733 162.744 mo
427.212 162.744 li
432.733 165.624 mo
427.212 165.624 li
432.733 168.503 mo
427.212 168.503 li
432.733 168.503 mo
432.733 28.5835 li
65.0527 31.4634 mo
70.5728 31.4634 li
65.0527 34.3433 mo
70.5728 34.3433 li
65.0527 37.2236 mo
70.5728 37.2236 li
65.0527 40.3433 mo
70.5728 40.3433 li
65.0527 43.2236 mo
70.5728 43.2236 li
65.0527 46.1035 mo
70.5728 46.1035 li
65.0527 48.9834 mo
70.5728 48.9834 li
65.0527 51.8633 mo
70.5728 51.8633 li
65.0527 54.7432 mo
70.5728 54.7432 li
65.0527 57.6235 mo
76.0928 57.6235 li
65.0527 60.7432 mo
70.5728 60.7432 li
65.0527 63.6235 mo
70.5728 63.6235 li
65.0527 66.5034 mo
70.5728 66.5034 li
65.0527 69.3833 mo
70.5728 69.3833 li
65.0527 72.2632 mo
70.5728 72.2632 li
65.0527 75.1436 mo
70.5728 75.1436 li
65.0527 78.2632 mo
70.5728 78.2632 li
65.0527 81.1436 mo
70.5728 81.1436 li
65.0527 84.0234 mo
70.5728 84.0234 li
65.0527 86.9033 mo
76.0928 86.9033 li
65.0527 89.7832 mo
70.5728 89.7832 li
65.0527 92.6631 mo
70.5728 92.6631 li
65.0527 95.5435 mo
70.5728 95.5435 li
65.0527 98.6631 mo
70.5728 98.6631 li
65.0527 101.543 mo
70.5728 101.543 li
65.0527 104.423 mo
70.5728 104.423 li
65.0527 107.303 mo
70.5728 107.303 li
65.0527 110.183 mo
70.5728 110.183 li
65.0527 113.063 mo
70.5728 113.063 li
65.0527 116.183 mo
76.0928 116.183 li
65.0527 119.063 mo
70.5728 119.063 li
65.0527 121.943 mo
70.5728 121.943 li
65.0527 124.823 mo
70.5728 124.823 li
65.0527 127.703 mo
70.5728 127.703 li
65.0527 130.583 mo
70.5728 130.583 li
65.0527 133.703 mo
70.5728 133.703 li
65.0527 136.583 mo
70.5728 136.583 li
65.0527 139.463 mo
70.5728 139.463 li
65.0527 142.343 mo
70.5728 142.343 li
65.0527 145.223 mo
76.0928 145.223 li
65.0527 148.103 mo
70.5728 148.103 li
65.0527 150.983 mo
70.5728 150.983 li
65.0527 154.103 mo
70.5728 154.103 li
65.0527 156.983 mo
70.5728 156.983 li
65.0527 159.863 mo
70.5728 159.863 li
65.0527 162.743 mo
70.5728 162.743 li
65.0527 165.623 mo
70.5728 165.623 li
65.0527 168.503 mo
70.5728 168.503 li
65.0527 168.503 mo
65.0527 28.583 li
432.733 168.503 mo
432.733 157.703 li
415.933 168.503 mo
415.933 163.223 li
396.973 168.503 mo
396.973 163.223 li
375.613 168.503 mo
375.613 163.223 li
351.132 168.503 mo
351.132 163.223 li
322.092 168.503 mo
322.092 163.223 li
286.333 168.503 mo
286.333 163.223 li
240.493 168.503 mo
240.493 163.223 li
175.693 168.503 mo
175.693 163.223 li
65.0527 168.503 mo
65.0527 157.703 li
65.0527 168.503 mo
432.733 168.503 li
401.292 34.1035 mo
401.292 28.5835 mo
401.292 34.1035 li
336.733 28.5835 mo
336.733 34.1035 li
226.092 39.3833 mo
226.092 28.583 mo
226.092 39.3833 li
209.052 28.583 mo
209.052 34.103 li
190.333 28.583 mo
190.333 34.103 li
168.973 28.583 mo
168.973 34.103 li
144.493 28.583 mo
144.493 34.103 li
115.453 28.583 mo
115.453 34.103 li
79.6929 28.583 mo
79.6929 34.103 li
65.0527 28.583 mo
432.733 28.583 li
@
1.5 lw
0 lj
342.973 258.743 mo
370.333 258.743 li
370.333 257.303 li
342.973 257.303 li
342.973 258.743 li
cp
@
342.973 258.743 mo
370.333 258.743 li
370.333 257.303 li
342.973 257.303 li
342.973 258.743 li
cp
.976471 1 0 rgb
ef
.5 lw
1 lj
65.0527 308.543 mo
432.733 308.543 li
0 0 0 rgb
@
175.693 308.543 mo
175.693 303.263 li
@
240.493 308.543 mo
240.493 303.263 li
@
286.333 308.543 mo
286.333 303.263 li
@
322.092 308.543 mo
322.092 303.263 li
@
351.132 308.543 mo
351.132 303.263 li
@
375.613 308.543 mo
375.613 303.263 li
@
396.973 308.543 mo
396.973 303.263 li
@
415.933 308.543 mo
415.933 303.263 li
@
175.693 308.543 mo
175.693 314.064 li
@
240.493 308.543 mo
240.493 314.064 li
@
286.333 308.543 mo
286.333 314.064 li
@
322.092 308.543 mo
322.092 314.064 li
@
351.132 308.543 mo
351.132 314.064 li
@
375.613 308.543 mo
375.613 314.064 li
@
396.973 308.543 mo
396.973 314.064 li
@
415.933 308.543 mo
415.933 314.064 li
@
1 lw
175.693 448.463 mo
175.693 443.183 li
@
240.493 448.463 mo
240.493 443.183 li
@
286.333 448.463 mo
286.333 443.183 li
@
322.092 448.463 mo
322.092 443.183 li
@
351.132 448.463 mo
351.132 443.183 li
@
375.613 448.463 mo
375.613 443.183 li
@
396.973 448.463 mo
396.973 443.183 li
@
415.933 448.463 mo
415.933 443.183 li
@
147.773 216.51 mo
104.44 216.51 li
104.44 189.383 li
147.773 189.383 li
147.773 216.51 li
cp
1 1 1 rgb
f
152.879 275.177 mo
99.1064 275.177 li
99.1064 243.843 li
152.879 243.843 li
152.879 275.177 li
cp
f
356.653 227.423 mo
346.618 227.423 li
346.618 198.276 li
356.653 198.276 li
356.653 227.423 li
cp
f
368.127 227.423 mo
358.092 227.423 li
358.092 198.276 li
368.127 198.276 li
368.127 227.423 li
cp
f
432.021 456.492 mo
432.023 456.501 432.024 456.524 432.024 456.559 cv
432.024 463.614 li
432.024 463.915 432.104 464.106 432.265 464.188 cv
432.426 464.27 432.727 464.319 433.167 464.334 cv
433.167 464.499 li
429.856 464.499 li
429.856 464.323 li
430.329 464.299 430.637 464.235 430.782 464.129 cv
430.926 464.024 430.999 463.795 430.999 463.444 cv
430.999 458.018 li
430.999 457.831 430.975 457.688 430.928 457.59 cv
430.881 457.493 430.78 457.444 430.624 457.444 cv
430.522 457.444 430.39 457.472 430.228 457.529 cv
430.066 457.585 429.915 457.645 429.774 457.708 cv
429.774 457.543 li
431.924 456.448 li
431.995 456.448 li
432.01 456.467 432.019 456.482 432.021 456.492 cv
cp
0 0 0 rgb
f
438.263 463.333 mo
438.478 462.705 438.585 461.795 438.585 460.605 cv
438.585 459.657 438.521 458.899 438.392 458.333 cv
438.15 457.28 437.697 456.752 437.033 456.752 cv
436.369 456.752 435.914 457.295 435.667 458.38 cv
435.539 458.958 435.474 459.719 435.474 460.664 cv
435.474 461.549 435.541 462.258 435.673 462.789 cv
435.923 463.78 436.392 464.276 437.08 464.276 cv
437.654 464.276 438.048 463.961 438.263 463.333 cv
cp
439.154 457.848 mo
439.548 458.61 439.746 459.485 439.746 460.473 cv
439.746 461.25 439.625 461.983 439.382 462.67 cv
438.925 463.963 438.134 464.61 437.009 464.61 cv
436.24 464.61 435.607 464.26 435.111 463.561 cv
434.58 462.815 434.314 461.801 434.314 460.52 cv
434.314 459.512 434.492 458.645 434.847 457.918 cv
435.328 456.93 436.066 456.436 437.062 456.436 cv
437.96 456.436 438.658 456.907 439.154 457.848 cv
cp
f
172.442 464.211 mo
173.872 462.728 174.843 461.639 175.354 460.944 cv
175.866 460.25 176.122 459.573 176.122 458.913 cv
176.122 458.335 175.966 457.895 175.653 457.593 cv
175.341 457.291 174.968 457.139 174.534 457.139 cv
173.999 457.139 173.565 457.334 173.233 457.724 cv
173.05 457.939 172.874 458.269 172.706 458.713 cv
172.454 458.662 li
172.649 457.763 172.98 457.139 173.447 456.791 cv
173.914 456.441 174.415 456.266 174.95 456.266 cv
175.61 456.266 176.145 456.474 176.553 456.89 cv
176.961 457.305 177.165 457.814 177.165 458.415 cv
177.165 459.055 176.944 459.671 176.502 460.265 cv
176.061 460.858 175.102 461.914 173.625 463.432 cv
176.315 463.432 li
176.69 463.432 176.954 463.387 177.106 463.297 cv
177.259 463.208 177.431 462.989 177.622 462.642 cv
177.774 462.712 li
177.124 464.346 li
172.442 464.346 li
172.442 464.211 li
cp
f
239.103 463.664 mo
239.457 463.888 239.756 464 240.002 464 cv
240.549 464 240.956 463.816 241.221 463.446 cv
241.487 463.077 241.62 462.674 241.62 462.24 cv
241.62 461.821 241.512 461.454 241.297 461.136 cv
240.934 460.6 240.321 460.333 239.458 460.333 cv
239.407 460.333 239.358 460.333 239.311 460.335 cv
239.264 460.337 239.209 460.342 239.147 460.35 cv
239.135 460.198 li
239.76 459.971 240.252 459.711 240.612 459.418 cv
240.971 459.125 241.151 458.739 241.151 458.258 cv
241.151 457.833 241.009 457.508 240.726 457.286 cv
240.443 457.063 240.12 456.952 239.756 456.952 cv
239.327 456.952 238.948 457.11 238.62 457.426 cv
238.44 457.598 238.247 457.864 238.04 458.223 cv
237.858 458.182 li
238.014 457.588 238.305 457.114 238.731 456.758 cv
239.157 456.403 239.649 456.225 240.208 456.225 cv
240.805 456.225 241.267 456.389 241.593 456.717 cv
241.919 457.045 242.083 457.424 242.083 457.854 cv
242.083 458.233 241.948 458.581 241.678 458.897 cv
241.526 459.077 241.29 459.278 240.969 459.5 cv
241.344 459.661 241.645 459.848 241.872 460.063 cv
242.297 460.473 242.51 460.993 242.51 461.622 cv
242.51 462.364 242.218 463.018 241.634 463.584 cv
241.05 464.151 240.219 464.434 239.141 464.434 cv
238.661 464.434 238.324 464.363 238.13 464.22 cv
237.937 464.078 237.84 463.924 237.84 463.76 cv
237.84 463.659 237.873 463.561 237.937 463.467 cv
238.001 463.374 238.106 463.327 238.25 463.327 cv
238.465 463.327 238.75 463.439 239.103 463.664 cv
cp
f
286.209 457.505 mo
283.334 461.569 li
286.209 461.569 li
286.209 457.505 li
cp
286.596 456.295 mo
287.153 456.295 li
287.153 461.569 li
288.377 461.569 li
288.377 462.348 li
287.153 462.348 li
287.153 464.346 li
286.221 464.346 li
286.221 462.348 li
282.846 462.348 li
282.846 461.569 li
286.596 456.295 li
cp
f
320.951 463.652 mo
321.313 463.904 321.591 464.03 321.787 464.03 cv
322.237 464.03 322.63 463.832 322.966 463.435 cv
323.303 463.039 323.471 462.551 323.471 461.973 cv
323.471 460.961 322.931 460.233 321.852 459.788 cv
321.253 459.542 320.696 459.418 320.179 459.418 cv
320.093 459.418 320.04 459.416 320.018 459.41 cv
319.997 459.404 319.97 459.383 319.939 459.348 cv
319.947 459.317 319.954 459.291 319.959 459.269 cv
319.965 459.248 319.972 459.227 319.98 459.208 cv
321.258 456.407 li
323.77 456.407 li
323.895 456.407 323.992 456.385 324.06 456.342 cv
324.128 456.299 324.217 456.219 324.327 456.102 cv
324.42 456.184 li
323.969 457.268 li
323.954 457.303 323.911 457.326 323.84 457.335 cv
323.77 457.345 323.694 457.35 323.612 457.35 cv
321.341 457.35 li
320.842 458.375 li
321.484 458.485 321.953 458.588 322.25 458.686 cv
322.739 458.85 323.148 459.092 323.476 459.413 cv
323.757 459.69 323.971 460.001 324.116 460.347 cv
324.26 460.693 324.333 461.059 324.333 461.446 cv
324.333 462.309 324.025 463.03 323.409 463.608 cv
322.792 464.186 322.013 464.475 321.071 464.475 cv
320.687 464.475 320.378 464.438 320.144 464.364 cv
319.752 464.243 319.557 464.026 319.557 463.713 cv
319.557 463.596 319.599 463.494 319.683 463.406 cv
319.767 463.318 319.897 463.274 320.074 463.274 cv
320.296 463.274 320.589 463.4 320.951 463.652 cv
cp
f
352.24 460.749 mo
351.966 460.077 351.501 459.741 350.845 459.741 cv
350.24 459.741 349.837 459.92 349.638 460.28 cv
349.521 460.491 349.462 460.842 349.462 461.334 cv
349.462 461.971 349.599 462.594 349.871 463.204 cv
350.142 463.813 350.57 464.118 351.156 464.118 cv
351.621 464.118 351.958 463.919 352.169 463.523 cv
352.38 463.126 352.486 462.663 352.486 462.131 cv
352.486 461.612 352.404 461.151 352.24 460.749 cv
cp
352.871 463.614 mo
352.412 464.188 351.814 464.475 351.08 464.475 cv
350.392 464.475 349.767 464.153 349.203 463.508 cv
348.638 462.864 348.355 462.006 348.355 460.936 cv
348.355 459.557 348.902 458.374 349.996 457.385 cv
350.972 456.557 352.07 456.143 353.289 456.143 cv
353.318 456.336 li
352.83 456.426 352.41 456.548 352.056 456.703 cv
351.703 456.857 351.386 457.073 351.109 457.35 cv
350.824 457.631 350.556 457.989 350.306 458.422 cv
350.056 458.856 349.884 459.286 349.791 459.711 cv
350.033 459.563 350.242 459.454 350.417 459.383 cv
350.73 459.258 351.044 459.196 351.361 459.196 cv
351.982 459.196 352.503 459.411 352.925 459.84 cv
353.347 460.27 353.558 460.883 353.558 461.68 cv
353.558 462.395 353.33 463.04 352.871 463.614 cv
cp
f
378.098 456.407 mo
378.098 456.6 li
375.555 464.458 li
374.786 464.458 li
377.154 457.292 li
374.6 457.292 li
374.221 457.292 373.949 457.354 373.783 457.479 cv
373.617 457.604 373.407 457.866 373.153 458.264 cv
372.948 458.17 li
373.202 457.545 373.359 457.16 373.419 457.013 cv
373.48 456.867 373.559 456.665 373.657 456.407 cv
378.098 456.407 li
cp
f
398.191 459.022 mo
398.433 458.722 398.554 458.359 398.554 457.934 cv
398.554 457.564 398.441 457.249 398.212 456.989 cv
397.984 456.73 397.636 456.6 397.171 456.6 cv
396.812 456.6 396.515 456.713 396.281 456.94 cv
396.046 457.166 395.929 457.441 395.929 457.764 cv
395.929 458.131 396.068 458.471 396.343 458.786 cv
396.619 459.099 396.98 459.395 397.429 459.671 cv
397.796 459.415 398.05 459.198 398.191 459.022 cv
cp
398.373 463.767 mo
398.603 463.517 398.718 463.206 398.718 462.831 cv
398.718 462.406 398.597 462.061 398.353 461.798 cv
398.109 461.535 397.607 461.136 396.849 460.602 cv
396.513 460.812 396.269 461.085 396.117 461.42 cv
395.964 461.756 395.888 462.08 395.888 462.392 cv
395.888 462.926 396.027 463.351 396.302 463.667 cv
396.578 463.983 396.927 464.141 397.353 464.141 cv
397.802 464.141 398.142 464.016 398.373 463.767 cv
cp
395.472 459.36 mo
395.183 458.985 395.039 458.571 395.039 458.118 cv
395.039 457.602 395.253 457.165 395.681 456.805 cv
396.109 456.446 396.664 456.266 397.347 456.266 cv
397.976 456.266 398.476 456.436 398.847 456.776 cv
399.218 457.116 399.404 457.51 399.404 457.959 cv
399.404 458.417 399.214 458.828 398.835 459.191 cv
398.617 459.398 398.263 459.636 397.775 459.906 cv
398.439 460.398 398.916 460.827 399.203 461.192 cv
399.49 461.557 399.632 461.987 399.632 462.483 cv
399.632 463.045 399.421 463.518 398.998 463.901 cv
398.574 464.284 398.005 464.475 397.294 464.475 cv
396.658 464.475 396.113 464.298 395.658 463.945 cv
395.203 463.591 394.974 463.125 394.974 462.547 cv
394.974 462.051 395.132 461.614 395.449 461.235 cv
395.656 460.989 396.015 460.694 396.527 460.35 cv
396.011 459.936 395.66 459.606 395.472 459.36 cv
cp
f
416.671 460.766 mo
416.955 460.618 417.117 460.493 417.156 460.391 cv
417.171 460.352 417.185 460.207 417.197 459.955 cv
417.208 459.703 417.214 459.499 417.214 459.342 cv
417.214 458.53 417.078 457.87 416.802 457.362 cv
416.529 456.854 416.128 456.6 415.599 456.6 cv
415.216 456.6 414.906 456.774 414.669 457.122 cv
414.431 457.469 414.314 457.989 414.314 458.68 cv
414.314 459.25 414.423 459.778 414.646 460.262 cv
414.867 460.747 415.267 460.989 415.845 460.989 cv
416.113 460.989 416.386 460.915 416.671 460.766 cv
cp
417.671 457.294 mo
418.14 457.98 418.375 458.745 418.375 459.588 cv
418.375 460.182 418.263 460.786 418.041 461.399 cv
417.818 462.012 417.494 462.559 417.068 463.04 cv
416.572 463.594 415.943 464.006 415.181 464.276 cv
414.755 464.428 414.218 464.545 413.57 464.627 cv
413.511 464.393 li
413.917 464.299 414.255 464.2 414.527 464.094 cv
415.011 463.903 415.4 463.668 415.695 463.391 cv
416.109 462.997 416.441 462.556 416.689 462.07 cv
416.937 461.583 417.093 461.176 417.156 460.848 cv
416.951 461 li
416.66 461.216 416.32 461.365 415.929 461.447 cv
415.726 461.493 415.541 461.516 415.371 461.516 cv
414.707 461.516 414.179 461.281 413.791 460.811 cv
413.4 460.34 413.207 459.78 413.207 459.128 cv
413.207 458.297 413.437 457.612 413.9 457.074 cv
414.363 456.536 414.957 456.266 415.679 456.266 cv
416.539 456.266 417.203 456.609 417.671 457.294 cv
cp
f
65.3682 456.492 mo
65.3701 456.501 65.3711 456.524 65.3711 456.559 cv
65.3711 463.614 li
65.3711 463.915 65.4517 464.106 65.6123 464.188 cv
65.7734 464.27 66.0737 464.319 66.5137 464.334 cv
66.5137 464.499 li
63.2031 464.499 li
63.2031 464.323 li
63.6758 464.299 63.9844 464.235 64.1289 464.129 cv
64.2734 464.024 64.3457 463.795 64.3457 463.444 cv
64.3457 458.018 li
64.3457 457.831 64.3223 457.688 64.2754 457.59 cv
64.2285 457.493 64.127 457.444 63.9707 457.444 cv
63.8691 457.444 63.7373 457.472 63.5752 457.529 cv
63.4131 457.585 63.2617 457.645 63.1211 457.708 cv
63.1211 457.543 li
65.2715 456.448 li
65.3418 456.448 li
65.3574 456.467 65.3662 456.482 65.3682 456.492 cv
cp
f
220.769 23.2485 mo
220.984 22.6196 221.091 21.7104 221.091 20.52 cv
221.091 19.5713 221.027 18.8145 220.898 18.2485 cv
220.656 17.1943 220.203 16.6675 219.539 16.6675 cv
218.875 16.6675 218.419 17.21 218.173 18.2949 cv
218.044 18.8726 217.98 19.6338 217.98 20.5786 cv
217.98 21.4644 218.046 22.1729 218.179 22.7036 cv
218.429 23.6953 218.898 24.1909 219.585 24.1909 cv
220.16 24.1909 220.554 23.8765 220.769 23.2485 cv
cp
221.66 17.7632 mo
222.054 18.5249 222.251 19.3999 222.251 20.3882 cv
222.251 21.1655 222.13 21.8979 221.888 22.5854 cv
221.431 23.8784 220.64 24.5249 219.515 24.5249 cv
218.746 24.5249 218.113 24.1753 217.617 23.4761 cv
217.085 22.73 216.82 21.7163 216.82 20.4351 cv
216.82 19.4272 216.998 18.5601 217.353 17.8335 cv
217.833 16.8452 218.572 16.3511 219.568 16.3511 cv
220.466 16.3511 221.164 16.8218 221.66 17.7632 cv
cp
f
224.197 24.3579 mo
224.068 24.2271 224.003 24.0698 224.003 23.8862 cv
224.003 23.7026 224.069 23.5464 224.2 23.4175 cv
224.331 23.2886 224.488 23.2241 224.671 23.2241 cv
224.855 23.2241 225.011 23.2886 225.14 23.4175 cv
225.269 23.5464 225.333 23.7026 225.333 23.8862 cv
225.333 24.0698 225.27 24.2271 225.143 24.3579 cv
225.016 24.4888 224.859 24.5542 224.671 24.5542 cv
224.484 24.5542 224.326 24.4888 224.197 24.3579 cv
cp
f
229.769 23.2485 mo
229.984 22.6196 230.091 21.7104 230.091 20.52 cv
230.091 19.5713 230.027 18.8145 229.898 18.2485 cv
229.656 17.1943 229.203 16.6675 228.539 16.6675 cv
227.875 16.6675 227.419 17.21 227.173 18.2949 cv
227.044 18.8726 226.98 19.6338 226.98 20.5786 cv
226.98 21.4644 227.046 22.1729 227.179 22.7036 cv
227.429 23.6953 227.898 24.1909 228.585 24.1909 cv
229.16 24.1909 229.554 23.8765 229.769 23.2485 cv
cp
230.66 17.7632 mo
231.054 18.5249 231.251 19.3999 231.251 20.3882 cv
231.251 21.1655 231.13 21.8979 230.888 22.5854 cv
230.431 23.8784 229.64 24.5249 228.515 24.5249 cv
227.746 24.5249 227.113 24.1753 226.617 23.4761 cv
226.085 22.73 225.82 21.7163 225.82 20.4351 cv
225.82 19.4272 225.998 18.5601 226.353 17.8335 cv
226.833 16.8452 227.572 16.3511 228.568 16.3511 cv
229.466 16.3511 230.164 16.8218 230.66 17.7632 cv
cp
f
235.292 16.4067 mo
235.293 16.4165 235.294 16.439 235.294 16.4741 cv
235.294 23.5288 li
235.294 23.8296 235.375 24.021 235.536 24.103 cv
235.697 24.1851 235.998 24.2339 236.437 24.2495 cv
236.437 24.4136 li
233.126 24.4136 li
233.126 24.2378 li
233.599 24.2144 233.908 24.1499 234.052 24.0444 cv
234.197 23.939 234.269 23.7104 234.269 23.3589 cv
234.269 17.9331 li
234.269 17.7456 234.246 17.603 234.199 17.5054 cv
234.152 17.4077 234.05 17.3589 233.894 17.3589 cv
233.792 17.3589 233.661 17.3872 233.499 17.4438 cv
233.336 17.5005 233.185 17.5601 233.044 17.6226 cv
233.044 17.4585 li
235.195 16.3628 li
235.265 16.3628 li
235.281 16.3823 235.29 16.397 235.292 16.4067 cv
cp
f
331.281 23.2485 mo
331.496 22.6196 331.603 21.7104 331.603 20.52 cv
331.603 19.5713 331.539 18.8145 331.41 18.2485 cv
331.167 17.1943 330.714 16.6675 330.05 16.6675 cv
329.386 16.6675 328.931 17.21 328.685 18.2949 cv
328.556 18.8726 328.492 19.6338 328.492 20.5786 cv
328.492 21.4644 328.558 22.1729 328.691 22.7036 cv
328.941 23.6953 329.41 24.1909 330.097 24.1909 cv
330.671 24.1909 331.066 23.8765 331.281 23.2485 cv
cp
332.171 17.7632 mo
332.566 18.5249 332.763 19.3999 332.763 20.3882 cv
332.763 21.1655 332.642 21.8979 332.4 22.5854 cv
331.943 23.8784 331.152 24.5249 330.027 24.5249 cv
329.257 24.5249 328.625 24.1753 328.128 23.4761 cv
327.597 22.73 327.332 21.7163 327.332 20.4351 cv
327.332 19.4272 327.509 18.5601 327.865 17.8335 cv
328.345 16.8452 329.083 16.3511 330.08 16.3511 cv
330.978 16.3511 331.675 16.8218 332.171 17.7632 cv
cp
f
334.708 24.3579 mo
334.58 24.2271 334.515 24.0698 334.515 23.8862 cv
334.515 23.7026 334.581 23.5464 334.711 23.4175 cv
334.842 23.2886 335 23.2241 335.183 23.2241 cv
335.367 23.2241 335.523 23.2886 335.652 23.4175 cv
335.781 23.5464 335.845 23.7026 335.845 23.8862 cv
335.845 24.0698 335.782 24.2271 335.655 24.3579 cv
335.528 24.4888 335.371 24.5542 335.183 24.5542 cv
334.996 24.5542 334.837 24.4888 334.708 24.3579 cv
cp
f
340.281 23.2485 mo
340.496 22.6196 340.603 21.7104 340.603 20.52 cv
340.603 19.5713 340.539 18.8145 340.41 18.2485 cv
340.167 17.1943 339.714 16.6675 339.05 16.6675 cv
338.386 16.6675 337.931 17.21 337.685 18.2949 cv
337.556 18.8726 337.492 19.6338 337.492 20.5786 cv
337.492 21.4644 337.558 22.1729 337.691 22.7036 cv
337.941 23.6953 338.41 24.1909 339.097 24.1909 cv
339.671 24.1909 340.066 23.8765 340.281 23.2485 cv
cp
341.171 17.7632 mo
341.566 18.5249 341.763 19.3999 341.763 20.3882 cv
341.763 21.1655 341.642 21.8979 341.4 22.5854 cv
340.943 23.8784 340.152 24.5249 339.027 24.5249 cv
338.257 24.5249 337.625 24.1753 337.128 23.4761 cv
336.597 22.73 336.332 21.7163 336.332 20.4351 cv
336.332 19.4272 336.509 18.5601 336.865 17.8335 cv
337.345 16.8452 338.083 16.3511 339.08 16.3511 cv
339.978 16.3511 340.675 16.8218 341.171 17.7632 cv
cp
f
342.583 24.2788 mo
344.013 22.7954 344.984 21.7065 345.496 21.0117 cv
346.007 20.3169 346.263 19.6396 346.263 18.9805 cv
346.263 18.4028 346.107 17.9629 345.794 17.6602 cv
345.482 17.3579 345.109 17.2065 344.675 17.2065 cv
344.14 17.2065 343.707 17.4019 343.375 17.792 cv
343.191 18.0068 343.015 18.3364 342.847 18.7813 cv
342.595 18.7285 li
342.791 17.8306 343.122 17.207 343.588 16.8574 cv
344.055 16.5083 344.556 16.3335 345.091 16.3335 cv
345.751 16.3335 346.286 16.5415 346.694 16.957 cv
347.102 17.3726 347.306 17.8813 347.306 18.4819 cv
347.306 19.1221 347.085 19.7388 346.644 20.332 cv
346.203 20.9253 345.243 21.981 343.766 23.4995 cv
346.457 23.4995 li
346.832 23.4995 347.095 23.4546 347.248 23.3647 cv
347.4 23.2754 347.572 23.0566 347.763 22.7095 cv
347.916 22.7793 li
347.265 24.4136 li
342.583 24.4136 li
342.583 24.2788 li
cp
f
395.365 23.2485 mo
395.58 22.6196 395.687 21.7104 395.687 20.52 cv
395.687 19.5713 395.623 18.8145 395.494 18.2485 cv
395.251 17.1943 394.798 16.6675 394.134 16.6675 cv
393.47 16.6675 393.015 17.21 392.769 18.2949 cv
392.64 18.8726 392.576 19.6338 392.576 20.5786 cv
392.576 21.4644 392.642 22.1729 392.775 22.7036 cv
393.025 23.6953 393.494 24.1909 394.181 24.1909 cv
394.755 24.1909 395.15 23.8765 395.365 23.2485 cv
cp
396.255 17.7632 mo
396.65 18.5249 396.847 19.3999 396.847 20.3882 cv
396.847 21.1655 396.726 21.8979 396.484 22.5854 cv
396.027 23.8784 395.236 24.5249 394.111 24.5249 cv
393.341 24.5249 392.708 24.1753 392.212 23.4761 cv
391.681 22.73 391.416 21.7163 391.416 20.4351 cv
391.416 19.4272 391.593 18.5601 391.949 17.8335 cv
392.429 16.8452 393.167 16.3511 394.164 16.3511 cv
395.062 16.3511 395.759 16.8218 396.255 17.7632 cv
cp
f
398.792 24.3579 mo
398.664 24.2271 398.599 24.0698 398.599 23.8862 cv
398.599 23.7026 398.665 23.5464 398.795 23.4175 cv
398.926 23.2886 399.083 23.2241 399.267 23.2241 cv
399.451 23.2241 399.607 23.2886 399.736 23.4175 cv
399.865 23.5464 399.929 23.7026 399.929 23.8862 cv
399.929 24.0698 399.866 24.2271 399.739 24.3579 cv
399.612 24.4888 399.455 24.5542 399.267 24.5542 cv
399.08 24.5542 398.921 24.4888 398.792 24.3579 cv
cp
f
404.365 23.2485 mo
404.58 22.6196 404.687 21.7104 404.687 20.52 cv
404.687 19.5713 404.623 18.8145 404.494 18.2485 cv
404.251 17.1943 403.798 16.6675 403.134 16.6675 cv
402.47 16.6675 402.015 17.21 401.769 18.2949 cv
401.64 18.8726 401.576 19.6338 401.576 20.5786 cv
401.576 21.4644 401.642 22.1729 401.775 22.7036 cv
402.025 23.6953 402.494 24.1909 403.181 24.1909 cv
403.755 24.1909 404.15 23.8765 404.365 23.2485 cv
cp
405.255 17.7632 mo
405.65 18.5249 405.847 19.3999 405.847 20.3882 cv
405.847 21.1655 405.726 21.8979 405.484 22.5854 cv
405.027 23.8784 404.236 24.5249 403.111 24.5249 cv
402.341 24.5249 401.708 24.1753 401.212 23.4761 cv
400.681 22.73 400.416 21.7163 400.416 20.4351 cv
400.416 19.4272 400.593 18.5601 400.949 17.8335 cv
401.429 16.8452 402.167 16.3511 403.164 16.3511 cv
404.062 16.3511 404.759 16.8218 405.255 17.7632 cv
cp
f
408.094 23.731 mo
408.448 23.9556 408.748 24.0679 408.994 24.0679 cv
409.541 24.0679 409.947 23.8828 410.212 23.5132 cv
410.478 23.1436 410.611 22.7417 410.611 22.3071 cv
410.611 21.8887 410.503 21.521 410.289 21.2041 cv
409.925 20.668 409.312 20.3999 408.449 20.3999 cv
408.398 20.3999 408.349 20.4009 408.302 20.4028 cv
408.255 20.4048 408.201 20.4097 408.138 20.4175 cv
408.126 20.2651 li
408.751 20.0386 409.244 19.7788 409.603 19.4858 cv
409.962 19.1929 410.142 18.8062 410.142 18.3257 cv
410.142 17.8999 410 17.5757 409.717 17.353 cv
409.434 17.1304 409.111 17.019 408.748 17.019 cv
408.318 17.019 407.939 17.1772 407.611 17.4937 cv
407.431 17.6655 407.238 17.9312 407.031 18.2905 cv
406.849 18.2495 li
407.005 17.6558 407.296 17.1812 407.722 16.8257 cv
408.148 16.4702 408.64 16.2925 409.199 16.2925 cv
409.796 16.2925 410.258 16.4565 410.584 16.7847 cv
410.911 17.1128 411.074 17.4917 411.074 17.9214 cv
411.074 18.3003 410.939 18.6479 410.669 18.9644 cv
410.517 19.144 410.281 19.3452 409.96 19.5679 cv
410.335 19.728 410.636 19.9155 410.863 20.1304 cv
411.289 20.5405 411.501 21.0601 411.501 21.689 cv
411.501 22.4312 411.209 23.0854 410.625 23.6519 cv
410.042 24.2183 409.21 24.5015 408.132 24.5015 cv
407.652 24.5015 407.315 24.4302 407.122 24.2876 cv
406.928 24.145 406.832 23.9917 406.832 23.8276 cv
406.832 23.7261 406.864 23.6284 406.928 23.5347 cv
406.993 23.4409 407.097 23.394 407.242 23.394 cv
407.457 23.394 407.741 23.5063 408.094 23.731 cv
cp
f
105.831 23.2485 mo
106.045 22.6196 106.153 21.7104 106.153 20.52 cv
106.153 19.5713 106.088 18.8145 105.959 18.2485 cv
105.717 17.1943 105.264 16.6675 104.6 16.6675 cv
103.936 16.6675 103.481 17.21 103.235 18.2949 cv
103.106 18.8726 103.042 19.6338 103.042 20.5786 cv
103.042 21.4644 103.108 22.1729 103.241 22.7036 cv
103.491 23.6953 103.959 24.1909 104.647 24.1909 cv
105.221 24.1909 105.616 23.8765 105.831 23.2485 cv
cp
106.721 17.7632 mo
107.116 18.5249 107.313 19.3999 107.313 20.3882 cv
107.313 21.1655 107.192 21.8979 106.95 22.5854 cv
106.493 23.8784 105.702 24.5249 104.577 24.5249 cv
103.807 24.5249 103.174 24.1753 102.678 23.4761 cv
102.147 22.73 101.881 21.7163 101.881 20.4351 cv
101.881 19.4272 102.059 18.5601 102.415 17.8335 cv
102.895 16.8452 103.633 16.3511 104.629 16.3511 cv
105.528 16.3511 106.225 16.8218 106.721 17.7632 cv
cp
f
109.258 24.3579 mo
109.129 24.2271 109.065 24.0698 109.065 23.8862 cv
109.065 23.7026 109.13 23.5464 109.261 23.4175 cv
109.392 23.2886 109.549 23.2241 109.733 23.2241 cv
109.917 23.2241 110.073 23.2886 110.202 23.4175 cv
110.331 23.5464 110.395 23.7026 110.395 23.8862 cv
110.395 24.0698 110.332 24.2271 110.205 24.3579 cv
110.078 24.4888 109.92 24.5542 109.733 24.5542 cv
109.545 24.5542 109.387 24.4888 109.258 24.3579 cv
cp
f
114.831 23.2485 mo
115.045 22.6196 115.153 21.7104 115.153 20.52 cv
115.153 19.5713 115.088 18.8145 114.959 18.2485 cv
114.717 17.1943 114.264 16.6675 113.6 16.6675 cv
112.936 16.6675 112.481 17.21 112.235 18.2949 cv
112.106 18.8726 112.042 19.6338 112.042 20.5786 cv
112.042 21.4644 112.108 22.1729 112.241 22.7036 cv
112.491 23.6953 112.959 24.1909 113.647 24.1909 cv
114.221 24.1909 114.616 23.8765 114.831 23.2485 cv
cp
115.721 17.7632 mo
116.116 18.5249 116.313 19.3999 116.313 20.3882 cv
116.313 21.1655 116.192 21.8979 115.95 22.5854 cv
115.493 23.8784 114.702 24.5249 113.577 24.5249 cv
112.807 24.5249 112.174 24.1753 111.678 23.4761 cv
111.147 22.73 110.881 21.7163 110.881 20.4351 cv
110.881 19.4272 111.059 18.5601 111.415 17.8335 cv
111.895 16.8452 112.633 16.3511 113.629 16.3511 cv
114.528 16.3511 115.225 16.8218 115.721 17.7632 cv
cp
f
120.831 23.2485 mo
121.045 22.6196 121.153 21.7104 121.153 20.52 cv
121.153 19.5713 121.088 18.8145 120.959 18.2485 cv
120.717 17.1943 120.264 16.6675 119.6 16.6675 cv
118.936 16.6675 118.481 17.21 118.235 18.2949 cv
118.106 18.8726 118.042 19.6338 118.042 20.5786 cv
118.042 21.4644 118.108 22.1729 118.241 22.7036 cv
118.491 23.6953 118.959 24.1909 119.647 24.1909 cv
120.221 24.1909 120.616 23.8765 120.831 23.2485 cv
cp
121.721 17.7632 mo
122.116 18.5249 122.313 19.3999 122.313 20.3882 cv
122.313 21.1655 122.192 21.8979 121.95 22.5854 cv
121.493 23.8784 120.702 24.5249 119.577 24.5249 cv
118.807 24.5249 118.174 24.1753 117.678 23.4761 cv
117.147 22.73 116.881 21.7163 116.881 20.4351 cv
116.881 19.4272 117.059 18.5601 117.415 17.8335 cv
117.895 16.8452 118.633 16.3511 119.629 16.3511 cv
120.528 16.3511 121.225 16.8218 121.721 17.7632 cv
cp
f
124.55 23.7192 mo
124.912 23.9712 125.191 24.0972 125.387 24.0972 cv
125.836 24.0972 126.229 23.8989 126.566 23.5024 cv
126.902 23.106 127.071 22.6187 127.071 22.0405 cv
127.071 21.0288 126.531 20.3003 125.451 19.855 cv
124.853 19.6089 124.295 19.4858 123.779 19.4858 cv
123.693 19.4858 123.639 19.4829 123.618 19.4771 cv
123.596 19.4712 123.57 19.4507 123.539 19.4155 cv
123.546 19.3843 123.553 19.3579 123.559 19.3364 cv
123.565 19.3149 123.572 19.2944 123.58 19.2749 cv
124.857 16.4741 li
127.37 16.4741 li
127.495 16.4741 127.591 16.4526 127.66 16.4097 cv
127.728 16.3667 127.817 16.2866 127.926 16.1694 cv
128.02 16.2515 li
127.568 17.3354 li
127.553 17.3706 127.51 17.3931 127.44 17.4028 cv
127.369 17.4126 127.293 17.4175 127.211 17.4175 cv
124.94 17.4175 li
124.442 18.4429 li
125.083 18.5522 125.552 18.6558 125.85 18.7534 cv
126.338 18.9175 126.747 19.1597 127.076 19.48 cv
127.357 19.7573 127.57 20.0688 127.715 20.4146 cv
127.86 20.7603 127.932 21.1265 127.932 21.5132 cv
127.932 22.3765 127.624 23.0972 127.008 23.6753 cv
126.392 24.2534 125.613 24.5425 124.67 24.5425 cv
124.287 24.5425 123.978 24.5054 123.744 24.4312 cv
123.352 24.3101 123.157 24.0933 123.157 23.7808 cv
123.157 23.6636 123.199 23.561 123.283 23.4731 cv
123.367 23.3853 123.497 23.3413 123.673 23.3413 cv
123.896 23.3413 124.188 23.4673 124.55 23.7192 cv
cp
f
166.141 482.871 mo
166.624 482.592 166.866 482.059 166.866 481.271 cv
166.866 480.487 166.583 479.952 166.018 479.665 cv
165.453 479.377 164.733 479.234 163.858 479.234 cv
163.644 479.234 163.508 479.234 163.451 479.234 cv
163.394 479.234 163.307 479.232 163.188 479.227 cv
163.188 482.713 li
163.188 482.955 163.256 483.111 163.393 483.182 cv
163.53 483.252 163.847 483.288 164.343 483.288 cv
165.059 483.288 165.658 483.149 166.141 482.871 cv
cp
165.69 478.455 mo
166.282 478.18 166.579 477.689 166.579 476.982 cv
166.579 476.146 166.237 475.583 165.553 475.29 cv
165.175 475.13 164.601 475.05 163.831 475.05 cv
163.539 475.05 163.359 475.076 163.291 475.125 cv
163.222 475.176 163.188 475.313 163.188 475.537 cv
163.188 478.701 li
164.521 478.68 li
164.99 478.671 165.38 478.596 165.69 478.455 cv
cp
160.426 483.534 mo
160.989 483.502 161.353 483.415 161.518 483.272 cv
161.683 483.129 161.766 482.797 161.766 482.276 cv
161.766 476.048 li
161.766 475.534 161.683 475.202 161.518 475.053 cv
161.353 474.906 160.989 474.818 160.426 474.791 cv
160.426 474.531 li
164.347 474.531 li
165.467 474.531 166.355 474.711 167.014 475.072 cv
167.671 475.432 168 476.052 168 476.932 cv
168 477.594 167.771 478.095 167.31 478.438 cv
167.05 478.633 166.661 478.795 166.141 478.923 cv
166.784 479.079 167.333 479.336 167.789 479.699 cv
168.244 480.061 168.472 480.567 168.472 481.218 cv
168.472 482.311 167.967 483.063 166.956 483.472 cv
166.423 483.686 165.768 483.793 164.989 483.793 cv
160.426 483.793 li
160.426 483.534 li
cp
f
173.531 480.006 mo
173.007 480.179 172.574 480.371 172.232 480.581 cv
171.576 480.986 171.248 481.447 171.248 481.961 cv
171.248 482.376 171.384 482.681 171.658 482.877 cv
171.835 483.005 172.034 483.069 172.252 483.069 cv
172.553 483.069 172.841 482.985 173.117 482.816 cv
173.393 482.647 173.531 482.433 173.531 482.173 cv
173.531 480.006 li
cp
171.022 480.779 mo
171.441 480.505 172.277 480.134 173.531 479.665 cv
173.531 479.083 li
173.531 478.619 173.485 478.295 173.394 478.113 cv
173.239 477.807 172.918 477.655 172.43 477.655 cv
172.198 477.655 171.977 477.714 171.767 477.833 cv
171.558 477.956 171.453 478.125 171.453 478.338 cv
171.453 478.393 171.464 478.485 171.487 478.616 cv
171.51 478.745 171.521 478.829 171.521 478.865 cv
171.521 479.12 171.437 479.297 171.268 479.398 cv
171.172 479.458 171.059 479.487 170.926 479.487 cv
170.721 479.487 170.564 479.419 170.455 479.286 cv
170.345 479.151 170.291 479.001 170.291 478.837 cv
170.291 478.518 170.488 478.184 170.882 477.836 cv
171.276 477.487 171.854 477.313 172.615 477.313 cv
173.499 477.313 174.098 477.6 174.413 478.174 cv
174.581 478.489 174.666 478.947 174.666 479.548 cv
174.666 482.29 li
174.666 482.554 174.684 482.736 174.72 482.836 cv
174.779 483.014 174.902 483.103 175.089 483.103 cv
175.194 483.103 175.281 483.087 175.349 483.055 cv
175.417 483.023 175.536 482.946 175.705 482.823 cv
175.705 483.178 li
175.559 483.356 175.401 483.501 175.233 483.616 cv
174.978 483.789 174.718 483.875 174.454 483.875 cv
174.144 483.875 173.919 483.775 173.78 483.575 cv
173.641 483.375 173.565 483.135 173.551 482.857 cv
173.205 483.158 172.909 483.381 172.663 483.527 cv
172.248 483.773 171.854 483.896 171.48 483.896 cv
171.088 483.896 170.749 483.758 170.461 483.483 cv
170.174 483.207 170.031 482.857 170.031 482.433 cv
170.031 481.772 170.361 481.221 171.022 480.779 cv
cp
f
175.793 483.568 mo
176.213 483.532 176.491 483.458 176.627 483.346 cv
176.764 483.234 176.833 482.996 176.833 482.631 cv
176.833 479.548 li
176.833 479.097 176.791 478.775 176.706 478.581 cv
176.622 478.387 176.468 478.291 176.245 478.291 cv
176.199 478.291 176.139 478.296 176.063 478.307 cv
175.988 478.319 175.91 478.333 175.828 478.352 cv
175.828 478.126 li
176.086 478.036 176.352 477.942 176.625 477.846 cv
176.897 477.75 177.086 477.682 177.19 477.641 cv
177.417 477.554 177.651 477.457 177.892 477.347 cv
177.924 477.347 177.943 477.359 177.95 477.381 cv
177.957 477.404 177.96 477.452 177.96 477.525 cv
177.96 478.646 li
178.253 478.241 178.535 477.923 178.807 477.696 cv
179.079 477.468 179.361 477.354 179.654 477.354 cv
179.887 477.354 180.076 477.423 180.223 477.563 cv
180.369 477.702 180.442 477.875 180.442 478.085 cv
180.442 478.272 180.386 478.429 180.274 478.557 cv
180.163 478.685 180.022 478.749 179.854 478.749 cv
179.681 478.749 179.506 478.668 179.331 478.509 cv
179.156 478.35 179.018 478.27 178.917 478.27 cv
178.758 478.27 178.562 478.399 178.33 478.657 cv
178.097 478.914 177.981 479.179 177.981 479.453 cv
177.981 482.536 li
177.981 482.927 178.072 483.2 178.254 483.352 cv
178.437 483.505 178.74 483.577 179.164 483.568 cv
179.164 483.793 li
175.793 483.793 li
175.793 483.568 li
cp
f
180.585 477.511 mo
183.47 477.511 li
183.47 477.703 li
183.242 477.708 183.074 477.728 182.964 477.765 cv
182.755 477.827 182.65 477.945 182.65 478.123 cv
182.65 478.187 182.661 478.253 182.684 478.322 cv
182.707 478.389 182.748 478.491 182.807 478.625 cv
184.389 482.046 li
185.692 478.598 li
185.706 478.561 185.727 478.477 185.757 478.346 cv
185.787 478.215 185.801 478.127 185.801 478.081 cv
185.801 477.959 185.76 477.871 185.678 477.815 cv
185.596 477.758 185.491 477.726 185.364 477.716 cv
185.152 477.703 li
185.152 477.511 li
187.032 477.511 li
187.032 477.703 li
186.845 477.726 186.705 477.792 186.611 477.9 cv
186.518 478.008 186.437 478.159 186.369 478.352 cv
184.215 484.053 li
183.842 485.038 183.484 485.75 183.142 486.193 cv
182.8 486.635 182.367 486.856 181.843 486.856 cv
181.588 486.856 181.349 486.792 181.125 486.665 cv
180.902 486.537 180.791 486.334 180.791 486.056 cv
180.791 485.874 180.857 485.725 180.99 485.608 cv
181.123 485.493 181.29 485.434 181.493 485.434 cv
181.61 485.434 181.784 485.477 182.016 485.564 cv
182.248 485.651 182.413 485.694 182.512 485.694 cv
182.764 485.694 183.03 485.384 183.309 484.766 cv
183.588 484.147 183.728 483.738 183.728 483.54 cv
183.728 483.5 183.721 483.45 183.708 483.391 cv
183.695 483.333 183.68 483.281 183.663 483.236 cv
181.508 478.578 li
181.354 478.241 181.218 478.018 181.102 477.911 cv
180.985 477.804 180.813 477.735 180.585 477.703 cv
180.585 477.511 li
cp
f
189.706 478.147 mo
189.249 478.562 189.021 479.277 189.021 480.293 cv
189.021 481.105 189.205 481.861 189.572 482.563 cv
189.94 483.265 190.45 483.616 191.103 483.616 cv
191.614 483.616 192.008 483.381 192.285 482.912 cv
192.56 482.442 192.699 481.827 192.699 481.066 cv
192.699 480.278 192.523 479.535 192.171 478.837 cv
191.82 478.14 191.311 477.792 190.644 477.792 cv
190.283 477.792 189.971 477.91 189.706 478.147 cv
cp
188.614 478.321 mo
189.191 477.695 189.933 477.381 190.839 477.381 cv
191.742 477.381 192.49 477.677 193.082 478.27 cv
193.673 478.863 193.97 479.651 193.97 480.635 cv
193.97 481.542 193.683 482.331 193.109 483 cv
192.535 483.67 191.792 484.005 190.88 484.005 cv
190.005 484.005 189.265 483.684 188.659 483.042 cv
188.053 482.399 187.75 481.592 187.75 480.622 cv
187.75 479.714 188.038 478.948 188.614 478.321 cv
cp
f
194.647 483.602 mo
194.97 483.561 195.197 483.48 195.328 483.36 cv
195.457 483.239 195.522 482.968 195.522 482.549 cv
195.522 479.077 li
195.522 478.788 195.495 478.583 195.44 478.466 cv
195.353 478.294 195.175 478.208 194.907 478.208 cv
194.866 478.208 194.824 478.21 194.781 478.215 cv
194.737 478.22 194.683 478.227 194.62 478.236 cv
194.62 477.997 li
194.806 477.942 195.249 477.8 195.946 477.573 cv
196.588 477.361 li
196.621 477.361 196.64 477.373 196.646 477.395 cv
196.654 477.417 196.657 477.45 196.657 477.491 cv
196.657 478.496 li
197.076 478.104 197.403 477.834 197.639 477.689 cv
197.994 477.465 198.363 477.354 198.745 477.354 cv
199.054 477.354 199.335 477.443 199.591 477.621 cv
200.082 477.967 200.328 478.584 200.328 479.473 cv
200.328 482.666 li
200.328 482.994 200.393 483.231 200.525 483.376 cv
200.656 483.522 200.875 483.597 201.182 483.602 cv
201.182 483.793 li
198.263 483.793 li
198.263 483.602 li
198.595 483.556 198.828 483.464 198.96 483.325 cv
199.093 483.186 199.159 482.884 199.159 482.419 cv
199.159 479.5 li
199.159 479.109 199.085 478.784 198.941 478.526 cv
198.796 478.269 198.529 478.14 198.139 478.14 cv
197.872 478.14 197.599 478.231 197.324 478.414 cv
197.169 478.518 196.97 478.692 196.725 478.933 cv
196.725 482.761 li
196.725 483.089 196.798 483.309 196.944 483.42 cv
197.089 483.533 197.32 483.593 197.634 483.602 cv
197.634 483.793 li
194.647 483.793 li
194.647 483.602 li
cp
f
201.941 480.198 mo
205.4 480.198 li
205.4 481.073 li
201.941 481.073 li
201.941 480.198 li
cp
f
209.618 477.491 mo
209.618 477.983 li
208.223 477.983 li
208.209 481.92 li
208.209 482.267 208.24 482.529 208.298 482.707 cv
208.408 483.021 208.623 483.178 208.941 483.178 cv
209.105 483.178 209.248 483.139 209.369 483.062 cv
209.489 482.985 209.626 482.862 209.782 482.693 cv
209.959 482.843 li
209.809 483.048 li
209.572 483.368 209.322 483.593 209.057 483.725 cv
208.792 483.857 208.538 483.923 208.292 483.923 cv
207.753 483.923 207.389 483.684 207.198 483.206 cv
207.093 482.946 207.041 482.585 207.041 482.125 cv
207.041 477.983 li
206.295 477.983 li
206.273 477.969 206.255 477.956 206.244 477.942 cv
206.233 477.928 206.227 477.91 206.227 477.887 cv
206.227 477.841 206.238 477.806 206.257 477.782 cv
206.279 477.756 206.343 477.698 206.453 477.607 cv
206.767 477.347 206.994 477.136 207.132 476.975 cv
207.272 476.813 207.599 476.385 208.114 475.693 cv
208.173 475.693 208.208 475.698 208.22 475.707 cv
208.231 475.715 208.237 475.75 208.237 475.809 cv
208.237 477.491 li
209.618 477.491 li
cp
f
212.257 478.147 mo
211.8 478.562 211.573 479.277 211.573 480.293 cv
211.573 481.105 211.756 481.861 212.125 482.563 cv
212.492 483.265 213.001 483.616 213.655 483.616 cv
214.166 483.616 214.56 483.381 214.835 482.912 cv
215.113 482.442 215.25 481.827 215.25 481.066 cv
215.25 480.278 215.075 479.535 214.723 478.837 cv
214.372 478.14 213.863 477.792 213.196 477.792 cv
212.835 477.792 212.523 477.91 212.257 478.147 cv
cp
211.166 478.321 mo
211.743 477.695 212.484 477.381 213.391 477.381 cv
214.293 477.381 215.041 477.677 215.633 478.27 cv
216.226 478.863 216.522 479.651 216.522 480.635 cv
216.522 481.542 216.235 482.331 215.661 483 cv
215.086 483.67 214.343 484.005 213.432 484.005 cv
212.557 484.005 211.816 483.684 211.21 483.042 cv
210.605 482.399 210.301 481.592 210.301 480.622 cv
210.301 479.714 210.589 478.948 211.166 478.321 cv
cp
f
217.493 480.198 mo
220.952 480.198 li
220.952 481.073 li
217.493 481.073 li
217.493 480.198 li
cp
f
224.373 483.223 mo
224.608 483.375 224.884 483.452 225.204 483.452 cv
225.696 483.452 226.116 483.208 226.465 482.717 cv
226.813 482.229 226.988 481.547 226.988 480.673 cv
226.988 479.835 226.807 479.209 226.444 478.795 cv
226.083 478.381 225.662 478.174 225.183 478.174 cv
224.845 478.174 224.539 478.278 224.26 478.485 cv
223.982 478.692 223.843 478.896 223.843 479.096 cv
223.843 482.53 li
223.962 482.839 224.138 483.071 224.373 483.223 cv
cp
221.676 486.617 mo
222.101 486.589 222.373 486.499 222.488 486.343 cv
222.603 486.188 222.661 485.945 222.661 485.612 cv
222.661 479.049 li
222.661 478.703 222.619 478.481 222.535 478.383 cv
222.45 478.285 222.292 478.236 222.059 478.236 cv
222.009 478.236 221.962 478.238 221.919 478.243 cv
221.875 478.248 221.813 478.256 221.731 478.27 cv
221.731 478.044 li
222.38 477.833 li
222.404 477.828 222.861 477.67 223.754 477.361 cv
223.777 477.361 223.794 477.372 223.806 477.391 cv
223.817 477.413 223.823 477.436 223.823 477.463 cv
223.823 478.386 li
224.124 478.085 224.388 477.862 224.616 477.716 cv
225.026 477.461 225.447 477.333 225.88 477.333 cv
226.509 477.333 227.05 477.601 227.504 478.136 cv
227.958 478.67 228.184 479.403 228.184 480.332 cv
228.184 481.242 227.912 482.068 227.368 482.81 cv
226.823 483.552 226.138 483.923 225.313 483.923 cv
225.058 483.923 224.837 483.891 224.65 483.828 cv
224.359 483.732 224.089 483.557 223.843 483.301 cv
223.843 485.543 li
223.843 486.003 223.918 486.287 224.069 486.391 cv
224.219 486.496 224.547 486.567 225.053 486.603 cv
225.053 486.842 li
221.676 486.842 li
221.676 486.617 li
cp
f
228.731 483.602 mo
229.105 483.552 229.35 483.459 229.465 483.325 cv
229.583 483.191 229.64 482.873 229.64 482.372 cv
229.64 475.809 li
229.64 475.554 229.607 475.366 229.542 475.245 cv
229.475 475.125 229.314 475.064 229.059 475.064 cv
229.009 475.064 228.959 475.067 228.913 475.075 cv
228.864 475.081 228.811 475.089 228.751 475.098 cv
228.751 474.852 li
228.952 474.792 229.2 474.721 229.493 474.637 cv
229.788 474.552 229.991 474.492 230.105 474.456 cv
230.761 474.25 li
230.775 474.298 li
230.775 478.496 li
231.062 478.167 231.317 477.926 231.541 477.771 cv
231.942 477.498 232.375 477.361 232.839 477.361 cv
233.578 477.361 234.082 477.67 234.35 478.291 cv
234.496 478.619 234.569 479.049 234.569 479.583 cv
234.569 482.372 li
234.569 482.855 234.625 483.169 234.737 483.315 cv
234.848 483.46 235.077 483.556 235.423 483.602 cv
235.423 483.793 li
232.463 483.793 li
232.463 483.602 li
232.86 483.547 233.115 483.454 233.229 483.322 cv
233.343 483.19 233.4 482.873 233.4 482.372 cv
233.4 479.603 li
233.4 479.161 233.326 478.803 233.178 478.53 cv
233.03 478.256 232.75 478.12 232.34 478.12 cv
231.985 478.12 231.641 478.248 231.308 478.502 cv
230.975 478.757 230.809 478.924 230.809 479.001 cv
230.809 482.372 li
230.809 482.882 230.869 483.201 230.987 483.329 cv
231.105 483.457 231.358 483.547 231.746 483.602 cv
231.746 483.793 li
228.731 483.793 li
228.731 483.602 li
cp
f
237.919 478.147 mo
237.463 478.562 237.235 479.277 237.235 480.293 cv
237.235 481.105 237.418 481.861 237.786 482.563 cv
238.154 483.265 238.664 483.616 239.317 483.616 cv
239.829 483.616 240.222 483.381 240.499 482.912 cv
240.775 482.442 240.913 481.827 240.913 481.066 cv
240.913 480.278 240.737 479.535 240.385 478.837 cv
240.034 478.14 239.525 477.792 238.858 477.792 cv
238.498 477.792 238.184 477.91 237.919 478.147 cv
cp
236.829 478.321 mo
237.405 477.695 238.146 477.381 239.053 477.381 cv
239.956 477.381 240.703 477.677 241.295 478.27 cv
241.888 478.863 242.184 479.651 242.184 480.635 cv
242.184 481.542 241.897 482.331 241.323 483 cv
240.749 483.67 240.005 484.005 239.094 484.005 cv
238.219 484.005 237.479 483.684 236.873 483.042 cv
236.266 482.399 235.963 481.592 235.963 480.622 cv
235.963 479.714 236.251 478.948 236.829 478.321 cv
cp
f
246.169 477.491 mo
246.169 477.983 li
244.775 477.983 li
244.761 481.92 li
244.761 482.267 244.791 482.529 244.85 482.707 cv
244.959 483.021 245.173 483.178 245.493 483.178 cv
245.657 483.178 245.799 483.139 245.92 483.062 cv
246.041 482.985 246.178 482.862 246.333 482.693 cv
246.511 482.843 li
246.361 483.048 li
246.124 483.368 245.874 483.593 245.609 483.725 cv
245.344 483.857 245.089 483.923 244.843 483.923 cv
244.305 483.923 243.941 483.684 243.75 483.206 cv
243.645 482.946 243.592 482.585 243.592 482.125 cv
243.592 477.983 li
242.847 477.983 li
242.825 477.969 242.807 477.956 242.795 477.942 cv
242.785 477.928 242.779 477.91 242.779 477.887 cv
242.779 477.841 242.79 477.806 242.809 477.782 cv
242.831 477.756 242.895 477.698 243.004 477.607 cv
243.319 477.347 243.545 477.136 243.684 476.975 cv
243.824 476.813 244.151 476.385 244.666 475.693 cv
244.725 475.693 244.76 475.698 244.772 475.707 cv
244.783 475.715 244.789 475.75 244.789 475.809 cv
244.789 477.491 li
246.169 477.491 li
cp
f
248.809 478.147 mo
248.353 478.562 248.125 479.277 248.125 480.293 cv
248.125 481.105 248.308 481.861 248.675 482.563 cv
249.043 483.265 249.553 483.616 250.207 483.616 cv
250.718 483.616 251.112 483.381 251.388 482.912 cv
251.665 482.442 251.802 481.827 251.802 481.066 cv
251.802 480.278 251.626 479.535 251.275 478.837 cv
250.923 478.14 250.415 477.792 249.748 477.792 cv
249.387 477.792 249.074 477.91 248.809 478.147 cv
cp
247.718 478.321 mo
248.294 477.695 249.036 477.381 249.943 477.381 cv
250.845 477.381 251.592 477.677 252.185 478.27 cv
252.778 478.863 253.074 479.651 253.074 480.635 cv
253.074 481.542 252.787 482.331 252.212 483 cv
251.638 483.67 250.895 484.005 249.984 484.005 cv
249.109 484.005 248.369 483.684 247.762 483.042 cv
247.156 482.399 246.853 481.592 246.853 480.622 cv
246.853 479.714 247.141 478.948 247.718 478.321 cv
cp
f
253.75 483.602 mo
254.074 483.561 254.3 483.48 254.431 483.36 cv
254.56 483.239 254.625 482.968 254.625 482.549 cv
254.625 479.077 li
254.625 478.788 254.598 478.583 254.543 478.466 cv
254.457 478.294 254.279 478.208 254.01 478.208 cv
253.969 478.208 253.927 478.21 253.884 478.215 cv
253.84 478.22 253.787 478.227 253.723 478.236 cv
253.723 477.997 li
253.91 477.942 254.352 477.8 255.049 477.573 cv
255.692 477.361 li
255.724 477.361 255.744 477.373 255.75 477.395 cv
255.757 477.417 255.76 477.45 255.76 477.491 cv
255.76 478.496 li
256.179 478.104 256.506 477.834 256.743 477.689 cv
257.097 477.465 257.466 477.354 257.848 477.354 cv
258.158 477.354 258.44 477.443 258.694 477.621 cv
259.185 477.967 259.431 478.584 259.431 479.473 cv
259.431 482.666 li
259.431 482.994 259.497 483.231 259.627 483.376 cv
259.759 483.522 259.978 483.597 260.286 483.602 cv
260.286 483.793 li
257.367 483.793 li
257.367 483.602 li
257.7 483.556 257.932 483.464 258.064 483.325 cv
258.196 483.186 258.262 482.884 258.262 482.419 cv
258.262 479.5 li
258.262 479.109 258.19 478.784 258.044 478.526 cv
257.9 478.269 257.632 478.14 257.243 478.14 cv
256.975 478.14 256.704 478.231 256.427 478.414 cv
256.273 478.518 256.074 478.692 255.829 478.933 cv
255.829 482.761 li
255.829 483.089 255.902 483.309 256.047 483.42 cv
256.193 483.533 256.423 483.593 256.738 483.602 cv
256.738 483.793 li
253.75 483.793 li
253.75 483.602 li
cp
f
264.059 483.568 mo
264.478 483.532 264.756 483.458 264.893 483.346 cv
265.03 483.234 265.098 482.996 265.098 482.631 cv
265.098 479.548 li
265.098 479.097 265.056 478.775 264.972 478.581 cv
264.887 478.387 264.734 478.291 264.51 478.291 cv
264.464 478.291 264.404 478.296 264.33 478.307 cv
264.253 478.319 264.175 478.333 264.093 478.352 cv
264.093 478.126 li
264.352 478.036 264.618 477.942 264.89 477.846 cv
265.164 477.75 265.352 477.682 265.457 477.641 cv
265.683 477.554 265.917 477.457 266.158 477.347 cv
266.19 477.347 266.208 477.359 266.216 477.381 cv
266.222 477.404 266.226 477.452 266.226 477.525 cv
266.226 478.646 li
266.518 478.241 266.8 477.923 267.073 477.696 cv
267.344 477.468 267.626 477.354 267.919 477.354 cv
268.152 477.354 268.342 477.423 268.488 477.563 cv
268.634 477.702 268.708 477.875 268.708 478.085 cv
268.708 478.272 268.652 478.429 268.541 478.557 cv
268.428 478.685 268.289 478.749 268.12 478.749 cv
267.947 478.749 267.772 478.668 267.597 478.509 cv
267.421 478.35 267.284 478.27 267.183 478.27 cv
267.024 478.27 266.828 478.399 266.595 478.657 cv
266.363 478.914 266.247 479.179 266.247 479.453 cv
266.247 482.536 li
266.247 482.927 266.337 483.2 266.52 483.352 cv
266.703 483.505 267.005 483.577 267.429 483.568 cv
267.429 483.793 li
264.059 483.793 li
264.059 483.568 li
cp
f
272.672 480.006 mo
272.148 480.179 271.715 480.371 271.374 480.581 cv
270.717 480.986 270.389 481.447 270.389 481.961 cv
270.389 482.376 270.526 482.681 270.799 482.877 cv
270.977 483.005 271.175 483.069 271.394 483.069 cv
271.695 483.069 271.983 482.985 272.259 482.816 cv
272.535 482.647 272.672 482.433 272.672 482.173 cv
272.672 480.006 li
cp
270.164 480.779 mo
270.583 480.505 271.419 480.134 272.672 479.665 cv
272.672 479.083 li
272.672 478.619 272.626 478.295 272.536 478.113 cv
272.38 477.807 272.059 477.655 271.572 477.655 cv
271.339 477.655 271.119 477.714 270.909 477.833 cv
270.699 477.956 270.594 478.125 270.594 478.338 cv
270.594 478.393 270.606 478.485 270.628 478.616 cv
270.651 478.745 270.663 478.829 270.663 478.865 cv
270.663 479.12 270.579 479.297 270.41 479.398 cv
270.314 479.458 270.2 479.487 270.068 479.487 cv
269.863 479.487 269.706 479.419 269.596 479.286 cv
269.487 479.151 269.432 479.001 269.432 478.837 cv
269.432 478.518 269.629 478.184 270.023 477.836 cv
270.417 477.487 270.996 477.313 271.756 477.313 cv
272.64 477.313 273.24 477.6 273.554 478.174 cv
273.723 478.489 273.807 478.947 273.807 479.548 cv
273.807 482.29 li
273.807 482.554 273.826 482.736 273.862 482.836 cv
273.921 483.014 274.044 483.103 274.231 483.103 cv
274.335 483.103 274.422 483.087 274.491 483.055 cv
274.559 483.023 274.677 482.946 274.846 482.823 cv
274.846 483.178 li
274.701 483.356 274.543 483.501 274.375 483.616 cv
274.12 483.789 273.86 483.875 273.595 483.875 cv
273.286 483.875 273.061 483.775 272.921 483.575 cv
272.783 483.375 272.707 483.135 272.693 482.857 cv
272.346 483.158 272.05 483.381 271.804 483.527 cv
271.389 483.773 270.996 483.896 270.622 483.896 cv
270.23 483.896 269.89 483.758 269.603 483.483 cv
269.316 483.207 269.172 482.857 269.172 482.433 cv
269.172 481.772 269.502 481.221 270.164 480.779 cv
cp
f
278.435 477.491 mo
278.435 477.983 li
277.041 477.983 li
277.027 481.92 li
277.027 482.267 277.056 482.529 277.116 482.707 cv
277.225 483.021 277.439 483.178 277.758 483.178 cv
277.922 483.178 278.065 483.139 278.186 483.062 cv
278.306 482.985 278.444 482.862 278.599 482.693 cv
278.777 482.843 li
278.626 483.048 li
278.389 483.368 278.139 483.593 277.875 483.725 cv
277.61 483.857 277.355 483.923 277.109 483.923 cv
276.571 483.923 276.207 483.684 276.015 483.206 cv
275.911 482.946 275.858 482.585 275.858 482.125 cv
275.858 477.983 li
275.113 477.983 li
275.09 477.969 275.073 477.956 275.061 477.942 cv
275.05 477.928 275.044 477.91 275.044 477.887 cv
275.044 477.841 275.055 477.806 275.075 477.782 cv
275.096 477.756 275.161 477.698 275.27 477.607 cv
275.584 477.347 275.811 477.136 275.95 476.975 cv
276.089 476.813 276.417 476.385 276.931 475.693 cv
276.991 475.693 277.026 475.698 277.038 475.707 cv
277.048 475.715 277.054 475.75 277.054 475.809 cv
277.054 477.491 li
278.435 477.491 li
cp
f
280.124 474.461 mo
280.26 474.321 280.429 474.25 280.629 474.25 cv
280.826 474.25 280.993 474.32 281.132 474.458 cv
281.271 474.596 281.34 474.765 281.34 474.965 cv
281.34 475.16 281.271 475.327 281.132 475.465 cv
280.993 475.603 280.826 475.672 280.629 475.672 cv
280.429 475.672 280.26 475.603 280.124 475.465 cv
279.987 475.327 279.918 475.16 279.918 474.965 cv
279.918 474.77 279.987 474.602 280.124 474.461 cv
cp
279.037 483.602 mo
279.524 483.556 279.832 483.473 279.959 483.352 cv
280.087 483.232 280.151 482.905 280.151 482.372 cv
280.151 479.111 li
280.151 478.815 280.13 478.61 280.089 478.496 cv
280.021 478.309 279.877 478.215 279.659 478.215 cv
279.609 478.215 279.56 478.22 279.511 478.229 cv
279.464 478.238 279.326 478.275 279.098 478.338 cv
279.098 478.126 li
279.392 478.031 li
280.19 477.771 280.746 477.575 281.06 477.443 cv
281.188 477.388 281.27 477.361 281.306 477.361 cv
281.315 477.393 281.32 477.427 281.32 477.463 cv
281.32 482.372 li
281.32 482.891 281.382 483.217 281.507 483.349 cv
281.633 483.481 281.917 483.566 282.359 483.602 cv
282.359 483.793 li
279.037 483.793 li
279.037 483.602 li
cp
f
284.964 478.147 mo
284.508 478.562 284.28 479.277 284.28 480.293 cv
284.28 481.105 284.463 481.861 284.831 482.563 cv
285.199 483.265 285.708 483.616 286.362 483.616 cv
286.874 483.616 287.267 483.381 287.543 482.912 cv
287.82 482.442 287.958 481.827 287.958 481.066 cv
287.958 480.278 287.782 479.535 287.43 478.837 cv
287.079 478.14 286.57 477.792 285.903 477.792 cv
285.542 477.792 285.229 477.91 284.964 478.147 cv
cp
283.874 478.321 mo
284.45 477.695 285.191 477.381 286.098 477.381 cv
287 477.381 287.748 477.677 288.34 478.27 cv
288.933 478.863 289.229 479.651 289.229 480.635 cv
289.229 481.542 288.942 482.331 288.368 483 cv
287.793 483.67 287.05 484.005 286.139 484.005 cv
285.264 484.005 284.524 483.684 283.917 483.042 cv
283.311 482.399 283.008 481.592 283.008 480.622 cv
283.008 479.714 283.296 478.948 283.874 478.321 cv
cp
f
296.039 483.793 mo
294.848 483.793 li
294.848 478.975 li
294.848 478.289 294.764 477.953 294.553 477.7 cv
294.33 477.42 293.979 477.35 293.727 477.63 cv
293.475 477.911 293.475 478.359 293.405 478.75 cv
293.153 478.75 li
293.195 478.233 293.139 477.953 293.531 477.336 cv
293.853 476.832 294.679 476.467 295.394 476.874 cv
295.898 477.167 295.94 477.672 296.052 478.079 cv
296.333 477.686 296.851 476.888 297.733 476.65 cv
298.167 476.538 298.882 476.58 299.274 476.874 cv
299.876 477.322 300.143 477.798 300.157 478.611 cv
300.311 485.573 li
300.325 485.922 300.464 486.273 300.535 486.623 cv
299.289 486.623 li
299.232 486.287 299.12 485.964 299.092 485.222 cv
298.91 478.947 li
298.896 478.373 298.77 478.064 298.503 477.84 cv
298.251 477.63 297.803 477.504 297.454 477.574 cv
296.626 477.728 296.277 478.373 296.039 478.667 cv
296.039 483.793 li
cp
f
306.692 477.712 mo
307.659 478.804 li
307.924 479.087 308.135 479.339 308.359 479.624 cv
308.387 479.624 li
308.611 479.329 308.835 479.067 309.074 478.793 cv
310.012 477.712 li
311.357 477.712 li
309.045 480.168 li
311.413 482.793 li
310.026 482.793 li
309.017 481.649 li
308.751 481.355 308.527 481.072 308.289 480.767 cv
308.261 480.767 li
308.037 481.072 307.813 481.344 307.546 481.649 cv
306.566 482.793 li
305.208 482.793 li
307.617 480.201 li
305.32 477.712 li
306.692 477.712 li
cp
f
319.25 474.452 mo
319.252 474.463 319.253 474.49 319.253 474.531 cv
319.253 482.761 li
319.253 483.112 319.347 483.335 319.535 483.431 cv
319.723 483.527 320.074 483.583 320.586 483.602 cv
320.586 483.793 li
316.724 483.793 li
316.724 483.588 li
317.276 483.561 317.635 483.486 317.804 483.363 cv
317.973 483.24 318.057 482.973 318.057 482.563 cv
318.057 476.233 li
318.057 476.014 318.03 475.848 317.975 475.734 cv
317.92 475.62 317.802 475.563 317.62 475.563 cv
317.501 475.563 317.347 475.596 317.159 475.663 cv
316.969 475.728 316.792 475.797 316.628 475.871 cv
316.628 475.679 li
319.137 474.401 li
319.219 474.401 li
319.238 474.423 319.248 474.441 319.25 474.452 cv
cp
f
326.807 482.434 mo
327.058 481.701 327.183 480.64 327.183 479.25 cv
327.183 478.144 327.108 477.261 326.958 476.601 cv
326.675 475.372 326.146 474.756 325.372 474.756 cv
324.597 474.756 324.066 475.389 323.779 476.655 cv
323.628 477.33 323.553 478.217 323.553 479.319 cv
323.553 480.353 323.63 481.179 323.786 481.798 cv
324.078 482.956 324.625 483.534 325.426 483.534 cv
326.096 483.534 326.556 483.167 326.807 482.434 cv
cp
327.846 476.035 mo
328.306 476.923 328.537 477.944 328.537 479.097 cv
328.537 480.004 328.395 480.859 328.113 481.661 cv
327.58 483.169 326.657 483.923 325.344 483.923 cv
324.447 483.923 323.708 483.515 323.129 482.7 cv
322.509 481.83 322.2 480.647 322.2 479.152 cv
322.2 477.976 322.407 476.964 322.822 476.117 cv
323.382 474.963 324.244 474.387 325.406 474.387 cv
326.454 474.387 327.267 474.936 327.846 476.035 cv
cp
f
332.654 470.663 mo
332.656 470.672 332.657 470.695 332.657 470.73 cv
332.657 477.785 li
332.657 478.085 332.737 478.277 332.898 478.359 cv
333.059 478.441 333.36 478.49 333.799 478.505 cv
333.799 478.669 li
330.489 478.669 li
330.489 478.494 li
330.961 478.47 331.27 478.406 331.415 478.3 cv
331.559 478.195 331.631 477.966 331.631 477.615 cv
331.631 472.189 li
331.631 472.001 331.608 471.859 331.561 471.761 cv
331.514 471.664 331.413 471.615 331.256 471.615 cv
331.155 471.615 331.023 471.643 330.861 471.7 cv
330.699 471.756 330.547 471.816 330.407 471.878 cv
330.407 471.714 li
332.557 470.619 li
332.627 470.619 li
332.643 470.638 332.652 470.653 332.654 470.663 cv
cp
f
339.131 477.504 mo
339.346 476.875 339.454 475.966 339.454 474.776 cv
339.454 473.828 339.389 473.07 339.26 472.504 cv
339.018 471.451 338.565 470.923 337.901 470.923 cv
337.237 470.923 336.782 471.466 336.536 472.551 cv
336.407 473.128 336.342 473.89 336.342 474.834 cv
336.342 475.72 336.409 476.429 336.542 476.959 cv
336.792 477.951 337.26 478.447 337.948 478.447 cv
338.522 478.447 338.917 478.132 339.131 477.504 cv
cp
340.022 472.019 mo
340.417 472.781 340.614 473.656 340.614 474.644 cv
340.614 475.421 340.493 476.154 340.25 476.841 cv
339.793 478.134 339.002 478.781 337.877 478.781 cv
337.108 478.781 336.475 478.431 335.979 477.732 cv
335.448 476.986 335.182 475.972 335.182 474.691 cv
335.182 473.683 335.36 472.816 335.715 472.089 cv
336.196 471.101 336.934 470.607 337.93 470.607 cv
338.829 470.607 339.526 471.078 340.022 472.019 cv
cp
f
195.009 11 mo
195.492 10.7222 195.734 10.189 195.734 9.40039 cv
195.734 8.6167 195.451 8.08105 194.886 7.79395 cv
194.321 7.50684 193.601 7.36328 192.726 7.36328 cv
192.511 7.36328 192.376 7.36328 192.319 7.36328 cv
192.261 7.36328 192.174 7.36084 192.056 7.35645 cv
192.056 10.8428 li
192.056 11.0845 192.125 11.2402 192.261 11.311 cv
192.398 11.3818 192.714 11.417 193.21 11.417 cv
193.926 11.417 194.526 11.2778 195.009 11 cv
cp
194.558 6.5835 mo
195.15 6.30957 195.447 5.81885 195.447 5.11084 cv
195.447 4.27539 195.105 3.71143 194.421 3.41943 cv
194.042 3.25977 193.468 3.17969 192.699 3.17969 cv
192.407 3.17969 192.226 3.20508 192.158 3.25488 cv
192.089 3.30518 192.056 3.44238 192.056 3.66602 cv
192.056 6.83008 li
193.388 6.80957 li
193.858 6.80029 194.248 6.7251 194.558 6.5835 cv
cp
189.294 11.6631 mo
189.856 11.6313 190.22 11.5439 190.386 11.4014 cv
190.551 11.2588 190.634 10.9268 190.634 10.4053 cv
190.634 4.17773 li
190.634 3.6626 190.551 3.33105 190.386 3.18311 cv
190.22 3.03516 189.856 2.94727 189.294 2.91992 cv
189.294 2.66016 li
193.214 2.66016 li
194.334 2.66016 195.223 2.84033 195.881 3.20068 cv
196.539 3.56104 196.869 4.18115 196.869 5.06152 cv
196.869 5.72314 196.638 6.2251 196.177 6.56689 cv
195.917 6.76318 195.529 6.9248 195.009 7.05273 cv
195.652 7.20752 196.201 7.46582 196.656 7.82813 cv
197.112 8.18994 197.339 8.69678 197.339 9.34766 cv
197.339 10.4409 196.834 11.1919 195.824 11.6016 cv
195.291 11.8159 194.635 11.9229 193.857 11.9229 cv
189.294 11.9229 li
189.294 11.6631 li
cp
f
202.398 8.13574 mo
201.875 8.30908 201.441 8.50049 201.099 8.70996 cv
200.443 9.11572 200.115 9.57568 200.115 10.0908 cv
200.115 10.5054 200.251 10.811 200.525 11.0068 cv
200.703 11.1343 200.902 11.1982 201.121 11.1982 cv
201.421 11.1982 201.708 11.1138 201.985 10.9453 cv
202.261 10.7769 202.398 10.5625 202.398 10.3027 cv
202.398 8.13574 li
cp
199.89 8.9082 mo
200.309 8.63477 201.145 8.26318 202.398 7.79395 cv
202.398 7.21289 li
202.398 6.74805 202.353 6.42432 202.261 6.24219 cv
202.107 5.93701 201.786 5.78418 201.298 5.78418 cv
201.066 5.78418 200.844 5.84326 200.634 5.96191 cv
200.425 6.08496 200.32 6.25342 200.32 6.46777 cv
200.32 6.52246 200.332 6.61475 200.355 6.74463 cv
200.377 6.87451 200.388 6.95752 200.388 6.99414 cv
200.388 7.24951 200.304 7.42725 200.136 7.52734 cv
200.041 7.58643 199.926 7.61621 199.794 7.61621 cv
199.589 7.61621 199.431 7.54883 199.322 7.41455 cv
199.212 7.28027 199.158 7.13086 199.158 6.9668 cv
199.158 6.64795 199.355 6.31396 199.75 5.96533 cv
200.144 5.6167 200.721 5.44238 201.482 5.44238 cv
202.367 5.44238 202.966 5.72949 203.281 6.30371 cv
203.449 6.61816 203.533 7.07617 203.533 7.67773 cv
203.533 10.4189 li
203.533 10.6831 203.551 10.8657 203.587 10.9658 cv
203.647 11.1436 203.77 11.2324 203.957 11.2324 cv
204.062 11.2324 204.148 11.2163 204.216 11.1846 cv
204.285 11.1528 204.404 11.0752 204.572 10.9521 cv
204.572 11.3076 li
204.426 11.4854 204.269 11.6313 204.101 11.7451 cv
203.845 11.9185 203.585 12.0049 203.322 12.0049 cv
203.011 12.0049 202.787 11.9048 202.648 11.7041 cv
202.509 11.5034 202.433 11.2642 202.419 10.9863 cv
202.073 11.2871 201.777 11.5103 201.531 11.6563 cv
201.116 11.9023 200.721 12.0254 200.347 12.0254 cv
199.956 12.0254 199.617 11.8877 199.33 11.6118 cv
199.042 11.3359 198.898 10.9863 198.898 10.5625 cv
198.898 9.90186 199.229 9.3501 199.89 8.9082 cv
cp
f
204.662 11.6973 mo
205.081 11.6606 205.359 11.5869 205.496 11.4751 cv
205.632 11.3633 205.701 11.1255 205.701 10.7607 cv
205.701 7.67773 li
205.701 7.22656 205.658 6.9043 205.574 6.71045 cv
205.49 6.5166 205.335 6.41992 205.113 6.41992 cv
205.067 6.41992 205.006 6.42578 204.931 6.43701 cv
204.856 6.44824 204.777 6.46338 204.695 6.48145 cv
204.695 6.25586 li
204.955 6.16455 205.22 6.07129 205.493 5.97559 cv
205.765 5.87988 205.954 5.81152 206.058 5.77051 cv
206.285 5.68408 206.519 5.58594 206.759 5.47656 cv
206.792 5.47656 206.811 5.48779 206.818 5.51074 cv
206.825 5.53369 206.828 5.58154 206.828 5.6543 cv
206.828 6.77539 li
207.121 6.36963 207.403 6.05322 207.675 5.8252 cv
207.947 5.59717 208.228 5.4834 208.521 5.4834 cv
208.754 5.4834 208.944 5.55273 209.09 5.69189 cv
209.236 5.83105 209.31 6.00537 209.31 6.21484 cv
209.31 6.40186 209.253 6.55908 209.142 6.68652 cv
209.031 6.81396 208.89 6.87793 208.722 6.87793 cv
208.548 6.87793 208.375 6.79834 208.199 6.63867 cv
208.023 6.479 207.885 6.39941 207.785 6.39941 cv
207.625 6.39941 207.429 6.52832 207.197 6.78564 cv
206.964 7.04297 206.849 7.30859 206.849 7.58203 cv
206.849 10.665 li
206.849 11.0571 206.94 11.3291 207.123 11.4819 cv
207.304 11.6348 207.607 11.7065 208.031 11.6973 cv
208.031 11.9229 li
204.662 11.9229 li
204.662 11.6973 li
cp
f
209.453 5.64063 mo
212.337 5.64063 li
212.337 5.83203 li
212.11 5.83691 211.941 5.85742 211.832 5.89502 cv
211.623 5.95557 211.517 6.07422 211.517 6.25146 cv
211.517 6.31689 211.529 6.3833 211.552 6.45068 cv
211.575 6.51855 211.616 6.61963 211.675 6.75488 cv
213.257 10.1763 li
214.56 6.72754 li
214.574 6.69043 214.595 6.60645 214.625 6.47559 cv
214.654 6.34521 214.669 6.25635 214.669 6.20996 cv
214.669 6.08838 214.628 6 214.546 5.94385 cv
214.464 5.88818 214.359 5.85547 214.232 5.84619 cv
214.019 5.83203 li
214.019 5.64063 li
215.9 5.64063 li
215.9 5.83203 li
215.712 5.85547 215.572 5.92139 215.479 6.02979 cv
215.386 6.1377 215.304 6.28857 215.236 6.48145 cv
213.083 12.1826 li
212.709 13.167 212.351 13.8804 212.009 14.3223 cv
211.667 14.7642 211.235 14.9854 210.71 14.9854 cv
210.456 14.9854 210.216 14.9214 209.994 14.7939 cv
209.77 14.6665 209.658 14.4634 209.658 14.1855 cv
209.658 14.0034 209.724 13.854 209.857 13.7378 cv
209.99 13.6216 210.158 13.5635 210.361 13.5635 cv
210.478 13.5635 210.652 13.6069 210.884 13.6934 cv
211.115 13.7798 211.281 13.8232 211.38 13.8232 cv
211.632 13.8232 211.898 13.5137 212.177 12.895 cv
212.456 12.2759 212.595 11.8677 212.595 11.6694 cv
212.595 11.6289 212.589 11.5791 212.576 11.521 cv
212.562 11.4624 212.547 11.4102 212.531 11.3652 cv
210.376 6.70703 li
210.221 6.36963 210.085 6.14746 209.969 6.04053 cv
209.853 5.93359 209.681 5.86377 209.453 5.83203 cv
209.453 5.64063 li
cp
f
218.574 6.27637 mo
218.117 6.69092 217.888 7.40674 217.888 8.42285 cv
217.888 9.23389 218.072 9.99072 218.44 10.6924 cv
218.808 11.394 219.318 11.7451 219.97 11.7451 cv
220.482 11.7451 220.876 11.5103 221.152 11.041 cv
221.428 10.5718 221.566 9.95654 221.566 9.19531 cv
221.566 8.40674 221.39 7.66406 221.039 6.9668 cv
220.687 6.26953 220.178 5.9209 219.511 5.9209 cv
219.151 5.9209 218.838 6.03955 218.574 6.27637 cv
cp
217.482 6.45068 mo
218.058 5.82422 218.8 5.51074 219.707 5.51074 cv
220.609 5.51074 221.357 5.80713 221.949 6.39941 cv
222.542 6.9917 222.837 7.78027 222.837 8.76465 cv
222.837 9.67139 222.55 10.46 221.976 11.1299 cv
221.402 11.7998 220.66 12.1348 219.748 12.1348 cv
218.873 12.1348 218.132 11.8135 217.527 11.1709 cv
216.92 10.5283 216.617 9.72168 216.617 8.75098 cv
216.617 7.84424 216.906 7.07715 217.482 6.45068 cv
cp
f
223.515 11.7314 mo
223.838 11.6904 224.065 11.6094 224.195 11.4888 cv
224.325 11.3682 224.39 11.0981 224.39 10.6787 cv
224.39 7.20605 li
224.39 6.91699 224.363 6.71338 224.308 6.5957 cv
224.221 6.42383 224.043 6.33789 223.775 6.33789 cv
223.734 6.33789 223.691 6.34033 223.648 6.34473 cv
223.605 6.34912 223.551 6.35596 223.488 6.36523 cv
223.488 6.12598 li
223.674 6.07129 224.117 5.93018 224.814 5.70215 cv
225.457 5.49023 li
225.488 5.49023 225.507 5.50146 225.513 5.52441 cv
225.521 5.54736 225.525 5.5791 225.525 5.62012 cv
225.525 6.625 li
225.943 6.23291 226.271 5.96436 226.507 5.81836 cv
226.861 5.59521 227.23 5.4834 227.613 5.4834 cv
227.921 5.4834 228.205 5.57227 228.458 5.75 cv
228.949 6.09619 229.195 6.71387 229.195 7.60254 cv
229.195 10.7949 li
229.195 11.123 229.261 11.3599 229.392 11.5059 cv
229.523 11.6519 229.742 11.7271 230.05 11.7314 cv
230.05 11.9229 li
227.13 11.9229 li
227.13 11.7314 li
227.464 11.686 227.697 11.5938 227.828 11.4546 cv
227.96 11.3154 228.027 11.0137 228.027 10.5488 cv
228.027 7.62988 li
228.027 7.23779 227.955 6.91309 227.808 6.65576 cv
227.664 6.39844 227.396 6.26953 227.007 6.26953 cv
226.74 6.26953 226.468 6.36084 226.191 6.54297 cv
226.037 6.64795 225.837 6.8208 225.593 7.0625 cv
225.593 10.8906 li
225.593 11.2188 225.666 11.4385 225.812 11.5503 cv
225.957 11.6621 226.187 11.7222 226.501 11.7314 cv
226.501 11.9229 li
223.515 11.9229 li
223.515 11.7314 li
cp
f
238.191 11 mo
238.41 10.7905 238.519 10.5923 238.519 10.4053 cv
238.519 7.47266 li
238.519 6.88037 238.361 6.46191 238.044 6.21826 cv
237.727 5.97461 237.418 5.85254 237.118 5.85254 cv
236.543 5.85254 236.097 6.10645 235.778 6.61475 cv
235.458 7.12305 235.299 7.74854 235.299 8.49121 cv
235.299 9.2251 235.469 9.87891 235.808 10.4531 cv
236.148 11.0273 236.655 11.3145 237.33 11.3145 cv
237.685 11.3145 237.972 11.2095 238.191 11 cv
cp
237.993 5.68164 mo
238.175 5.77734 238.35 5.90967 238.519 6.07813 cv
238.519 3.9043 li
238.519 3.62646 238.488 3.43506 238.427 3.33008 cv
238.365 3.2251 238.218 3.17285 237.986 3.17285 cv
237.931 3.17285 237.883 3.17529 237.842 3.17969 cv
237.801 3.18408 237.71 3.19336 237.569 3.20703 cv
237.569 2.98145 li
238.129 2.83789 li
238.334 2.7832 238.54 2.72607 238.745 2.66699 cv
238.95 2.60791 239.129 2.55078 239.285 2.49609 cv
239.358 2.47314 239.478 2.43018 239.647 2.36621 cv
239.688 2.37988 li
239.674 3.09766 li
239.669 3.35742 239.666 3.625 239.661 3.90088 cv
239.656 4.17676 239.654 4.44873 239.654 4.71777 cv
239.64 10.3027 li
239.64 10.5991 239.676 10.8062 239.75 10.9248 cv
239.823 11.0435 240.016 11.1025 240.331 11.1025 cv
240.38 11.1025 240.431 11.1016 240.481 11.0991 cv
240.531 11.0967 240.582 11.0913 240.631 11.082 cv
240.631 11.3076 li
240.604 11.3169 240.274 11.4307 239.64 11.6494 cv
238.567 12.0527 li
238.519 11.9912 li
238.519 11.1504 li
238.264 11.4282 238.042 11.6265 237.856 11.7451 cv
237.523 11.9502 237.138 12.0527 236.701 12.0527 cv
235.926 12.0527 235.298 11.7529 234.818 11.1538 cv
234.336 10.5547 234.096 9.86084 234.096 9.07227 cv
234.096 8.0835 234.384 7.23438 234.96 6.52588 cv
235.538 5.81738 236.243 5.46289 237.077 5.46289 cv
237.41 5.46289 237.714 5.53564 237.993 5.68164 cv
cp
f
242.381 6.7002 mo
242.236 6.94629 242.13 7.25635 242.067 7.62988 cv
244.952 7.62988 li
244.902 7.17432 244.815 6.83447 244.692 6.61133 cv
244.468 6.21045 244.095 6.00977 243.571 6.00977 cv
243.051 6.00977 242.655 6.23975 242.381 6.7002 cv
cp
245.656 6.17725 mo
246.139 6.62158 246.38 7.25146 246.38 8.06738 cv
242.04 8.06738 li
242.085 9.12256 242.325 9.89063 242.757 10.373 cv
243.19 10.8545 243.703 11.0957 244.295 11.0957 cv
244.774 11.0957 245.177 10.9707 245.505 10.7207 cv
245.833 10.4707 246.136 10.1157 246.415 9.65674 cv
246.654 9.73828 li
246.467 10.3184 246.117 10.8545 245.605 11.3477 cv
245.091 11.8403 244.464 12.0869 243.721 12.0869 cv
242.865 12.0869 242.203 11.7632 241.736 11.1162 cv
241.268 10.4692 241.035 9.72412 241.035 8.88086 cv
241.035 7.96484 241.306 7.17432 241.848 6.50879 cv
242.39 5.84326 243.097 5.51074 243.967 5.51074 cv
244.61 5.51074 245.172 5.73291 245.656 6.17725 cv
cp
f
247.228 11.7314 mo
247.551 11.6904 247.778 11.6094 247.909 11.4888 cv
248.038 11.3682 248.103 11.0981 248.103 10.6787 cv
248.103 7.20605 li
248.103 6.91699 248.076 6.71338 248.021 6.5957 cv
247.934 6.42383 247.756 6.33789 247.488 6.33789 cv
247.447 6.33789 247.405 6.34033 247.362 6.34473 cv
247.318 6.34912 247.264 6.35596 247.201 6.36523 cv
247.201 6.12598 li
247.387 6.07129 247.83 5.93018 248.527 5.70215 cv
249.169 5.49023 li
249.202 5.49023 249.221 5.50146 249.227 5.52441 cv
249.235 5.54736 249.238 5.5791 249.238 5.62012 cv
249.238 6.625 li
249.657 6.23291 249.984 5.96436 250.22 5.81836 cv
250.575 5.59521 250.944 5.4834 251.326 5.4834 cv
251.635 5.4834 251.917 5.57227 252.171 5.75 cv
252.663 6.09619 252.909 6.71387 252.909 7.60254 cv
252.909 10.7949 li
252.909 11.123 252.974 11.3599 253.105 11.5059 cv
253.237 11.6519 253.456 11.7271 253.763 11.7314 cv
253.763 11.9229 li
250.844 11.9229 li
250.844 11.7314 li
251.177 11.686 251.41 11.5938 251.542 11.4546 cv
251.673 11.3154 251.74 11.0137 251.74 10.5488 cv
251.74 7.62988 li
251.74 7.23779 251.667 6.91309 251.522 6.65576 cv
251.377 6.39844 251.11 6.26953 250.72 6.26953 cv
250.453 6.26953 250.181 6.36084 249.905 6.54297 cv
249.75 6.64795 249.551 6.8208 249.306 7.0625 cv
249.306 10.8906 li
249.306 11.2188 249.379 11.4385 249.525 11.5503 cv
249.67 11.6621 249.901 11.7222 250.215 11.7314 cv
250.215 11.9229 li
247.228 11.9229 li
247.228 11.7314 li
cp
f
254.707 9.76953 mo
254.932 9.76953 li
255.037 10.2891 255.177 10.688 255.355 10.9658 cv
255.673 11.4761 256.139 11.7314 256.753 11.7314 cv
257.094 11.7314 257.364 11.6367 257.561 11.4478 cv
257.759 11.2588 257.858 11.0137 257.858 10.7129 cv
257.858 10.5215 257.801 10.3369 257.687 10.1592 cv
257.573 9.98145 257.373 9.80811 257.085 9.63965 cv
256.32 9.20215 li
255.759 8.90137 255.347 8.59814 255.083 8.29297 cv
254.818 7.98779 254.686 7.62744 254.686 7.21289 cv
254.686 6.70264 254.869 6.2832 255.233 5.95508 cv
255.597 5.62695 256.055 5.46289 256.607 5.46289 cv
256.848 5.46289 257.114 5.5083 257.403 5.59961 cv
257.693 5.69092 257.856 5.73633 257.892 5.73633 cv
257.974 5.73633 258.034 5.7251 258.07 5.70215 cv
258.106 5.6792 258.138 5.64307 258.166 5.59277 cv
258.33 5.59277 li
258.377 7.5 li
258.166 7.5 li
258.075 7.05811 257.952 6.71387 257.796 6.46777 cv
257.514 6.01221 257.106 5.78418 256.573 5.78418 cv
256.253 5.78418 256.003 5.88232 255.821 6.07813 cv
255.638 6.27393 255.547 6.50439 255.547 6.76855 cv
255.547 7.18799 255.862 7.56152 256.491 7.88965 cv
257.393 8.375 li
258.364 8.90381 258.849 9.51904 258.849 10.2207 cv
258.849 10.7583 258.648 11.1982 258.245 11.54 cv
257.842 11.8818 257.316 12.0527 256.666 12.0527 cv
256.392 12.0527 256.083 12.0073 255.737 11.916 cv
255.391 11.8247 255.187 11.7793 255.124 11.7793 cv
255.069 11.7793 255.021 11.7988 254.98 11.8374 cv
254.939 11.876 254.907 11.9229 254.884 11.9775 cv
254.707 11.9775 li
254.707 9.76953 li
cp
f
260.784 2.59082 mo
260.92 2.4502 261.089 2.37988 261.29 2.37988 cv
261.486 2.37988 261.653 2.44922 261.792 2.5874 cv
261.931 2.72559 262 2.89453 262 3.09424 cv
262 3.28906 261.931 3.45605 261.792 3.59424 cv
261.653 3.73242 261.486 3.80176 261.29 3.80176 cv
261.089 3.80176 260.92 3.73242 260.784 3.59424 cv
260.647 3.45605 260.579 3.28906 260.579 3.09424 cv
260.579 2.89941 260.647 2.73145 260.784 2.59082 cv
cp
259.697 11.7314 mo
260.184 11.686 260.492 11.6025 260.62 11.4819 cv
260.748 11.3613 260.811 11.0342 260.811 10.501 cv
260.811 7.24023 li
260.811 6.94385 260.791 6.73877 260.75 6.625 cv
260.681 6.43799 260.538 6.34473 260.319 6.34473 cv
260.269 6.34473 260.22 6.34912 260.171 6.3584 cv
260.125 6.36768 259.986 6.40381 259.758 6.46777 cv
259.758 6.25586 li
260.052 6.16016 li
260.85 5.90039 261.406 5.70459 261.72 5.57227 cv
261.848 5.51758 261.93 5.49023 261.966 5.49023 cv
261.975 5.52197 261.98 5.55615 261.98 5.59277 cv
261.98 10.501 li
261.98 11.0205 262.042 11.3462 262.167 11.4785 cv
262.293 11.6108 262.577 11.6948 263.019 11.7314 cv
263.019 11.9229 li
259.697 11.9229 li
259.697 11.7314 li
cp
f
266.875 5.62012 mo
266.875 6.1123 li
265.48 6.1123 li
265.466 10.0498 li
265.466 10.396 265.496 10.6582 265.555 10.8359 cv
265.665 11.1504 265.878 11.3076 266.198 11.3076 cv
266.362 11.3076 266.504 11.269 266.625 11.1914 cv
266.746 11.1138 266.883 10.9907 267.039 10.8223 cv
267.216 10.9727 li
267.066 11.1777 li
266.829 11.4966 266.579 11.7222 266.314 11.8545 cv
266.049 11.9868 265.794 12.0527 265.548 12.0527 cv
265.01 12.0527 264.646 11.8135 264.455 11.335 cv
264.35 11.0752 264.297 10.7153 264.297 10.2549 cv
264.297 6.1123 li
263.552 6.1123 li
263.53 6.09863 263.512 6.08496 263.5 6.07129 cv
263.49 6.05762 263.484 6.03955 263.484 6.0166 cv
263.484 5.97119 263.495 5.93555 263.514 5.91064 cv
263.536 5.88574 263.6 5.82764 263.709 5.73633 cv
264.024 5.47656 264.25 5.26563 264.389 5.104 cv
264.529 4.94238 264.856 4.51514 265.371 3.82227 cv
265.43 3.82227 265.465 3.82666 265.477 3.83594 cv
265.488 3.84521 265.494 3.87939 265.494 3.93848 cv
265.494 5.62012 li
266.875 5.62012 li
cp
f
267.394 5.64063 mo
270.279 5.64063 li
270.279 5.83203 li
270.051 5.83691 269.882 5.85742 269.773 5.89502 cv
269.563 5.95557 269.458 6.07422 269.458 6.25146 cv
269.458 6.31689 269.47 6.3833 269.493 6.45068 cv
269.515 6.51855 269.556 6.61963 269.616 6.75488 cv
271.198 10.1763 li
272.5 6.72754 li
272.514 6.69043 272.536 6.60645 272.566 6.47559 cv
272.595 6.34521 272.61 6.25635 272.61 6.20996 cv
272.61 6.08838 272.569 6 272.487 5.94385 cv
272.405 5.88818 272.3 5.85547 272.172 5.84619 cv
271.96 5.83203 li
271.96 5.64063 li
273.84 5.64063 li
273.84 5.83203 li
273.654 5.85547 273.513 5.92139 273.419 6.02979 cv
273.327 6.1377 273.246 6.28857 273.177 6.48145 cv
271.024 12.1826 li
270.65 13.167 270.292 13.8804 269.951 14.3223 cv
269.609 14.7642 269.176 14.9854 268.652 14.9854 cv
268.397 14.9854 268.158 14.9214 267.934 14.7939 cv
267.71 14.6665 267.599 14.4634 267.599 14.1855 cv
267.599 14.0034 267.666 13.854 267.798 13.7378 cv
267.931 13.6216 268.099 13.5635 268.301 13.5635 cv
268.418 13.5635 268.593 13.6069 268.825 13.6934 cv
269.056 13.7798 269.222 13.8232 269.321 13.8232 cv
269.573 13.8232 269.838 13.5137 270.118 12.895 cv
270.397 12.2759 270.537 11.8677 270.537 11.6694 cv
270.537 11.6289 270.53 11.5791 270.517 11.521 cv
270.503 11.4624 270.489 11.4102 270.471 11.3652 cv
268.317 6.70703 li
268.162 6.36963 268.027 6.14746 267.91 6.04053 cv
267.794 5.93359 267.622 5.86377 267.394 5.83203 cv
267.394 5.64063 li
cp
f
282.312 11.9229 mo
278.18 11.9229 li
278.18 9.65381 li
278.39 9.65381 li
278.558 10.3398 278.726 10.5083 279.315 10.5083 cv
281.528 10.5083 li
281.5 10.1157 li
280.421 9.79346 279.735 9.42969 279.161 8.58887 cv
278.18 7.14648 278.348 5.50732 278.936 4.45703 cv
279.497 3.43408 280.155 3.12598 280.533 2.90186 cv
281.177 2.52393 282.102 2.28564 283.096 2.28564 cv
284.091 2.28564 285.015 2.52393 285.66 2.90186 cv
286.039 3.12598 286.697 3.43408 287.256 4.45703 cv
287.845 5.50732 288.013 7.14648 287.033 8.58887 cv
286.458 9.42969 285.772 9.79346 284.694 10.1157 cv
284.666 10.5083 li
286.878 10.5083 li
287.467 10.5083 287.635 10.3398 287.803 9.65381 cv
288.013 9.65381 li
288.013 11.9229 li
283.881 11.9229 li
284.105 9.79346 li
284.553 9.59766 285.211 9.45752 285.758 8.19678 cv
286.22 7.13232 286.375 4.70898 285.127 3.4624 cv
284.553 2.88818 283.811 2.73389 283.096 2.73389 cv
282.382 2.73389 281.64 2.88818 281.066 3.4624 cv
279.819 4.70898 279.973 7.13232 280.435 8.19678 cv
280.981 9.45752 281.64 9.59766 282.088 9.79346 cv
282.312 11.9229 li
cp
f
290.726 15.3408 mo
290.995 15.4287 291.23 15.4727 291.432 15.4727 cv
291.977 15.4727 292.38 15.2681 292.643 14.8584 cv
292.906 14.4487 293.037 13.9531 293.037 13.3721 cv
293.037 12.7905 292.914 12.2534 292.669 11.7598 cv
292.424 11.2666 292.027 11.0195 291.479 11.0195 cv
291.203 11.0195 290.932 11.1045 290.667 11.2739 cv
290.403 11.4438 290.271 11.6592 290.271 11.9209 cv
290.271 14.9053 li
290.306 15.1079 290.458 15.2534 290.726 15.3408 cv
cp
288.496 8.3125 mo
288.496 8.11328 li
288.943 8.01172 289.344 7.89844 289.701 7.77344 cv
290.057 7.64844 290.25 7.58594 290.277 7.58594 cv
290.285 7.60938 290.289 7.63281 290.289 7.65625 cv
290.289 11.2241 li
290.39 11.0371 290.542 10.8594 290.745 10.6914 cv
291.104 10.3984 291.517 10.252 291.985 10.252 cv
292.558 10.252 293.048 10.4941 293.454 10.9785 cv
293.859 11.4629 294.062 12.0918 294.062 12.8652 cv
294.062 13.6934 293.798 14.4023 293.271 14.9922 cv
292.744 15.582 292.05 15.877 291.191 15.877 cv
290.757 15.877 290.332 15.791 289.914 15.6191 cv
289.496 15.4473 289.287 15.2754 289.287 15.1035 cv
289.287 8.91016 li
289.287 8.68359 289.255 8.52246 289.193 8.42676 cv
289.13 8.33105 288.986 8.2832 288.759 8.2832 cv
288.496 8.3125 li
cp
f
296.116 2.75586 mo
296.41 2.71484 296.648 2.68164 296.83 2.65674 cv
297.011 2.63184 297.168 2.60791 297.302 2.58496 cv
297.845 2.47998 298.137 2.42334 298.178 2.41406 cv
298.22 2.40479 298.252 2.40039 298.275 2.40039 cv
298.331 2.42773 298.358 2.46191 298.358 2.50293 cv
296.665 8.60742 li
297.23 7.75977 297.692 7.14014 298.051 6.74805 cv
298.68 6.07373 299.257 5.73633 299.783 5.73633 cv
299.998 5.73633 300.206 5.80566 300.406 5.94482 cv
300.607 6.08398 300.707 6.3335 300.707 6.69336 cv
300.707 6.77979 300.696 6.8916 300.672 7.02832 cv
300.65 7.16504 300.623 7.28564 300.59 7.39063 cv
299.684 10.665 li
299.657 10.7563 299.633 10.8438 299.616 10.9282 cv
299.597 11.0127 299.588 11.0889 299.588 11.1572 cv
299.588 11.2349 299.606 11.293 299.643 11.3315 cv
299.679 11.3701 299.732 11.3896 299.8 11.3896 cv
299.941 11.3896 300.108 11.2915 300.299 11.0957 cv
300.417 10.9727 300.639 10.7036 300.962 10.2891 cv
301.14 10.4531 li
300.822 10.9272 300.55 11.2734 300.328 11.4922 cv
299.931 11.8794 299.533 12.0732 299.132 12.0732 cv
298.951 12.0732 298.798 12.0161 298.675 11.9023 cv
298.552 11.7886 298.491 11.6245 298.491 11.4102 cv
298.491 11.3511 298.494 11.2949 298.5 11.2427 cv
298.507 11.1904 298.52 11.1323 298.539 11.0684 cv
299.57 7.0625 li
299.579 7.02588 299.587 6.98828 299.594 6.94971 cv
299.601 6.91113 299.604 6.87109 299.604 6.83008 cv
299.604 6.71631 299.57 6.62744 299.502 6.56348 cv
299.429 6.49951 299.336 6.46777 299.223 6.46777 cv
298.919 6.46777 298.537 6.71289 298.075 7.20264 cv
297.613 7.69238 297.223 8.19287 296.906 8.70313 cv
296.688 9.06299 296.524 9.40283 296.413 9.72168 cv
296.302 10.0405 296.087 10.7744 295.771 11.9229 cv
294.708 11.9229 li
297.004 3.63086 li
297.018 3.57178 297.027 3.52148 297.032 3.48047 cv
297.036 3.43945 297.039 3.40088 297.039 3.36426 cv
297.039 3.16846 296.974 3.05078 296.847 3.01221 cv
296.719 2.97363 296.475 2.96338 296.116 2.98145 cv
296.116 2.75586 li
cp
f
301.812 7.94531 mo
303.242 6.46191 304.212 5.37305 304.724 4.67822 cv
305.236 3.9834 305.492 3.30615 305.492 2.64697 cv
305.492 2.06934 305.335 1.62939 305.023 1.32666 cv
304.71 1.02441 304.337 .873047 303.904 .873047 cv
303.369 .873047 302.935 1.06836 302.603 1.4585 cv
302.419 1.67334 302.244 2.00293 302.076 2.44775 cv
301.824 2.39502 li
302.019 1.49707 302.35 .873535 302.817 .523926 cv
303.284 .174805 303.785 0 304.32 0 cv
304.98 0 305.514 .208008 305.922 .623535 cv
306.331 1.03906 306.535 1.54785 306.535 2.14844 cv
306.535 2.78857 306.314 3.40527 305.873 3.99854 cv
305.431 4.5918 304.471 5.64746 302.995 7.16602 cv
305.685 7.16602 li
306.06 7.16602 306.324 7.12109 306.476 7.03125 cv
306.628 6.94189 306.8 6.72314 306.992 6.37598 cv
307.144 6.4458 li
306.494 8.08008 li
301.812 8.08008 li
301.812 7.94531 li
cp
f
36.5537 118.736 mo
36.7686 118.107 36.876 117.198 36.876 116.007 cv
36.876 115.059 36.8115 114.302 36.6826 113.736 cv
36.4404 112.682 35.9873 112.155 35.3232 112.155 cv
34.6592 112.155 34.2041 112.697 33.958 113.782 cv
33.8291 114.36 33.7646 115.121 33.7646 116.066 cv
33.7646 116.952 33.8311 117.66 33.9639 118.191 cv
34.2139 119.183 34.6826 119.678 35.3701 119.678 cv
35.9443 119.678 36.3389 119.364 36.5537 118.736 cv
cp
37.4443 113.25 mo
37.8389 114.012 38.0361 114.887 38.0361 115.875 cv
38.0361 116.653 37.915 117.385 37.6729 118.073 cv
37.2158 119.366 36.4248 120.012 35.2998 120.012 cv
34.5303 120.012 33.8975 119.663 33.4014 118.963 cv
32.8701 118.217 32.6045 117.204 32.6045 115.922 cv
32.6045 114.915 32.7822 114.047 33.1377 113.321 cv
33.6182 112.333 34.3564 111.838 35.3525 111.838 cv
36.251 111.838 36.9482 112.309 37.4443 113.25 cv
cp
f
39.9814 119.845 mo
39.8525 119.714 39.7881 119.557 39.7881 119.374 cv
39.7881 119.19 39.8535 119.034 39.9844 118.905 cv
40.1152 118.776 40.2725 118.711 40.4561 118.711 cv
40.6396 118.711 40.7959 118.776 40.9248 118.905 cv
41.0537 119.034 41.1182 119.19 41.1182 119.374 cv
41.1182 119.557 41.0547 119.714 40.9277 119.845 cv
40.8008 119.976 40.6436 120.042 40.4561 120.042 cv
40.2686 120.042 40.1104 119.976 39.9814 119.845 cv
cp
f
41.8564 119.766 mo
43.2861 118.283 44.2568 117.194 44.7686 116.499 cv
45.2803 115.804 45.5361 115.127 45.5361 114.468 cv
45.5361 113.89 45.3799 113.45 45.0674 113.147 cv
44.7549 112.845 44.3818 112.694 43.9482 112.694 cv
43.4131 112.694 42.9795 112.889 42.6475 113.279 cv
42.4639 113.494 42.2881 113.824 42.1201 114.269 cv
41.8682 114.216 li
42.0635 113.318 42.3945 112.694 42.8613 112.345 cv
43.3281 111.996 43.8291 111.821 44.3643 111.821 cv
45.0244 111.821 45.5586 112.029 45.9668 112.444 cv
46.375 112.86 46.5791 113.369 46.5791 113.969 cv
46.5791 114.609 46.3584 115.226 45.9165 115.819 cv
45.4751 116.413 44.5156 117.468 43.0386 118.987 cv
45.729 118.987 li
46.104 118.987 46.3677 118.942 46.5205 118.852 cv
46.6729 118.763 46.8447 118.544 47.0361 118.197 cv
47.1885 118.267 li
46.5381 119.901 li
41.8564 119.901 li
41.8564 119.766 li
cp
f
50.9971 113.06 mo
48.1216 117.124 li
50.9971 117.124 li
50.9971 113.06 li
cp
51.3838 111.85 mo
51.9404 111.85 li
51.9404 117.124 li
53.165 117.124 li
53.165 117.903 li
51.9404 117.903 li
51.9404 119.901 li
51.0088 119.901 li
51.0088 117.903 li
47.6338 117.903 li
47.6338 117.124 li
51.3838 111.85 li
cp
f
36.5537 149.079 mo
36.7686 148.45 36.876 147.541 36.876 146.35 cv
36.876 145.401 36.8115 144.645 36.6826 144.079 cv
36.4404 143.024 35.9873 142.498 35.3232 142.498 cv
34.6592 142.498 34.2041 143.04 33.958 144.125 cv
33.8291 144.703 33.7646 145.464 33.7646 146.409 cv
33.7646 147.294 33.8311 148.003 33.9639 148.534 cv
34.2139 149.525 34.6826 150.021 35.3701 150.021 cv
35.9443 150.021 36.3389 149.707 36.5537 149.079 cv
cp
37.4443 143.593 mo
37.8389 144.355 38.0361 145.23 38.0361 146.218 cv
38.0361 146.996 37.915 147.728 37.6729 148.416 cv
37.2158 149.708 36.4248 150.355 35.2998 150.355 cv
34.5303 150.355 33.8975 150.005 33.4014 149.306 cv
32.8701 148.56 32.6045 147.546 32.6045 146.265 cv
32.6045 145.257 32.7822 144.39 33.1377 143.664 cv
33.6182 142.675 34.3564 142.181 35.3525 142.181 cv
36.251 142.181 36.9482 142.652 37.4443 143.593 cv
cp
f
39.9814 150.188 mo
39.8525 150.057 39.7881 149.9 39.7881 149.716 cv
39.7881 149.533 39.8535 149.376 39.9844 149.248 cv
40.1152 149.119 40.2725 149.054 40.4561 149.054 cv
40.6396 149.054 40.7959 149.119 40.9248 149.248 cv
41.0537 149.376 41.1182 149.533 41.1182 149.716 cv
41.1182 149.9 41.0547 150.057 40.9277 150.188 cv
40.8008 150.319 40.6436 150.384 40.4561 150.384 cv
40.2686 150.384 40.1104 150.319 39.9814 150.188 cv
cp
f
41.8564 150.109 mo
43.2861 148.625 44.2568 147.537 44.7686 146.842 cv
45.2803 146.147 45.5361 145.47 45.5361 144.811 cv
45.5361 144.233 45.3799 143.793 45.0674 143.49 cv
44.7549 143.188 44.3818 143.037 43.9482 143.037 cv
43.4131 143.037 42.9795 143.232 42.6475 143.622 cv
42.4639 143.837 42.2881 144.167 42.1201 144.611 cv
41.8682 144.559 li
42.0635 143.661 42.3945 143.037 42.8613 142.688 cv
43.3281 142.338 43.8291 142.164 44.3643 142.164 cv
45.0244 142.164 45.5586 142.372 45.9668 142.787 cv
46.375 143.203 46.5791 143.711 46.5791 144.312 cv
46.5791 144.952 46.3584 145.569 45.9165 146.162 cv
45.4751 146.755 44.5156 147.811 43.0386 149.33 cv
45.729 149.33 li
46.104 149.33 46.3677 149.285 46.5205 149.195 cv
46.6729 149.105 46.8447 148.887 47.0361 148.54 cv
47.1885 148.609 li
46.5381 150.244 li
41.8564 150.244 li
41.8564 150.109 li
cp
f
49.2832 149.561 mo
49.6367 149.786 49.9365 149.898 50.1826 149.898 cv
50.7295 149.898 51.1357 149.713 51.4014 149.343 cv
51.667 148.974 51.7998 148.572 51.7998 148.137 cv
51.7998 147.719 51.6924 147.351 51.4775 147.034 cv
51.1143 146.498 50.501 146.23 49.6377 146.23 cv
49.5869 146.23 49.5381 146.231 49.4912 146.233 cv
49.4443 146.235 49.3896 146.24 49.3271 146.248 cv
49.3154 146.095 li
49.9404 145.869 50.4326 145.609 50.792 145.316 cv
51.1514 145.023 51.3311 144.636 51.3311 144.156 cv
51.3311 143.73 51.1895 143.406 50.9063 143.183 cv
50.623 142.96 50.2998 142.849 49.9365 142.849 cv
49.5068 142.849 49.1279 143.007 48.7998 143.324 cv
48.6201 143.496 48.4268 143.761 48.2197 144.121 cv
48.0381 144.08 li
48.1943 143.486 48.4854 143.011 48.9111 142.656 cv
49.3369 142.3 49.8291 142.123 50.3877 142.123 cv
50.9854 142.123 51.4473 142.287 51.7734 142.615 cv
52.0996 142.943 52.2627 143.322 52.2627 143.751 cv
52.2627 144.13 52.1279 144.478 51.8584 144.794 cv
51.7061 144.974 51.4697 145.175 51.1494 145.398 cv
51.5244 145.558 51.8252 145.746 52.0518 145.96 cv
52.4775 146.371 52.6904 146.89 52.6904 147.519 cv
52.6904 148.261 52.3984 148.916 51.8145 149.482 cv
51.2305 150.048 50.3994 150.332 49.3213 150.332 cv
48.8408 150.332 48.5039 150.26 48.3105 150.118 cv
48.1172 149.975 48.0205 149.822 48.0205 149.658 cv
48.0205 149.556 48.0527 149.458 48.1172 149.365 cv
48.1816 149.271 48.2861 149.224 48.4307 149.224 cv
48.6455 149.224 48.9297 149.336 49.2832 149.561 cv
cp
f
36.5537 89.1826 mo
36.7686 88.5537 36.876 87.6445 36.876 86.4541 cv
36.876 85.5054 36.8115 84.7485 36.6826 84.1826 cv
36.4404 83.1284 35.9873 82.6016 35.3232 82.6016 cv
34.6592 82.6016 34.2041 83.144 33.958 84.229 cv
33.8291 84.8066 33.7646 85.5679 33.7646 86.5127 cv
33.7646 87.3984 33.8311 88.1069 33.9639 88.6377 cv
34.2139 89.6294 34.6826 90.125 35.3701 90.125 cv
35.9443 90.125 36.3389 89.8105 36.5537 89.1826 cv
cp
37.4443 83.6973 mo
37.8389 84.459 38.0361 85.334 38.0361 86.3223 cv
38.0361 87.0996 37.915 87.832 37.6729 88.5195 cv
37.2158 89.8125 36.4248 90.459 35.2998 90.459 cv
34.5303 90.459 33.8975 90.1094 33.4014 89.4102 cv
32.8701 88.6641 32.6045 87.6504 32.6045 86.3691 cv
32.6045 85.3613 32.7822 84.4941 33.1377 83.7676 cv
33.6182 82.7793 34.3564 82.2852 35.3525 82.2852 cv
36.251 82.2852 36.9482 82.7559 37.4443 83.6973 cv
cp
f
39.9814 90.292 mo
39.8525 90.1611 39.7881 90.0039 39.7881 89.8203 cv
39.7881 89.6367 39.8535 89.4805 39.9844 89.3516 cv
40.1152 89.2227 40.2725 89.1582 40.4561 89.1582 cv
40.6396 89.1582 40.7959 89.2227 40.9248 89.3516 cv
41.0537 89.4805 41.1182 89.6367 41.1182 89.8203 cv
41.1182 90.0039 41.0547 90.1611 40.9277 90.292 cv
40.8008 90.4229 40.6436 90.4883 40.4561 90.4883 cv
40.2686 90.4883 40.1104 90.4229 39.9814 90.292 cv
cp
f
41.8564 90.2129 mo
43.2861 88.7295 44.2568 87.6406 44.7686 86.9458 cv
45.2803 86.251 45.5361 85.5737 45.5361 84.9146 cv
45.5361 84.3369 45.3799 83.897 45.0674 83.5942 cv
44.7549 83.292 44.3818 83.1406 43.9482 83.1406 cv
43.4131 83.1406 42.9795 83.3359 42.6475 83.7261 cv
42.4639 83.9409 42.2881 84.2705 42.1201 84.7153 cv
41.8682 84.6626 li
42.0635 83.7646 42.3945 83.1411 42.8613 82.7915 cv
43.3281 82.4424 43.8291 82.2676 44.3643 82.2676 cv
45.0244 82.2676 45.5586 82.4756 45.9668 82.8911 cv
46.375 83.3066 46.5791 83.8154 46.5791 84.416 cv
46.5791 85.0562 46.3584 85.6729 45.9165 86.2661 cv
45.4751 86.8594 44.5156 87.915 43.0386 89.4336 cv
45.729 89.4336 li
46.104 89.4336 46.3677 89.3887 46.5205 89.2988 cv
46.6729 89.2095 46.8447 88.9907 47.0361 88.6436 cv
47.1885 88.7134 li
46.5381 90.3477 li
41.8564 90.3477 li
41.8564 90.2129 li
cp
f
49.2734 89.6533 mo
49.6353 89.9053 49.9141 90.0313 50.1099 90.0313 cv
50.5596 90.0313 50.9526 89.833 51.2891 89.4365 cv
51.6255 89.04 51.7939 88.5527 51.7939 87.9746 cv
51.7939 86.9629 51.2539 86.2344 50.1743 85.7891 cv
49.5762 85.543 49.0186 85.4199 48.5024 85.4199 cv
48.416 85.4199 48.3623 85.417 48.3408 85.4111 cv
48.3193 85.4053 48.293 85.3848 48.2617 85.3496 cv
48.2695 85.3184 48.2764 85.292 48.2822 85.2705 cv
48.2881 85.249 48.2949 85.2285 48.3027 85.209 cv
49.5806 82.4082 li
52.0933 82.4082 li
52.2178 82.4082 52.3145 82.3867 52.3828 82.3438 cv
52.4512 82.3008 52.54 82.2207 52.6494 82.1035 cv
52.7432 82.1855 li
52.2915 83.2695 li
52.2764 83.3047 52.2334 83.3271 52.1631 83.3369 cv
52.0923 83.3467 52.0161 83.3516 51.9341 83.3516 cv
49.6636 83.3516 li
49.165 84.377 li
49.8062 84.4863 50.2754 84.5898 50.5728 84.6875 cv
51.0615 84.8516 51.4702 85.0938 51.7988 85.4141 cv
52.0806 85.6914 52.2935 86.0029 52.438 86.3486 cv
52.583 86.6943 52.6553 87.0605 52.6553 87.4473 cv
52.6553 88.3105 52.3472 89.0313 51.7314 89.6094 cv
51.1152 90.1875 50.3359 90.4766 49.3936 90.4766 cv
49.0103 90.4766 48.7012 90.4395 48.4668 90.3652 cv
48.0752 90.2441 47.8799 90.0273 47.8799 89.7148 cv
47.8799 89.5977 47.9219 89.4951 48.0059 89.4072 cv
48.0898 89.3193 48.2202 89.2754 48.3965 89.2754 cv
48.6191 89.2754 48.9116 89.4014 49.2734 89.6533 cv
cp
f
36.5537 60.6572 mo
36.7686 60.0283 36.876 59.1191 36.876 57.9287 cv
36.876 56.98 36.8115 56.2231 36.6826 55.6572 cv
36.4404 54.603 35.9873 54.0762 35.3232 54.0762 cv
34.6592 54.0762 34.2041 54.6187 33.958 55.7036 cv
33.8291 56.2813 33.7646 57.0425 33.7646 57.9873 cv
33.7646 58.873 33.8311 59.5815 33.9639 60.1123 cv
34.2139 61.104 34.6826 61.5996 35.3701 61.5996 cv
35.9443 61.5996 36.3389 61.2852 36.5537 60.6572 cv
cp
37.4443 55.1719 mo
37.8389 55.9336 38.0361 56.8086 38.0361 57.7969 cv
38.0361 58.5742 37.915 59.3066 37.6729 59.9941 cv
37.2158 61.2871 36.4248 61.9336 35.2998 61.9336 cv
34.5303 61.9336 33.8975 61.584 33.4014 60.8848 cv
32.8701 60.1387 32.6045 59.125 32.6045 57.8438 cv
32.6045 56.8359 32.7822 55.9688 33.1377 55.2422 cv
33.6182 54.2539 34.3564 53.7598 35.3525 53.7598 cv
36.251 53.7598 36.9482 54.2305 37.4443 55.1719 cv
cp
f
39.9814 61.7666 mo
39.8525 61.6357 39.7881 61.4785 39.7881 61.2949 cv
39.7881 61.1113 39.8535 60.9551 39.9844 60.8262 cv
40.1152 60.6973 40.2725 60.6328 40.4561 60.6328 cv
40.6396 60.6328 40.7959 60.6973 40.9248 60.8262 cv
41.0537 60.9551 41.1182 61.1113 41.1182 61.2949 cv
41.1182 61.4785 41.0547 61.6357 40.9277 61.7666 cv
40.8008 61.8975 40.6436 61.9629 40.4561 61.9629 cv
40.2686 61.9629 40.1104 61.8975 39.9814 61.7666 cv
cp
f
41.8564 61.6875 mo
43.2861 60.2041 44.2568 59.1152 44.7686 58.4204 cv
45.2803 57.7256 45.5361 57.0483 45.5361 56.3892 cv
45.5361 55.8115 45.3799 55.3716 45.0674 55.0688 cv
44.7549 54.7666 44.3818 54.6152 43.9482 54.6152 cv
43.4131 54.6152 42.9795 54.8105 42.6475 55.2007 cv
42.4639 55.4155 42.2881 55.7451 42.1201 56.1899 cv
41.8682 56.1372 li
42.0635 55.2393 42.3945 54.6157 42.8613 54.2661 cv
43.3281 53.917 43.8291 53.7422 44.3643 53.7422 cv
45.0244 53.7422 45.5586 53.9502 45.9668 54.3657 cv
46.375 54.7813 46.5791 55.29 46.5791 55.8906 cv
46.5791 56.5308 46.3584 57.1475 45.9165 57.7407 cv
45.4751 58.334 44.5156 59.3896 43.0386 60.9082 cv
45.729 60.9082 li
46.104 60.9082 46.3677 60.8633 46.5205 60.7734 cv
46.6729 60.6841 46.8447 60.4653 47.0361 60.1182 cv
47.1885 60.188 li
46.5381 61.8223 li
41.8564 61.8223 li
41.8564 61.6875 li
cp
f
51.7939 58.2246 mo
51.5205 57.5527 51.0557 57.2168 50.3994 57.2168 cv
49.7939 57.2168 49.3916 57.3965 49.1924 57.7559 cv
49.0752 57.9668 49.0166 58.3184 49.0166 58.8105 cv
49.0166 59.4473 49.1523 60.0703 49.4238 60.6797 cv
49.6953 61.2891 50.124 61.5938 50.71 61.5938 cv
51.1748 61.5938 51.5127 61.3955 51.7236 60.999 cv
51.9346 60.6025 52.04 60.1387 52.04 59.6074 cv
52.04 59.0879 51.958 58.627 51.7939 58.2246 cv
cp
52.4238 61.0898 mo
51.9648 61.6641 51.3682 61.9512 50.6338 61.9512 cv
49.9463 61.9512 49.3203 61.6289 48.7559 60.9844 cv
48.1914 60.3398 47.9092 59.4824 47.9092 58.4121 cv
47.9092 57.0332 48.4561 55.8496 49.5498 54.8613 cv
50.5264 54.0332 51.624 53.6191 52.8428 53.6191 cv
52.8721 53.8125 li
52.3838 53.9023 51.9629 54.0244 51.6094 54.1787 cv
51.2559 54.333 50.9404 54.5488 50.6631 54.8262 cv
50.3779 55.1074 50.1104 55.4648 49.8604 55.8984 cv
49.6104 56.332 49.4385 56.7617 49.3447 57.1875 cv
49.5869 57.0391 49.7959 56.9297 49.9717 56.8594 cv
50.2842 56.7344 50.5986 56.6719 50.915 56.6719 cv
51.5361 56.6719 52.0576 56.8867 52.4795 57.3164 cv
52.9014 57.7461 53.1123 58.3594 53.1123 59.1563 cv
53.1123 59.8711 52.8828 60.5156 52.4238 61.0898 cv
cp
f
36.5537 32.3779 mo
36.7686 31.749 36.876 30.8398 36.876 29.6494 cv
36.876 28.7007 36.8115 27.9438 36.6826 27.3779 cv
36.4404 26.3237 35.9873 25.7969 35.3232 25.7969 cv
34.6592 25.7969 34.2041 26.3394 33.958 27.4243 cv
33.8291 28.002 33.7646 28.7632 33.7646 29.708 cv
33.7646 30.5938 33.8311 31.3022 33.9639 31.833 cv
34.2139 32.8247 34.6826 33.3203 35.3701 33.3203 cv
35.9443 33.3203 36.3389 33.0059 36.5537 32.3779 cv
cp
37.4443 26.8926 mo
37.8389 27.6543 38.0361 28.5293 38.0361 29.5176 cv
38.0361 30.2949 37.915 31.0273 37.6729 31.7148 cv
37.2158 33.0078 36.4248 33.6543 35.2998 33.6543 cv
34.5303 33.6543 33.8975 33.3047 33.4014 32.6055 cv
32.8701 31.8594 32.6045 30.8457 32.6045 29.5645 cv
32.6045 28.5566 32.7822 27.6895 33.1377 26.9629 cv
33.6182 25.9746 34.3564 25.4805 35.3525 25.4805 cv
36.251 25.4805 36.9482 25.9512 37.4443 26.8926 cv
cp
f
39.9814 33.4873 mo
39.8525 33.3564 39.7881 33.1992 39.7881 33.0156 cv
39.7881 32.832 39.8535 32.6758 39.9844 32.5469 cv
40.1152 32.418 40.2725 32.3535 40.4561 32.3535 cv
40.6396 32.3535 40.7959 32.418 40.9248 32.5469 cv
41.0537 32.6758 41.1182 32.832 41.1182 33.0156 cv
41.1182 33.1992 41.0547 33.3564 40.9277 33.4873 cv
40.8008 33.6182 40.6436 33.6836 40.4561 33.6836 cv
40.2686 33.6836 40.1104 33.6182 39.9814 33.4873 cv
cp
f
41.8564 33.4082 mo
43.2861 31.9248 44.2568 30.8359 44.7686 30.1411 cv
45.2803 29.4463 45.5361 28.769 45.5361 28.1099 cv
45.5361 27.5322 45.3799 27.0923 45.0674 26.7896 cv
44.7549 26.4873 44.3818 26.3359 43.9482 26.3359 cv
43.4131 26.3359 42.9795 26.5313 42.6475 26.9214 cv
42.4639 27.1362 42.2881 27.4658 42.1201 27.9106 cv
41.8682 27.8579 li
42.0635 26.96 42.3945 26.3364 42.8613 25.9868 cv
43.3281 25.6377 43.8291 25.4629 44.3643 25.4629 cv
45.0244 25.4629 45.5586 25.6709 45.9668 26.0864 cv
46.375 26.502 46.5791 27.0107 46.5791 27.6113 cv
46.5791 28.2515 46.3584 28.8682 45.9165 29.4614 cv
45.4751 30.0547 44.5156 31.1104 43.0386 32.6289 cv
45.729 32.6289 li
46.104 32.6289 46.3677 32.584 46.5205 32.4941 cv
46.6729 32.4048 46.8447 32.186 47.0361 31.8389 cv
47.1885 31.9087 li
46.5381 33.543 li
41.8564 33.543 li
41.8564 33.4082 li
cp
f
52.8838 25.6035 mo
52.8838 25.7969 li
50.3408 33.6543 li
49.5713 33.6543 li
51.9399 26.4883 li
49.3853 26.4883 li
49.0068 26.4883 48.7344 26.5508 48.5684 26.6758 cv
48.4023 26.8008 48.1924 27.0625 47.9385 27.4609 cv
47.7334 27.3672 li
47.9873 26.7422 48.1445 26.3564 48.2051 26.21 cv
48.2656 26.0635 48.3447 25.8613 48.4424 25.6035 cv
52.8838 25.6035 li
cp
f
35.373 220.697 mo
35.3755 220.707 35.3765 220.731 35.3765 220.77 cv
35.3765 228.412 li
35.3765 228.738 35.4639 228.945 35.6382 229.034 cv
35.8125 229.123 36.1377 229.176 36.6143 229.193 cv
36.6143 229.371 li
33.0278 229.371 li
33.0278 229.18 li
33.54 229.155 33.874 229.085 34.0308 228.971 cv
34.1875 228.856 34.2656 228.609 34.2656 228.228 cv
34.2656 222.35 li
34.2656 222.147 34.2402 221.993 34.1895 221.887 cv
34.1387 221.781 34.0288 221.728 33.8594 221.728 cv
33.7495 221.728 33.6064 221.759 33.4307 221.82 cv
33.2554 221.881 33.0913 221.946 32.939 222.014 cv
32.939 221.836 li
35.2686 220.649 li
35.3447 220.649 li
35.3618 220.67 35.3711 220.686 35.373 220.697 cv
cp
f
42.3906 228.108 mo
42.6235 227.427 42.7397 226.442 42.7397 225.152 cv
42.7397 224.125 42.6699 223.305 42.5303 222.691 cv
42.2681 221.55 41.7769 220.979 41.0576 220.979 cv
40.3384 220.979 39.8452 221.567 39.5786 222.742 cv
39.439 223.368 39.3691 224.193 39.3691 225.216 cv
39.3691 226.176 39.4409 226.943 39.585 227.519 cv
39.856 228.592 40.3638 229.129 41.1084 229.129 cv
41.7305 229.129 42.1577 228.789 42.3906 228.108 cv
cp
43.3555 222.166 mo
43.7827 222.991 43.9966 223.939 43.9966 225.01 cv
43.9966 225.852 43.8652 226.646 43.603 227.39 cv
43.1079 228.791 42.251 229.491 41.0322 229.491 cv
40.1987 229.491 39.5132 229.112 38.9756 228.355 cv
38.3999 227.547 38.1123 226.449 38.1123 225.061 cv
38.1123 223.969 38.3047 223.029 38.6899 222.242 cv
39.2104 221.171 40.0103 220.636 41.0894 220.636 cv
42.0625 220.636 42.8179 221.146 43.3555 222.166 cv
cp
f
45.291 222.541 mo
52.103 222.541 li
52.103 223.256 li
45.291 223.256 li
45.291 222.541 li
cp
f
56.1416 220.014 mo
53.5059 223.739 li
56.1416 223.739 li
56.1416 220.014 li
cp
56.4961 218.905 mo
57.0063 218.905 li
57.0063 223.739 li
58.1289 223.739 li
58.1289 224.454 li
57.0063 224.454 li
57.0063 226.285 li
56.1523 226.285 li
56.1523 224.454 li
53.0586 224.454 li
53.0586 223.739 li
56.4961 218.905 li
cp
f
38.0049 166.86 mo
38.0068 166.87 38.0078 166.892 38.0078 166.927 cv
38.0078 173.982 li
38.0078 174.283 38.0884 174.474 38.249 174.556 cv
38.4102 174.638 38.7104 174.687 39.1504 174.703 cv
39.1504 174.867 li
35.8398 174.867 li
35.8398 174.691 li
36.3125 174.667 36.6211 174.603 36.7656 174.498 cv
36.9102 174.392 36.9824 174.164 36.9824 173.812 cv
36.9824 168.386 li
36.9824 168.199 36.959 168.056 36.9121 167.958 cv
36.8652 167.861 36.7637 167.812 36.6074 167.812 cv
36.5059 167.812 36.374 167.84 36.2119 167.897 cv
36.0498 167.954 35.8984 168.013 35.7578 168.076 cv
35.7578 167.912 li
37.9082 166.816 li
37.9785 166.816 li
37.9941 166.835 38.0029 166.85 38.0049 166.86 cv
cp
f
44.4824 173.702 mo
44.6973 173.073 44.8047 172.164 44.8047 170.973 cv
44.8047 170.024 44.7402 169.268 44.6113 168.702 cv
44.3691 167.647 43.916 167.121 43.252 167.121 cv
42.5879 167.121 42.1328 167.663 41.8867 168.748 cv
41.7578 169.326 41.6934 170.087 41.6934 171.032 cv
41.6934 171.917 41.7598 172.626 41.8926 173.157 cv
42.1426 174.148 42.6113 174.644 43.2988 174.644 cv
43.873 174.644 44.2676 174.33 44.4824 173.702 cv
cp
45.373 168.216 mo
45.7676 168.978 45.9648 169.853 45.9648 170.841 cv
45.9648 171.619 45.8438 172.351 45.6016 173.039 cv
45.1445 174.332 44.3535 174.978 43.2285 174.978 cv
42.459 174.978 41.8262 174.628 41.3301 173.929 cv
40.7988 173.183 40.5332 172.169 40.5332 170.888 cv
40.5332 169.88 40.7109 169.013 41.0664 168.287 cv
41.5469 167.298 42.2852 166.804 43.2813 166.804 cv
44.1797 166.804 44.877 167.275 45.373 168.216 cv
cp
f
47.1597 168.327 mo
53.4443 168.327 li
53.4443 168.987 li
47.1597 168.987 li
47.1597 168.327 li
cp
f
55.8516 171.155 mo
56.1753 171.361 56.4502 171.464 56.6758 171.464 cv
57.1772 171.464 57.5493 171.295 57.793 170.956 cv
58.0366 170.617 58.1582 170.249 58.1582 169.851 cv
58.1582 169.467 58.0596 169.129 57.8628 168.839 cv
57.5298 168.348 56.9678 168.102 56.1763 168.102 cv
56.1299 168.102 56.085 168.103 56.042 168.104 cv
55.999 168.106 55.9487 168.111 55.8916 168.118 cv
55.8809 167.979 li
56.4536 167.771 56.9048 167.533 57.2344 167.264 cv
57.564 166.996 57.7285 166.641 57.7285 166.201 cv
57.7285 165.811 57.5986 165.513 57.3389 165.309 cv
57.0796 165.105 56.7832 165.003 56.4502 165.003 cv
56.0562 165.003 55.709 165.148 55.4082 165.438 cv
55.2437 165.596 55.0664 165.839 54.8765 166.168 cv
54.71 166.131 li
54.853 165.586 55.1201 165.151 55.5103 164.826 cv
55.9004 164.5 56.3516 164.337 56.8638 164.337 cv
57.4116 164.337 57.835 164.487 58.1338 164.788 cv
58.4331 165.089 58.5825 165.436 58.5825 165.83 cv
58.5825 166.177 58.459 166.496 58.2119 166.786 cv
58.0723 166.951 57.8555 167.135 57.562 167.339 cv
57.9058 167.486 58.1816 167.658 58.3892 167.855 cv
58.7793 168.231 58.9746 168.707 58.9746 169.284 cv
58.9746 169.964 58.707 170.564 58.1719 171.083 cv
57.6362 171.602 56.8745 171.862 55.8862 171.862 cv
55.4458 171.862 55.1367 171.796 54.96 171.666 cv
54.7822 171.535 54.6938 171.395 54.6938 171.244 cv
54.6938 171.151 54.7236 171.062 54.7822 170.976 cv
54.8418 170.89 54.9375 170.847 55.0698 170.847 cv
55.2666 170.847 55.5273 170.95 55.8516 171.155 cv
cp
f
35.373 276.022 mo
35.3755 276.033 35.3765 276.057 35.3765 276.094 cv
35.3765 283.737 li
35.3765 284.063 35.4639 284.27 35.6382 284.36 cv
35.8125 284.448 36.1377 284.501 36.6143 284.518 cv
36.6143 284.696 li
33.0278 284.696 li
33.0278 284.505 li
33.54 284.48 33.874 284.411 34.0308 284.295 cv
34.1875 284.182 34.2656 283.934 34.2656 283.553 cv
34.2656 277.675 li
34.2656 277.472 34.2402 277.318 34.1895 277.211 cv
34.1387 277.106 34.0288 277.053 33.8594 277.053 cv
33.7495 277.053 33.6064 277.083 33.4307 277.145 cv
33.2554 277.207 33.0913 277.271 32.939 277.338 cv
32.939 277.161 li
35.2686 275.974 li
35.3447 275.974 li
35.3618 275.996 35.3711 276.011 35.373 276.022 cv
cp
f
42.3906 283.433 mo
42.6235 282.752 42.7397 281.767 42.7397 280.478 cv
42.7397 279.45 42.6699 278.63 42.5303 278.017 cv
42.2681 276.875 41.7769 276.304 41.0576 276.304 cv
40.3384 276.304 39.8452 276.892 39.5786 278.068 cv
39.439 278.693 39.3691 279.518 39.3691 280.542 cv
39.3691 281.501 39.4409 282.268 39.585 282.843 cv
39.856 283.917 40.3638 284.455 41.1084 284.455 cv
41.7305 284.455 42.1577 284.114 42.3906 283.433 cv
cp
43.3555 277.491 mo
43.7827 278.317 43.9966 279.264 43.9966 280.334 cv
43.9966 281.177 43.8652 281.97 43.603 282.715 cv
43.1079 284.116 42.251 284.817 41.0322 284.817 cv
40.1987 284.817 39.5132 284.438 38.9756 283.68 cv
38.3999 282.872 38.1123 281.774 38.1123 280.385 cv
38.1123 279.293 38.3047 278.354 38.6899 277.567 cv
39.2104 276.497 40.0103 275.961 41.0894 275.961 cv
42.0625 275.961 42.8179 276.471 43.3555 277.491 cv
cp
f
45.291 277.866 mo
52.103 277.866 li
52.103 278.581 li
45.291 278.581 li
45.291 277.866 li
cp
f
54.5615 280.973 mo
54.8936 281.205 55.1489 281.32 55.3281 281.32 cv
55.7407 281.32 56.1011 281.138 56.4097 280.775 cv
56.7178 280.412 56.8721 279.964 56.8721 279.434 cv
56.8721 278.507 56.377 277.839 55.3877 277.431 cv
54.8389 277.206 54.3281 277.092 53.8545 277.092 cv
53.7759 277.092 53.7266 277.09 53.7065 277.084 cv
53.687 277.08 53.6626 277.061 53.6343 277.029 cv
53.6411 277 53.6475 276.976 53.6528 276.956 cv
53.6582 276.936 53.6646 276.917 53.6719 276.9 cv
54.8433 274.333 li
57.1465 274.333 li
57.2607 274.333 57.3491 274.312 57.4121 274.273 cv
57.4746 274.234 57.5562 274.161 57.6563 274.053 cv
57.7422 274.127 li
57.3281 275.122 li
57.314 275.154 57.2749 275.174 57.2104 275.183 cv
57.1455 275.192 57.0757 275.197 57.0005 275.197 cv
54.9194 275.197 li
54.4624 276.137 li
55.0503 276.237 55.4805 276.332 55.7529 276.421 cv
56.2007 276.572 56.5752 276.793 56.8765 277.087 cv
57.1348 277.341 57.3301 277.627 57.4624 277.944 cv
57.5952 278.261 57.6616 278.596 57.6616 278.952 cv
57.6616 279.743 57.3794 280.403 56.8145 280.933 cv
56.25 281.463 55.5356 281.728 54.6714 281.728 cv
54.3203 281.728 54.0371 281.694 53.8218 281.625 cv
53.4634 281.515 53.2842 281.316 53.2842 281.03 cv
53.2842 280.922 53.3228 280.829 53.3999 280.748 cv
53.4771 280.667 53.5962 280.627 53.7573 280.627 cv
53.9619 280.627 54.23 280.743 54.5615 280.973 cv
cp
f
35.373 325.104 mo
35.3755 325.115 35.3765 325.139 35.3765 325.176 cv
35.3765 332.819 li
35.3765 333.145 35.4639 333.352 35.6382 333.442 cv
35.8125 333.53 36.1377 333.583 36.6143 333.6 cv
36.6143 333.778 li
33.0278 333.778 li
33.0278 333.587 li
33.54 333.562 33.874 333.493 34.0308 333.377 cv
34.1875 333.264 34.2656 333.016 34.2656 332.635 cv
34.2656 326.757 li
34.2656 326.554 34.2402 326.4 34.1895 326.293 cv
34.1387 326.188 34.0288 326.135 33.8594 326.135 cv
33.7495 326.135 33.6064 326.166 33.4307 326.227 cv
33.2554 326.289 33.0913 326.353 32.939 326.42 cv
32.939 326.243 li
35.2686 325.056 li
35.3447 325.056 li
35.3618 325.078 35.3711 325.093 35.373 325.104 cv
cp
f
42.3906 332.515 mo
42.6235 331.834 42.7397 330.849 42.7397 329.56 cv
42.7397 328.532 42.6699 327.712 42.5303 327.099 cv
42.2681 325.958 41.7769 325.386 41.0576 325.386 cv
40.3384 325.386 39.8452 325.974 39.5786 327.15 cv
39.439 327.775 39.3691 328.6 39.3691 329.624 cv
39.3691 330.583 39.4409 331.35 39.585 331.925 cv
39.856 333 40.3638 333.537 41.1084 333.537 cv
41.7305 333.537 42.1577 333.196 42.3906 332.515 cv
cp
43.3555 326.573 mo
43.7827 327.399 43.9966 328.346 43.9966 329.417 cv
43.9966 330.259 43.8652 331.052 43.603 331.797 cv
43.1079 333.198 42.251 333.899 41.0322 333.899 cv
40.1987 333.899 39.5132 333.52 38.9756 332.762 cv
38.3999 331.954 38.1123 330.856 38.1123 329.467 cv
38.1123 328.375 38.3047 327.436 38.6899 326.649 cv
39.2104 325.579 40.0103 325.043 41.0894 325.043 cv
42.0625 325.043 42.8179 325.553 43.3555 326.573 cv
cp
f
45.291 326.948 mo
52.103 326.948 li
52.103 327.663 li
45.291 327.663 li
45.291 326.948 li
cp
f
56.4385 327.411 mo
56.6987 327.274 56.8467 327.16 56.8828 327.067 cv
56.897 327.031 56.9097 326.897 56.9204 326.667 cv
56.9312 326.435 56.9365 326.249 56.9365 326.105 cv
56.9365 325.36 56.811 324.755 56.5596 324.29 cv
56.3086 323.824 55.9409 323.591 55.4565 323.591 cv
55.105 323.591 54.8203 323.75 54.6035 324.069 cv
54.3862 324.388 54.2778 324.864 54.2778 325.499 cv
54.2778 326.021 54.3789 326.504 54.582 326.948 cv
54.7847 327.392 55.1514 327.614 55.6826 327.614 cv
55.9263 327.614 56.1782 327.546 56.4385 327.411 cv
cp
57.3555 324.228 mo
57.7852 324.856 58 325.557 58 326.331 cv
58 326.875 57.8979 327.428 57.6938 327.991 cv
57.4897 328.552 57.1924 329.053 56.8022 329.495 cv
56.3477 330.002 55.771 330.38 55.0728 330.627 cv
54.6826 330.767 54.1899 330.875 53.5957 330.95 cv
53.542 330.735 li
53.915 330.649 54.2251 330.557 54.4727 330.461 cv
54.9175 330.286 55.2739 330.071 55.5435 329.817 cv
55.9233 329.455 56.2271 329.051 56.4551 328.605 cv
56.6826 328.16 56.8252 327.786 56.8828 327.485 cv
56.6943 327.624 li
56.4292 327.823 56.1172 327.959 55.7583 328.034 cv
55.5718 328.077 55.4019 328.098 55.2476 328.098 cv
54.6382 328.098 54.1548 327.882 53.7979 327.452 cv
53.4409 327.02 53.2627 326.506 53.2627 325.909 cv
53.2627 325.147 53.4751 324.519 53.8989 324.026 cv
54.3237 323.532 54.8667 323.286 55.5293 323.286 cv
56.3169 323.286 56.9258 323.599 57.3555 324.228 cv
cp
f
31.2241 425.531 mo
31.2261 425.541 31.2271 425.563 31.2271 425.598 cv
31.2271 432.653 li
31.2271 432.954 31.3076 433.145 31.4683 433.227 cv
31.6294 433.309 31.9297 433.358 32.3696 433.374 cv
32.3696 433.538 li
29.0591 433.538 li
29.0591 433.362 li
29.5317 433.338 29.8403 433.274 29.9849 433.168 cv
30.1294 433.063 30.2017 432.834 30.2017 432.483 cv
30.2017 427.057 li
30.2017 426.87 30.1782 426.727 30.1313 426.629 cv
30.0845 426.532 29.9829 426.483 29.8267 426.483 cv
29.7251 426.483 29.5933 426.511 29.4312 426.568 cv
29.269 426.625 29.1177 426.684 28.9771 426.747 cv
28.9771 426.583 li
31.1274 425.487 li
31.1978 425.487 li
31.2134 425.506 31.2222 425.521 31.2241 425.531 cv
cp
f
37.7017 432.373 mo
37.9165 431.744 38.0239 430.834 38.0239 429.644 cv
38.0239 428.696 37.9595 427.938 37.8306 427.373 cv
37.5884 426.319 37.1353 425.792 36.4712 425.792 cv
35.8071 425.792 35.3521 426.334 35.106 427.419 cv
34.9771 427.997 34.9126 428.758 34.9126 429.703 cv
34.9126 430.588 34.979 431.297 35.1118 431.828 cv
35.3618 432.819 35.8306 433.315 36.5181 433.315 cv
37.0923 433.315 37.4868 433 37.7017 432.373 cv
cp
38.5923 426.887 mo
38.9868 427.649 39.1841 428.524 39.1841 429.512 cv
39.1841 430.29 39.063 431.022 38.8208 431.709 cv
38.3638 433.002 37.5728 433.649 36.4478 433.649 cv
35.6782 433.649 35.0454 433.299 34.5493 432.6 cv
34.0181 431.854 33.7524 430.84 33.7524 429.559 cv
33.7524 428.551 33.9302 427.684 34.2856 426.958 cv
34.7661 425.969 35.5044 425.475 36.5005 425.475 cv
37.3989 425.475 38.0962 425.946 38.5923 426.887 cv
cp
f
40.3789 426.998 mo
46.6636 426.998 li
46.6636 427.657 li
40.3789 427.657 li
40.3789 426.998 li
cp
f
50.7144 423.112 mo
50.7158 423.121 50.7168 423.141 50.7168 423.174 cv
50.7168 429.641 li
50.7168 429.917 50.7905 430.092 50.938 430.167 cv
51.0854 430.243 51.3608 430.287 51.7642 430.301 cv
51.7642 430.452 li
48.7295 430.452 li
48.7295 430.291 li
49.1626 430.269 49.4458 430.209 49.5781 430.114 cv
49.7104 430.016 49.7769 429.807 49.7769 429.485 cv
49.7769 424.511 li
49.7769 424.339 49.7554 424.208 49.7124 424.12 cv
49.6694 424.03 49.5762 423.985 49.4331 423.985 cv
49.3398 423.985 49.2192 424.011 49.0708 424.063 cv
48.9219 424.115 48.7832 424.169 48.6543 424.227 cv
48.6543 424.077 li
50.6255 423.072 li
50.6899 423.072 li
50.7041 423.089 50.7124 423.103 50.7144 423.112 cv
cp
f
56.6519 429.383 mo
56.8486 428.807 56.9473 427.974 56.9473 426.882 cv
56.9473 426.013 56.8882 425.319 56.77 424.8 cv
56.5479 423.834 56.1328 423.351 55.5239 423.351 cv
54.915 423.351 54.498 423.848 54.2725 424.843 cv
54.1543 425.373 54.0952 426.071 54.0952 426.936 cv
54.0952 427.749 54.1563 428.398 54.2778 428.884 cv
54.5068 429.793 54.9365 430.248 55.5669 430.248 cv
56.0933 430.248 56.4551 429.959 56.6519 429.383 cv
cp
57.4683 424.356 mo
57.8301 425.053 58.0107 425.856 58.0107 426.762 cv
58.0107 427.474 57.8999 428.146 57.6777 428.776 cv
57.2588 429.961 56.5337 430.553 55.5024 430.553 cv
54.7969 430.553 54.2168 430.233 53.7622 429.592 cv
53.2754 428.909 53.0317 427.979 53.0317 426.805 cv
53.0317 425.881 53.1948 425.086 53.5205 424.42 cv
53.9609 423.514 54.6377 423.061 55.5508 423.061 cv
56.3745 423.061 57.0137 423.493 57.4683 424.356 cv
cp
f
52.7925 402.784 mo
54.2222 401.3 55.1929 400.211 55.7046 399.516 cv
56.2163 398.822 56.4722 398.145 56.4722 397.485 cv
56.4722 396.908 56.3159 396.467 56.0034 396.166 cv
55.6909 395.863 55.3179 395.711 54.8843 395.711 cv
54.3491 395.711 53.9155 395.907 53.5835 396.296 cv
53.3999 396.511 53.2241 396.841 53.0562 397.286 cv
52.8042 397.234 li
52.9995 396.335 53.3306 395.711 53.7974 395.363 cv
54.2642 395.013 54.7651 394.838 55.3003 394.838 cv
55.9604 394.838 56.4946 395.046 56.9028 395.462 cv
57.311 395.877 57.5151 396.386 57.5151 396.987 cv
57.5151 397.627 57.2944 398.244 56.8525 398.837 cv
56.4111 399.43 55.4517 400.486 53.9746 402.004 cv
56.665 402.004 li
57.04 402.004 57.3037 401.959 57.4565 401.87 cv
57.6089 401.78 57.7808 401.561 57.9722 401.214 cv
58.1245 401.285 li
57.4741 402.918 li
52.7925 402.918 li
52.7925 402.784 li
cp
f
54.2095 362.397 mo
54.5713 362.649 54.8501 362.775 55.0459 362.775 cv
55.4956 362.775 55.8887 362.577 56.2251 362.18 cv
56.5615 361.784 56.73 361.296 56.73 360.718 cv
56.73 359.707 56.1899 358.978 55.1104 358.533 cv
54.5122 358.287 53.9546 358.164 53.4385 358.164 cv
53.3521 358.164 53.2983 358.161 53.2769 358.155 cv
53.2554 358.149 53.229 358.128 53.1978 358.093 cv
53.2056 358.062 53.2124 358.036 53.2183 358.014 cv
53.2241 357.993 53.231 357.972 53.2388 357.953 cv
54.5166 355.152 li
57.0293 355.152 li
57.1538 355.152 57.2505 355.13 57.3188 355.087 cv
57.3872 355.044 57.4761 354.964 57.5854 354.847 cv
57.6792 354.929 li
57.2275 356.013 li
57.2124 356.048 57.1694 356.071 57.0991 356.081 cv
57.0283 356.09 56.9521 356.095 56.8701 356.095 cv
54.5996 356.095 li
54.1011 357.121 li
54.7422 357.23 55.2114 357.333 55.5088 357.431 cv
55.9976 357.595 56.4063 357.837 56.7349 358.158 cv
57.0166 358.435 57.2295 358.747 57.374 359.092 cv
57.519 359.438 57.5913 359.804 57.5913 360.191 cv
57.5913 361.054 57.2832 361.775 56.6675 362.353 cv
56.0513 362.931 55.272 363.22 54.3296 363.22 cv
53.9463 363.22 53.6372 363.183 53.4028 363.109 cv
53.0112 362.988 52.8159 362.771 52.8159 362.458 cv
52.8159 362.341 52.8579 362.239 52.9419 362.151 cv
53.0259 362.063 53.1563 362.019 53.3325 362.019 cv
53.5552 362.019 53.8477 362.145 54.2095 362.397 cv
cp
f
5.57959 366.351 mo
5.57959 366.561 li
2.82471 375.074 li
1.99121 375.074 li
4.55713 367.31 li
1.78955 367.31 li
1.37939 367.31 1.08398 367.377 .904297 367.513 cv
.724609 367.649 .49707 367.932 .222168 368.364 cv
0 368.262 li
.274902 367.585 .445313 367.167 .510742 367.008 cv
.57666 366.85 .662109 366.63 .768066 366.351 cv
5.57959 366.351 li
cp
f
6.41455 379.798 mo
6.96631 379.74 7.32373 379.642 7.4873 379.503 cv
7.65088 379.365 7.73291 379.014 7.73291 378.451 cv
7.73291 371.778 li
7.73291 371.247 7.65234 370.898 7.49121 370.735 cv
7.33008 370.571 6.97119 370.47 6.41455 370.43 cv
6.41455 370.153 li
10.6479 370.153 li
10.6479 370.43 li
10.0962 370.459 9.72607 370.55 9.53809 370.702 cv
9.3501 370.853 9.25635 371.178 9.25635 371.676 cv
9.25635 378.883 li
9.25635 379.049 9.28418 379.179 9.34082 379.275 cv
9.39697 379.37 9.52051 379.43 9.71094 379.454 cv
9.82324 379.469 9.94189 379.479 10.0669 379.483 cv
10.1914 379.489 10.4248 379.491 10.7671 379.491 cv
12.1016 379.491 13.0034 379.381 13.4731 379.161 cv
13.9424 378.942 14.397 378.38 14.8369 377.477 cv
15.2183 377.477 li
14.4849 380.077 li
6.41455 380.077 li
6.41455 379.798 li
cp
f
16.8662 370.078 mo
17.0127 369.927 17.1934 369.852 17.4082 369.852 cv
17.6182 369.852 17.7974 369.926 17.9468 370.075 cv
18.0952 370.222 18.1699 370.404 18.1699 370.618 cv
18.1699 370.827 18.0952 371.005 17.9468 371.153 cv
17.7974 371.301 17.6182 371.375 17.4082 371.375 cv
17.1934 371.375 17.0127 371.301 16.8662 371.153 cv
16.7197 371.005 16.6465 370.827 16.6465 370.618 cv
16.6465 370.409 16.7197 370.229 16.8662 370.078 cv
cp
15.7017 379.872 mo
16.2241 379.823 16.5537 379.734 16.6904 379.604 cv
16.8271 379.475 16.8955 379.125 16.8955 378.553 cv
16.8955 375.059 li
16.8955 374.743 16.8735 374.523 16.8296 374.401 cv
16.7563 374.201 16.6025 374.1 16.3682 374.1 cv
16.3145 374.1 16.2622 374.105 16.2104 374.115 cv
16.1597 374.125 16.0117 374.164 15.7676 374.232 cv
15.7676 374.004 li
16.0825 373.903 li
16.937 373.624 17.5327 373.415 17.8696 373.272 cv
18.0063 373.213 18.0942 373.184 18.1333 373.184 cv
18.1431 373.219 18.1479 373.255 18.1479 373.294 cv
18.1479 378.553 li
18.1479 379.11 18.2148 379.459 18.3491 379.6 cv
18.4834 379.743 18.7876 379.833 19.2612 379.872 cv
19.2612 380.077 li
15.7017 380.077 li
15.7017 379.872 li
cp
f
22.8633 369.94 mo
23.6006 369.94 li
20.3535 380.326 li
19.6079 380.326 li
22.8633 369.94 li
cp
f
23.9854 379.798 mo
24.5713 379.735 24.9375 379.627 25.084 379.474 cv
25.2305 379.321 25.3037 378.921 25.3037 378.275 cv
25.3037 371.778 li
25.3037 371.242 25.2217 370.892 25.0581 370.731 cv
24.8945 370.57 24.5371 370.47 23.9854 370.43 cv
23.9854 370.153 li
28.1455 370.153 li
28.1455 370.43 li
27.5967 370.47 27.2397 370.57 27.0747 370.731 cv
26.9097 370.892 26.8271 371.242 26.8271 371.778 cv
26.8271 374.701 li
31.3828 374.701 li
31.3828 371.778 li
31.3828 371.242 31.3022 370.892 31.1411 370.731 cv
30.98 370.57 30.6211 370.47 30.0645 370.43 cv
30.0645 370.153 li
34.2246 370.153 li
34.2246 370.43 li
33.6729 370.47 33.3149 370.57 33.1519 370.731 cv
32.9878 370.892 32.9063 371.242 32.9063 371.778 cv
32.9063 378.451 li
32.9063 378.995 32.9878 379.343 33.1519 379.496 cv
33.3149 379.649 33.6729 379.75 34.2246 379.798 cv
34.2246 380.077 li
30.0645 380.077 li
30.0645 379.798 li
30.6553 379.74 31.0225 379.633 31.1665 379.478 cv
31.3105 379.322 31.3828 378.921 31.3828 378.275 cv
31.3828 375.36 li
26.8271 375.36 li
26.8271 378.451 li
26.8271 378.995 26.9097 379.344 27.0747 379.5 cv
27.2397 379.655 27.5967 379.754 28.1455 379.798 cv
28.1455 380.077 li
23.9854 380.077 li
23.9854 379.798 li
cp
f
41.6436 382.109 mo
41.8618 382.25 42.1187 382.321 42.415 382.321 cv
42.8721 382.321 43.2627 382.093 43.5859 381.639 cv
43.9102 381.185 44.0718 380.552 44.0718 379.741 cv
44.0718 378.963 43.9033 378.382 43.5674 377.998 cv
43.2305 377.613 42.8403 377.42 42.396 377.42 cv
42.083 377.42 41.7974 377.517 41.5391 377.708 cv
41.2808 377.901 41.1519 378.09 41.1519 378.276 cv
41.1519 381.465 li
41.2617 381.752 41.4258 381.967 41.6436 382.109 cv
cp
39.1396 385.259 mo
39.5347 385.234 39.7856 385.15 39.8931 385.005 cv
40 384.862 40.0537 384.635 40.0537 384.327 cv
40.0537 378.233 li
40.0537 377.912 40.0146 377.705 39.9365 377.614 cv
39.8579 377.523 39.7109 377.478 39.4951 377.478 cv
39.4487 377.478 39.4053 377.48 39.3652 377.484 cv
39.3247 377.488 39.2666 377.497 39.1904 377.509 cv
39.1904 377.3 li
39.7935 377.103 li
39.8145 377.099 40.2397 376.953 41.0693 376.666 cv
41.0903 376.666 41.1064 376.674 41.1172 376.694 cv
41.1274 376.712 41.1328 376.735 41.1328 376.76 cv
41.1328 377.617 li
41.4121 377.337 41.6577 377.13 41.8691 376.995 cv
42.25 376.758 42.6416 376.64 43.0435 376.64 cv
43.6274 376.64 44.1299 376.888 44.5508 377.384 cv
44.9722 377.881 45.1826 378.561 45.1826 379.423 cv
45.1826 380.269 44.9297 381.037 44.4238 381.725 cv
43.9185 382.415 43.2827 382.759 42.5166 382.759 cv
42.2798 382.759 42.0742 382.729 41.9009 382.669 cv
41.6299 382.582 41.3804 382.418 41.1519 382.181 cv
41.1519 384.263 li
41.1519 384.691 41.2217 384.953 41.3613 385.05 cv
41.501 385.148 41.8057 385.213 42.2754 385.248 cv
42.2754 385.469 li
39.1396 385.469 li
39.1396 385.259 li
cp
f
.896699 lw
0 lj
4 ml
37.0625 368.388 mo
37.0625 382.639 li
@
14.5552 99.3755 mo
14.5552 99.6538 li
14.2036 99.644 13.9399 99.6709 13.7642 99.7344 cv
13.5884 99.7979 13.5005 99.9346 13.5005 100.145 cv
13.5005 100.208 13.5151 100.287 13.5444 100.383 cv
13.5737 100.478 13.6396 100.604 13.7422 100.76 cv
15.9502 103.997 li
18.1035 100.708 li
18.1914 100.567 18.2485 100.45 18.2754 100.357 cv
18.3022 100.264 18.3159 100.196 18.3159 100.152 cv
18.3159 99.937 18.2012 99.7954 17.9717 99.7271 cv
17.835 99.6831 17.6006 99.6587 17.2686 99.6538 cv
17.2686 99.3755 li
20.5464 99.3755 li
20.5464 99.6538 li
20.2441 99.6685 19.9736 99.7588 19.7349 99.9248 cv
19.3643 100.184 18.9478 100.665 18.4844 101.368 cv
16.269 104.751 li
16.269 107.669 li
16.269 108.249 16.3628 108.611 16.5513 108.754 cv
16.7388 108.898 17.1602 108.987 17.8145 109.021 cv
17.8145 109.3 li
13.2368 109.3 li
13.2368 109.021 li
13.9155 108.982 14.3364 108.881 14.5005 108.718 cv
14.6636 108.555 14.7456 108.146 14.7456 107.494 cv
14.7456 104.891 li
12.7827 102.012 li
12.104 101.021 11.6279 100.385 11.3545 100.104 cv
11.0811 99.8237 10.749 99.6733 10.3584 99.6538 cv
10.3584 99.3755 li
14.5552 99.3755 li
cp
f
23.4282 111.332 mo
23.6465 111.474 23.9033 111.544 24.1997 111.544 cv
24.6567 111.544 25.0474 111.317 25.3706 110.863 cv
25.6948 110.409 25.8564 109.776 25.8564 108.964 cv
25.8564 108.187 25.688 107.605 25.3521 107.221 cv
25.0151 106.836 24.625 106.644 24.1807 106.644 cv
23.8677 106.644 23.582 106.74 23.3237 106.933 cv
23.0654 107.125 22.9365 107.314 22.9365 107.5 cv
22.9365 110.688 li
23.0464 110.976 23.2104 111.19 23.4282 111.332 cv
cp
20.9243 114.483 mo
21.3193 114.458 21.5703 114.374 21.6777 114.229 cv
21.7847 114.085 21.8384 113.859 21.8384 113.55 cv
21.8384 107.457 li
21.8384 107.135 21.7993 106.929 21.7212 106.837 cv
21.6426 106.747 21.4956 106.701 21.2798 106.701 cv
21.2334 106.701 21.1899 106.703 21.1499 106.708 cv
21.1094 106.712 21.0513 106.72 20.9751 106.733 cv
20.9751 106.523 li
21.5781 106.327 li
21.5991 106.322 22.0244 106.176 22.854 105.889 cv
22.875 105.889 22.8911 105.898 22.9019 105.917 cv
22.9121 105.936 22.9175 105.958 22.9175 105.984 cv
22.9175 106.84 li
23.1968 106.562 23.4424 106.354 23.6538 106.219 cv
24.0347 105.982 24.4263 105.863 24.8281 105.863 cv
25.4121 105.863 25.9146 106.112 26.3354 106.608 cv
26.7568 107.105 26.9673 107.785 26.9673 108.647 cv
26.9673 109.493 26.7144 110.26 26.2085 110.949 cv
25.7031 111.638 25.0674 111.982 24.3013 111.982 cv
24.0645 111.982 23.8589 111.953 23.6855 111.894 cv
23.4146 111.805 23.165 111.642 22.9365 111.405 cv
22.9365 113.487 li
22.9365 113.914 23.0063 114.177 23.146 114.274 cv
23.2856 114.371 23.5903 114.437 24.0601 114.471 cv
24.0601 114.693 li
20.9243 114.693 li
20.9243 114.483 li
cp
f
103.56 257.375 mo
103.914 257.599 104.213 257.711 104.459 257.711 cv
105.006 257.711 105.413 257.526 105.678 257.157 cv
105.944 256.787 106.077 256.385 106.077 255.951 cv
106.077 255.532 105.969 255.165 105.754 254.848 cv
105.391 254.312 104.778 254.043 103.915 254.043 cv
103.864 254.043 103.815 254.044 103.768 254.046 cv
103.721 254.048 103.667 254.053 103.604 254.061 cv
103.592 253.909 li
104.217 253.682 104.709 253.422 105.069 253.129 cv
105.428 252.836 105.608 252.45 105.608 251.969 cv
105.608 251.543 105.466 251.219 105.183 250.997 cv
104.9 250.774 104.577 250.663 104.213 250.663 cv
103.784 250.663 103.405 250.821 103.077 251.137 cv
102.897 251.309 102.704 251.575 102.497 251.934 cv
102.315 251.893 li
102.471 251.299 102.762 250.825 103.188 250.469 cv
103.614 250.114 104.106 249.936 104.665 249.936 cv
105.262 249.936 105.724 250.1 106.05 250.428 cv
106.376 250.756 106.54 251.135 106.54 251.565 cv
106.54 251.944 106.405 252.292 106.135 252.608 cv
105.983 252.788 105.747 252.989 105.426 253.211 cv
105.801 253.372 106.102 253.559 106.329 253.774 cv
106.754 254.184 106.967 254.704 106.967 255.333 cv
106.967 256.075 106.675 256.729 106.091 257.295 cv
105.507 257.862 104.676 258.145 103.598 258.145 cv
103.118 258.145 102.781 258.074 102.587 257.931 cv
102.394 257.789 102.297 257.635 102.297 257.471 cv
102.297 257.37 102.33 257.272 102.394 257.178 cv
102.458 257.084 102.563 257.038 102.708 257.038 cv
102.922 257.038 103.207 257.15 103.56 257.375 cv
cp
f
108.253 262.26 mo
108.8 262.201 109.142 262.101 109.279 261.958 cv
109.416 261.814 109.484 261.442 109.484 260.838 cv
109.484 254.775 li
109.484 254.273 109.408 253.948 109.255 253.797 cv
109.102 253.647 108.769 253.554 108.253 253.517 cv
108.253 253.257 li
112.136 253.257 li
112.136 253.517 li
111.624 253.554 111.291 253.647 111.137 253.797 cv
110.983 253.948 110.906 254.273 110.906 254.775 cv
110.906 257.502 li
115.158 257.502 li
115.158 254.775 li
115.158 254.273 115.083 253.948 114.932 253.797 cv
114.782 253.647 114.447 253.554 113.927 253.517 cv
113.927 253.257 li
117.81 253.257 li
117.81 253.517 li
117.295 253.554 116.961 253.647 116.809 253.797 cv
116.656 253.948 116.58 254.273 116.58 254.775 cv
116.58 261.002 li
116.58 261.51 116.656 261.835 116.809 261.978 cv
116.961 262.121 117.295 262.215 117.81 262.26 cv
117.81 262.52 li
113.927 262.52 li
113.927 262.26 li
114.479 262.206 114.822 262.106 114.956 261.961 cv
115.09 261.816 115.158 261.442 115.158 260.838 cv
115.158 258.118 li
110.906 258.118 li
110.906 261.002 li
110.906 261.51 110.983 261.836 111.137 261.981 cv
111.291 262.126 111.624 262.219 112.136 262.26 cv
112.136 262.52 li
108.253 262.52 li
108.253 262.26 li
cp
f
119.758 257.297 mo
119.612 257.543 119.508 257.854 119.444 258.227 cv
122.329 258.227 li
122.278 257.771 122.192 257.432 122.069 257.208 cv
121.846 256.808 121.472 256.607 120.948 256.607 cv
120.428 256.607 120.032 256.837 119.758 257.297 cv
cp
123.033 256.774 mo
123.516 257.219 123.757 257.849 123.757 258.665 cv
119.417 258.665 li
119.462 259.72 119.701 260.488 120.134 260.97 cv
120.567 261.452 121.08 261.693 121.672 261.693 cv
122.151 261.693 122.554 261.568 122.882 261.318 cv
123.21 261.068 123.514 260.713 123.792 260.254 cv
124.031 260.335 li
123.844 260.916 123.494 261.452 122.981 261.945 cv
122.469 262.438 121.841 262.684 121.098 262.684 cv
120.241 262.684 119.58 262.36 119.112 261.713 cv
118.645 261.066 118.412 260.321 118.412 259.478 cv
118.412 258.562 118.683 257.771 119.225 257.106 cv
119.768 256.44 120.474 256.108 121.344 256.108 cv
121.987 256.108 122.55 256.33 123.033 256.774 cv
cp
f
127.42 253.059 mo
128.108 253.059 li
125.078 262.752 li
124.381 262.752 li
127.42 253.059 li
cp
f
128.467 262.26 mo
129.014 262.201 129.356 262.101 129.493 261.958 cv
129.629 261.814 129.698 261.442 129.698 260.838 cv
129.698 254.775 li
129.698 254.273 129.622 253.948 129.469 253.797 cv
129.316 253.647 128.982 253.554 128.467 253.517 cv
128.467 253.257 li
132.35 253.257 li
132.35 253.517 li
131.838 253.554 131.505 253.647 131.351 253.797 cv
131.197 253.948 131.12 254.273 131.12 254.775 cv
131.12 257.502 li
135.372 257.502 li
135.372 254.775 li
135.372 254.273 135.296 253.948 135.146 253.797 cv
134.996 253.647 134.661 253.554 134.141 253.517 cv
134.141 253.257 li
138.024 253.257 li
138.024 253.517 li
137.509 253.554 137.175 253.647 137.022 253.797 cv
136.87 253.948 136.793 254.273 136.793 254.775 cv
136.793 261.002 li
136.793 261.51 136.87 261.835 137.022 261.978 cv
137.175 262.121 137.509 262.215 138.024 262.26 cv
138.024 262.52 li
134.141 262.52 li
134.141 262.26 li
134.692 262.206 135.036 262.106 135.17 261.961 cv
135.304 261.816 135.372 261.442 135.372 260.838 cv
135.372 258.118 li
131.12 258.118 li
131.12 261.002 li
131.12 261.51 131.197 261.836 131.351 261.981 cv
131.505 262.126 131.838 262.219 132.35 262.26 cv
132.35 262.52 li
128.467 262.52 li
128.467 262.26 li
cp
f
145.474 264.769 mo
145.692 264.91 145.949 264.981 146.245 264.981 cv
146.702 264.981 147.093 264.754 147.416 264.299 cv
147.74 263.845 147.902 263.212 147.902 262.401 cv
147.902 261.623 147.733 261.042 147.397 260.658 cv
147.061 260.273 146.67 260.081 146.226 260.081 cv
145.913 260.081 145.627 260.177 145.369 260.369 cv
145.111 260.562 144.982 260.75 144.982 260.937 cv
144.982 264.125 li
145.092 264.413 145.256 264.627 145.474 264.769 cv
cp
142.97 267.92 mo
143.365 267.895 143.616 267.81 143.723 267.666 cv
143.83 267.522 143.884 267.296 143.884 266.987 cv
143.884 260.893 li
143.884 260.571 143.845 260.365 143.767 260.274 cv
143.688 260.183 143.541 260.138 143.325 260.138 cv
143.279 260.138 143.235 260.14 143.195 260.144 cv
143.155 260.148 143.097 260.157 143.021 260.169 cv
143.021 259.96 li
143.624 259.763 li
143.645 259.759 144.07 259.613 144.899 259.325 cv
144.92 259.325 144.937 259.334 144.947 259.354 cv
144.958 259.373 144.963 259.395 144.963 259.42 cv
144.963 260.277 li
145.242 259.998 145.488 259.791 145.699 259.655 cv
146.08 259.418 146.472 259.3 146.874 259.3 cv
147.458 259.3 147.96 259.548 148.381 260.045 cv
148.802 260.542 149.013 261.221 149.013 262.083 cv
149.013 262.929 148.76 263.696 148.254 264.385 cv
147.749 265.075 147.113 265.419 146.347 265.419 cv
146.11 265.419 145.904 265.389 145.731 265.33 cv
145.46 265.241 145.21 265.079 144.982 264.841 cv
144.982 266.923 li
144.982 267.351 145.052 267.613 145.191 267.71 cv
145.331 267.808 145.636 267.874 146.105 267.907 cv
146.105 268.129 li
142.97 268.129 li
142.97 267.92 li
cp
f
1.3893 lw
140.602 251.016 mo
140.602 266.471 li
@
89.0957 45.9619 mo
86.0996 50.1963 li
89.0957 50.1963 li
89.0957 45.9619 li
cp
89.4985 44.7017 mo
90.0786 44.7017 li
90.0786 50.1963 li
91.3545 50.1963 li
91.3545 51.0083 li
90.0786 51.0083 li
90.0786 53.0903 li
89.1079 53.0903 li
89.1079 51.0083 li
85.5913 51.0083 li
85.5913 50.1963 li
89.4985 44.7017 li
cp
f
91.9282 57.2939 mo
92.4751 57.2349 92.8169 57.1343 92.9536 56.9912 cv
93.0903 56.8481 93.1587 56.4756 93.1587 55.8721 cv
93.1587 49.8086 li
93.1587 49.3071 93.0825 48.9814 92.9297 48.8311 cv
92.7769 48.6807 92.4434 48.5874 91.9282 48.5508 cv
91.9282 48.291 li
95.811 48.291 li
95.811 48.5508 li
95.2988 48.5874 94.9658 48.6807 94.8115 48.8311 cv
94.6577 48.9814 94.5806 49.3071 94.5806 49.8086 cv
94.5806 52.5361 li
98.8325 52.5361 li
98.8325 49.8086 li
98.8325 49.3071 98.7573 48.9814 98.6069 48.8311 cv
98.4565 48.6807 98.1216 48.5874 97.6021 48.5508 cv
97.6021 48.291 li
101.485 48.291 li
101.485 48.5508 li
100.97 48.5874 100.636 48.6807 100.483 48.8311 cv
100.331 48.9814 100.254 49.3071 100.254 49.8086 cv
100.254 56.0361 li
100.254 56.5439 100.331 56.8691 100.483 57.0117 cv
100.636 57.1548 100.97 57.2485 101.485 57.2939 cv
101.485 57.5537 li
97.6021 57.5537 li
97.6021 57.2939 li
98.1533 57.2397 98.4966 57.1396 98.6309 56.9946 cv
98.7651 56.8496 98.8325 56.4756 98.8325 55.8721 cv
98.8325 53.1514 li
94.5806 53.1514 li
94.5806 56.0361 li
94.5806 56.5439 94.6577 56.8701 94.8115 57.0151 cv
94.9658 57.1602 95.2988 57.2529 95.811 57.2939 cv
95.811 57.5537 li
91.9282 57.5537 li
91.9282 57.2939 li
cp
f
103.433 52.3311 mo
103.287 52.5771 103.183 52.8872 103.119 53.2607 cv
106.003 53.2607 li
105.953 52.8052 105.867 52.4653 105.744 52.2422 cv
105.521 51.8413 105.146 51.6406 104.623 51.6406 cv
104.103 51.6406 103.707 51.8706 103.433 52.3311 cv
cp
106.708 51.8081 mo
107.19 52.2524 107.432 52.8823 107.432 53.6982 cv
103.091 53.6982 li
103.137 54.7534 103.376 55.5215 103.809 56.0039 cv
104.242 56.4854 104.755 56.7266 105.347 56.7266 cv
105.826 56.7266 106.229 56.6016 106.557 56.3516 cv
106.885 56.1016 107.188 55.7466 107.466 55.2876 cv
107.706 55.3691 li
107.519 55.9492 107.169 56.4854 106.656 56.9785 cv
106.144 57.4712 105.516 57.7178 104.773 57.7178 cv
103.916 57.7178 103.254 57.394 102.787 56.7471 cv
102.32 56.1001 102.086 55.355 102.086 54.5117 cv
102.086 53.5957 102.357 52.8052 102.9 52.1396 cv
103.442 51.4741 104.148 51.1416 105.019 51.1416 cv
105.662 51.1416 106.225 51.3638 106.708 51.8081 cv
cp
f
347.424 220.889 mo
347.564 220.394 347.634 220.117 347.634 220.058 cv
347.634 219.935 347.6 219.818 347.533 219.708 cv
347.464 219.599 347.359 219.522 347.214 219.48 cv
347.214 219.207 li
350.134 219.086 li
350.134 219.385 li
349.555 219.558 349.087 219.785 348.732 220.064 cv
348.063 220.597 347.729 221.314 347.729 222.216 cv
347.729 223.125 348.088 223.87 348.808 224.447 cv
349.528 225.025 350.518 225.313 351.779 225.313 cv
352.938 225.313 353.864 225.01 354.556 224.403 cv
355.248 223.795 355.593 223.026 355.593 222.095 cv
355.593 221.422 355.433 220.802 355.111 220.235 cv
354.929 219.91 354.654 219.552 354.287 219.163 cv
354.527 218.921 li
354.891 219.209 355.21 219.567 355.486 219.994 cv
355.952 220.722 356.184 221.511 356.184 222.362 cv
356.184 223.758 355.738 224.867 354.845 225.688 cv
354.019 226.445 352.989 226.824 351.753 226.824 cv
350.488 226.824 349.426 226.424 348.567 225.625 cv
347.666 224.782 347.214 223.687 347.214 222.336 cv
347.214 221.867 347.285 221.384 347.424 220.889 cv
cp
0 .341176 .501961 rgb
f
355.727 218.331 mo
355.672 217.793 355.55 217.449 355.363 217.296 cv
355.174 217.144 354.738 217.068 354.052 217.068 cv
348.776 217.068 li
348.306 217.068 348 217.142 347.859 217.29 cv
347.717 217.438 347.634 217.774 347.609 218.299 cv
347.367 218.299 li
347.367 215.736 li
353.842 212.751 li
347.367 209.838 li
347.367 207.254 li
347.609 207.254 li
347.642 207.737 347.73 208.048 347.872 208.188 cv
348.013 208.327 348.315 208.397 348.776 208.397 cv
354.553 208.397 li
355.027 208.397 355.331 208.327 355.464 208.188 cv
355.597 208.048 355.685 207.737 355.727 207.254 cv
355.968 207.254 li
355.968 210.892 li
355.727 210.892 li
355.685 210.367 355.59 210.04 355.445 209.911 cv
355.299 209.782 354.951 209.717 354.402 209.717 cv
348.566 209.717 li
355.968 213.046 li
355.968 213.224 li
348.871 216.497 li
354.052 216.497 li
354.763 216.497 355.226 216.393 355.442 216.186 cv
355.582 216.05 355.676 215.748 355.727 215.278 cv
355.968 215.278 li
355.968 218.331 li
355.727 218.331 li
cp
f
355.111 201.383 mo
354.853 200.934 354.358 200.71 353.626 200.71 cv
352.898 200.71 352.401 200.972 352.134 201.497 cv
351.868 202.022 351.734 202.69 351.734 203.503 cv
351.734 203.702 351.734 203.828 351.734 203.88 cv
351.734 203.934 351.732 204.015 351.728 204.125 cv
354.965 204.125 li
355.19 204.125 355.334 204.062 355.4 203.935 cv
355.465 203.808 355.499 203.514 355.499 203.052 cv
355.499 202.388 355.37 201.832 355.111 201.383 cv
cp
351.01 201.802 mo
350.756 201.251 350.3 200.977 349.643 200.977 cv
348.868 200.977 348.343 201.294 348.072 201.929 cv
347.923 202.28 347.849 202.813 347.849 203.528 cv
347.849 203.799 347.873 203.966 347.919 204.03 cv
347.966 204.093 348.093 204.125 348.301 204.125 cv
351.24 204.125 li
351.22 202.887 li
351.211 202.451 351.142 202.089 351.01 201.802 cv
cp
355.727 206.689 mo
355.698 206.167 355.617 205.83 355.484 205.676 cv
355.351 205.522 355.043 205.445 354.559 205.445 cv
348.777 205.445 li
348.298 205.445 347.991 205.522 347.853 205.676 cv
347.715 205.83 347.634 206.167 347.609 206.689 cv
347.367 206.689 li
347.367 203.049 li
347.367 202.009 347.535 201.184 347.87 200.573 cv
348.204 199.962 348.78 199.656 349.597 199.656 cv
350.211 199.656 350.677 199.87 350.995 200.297 cv
351.177 200.539 351.328 200.9 351.446 201.383 cv
351.59 200.786 351.83 200.276 352.166 199.853 cv
352.502 199.43 352.972 199.218 353.578 199.218 cv
354.592 199.218 355.29 199.688 355.67 200.626 cv
355.869 201.121 355.968 201.73 355.968 202.453 cv
355.968 206.689 li
355.727 206.689 li
cp
f
366.64 220.967 mo
366.381 220.518 365.886 220.294 365.154 220.294 cv
364.426 220.294 363.929 220.556 363.663 221.081 cv
363.396 221.606 363.263 222.274 363.263 223.087 cv
363.263 223.286 363.263 223.412 363.263 223.464 cv
363.263 223.518 363.26 223.599 363.256 223.709 cv
366.494 223.709 li
366.718 223.709 366.863 223.646 366.928 223.519 cv
366.994 223.392 367.027 223.098 367.027 222.636 cv
367.027 221.972 366.898 221.416 366.64 220.967 cv
cp
362.539 221.386 mo
362.285 220.835 361.829 220.561 361.171 220.561 cv
360.396 220.561 359.872 220.878 359.6 221.513 cv
359.452 221.864 359.378 222.397 359.378 223.112 cv
359.378 223.383 359.401 223.55 359.448 223.614 cv
359.495 223.677 359.622 223.709 359.83 223.709 cv
362.767 223.709 li
362.749 222.471 li
362.74 222.035 362.67 221.673 362.539 221.386 cv
cp
367.255 226.273 mo
367.226 225.751 367.145 225.414 367.012 225.26 cv
366.879 225.106 366.572 225.029 366.087 225.029 cv
360.304 225.029 li
359.827 225.029 359.519 225.106 359.381 225.26 cv
359.244 225.414 359.162 225.751 359.136 226.273 cv
358.896 226.273 li
358.896 222.633 li
358.896 221.593 359.063 220.768 359.398 220.157 cv
359.732 219.546 360.308 219.24 361.125 219.24 cv
361.74 219.24 362.206 219.454 362.523 219.881 cv
362.706 220.123 362.856 220.484 362.974 220.967 cv
363.119 220.37 363.358 219.86 363.694 219.437 cv
364.031 219.014 364.5 218.802 365.106 218.802 cv
366.121 218.802 366.818 219.271 367.199 220.21 cv
367.397 220.705 367.497 221.314 367.497 222.037 cv
367.497 226.273 li
367.255 226.273 li
cp
.564706 .270588 .141176 rgb
f
366.64 212.296 mo
366.381 211.847 365.886 211.623 365.154 211.623 cv
364.426 211.623 363.929 211.885 363.663 212.41 cv
363.396 212.935 363.263 213.604 363.263 214.416 cv
363.263 214.615 363.263 214.741 363.263 214.793 cv
363.263 214.847 363.26 214.928 363.256 215.038 cv
366.494 215.038 li
366.718 215.038 366.863 214.975 366.928 214.848 cv
366.994 214.721 367.027 214.427 367.027 213.965 cv
367.027 213.301 366.898 212.745 366.64 212.296 cv
cp
362.539 212.715 mo
362.285 212.165 361.829 211.89 361.171 211.89 cv
360.396 211.89 359.872 212.207 359.6 212.842 cv
359.452 213.193 359.378 213.726 359.378 214.441 cv
359.378 214.712 359.401 214.879 359.448 214.943 cv
359.495 215.006 359.622 215.038 359.83 215.038 cv
362.767 215.038 li
362.749 213.8 li
362.74 213.364 362.67 213.002 362.539 212.715 cv
cp
367.255 217.603 mo
367.226 217.081 367.145 216.743 367.012 216.589 cv
366.879 216.435 366.572 216.358 366.087 216.358 cv
360.304 216.358 li
359.827 216.358 359.519 216.435 359.381 216.589 cv
359.244 216.743 359.162 217.081 359.136 217.603 cv
358.896 217.603 li
358.896 213.962 li
358.896 212.922 359.063 212.097 359.398 211.486 cv
359.732 210.875 360.308 210.569 361.125 210.569 cv
361.74 210.569 362.206 210.783 362.523 211.21 cv
362.706 211.452 362.856 211.813 362.974 212.296 cv
363.119 211.699 363.358 211.189 363.694 210.766 cv
364.031 210.343 364.5 210.131 365.106 210.131 cv
366.121 210.131 366.818 210.601 367.199 211.54 cv
367.397 212.034 367.497 212.643 367.497 213.366 cv
367.497 217.603 li
367.255 217.603 li
cp
f
367.255 209.014 mo
367.201 208.477 367.079 208.132 366.891 207.979 cv
366.703 207.827 366.266 207.751 365.581 207.751 cv
359.853 207.751 li
359.644 207.929 li
359.42 208.119 359.282 208.281 359.229 208.415 cv
359.176 208.547 359.145 208.748 359.136 209.014 cv
358.896 209.014 li
358.896 206.796 li
365.116 201.778 li
360.795 201.778 li
360.084 201.778 359.623 201.884 359.408 202.095 cv
359.269 202.235 359.179 202.544 359.136 203.022 cv
358.896 203.022 li
358.896 199.969 li
359.136 199.969 li
359.187 200.464 359.308 200.794 359.499 200.959 cv
359.689 201.124 360.125 201.207 360.806 201.207 cv
367.649 201.207 li
367.649 201.429 li
360.521 207.18 li
365.582 207.18 li
366.292 207.18 366.754 207.076 366.97 206.869 cv
367.11 206.733 367.205 206.431 367.255 205.961 cv
367.497 205.961 li
367.497 209.014 li
367.255 209.014 li
cp
f
111.073 206.223 mo
111.185 206.296 111.416 206.333 111.767 206.333 cv
112.861 206.333 113.761 206.116 114.467 205.683 cv
115.552 205.017 116.094 203.878 116.094 202.269 cv
116.094 200.832 115.647 199.751 114.754 199.026 cv
113.989 198.405 112.975 198.095 111.712 198.095 cv
111.398 198.095 111.185 198.129 111.073 198.198 cv
110.961 198.266 110.906 198.417 110.906 198.649 cv
110.906 205.771 li
110.906 206 110.961 206.15 111.073 206.223 cv
cp
108.253 206.592 mo
108.764 206.538 109.097 206.446 109.251 206.317 cv
109.406 206.188 109.484 205.86 109.484 205.334 cv
109.484 199.107 li
109.484 198.597 109.409 198.269 109.258 198.123 cv
109.108 197.977 108.773 197.886 108.253 197.849 cv
108.253 197.589 li
112.027 197.589 li
113.298 197.589 114.374 197.799 115.253 198.218 cv
116.839 198.97 117.632 200.314 117.632 202.251 cv
117.632 202.949 117.49 203.612 117.205 204.241 cv
116.92 204.87 116.491 205.4 115.917 205.833 cv
115.552 206.107 115.174 206.314 114.782 206.456 cv
114.066 206.72 113.187 206.852 112.143 206.852 cv
108.253 206.852 li
108.253 206.592 li
cp
0 0 0 rgb
f
121.206 197.391 mo
121.895 197.391 li
118.864 207.084 li
118.167 207.084 li
121.206 197.391 li
cp
f
122.253 206.592 mo
122.8 206.533 123.142 206.433 123.279 206.29 cv
123.416 206.146 123.484 205.774 123.484 205.17 cv
123.484 199.107 li
123.484 198.605 123.408 198.28 123.255 198.129 cv
123.102 197.979 122.769 197.886 122.253 197.849 cv
122.253 197.589 li
126.136 197.589 li
126.136 197.849 li
125.624 197.886 125.291 197.979 125.137 198.129 cv
124.983 198.28 124.906 198.605 124.906 199.107 cv
124.906 201.834 li
129.158 201.834 li
129.158 199.107 li
129.158 198.605 129.083 198.28 128.932 198.129 cv
128.782 197.979 128.447 197.886 127.927 197.849 cv
127.927 197.589 li
131.81 197.589 li
131.81 197.849 li
131.295 197.886 130.961 197.979 130.809 198.129 cv
130.656 198.28 130.58 198.605 130.58 199.107 cv
130.58 205.334 li
130.58 205.842 130.656 206.167 130.809 206.31 cv
130.961 206.453 131.295 206.547 131.81 206.592 cv
131.81 206.852 li
127.927 206.852 li
127.927 206.592 li
128.479 206.538 128.822 206.438 128.956 206.293 cv
129.09 206.148 129.158 205.774 129.158 205.17 cv
129.158 202.45 li
124.906 202.45 li
124.906 205.334 li
124.906 205.842 124.983 206.168 125.137 206.313 cv
125.291 206.458 125.624 206.551 126.136 206.592 cv
126.136 206.852 li
122.253 206.852 li
122.253 206.592 li
cp
f
139.587 209.064 mo
139.82 209.216 140.095 209.291 140.412 209.291 cv
140.9 209.291 141.317 209.048 141.663 208.563 cv
142.009 208.078 142.182 207.401 142.182 206.534 cv
142.182 205.703 142.002 205.082 141.643 204.671 cv
141.283 204.26 140.866 204.054 140.391 204.054 cv
140.057 204.054 139.751 204.157 139.475 204.362 cv
139.199 204.568 139.062 204.77 139.062 204.969 cv
139.062 208.376 li
139.179 208.684 139.354 208.913 139.587 209.064 cv
cp
136.911 212.432 mo
137.333 212.405 137.602 212.314 137.716 212.161 cv
137.831 212.007 137.888 211.765 137.888 211.435 cv
137.888 204.922 li
137.888 204.579 137.846 204.358 137.763 204.261 cv
137.679 204.164 137.521 204.115 137.291 204.115 cv
137.241 204.115 137.195 204.118 137.152 204.122 cv
137.109 204.126 137.047 204.136 136.965 204.149 cv
136.965 203.925 li
137.61 203.715 li
137.632 203.71 138.087 203.555 138.973 203.247 cv
138.996 203.247 139.013 203.257 139.024 203.277 cv
139.036 203.298 139.041 203.322 139.041 203.349 cv
139.041 204.264 li
139.34 203.966 139.602 203.744 139.828 203.6 cv
140.235 203.347 140.653 203.22 141.083 203.22 cv
141.707 203.22 142.244 203.485 142.694 204.016 cv
143.144 204.547 143.369 205.273 143.369 206.195 cv
143.369 207.098 143.099 207.918 142.559 208.655 cv
142.018 209.391 141.338 209.759 140.52 209.759 cv
140.267 209.759 140.047 209.728 139.862 209.664 cv
139.573 209.569 139.306 209.396 139.062 209.142 cv
139.062 211.367 li
139.062 211.824 139.136 212.104 139.285 212.208 cv
139.435 212.312 139.76 212.382 140.262 212.418 cv
140.262 212.656 li
136.911 212.656 li
136.911 212.432 li
cp
f
134.47 193.435 mo
134.47 208.891 li
@
355.037 5.29102 mo
354.782 5.17969 354.459 5.12305 354.07 5.12305 cv
353.885 5.12305 353.771 5.1416 353.729 5.17871 cv
353.687 5.21484 353.666 5.29688 353.666 5.42188 cv
353.666 7.76953 li
353.827 7.78418 353.932 7.79297 353.982 7.79492 cv
354.032 7.79883 354.08 7.7998 354.126 7.7998 cv
354.541 7.7998 354.865 7.74121 355.103 7.62402 cv
355.533 7.41016 355.749 7.01074 355.749 6.42383 cv
355.749 5.87402 355.511 5.49609 355.037 5.29102 cv
cp
352 10.5771 mo
352.343 10.5449 352.556 10.4775 352.642 10.374 cv
352.726 10.2705 352.769 10.0332 352.769 9.66309 cv
352.769 5.76563 li
352.769 5.45215 352.721 5.24512 352.626 5.14551 cv
352.531 5.0459 352.322 4.98242 352 4.95703 cv
352 4.78906 li
354.373 4.78906 li
355.134 4.78906 355.718 4.9375 356.123 5.2334 cv
356.527 5.5293 356.728 5.91895 356.728 6.40234 cv
356.728 7.01465 356.504 7.45898 356.056 7.73438 cv
355.608 8.00977 355.046 8.14648 354.373 8.14648 cv
354.277 8.14648 354.152 8.14453 354.001 8.14063 cv
353.851 8.13574 353.739 8.13379 353.666 8.13379 cv
353.666 9.76855 li
353.666 10.1064 353.717 10.3193 353.822 10.4063 cv
353.925 10.4941 354.158 10.5508 354.518 10.5771 cv
354.518 10.7441 li
352 10.7441 li
352 10.5771 li
cp
.48 .48 .48 rgb
f
358.818 10.3398 mo
358.89 10.3867 359.039 10.4102 359.264 10.4102 cv
359.967 10.4102 360.546 10.2705 361 9.99219 cv
361.697 9.56445 362.046 8.83301 362.046 7.79785 cv
362.046 6.87402 361.759 6.17871 361.185 5.71289 cv
360.693 5.31445 360.041 5.11523 359.229 5.11523 cv
359.027 5.11523 358.89 5.13672 358.818 5.18066 cv
358.746 5.22461 358.71 5.32129 358.71 5.4707 cv
358.71 10.0498 li
358.71 10.1963 358.746 10.293 358.818 10.3398 cv
cp
357.005 10.5771 mo
357.333 10.542 357.547 10.4834 357.647 10.4004 cv
357.747 10.3174 357.796 10.1064 357.796 9.76855 cv
357.796 5.76563 li
357.796 5.4375 357.748 5.22656 357.652 5.13281 cv
357.554 5.03906 357.339 4.98047 357.005 4.95703 cv
357.005 4.78906 li
359.431 4.78906 li
360.249 4.78906 360.94 4.9248 361.505 5.19336 cv
362.525 5.67773 363.035 6.54199 363.035 7.78711 cv
363.035 8.23438 362.943 8.66113 362.759 9.06543 cv
362.577 9.46973 362.3 9.81152 361.931 10.0898 cv
361.697 10.2656 361.455 10.3984 361.203 10.4893 cv
360.742 10.6592 360.177 10.7441 359.505 10.7441 cv
357.005 10.7441 li
357.005 10.5771 li
cp
f
367.719 4.8291 mo
368.056 4.92578 368.25 4.97461 368.299 4.97461 cv
368.428 4.97461 368.519 4.94922 368.574 4.89941 cv
368.628 4.84961 368.674 4.77832 368.712 4.68359 cv
368.91 4.68359 li
368.98 6.57813 li
368.774 6.57813 li
368.589 6.1416 368.399 5.81641 368.203 5.60254 cv
367.848 5.22754 367.386 5.04004 366.818 5.04004 cv
366.242 5.04004 365.734 5.25879 365.295 5.69727 cv
364.857 6.13477 364.638 6.85645 364.638 7.86133 cv
364.638 8.69043 364.857 9.33789 365.293 9.80371 cv
365.73 10.2695 366.269 10.502 366.911 10.502 cv
367.019 10.502 367.146 10.4922 367.292 10.4717 cv
367.439 10.4512 367.579 10.4189 367.71 10.375 cv
367.924 10.3047 368.058 10.2441 368.111 10.1934 cv
368.164 10.1426 368.189 10.0674 368.189 9.96777 cv
368.189 8.5332 li
368.189 8.18652 368.14 7.96973 368.042 7.88379 cv
367.944 7.79883 367.73 7.74609 367.398 7.72461 cv
367.398 7.55859 li
369.693 7.55859 li
369.693 7.72461 li
369.47 7.74023 369.322 7.77637 369.249 7.83496 cv
369.125 7.92871 369.064 8.12207 369.064 8.41504 cv
369.064 10.1855 li
369.064 10.291 368.805 10.4316 368.289 10.6074 cv
367.771 10.7832 367.274 10.8711 366.796 10.8711 cv
365.917 10.8711 365.176 10.6152 364.573 10.1025 cv
363.908 9.53711 363.576 8.77832 363.576 7.82617 cv
363.576 6.98828 363.84 6.27051 364.371 5.67285 cv
364.954 5.01367 365.727 4.68359 366.691 4.68359 cv
367.04 4.68359 367.382 4.73242 367.719 4.8291 cv
cp
f
372.377 10.6426 mo
373.45 9.53027 374.177 8.71387 374.562 8.19238 cv
374.945 7.67188 375.137 7.16406 375.137 6.66895 cv
375.137 6.23633 375.02 5.90625 374.786 5.67871 cv
374.551 5.45215 374.271 5.33887 373.947 5.33887 cv
373.544 5.33887 373.22 5.48535 372.97 5.77832 cv
372.833 5.93848 372.701 6.18652 372.576 6.51953 cv
372.386 6.48047 li
372.533 5.80664 372.781 5.33887 373.13 5.07715 cv
373.481 4.81543 373.857 4.68359 374.258 4.68359 cv
374.753 4.68359 375.154 4.83984 375.46 5.15137 cv
375.766 5.46387 375.919 5.84473 375.919 6.2959 cv
375.919 6.77539 375.753 7.23828 375.423 7.68262 cv
375.091 8.12793 374.373 8.91992 373.264 10.0586 cv
375.282 10.0586 li
375.563 10.0586 375.761 10.0254 375.875 9.95801 cv
375.99 9.89063 376.119 9.72656 376.262 9.46582 cv
376.376 9.51855 li
375.888 10.7441 li
372.377 10.7441 li
372.377 10.6426 li
cp
f
379.65 9.87012 mo
379.812 9.39844 379.892 8.7168 379.892 7.82422 cv
379.892 7.1123 379.843 6.54492 379.748 6.12012 cv
379.566 5.33008 379.226 4.93457 378.728 4.93457 cv
378.23 4.93457 377.888 5.3418 377.704 6.15527 cv
377.607 6.58887 377.558 7.15918 377.558 7.86816 cv
377.558 8.53223 377.609 9.06348 377.708 9.46191 cv
377.896 10.2051 378.248 10.5771 378.763 10.5771 cv
379.193 10.5771 379.49 10.3418 379.65 9.87012 cv
cp
380.318 5.75586 mo
380.615 6.32813 380.762 6.98438 380.762 7.72461 cv
380.762 8.30859 380.671 8.85742 380.49 9.37305 cv
380.147 10.3428 379.554 10.8281 378.71 10.8281 cv
378.132 10.8281 377.658 10.5654 377.287 10.041 cv
376.888 9.48145 376.689 8.72168 376.689 7.75977 cv
376.689 7.00391 376.822 6.35352 377.088 5.80859 cv
377.449 5.06836 378.002 4.69727 378.75 4.69727 cv
379.423 4.69727 379.947 5.05078 380.318 5.75586 cv
cp
f
383.792 4.73926 mo
383.793 4.74609 383.794 4.76367 383.794 4.78906 cv
383.794 10.0801 li
383.794 10.3066 383.855 10.4492 383.976 10.5117 cv
384.096 10.5723 384.322 10.6094 384.652 10.6211 cv
384.652 10.7441 li
382.168 10.7441 li
382.168 10.6123 li
382.523 10.5947 382.754 10.5469 382.863 10.4668 cv
382.971 10.3887 383.025 10.2168 383.025 9.95313 cv
383.025 5.88379 li
383.025 5.74316 383.007 5.63672 382.972 5.5625 cv
382.937 5.49023 382.861 5.45313 382.744 5.45313 cv
382.667 5.45313 382.569 5.47461 382.447 5.5166 cv
382.326 5.55957 382.212 5.60449 382.107 5.65039 cv
382.107 5.52734 li
383.72 4.70605 li
383.773 4.70605 li
383.785 4.7207 383.791 4.73145 383.792 4.73926 cv
cp
f
388.831 8.0459 mo
388.625 7.54199 388.277 7.29004 387.785 7.29004 cv
387.331 7.29004 387.029 7.4248 386.879 7.69434 cv
386.792 7.85254 386.748 8.11621 386.748 8.48535 cv
386.748 8.96289 386.849 9.42969 387.052 9.88672 cv
387.256 10.3438 387.578 10.5723 388.017 10.5723 cv
388.367 10.5723 388.62 10.4238 388.778 10.127 cv
388.936 9.8291 389.015 9.48145 389.015 9.08301 cv
389.015 8.69336 388.954 8.34766 388.831 8.0459 cv
cp
389.302 10.1953 mo
388.958 10.625 388.511 10.8408 387.96 10.8408 cv
387.445 10.8408 386.975 10.5996 386.552 10.1152 cv
386.128 9.63281 385.917 8.98926 385.917 8.18652 cv
385.917 7.15234 386.328 6.26465 387.148 5.52344 cv
387.88 4.90234 388.703 4.5918 389.617 4.5918 cv
389.639 4.73633 li
389.273 4.80469 388.957 4.89551 388.693 5.01172 cv
388.427 5.12695 388.191 5.28906 387.982 5.49707 cv
387.769 5.70801 387.568 5.97656 387.38 6.30078 cv
387.193 6.62695 387.064 6.94922 386.994 7.26758 cv
387.175 7.15723 387.332 7.07422 387.464 7.02148 cv
387.699 6.92871 387.934 6.88086 388.171 6.88086 cv
388.637 6.88086 389.029 7.04297 389.345 7.36523 cv
389.662 7.6875 389.82 8.14648 389.82 8.74414 cv
389.82 9.28125 389.647 9.76367 389.302 10.1953 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
