%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Spin_indep_2015_plot-5.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 10/23/15
%%BoundingBox: 0 0 516 503
%%HiResBoundingBox: 0 0 515.8936 502.3755
%%CropBox: 0 0 515.8936 502.3755
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2015-10-23T13:31:38-07:00</xmp:CreateDate>
         <xmp:ModifyDate>2015-10-23T13:31:38-07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-10-23T13:31:38-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>252</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWEv5/1dlNpa6LF&#xA;ca22o3WnwWYvCsDLZw+u8rXBg5LVaAL6Z+I0rSrYqo6xb69508ow3mlXUSWWr28V1pqqJbS4tzNF&#xA;yjklnEk6ycOXxKIlP7SsHVTiq/yfYXvlJtXm806tbRxajeNLYvNckfDVjxrL6YrxI33c/tEgLirJ&#xA;l80+WWUMur2RU7gi4iIP/DYq4eafLJ6avZHt/vRF/wA1Ypou/wAUeWt/9y1lt1/0iL/mrFDv8U+W&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:07801174072068118083C4AE0CC9426B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:07801174072068118083C4AE0CC9426B</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:06801174072068118083C4AE0CC9426B</stRef:instanceID>
            <stRef:documentID>xmp.did:06801174072068118083C4AE0CC9426B</stRef:documentID>
            <stRef:originalDocumentID>uuid:050BF7EB407AE5118B7D8A9F0AC745A8</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083C4AE0CC9426B</stEvt:instanceID>
                  <stEvt:when>2015-10-23T11:58:39-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:06801174072068118083C4AE0CC9426B</stEvt:instanceID>
                  <stEvt:when>2015-10-23T13:23:04-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07801174072068118083C4AE0CC9426B</stEvt:instanceID>
                  <stEvt:when>2015-10-23T13:31:38-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:050BF7EB407AE5118B7D8A9F0AC745A8</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>7.291667</stDim:w>
            <stDim:h>7.013889</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.01.3x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times New Roman.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -502.375 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 502.375 li
515.894 502.375 li
515.894 0 li
cp
clp
[1 0 0 1 0 0 ]ct
459.829 312.682 mo
419.096 341.816 li
359.829 377.284 li
360.15 444.149 li
502.168 444.149 li
502.168 299.553 li
499.361 291.815 li
459.829 312.682 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.356863 .741176 .882353 rgb
f
1 1 1 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 77 /M putdup 83 /S putdup 112 /p putdef/FontBBox {-568 -307 2000 1007} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/hyphen <1C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |-/M <1C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA3A35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242AA7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A83BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96ECA4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF30A9F16E8C6EE80DDA09053247> |-/S <1C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5BFD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEEB6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E645337518CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE904907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3AB444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80CE13D22435E5FCC1B5A000DE> |-/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF1C7730E7CC0F462D79552DFA> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut/MZCCUF+TimesNewRomanPSMT*1 [45{/.notdef}rp /hyphen 31{/.notdef}rp /M 5{/.notdef}rp /S 28{/.notdef}rp /p 143{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.04 395.381 mo(pMSSM-)[7.2002 12.8037 8.00879 8.00879 12.8037 0 ]xshMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.04 395.381 mo(p) false chp416.24 395.381 mo(MSS) false chp445.062 395.381 mo(M-) false chp3 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
@
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA345031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9DEB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC942097158DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC7399ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B283409DD22AD16B7DD28B54D5FC454C> |-/H <1C60D8A8C9B6079F62C8472A58E49E4C65298F7DBB13584B0C608B103B8F2B0C72AF215D43C457FE4678B9114F992A1CA0DD95AD962EE67821EBE89C76AF7B7C203022FE3C67E29F7C9AA5921E4D15A2645D93C73845A47B6C4F855F057FBA3B47AC2707354E73F37A88912B11BC586C19F99285C7E09F7C6AE400A135AD2578B2C1702C267512A0254A355FAF242A3E032C2D5773AA8E4D90998616B06DE2126832E624AA95B6CEA6DE0CF980ABC5058497B243E4F1F614D2E3330AC509CE2BF6F280235C57C7347C7DBE389D9DA8C428E4F439ED717BD43889835C90DE66BDF27965E2CAF6D3F8A236> |-/L <1C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD68748B847D2C24AD687E0CDB56> |-/o <1C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |-/s <1C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC22ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C593B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF509B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |-/t <1C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED29448713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E798B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 67 /C putdup 72 /H putdup 76 /L putdup 111 /o putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [45{/.notdef}rp /hyphen 21{/.notdef}rp /C 4{/.notdef}rp /H 3{/.notdef}rp /L /M 5{/.notdef}rp /S 27{/.notdef}rp /o /p 2{/.notdef}rp /s /t 139{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.04 412.661 mo(postLHC)[7.2002 7.2002 5.60352 4.00098 8.7959 10.3994 0 ]xshMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.04 412.661 mo(p) false chp416.24 412.661 mo(o) false chp423.44 412.661 mo(s) false chp429.044 412.661 mo(t) false chp433.045 412.661 mo(LHC) false chp@
191.076 155.381 mo
196.676 176.581 li
202.81 192.915 li
202.81 192.915 211.625 209.639 212.676 210.848 cv
213.727 212.055 223.823 223.088 224.81 223.647 cv
225.796 224.207 238.807 230.233 240.143 230.381 cv
241.479 230.529 250.748 230.019 251.942 229.781 cv
253.137 229.543 258.857 226.719 259.609 225.915 cv
260.362 225.11 262.476 219.766 262.527 218.62 cv
262.579 217.474 260.725 210.207 260.01 208.915 cv
259.295 207.622 252.143 198.647 252.143 198.647 cv
242.742 187.781 li
229.742 171.715 li
219.876 157.981 li
212.876 146.115 li
204.942 131.981 li
199.01 119.181 li
188.742 98.981 li
185.342 93.5811 li
182.542 87.1147 li
181.942 89.7148 li
182.143 95.4478 li
182.542 106.047 li
184.276 119.181 li
187.876 140.315 li
193.01 164.047 li
196.209 175.248 li
200.276 186.781 li
191.076 155.381 li
cp
.956863 .843137 .843137 rgb
ef
191.076 155.381 mo
190.593 155.509 li
196.199 176.733 li
202.353 193.12 li
202.367 193.148 li
202.368 193.148 204.572 197.33 206.909 201.665 cv
208.077 203.833 209.278 206.038 210.255 207.78 cv
210.743 208.652 211.175 209.407 211.521 209.986 cv
211.694 210.276 211.845 210.522 211.972 210.719 cv
212.101 210.917 212.199 211.06 212.298 211.176 cv
212.836 211.794 215.618 214.847 218.401 217.832 cv
219.792 219.323 221.181 220.794 222.287 221.93 cv
222.84 222.499 223.322 222.983 223.702 223.347 cv
223.892 223.53 224.056 223.682 224.194 223.802 cv
224.336 223.924 224.435 224.008 224.563 224.082 cv
224.715 224.168 225.021 224.32 225.479 224.542 cv
227.072 225.31 230.392 226.851 233.467 228.218 cv
235.004 228.902 236.479 229.542 237.648 230.021 cv
238.233 230.261 238.741 230.461 239.147 230.607 cv
239.561 230.753 239.837 230.846 240.087 230.878 cv
240.294 230.901 240.582 230.907 240.966 230.908 cv
242.324 230.908 244.805 230.803 247.092 230.672 cv
248.234 230.606 249.326 230.534 250.2 230.465 cv
251.081 230.395 251.719 230.334 252.04 230.272 cv
252.431 230.19 253.003 229.965 253.738 229.648 cv
254.828 229.175 256.211 228.504 257.403 227.87 cv
257.998 227.553 258.545 227.246 258.986 226.976 cv
259.432 226.699 259.754 226.485 259.975 226.256 cv
260.119 226.099 260.241 225.909 260.382 225.667 cv
260.864 224.829 261.496 223.376 262.029 221.981 cv
262.295 221.285 262.534 220.606 262.711 220.031 cv
262.888 219.448 263.007 218.997 263.027 218.643 cv
263.028 218.569 li
263.025 218.15 262.906 217.477 262.723 216.592 cv
262.448 215.277 262.023 213.565 261.598 212.053 cv
261.385 211.297 261.173 210.592 260.978 210.009 cv
260.781 209.424 260.612 208.974 260.447 208.673 cv
260.334 208.47 260.142 208.189 259.873 207.811 cv
258.006 205.202 252.537 198.34 252.534 198.336 cv
252.527 198.328 li
243.126 187.46 li
230.14 171.411 li
220.295 157.708 li
213.309 145.865 li
205.388 131.753 li
199.46 118.963 li
189.178 98.734 li
185.786 93.3471 li
182.397 85.5208 li
181.44 89.6665 li
181.643 95.4598 li
182.044 106.09 li
183.781 119.256 li
187.385 140.41 li
192.525 164.169 li
195.733 175.399 li
199.804 186.947 li
200.756 186.641 li
191.556 155.241 li
190.593 155.509 li
191.076 155.381 li
190.596 155.522 li
199.796 186.922 li
200.276 186.781 li
200.747 186.615 li
196.686 175.096 li
193.495 163.926 li
188.367 140.22 li
184.77 119.107 li
183.041 106.005 li
182.642 95.4343 li
182.444 89.763 li
182.688 88.7086 li
184.899 93.815 li
188.307 99.2278 li
198.56 119.4 li
204.497 132.209 li
212.442 146.364 li
219.457 158.254 li
229.344 172.018 li
242.359 188.102 li
251.764 198.975 li
252.143 198.647 li
251.752 198.959 li
251.753 198.961 252.198 199.519 252.879 200.38 cv
253.901 201.671 255.451 203.639 256.81 205.403 cv
257.49 206.285 258.122 207.116 258.616 207.784 cv
259.107 208.447 259.471 208.97 259.572 209.156 cv
259.708 209.395 259.961 210.08 260.223 210.927 cv
260.622 212.207 261.077 213.906 261.431 215.397 cv
261.607 216.143 261.759 216.837 261.865 217.4 cv
261.972 217.957 262.031 218.404 262.028 218.569 cv
262.028 218.598 li
262.025 218.769 261.893 219.326 261.679 219.977 cv
261.361 220.968 260.869 222.254 260.391 223.356 cv
260.152 223.907 259.916 224.413 259.71 224.81 cv
259.509 225.204 259.315 225.503 259.244 225.573 cv
259.206 225.617 259.05 225.744 258.835 225.887 cv
258.071 226.4 256.541 227.219 255.096 227.92 cv
254.372 228.271 253.666 228.595 253.082 228.841 cv
252.504 229.088 252.023 229.258 251.845 229.291 cv
251.642 229.333 250.98 229.402 250.122 229.468 cv
247.53 229.673 242.939 229.908 240.966 229.908 cv
240.601 229.908 240.32 229.899 240.198 229.884 cv
240.18 229.884 240.062 229.858 239.909 229.81 cv
239.319 229.627 238.122 229.147 236.682 228.532 cv
234.517 227.608 231.774 226.371 229.488 225.317 cv
228.345 224.79 227.316 224.309 226.53 223.936 cv
225.749 223.565 225.193 223.291 225.056 223.212 cv
225.042 223.203 li
224.946 223.139 224.649 222.876 224.27 222.506 cv
221.575 219.889 213.939 211.539 213.053 210.519 cv
213.021 210.484 212.927 210.355 212.812 210.175 cv
212.37 209.493 211.54 208.042 210.558 206.27 cv
209.084 203.61 207.257 200.212 205.799 197.48 cv
205.07 196.113 204.433 194.914 203.979 194.056 cv
203.524 193.198 203.253 192.683 203.252 192.681 cv
202.81 192.915 li
203.278 192.739 li
197.153 176.429 li
191.56 155.254 li
191.076 155.381 li
190.596 155.522 li
191.076 155.381 li
cp
.858824 .635294 .635294 rgb
f
314.248 202.582 mo
312.895 202.582 li
311.429 202.582 li
310.029 202.582 li
308.609 202.582 li
307.256 202.324 li
305.864 202.059 li
304.398 201.726 li
303.029 201.465 li
301.613 200.95 li
300.235 200.359 li
298.84 199.696 li
297.398 199.041 li
296.035 198.196 li
294.589 197.21 li
293.205 196.156 li
291.76 194.974 li
290.386 193.665 li
289.004 192.152 li
287.566 190.451 li
286.189 188.289 li
284.761 185.82 li
284.082 183.356 li
284.711 181.3 li
285.99 180.66 li
287.346 179.95 li
288.719 179.576 li
290.077 179.446 li
291.508 179.31 li
292.998 178.972 li
294.377 178.709 li
295.832 178.51 li
297.264 178.306 li
298.763 177.897 li
300.156 177.499 li
301.531 177.172 li
303.03 176.899 li
304.469 176.352 li
305.926 175.821 li
307.32 175.357 li
308.735 174.884 li
310.231 174.273 li
311.631 173.606 li
313.088 173.01 li
314.519 172.397 li
315.931 171.59 li
317.398 170.856 li
318.797 170.056 li
320.273 169.319 li
321.698 168.436 li
323.095 167.506 li
324.562 166.639 li
325.975 165.697 li
327.448 164.692 li
328.848 163.692 li
330.322 162.688 li
331.732 161.613 li
333.132 160.547 li
334.606 159.407 li
336.01 158.271 li
337.484 157.066 li
338.893 155.858 li
340.294 154.59 li
341.76 153.324 li
343.16 152.057 li
344.632 150.785 li
346.045 149.44 li
347.441 148.044 li
348.903 146.715 li
350.308 145.377 li
351.774 143.977 li
353.178 142.64 li
354.57 141.249 li
356.022 139.993 li
357.417 138.798 li
358.866 137.613 li
360.229 136.64 li
361.648 135.865 li
362.965 135.301 li
364.187 135.126 li
365.447 135.528 li
366.669 136.575 li
368.068 140.516 li
368.262 143.684 li
368.065 147.283 li
366.613 154.15 li
365.226 158.243 li
363.771 161.884 li
362.382 164.859 li
360.998 167.427 li
359.54 169.682 li
358.143 171.942 li
356.689 174.057 li
355.304 175.903 li
353.841 177.633 li
352.444 179.43 li
351.06 181.011 li
349.601 182.537 li
348.209 183.995 li
346.751 185.387 li
345.355 186.716 li
343.969 187.97 li
342.508 189.165 li
341.113 190.361 li
339.665 191.481 li
338.272 192.475 li
336.877 193.472 li
335.424 194.462 li
334.037 195.321 li
332.579 196.182 li
331.189 196.976 li
329.802 197.703 li
328.343 198.433 li
326.96 199.091 li
325.511 199.684 li
324.131 200.21 li
322.673 200.674 li
321.271 201.141 li
319.905 201.597 li
318.482 201.855 li
317.082 202.055 li
315.606 202.323 li
314.248 202.582 li
283.561 183.349 mo
283.561 183.349 li
283.562 183.349 li
283.561 183.349 li
247.055 135.313 mo
245.952 134.998 li
244.507 134.669 li
243.159 134.155 li
241.797 133.507 li
240.304 132.625 li
238.851 132.14 li
237.384 131.674 li
235.993 131.21 li
234.506 130.669 li
233.078 130.329 li
231.674 129.995 li
230.209 129.662 li
228.819 129.33 li
227.352 128.931 li
225.955 128.599 li
224.552 128.198 li
223.107 127.869 li
221.74 127.348 li
220.345 126.817 li
218.885 126.219 li
217.44 125.629 li
216.068 124.91 li
214.672 124.112 li
213.213 123.316 li
211.841 122.467 li
210.394 121.414 li
209.01 120.359 li
207.617 119.166 li
206.159 117.973 li
204.778 116.658 li
203.324 115.204 li
201.941 113.689 li
200.547 111.964 li
199.086 110.237 li
197.699 108.387 li
196.25 106.347 li
194.854 103.886 li
193.389 101.689 li
192.01 99.1917 li
190.631 96.1058 li
189.183 91.4343 li
188.803 89.0875 li
189.158 87.1317 li
190.372 85.9729 li
191.527 85.9173 li
192.839 86.1676 li
194.328 86.6416 li
195.749 86.7769 li
197.171 87.0997 li
198.541 87.491 li
200.04 88.0365 li
201.48 88.2418 li
202.849 88.5027 li
204.293 88.8965 li
205.725 89.3055 li
207.215 89.5088 li
208.59 89.7712 li
209.982 90.1022 li
211.471 90.4408 li
212.882 90.6426 li
214.337 90.9066 li
215.723 91.1712 li
217.126 91.5047 li
218.606 91.7741 li
220.059 92.0383 li
221.435 92.3662 li
222.818 92.761 li
224.273 93.2239 li
225.67 93.6897 li
227.064 94.1543 li
228.476 94.6676 li
229.836 95.5101 li
231.311 96.3811 li
232.699 97.174 li
234.026 98.059 li
235.443 99.7334 li
236.843 101.468 li
238.304 103.194 li
239.66 105.001 li
241.102 108.344 li
242.502 111.678 li
243.902 114.944 li
245.351 118.438 li
246.74 124.124 li
248.197 131.409 li
248.261 132.88 li
248.205 133.955 li
247.055 135.313 li
.823529 .921569 .87451 rgb
f
314.343 203.583 mo
312.895 203.583 li
311.429 203.583 li
310.029 203.583 li
308.514 203.583 li
307.069 203.306 li
305.659 203.038 li
304.193 202.705 li
302.762 202.432 li
301.244 201.88 li
299.824 201.271 li
298.419 200.602 li
296.926 199.924 li
295.489 199.035 li
294.003 198.021 li
292.586 196.941 li
291.098 195.724 li
289.672 194.365 li
288.253 192.812 li
286.759 191.046 li
285.334 188.808 li
283.831 186.21 li
283.079 183.481 li
283.08 183.481 li
283.561 183.349 li
283.562 183.349 li
283.561 183.349 li
283.083 183.202 li
283.88 180.597 li
285.534 179.77 li
286.978 179.014 li
288.538 178.589 li
289.982 178.451 li
291.349 178.32 li
292.793 177.993 li
294.215 177.722 li
295.691 177.52 li
297.061 177.324 li
298.495 176.933 li
299.903 176.531 li
301.326 176.193 li
302.761 175.931 li
304.123 175.413 li
305.597 174.876 li
307.004 174.408 li
308.388 173.946 li
309.827 173.357 li
311.227 172.691 li
312.702 172.088 li
314.073 171.5 li
315.459 170.708 li
316.926 169.974 li
318.325 169.174 li
319.785 168.445 li
321.158 167.595 li
322.563 166.659 li
324.03 165.792 li
325.417 164.867 li
326.875 163.873 li
328.274 162.873 li
329.736 161.877 li
331.126 160.818 li
332.527 159.751 li
333.985 158.624 li
335.379 157.495 li
336.842 156.299 li
338.232 155.107 li
339.632 153.84 li
341.098 152.573 li
342.498 151.307 li
343.96 150.045 li
345.346 148.724 li
346.751 147.32 li
348.222 145.983 li
349.618 144.654 li
351.084 143.253 li
352.479 141.925 li
353.888 140.516 li
355.37 139.236 li
356.775 138.031 li
358.259 136.818 li
359.697 135.791 li
361.21 134.965 li
362.693 134.329 li
364.272 134.104 li
365.944 134.637 li
367.522 135.989 li
369.057 140.314 li
369.263 143.68 li
369.06 147.414 li
367.579 154.415 li
366.165 158.588 li
364.688 162.281 li
363.276 165.307 li
361.859 167.937 li
360.386 170.215 li
358.981 172.488 li
357.502 174.64 li
356.086 176.527 li
354.618 178.264 li
353.215 180.067 li
351.798 181.686 li
350.324 183.228 li
348.916 184.702 li
347.441 186.111 li
346.036 187.449 li
344.622 188.728 li
343.15 189.932 li
341.744 191.137 li
340.262 192.283 li
338.853 193.289 li
337.449 194.292 li
335.967 195.302 li
334.555 196.176 li
333.081 197.047 li
331.669 197.854 li
330.257 198.594 li
328.781 199.332 li
327.364 200.006 li
325.879 200.614 li
324.461 201.154 li
322.986 201.624 li
321.587 202.089 li
320.154 202.568 li
318.641 202.842 li
317.242 203.042 li
315.786 203.307 li
314.343 203.583 li
284.082 183.356 mo
284.761 185.82 li
286.189 188.289 li
287.566 190.451 li
289.004 192.152 li
290.386 193.665 li
291.76 194.974 li
293.205 196.156 li
294.589 197.21 li
296.035 198.196 li
297.398 199.041 li
298.84 199.696 li
300.235 200.359 li
301.613 200.95 li
303.029 201.465 li
304.398 201.726 li
305.864 202.059 li
307.256 202.324 li
308.609 202.582 li
310.029 202.582 li
311.429 202.582 li
312.895 202.582 li
314.248 202.582 li
315.606 202.323 li
317.082 202.055 li
318.482 201.855 li
319.905 201.597 li
321.271 201.141 li
322.673 200.674 li
324.131 200.21 li
325.511 199.684 li
326.96 199.091 li
328.343 198.433 li
329.802 197.703 li
331.189 196.976 li
332.579 196.182 li
334.037 195.321 li
335.424 194.462 li
336.877 193.472 li
338.272 192.475 li
339.665 191.481 li
341.113 190.361 li
342.508 189.165 li
343.969 187.97 li
345.355 186.716 li
346.751 185.387 li
348.209 183.995 li
349.601 182.537 li
351.06 181.011 li
352.444 179.43 li
353.841 177.633 li
355.304 175.903 li
356.689 174.057 li
358.143 171.942 li
359.54 169.682 li
360.998 167.427 li
362.382 164.859 li
363.771 161.884 li
365.226 158.243 li
366.613 154.15 li
368.065 147.283 li
368.262 143.684 li
368.068 140.516 li
366.669 136.575 li
365.447 135.528 li
364.187 135.126 li
362.965 135.301 li
361.648 135.865 li
360.229 136.64 li
358.866 137.613 li
357.417 138.798 li
356.022 139.993 li
354.57 141.249 li
353.178 142.64 li
351.774 143.977 li
350.308 145.377 li
348.903 146.715 li
347.441 148.044 li
346.045 149.44 li
344.632 150.785 li
343.16 152.057 li
341.76 153.324 li
340.294 154.59 li
338.893 155.858 li
337.484 157.066 li
336.01 158.271 li
334.606 159.407 li
333.132 160.547 li
331.732 161.613 li
330.322 162.688 li
328.848 163.692 li
327.448 164.692 li
325.975 165.697 li
324.562 166.639 li
323.095 167.506 li
321.698 168.436 li
320.273 169.319 li
318.797 170.056 li
317.398 170.856 li
315.931 171.59 li
314.519 172.397 li
313.088 173.01 li
311.631 173.606 li
310.231 174.273 li
308.735 174.884 li
307.32 175.357 li
305.926 175.821 li
304.469 176.352 li
303.03 176.899 li
301.531 177.172 li
300.156 177.499 li
298.763 177.897 li
297.264 178.306 li
295.832 178.51 li
294.377 178.709 li
292.998 178.972 li
291.508 179.31 li
290.077 179.446 li
288.719 179.576 li
287.346 179.95 li
285.99 180.66 li
284.711 181.3 li
284.082 183.356 li
247.402 136.452 mo
245.704 135.967 li
244.217 135.629 li
242.765 135.075 li
241.327 134.391 li
239.887 133.54 li
238.539 133.09 li
237.073 132.624 li
235.663 132.154 li
234.218 131.629 li
232.846 131.301 li
231.45 130.97 li
229.982 130.636 li
228.572 130.299 li
227.104 129.9 li
225.702 129.566 li
224.304 129.167 li
222.817 128.828 li
221.384 128.282 li
219.978 127.747 li
218.506 127.145 li
217.017 126.536 li
215.588 125.787 li
214.184 124.985 li
212.71 124.181 li
211.283 123.298 li
209.797 122.216 li
208.381 121.138 li
206.974 119.932 li
205.497 118.724 li
204.079 117.373 li
202.6 115.894 li
201.183 114.341 li
199.777 112.601 li
198.304 110.861 li
196.892 108.977 li
195.406 106.884 li
194.002 104.411 li
192.534 102.209 li
191.114 99.6384 li
189.693 96.4587 li
188.207 91.6634 li
187.802 89.1625 li
188.295 89.0825 li
187.803 88.9931 li
188.232 86.6329 li
189.952 84.9919 li
191.597 84.9128 li
193.085 85.1966 li
194.529 85.6563 li
195.908 85.7875 li
197.419 86.1307 li
198.85 86.5393 li
200.284 87.0612 li
201.644 87.2552 li
203.075 87.5276 li
204.563 87.9336 li
205.931 88.3244 li
207.376 88.5215 li
208.8 88.7933 li
210.208 89.1281 li
211.653 89.4567 li
213.042 89.6553 li
214.52 89.9235 li
215.933 90.1931 li
217.331 90.5256 li
218.785 90.7903 li
220.265 91.0592 li
221.689 91.3986 li
223.106 91.8034 li
224.584 92.2733 li
225.986 92.7409 li
227.393 93.21 li
228.915 93.7631 li
230.355 94.6547 li
231.813 95.516 li
233.225 96.323 li
234.698 97.3053 li
236.213 99.0962 li
237.613 100.83 li
239.087 102.571 li
240.531 104.496 li
242.022 107.954 li
243.422 111.287 li
244.822 114.552 li
246.305 118.126 li
247.717 123.907 li
249.193 131.288 li
249.262 132.885 li
249.186 134.343 li
247.402 136.452 li
188.803 89.0875 mo
189.183 91.4343 li
190.631 96.1058 li
192.01 99.1917 li
193.389 101.689 li
194.854 103.886 li
196.25 106.347 li
197.699 108.387 li
199.086 110.237 li
200.547 111.964 li
201.941 113.689 li
203.324 115.204 li
204.778 116.658 li
206.159 117.973 li
207.617 119.166 li
209.01 120.359 li
210.394 121.414 li
211.841 122.467 li
213.213 123.316 li
214.672 124.112 li
216.068 124.91 li
217.44 125.629 li
218.885 126.219 li
220.345 126.817 li
221.74 127.348 li
223.107 127.869 li
224.552 128.198 li
225.955 128.599 li
227.352 128.931 li
228.819 129.33 li
230.209 129.662 li
231.674 129.995 li
233.078 130.329 li
234.506 130.669 li
235.993 131.21 li
237.384 131.674 li
238.851 132.14 li
240.304 132.625 li
241.797 133.507 li
243.159 134.155 li
244.507 134.669 li
245.952 134.998 li
247.055 135.313 li
248.205 133.955 li
248.261 132.88 li
248.197 131.409 li
246.74 124.124 li
245.351 118.438 li
243.902 114.944 li
242.502 111.678 li
241.102 108.344 li
239.66 105.001 li
238.304 103.194 li
236.843 101.468 li
235.443 99.7334 li
234.026 98.059 li
232.699 97.174 li
231.311 96.3811 li
229.836 95.5101 li
228.476 94.6676 li
227.064 94.1543 li
225.67 93.6897 li
224.273 93.2239 li
222.818 92.761 li
221.435 92.3662 li
220.059 92.0383 li
218.606 91.7741 li
217.126 91.5047 li
215.723 91.1712 li
214.337 90.9066 li
212.882 90.6426 li
211.471 90.4408 li
209.982 90.1022 li
208.59 89.7712 li
207.215 89.5088 li
205.725 89.3055 li
204.293 88.8965 li
202.849 88.5027 li
201.48 88.2418 li
200.04 88.0365 li
198.541 87.491 li
197.171 87.0997 li
195.749 86.7769 li
194.328 86.6416 li
192.839 86.1676 li
191.527 85.9173 li
190.372 85.9729 li
189.158 87.1317 li
188.803 89.0875 li
.686274 .870588 .831372 rgb
f
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 47 /slash putdup 48 /zero putdup 49 /one putdup 50 /two putdup 67 /C putdup 71 /G putdup 73 /I putdup 77 /M putdup 80 /P putdup 86 /V putdup 87 /W putdup 91 /bracketleft putdup 93 /bracketright putdup 97 /a putdup 99 /c putdup 100 /d putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 127 /minus putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings31 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/space <1C60D8A8C9B8707C25> |-/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/slash <1C60D8A8C9B854D08E8EF969FA0346368398A1E8BF25> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/C <1C60D8A8C9B64EDFFB7CD25A2C740A59FDB93875AB4231E871C9753C8B6A300598898747795E8627DC8620BB80ECD900DDAE8B58DA30E2436AA16ADF42BEC594B706F998147F79C1F65A6CEE2D82088E51946E10EFCD63A7019B6D8437591296EB402980B290E76FE407FE36EDE9B3E4CE928D54B5D8DF2EE62B30B242A3EA7270B807155AA2CFE1DF6C04CEECCAB5FA78944000A4C6412A> |-/G <1C60D8A8C9B6079F6D8F9589F03C57E9BABC7BD7AF44F292C36BF054D0385D2FC11ADF26CF26FB1CA20D732AF012AB53727DD5F46B605D18E4B017E662A97B61E593E1649BDE06DC0BE81975EB02C63DB9CC50D324954CB92F05C09AE46BA2C2549D26E915E5BB03DE231AAD77F23323077408677E4049C607D64929B04AF386D58F981E4541C0982A23929E9B861E50C60AAFF01CE1D107C5993270B58A2C29D6FD48A1F36C5902C78C206F66DEBC5079EDB36633E15221CDFB88A58DA8F921FAE2BECE6FC3EDA0F38409251C> |-/I <1C60D8A8C9B81F2C5659C12DFFC3E380C6CA0BCAD10CF356600E4A11AD71C457AC494D1DA251098436E45B6C0FE156746A59F146A43FA43FA4E70C431CB313E43694521E224211773C019F61EE01FB015D97EE3928AD> |-/M <1C60D8A8C9B59F8585D783841697A85B51259E244839E123B9B04E1BC715C3A87C2B2C8C35A0752AC25EC790125225FBCD28374276B78537A6692ED1794BEC8F7660340E7EC80D04A0AC7FEFE303A28D6E14CDB1429C361878C85918D3837565792B1111C2D57CCC148AB9977177EA2E58D90F45A96DEF44E72A374B92E2F3C0299652B898CC96225AEDDFBC7B3F242F1D55002F20A398B5> |-/P <1C60D8A8C9B7EF322434E1F3A572E6E1BC6C6F1C68992768060DAE1B4C7B427E45BC3A4679807BEAE7F6D9AF630A1C22FD1CE21BCE2286818A82BD939AF289B76A1DB91C5AA9ECF164AD5A7EEB0C2FB6433D2C27E4C9DD9951F32681C1E23142F87FE0BB632961DBF09B1BCC2DBDF28AA2A576366886A338146A6EE45FE7539E8D3254D439F46CBA62C74FD6727A2572BFC88846FED7BD6467448C15F8CC8DCFA5340A99B196EA105B822649C918B21A83378A8D> |-/V <1C60D8A8C9B6079F0E16A7A9CFB38641DC3E2CCFEEF6CC04C497281D5E59A28A72DDD82A55A43EFEDC2B21B8ED853221D20424BAF356EC578F4BE31614BDA3E044AAF93D7E2C419284B1979F1560EE780320778058427970767F8D90669EE8123F561606CE9E029EB241604A4510050DAD50EBCEAA5007F881FA9E304F39E3C201594C> |-/W <1C60D8A8C9B5D6EF3ABB3862236A3F2F31E4FF8A0301A6C4777B19653FCB787B09E3342A88EB79DE5ED1425AD6E9C848B3186932098D735E2926B43ABF5889A7EDE20F49BED102ED87C85F71CD3BF677F37161FE2DBDBF2E9FA35EFD404AD2729EE44DF9FAC99E588AC1441BBE787EFDDCB8497FE186FF2958B96E5ADAF506E56312BFFAF1E6C4FDFE6F5D1636203280CFE944C88A98C1DA0D9BBB9F87870E191E8237629A55FE580599BFC37205C64388EC92EDC09B76572F4FFA2FDCE7C51BEB9DBC3520C767A9ED538A55F87F13778ECC7E60895EED96E362CC> |-/bracketleft <1C60D8A8C9B81F2C2EF5D2F7C86086F2EF55462CDE69AB1C3390780A3E6B66DF53E8F9FA1A7E8FB5CD235E7DBAE0D8EE1E28926AA0FD2C3A028CF3> |-/bracketright <1C60D8A8C9B81F2C3A3357A26DB534BD0F666D21108D0B91435146D7D5EC4A8519FF9E4FBF13110E4D4FFE4A07533078E0C3E2175382191E0DEEE4DA> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-/c <1C60D8A8C9B77FE2CE939B120B8C530BA36A1D378ED7528AD7B7A10AC71BEF208D8B385B11077F2A13A81C13DFBF440D42A243A800735CB8F4DC3746EB4039E43E77D867A7AA457E639AE6CCAFB17D4572C0E8FCF8662A95CB9A94DBFA339E8C89716E4D6EB7EE669FEA0FD73F1B364D57426E512088C7E414CE09DC0040B747838B6828750C7FA69A58B3FBD05411AA3233E35DCBE1E5C8A3302EE901E300C17D> |-/d <1C60D8A8C9B7A73DB9A50E659DB775F0445838B52D4AD3E4EA55A04AF1E66EB3E22000826F80E46C696D55B3FE9B16954A0FDDDCF9A25B9DBBDA281BC3743A32DF4E962666420F0E46505362A6A9911C122E7E5925E4098A8375B64204275CB8C487667CDFFB7001810B24CEFAA2B80CAD8B87A3E1168C62B165D1D52436E632F3BD5E44BCAD1D3E08911E568C3ADE5A148D88E7C75A5F95F7018097A855F01058BEA6CAD1F5CFBA99049D028F229C0A374E791F4E6F00190E23FDB14CB2BF5215AC36154229670311F93C06828FE397A9700C53BE1A07DF9AE66151E66A3E4BE4B17FDA8F9875D90067B1D7D9914E47FA1ED2D057561417FDB2931E47F3C120E5878FF702> |-/e <1C60D8A8C9B77FE2CE67108D1280ADC9682165E381A1DB7E740A05B18E65167A034DB250F6D5492B270110B05E60263A42B2C42DDF9AB2E4A276D8ABFFBD6680C39C89C62CEAE031CFF89EF16FD9FC76CF19CB9F9E34BA9AA837F4D55163017EBBAC9FCE57F666560D76840A1E9FB941AF2DF15742DAEB79EA2886404B2375DA19EFBEAC2017EDAD03B37508> |-/i <1C60D8A8C9B854D0DE8FF03001C7DDCDF6D3A68A6B597D794E646C678EE584A1666CB56CA9FE75811CEA2087E2C341C7E1E2BD6147E5E1B64DFF133BC2DEFF475DA598F822B2BE3A9DBFD7105A3889BD250D9F71DE0C91B5EA539C526B6489E8D9E79757A61E2352A71C3AC0EEEBBBD4B096AC9707E6604D45F8B4EB690BCE5B5F037666EE3D29DC12074786C8164E88903799783957677A476A9FAD9CB291219231A21175873BB2> |-/l <1C60D8A8C9B854D09C28E93890ED677F310D1E32AA544EA0617CF81480930FF09D96FFEC0D2D74BC923E8CC3789EA117FEE8A516539FF915E22C6A549B8D0FA459312C0739BEBB3BD2A37FAA8365907BF4200CFE09B70B39C1ECB8C3A6085FE4D765368B> |-/m <1C60D8A8C9B6FF8699A9E0957D16E85AF3EF7FB5550D53F58119CA6FE9A7D4C98706545F58540E72C4F6DBF95879F02D97A7F35AB5AF3C971237293FF5B2FB844191681255BE21478456D24EE31A2A7143B10FBA09BC00C8AED529FA7A252F5274921E1C121C49F9A6BDE50E747AC4CD0AF6F6706D6A4E730F5719639E692B7DF9539A8C86290A899FD897C44E8C098306316B6B9696B686A9B83249EF96A00A2FF0F972C35DB6BF3C3D779B038A947CE308FE712510B0F53C629676A77F97F98DDA7B37D2628E8FEEC42D36B6A15BF9FD22B2B8F078CF5BFE089DE548DB0501AFAFBA32D2143AC07A22D2DF86E9C0B50FA99CAFD1EE8BB0E72F1F0DA0CAB73F3C0DBE795764A811F4BC8FDB7CE3365A061791255C37B34ED2B69FAF3B52D7BAE8CD2D2E8A84097361CCD8E917EDDDA32F45C31D> |-/n <1C60D8A8C9B7A73DD30B80525D5D675DA4D0977F59D93029CA5D14D1D6563E1C35EFF4A3EA44981DFE04749A107A1C9F060A076451BF62C02FE2E474DD187526384A6F42E0021FEFF54C8346ADE1D28DE56A36764BAF6B66BF7DB43854DD1D363EB418A371ED43BA933A460B2917DEA26BF87012AAF7B195AB0B8FD490EC07235D6699814C77751D4CEE45D35DBD8B1597438545A60B7623CE491483A014FEEE65ED4FEBDF80A721F21A9D4DE075A36D58250AE2AA345A9C5F7B6CB7C99BA896DCEAAA4342B927737814> |-/o <1C60D8A8C9B7A73DEA5F658431FF26DE1C3CCABA5A5AF56EE1798CA324BEFFED162986DEB20473198E3AAB17E1F76DC8A1DBB020158974052802A30905F0338BF503D35906BB108F3CEAC35FDF3D8BC51C5542899E6D21063EDA8732DC154AFBF51B7EEDDA621E256B5E3E8A8E86389A77366F5766B3A5B4DE72C37DBEBA04E9D5CF3B75> |-/r <1C60D8A8C9B81F2C5DE210A78B7176966966FB4A2E70036BAA4A8956D597954FF33C419645546BDDA5A1C075630C88C9E9E0B6B2EB6B2FC3FF0331B1902616E9791F7398738E2F17D5E54890C7A065EB2198D4708DA7213806F12669F67678CAD7B30B1926E6F30FE45B0DAB7BE403E568FB7F28C7F3631BA5B608F502310C8C5FF767FCF95E7EC0C2EC9F2F173FF41F0C7459D2154243B15CA53A73779F93E107279F803A71F8179756E718854D0BA7BCB1168643F72763D9FF> |-/s <1C60D8A8C9B7361F4A471763AC73DF2CB4D0E822A2CECA1AE242CCF137FE2017E1B84759A659774165B7FAAFC754E62F16566CD871C047B4DA1FAE5370C0C235D54992A5E0FA7700C9EE743A2D940E9CA5D26B3831BD83BB30176B0537C44AA3FF8FCDF5B3ABFEF1C2B6D9ACB1822B29C0F334D4D83CA74FAA5037DE49F23F9CF057A26EA493317530A59C4D60B62C344BD8DC7AA9CDF22723A4837ACF83C7D482D9B0FF4236D5FDED500C27A8FA9429CB11EFEE5641EF6FB1753C2B2C35F423576031D731309BB9AC2BE1068E6CE69B054A642C61> |-/t <1C60D8A8C9B854D0F41C7D11C14207BE1C0BA04724483030493967288AC8D5095C0BB34E8B56A5C53BD1B7A25A11F231F6182B9300CAF4CFD46C1EFFF4B0E38766187499A1973473DBAE4D98649DB8F7DCCE25964559B9BA93E6803E419984755899DE68C87EC2F530AC81AF61BCF42839E59E8A14B5E2DDDE3A4AFB0D7D86FA4DD21DF5669B371465EBE7C64497A6C50C0C5658D7> |-/u <1C60D8A8C9B7A73DDDD5393BA7D7831D75F13A25B59F8CAE59E13B1DBD301256F09A2A2FA0610BB05DE2ECE6E35EA4ADC086161AFF85B0FD2437640FDD80398C4C0B32C179538489C2DFE344A56B831FF47DC8684534892DA6A169CBD1177876492AD2C2BDD7A6B08127B6A645642A5FAF8AB73C40BA1FE9FB481006D45C77AAEB57B47F60A9B165A96B82FB4F1ABC3AAEF73B36D7075B83620B1F07B444F8EF540AE2E9744CDCFFE07D> |-/minus <1C60D8A8C9B7E7C1F1EEC56D4D49B27D0733763C064D> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MZCCUG+Times-Roman /Times-Roman findfont ct_VMDictPut/MZCCUG+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two 16{/.notdef}rp /C 3{/.notdef}rp /G /.notdef /I 3{/.notdef}rp /M 2{/.notdef}rp /P 5{/.notdef}rp /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]MZCCUG+Times-Roman nfMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf198.633 493.811 mo(WIMP Mass [GeV/c)shMZCCUG+Times-Roman*1 [16 0 0 -16 0 0 ]msf364.096 483.817 mo(2)shMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf372.102 493.811 mo(])shMZCCUG+Times-Roman*1 [0 -20 -20 0 0 0 ]msf24.4951 409.818 mo(Cross\177section [cm)[-13.3398 -6.66016 -10 -7.7832 -7.7832 -11.2793 -7.7832 -8.87695 -8.87695 -5.55664 -5.55664 -10 -10 -5 -6.66016 -8.87695 0 ]yshMZCCUG+Times-Roman*1 [0 -16 -16 0 0 0 ]msf13.2959 260.211 mo(2)shMZCCUG+Times-Roman*1 [0 -20 -20 0 0 0 ]msf23.2954 252.217 mo(] \(normalised to nucleon\))[-6.66016 -5 -6.66016 -10 -10 -6.66016 -15.5566 -8.87695 -5.55664 -5.55664 -7.7832 -8.87695 -10 -5 -5.55664 -10 -5 -10 -10 -8.87695 -5.55664 -8.87695 -10 -10 0 ]yshMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf61.0391 470.223 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf81.0269 458.28 mo(0)sh216.596 15.8818 mo
216.596 24.4819 li
217.596 24.4819 li
217.596 15.8818 li
cp
217.596 444.083 mo
217.596 435.483 li
216.596 435.483 li
216.596 444.083 li
cp
216.596 15.8818 mo
216.596 20.2153 li
217.596 20.2153 li
217.596 15.8818 li
cp
217.596 444.083 mo
217.596 439.749 li
216.596 439.749 li
216.596 444.083 li
cp
210.062 15.8818 mo
210.062 20.2153 li
211.062 20.2153 li
211.062 15.8818 li
cp
211.062 444.083 mo
211.062 439.749 li
210.062 439.749 li
210.062 444.083 li
cp
202.795 15.8818 mo
202.795 20.2153 li
203.795 20.2153 li
203.795 15.8818 li
cp
203.795 444.083 mo
203.795 439.749 li
202.795 439.749 li
202.795 444.083 li
cp
194.529 15.8818 mo
194.529 20.2153 li
195.529 20.2153 li
195.529 15.8818 li
cp
195.529 444.083 mo
195.529 439.749 li
194.529 439.749 li
194.529 444.083 li
cp
184.929 15.8818 mo
184.929 20.2153 li
185.929 20.2153 li
185.929 15.8818 li
cp
185.929 444.083 mo
185.929 439.749 li
184.929 439.749 li
184.929 444.083 li
cp
173.662 15.8818 mo
173.662 20.2153 li
174.662 20.2153 li
174.662 15.8818 li
cp
174.662 444.083 mo
174.662 439.749 li
173.662 439.749 li
173.662 444.083 li
cp
159.795 15.8818 mo
159.795 20.2153 li
160.795 20.2153 li
160.795 15.8818 li
cp
160.795 444.083 mo
160.795 439.749 li
159.795 439.749 li
159.795 444.083 li
cp
141.996 15.8818 mo
141.996 20.2153 li
142.996 20.2153 li
142.996 15.8818 li
cp
142.996 444.083 mo
142.996 439.749 li
141.996 439.749 li
141.996 444.083 li
cp
116.862 15.8818 mo
116.862 20.2153 li
117.862 20.2153 li
117.862 15.8818 li
cp
117.862 444.083 mo
117.862 439.749 li
116.862 439.749 li
116.862 444.083 li
cp
0 0 0 rgb
f
.137255 .121569 .12549 rgb
MZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf203.771 470.223 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf223.764 458.28 mo(1)sh359.329 15.8818 mo
359.329 24.4819 li
360.329 24.4819 li
360.329 15.8818 li
cp
360.329 444.083 mo
360.329 435.483 li
359.329 435.483 li
359.329 444.083 li
cp
359.329 15.8818 mo
359.329 20.2153 li
360.329 20.2153 li
360.329 15.8818 li
cp
360.329 444.083 mo
360.329 439.749 li
359.329 439.749 li
359.329 444.083 li
cp
352.796 15.8818 mo
352.796 20.2153 li
353.796 20.2153 li
353.796 15.8818 li
cp
353.796 444.083 mo
353.796 439.749 li
352.796 439.749 li
352.796 444.083 li
cp
345.462 15.8818 mo
345.462 20.2153 li
346.462 20.2153 li
346.462 15.8818 li
cp
346.462 444.083 mo
346.462 439.749 li
345.462 439.749 li
345.462 444.083 li
cp
337.195 15.8818 mo
337.195 20.2153 li
338.195 20.2153 li
338.195 15.8818 li
cp
338.195 444.083 mo
338.195 439.749 li
337.195 439.749 li
337.195 444.083 li
cp
327.662 15.8818 mo
327.662 20.2153 li
328.662 20.2153 li
328.662 15.8818 li
cp
328.662 444.083 mo
328.662 439.749 li
327.662 439.749 li
327.662 444.083 li
cp
316.329 15.8818 mo
316.329 20.2153 li
317.329 20.2153 li
317.329 15.8818 li
cp
317.329 444.083 mo
317.329 439.749 li
316.329 439.749 li
316.329 444.083 li
cp
302.529 15.8818 mo
302.529 20.2153 li
303.529 20.2153 li
303.529 15.8818 li
cp
303.529 444.083 mo
303.529 439.749 li
302.529 439.749 li
302.529 444.083 li
cp
284.729 15.8818 mo
284.729 20.2153 li
285.729 20.2153 li
285.729 15.8818 li
cp
285.729 444.083 mo
285.729 439.749 li
284.729 439.749 li
284.729 444.083 li
cp
259.596 15.8818 mo
259.596 20.2153 li
260.596 20.2153 li
260.596 15.8818 li
cp
260.596 444.083 mo
260.596 439.749 li
259.596 439.749 li
259.596 444.083 li
cp
0 0 0 rgb
f
.137255 .121569 .12549 rgb
MZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf346.502 470.223 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf366.495 458.28 mo(2)sh502.062 15.8818 mo
502.062 20.2153 li
503.062 20.2153 li
503.062 15.8818 li
cp
503.062 444.083 mo
503.062 439.749 li
502.062 439.749 li
502.062 444.083 li
cp
495.529 15.8818 mo
495.529 20.2153 li
496.529 20.2153 li
496.529 15.8818 li
cp
496.529 444.083 mo
496.529 439.749 li
495.529 439.749 li
495.529 444.083 li
cp
488.195 15.8818 mo
488.195 20.2153 li
489.195 20.2153 li
489.195 15.8818 li
cp
489.195 444.083 mo
489.195 439.749 li
488.195 439.749 li
488.195 444.083 li
cp
479.929 15.8818 mo
479.929 20.2153 li
480.929 20.2153 li
480.929 15.8818 li
cp
480.929 444.083 mo
480.929 439.749 li
479.929 439.749 li
479.929 444.083 li
cp
470.396 15.8818 mo
470.396 20.2153 li
471.396 20.2153 li
471.396 15.8818 li
cp
471.396 444.083 mo
471.396 439.749 li
470.396 439.749 li
470.396 444.083 li
cp
459.062 15.8818 mo
459.062 20.2153 li
460.062 20.2153 li
460.062 15.8818 li
cp
460.062 444.083 mo
460.062 439.749 li
459.062 439.749 li
459.062 444.083 li
cp
445.262 15.8818 mo
445.262 20.2153 li
446.262 20.2153 li
446.262 15.8818 li
cp
446.262 444.083 mo
446.262 439.749 li
445.262 439.749 li
445.262 444.083 li
cp
427.396 15.8818 mo
427.396 20.2153 li
428.396 20.2153 li
428.396 15.8818 li
cp
428.396 444.083 mo
428.396 439.749 li
427.396 439.749 li
427.396 444.083 li
cp
402.262 15.8818 mo
402.262 20.2153 li
403.262 20.2153 li
403.262 15.8818 li
cp
403.262 444.083 mo
403.262 439.749 li
402.262 439.749 li
402.262 444.083 li
cp
0 0 0 rgb
f
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUG+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7A73D960D5C905E34DC81A096980F2B4111B9B099A6DB83E1916FF3E1A9E04B02D3E9232818F77B09A9AACB5832FED542FDDA70002EB05443C3A08AC9203ACF784CB865C5B9F7D872416879897E73175190413158DECCEEC3F81053539EF7A5BA54848FD5EF8191B77C87FC4B2FB70A247D6480306D63973D6D1E40988764838CF4D7C7CFD56B10F551336B687A8CAD70446C673C2BFDC7C6AD86547DB031DFD479DCB051DAF5177334E8CD4B35F8B65FC86BD3BDBBB8D1E2B3149970112D8374721C0AB537409EB4ADF5E62264D22634EE> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUG+Times-Roman /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/MZCCUG+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three 15{/.notdef}rp /C 3{/.notdef}rp /G /.notdef /I 3{/.notdef}rp /M 2{/.notdef}rp /P 5{/.notdef}rp /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]MZCCUG+Times-Roman nfMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf489.239 470.223 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf509.227 458.28 mo(3)sh502.562 443.833 mo
493.962 443.833 li
493.962 444.333 li
502.562 444.333 li
cp
74.3618 444.333 mo
82.9619 444.333 li
82.9619 443.833 li
74.3618 443.833 li
cp
0 0 0 rgb
f
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUG+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUG+Times-Roman /Encoding getdup 52 /four putdup 54 /six putpop%ADOEndSubsetFont
/MZCCUG+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three /four /.notdef /six 12{/.notdef}rp /C 3{/.notdef}rp /G /.notdef /I 3{/.notdef}rp /M 2{/.notdef}rp /P 5{/.notdef}rp /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]MZCCUG+Times-Roman nfMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf31.2954 451.217 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf51.2954 439.28 mo(\17746)shMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf31.2954 344.155 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf51.2954 332.217 mo(\17744)shMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf31.2954 237.149 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf51.2954 225.211 mo(\17742)shMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf31.2954 130.086 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf51.2954 118.149 mo(\17740)sh502.562 15.6318 mo
493.962 15.6318 li
493.962 16.1318 li
502.562 16.1318 li
cp
74.3618 16.1318 mo
82.9619 16.1318 li
82.9619 15.6318 li
74.3618 15.6318 li
cp
0 0 0 rgb
f
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUG+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUG+Times-Roman /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/MZCCUG+Times-Roman*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three /four /.notdef /six /.notdef /eight 10{/.notdef}rp /C 3{/.notdef}rp /G /.notdef /I 3{/.notdef}rp /M 2{/.notdef}rp /P 5{/.notdef}rp /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u 9{/.notdef}rp /minus 128{/.notdef}rp]MZCCUG+Times-Roman nfMZCCUG+Times-Roman*1 [20 0 0 -20 0 0 ]msf31.2954 23.0176 mo(10)[10 0 ]xshMZCCUG+Times-Roman*1 [13.3334 0 0 -13.3334 0 0 ]msf51.2954 11.0801 mo(\17738)sh503.062 444.083 mo
503.062 15.8823 li
502.062 15.8823 li
502.062 444.083 li
cp
74.8618 444.083 mo
74.8618 15.8823 li
73.8618 15.8823 li
73.8618 444.083 li
cp
74.3618 16.3823 mo
502.562 16.3823 li
502.562 15.3823 li
74.3618 15.3823 li
cp
74.3618 444.583 mo
502.562 444.583 li
502.562 443.583 li
74.3618 443.583 li
cp
0 0 0 rgb
f
73.6342 342.235 mo
74.7006 343.368 li
74.8622 343.506 li
76.996 344.973 li
79.1292 346.44 li
81.1799 347.85 li
83.178 349.911 li
83.3293 350.039 li
85.4622 351.506 li
87.5137 352.917 li
89.5782 355.044 li
89.7349 355.176 li
91.8013 356.576 li
91.7958 356.573 li
93.8476 357.983 li
95.911 360.111 li
96.0621 360.238 li
98.1898 361.702 li
100.25 363.164 li
100.512 363.349 100.85 363.398 101.153 363.294 cv
102.962 362.673 li
104.652 363.253 li
106.665 364.575 li
108.717 366.031 li
108.971 366.161 li
111.104 366.894 li
111.208 366.93 111.318 366.949 111.429 366.949 cv
113.395 366.949 li
115.371 367.628 li
115.476 367.664 115.585 367.682 115.696 367.682 cv
117.657 367.682 li
119.562 368.357 li
119.667 368.394 119.785 368.415 119.896 368.415 cv
121.862 368.415 li
123.837 369.094 li
125.971 369.828 li
126.076 369.864 126.185 369.882 126.296 369.882 cv
128.195 369.882 li
130.171 370.561 li
130.276 370.597 130.385 370.616 130.496 370.616 cv
132.629 370.616 li
134.762 370.616 li
134.873 370.616 134.992 370.595 135.097 370.558 cv
137.163 369.825 li
137.154 369.828 li
139.287 369.095 li
141.421 368.36 li
141.662 368.239 li
143.687 366.847 li
145.625 366.16 li
147.753 365.429 li
147.754 365.428 li
149.888 364.694 li
152.021 363.961 li
152.257 363.843 li
154.213 362.518 li
156.221 361.828 li
156.371 361.777 156.504 361.692 156.614 361.578 cv
158.58 359.55 li
160.329 358.949 li
162.229 358.949 li
162.34 358.949 162.449 358.93 162.554 358.894 cv
164.529 358.215 li
166.496 358.215 li
166.759 358.215 167.017 358.109 167.203 357.922 cv
168.904 356.222 li
170.389 356.7 li
170.487 356.732 170.593 356.749 170.696 356.749 cv
172.661 356.749 li
174.637 357.428 li
174.638 357.429 li
176.771 358.161 li
176.876 358.197 176.985 358.215 177.096 358.215 cv
178.852 358.215 li
180.729 359.506 li
182.78 360.917 li
184.845 363.044 li
184.855 363.055 li
186.988 365.19 li
187.117 365.299 li
189.184 366.764 li
189.196 366.773 li
191.247 368.182 li
193.311 370.312 li
193.322 370.323 li
195.455 372.456 li
195.558 372.559 195.69 372.642 195.827 372.691 cv
197.602 373.322 li
199.526 375.965 li
201.614 379.489 li
203.681 383.752 li
205.715 392.345 li
207.842 405.376 li
207.84 405.368 li
209.974 419.168 li
209.973 419.16 li
212.103 433.675 li
213.234 444.255 li
215.223 444.043 li
214.09 433.443 li
214.085 433.404 li
211.952 418.87 li
211.951 418.862 li
209.817 405.063 li
209.816 405.054 li
207.683 391.988 li
207.669 391.919 li
205.602 383.184 li
205.529 382.978 li
203.396 378.579 li
203.356 378.505 li
201.223 374.905 li
201.171 374.826 li
199.037 371.894 li
198.919 371.733 198.752 371.608 198.563 371.541 cv
196.71 370.882 li
194.742 368.914 li
192.614 366.719 li
192.462 366.59 li
190.334 365.129 li
188.343 363.716 li
186.275 361.646 li
184.146 359.453 li
183.995 359.325 li
181.863 357.858 li
179.729 356.391 li
179.56 356.275 179.367 356.215 179.162 356.215 cv
177.263 356.215 li
175.287 355.537 li
175.288 355.537 li
173.154 354.803 li
173.049 354.767 172.94 354.749 172.829 354.749 cv
170.853 354.749 li
168.936 354.131 li
168.577 354.015 168.188 354.109 167.922 354.375 cv
166.082 356.215 li
164.362 356.215 li
164.251 356.215 164.142 356.234 164.037 356.27 cv
162.061 356.949 li
160.162 356.949 li
160.051 356.949 159.942 356.967 159.837 357.003 cv
157.704 357.736 li
157.554 357.788 157.421 357.873 157.311 357.986 cv
155.345 360.014 li
153.437 360.67 li
153.201 360.788 li
151.245 362.113 li
149.237 362.803 li
147.103 363.537 li
147.104 363.537 li
144.971 364.27 li
144.962 364.273 li
142.894 365.006 li
142.662 365.125 li
140.641 366.513 li
138.637 367.203 li
136.504 367.937 li
136.494 367.94 li
134.59 368.616 li
132.629 368.616 li
130.663 368.616 li
128.687 367.937 li
128.582 367.901 128.473 367.882 128.362 367.882 cv
126.463 367.882 li
124.487 367.203 li
122.354 366.469 li
122.249 366.433 122.14 366.415 122.029 366.415 cv
120.068 366.415 li
118.163 365.74 li
118.058 365.702 117.94 365.682 117.829 365.682 cv
115.863 365.682 li
113.888 365.003 li
113.783 364.967 113.674 364.949 113.563 364.949 cv
111.596 364.949 li
109.757 364.316 li
107.807 362.933 li
107.777 362.913 li
105.645 361.512 li
105.42 361.402 li
103.287 360.67 li
103.077 360.598 102.848 360.598 102.638 360.67 cv
100.989 361.236 li
99.3408 360.067 li
99.329 360.058 li
97.2775 358.647 li
95.214 356.519 li
95.0626 356.391 li
92.9288 354.924 li
92.9233 354.921 li
90.942 353.578 li
88.8798 351.453 li
88.7287 351.325 li
86.5954 349.858 li
84.5447 348.448 li
82.5466 346.387 li
82.3953 346.259 li
80.2625 344.792 li
78.1291 343.325 li
76.0834 341.919 li
75.0904 340.864 li
73.6342 342.235 li
cp
.968627 .560784 .294118 rgb
f
454.762 443.849 mo
454.562 443.582 li
454.532 443.546 li
451.932 440.679 li
451.699 440.534 li
451.233 440.401 li
451.182 440.39 li
448.916 439.99 li
448.74 439.959 448.56 440.025 448.446 440.162 cv
448.112 440.562 li
448.088 440.592 li
445.755 443.858 li
446.569 444.44 li
448.891 441.188 li
449.027 441.025 li
450.983 441.37 li
451.287 441.457 li
453.776 444.201 li
453.962 444.449 li
454.762 443.849 li
cp
.505882 .666667 .427451 rgb
f
217.148 184.334 mo
220.214 193.467 li
220.248 193.553 li
223.303 200.461 li
226.36 208.568 li
226.362 208.573 li
229.428 216.573 li
229.437 216.595 li
232.504 224.062 li
232.526 224.111 li
235.592 230.577 li
235.626 230.643 li
238.692 236.043 li
238.73 236.104 li
241.797 240.704 li
241.805 240.715 li
244.871 245.182 li
244.869 245.179 li
247.869 249.579 li
247.907 249.63 li
250.973 253.564 li
251.033 253.634 li
254.1 256.9 li
254.213 257.003 li
257.274 259.399 li
260.335 261.862 li
260.416 261.92 li
263.483 263.92 li
263.523 263.945 li
266.59 265.745 li
266.681 265.792 li
269.652 267.148 li
272.589 269.319 li
275.613 272.145 li
275.682 272.204 li
278.682 274.539 li
278.702 274.554 li
281.768 276.819 li
281.829 276.861 li
284.895 278.795 li
287.962 280.728 li
287.989 280.745 li
291.046 282.539 li
294.011 284.344 li
296.981 287.249 li
300.033 290.499 li
300.125 290.586 li
303.188 293.118 li
306.249 295.712 li
306.328 295.773 li
309.328 297.839 li
309.48 297.925 li
312.515 299.31 li
315.491 300.927 li
318.501 303.154 li
318.68 303.26 li
321.747 304.659 li
321.93 304.722 li
324.968 305.446 li
328.005 306.371 li
328.083 306.392 li
331.14 307.056 li
334.196 307.787 li
334.275 307.803 li
337.078 308.239 li
339.975 310.003 li
340.105 310.082 340.257 310.132 340.409 310.145 cv
343.454 310.409 li
346.499 310.807 li
346.629 310.815 li
349.695 310.815 li
352.762 310.815 li
355.829 310.815 li
358.895 310.815 li
358.96 310.813 li
362.027 310.614 li
365.095 310.412 li
365.118 310.411 li
368.106 310.146 li
371.16 309.948 li
371.268 309.935 li
374.324 309.401 li
377.379 308.938 li
380.436 308.471 li
383.491 308.073 li
383.594 308.054 li
386.661 307.323 li
389.676 306.6 li
392.691 306.207 li
392.794 306.188 li
395.862 305.453 li
395.866 305.453 li
398.853 304.724 li
401.908 304.059 li
401.927 304.054 li
404.984 303.325 li
408.042 302.659 li
408.12 302.639 li
411.148 301.718 li
414.175 301.059 li
414.272 301.032 li
417.321 300.038 li
420.348 299.183 li
423.395 298.453 li
423.453 298.438 li
426.52 297.506 li
426.527 297.504 li
429.527 296.57 li
429.521 296.572 li
432.587 295.639 li
435.653 294.706 li
438.72 293.771 li
441.786 292.839 li
444.852 291.906 li
447.919 290.972 li
447.974 290.953 li
451.014 289.83 li
454.053 288.906 li
454.059 288.905 li
457.059 287.97 li
457.126 287.946 li
460.156 286.76 li
463.175 285.842 li
466.234 284.977 li
466.326 284.946 li
469.347 283.764 li
472.367 282.912 li
472.478 282.874 li
475.481 281.632 li
478.08 280.954 li
480.79 282.545 li
481.036 282.689 481.334 282.721 481.606 282.633 cv
484.646 281.642 li
487.62 280.849 li
487.672 280.833 li
490.739 279.833 li
490.86 279.784 li
493.849 278.354 li
496.833 277.512 li
496.89 277.494 li
499.956 276.427 li
499.963 276.425 li
502.963 275.357 li
502.292 273.473 li
499.292 274.541 li
499.299 274.538 li
496.261 275.595 li
493.223 276.452 li
493.063 276.512 li
490.056 277.952 li
487.078 278.923 li
484.105 279.716 li
484.052 279.731 li
481.414 280.592 li
478.734 279.02 li
478.504 278.885 478.235 278.847 477.976 278.915 cv
474.91 279.714 li
474.78 279.758 li
471.768 281.003 li
468.757 281.852 li
468.664 281.884 li
465.643 283.066 li
462.623 283.92 li
462.605 283.926 li
459.537 284.858 li
459.464 284.884 li
456.431 286.071 li
453.464 286.995 li
453.471 286.993 li
450.404 287.926 li
450.349 287.944 li
447.309 289.067 li
444.27 289.993 li
441.204 290.926 li
438.138 291.858 li
435.071 292.793 li
432.005 293.725 li
428.938 294.659 li
428.932 294.661 li
425.932 295.594 li
425.939 295.592 li
422.9 296.515 li
419.863 297.243 li
419.824 297.253 li
416.757 298.119 li
416.719 298.131 li
413.7 299.115 li
410.683 299.772 li
410.605 299.793 li
407.577 300.714 li
404.549 301.373 li
404.53 301.377 li
401.473 302.107 li
398.416 302.772 li
398.392 302.778 li
395.392 303.509 li
395.396 303.508 li
392.38 304.231 li
389.366 304.624 li
389.262 304.643 li
386.196 305.378 li
383.181 306.097 li
380.167 306.489 li
380.145 306.492 li
377.078 306.961 li
374.012 307.426 li
373.99 307.429 li
370.977 307.955 li
367.964 308.151 li
367.941 308.153 li
364.951 308.417 li
361.896 308.618 li
358.862 308.815 li
355.829 308.815 li
352.762 308.815 li
349.695 308.815 li
346.694 308.815 li
343.691 308.423 li
343.648 308.418 li
340.815 308.173 li
337.949 306.428 li
337.835 306.358 337.714 306.314 337.582 306.294 cv
334.622 305.833 li
331.595 305.109 li
331.575 305.104 li
328.548 304.446 li
325.521 303.524 li
325.461 303.508 li
322.489 302.799 li
319.606 301.484 li
316.624 299.278 li
316.507 299.203 li
313.439 297.536 li
313.377 297.505 li
310.39 296.142 li
307.504 294.155 li
304.476 291.587 li
304.466 291.579 li
301.447 289.084 li
298.424 285.865 li
298.395 285.835 li
295.328 282.834 li
295.149 282.695 li
292.081 280.828 li
292.068 280.82 li
289.015 279.028 li
285.962 277.104 li
282.927 275.189 li
279.9 272.952 li
276.946 270.653 li
273.912 267.819 li
273.824 267.745 li
270.757 265.478 li
270.577 265.372 li
267.557 263.994 li
264.556 262.232 li
261.55 260.272 li
258.522 257.837 li
258.512 257.828 li
255.506 255.475 li
252.522 252.298 li
249.504 248.426 li
246.521 244.052 li
246.52 244.05 li
243.457 239.588 li
240.414 235.024 li
237.383 229.687 li
234.344 223.277 li
231.291 215.846 li
228.229 207.857 li
228.231 207.863 li
225.165 199.729 li
225.144 199.677 li
222.095 192.787 li
219.044 183.697 li
217.148 184.334 li
.643137 .309804 .619608 rgb
f
98.3965 16.4365 mo
102.663 22.8364 li
102.785 22.9856 li
110.118 30.386 li
110.253 30.4998 li
116.787 35.0994 li
116.927 35.1821 li
122.86 38.0488 li
122.986 38.0995 li
128.32 39.8329 li
128.445 39.8648 li
133.445 40.7984 li
133.542 40.8117 li
138.142 41.2116 li
138.229 41.2153 li
142.495 41.2153 li
142.545 41.2141 li
146.545 41.0144 li
146.602 41.0099 li
150.335 40.61 li
150.378 40.6045 li
153.769 40.0923 li
156.809 40.5093 li
159.757 42.3912 li
159.832 42.435 li
162.9 44.0351 li
162.94 44.0551 li
165.807 45.3886 li
165.885 45.4211 li
168.619 46.4211 li
168.653 46.433 li
171.32 47.2992 li
171.398 47.3212 li
173.932 47.9213 li
173.945 47.9244 li
176.345 48.4581 li
176.421 48.4719 li
178.753 48.8054 li
178.778 48.8086 li
181.045 49.0752 li
181.072 49.0779 li
183.272 49.2776 li
183.33 49.2812 li
185.397 49.3476 li
187.463 49.415 li
187.53 49.4149 li
189.464 49.3475 li
191.397 49.2811 li
191.398 49.2811 li
193.264 49.2147 li
193.302 49.2126 li
195.103 49.0793 li
195.144 49.0754 li
196.877 48.8752 li
196.881 48.8747 li
198.548 48.675 li
200.214 48.4748 li
200.219 48.4742 li
201.819 48.274 li
201.859 48.2682 li
203.459 48.0021 li
203.466 48.0008 li
205 47.7337 li
205.007 47.7324 li
206.474 47.4658 li
207.941 47.1992 li
207.95 47.1976 li
209.35 46.9305 li
210.749 46.6645 li
210.795 46.6548 li
212.176 46.3251 li
213.491 46.0627 li
213.549 46.0491 li
214.793 45.7219 li
216.035 45.4605 li
216.083 45.449 li
217.35 45.1155 li
216.841 43.1814 li
215.598 43.5085 li
214.356 43.77 li
214.308 43.7814 li
213.07 44.1073 li
211.767 44.3675 li
211.73 44.3754 li
210.353 44.704 li
208.975 44.9658 li
207.575 45.233 li
207.583 45.2314 li
206.116 45.498 li
204.65 45.7647 li
204.657 45.7634 li
203.123 46.0304 li
203.131 46.0292 li
201.551 46.292 li
199.971 46.4897 li
199.976 46.4891 li
198.309 46.6893 li
196.643 46.8889 li
196.647 46.8884 li
194.935 47.0863 li
193.174 47.2166 li
191.327 47.2824 li
191.328 47.2823 li
189.394 47.3487 li
187.494 47.415 li
185.461 47.3487 li
183.424 47.2832 li
181.266 47.0873 li
179.024 46.8237 li
176.742 46.4974 li
174.386 45.9736 li
171.899 45.3845 li
169.289 44.5365 li
166.612 43.5573 li
163.805 42.2514 li
160.796 40.6819 li
157.7 38.7055 li
157.577 38.6269 157.443 38.5775 157.298 38.5576 cv
153.898 38.0913 li
153.805 38.0786 153.705 38.0793 153.613 38.0932 cv
150.101 38.6237 li
146.417 39.0183 li
142.47 39.2153 li
138.272 39.2153 li
133.764 38.8234 li
128.876 37.9107 li
123.669 36.2184 li
117.871 33.4169 li
111.477 28.9154 li
104.274 21.6466 li
100.061 15.3271 li
98.3965 16.4365 li
cp
.49 .49 .49 rgb
f
502.562 336.515 mo
493.962 336.515 li
493.962 337.515 li
502.562 337.515 li
cp
74.3618 337.515 mo
82.9619 337.515 li
82.9619 336.515 li
74.3618 336.515 li
cp
0 0 0 rgb
f
502.562 229.516 mo
493.962 229.516 li
493.962 230.516 li
502.562 230.516 li
cp
74.3618 230.516 mo
82.9619 230.516 li
82.9619 229.516 li
74.3618 229.516 li
cp
f
502.562 122.449 mo
493.962 122.449 li
493.962 123.449 li
502.562 123.449 li
cp
74.3618 123.449 mo
82.9619 123.449 li
82.9619 122.449 li
74.3618 122.449 li
cp
f
502.562 390.116 mo
497.649 390.116 li
497.649 391.116 li
502.562 391.116 li
cp
74.3618 391.116 mo
79.2749 391.116 li
79.2749 390.116 li
74.3618 390.116 li
cp
f
502.562 283.015 mo
497.649 283.015 li
497.649 284.015 li
502.562 284.015 li
cp
74.3618 284.015 mo
79.2749 284.015 li
79.2749 283.015 li
74.3618 283.015 li
cp
f
502.562 176.016 mo
497.649 176.016 li
497.649 177.016 li
502.562 177.016 li
cp
74.3618 177.016 mo
79.2749 177.016 li
79.2749 176.016 li
74.3618 176.016 li
cp
f
502.562 68.9487 mo
497.649 68.9487 li
497.649 69.9487 li
502.562 69.9487 li
cp
74.3618 69.9487 mo
79.2749 69.9487 li
79.2749 68.9487 li
74.3618 68.9487 li
cp
f
74.1123 15.8818 mo
74.1123 20.2153 li
74.6123 20.2153 li
74.6123 15.8818 li
cp
74.6123 444.083 mo
74.6123 439.749 li
74.1123 439.749 li
74.1123 444.083 li
cp
74.6123 444.083 mo
74.6123 15.8818 li
74.1123 15.8818 li
74.1123 444.083 li
cp
74.3623 444.333 mo
502.563 444.333 li
502.563 443.833 li
74.3623 443.833 li
cp
502.813 444.083 mo
502.813 15.8818 li
502.313 15.8818 li
502.313 444.083 li
cp
74.6123 444.083 mo
74.6123 15.8818 li
74.1123 15.8818 li
74.1123 444.083 li
cp
74.3623 16.1318 mo
502.563 16.1318 li
502.563 15.6318 li
74.3623 15.6318 li
cp
74.3623 444.333 mo
502.563 444.333 li
502.563 443.833 li
74.3623 443.833 li
cp
f
188.762 134.616 mo
192.162 137.682 li
195.829 141.416 li
199.029 145.016 li
202.962 148.482 li
208.096 154.215 li
210.429 157.416 li
208.229 158.882 li
204.162 157.616 li
198.896 153.682 li
195.696 150.215 li
191.762 144.149 li
189.563 139.482 li
188.029 135.882 li
188.229 134.616 li
188.762 134.616 li
cp
.47451 .65098 .827451 rgb
ef
188.762 134.616 mo
188.427 134.987 li
191.816 138.043 li
195.463 141.757 li
198.675 145.371 li
202.61 148.837 li
207.706 154.53 li
209.717 157.289 li
208.15 158.334 li
204.393 157.164 li
199.232 153.309 li
196.092 149.907 li
192.2 143.905 li
190.019 139.277 li
188.545 135.818 li
188.656 135.116 li
188.762 135.116 li
188.762 134.616 li
188.427 134.987 li
188.762 134.616 li
188.762 134.116 li
188.229 134.116 li
187.801 134.116 li
187.513 135.946 li
189.106 139.687 li
191.324 144.393 li
195.299 150.523 li
198.56 154.055 li
203.932 158.068 li
208.307 159.43 li
211.14 157.542 li
208.485 153.901 li
203.315 148.126 li
199.382 144.661 li
196.194 141.074 li
192.508 137.321 li
188.954 134.116 li
188.762 134.116 li
188.762 134.616 li
cp
.411765 .588235 .8 rgb
f
184.041 79.0405 mo
184.642 82.7744 li
184.642 82.7774 li
185.302 86.8078 li
185.899 93.4378 li
185.899 93.4356 li
186.566 101.036 li
186.567 101.046 li
187.167 107.179 li
187.17 107.206 li
187.834 112.522 li
188.499 120.036 li
188.499 120.034 li
189.099 126.968 li
189.106 127.025 li
189.768 131.593 li
190.365 139.226 li
190.366 139.235 li
191.033 146.902 li
191.037 146.947 li
191.636 151.464 li
192.299 158.037 li
192.898 165.759 li
192.91 165.852 li
193.574 169.698 li
194.17 174.278 li
194.174 174.3 li
194.84 178.634 li
194.841 178.641 li
195.441 182.374 li
195.48 182.531 li
196.121 184.454 li
196.708 188.107 li
196.709 188.115 li
197.376 192.049 li
197.395 192.136 li
198.051 194.628 li
198.644 198.052 li
198.644 198.057 li
199.31 201.791 li
199.313 201.804 li
199.913 204.937 li
199.926 204.997 li
200.583 207.553 li
201.175 211.177 li
201.178 211.194 li
201.845 214.861 li
201.871 214.97 li
202.46 216.932 li
203.116 219.95 li
203.714 223.007 li
203.744 223.123 li
204.402 225.163 li
204.991 227.387 li
205.654 230.304 li
205.659 230.324 li
206.258 232.724 li
206.28 232.798 li
206.932 234.754 li
207.585 237.56 li
208.182 240.544 li
208.213 240.664 li
208.869 242.631 li
209.46 244.931 li
209.462 244.937 li
210.128 247.47 li
210.15 247.543 li
210.75 249.275 li
210.762 249.307 li
211.407 250.984 li
211.992 253.325 li
212.014 253.399 li
212.68 255.399 li
212.698 255.447 li
213.281 256.939 li
213.932 259.152 li
214.528 261.404 li
214.572 261.533 li
215.223 263.094 li
215.81 264.922 li
215.813 264.932 li
216.48 266.932 li
216.495 266.975 li
217.162 268.707 li
217.176 268.742 li
217.772 270.132 li
218.425 271.764 li
219.017 273.475 li
219.034 273.519 li
219.692 275.164 li
220.284 276.874 li
220.3 276.918 li
220.966 278.586 li
220.976 278.609 li
221.566 279.987 li
222.219 281.746 li
222.813 283.531 li
222.829 283.574 li
223.495 285.307 li
223.51 285.342 li
224.102 286.725 li
224.758 288.431 li
225.354 290.087 li
225.362 290.108 li
226.029 291.842 li
226.039 291.868 li
226.692 293.433 li
227.28 295.198 li
227.381 295.413 li
227.998 296.399 li
228.564 297.847 li
228.585 297.897 li
229.252 299.362 li
229.268 299.395 li
229.868 300.595 li
230.521 301.904 li
231.11 303.276 li
231.118 303.296 li
231.785 304.762 li
231.838 304.862 li
232.408 305.814 li
233.044 307.212 li
233.637 308.66 li
233.7 308.789 li
234.366 309.921 li
234.371 309.929 li
234.926 310.855 li
235.562 312.507 li
235.702 312.758 li
236.311 313.548 li
236.863 314.653 li
237.526 316.045 li
237.588 316.157 li
238.164 317.052 li
238.81 318.28 li
238.838 318.329 li
239.437 319.329 li
239.481 319.397 li
240.117 320.286 li
240.691 321.305 li
240.73 321.369 li
241.383 322.35 li
241.971 323.329 li
242.036 323.424 li
242.651 324.225 li
243.212 325.283 li
243.263 325.37 li
243.89 326.309 li
244.458 327.51 li
244.5 327.59 li
245.167 328.722 li
245.236 328.825 li
245.902 329.692 li
245.952 329.752 li
246.552 330.418 li
246.722 330.568 li
247.181 330.889 li
247.668 331.862 li
247.748 331.995 li
248.414 332.929 li
248.522 333.056 li
249.105 333.638 li
249.655 334.244 li
250.191 335.376 li
250.327 335.588 li
250.995 336.389 li
251.148 336.538 li
251.72 336.982 li
252.21 337.424 li
252.725 338.511 li
252.797 338.637 li
253.463 339.637 li
253.631 339.83 li
254.124 340.268 li
254.707 341.201 li
255.366 342.322 li
255.455 342.449 li
256.024 343.143 li
256.622 344.041 li
257.191 345.243 li
257.248 345.363 257.328 345.47 257.427 345.559 cv
258.021 346.093 li
258.545 346.793 li
259.196 347.77 li
259.206 347.784 li
259.805 348.651 li
259.96 348.827 li
260.555 349.36 li
261.095 350.082 li
261.19 350.209 261.308 350.308 261.45 350.378 cv
261.905 350.605 li
262.355 351.205 li
263.011 352.123 li
263.607 352.984 li
263.718 353.144 263.875 353.27 264.056 353.343 cv
264.511 353.525 li
265.023 354.088 li
265.148 354.203 li
265.747 354.671 li
265.848 354.74 li
266.462 355.108 li
267.014 355.538 li
267.055 355.568 li
267.702 356.02 li
268.281 356.471 li
268.323 356.502 li
268.99 356.968 li
269.129 357.065 269.283 357.123 269.451 357.142 cv
269.732 357.173 li
270.158 357.558 li
270.343 357.689 li
270.731 357.905 li
271.264 358.703 li
271.321 358.78 li
271.921 359.515 li
272.028 359.646 272.168 359.749 272.325 359.811 cv
272.801 360.001 li
273.256 360.456 li
273.448 360.606 li
273.874 360.861 li
274.411 361.881 li
274.502 362.053 274.639 362.193 274.809 362.288 cv
275.287 362.554 li
275.856 363.122 li
275.899 363.162 li
276.499 363.696 li
276.582 363.769 276.687 363.834 276.79 363.875 cv
277.266 364.067 li
277.705 364.505 li
278.338 365.201 li
278.921 365.914 li
279.122 366.101 li
279.742 366.535 li
280.299 367.03 li
280.481 367.191 280.719 367.282 280.963 367.282 cv
281.214 367.282 li
281.521 367.589 li
281.663 367.731 281.837 367.824 282.033 367.863 cv
282.374 367.931 li
282.751 368.351 li
282.871 368.464 li
283.539 368.997 li
283.716 369.11 li
284.262 369.383 li
284.763 369.829 li
284.945 369.991 285.185 370.082 285.429 370.082 cv
285.837 370.082 li
286.211 370.289 li
286.323 370.343 li
286.99 370.61 li
287.107 370.657 287.236 370.682 287.362 370.682 cv
287.611 370.682 li
288.002 370.996 li
288.179 371.137 288.401 371.215 288.628 371.215 cv
288.878 371.215 li
289.271 371.53 li
289.409 371.622 li
290.008 371.956 li
290.098 372.006 290.199 372.043 290.3 372.063 cv
290.616 372.126 li
290.989 372.581 li
291.179 372.813 291.463 372.948 291.763 372.948 cv
292.216 372.948 li
292.621 373.129 li
292.656 373.143 li
293.323 373.411 li
293.5 373.464 li
293.935 373.55 li
294.349 373.872 li
294.525 374.009 294.74 374.082 294.963 374.082 cv
295.628 374.082 li
296.229 374.082 li
296.592 374.082 li
296.94 374.315 li
297.05 374.388 297.17 374.438 297.3 374.464 cv
297.968 374.596 li
298.163 374.616 li
298.763 374.616 li
299.014 374.616 li
299.321 374.922 li
299.415 375.017 299.532 375.094 299.656 375.143 cv
300.323 375.411 li
300.44 375.458 300.569 375.483 300.695 375.483 cv
301.296 375.483 li
301.66 375.483 li
301.999 375.709 li
302.655 376.168 li
302.823 376.285 303.024 376.348 303.229 376.348 cv
303.896 376.348 li
304.495 376.348 li
305.163 376.348 li
305.763 376.348 li
306.429 376.348 li
307.028 376.348 li
307.695 376.348 li
308.296 376.348 li
308.963 376.348 li
309.179 376.348 li
309.559 376.691 li
309.743 376.857 309.981 376.948 310.229 376.948 cv
310.828 376.948 li
311.495 376.948 li
312.096 376.948 li
312.096 374.948 li
311.495 374.948 li
310.828 374.948 li
310.612 374.948 li
310.232 374.605 li
310.048 374.439 309.81 374.348 309.563 374.348 cv
308.963 374.348 li
308.296 374.348 li
307.695 374.348 li
307.028 374.348 li
306.429 374.348 li
305.763 374.348 li
305.163 374.348 li
304.495 374.348 li
303.896 374.348 li
303.543 374.348 li
303.136 374.063 li
303.117 374.05 li
302.517 373.651 li
302.355 373.543 302.158 373.483 301.963 373.483 cv
301.296 373.483 li
300.888 373.483 li
300.591 373.363 li
300.136 372.909 li
299.95 372.722 299.692 372.616 299.429 372.616 cv
298.763 372.616 li
298.261 372.616 li
297.885 372.541 li
297.451 372.251 li
297.285 372.14 297.095 372.083 296.896 372.083 cv
296.229 372.083 li
295.628 372.083 li
295.306 372.083 li
294.976 371.826 li
294.851 371.729 294.713 371.666 294.558 371.635 cv
293.982 371.52 li
293.418 371.294 li
292.836 371.035 li
292.709 370.978 292.568 370.948 292.429 370.948 cv
292.236 370.948 li
291.937 370.582 li
291.79 370.403 291.585 370.28 291.358 370.235 cv
290.844 370.132 li
290.455 369.915 li
289.853 369.434 li
289.676 369.293 289.455 369.215 289.229 369.215 cv
288.979 369.215 li
288.588 368.902 li
288.411 368.76 288.19 368.682 287.963 368.682 cv
287.555 368.682 li
287.125 368.509 li
286.58 368.208 li
286.432 368.126 286.265 368.083 286.096 368.083 cv
285.81 368.083 li
285.493 367.801 li
285.275 367.653 li
284.704 367.368 li
284.184 366.952 li
283.639 366.347 li
283.496 366.188 283.3 366.076 283.091 366.034 cv
282.721 365.961 li
282.335 365.575 li
282.149 365.388 281.891 365.282 281.628 365.282 cv
281.343 365.282 li
281.026 365.001 li
280.936 364.929 li
280.382 364.542 li
279.87 363.915 li
279.835 363.874 li
279.168 363.142 li
279.135 363.107 li
278.535 362.508 li
278.44 362.414 278.325 362.337 278.201 362.288 cv
277.697 362.085 li
277.248 361.686 li
276.602 361.041 li
276.382 360.875 li
276.042 360.685 li
275.512 359.681 li
275.426 359.518 275.301 359.386 275.143 359.291 cv
274.583 358.954 li
274.069 358.441 li
273.975 358.347 273.856 358.268 273.732 358.219 cv
273.306 358.049 li
272.901 357.553 li
272.261 356.593 li
272.173 356.462 272.052 356.35 271.914 356.273 cv
271.413 355.996 li
270.833 355.473 li
270.677 355.333 270.482 355.245 270.275 355.222 cv
269.927 355.182 li
269.49 354.877 li
268.91 354.426 li
268.869 354.396 li
268.222 353.943 li
267.643 353.493 li
267.543 353.424 li
266.929 353.056 li
266.445 352.678 li
265.835 352.009 li
265.733 351.896 265.609 351.811 265.468 351.754 cv
265.08 351.598 li
264.65 350.978 li
264.642 350.966 li
263.977 350.035 li
263.963 350.016 li
263.362 349.215 li
263.268 349.088 263.15 348.99 263.008 348.92 cv
262.554 348.693 li
262.096 348.083 li
261.964 347.938 li
261.383 347.417 li
260.855 346.653 li
260.195 345.661 li
260.163 345.616 li
259.563 344.815 li
259.431 344.67 li
258.913 344.205 li
258.399 343.12 li
258.327 342.993 li
257.661 341.993 li
257.602 341.913 li
257.051 341.241 li
256.425 340.175 li
256.41 340.152 li
255.743 339.085 li
255.559 338.868 li
255.056 338.421 li
254.501 337.589 li
253.932 336.387 li
253.875 336.266 253.796 336.161 253.697 336.072 cv
253.031 335.472 li
252.977 335.426 li
252.462 335.025 li
251.944 334.405 li
251.399 333.254 li
251.236 333.01 li
250.57 332.276 li
250.536 332.24 li
249.994 331.699 li
249.422 330.897 li
248.856 329.768 li
248.783 329.621 248.669 329.49 248.535 329.396 cv
247.962 328.995 li
247.464 328.442 li
246.859 327.655 li
246.247 326.614 li
245.666 325.387 li
245.594 325.26 li
244.955 324.302 li
244.379 323.214 li
244.288 323.073 li
243.657 322.251 li
243.086 321.3 li
243.061 321.261 li
242.415 320.292 li
241.834 319.258 li
241.776 319.167 li
241.132 318.266 li
240.568 317.325 li
239.914 316.082 li
239.869 316.006 li
239.304 315.128 li
238.665 313.786 li
238.657 313.768 li
238.057 312.568 li
237.955 312.405 li
237.376 311.653 li
236.762 310.056 li
236.686 309.9 li
236.086 308.9 li
236.091 308.908 li
235.461 307.837 li
234.888 306.436 li
234.873 306.401 li
234.205 304.934 li
234.153 304.834 li
233.582 303.883 li
232.944 302.478 li
232.348 301.089 li
232.323 301.036 li
231.657 299.701 li
231.064 298.516 li
230.417 297.093 li
229.826 295.584 li
229.743 295.417 li
229.14 294.453 li
228.578 292.766 li
228.552 292.698 li
227.891 291.111 li
227.232 289.4 li
226.636 287.744 li
226.629 287.724 li
225.962 285.989 li
225.948 285.954 li
225.355 284.571 li
224.704 282.878 li
224.111 281.098 li
224.1 281.067 li
223.433 279.268 li
223.414 279.222 li
222.819 277.832 li
222.166 276.198 li
221.574 274.488 li
221.557 274.444 li
220.9 272.798 li
220.307 271.087 li
220.291 271.043 li
219.624 269.377 li
219.614 269.355 li
219.022 267.971 li
218.37 266.278 li
217.713 264.304 li
217.114 262.443 li
217.085 262.364 li
216.444 260.826 li
215.862 258.626 li
215.854 258.6 li
215.188 256.333 li
215.16 256.251 li
214.57 254.742 li
213.923 252.803 li
213.332 250.44 li
213.296 250.323 li
212.635 248.605 li
212.053 246.924 li
211.396 244.428 li
211.397 244.433 li
210.797 242.099 li
210.777 242.032 li
210.13 240.091 li
209.543 237.152 li
209.536 237.121 li
208.869 234.255 li
208.844 234.166 li
208.189 232.202 li
207.602 229.851 li
206.938 226.927 li
206.929 226.892 li
206.329 224.626 li
206.314 224.575 li
205.665 222.565 li
205.077 219.557 li
205.072 219.536 li
204.406 216.47 li
204.387 216.395 li
203.803 214.448 li
203.148 210.846 li
202.549 207.187 li
202.531 207.099 li
201.871 204.53 li
201.278 201.433 li
200.613 197.706 li
200.614 197.711 li
200.014 194.245 li
199.996 194.161 li
199.341 191.671 li
198.681 187.781 li
198.683 187.79 li
198.083 184.057 li
198.044 183.899 li
197.403 181.976 li
196.816 178.323 li
196.817 178.33 li
196.152 174.008 li
195.554 169.419 li
195.548 169.378 li
194.888 165.558 li
194.292 157.871 li
194.29 157.848 li
193.624 151.248 li
193.62 151.217 li
193.023 146.706 li
192.359 139.062 li
192.359 139.07 li
191.759 131.404 li
191.752 131.338 li
191.089 126.767 li
190.491 119.862 li
190.491 119.86 li
189.825 112.327 li
189.821 112.292 li
189.156 106.971 li
188.558 100.851 li
188.559 100.861 li
187.891 93.2607 li
187.891 93.2585 li
187.291 86.5925 li
187.282 86.5205 li
186.616 82.4541 li
186.616 82.457 li
186.016 78.7232 li
184.041 79.0405 li
cp
312.096 376.948 mo
312.763 376.948 li
313.429 376.948 li
314.028 376.948 li
314.695 376.948 li
315.296 376.948 li
315.963 376.948 li
316.563 376.948 li
317.229 376.948 li
317.828 376.948 li
318.495 376.948 li
319.045 376.948 li
319.662 377.01 li
319.763 377.015 li
320.362 377.015 li
321.028 377.015 li
321.628 377.015 li
322.296 377.015 li
322.963 377.015 li
323.563 377.015 li
324.229 377.015 li
324.828 377.015 li
325.495 377.015 li
326.096 377.015 li
326.763 377.015 li
327.362 377.015 li
328.028 377.015 li
328.628 377.015 li
329.296 377.015 li
329.896 377.015 li
330.507 377.015 li
331.052 377.076 li
331.163 377.082 li
331.828 377.082 li
332.495 377.082 li
333.096 377.082 li
333.763 377.082 li
334.362 377.082 li
335.028 377.082 li
335.628 377.082 li
336.296 377.082 li
336.896 377.082 li
337.022 377.082 337.151 377.058 337.268 377.011 cv
337.935 376.743 li
337.969 376.728 li
338.376 376.547 li
338.828 376.547 li
338.997 376.547 339.164 376.504 339.312 376.423 cv
339.913 376.09 li
340.053 375.996 li
340.397 375.722 li
340.585 375.742 li
340.695 375.749 li
341.362 375.749 li
341.644 375.749 341.913 375.63 342.103 375.421 cv
342.555 374.923 li
342.737 374.882 li
343.296 374.882 li
343.407 374.882 343.507 374.866 343.613 374.831 cv
344.212 374.631 li
344.343 374.576 li
344.799 374.348 li
345.163 374.348 li
345.321 374.348 345.469 374.313 345.611 374.242 cv
346.212 373.941 li
346.591 373.815 li
347.096 373.815 li
347.695 373.815 li
348.362 373.815 li
348.472 373.809 li
349.073 373.742 li
349.241 373.724 349.399 373.664 349.537 373.567 cv
349.944 373.282 li
350.229 373.282 li
350.896 373.282 li
351.563 373.282 li
352.163 373.282 li
352.289 373.282 352.418 373.257 352.535 373.21 cv
353.2 372.943 li
353.443 372.804 li
353.814 372.515 li
354.144 372.483 li
354.695 372.483 li
355.362 372.483 li
355.502 372.483 355.642 372.453 355.769 372.396 cv
356.37 372.129 li
356.464 372.087 356.556 372.027 356.633 371.958 cv
357.012 371.616 li
357.179 371.616 li
357.796 371.677 li
357.896 371.682 li
358.495 371.682 li
359.163 371.682 li
359.426 371.682 359.684 371.575 359.87 371.389 cv
360.177 371.082 li
360.429 371.082 li
361.096 371.082 li
361.318 371.082 361.534 371.008 361.71 370.872 cv
362.083 370.581 li
362.413 370.547 li
362.963 370.547 li
363.159 370.528 li
363.824 370.395 li
363.954 370.369 364.071 370.321 364.182 370.247 cv
364.531 370.015 li
364.896 370.015 li
365.495 370.015 li
365.758 370.015 366.015 369.909 366.202 369.723 cv
366.664 369.261 li
366.872 369.215 li
367.429 369.215 li
367.651 369.215 367.867 369.141 368.043 369.004 cv
368.595 368.575 li
368.972 368.348 li
369.296 368.348 li
369.963 368.348 li
370.19 368.348 370.411 368.27 370.588 368.128 cv
370.979 367.815 li
371.229 367.815 li
371.896 367.815 li
372.065 367.815 372.232 367.772 372.38 367.69 cv
372.886 367.409 li
373.31 367.282 li
373.763 367.282 li
373.856 367.282 373.96 367.267 374.049 367.24 cv
374.715 367.041 li
374.915 366.956 li
375.288 366.749 li
375.695 366.749 li
376.296 366.749 li
376.578 366.749 376.846 366.63 377.036 366.421 cv
377.449 365.967 li
377.619 365.948 li
378.229 365.948 li
378.492 365.948 378.749 365.841 378.936 365.655 cv
379.39 365.201 li
379.687 365.082 li
380.163 365.082 li
380.382 365.058 li
380.982 364.923 li
381.09 364.899 381.183 364.862 381.278 364.805 cv
381.706 364.547 li
382.028 364.547 li
382.695 364.547 li
382.918 364.547 383.131 364.474 383.307 364.338 cv
383.681 364.049 li
384.013 364.015 li
384.563 364.015 li
384.689 364.015 384.817 363.99 384.934 363.944 cv
385.6 363.677 li
385.634 363.663 li
386.04 363.483 li
386.495 363.483 li
386.714 363.459 li
387.315 363.324 li
387.5 363.282 387.668 363.19 387.802 363.056 cv
388.176 362.682 li
388.362 362.682 li
389.028 362.682 li
389.31 362.682 389.579 362.563 389.769 362.354 cv
390.222 361.855 li
390.405 361.815 li
390.963 361.815 li
391.103 361.815 391.243 361.785 391.37 361.728 cv
391.952 361.469 li
392.421 361.282 li
392.828 361.282 li
392.927 361.277 li
393.594 361.21 li
393.783 361.192 393.959 361.122 394.109 361.005 cv
394.439 360.749 li
394.763 360.749 li
395.362 360.749 li
395.488 360.749 395.616 360.724 395.733 360.677 cv
396.399 360.412 li
396.436 360.396 li
396.841 360.215 li
397.296 360.215 li
397.896 360.215 li
398.178 360.215 398.445 360.097 398.635 359.889 cv
399.045 359.439 li
399.331 359.409 li
399.339 359.408 li
399.938 359.342 li
400.127 359.321 400.304 359.248 400.453 359.129 cv
401.019 358.676 li
401.308 358.547 li
401.763 358.547 li
401.874 358.547 401.973 358.531 402.078 358.496 cv
402.678 358.297 li
402.81 358.243 li
403.264 358.015 li
403.628 358.015 li
404.296 358.015 li
404.539 358.015 404.778 357.925 404.96 357.763 cv
405.275 357.483 li
405.563 357.483 li
406.163 357.483 li
406.368 357.483 406.571 357.418 406.738 357.301 cv
407.194 356.98 li
407.485 356.948 li
408.096 356.948 li
408.276 356.948 408.456 356.898 408.61 356.805 cv
409.277 356.405 li
409.375 356.338 li
409.705 356.082 li
410.028 356.082 li
410.168 356.082 410.308 356.053 410.436 355.996 cv
411.035 355.728 li
411.252 355.596 li
411.646 355.282 li
411.896 355.282 li
412.563 355.282 li
412.785 355.282 413 355.208 413.176 355.071 cv
413.549 354.781 li
413.878 354.749 li
414.429 354.749 li
414.587 354.749 414.735 354.713 414.876 354.643 cv
415.479 354.341 li
415.857 354.215 li
416.362 354.215 li
416.578 354.192 li
417.179 354.059 li
417.287 354.035 417.384 353.996 417.479 353.939 cv
417.906 353.682 li
418.296 353.682 li
418.896 353.682 li
419.159 353.682 419.416 353.575 419.603 353.389 cv
420.103 352.889 li
420.325 352.815 li
420.828 352.815 li
421.072 352.815 421.31 352.724 421.492 352.563 cv
421.962 352.145 li
422.288 352.015 li
422.695 352.015 li
422.789 352.015 422.893 352 422.983 351.973 cv
423.65 351.773 li
423.846 351.69 li
424.221 351.483 li
424.628 351.483 li
425.229 351.483 li
425.455 351.483 425.677 351.405 425.854 351.263 cv
426.247 350.948 li
426.495 350.948 li
427.163 350.948 li
427.368 350.948 427.568 350.885 427.736 350.767 cv
428.193 350.448 li
428.485 350.414 li
429.096 350.415 li
429.378 350.415 429.65 350.293 429.839 350.084 cv
430.252 349.625 li
430.51 349.547 li
430.963 349.547 li
431.115 349.547 431.273 349.51 431.41 349.442 cv
432.075 349.11 li
432.242 349.005 li
432.571 348.749 li
432.896 348.749 li
433.495 348.749 li
433.722 348.749 433.942 348.672 434.119 348.53 cv
434.513 348.215 li
434.763 348.215 li
434.958 348.196 li
435.624 348.063 li
435.779 348.032 435.918 347.969 436.043 347.872 cv
436.327 347.65 li
436.596 347.677 li
436.695 347.682 li
437.362 347.682 li
437.562 347.682 437.751 347.625 437.917 347.514 cv
438.393 347.197 li
438.775 347.082 li
439.229 347.082 li
439.511 347.082 439.779 346.964 439.969 346.755 cv
440.381 346.3 li
440.55 346.282 li
441.163 346.282 li
441.426 346.282 441.684 346.175 441.87 345.989 cv
442.291 345.568 li
442.575 345.483 li
443.028 345.483 li
443.226 345.463 li
443.893 345.328 li
444.024 345.302 444.139 345.254 444.25 345.18 cv
444.599 344.948 li
444.963 344.948 li
445.103 344.948 445.24 344.919 445.368 344.862 cv
445.968 344.596 li
446.011 344.576 li
446.465 344.348 li
446.896 344.348 li
447.139 344.348 447.378 344.257 447.56 344.095 cv
447.875 343.815 li
448.163 343.815 li
448.763 343.815 li
449.01 343.815 449.248 343.724 449.432 343.558 cv
449.943 343.098 li
450.285 342.984 li
450.891 342.863 li
451.117 342.818 451.323 342.694 451.469 342.515 cv
451.77 342.148 li
451.963 342.148 li
452.179 342.124 li
452.779 341.991 li
452.887 341.967 452.982 341.93 453.077 341.873 cv
453.505 341.616 li
453.828 341.616 li
453.954 341.616 454.083 341.591 454.2 341.544 cv
454.867 341.276 li
454.9 341.263 li
455.4 341.041 li
455.961 340.928 li
456.07 340.906 456.183 340.862 456.278 340.805 cv
456.706 340.547 li
457.028 340.547 li
457.695 340.547 li
457.995 340.547 458.278 340.413 458.469 340.181 cv
458.807 339.769 li
459.062 339.744 li
459.225 339.727 459.382 339.671 459.518 339.58 cv
460.118 339.18 li
460.136 339.168 li
460.543 338.882 li
460.828 338.882 li
461.495 338.882 li
461.664 338.882 461.834 338.838 461.982 338.756 cv
462.487 338.474 li
462.909 338.348 li
463.362 338.348 li
463.456 338.348 463.56 338.333 463.65 338.306 cv
464.316 338.106 li
464.514 338.022 li
464.887 337.815 li
465.296 337.815 li
465.963 337.815 li
466.206 337.815 466.445 337.724 466.627 337.562 cv
466.943 337.282 li
467.229 337.282 li
467.828 337.282 li
468.008 337.282 468.187 337.232 468.342 337.14 cv
469.009 336.74 li
469.11 336.671 li
469.439 336.415 li
469.763 336.415 li
469.979 336.391 li
470.579 336.258 li
470.708 336.229 470.827 336.177 470.936 336.101 cv
471.482 335.718 li
471.943 335.565 li
472 335.544 li
472.668 335.276 li
472.701 335.262 li
473.107 335.082 li
473.563 335.082 li
473.762 335.082 473.951 335.025 474.117 334.915 cv
474.554 334.623 li
475.027 334.527 li
475.198 334.476 li
475.865 334.211 li
475.901 334.196 li
476.4 333.974 li
476.957 333.863 li
477.183 333.818 477.388 333.694 477.535 333.515 cv
477.835 333.148 li
478.028 333.148 li
478.251 333.148 478.466 333.074 478.642 332.938 cv
479.163 332.532 li
479.532 332.348 li
479.896 332.348 li
480.122 332.348 480.343 332.271 480.52 332.129 cv
480.913 331.815 li
481.161 331.815 li
481.287 331.815 481.416 331.79 481.533 331.743 cv
482.2 331.475 li
482.312 331.423 li
482.687 331.215 li
483.096 331.215 li
483.339 331.215 483.578 331.124 483.76 330.963 cv
484.076 330.682 li
484.361 330.682 li
485.028 330.682 li
485.31 330.682 485.583 330.56 485.772 330.351 cv
486.149 329.931 li
486.491 329.863 li
486.592 329.843 486.694 329.805 486.784 329.755 cv
487.383 329.42 li
487.52 329.329 li
487.862 329.055 li
488.049 329.076 li
488.212 329.095 488.381 329.072 488.533 329.011 cv
489.2 328.743 li
489.312 328.69 li
489.687 328.483 li
490.096 328.483 li
490.207 328.483 490.309 328.466 490.414 328.431 cv
491.013 328.23 li
491.144 328.176 li
491.598 327.948 li
491.961 327.948 li
492.188 327.948 492.408 327.87 492.585 327.729 cv
492.978 327.414 li
493.229 327.415 li
493.322 327.415 493.425 327.399 493.515 327.373 cv
494.182 327.173 li
494.322 327.132 494.456 327.056 494.565 326.958 cv
494.945 326.616 li
495.161 326.616 li
495.319 326.616 495.467 326.581 495.609 326.51 cv
496.276 326.176 li
496.442 326.071 li
496.815 325.781 li
497.195 325.744 li
497.297 325.733 497.407 325.704 497.501 325.663 cv
498.085 325.404 li
498.555 325.215 li
498.961 325.215 li
499.188 325.215 499.408 325.138 499.585 324.996 cv
499.978 324.682 li
500.229 324.682 li
500.409 324.682 500.589 324.632 500.743 324.539 cv
501.271 324.222 li
501.713 324.124 li
501.495 323.148 li
500.869 323.928 li
501.535 324.462 li
502.787 322.902 li
502.121 322.368 li
501.884 322.178 501.574 322.106 501.277 322.172 cv
500.678 322.306 li
500.569 322.33 500.476 322.367 500.381 322.424 cv
499.951 322.682 li
499.628 322.682 li
499.401 322.682 499.181 322.759 499.004 322.901 cv
498.61 323.215 li
498.361 323.215 li
498.235 323.215 498.106 323.24 497.989 323.287 cv
497.323 323.555 li
497.29 323.569 li
496.837 323.769 li
496.33 323.82 li
496.14 323.839 495.965 323.909 495.815 324.025 cv
495.292 324.432 li
494.925 324.616 li
494.562 324.616 li
494.314 324.616 494.076 324.707 493.892 324.873 cv
493.394 325.322 li
493.082 325.415 li
492.628 325.415 li
492.401 325.415 492.181 325.492 492.004 325.633 cv
491.61 325.948 li
491.361 325.948 li
491.203 325.948 491.054 325.983 490.913 326.054 cv
490.31 326.356 li
489.932 326.483 li
489.429 326.483 li
489.259 326.483 489.093 326.526 488.945 326.608 cv
488.399 326.91 li
488.022 327.061 li
487.673 327.021 li
487.408 326.992 487.146 327.067 486.937 327.234 cv
486.336 327.715 li
485.946 327.932 li
485.433 328.034 li
485.219 328.077 485.03 328.184 484.884 328.347 cv
484.583 328.682 li
484.361 328.682 li
483.695 328.682 li
483.452 328.682 483.213 328.773 483.031 328.935 cv
482.715 329.215 li
482.429 329.215 li
482.259 329.215 482.093 329.258 481.945 329.34 cv
481.399 329.642 li
480.968 329.815 li
480.562 329.815 li
480.335 329.815 480.114 329.892 479.937 330.034 cv
479.544 330.348 li
479.296 330.348 li
479.138 330.348 478.99 330.383 478.849 330.454 cv
478.181 330.788 li
478.014 330.892 li
477.685 331.148 li
477.361 331.148 li
477.061 331.148 476.777 331.283 476.587 331.515 cv
476.214 331.972 li
475.9 332.034 li
475.69 332.101 li
475.107 332.36 li
474.542 332.585 li
473.964 332.702 li
473.834 332.728 473.719 332.776 473.608 332.85 cv
473.26 333.082 li
472.896 333.083 li
472.756 333.083 472.618 333.112 472.49 333.168 cv
471.907 333.427 li
471.284 333.676 li
470.713 333.866 li
470.454 333.996 li
469.951 334.349 li
469.653 334.415 li
469.096 334.415 li
468.873 334.415 468.657 334.489 468.481 334.626 cv
467.929 335.056 li
467.552 335.282 li
467.229 335.282 li
466.563 335.282 li
466.319 335.282 466.08 335.373 465.898 335.534 cv
465.583 335.815 li
465.296 335.815 li
464.628 335.815 li
464.459 335.815 464.29 335.858 464.142 335.941 cv
463.637 336.221 li
463.215 336.348 li
462.763 336.348 li
462.669 336.348 462.566 336.363 462.477 336.39 cv
461.81 336.589 li
461.609 336.674 li
461.235 336.882 li
460.828 336.882 li
460.229 336.882 li
460.024 336.882 459.823 336.946 459.655 337.063 cv
458.999 337.522 li
458.615 337.778 li
458.197 337.82 li
457.935 337.846 457.69 337.977 457.523 338.181 cv
457.222 338.547 li
457.028 338.547 li
456.429 338.547 li
456.249 338.547 456.068 338.598 455.913 338.69 cv
455.395 339.002 li
454.898 339.102 li
454.691 339.168 li
454.107 339.426 li
453.635 339.616 li
453.229 339.616 li
453.048 339.616 452.869 339.666 452.714 339.758 cv
452.188 340.074 li
451.853 340.148 li
451.296 340.148 li
450.996 340.148 450.712 340.283 450.522 340.515 cv
450.148 340.972 li
449.833 341.034 li
449.712 341.067 li
449.112 341.267 li
448.979 341.311 448.863 341.379 448.76 341.472 cv
448.379 341.815 li
448.163 341.815 li
447.495 341.815 li
447.252 341.815 447.013 341.906 446.831 342.068 cv
446.515 342.348 li
446.229 342.348 li
446.07 342.348 445.922 342.383 445.78 342.454 cv
445.136 342.777 li
444.751 342.948 li
444.296 342.948 li
444.101 342.948 443.903 343.008 443.741 343.116 cv
443.304 343.407 li
442.928 343.483 li
442.429 343.483 li
442.335 343.483 442.232 343.498 442.142 343.525 cv
441.476 343.724 li
441.319 343.771 441.171 343.859 441.056 343.975 cv
440.749 344.282 li
440.495 344.282 li
440.385 344.288 li
439.785 344.354 li
439.543 344.381 439.319 344.495 439.155 344.676 cv
438.786 345.082 li
438.628 345.083 li
438.534 345.083 438.431 345.098 438.341 345.125 cv
437.676 345.324 li
437.578 345.353 437.494 345.393 437.408 345.45 cv
437.059 345.682 li
436.745 345.682 li
436.127 345.621 li
435.873 345.595 435.616 345.67 435.414 345.827 cv
435.001 346.148 li
434.664 346.215 li
434.163 346.215 li
433.936 346.215 433.716 346.292 433.539 346.434 cv
433.145 346.749 li
432.896 346.749 li
432.229 346.749 li
432.006 346.749 431.791 346.822 431.615 346.959 cv
431.093 347.365 li
430.727 347.547 li
430.362 347.547 li
430.269 347.547 430.163 347.563 430.074 347.59 cv
429.407 347.791 li
429.229 347.845 429.076 347.942 428.952 348.079 cv
428.65 348.415 li
428.429 348.415 li
428.316 348.421 li
427.715 348.489 li
427.552 348.508 427.389 348.569 427.255 348.663 cv
426.848 348.948 li
426.495 348.948 li
425.896 348.948 li
425.669 348.948 425.447 349.026 425.27 349.168 cv
424.877 349.483 li
424.628 349.483 li
423.963 349.483 li
423.794 349.483 423.627 349.526 423.479 349.608 cv
422.972 349.888 li
422.548 350.015 li
422.096 350.015 li
421.97 350.015 421.842 350.04 421.725 350.087 cv
421.058 350.353 li
420.947 350.397 420.854 350.455 420.765 350.534 cv
420.448 350.815 li
420.163 350.815 li
420.052 350.815 419.952 350.831 419.847 350.866 cv
419.246 351.066 li
419.096 351.116 418.967 351.196 418.855 351.308 cv
418.481 351.682 li
418.296 351.682 li
417.628 351.682 li
417.448 351.682 417.266 351.733 417.112 351.825 cv
416.587 352.141 li
416.253 352.215 li
415.695 352.215 li
415.584 352.215 415.485 352.231 415.38 352.266 cv
414.78 352.466 li
414.648 352.52 li
414.192 352.749 li
413.828 352.749 li
413.729 352.753 li
413.064 352.82 li
412.875 352.839 412.7 352.909 412.549 353.025 cv
412.22 353.282 li
411.896 353.282 li
411.296 353.282 li
411.069 353.282 410.849 353.359 410.672 353.5 cv
410.104 353.954 li
409.815 354.082 li
409.362 354.083 li
409.14 354.083 408.925 354.156 408.75 354.292 cv
408.197 354.721 li
407.819 354.948 li
407.429 354.948 li
407.317 354.954 li
406.717 355.021 li
406.548 355.04 406.391 355.1 406.253 355.197 cv
405.847 355.483 li
405.563 355.483 li
404.896 355.483 li
404.652 355.483 404.414 355.573 404.232 355.735 cv
403.916 356.015 li
403.628 356.015 li
403.028 356.015 li
402.87 356.015 402.722 356.05 402.581 356.121 cv
401.979 356.422 li
401.601 356.547 li
401.096 356.547 li
400.956 356.547 400.816 356.577 400.689 356.634 cv
400.088 356.901 li
399.871 357.034 li
399.43 357.386 li
399.118 357.421 li
399.126 357.42 li
398.46 357.488 li
398.214 357.513 397.99 357.626 397.823 357.81 cv
397.454 358.215 li
397.296 358.215 li
396.628 358.215 li
396.488 358.215 396.348 358.245 396.22 358.302 cv
395.638 358.562 li
395.17 358.749 li
394.763 358.749 li
394.096 358.749 li
393.873 358.749 393.658 358.822 393.482 358.959 cv
393.109 359.249 li
392.778 359.282 li
392.229 359.282 li
392.102 359.282 391.975 359.306 391.858 359.353 cv
391.192 359.618 li
391.155 359.634 li
390.75 359.815 li
390.296 359.815 li
390.08 359.839 li
389.479 359.971 li
389.275 360.016 389.096 360.121 388.955 360.275 cv
388.586 360.682 li
388.362 360.682 li
387.763 360.682 li
387.499 360.682 387.242 360.788 387.056 360.974 cv
386.594 361.436 li
386.384 361.483 li
385.828 361.483 li
385.688 361.483 385.551 361.512 385.423 361.569 cv
384.841 361.827 li
384.37 362.015 li
383.963 362.015 li
383.862 362.02 li
383.195 362.088 li
383.011 362.106 382.83 362.178 382.684 362.292 cv
382.353 362.547 li
382.028 362.547 li
381.429 362.547 li
381.249 362.547 381.068 362.598 380.913 362.69 cv
380.386 363.007 li
380.052 363.082 li
379.495 363.083 li
379.369 363.083 379.242 363.107 379.125 363.153 cv
378.458 363.419 li
378.334 363.468 378.215 363.547 378.121 363.641 cv
377.814 363.948 li
377.563 363.948 li
377.451 363.954 li
376.851 364.021 li
376.609 364.049 376.387 364.162 376.223 364.342 cv
375.854 364.749 li
375.695 364.749 li
375.028 364.749 li
374.859 364.749 374.69 364.792 374.542 364.875 cv
374.037 365.156 li
373.616 365.282 li
373.163 365.282 li
373.069 365.282 372.964 365.297 372.875 365.324 cv
372.207 365.525 li
372.011 365.608 li
371.637 365.815 li
371.229 365.815 li
370.628 365.815 li
370.401 365.815 370.179 365.893 370.002 366.035 cv
369.611 366.348 li
369.296 366.348 li
368.695 366.348 li
368.515 366.348 368.335 366.398 368.181 366.491 cv
367.514 366.891 li
367.414 366.959 li
367.085 367.215 li
366.763 367.215 li
366.546 367.239 li
365.947 367.372 li
365.761 367.413 365.591 367.506 365.456 367.641 cv
365.081 368.015 li
364.896 368.015 li
364.229 368.015 li
364.033 368.015 363.837 368.074 363.675 368.182 cv
363.238 368.473 li
362.864 368.547 li
362.362 368.547 li
362.26 368.553 li
361.593 368.621 li
361.404 368.64 361.231 368.71 361.081 368.827 cv
360.752 369.083 li
360.429 369.083 li
359.763 369.083 li
359.499 369.083 359.242 369.189 359.056 369.375 cv
358.749 369.682 li
358.495 369.682 li
357.945 369.682 li
357.328 369.621 li
357.229 369.616 li
356.628 369.616 li
356.38 369.616 356.142 369.707 355.958 369.873 cv
355.411 370.366 li
355.15 370.483 li
354.695 370.483 li
354.096 370.483 li
354 370.488 li
353.333 370.552 li
353.143 370.57 352.964 370.642 352.814 370.758 cv
352.325 371.139 li
351.97 371.282 li
351.563 371.282 li
350.896 371.282 li
350.229 371.282 li
349.628 371.282 li
349.423 371.282 349.221 371.346 349.053 371.463 cv
348.598 371.783 li
348.307 371.815 li
347.695 371.815 li
347.096 371.815 li
346.429 371.815 li
346.318 371.815 346.218 371.831 346.112 371.866 cv
345.512 372.066 li
345.38 372.121 li
344.927 372.348 li
344.563 372.348 li
344.404 372.348 344.256 372.383 344.115 372.454 cv
343.511 372.756 li
343.133 372.882 li
342.628 372.882 li
342.412 372.906 li
341.812 373.039 li
341.612 373.083 341.425 373.191 341.288 373.343 cv
340.92 373.749 li
340.75 373.749 li
340.206 373.688 li
339.944 373.659 339.677 373.737 339.471 373.901 cv
338.871 374.381 li
338.57 374.547 li
338.163 374.547 li
338.023 374.547 337.884 374.577 337.756 374.634 cv
337.173 374.894 li
336.702 375.083 li
336.296 375.083 li
335.628 375.083 li
335.028 375.083 li
334.362 375.083 li
333.763 375.083 li
333.096 375.083 li
332.495 375.083 li
331.828 375.083 li
331.219 375.083 li
330.674 375.021 li
330.563 375.015 li
329.896 375.015 li
329.296 375.015 li
328.628 375.015 li
328.028 375.015 li
327.362 375.015 li
326.763 375.015 li
326.096 375.015 li
325.495 375.015 li
324.828 375.015 li
324.229 375.015 li
323.563 375.015 li
322.963 375.015 li
322.296 375.015 li
321.628 375.015 li
321.028 375.015 li
320.362 375.015 li
319.813 375.015 li
319.196 374.953 li
319.096 374.948 li
318.495 374.948 li
317.828 374.948 li
317.229 374.948 li
316.563 374.948 li
315.963 374.948 li
315.296 374.948 li
314.695 374.948 li
314.028 374.948 li
313.429 374.948 li
312.763 374.948 li
312.096 374.948 li
312.096 376.948 li
cp
.223529 .490196 .239216 rgb
f
191.594 79.5014 mo
191.77 80.4857 li
195.707 79.7808 li
195.531 78.7965 li
cp
192.475 84.4231 mo
192.651 85.4075 li
196.589 84.7026 li
196.412 83.7182 li
cp
193.356 89.3449 mo
193.532 90.3292 li
197.47 89.6243 li
197.293 88.64 li
cp
194.237 94.2666 mo
194.413 95.251 li
198.351 94.5461 li
198.175 93.5617 li
cp
195.118 99.1884 mo
195.295 100.173 li
199.232 99.4678 li
199.056 98.4835 li
cp
195.999 104.11 mo
196.176 105.094 li
200.113 104.39 li
199.937 103.405 li
cp
196.881 109.032 mo
197.057 110.016 li
200.994 109.311 li
200.818 108.327 li
cp
197.762 113.954 mo
197.938 114.938 li
201.875 114.233 li
201.699 113.249 li
cp
198.847 118.975 mo
199.092 119.944 li
202.97 118.965 li
202.725 117.996 li
cp
200.071 123.823 mo
200.316 124.792 li
204.194 123.813 li
203.95 122.843 li
cp
201.295 128.671 mo
201.54 129.64 li
205.418 128.661 li
205.174 127.691 li
cp
202.519 133.518 mo
202.764 134.488 li
206.642 133.509 li
206.398 132.539 li
cp
203.743 138.366 mo
203.988 139.336 li
207.867 138.357 li
207.622 137.387 li
cp
204.968 143.214 mo
205.212 144.184 li
209.091 143.204 li
208.846 142.235 li
cp
206.192 148.062 mo
206.436 149.032 li
210.315 148.052 li
210.07 147.083 li
cp
207.416 152.91 mo
207.661 153.879 li
211.539 152.9 li
211.294 151.931 li
cp
208.64 157.758 mo
208.885 158.727 li
212.763 157.748 li
212.518 156.778 li
cp
209.864 162.605 mo
210.109 163.575 li
213.987 162.596 li
213.742 161.626 li
cp
211.088 167.453 mo
211.333 168.423 li
215.211 167.444 li
214.966 166.474 li
cp
212.312 172.301 mo
212.557 173.271 li
216.435 172.291 li
216.19 171.322 li
cp
213.54 177.154 mo
213.788 178.123 li
217.663 177.133 li
217.416 176.164 li
cp
214.778 181.998 mo
215.025 182.967 li
218.901 181.977 li
218.653 181.008 li
cp
216.015 186.843 mo
216.262 187.811 li
220.138 186.822 li
219.891 185.853 li
cp
217.252 191.687 mo
217.5 192.656 li
221.375 191.666 li
221.128 190.697 li
cp
218.49 196.532 mo
218.737 197.5 li
222.613 196.51 li
222.365 195.542 li
cp
219.727 201.376 mo
219.975 202.345 li
223.85 201.355 li
223.603 200.386 li
cp
220.965 206.22 mo
221.212 207.189 li
225.088 206.199 li
224.84 205.23 li
cp
222.202 211.065 mo
222.45 212.034 li
226.325 211.044 li
226.078 210.075 li
cp
223.636 215.971 mo
223.938 216.925 li
227.751 215.716 li
227.449 214.763 li
cp
225.147 220.738 mo
225.449 221.691 li
229.262 220.482 li
228.96 219.529 li
cp
226.658 225.504 mo
226.96 226.457 li
230.773 225.248 li
230.471 224.295 li
cp
228.169 230.27 mo
228.471 231.223 li
232.284 230.015 li
231.982 229.061 li
cp
229.68 235.036 mo
229.982 235.99 li
233.795 234.781 li
233.493 233.828 li
cp
231.191 239.803 mo
231.493 240.756 li
235.306 239.547 li
235.004 238.594 li
cp
233.012 244.736 mo
233.439 245.64 li
237.055 243.931 li
236.628 243.027 li
cp
235.148 249.257 mo
235.575 250.161 li
239.192 248.452 li
238.764 247.548 li
cp
237.284 253.777 mo
237.711 254.681 li
241.328 252.973 li
240.901 252.068 li
cp
239.42 258.298 mo
239.847 259.202 li
243.464 257.493 li
243.037 256.589 li
cp
241.556 262.819 mo
241.983 263.723 li
245.6 262.014 li
245.173 261.11 li
cp
243.976 267.393 mo
244.483 268.255 li
247.931 266.228 li
247.425 265.366 li
cp
246.51 271.703 mo
247.017 272.565 li
250.465 270.538 li
249.958 269.676 li
cp
249.044 276.014 mo
249.551 276.876 li
252.999 274.849 li
252.492 273.987 li
cp
251.578 280.324 mo
252.085 281.186 li
255.533 279.159 li
255.026 278.297 li
cp
254.112 284.634 mo
254.619 285.496 li
258.067 283.469 li
257.56 282.607 li
cp
257.514 288.857 mo
258.202 289.584 li
261.107 286.834 li
260.419 286.108 li
cp
260.951 292.489 mo
261.639 293.215 li
264.544 290.465 li
263.856 289.739 li
cp
264.388 296.12 mo
265.076 296.846 li
267.981 294.096 li
267.293 293.37 li
cp
267.826 299.751 mo
268.513 300.478 li
271.418 297.728 li
270.731 297.002 li
cp
271.787 303.272 mo
272.58 303.881 li
275.016 300.709 li
274.223 300.1 li
cp
275.753 306.317 mo
276.546 306.926 li
278.982 303.754 li
278.189 303.145 li
cp
279.719 309.362 mo
279.944 309.535 li
280.158 309.678 li
280.777 310.038 li
282.786 306.579 li
282.278 306.284 li
282.155 306.19 li
279.719 309.362 li
cp
284.236 312.047 mo
285.101 312.549 li
287.11 309.09 li
286.245 308.587 li
cp
288.56 314.557 mo
289.425 315.059 li
291.434 311.6 li
290.569 311.098 li
cp
293.572 316.659 mo
294.53 316.946 li
295.678 313.114 li
294.72 312.827 li
cp
298.362 318.094 mo
299.32 318.381 li
300.468 314.55 li
299.51 314.263 li
cp
303.151 319.529 mo
304.109 319.817 li
305.257 315.985 li
304.299 315.698 li
cp
307.941 320.965 mo
308.899 321.252 li
310.047 317.42 li
309.089 317.133 li
cp
313.278 321.996 mo
314.277 322.052 li
314.499 318.058 li
313.501 318.002 li
cp
318.27 322.274 mo
319.269 322.33 li
319.492 318.336 li
318.493 318.281 li
cp
323.263 322.553 mo
324.261 322.608 li
324.484 318.615 li
323.485 318.559 li
cp
328.255 322.831 mo
329.118 322.879 li
329.331 322.88 li
329.466 322.873 li
329.264 318.878 li
329.235 318.879 li
328.478 318.837 li
328.255 322.831 li
cp
333.461 322.67 mo
334.46 322.62 li
334.257 318.625 li
333.258 318.676 li
cp
338.454 322.417 mo
339.453 322.367 li
339.251 318.372 li
338.252 318.422 li
cp
343.448 322.164 mo
344.447 322.114 li
344.244 318.119 li
343.246 318.169 li
cp
348.442 321.911 mo
349.063 321.88 li
349.291 321.855 li
349.663 321.793 li
349.006 317.847 li
348.746 317.891 li
348.239 317.916 li
348.442 321.911 li
cp
353.609 321.135 mo
354.595 320.971 li
353.938 317.025 li
352.951 317.19 li
cp
358.541 320.313 mo
359.527 320.149 li
358.87 316.203 li
357.883 316.368 li
cp
363.473 319.491 mo
364.459 319.327 li
363.801 315.381 li
362.815 315.546 li
cp
368.405 318.669 mo
369.391 318.505 li
368.733 314.559 li
367.747 314.724 li
cp
373.473 317.785 mo
374.445 317.549 li
373.501 313.662 li
372.529 313.898 li
cp
378.332 316.605 mo
379.304 316.369 li
378.36 312.482 li
377.388 312.718 li
cp
383.191 315.425 mo
384.162 315.189 li
383.218 311.302 li
382.246 311.538 li
cp
388.049 314.245 mo
389.021 314.009 li
388.077 310.122 li
387.105 310.358 li
cp
392.908 313.064 mo
393.88 312.828 li
392.936 308.941 li
391.964 309.177 li
cp
397.767 311.884 mo
398.739 311.648 li
397.794 307.761 li
396.823 307.997 li
cp
402.625 310.704 mo
403.597 310.468 li
402.653 306.581 li
401.681 306.817 li
cp
407.609 309.352 mo
408.557 309.036 li
407.292 305.241 li
406.344 305.558 li
cp
412.352 307.771 mo
413.301 307.455 li
412.036 303.66 li
411.087 303.977 li
cp
417.095 306.19 mo
418.044 305.874 li
416.779 302.079 li
415.83 302.395 li
cp
421.839 304.609 mo
422.788 304.293 li
421.523 300.498 li
420.574 300.814 li
cp
426.582 303.028 mo
427.531 302.712 li
426.266 298.917 li
425.317 299.233 li
cp
431.326 301.447 mo
432.274 301.13 li
431.009 297.336 li
430.061 297.652 li
cp
436.069 299.866 mo
437.018 299.549 li
435.753 295.755 li
434.804 296.071 li
cp
440.812 298.284 mo
441.761 297.968 li
440.496 294.173 li
439.548 294.49 li
cp
445.558 296.689 mo
446.506 296.37 li
445.228 292.579 li
444.28 292.898 li
cp
450.296 295.092 mo
451.244 294.772 li
449.966 290.982 li
449.019 291.301 li
cp
455.034 293.495 mo
455.982 293.175 li
454.704 289.385 li
453.757 289.704 li
cp
459.772 291.898 mo
460.72 291.578 li
459.442 287.788 li
458.495 288.107 li
cp
464.51 290.3 mo
465.458 289.981 li
464.18 286.191 li
463.233 286.51 li
cp
469.262 288.602 mo
470.202 288.261 li
468.837 284.501 li
467.897 284.842 li
cp
473.962 286.896 mo
474.902 286.555 li
473.537 282.795 li
472.597 283.136 li
cp
478.662 285.191 mo
479.602 284.85 li
478.238 281.09 li
477.298 281.431 li
cp
483.362 283.485 mo
484.302 283.144 li
482.938 279.384 li
481.998 279.725 li
cp
488.062 281.78 mo
489.002 281.439 li
487.638 277.679 li
486.698 278.02 li
cp
492.762 280.075 mo
493.702 279.733 li
492.338 275.973 li
491.398 276.314 li
cp
497.393 278.502 mo
498.35 278.212 li
497.19 274.384 li
496.233 274.674 li
cp
.92549 .117647 .141176 rgb
f
168.801 71.0757 mo
168.998 72.0561 li
172.92 71.269 li
172.723 70.2886 li
cp
169.785 75.9779 mo
169.982 76.9584 li
173.904 76.1713 li
173.707 75.1908 li
cp
170.769 80.8802 mo
170.966 81.8606 li
174.888 81.0735 li
174.691 80.0931 li
cp
171.753 85.7824 mo
171.95 86.7628 li
175.872 85.9757 li
175.675 84.9953 li
cp
172.73 90.667 mo
172.918 91.6492 li
176.847 90.8987 li
176.659 89.9164 li
cp
173.668 95.5782 mo
173.856 96.5604 li
177.785 95.8098 li
177.597 94.8276 li
cp
174.606 100.489 mo
174.794 101.472 li
178.723 100.721 li
178.535 99.7388 li
cp
175.666 105.444 mo
175.887 106.419 li
179.788 105.537 li
179.568 104.562 li
cp
176.769 110.321 mo
176.989 111.296 li
180.891 110.414 li
180.67 109.439 li
cp
177.847 115.18 mo
178.057 116.158 li
181.968 115.32 li
181.758 114.342 li
cp
178.895 120.069 mo
179.104 121.047 li
183.016 120.209 li
182.806 119.231 li
cp
179.943 124.958 mo
180.152 125.936 li
184.063 125.098 li
183.854 124.12 li
cp
180.99 129.847 mo
181.2 130.825 li
185.111 129.987 li
184.901 129.009 li
cp
182.038 134.736 mo
182.247 135.714 li
186.159 134.876 li
185.949 133.898 li
cp
183.312 139.759 mo
183.612 140.713 li
187.428 139.512 li
187.128 138.558 li
cp
184.814 144.529 mo
185.114 145.482 li
188.929 144.281 li
188.629 143.327 li
cp
186.315 149.298 mo
186.615 150.252 li
190.431 149.05 li
190.131 148.097 li
cp
187.817 154.067 mo
188.117 155.021 li
191.932 153.82 li
191.632 152.866 li
cp
189.386 158.854 mo
189.705 159.802 li
193.497 158.528 li
193.178 157.58 li
cp
190.979 163.594 mo
191.12 164.015 li
191.255 164.473 li
195.093 163.349 li
194.948 162.853 li
194.925 162.779 li
194.771 162.32 li
190.979 163.594 li
cp
192.379 168.312 mo
192.66 169.271 li
196.499 168.147 li
196.218 167.188 li
cp
193.784 173.11 mo
193.834 173.28 li
194.024 174.016 li
197.897 173.013 li
197.698 172.247 li
197.682 172.186 li
197.623 171.986 li
193.784 173.11 li
cp
195.027 177.888 mo
195.278 178.856 li
199.15 177.853 li
198.899 176.885 li
cp
196.28 182.728 mo
196.531 183.696 li
200.403 182.694 li
200.153 181.726 li
cp
197.534 187.569 mo
197.693 188.183 li
197.706 188.232 li
197.806 188.583 li
201.652 187.484 li
201.559 187.156 li
201.406 186.566 li
197.534 187.569 li
cp
198.905 192.429 mo
199.18 193.39 li
203.026 192.291 li
202.751 191.33 li
cp
200.279 197.236 mo
200.553 198.198 li
204.399 197.099 li
204.125 196.137 li
cp
201.652 202.044 mo
201.927 203.005 li
205.773 201.907 li
205.498 200.945 li
cp
203.266 206.978 mo
203.633 207.908 li
207.353 206.436 li
206.985 205.506 li
cp
205.105 211.627 mo
205.473 212.557 li
209.193 211.085 li
208.825 210.156 li
cp
206.945 216.277 mo
207.313 217.206 li
211.032 215.735 li
210.664 214.805 li
cp
208.785 220.926 mo
209.153 221.856 li
212.872 220.384 li
212.504 219.454 li
cp
210.625 225.575 mo
210.992 226.505 li
214.712 225.033 li
214.344 224.103 li
cp
212.764 230.255 mo
213.2 231.155 li
216.799 229.411 li
216.363 228.511 li
cp
214.944 234.755 mo
215.38 235.655 li
218.979 233.911 li
218.543 233.011 li
cp
217.124 239.255 mo
217.56 240.154 li
221.159 238.41 li
220.723 237.511 li
cp
219.448 243.806 mo
219.934 244.68 li
223.43 242.736 li
222.944 241.862 li
cp
221.878 248.176 mo
222.364 249.05 li
225.86 247.106 li
225.374 246.232 li
cp
224.307 252.546 mo
224.793 253.42 li
228.289 251.476 li
227.803 250.602 li
cp
226.829 257.005 mo
227.368 257.848 li
230.737 255.691 li
230.198 254.849 li
cp
229.524 261.217 mo
230.063 262.059 li
233.432 259.903 li
232.893 259.061 li
cp
232.219 265.428 mo
232.758 266.27 li
236.127 264.114 li
235.588 263.272 li
cp
235.509 269.555 mo
236.164 270.311 li
239.188 267.693 li
238.533 266.937 li
cp
238.782 273.335 mo
239.437 274.091 li
242.461 271.473 li
241.806 270.717 li
cp
242.655 277.399 mo
243.516 277.909 li
245.553 274.466 li
244.693 273.957 li
cp
246.958 279.946 mo
247.818 280.456 li
249.856 277.014 li
248.995 276.504 li
cp
251.26 282.493 mo
252.121 283.003 li
254.158 279.561 li
253.298 279.051 li
cp
255.659 285.013 mo
256.537 285.492 li
258.453 281.98 li
257.575 281.501 li
cp
260.049 287.407 mo
260.927 287.886 li
262.842 284.375 li
261.964 283.896 li
cp
264.532 289.831 mo
265.432 290.267 li
267.175 286.667 li
266.275 286.231 li
cp
269.033 292.01 mo
269.933 292.446 li
271.675 288.845 li
270.775 288.409 li
cp
273.87 293.942 mo
274.812 294.278 li
276.156 290.511 li
275.214 290.175 li
cp
278.58 295.623 mo
279.521 295.959 li
280.866 292.191 li
279.924 291.855 li
cp
.219608 .32549 .639216 rgb
f
101.772 16.0245 mo
102.628 21.9631 li
104.608 21.6778 li
103.752 15.7392 li
cp
103.499 27.9032 mo
104.376 33.8387 li
106.355 33.5463 li
105.478 27.6108 li
cp
105.268 39.7933 mo
106.27 45.709 li
108.242 45.375 li
107.24 39.4592 li
cp
107.272 51.6247 mo
108.275 57.5404 li
110.246 57.2064 li
109.244 51.2907 li
cp
109.396 63.4651 mo
110.578 69.3475 li
112.539 68.9534 li
111.357 63.071 li
cp
111.787 75.2372 mo
113.042 81.1044 li
114.998 80.6859 li
113.742 74.8187 li
cp
114.297 86.9716 mo
114.851 89.5574 li
114.86 89.5958 li
115.691 92.8469 li
117.628 92.3516 li
116.802 89.1196 li
116.253 86.5531 li
114.297 86.9716 li
cp
117.284 98.6643 mo
118.958 104.426 li
120.878 103.868 li
119.205 98.1064 li
cp
120.808 110.195 mo
122.828 115.844 li
124.712 115.171 li
122.691 109.521 li
cp
125.034 121.507 mo
127.504 126.974 li
129.327 126.151 li
126.856 120.683 li
cp
130.126 132.445 mo
132.973 137.727 li
134.733 136.778 li
131.886 131.496 li
cp
135.969 142.966 mo
138.833 147.854 li
138.935 147.997 li
139.152 148.252 li
140.674 146.954 li
140.514 146.766 li
137.694 141.954 li
135.969 142.966 li
cp
143.046 152.817 mo
144.735 154.797 li
144.852 154.913 li
147.448 157.102 li
148.738 155.573 li
146.203 153.437 li
144.567 151.519 li
143.046 152.817 li
cp
152.036 160.969 mo
152.918 161.713 li
153.105 161.837 li
157.413 164.057 li
158.329 162.279 li
154.121 160.111 li
153.325 159.44 li
152.036 160.969 li
cp
163.082 166.394 mo
167.507 167.895 li
167.682 167.937 li
168.995 168.132 li
169.288 166.154 li
168.064 165.972 li
163.724 164.5 li
163.082 166.394 li
cp
174.798 169.172 mo
180.619 170.627 li
181.104 168.686 li
175.283 167.231 li
cp
185.562 172.974 mo
190.27 176.693 li
191.51 175.124 li
186.802 171.404 li
cp
195.335 180.07 mo
197.349 181.386 li
197.444 181.44 li
200.65 183.065 li
201.555 181.281 li
198.397 179.681 li
196.429 178.396 li
195.335 180.07 li
cp
205.782 186.012 mo
206.642 186.536 li
206.886 186.643 li
211.685 188.022 li
212.237 186.099 li
207.568 184.758 li
206.823 184.304 li
205.782 186.012 li
cp
217.2 190.111 mo
219.126 190.877 li
219.249 190.917 li
223.053 191.888 li
223.548 189.95 li
219.806 188.995 li
217.939 188.252 li
217.2 190.111 li
cp
228.876 193.358 mo
232.72 194.318 li
232.962 194.348 li
235 194.348 li
235 192.348 li
233.085 192.348 li
229.361 191.417 li
228.876 193.358 li
cp
241 194.348 mo
241.496 194.348 li
241.496 192.348 li
241 192.348 li
cp
.92549 .117647 .141176 rgb
f
73.5429 16.7886 mo
76.9824 21.7049 li
78.6211 20.5584 li
75.1817 15.6421 li
cp
80.4218 26.6212 mo
83.8613 31.5375 li
85.5001 30.391 li
82.0606 25.4747 li
cp
87.9119 36.2231 mo
92.4013 40.2038 li
93.7282 38.7073 li
89.2388 34.7267 li
cp
96.8907 44.1844 mo
101.38 48.165 li
102.707 46.6686 li
98.2176 42.6879 li
cp
106.496 51.6272 mo
111.71 54.5963 li
112.699 52.8583 li
107.486 49.8892 li
cp
116.924 57.5653 mo
117.515 57.9024 li
121.388 61.255 li
122.697 59.7428 li
118.75 56.326 li
118.591 56.2131 li
117.913 55.8274 li
116.924 57.5654 li
cp
125.489 65.0623 mo
128.313 70.3563 li
130.078 69.4151 li
127.254 64.1211 li
cp
131.111 75.6212 mo
133.733 81.018 li
135.532 80.144 li
132.91 74.7472 li
cp
136.355 86.4148 mo
138.977 91.8115 li
140.776 90.9376 li
138.154 85.5408 li
cp
141.425 97.2566 mo
143.884 102.729 li
145.709 101.909 li
143.249 96.4367 li
cp
146.344 108.202 mo
146.984 109.625 li
147.031 109.717 li
149.26 113.557 li
150.99 112.552 li
148.787 108.758 li
148.168 107.382 li
146.344 108.202 li
cp
153.238 118.699 mo
156.441 119.7 li
158.016 121.203 li
159.397 119.756 li
157.653 118.092 li
157.543 117.987 157.406 117.906 157.261 117.861 cv
153.835 116.79 li
153.238 118.699 li
cp
162.552 125.403 mo
167.597 128.651 li
168.68 126.969 li
163.635 123.722 li
cp
172.643 131.899 mo
172.887 132.056 li
172.934 132.084 li
177.895 134.909 li
178.884 133.171 li
173.947 130.36 li
173.725 130.217 li
172.643 131.899 li
cp
182.972 137.88 mo
187.813 141.424 li
188.994 139.81 li
184.153 136.266 li
cp
193.346 144.266 mo
198.975 146.344 li
199.667 144.467 li
194.038 142.39 li
cp
204.877 147.988 mo
210.744 149.247 li
211.164 147.292 li
205.297 146.032 li
cp
216.972 149.733 mo
222.933 149.055 li
222.707 147.068 li
216.746 147.746 li
cp
228.911 148.311 mo
234.854 147.487 li
234.58 145.506 li
228.637 146.33 li
cp
240.798 146.663 mo
246.5 145.872 li
246.556 145.863 li
246.794 145.816 li
246.408 143.854 li
246.197 143.895 li
240.523 144.682 li
240.798 146.663 li
cp
252.681 144.656 mo
258.568 143.495 li
258.181 141.533 li
252.294 142.693 li
cp
.721569 .321569 .619608 rgb
f
74.1123 15.8818 mo
74.1123 20.2153 li
74.6123 20.2153 li
74.6123 15.8818 li
0 0 0 rgb
f
180.899 135.499 mo
188.099 219.633 li
188.13 219.807 li
189.052 223.234 li
198.978 277.863 li
198.976 277.854 li
200.776 288.32 li
200.8 288.426 li
208 313.559 li
208.04 313.672 li
227.04 358.804 li
227.086 358.914 227.156 359.021 227.238 359.107 cv
247.972 380.841 li
248.169 381.001 li
263.569 390.534 li
263.756 390.625 li
278.155 395.824 li
278.307 395.865 li
291.908 398.466 li
292.164 398.482 li
317.43 396.748 li
317.615 396.718 li
367.282 383.718 li
367.372 383.689 li
424.294 362.826 li
480.283 343.764 li
480.287 343.762 li
502.888 335.961 li
502.235 334.071 li
479.635 341.872 li
479.639 341.87 li
423.639 360.937 li
423.617 360.944 li
366.729 381.795 li
317.199 394.759 li
292.156 396.477 li
278.761 393.916 li
264.533 388.779 li
249.33 379.368 li
228.812 357.859 li
209.906 312.951 li
202.738 287.928 li
200.947 277.515 li
200.945 277.505 li
191.013 222.835 li
190.994 222.754 li
190.084 219.373 li
182.891 135.329 li
180.899 135.499 li
cp
.92549 .121569 .196078 rgb
f
237.164 15.9488 mo
237.498 20.8149 li
237.5 20.8413 li
244.633 95.7749 li
244.639 95.8241 li
251.772 144.89 li
251.782 144.947 li
258.916 179.88 li
258.931 179.945 li
266.064 205.879 li
266.087 205.953 li
273.22 225.753 li
273.253 225.833 li
280.388 241.299 li
280.433 241.386 li
287.633 253.657 li
287.685 253.737 li
294.818 263.602 li
294.884 263.685 li
302.017 271.62 li
302.097 271.7 li
309.232 278.032 li
309.316 278.099 li
316.449 283.166 li
316.539 283.223 li
323.672 287.223 li
323.766 287.27 li
330.901 290.335 li
330.985 290.367 li
338.118 292.701 li
338.201 292.724 li
345.334 294.39 li
345.414 294.405 li
352.547 295.473 li
352.611 295.48 li
359.744 296.081 li
359.791 296.084 li
366.923 296.35 li
366.989 296.351 li
374.124 296.15 li
374.152 296.149 li
381.285 295.749 li
381.331 295.745 li
388.464 295.011 li
388.5 295.006 li
395.634 294.006 li
395.652 294.004 li
402.785 292.871 li
402.811 292.866 li
409.944 291.534 li
409.971 291.529 li
417.106 289.994 li
417.123 289.99 li
424.256 288.325 li
424.265 288.323 li
431.397 286.588 li
431.414 286.584 li
438.549 284.718 li
438.558 284.716 li
445.69 282.782 li
445.707 282.777 li
452.84 280.711 li
452.848 280.708 li
459.982 278.575 li
459.99 278.572 li
467.123 276.372 li
474.257 274.173 li
474.266 274.17 li
481.398 271.905 li
481.407 271.902 li
488.54 269.567 li
488.547 269.564 li
495.681 267.165 li
495.679 267.166 li
502.879 264.766 li
502.563 263.817 li
502.563 264.817 li
502.628 264.817 li
502.628 262.817 li
502.563 262.817 li
502.452 262.817 502.351 262.833 502.246 262.868 cv
495.046 265.269 li
495.043 265.269 li
487.91 267.669 li
487.917 267.666 li
480.785 270.001 li
480.793 269.999 li
473.66 272.264 li
473.668 272.262 li
466.534 274.461 li
459.401 276.661 li
459.409 276.659 li
452.275 278.792 li
452.283 278.79 li
445.158 280.854 li
438.034 282.785 li
438.043 282.783 li
430.915 284.647 li
423.792 286.379 li
423.801 286.377 li
416.676 288.04 li
409.565 289.571 li
402.458 290.898 li
395.346 292.027 li
388.241 293.023 li
381.149 293.753 li
374.054 294.152 li
366.966 294.351 li
359.888 294.086 li
352.811 293.49 li
345.75 292.433 li
338.698 290.787 li
331.649 288.48 li
324.604 285.453 li
317.564 281.505 li
310.519 276.5 li
303.467 270.241 li
296.407 262.387 li
289.333 252.604 li
282.183 240.417 li
275.087 225.034 li
267.982 205.311 li
260.868 179.447 li
253.747 144.574 li
246.622 95.5612 li
239.492 20.665 li
239.16 15.812 li
237.165 15.9488 li
237.164 15.9488 li
.4 .4 .4 rgb
f
152.846 70.3353 mo
158.713 100.935 li
158.722 100.981 li
166.056 131.514 li
166.087 131.62 li
176.554 160.686 li
176.564 160.713 li
195.897 209.913 li
195.916 209.958 li
206.65 233.824 li
206.699 233.932 206.768 234.032 206.851 234.117 cv
225.251 252.717 li
225.398 252.839 li
240.731 263.31 li
240.963 263.427 li
257.829 269.36 li
257.934 269.397 258.045 269.416 258.156 269.416 cv
272.623 269.484 li
272.633 267.484 li
258.334 267.417 li
241.751 261.584 li
226.605 251.242 li
208.4 232.839 li
197.75 209.159 li
178.431 159.995 li
167.988 130.994 li
160.673 100.536 li
154.81 69.9587 li
152.846 70.3353 li
cp
0 0 0 rgb
f
106.534 16.3289 mo
106.656 16.5713 li
111.378 27.4135 li
111.404 27.4691 li
116.138 36.7352 li
116.164 36.7824 li
120.963 45.049 li
120.966 45.053 li
125.7 53.1199 li
125.721 53.1545 li
130.521 60.6213 li
130.546 60.6595 li
135.279 67.3255 li
135.316 67.3745 li
140.05 73.2417 li
140.093 73.2921 li
144.883 78.4804 li
149.606 83.9349 li
149.66 83.9924 li
154.393 88.6589 li
154.436 88.6993 li
159.211 92.8776 li
163.857 97.523 li
168.496 104.253 li
173.248 113.954 li
177.967 125.654 li
177.982 125.69 li
182.716 136.224 li
182.734 136.261 li
187.534 145.861 li
187.568 145.923 li
192.301 153.923 li
192.359 154.01 li
197.149 160.463 li
201.871 167.314 li
201.913 167.37 li
206.646 173.304 li
206.716 173.382 li
211.517 178.249 li
211.609 178.332 li
216.343 182.065 li
216.41 182.114 li
221.08 185.206 li
225.825 189.489 li
225.869 189.526 li
230.602 193.327 li
230.623 193.343 li
235.357 196.943 li
235.369 196.952 li
240.065 200.409 li
244.716 206.175 li
244.773 206.239 li
249.507 211.173 li
249.601 211.259 li
254.401 215.125 li
254.484 215.186 li
259.192 218.237 li
263.969 221.752 li
263.978 221.759 li
268.713 225.159 li
268.778 225.202 li
273.51 228.069 li
273.562 228.098 li
278.361 230.631 li
278.461 230.677 li
283.195 232.544 li
283.218 232.553 li
287.952 234.286 li
288.053 234.317 li
292.853 235.517 li
292.929 235.533 li
297.661 236.333 li
297.688 236.337 li
302.422 237.004 li
302.438 237.006 li
307.237 237.606 li
307.347 237.614 li
312.082 237.68 li
312.124 237.68 li
316.856 237.546 li
316.884 237.545 li
321.683 237.279 li
321.74 237.274 li
326.473 236.74 li
326.487 236.739 li
331.221 236.139 li
331.26 236.133 li
336.06 235.333 li
336.076 235.33 li
340.808 234.464 li
340.832 234.459 li
345.607 233.465 li
350.314 232.735 li
350.354 232.728 li
355.089 231.795 li
355.086 231.796 li
359.886 230.862 li
359.915 230.856 li
364.648 229.79 li
364.662 229.786 li
369.394 228.653 li
369.416 228.647 li
374.216 227.381 li
374.219 227.38 li
378.954 226.113 li
378.966 226.11 li
383.7 224.777 li
383.709 224.774 li
388.508 223.374 li
388.525 223.369 li
393.257 221.902 li
397.991 220.436 li
398 220.433 li
402.738 218.919 li
407.409 218.064 li
407.545 218.029 li
412.345 216.429 li
412.349 216.428 li
417.081 214.828 li
421.815 213.228 li
421.811 213.229 li
426.612 211.629 li
426.628 211.623 li
431.36 209.957 li
436.093 208.29 li
436.089 208.291 li
440.889 206.625 li
440.893 206.623 li
445.628 204.957 li
450.361 203.29 li
450.368 203.287 li
455.168 201.554 li
455.16 201.557 li
459.894 199.89 li
459.905 199.886 li
464.64 198.153 li
464.636 198.154 li
469.435 196.421 li
469.44 196.419 li
474.172 194.686 li
474.168 194.687 li
478.967 192.955 li
478.972 192.953 li
483.706 191.219 li
488.44 189.486 li
488.435 189.487 li
493.235 187.755 li
493.239 187.753 li
497.972 186.02 li
497.983 186.015 li
502.718 184.215 li
502.007 182.346 li
497.28 184.143 li
492.552 185.875 li
492.556 185.873 li
487.756 187.606 li
487.752 187.608 li
483.018 189.341 li
478.284 191.075 li
478.288 191.074 li
473.489 192.806 li
473.484 192.808 li
468.752 194.542 li
468.756 194.54 li
463.956 196.273 li
463.952 196.275 li
459.223 198.006 li
454.496 199.671 li
454.489 199.673 li
449.689 201.406 li
449.696 201.404 li
444.964 203.071 li
440.23 204.737 li
440.234 204.735 li
435.433 206.402 li
435.428 206.404 li
430.696 208.071 li
425.972 209.734 li
421.179 211.332 li
421.175 211.333 li
416.441 212.933 li
411.708 214.533 li
411.712 214.532 li
406.979 216.11 li
402.315 216.963 li
402.191 216.994 li
397.391 218.528 li
397.399 218.525 li
392.665 219.992 li
387.941 221.456 li
383.149 222.854 li
383.158 222.851 li
378.43 224.183 li
373.702 225.448 li
373.706 225.447 li
368.917 226.71 li
364.201 227.84 li
359.49 228.902 li
354.705 229.832 li
354.702 229.833 li
349.988 230.762 li
345.275 231.492 li
345.225 231.501 li
340.436 232.499 li
335.723 233.362 li
330.951 234.157 li
326.243 234.754 li
321.544 235.283 li
316.786 235.548 li
312.088 235.68 li
307.431 235.615 li
302.693 235.023 li
297.982 234.358 li
293.3 233.567 li
288.59 232.389 li
283.917 230.679 li
279.246 228.837 li
274.521 226.343 li
269.847 223.511 li
265.151 220.139 li
260.353 216.609 li
260.305 216.575 li
255.615 213.535 li
250.906 209.742 li
246.246 204.886 li
241.54 199.052 li
241.355 198.875 li
236.562 195.347 li
231.845 191.759 li
227.143 187.985 li
222.365 183.672 li
222.247 183.58 li
217.549 180.469 li
212.897 176.8 li
208.177 172.015 li
203.498 166.15 li
198.785 159.313 li
198.765 159.284 li
193.996 152.86 li
189.307 144.935 li
184.532 135.385 li
179.814 124.888 li
175.09 113.173 li
175.06 113.107 li
170.26 103.307 li
170.185 103.179 li
165.452 96.3128 li
165.335 96.1732 li
160.602 91.4398 li
160.553 91.3944 li
155.776 87.2139 li
151.092 82.5958 li
146.384 77.1594 li
146.363 77.1357 li
141.586 71.96 li
136.892 66.1425 li
132.19 59.5204 li
127.414 52.0902 li
122.691 44.0408 li
122.693 44.0448 li
117.907 35.8014 li
113.199 26.5867 li
108.479 15.7477 li
108.456 15.6984 li
108.322 15.4318 li
106.534 16.3289 li
cp
.858824 .168627 .878431 rgb
f
130.243 16.0508 mo
130.843 19.5171 li
130.842 19.5141 li
132.643 30.1142 li
132.643 30.1184 li
134.443 40.4519 li
134.447 40.4723 li
136.247 49.6725 li
136.253 49.7 li
138.053 57.7 li
138.06 57.7317 li
139.86 64.6653 li
139.864 64.6797 li
141.664 71.2124 li
141.674 71.2463 li
143.474 76.9797 li
143.482 77.0036 li
145.282 82.2702 li
145.295 82.3048 li
147.161 87.172 li
147.158 87.1651 li
148.958 91.9649 li
148.969 91.9924 li
150.769 96.3928 li
150.786 96.4303 li
152.585 100.363 li
152.594 100.381 li
154.394 104.115 li
154.411 104.148 li
156.211 107.548 li
156.228 107.579 li
158.021 110.701 li
159.815 114.022 li
159.842 114.07 li
161.642 117.003 li
161.654 117.021 li
163.454 119.821 li
163.46 119.83 li
165.259 122.564 li
165.305 122.628 li
167.152 125.001 li
168.933 127.64 li
168.962 127.681 li
170.762 130.081 li
170.788 130.114 li
172.588 132.313 li
172.619 132.349 li
174.419 134.349 li
174.455 134.387 li
176.255 136.187 li
176.268 136.201 li
178.068 137.934 li
178.148 138.003 li
179.948 139.403 li
181.748 140.803 li
181.829 140.861 li
183.63 141.993 li
183.666 142.015 li
185.532 143.082 li
185.568 143.102 li
187.368 144.035 li
187.394 144.048 li
189.194 144.915 li
189.281 144.952 li
191.081 145.618 li
191.112 145.629 li
192.912 146.229 li
194.712 146.829 li
194.811 146.857 li
196.611 147.256 li
196.646 147.264 li
198.446 147.597 li
200.246 147.93 li
200.318 147.941 li
202.118 148.141 li
202.157 148.144 li
204.023 148.278 li
204.058 148.28 li
205.839 148.345 li
207.549 148.472 li
209.278 148.857 li
209.312 148.864 li
211.113 149.197 li
212.913 149.53 li
212.948 149.536 li
214.748 149.803 li
214.821 149.811 li
216.602 149.943 li
218.366 150.139 li
220.131 150.401 li
221.913 150.73 li
221.988 150.741 li
223.855 150.941 li
223.888 150.944 li
225.688 151.078 li
225.725 151.08 li
227.525 151.146 li
227.562 151.147 li
229.343 151.147 li
231.125 151.213 li
231.162 151.214 li
232.962 151.214 li
232.999 151.213 li
234.799 151.146 li
236.599 151.08 li
236.636 151.078 li
238.436 150.944 li
240.236 150.811 li
240.304 150.804 li
242.155 150.539 li
243.939 150.341 li
245.739 150.141 li
245.775 150.136 li
247.575 149.87 li
247.645 149.857 li
249.428 149.461 li
251.211 149.13 li
253.01 148.797 li
254.81 148.464 li
254.845 148.457 li
256.645 148.057 li
256.68 148.049 li
258.459 147.587 li
260.305 147.192 li
259.886 145.236 li
258.019 145.636 li
257.977 145.646 li
256.195 146.108 li
254.429 146.5 li
252.646 146.831 li
250.846 147.164 li
249.046 147.497 li
249.012 147.504 li
247.246 147.896 li
245.5 148.155 li
243.718 148.353 li
241.918 148.553 li
241.887 148.557 li
240.054 148.819 li
238.288 148.949 li
236.506 149.082 li
234.725 149.148 li
232.943 149.214 li
231.181 149.214 li
229.399 149.148 li
229.362 149.147 li
227.581 149.147 li
225.817 149.082 li
224.052 148.951 li
222.239 148.756 li
220.477 148.431 li
220.442 148.425 li
218.641 148.158 li
218.605 148.153 li
216.805 147.953 li
216.768 147.949 li
215.005 147.819 li
213.259 147.56 li
211.477 147.231 li
209.694 146.9 li
207.912 146.504 li
207.769 146.483 li
205.969 146.349 li
205.931 146.347 li
204.149 146.282 li
202.319 146.151 li
200.575 145.957 li
198.81 145.63 li
197.027 145.3 li
195.296 144.915 li
193.545 144.332 li
191.76 143.737 li
190.02 143.093 li
188.275 142.252 li
186.507 141.335 li
184.677 140.289 li
182.936 139.194 li
181.176 137.825 li
179.417 136.457 li
177.663 134.767 li
175.888 132.992 li
174.121 131.029 li
172.349 128.863 li
170.577 126.501 li
168.791 123.855 li
168.751 123.8 li
166.908 121.431 li
165.133 118.735 li
163.341 115.948 li
161.562 113.047 li
159.774 109.739 li
159.762 109.716 li
157.97 106.597 li
156.188 103.229 li
154.4 99.5213 li
152.613 95.6169 li
150.825 91.2481 li
149.031 86.4629 li
149.028 86.4559 li
147.169 81.6058 li
145.378 76.3685 li
143.588 70.6641 li
141.794 64.1555 li
140 57.2451 li
138.207 49.275 li
136.412 40.0981 li
134.614 29.7752 li
134.614 29.7793 li
132.814 19.1792 li
132.813 19.1762 li
132.214 15.7099 li
130.243 16.0508 li
cp
.498039 .0784314 .0862745 rgb
f
.345098 .756863 .65098 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B854D0F4B64A43F243E3CCF111DDD476299F3B748356> |-/A <1C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F15A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D73985071102DFA93B6532> |-/B <1C60D8A8C9B64EDFFBC13662E45548907DF94CFDD8366168A19798D3F94023374D4D2C86938E32D7DB9C1872F3A204253AB72EA5DE94FC03994C8EF8A3AEA69543654A5C81A183CE8AEAD100B0BA927EF2453AE33B886ED98847317AAC2483A7B07D884E6BA01DCB84EDD0DBB4BCDE82582971377C63466C51717F481B412F62082ABE2DA40B3D1CD64A6F92915DAB718445366AAC40CD207CDC2AEAFBF75F78F4F875F819FE068F712E647D09F9C9585654CB217F940FB0CC4A0399BD16E20306B0AE361121402EB02A27DB6252E098ADE7CC6B62128FF27D9B35E955978F8F1CC87FEE6B14877366567A52B860F7D53BC608D1A75802EE31B412> |-/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D500379950803F077453028FB6169> |-/I <1C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0C964F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF48A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D2A7DF15DDA4EFCA27B915E1B9ED43E7C12> |-/R <1C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 47 /slash putdup 65 /A putdup 66 /B putdup 68 /D putdup 73 /I putdup 82 /R putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [45{/.notdef}rp /hyphen /.notdef /slash 17{/.notdef}rp /A /B /C /D 3{/.notdef}rp /H /I 2{/.notdef}rp /L /M 4{/.notdef}rp /R /S 27{/.notdef}rp /o /p 2{/.notdef}rp /s /t 139{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf257.479 132.078 mo(DAMA/LIBRA)[10.3994 10.3994 12.8037 10.3994 4.00098 8.7959 4.79492 9.60449 9.60449 0 ]xsh.866667 .505882 .270588 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/N <1C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF0B056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A3ABC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C8E57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D63E63AE746DB94B9539BA648935E38> |-/a <1C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC550DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385FDB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A29895DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B737B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE3272EF1EF1464C3F0D45D7CBB8749AF571E09> |-/b <1C60D8A8C9B7A73DB90B311171EB67EB8746E2EC8FC994CCA7A632F7C7E8F4A5D28D725796F2BC8526696060F460C892CC5686CD97F757C6EFB11E42DD9AF110BE11F49DAEFA324F62E3046D4E2410C0923EDB87332B0381414594D399924398EF0A71772EF0EFEA72F5940C288418E4FCC7A2DE1E6A1AEA513FBDA0D6603C38C9676D3489A418D7163D5E50FB679144E02901D98844D885CA3AAF379A83F23AED1F56FC130F21> |-/c <1C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438ECC54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F42A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |-/d <1C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D203065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD3329A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB857EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5CCB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD104E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A618879362783A36815EA1CE5876FAC4F83CDFE1BD4A> |-/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984A59E1CFFFD06EA629758085868D3F5F7204292> |-/f <1C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF32092BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274BFE5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40FC628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C5573F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FDD941D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |-/g <1C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F60847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02EA707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4EA45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFFD70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D3002781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD46F1C707> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/j <1C60D8A8C9B854D0F4318DEA6521478B60F6044DAEF7868836F24B60C01F8FF104577FAD0FB41969E65C00875715610D5549D6DAAB08B93DAF24EF054E46E1EB981D6A0FC2F7B50B2B8F019DF50B5D4C1637EE43AB3592EB78AD07F28FA8A877EB087C4C23186AFA6D5DE4848D9DB07C62ED4D9CCFC2A2B7A5CC01022E8E444FD0278013A131F952B7BFC1BE02FEBD59BAE9D43DC0183C776C5A736461C5006E87097EAC71E078346A344332A5F08E2C05F8767AE9FA349CB7EA6E867287459698C8B1104059B90614> |-/k <1C60D8A8C9B7A73DB907772911B7C2CEAC1D2074B2642ADEDFBA1679ED254D30D2D9A5BDAE41A6A7C0D78C5D75E9522858A70EEA458FC30CFDA879F9C1CE85600A63BE4554ACA119AD822CC5727738E5E5FAC782F5B6F69100B3F9A42C95FB8AA53FD907276C4A477291A36A9FD6B1870ACEAFC297FB6D4CC1F0091BA09524439681D5D4A76F017EDD23AA69786F58BFB619D5D45A35621B583AF1C763E994CD0C086A4B52B5442078A662891B62F92DB77130357FD06A533719ACFEBED1A5224DAFB3F947A309ADA52BC46E57C120F32619B58880DFB59CA5AB15473CEA89B7> |-/n <1C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B280026130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6A0027198438FE663C2EACF82CEB86F7C727594> |-/r <1C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E983E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA455AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D8C360275B503E4954E912CD342> |-/u <1C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB958152D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D555B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F97520325221F3417C7781EB09765> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 32 /space putdup 78 /N putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 105 /i putdup 106 /j putdup 107 /k putdup 110 /n putdup 114 /r putdup 117 /u putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash 17{/.notdef}rp /A /B /C /D 3{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N 3{/.notdef}rp /R /S 13{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf85.3999 387 mo(Neutrino)[10.3994 6.3916 7.2002 4.00098 4.79541 4.00098 7.2002 0 ]xsh85.3999 401.401 mo(background)sh85.3999 415.8 mo(projection for)sh85.3999 430.201 mo(direct detection)sh.4 .4 .4 rgb
MZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf167.221 41.1128 mo(DAMIC I)[10.3994 10.3994 12.8037 4.79541 9.60449 3.6001 0 ]xsh.92549 .121569 .196078 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/U <1C60D8A8C9B6079F6D024388243061A610EA3A6326F33263CDE8BCFFE9F148F3D7F4C9725D2BAF9A3232BD1EB145B5A77D8B0651FBD8E8A9FB06CCD2A8CC2722C436D9102F6A183E894B34B7045CE7C217957AA9B87F4515C93092C441847223DE93B9E3D8ECF6C02AE8C75FDAA89CB34F7A7CE8EBAED7CDD0E6765B3952A1A95E2E1735ECFE4DF6802DC3188EE398A9F5CCD7DB8E0B3AB2D84DF5AF6C30AB040D323559946C1407613CE0866FB1002EF0B5DF66414A685DAD87F9D3513811F878AD> |-/X <1C60D8A8C9B6079F6D26399CC6631E46867BF8C4B8758AA36E01F4F3DD747F0A07A2F2A467091B768AB28C72950CA0E319DF1E7AC4DB918C6BC4920DBFD9A6D6D01BC2377A4B1D1934B2025F06505E4409AF914A74F3AF34FA35843EB8875E2769C0837AA5461C1D7223EA0AAA4959FD45709776F7736E12D50C89B723A6EC54530216742F75058DAEF6748DAB051770CDD3F1F909EE2951ACC9980F5CAA8EF983C896B27CAB5FE985D30D5B77517C8BED818171E9701402D4A00EFE7AE52ACE012E21931594F8D9FF904E4AF37040A6D4C8A2F2E818DD7C6F49864E3F952585BA414E1D60744ADE44E15398D7A79E3D2513D7338CCDE9BB9D963A6BED34F0586DE62FF238993642D35D> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 85 /U putdup 88 /X putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash 17{/.notdef}rp /A /B /C /D 3{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N 3{/.notdef}rp /R /S /.notdef /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf299.335 410.45 mo(LUX)[8.7959 10.3994 0 ]xsh.223529 .490196 .239216 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFCA94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC1949558757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215FA79B98816AEC20BC3F> |-/O <1C60D8A8C9B6079F6288DCC34B8AB15434B53D5CBCF7E29104F391BE1572E1D4E07ABEE690B714C43DA0F68F9B727CD1B8007FE243EEEBD45E7815504A3113BAFAC54AC3D3B019A1C9ACF716BD3362CCEE1A09F2069AE9AF5406AA47EF076128BEB6A74EB29D02BFBE8F43F41B56E48CC0FA84987A887327DB516D9441F2C6BDCB9AC2AD82E8> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 69 /E putdup 79 /O putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash 17{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /.notdef /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [16 0 0 -16 0 0 ]msf298.35 370.116 mo(XENON)sh.3 .3 .3 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBCD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE23402242D396440157FC51> |-/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DBF6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DFDD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 48 /zero putdup 53 /five putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /.notdef /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf411.287 268.423 mo(DarkSide50)[10.3994 6.3916 4.79492 7.2002 8.00879 4.00098 7.2002 6.3916 7.2002 0 ]xsh.858824 .168627 .878431 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k 2{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.353 195.533 mo(CRES)sh445.366 195.533 mo(ST)[8.00879 0 ]xsh.4 .105882 .113725 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/l <1C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B6828D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE5527D6441CE02F5A28D63A618F> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 108 /l putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf261.854 152.724 mo(CDMSlite)[9.60449 10.3994 12.8037 8.00879 4.00098 4.00098 4.00098 0 ]xsh261.854 167.122 mo(Soudan)[8.00879 7.2002 7.2002 7.2002 6.3916 0 ]xsh.92549 .121569 .196078 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/y <1C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518A71BC990F312D4821883A95164BCE1683B85434AFA8> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 121 /y putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U 2{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [16 0 0 -16 0 0 ]msf267.336 334.917 mo(CDMS reanalysis)sh366.054 308.32 mo
342.511 308.32 li
340.815 308.173 li
337.949 306.428 li
337.835 306.358 337.714 306.314 337.582 306.294 cv
334.622 305.833 li
331.595 305.109 li
331.575 305.104 li
328.548 304.446 li
325.521 303.524 li
325.461 303.508 li
322.489 302.799 li
319.606 301.484 li
316.624 299.278 li
316.507 299.203 li
313.439 297.536 li
313.377 297.505 li
310.39 296.142 li
307.504 294.155 li
304.476 291.587 li
304.466 291.579 li
301.447 289.084 li
298.424 285.865 li
298.395 285.835 li
295.328 282.834 li
295.149 282.695 li
292.081 280.828 li
292.068 280.82 li
290.897 280.133 li
290.897 279.52 li
311.317 279.52 li
316.449 283.166 li
316.539 283.223 li
323.672 287.223 li
323.766 287.27 li
330.901 290.335 li
330.985 290.367 li
338.118 292.701 li
338.201 292.724 li
345.334 294.39 li
345.414 294.405 li
352.547 295.473 li
352.611 295.48 li
359.744 296.081 li
359.791 296.084 li
366.923 296.35 li
366.989 296.351 li
373.298 296.174 li
373.298 307.55 li
370.977 307.955 li
367.964 308.151 li
367.941 308.153 li
366.054 308.32 li
337.211 308.32 mo
290.897 308.32 li
290.897 282.452 li
291.046 282.539 li
294.011 284.344 li
296.981 287.249 li
300.033 290.499 li
300.125 290.586 li
303.188 293.118 li
306.249 295.712 li
306.328 295.773 li
309.328 297.839 li
309.48 297.925 li
312.515 299.31 li
315.491 300.927 li
318.501 303.154 li
318.68 303.26 li
321.747 304.659 li
321.93 304.722 li
324.968 305.446 li
328.005 306.371 li
328.083 306.392 li
331.14 307.056 li
334.196 307.787 li
334.275 307.803 li
337.078 308.239 li
337.211 308.32 li
366.966 294.351 mo
359.888 294.086 li
352.811 293.49 li
345.75 292.433 li
338.698 290.787 li
331.649 288.48 li
324.604 285.453 li
317.564 281.505 li
314.77 279.52 li
373.298 279.52 li
373.298 294.173 li
366.966 294.351 li
1 1 1 rgb
f
373.298 308.32 mo
366.054 308.32 li
367.941 308.153 li
367.964 308.151 li
370.977 307.955 li
373.298 307.55 li
373.298 308.32 li
342.511 308.32 mo
337.211 308.32 li
337.078 308.239 li
334.275 307.803 li
334.196 307.787 li
331.14 307.056 li
328.083 306.392 li
328.005 306.371 li
324.968 305.446 li
321.93 304.722 li
321.747 304.659 li
318.68 303.26 li
318.501 303.154 li
315.491 300.927 li
312.515 299.31 li
309.48 297.925 li
309.328 297.839 li
306.328 295.773 li
306.249 295.712 li
303.188 293.118 li
300.125 290.586 li
300.033 290.499 li
296.981 287.249 li
294.011 284.344 li
291.046 282.539 li
290.897 282.452 li
290.897 280.133 li
292.068 280.82 li
292.081 280.828 li
295.149 282.695 li
295.328 282.834 li
298.395 285.835 li
298.424 285.865 li
301.447 289.084 li
304.466 291.579 li
304.476 291.587 li
307.504 294.155 li
310.39 296.142 li
313.377 297.505 li
313.439 297.536 li
316.507 299.203 li
316.624 299.278 li
319.606 301.484 li
322.489 302.799 li
325.461 303.508 li
325.521 303.524 li
328.548 304.446 li
331.575 305.104 li
331.595 305.109 li
334.622 305.833 li
337.582 306.294 li
337.714 306.314 337.835 306.358 337.949 306.428 cv
340.815 308.173 li
342.511 308.32 li
.945098 .898039 .945098 rgb
f
366.989 296.351 mo
366.923 296.35 li
359.791 296.084 li
359.744 296.081 li
352.611 295.48 li
352.547 295.473 li
345.414 294.405 li
345.334 294.39 li
338.201 292.724 li
338.118 292.701 li
330.985 290.367 li
330.901 290.335 li
323.766 287.27 li
323.672 287.223 li
316.539 283.223 li
316.449 283.166 li
311.317 279.52 li
314.77 279.52 li
317.564 281.505 li
324.604 285.453 li
331.649 288.48 li
338.698 290.787 li
345.75 292.433 li
352.811 293.49 li
359.888 294.086 li
366.966 294.351 li
373.298 294.173 li
373.298 296.174 li
366.989 296.351 li
.909804 .909804 .909804 rgb
f
.643137 .309804 .619608 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7E7C1AF20108BE9542537F46D63CC3CA2839958A1F5DF80C8F650E8951850C571859AA14DD682> |-/W <1C60D8A8C9B5D6EF4CB383496C62617B8BD4FD4927BDE48152A6FF6216428592F5AFA3D18F24C53020F77DA565222C98E1F496EC6F2EE4EB22E43F233D8D98DB46EC3FFD79A8A395ED6571E9EE52C2D64F4FF1F26706DF3355CFC8C908EAA86ADD43E05EADD0D2F7D3DC578FF752F1D87291BBD55E577C117CD30BA3049BD39543241DD7DCD07617FA8A494E710E269F478E2E95BEC8AA7E710ACD0612E8921B3DAA59E93D8AA4276CD08DDB3A9B4D762893C74EF3108E125B72E190D045E652A0B8E8729169D251777FA84DD9EC852ADB1FB8FFEDFE199F837B9E862E992403453891> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 43 /plus putdup 87 /W putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf292.692 290.994 mo(CDMS+)[9.60449 10.3994 12.8037 8.00879 0 ]xsh292.847 305.608 mo(EDE)[8.7959 10.3994 0 ]xsh320.838 305.608 mo(L)sh328.568 305.608 mo(WEISS)[13.5918 8.7959 4.79492 8.00879 0 ]xsh143.496 148.147 mo
121.896 148.147 li
121.896 128.947 li
143.496 128.947 li
143.496 148.147 li
cp
1 1 1 rgb
f
148.111 108.139 mo
126.511 108.139 li
126.511 92.939 li
148.111 92.939 li
148.111 108.139 li
cp
f
129.384 107.279 mo
107.784 107.279 li
107.784 92.0786 li
129.384 92.0786 li
129.384 107.279 li
cp
f
.298039 .509804 .623529 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F6086ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41BFE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34ACA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 71 /G putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash /zero 4{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E /.notdef /G /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [16 0 0 -16 0 0 ]msf89.8315 177.691 mo(CoGeNT)sh.717647 .286275 .686275 rgb
MZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf86.8066 105.603 mo(CRES)sh122.82 105.603 mo(STII)[8.00879 8.7959 4.79541 0 ]xsh.92549 .121569 .196078 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash /zero /.notdef /two 2{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E /.notdef /G /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf86.46 143.881 mo(CDMSlite2)[9.60449 10.3994 12.8037 8.00879 4.00098 4.00098 4.00098 6.3916 0 ]xsh183.072 220.191 mo
195.164 211.01 li
179.743 212.873 li
0 0 0 rgb
f
183.375 220.589 mo
196.936 210.292 li
179.683 212.377 li
179.803 213.369 li
193.391 211.728 li
182.77 219.793 li
183.375 220.589 li
cp
1 1 1 rgb
f
172.695 220.199 mo
183.591 216.375 li
183.26 215.431 li
172.364 219.256 li
0 0 0 rgb
f
0 .168627 .309804 rgb
MZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf409.04 395.381 mo(pMSSM-)[7.2002 12.8037 8.00879 8.00879 12.8037 0 ]xsh409.04 412.661 mo(postLHC)[7.2002 7.2002 5.60352 4.00098 8.7959 10.3994 0 ]xsh.662745 .498039 .505882 rgb
MZCCUF+TimesNewRomanPSMT*1 [16 0 0 -16 0 0 ]msf108.008 247.358 mo(CDMS-Si)sh209.193 225.103 mo
172.044 240.657 li
173.203 243.425 li
210.352 227.87 li
1 1 1 rgb
f
.219608 .32549 .639216 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/w <1C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E6418023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363FE5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA523917E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D8526507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6C7E1197FF1898AE92ADB1C1DD84FD7DEC1> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 119 /w putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash /zero /.notdef /two 2{/.notdef}rp /five 11{/.notdef}rp /A /B /C /D /E /.notdef /G /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf105.448 301.278 mo(Edelw)sh142.236 301.278 mo(eiss LE)sh206.467 232.378 mo
218.888 221.215 li
202.153 224.659 li
206.467 232.378 li
cp
.862745 .603922 .603922 rgb
f
206.467 232.378 mo
206.801 232.75 li
220.595 220.354 li
201.383 224.307 li
206.336 233.169 li
206.801 232.75 li
206.467 232.378 li
206.903 232.135 li
202.922 225.011 li
217.181 222.077 li
206.133 232.007 li
206.467 232.378 li
206.903 232.135 li
206.467 232.378 li
cp
1 1 1 rgb
f
207.924 226.379 mo
173.897 241.19 li
174.296 242.107 li
208.323 227.296 li
.862745 .603922 .615686 rgb
f
229.676 276.197 mo
184.449 295.046 li
185.603 297.815 li
230.83 278.966 li
1 1 1 rgb
f
226.948 283.473 mo
239.369 272.309 li
222.634 275.753 li
226.948 283.473 li
cp
.219608 .32549 .603922 rgb
f
226.948 283.473 mo
227.282 283.845 li
241.076 271.447 li
221.864 275.401 li
226.817 284.263 li
227.282 283.845 li
226.948 283.473 li
227.384 283.229 li
223.403 276.105 li
237.662 273.171 li
226.614 283.101 li
226.948 283.473 li
227.384 283.229 li
226.948 283.473 li
cp
1 1 1 rgb
f
228.407 277.473 mo
186.301 295.578 li
186.696 296.497 li
228.802 278.391 li
.219608 .32549 .603922 rgb
f
.137255 .121569 .12549 rgb
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginMZCCUF+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-systemdict /gcheck known {setglobal} if end {end} ifendMZCCUF+TimesNewRomanPSMT /Encoding getdup 49 /one putdup 52 /four putpop%ADOEndSubsetFont
/MZCCUF+TimesNewRomanPSMT*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus /.notdef /hyphen /.notdef /slash /zero /one /two /.notdef /four /five 11{/.notdef}rp /A /B /C /D /E /.notdef /G /H /I 2{/.notdef}rp /L /M /N /O 2{/.notdef}rp /R /S /T /U /.notdef /W /X 8{/.notdef}rp /a /b /c /d /e /f /g /.notdef /i /j /k /l /.notdef /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]MZCCUF+TimesNewRomanPSMT nfMZCCUF+TimesNewRomanPSMT*1 [14.4 0 0 -14.4 0 0 ]msf142.597 224.313 mo(2014)sh77.7979 224.313 mo(CDMS LE)[9.60449 10.3994 12.8037 8.00879 3.6001 8.7959 0 ]xsh184.53 155.939 mo
147.381 171.493 li
148.54 174.26 li
185.689 158.706 li
1 1 1 rgb
f
181.804 163.214 mo
194.225 152.051 li
177.49 155.495 li
181.804 163.214 li
cp
.298039 .513726 .623529 rgb
f
181.804 163.214 mo
182.138 163.586 li
195.931 151.189 li
176.72 155.143 li
181.672 164.004 li
182.138 163.586 li
181.804 163.214 li
182.24 162.97 li
178.259 155.847 li
192.518 152.912 li
181.469 162.842 li
181.804 163.214 li
182.24 162.97 li
181.804 163.214 li
cp
1 1 1 rgb
f
183.261 157.214 mo
149.234 172.026 li
149.633 172.943 li
183.66 158.131 li
.298039 .513726 .635294 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MZCCUF+TimesNewRomanPSMT*1 uf/MZCCUF+TimesNewRomanPSMT uf/TimesNewRomanPSMT uf/MZCCUG+Times-Roman*1 uf/MZCCUG+Times-Roman uf/Times-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 15.1.0%%For: (Paul Schaffner) ()%%Title: (Spin_indep_2015_plot-5.eps)%%CreationDate: 10/23/15 1:31 PM%%Canvassize: 16383%AI9_DataStream%Gb!Q;kB\o*cJ[OZpAhYDWOp7hP;CkD#+Q@##q!67RId!lHgRl6c:oYpoBkni4HEjBX!O$';Q3VnQ//$=m?YZSEh$M8-Y\PdXO3Cm%P)*3b1"'O?=/Yfb7aWDF'&a*Q$REeI$#RS26m<-.M#\8d7,b!%C9UphbO$mf)UOsJ@5VCHS#!I]Vmj$>pVu]uB76Z?o@;aLr4FtU%8R<jLQ<S%VR4d]_s*hB>/`ECirI.-6NISKU?[!d![!1j/HqFpo^RD2l50MD8?!]7DhUY:3!<W3j;P3d@F?[@j/c%;f["]4Wf?bnB%^UjN`Tb$?Cqf?U7R.#e%/bFQ7ee[b"K-%rpn`MgDh#bcM+N2:s8m]Z!Um8aq]3asjnT;*KHJ@\!q<mD70rsuAa3<Jt=O[[o%E1Zb%-ipE07F5\U<JOn^kIiI,#:2c,!tf=)$jGY;<q_Mg%GeuT,6U."LI)$)MHQ^a@>l>IL>pk5Inf1BPL_5>)q#/<ZlHDh:]Cf=+N%W>%@/mN.mWW`@kq8lI"Ro1nQ>P6S+[*k.i8--5H\a+es%2`6gS!#*`q1$7DDg;pQ6`SP*Wq?nZhK5e2B9*BB5:3p40&T[V*?$,7cG+o%'cDg)5[,LENQ4U@'u`_<<\b:"d$"<6(,gbti:%"]0P%XHLb34"Sh?6+=Np'.Ld72^Yp3L^VF,?R!F))m_h&%T8?dTjk@b"u@7c41%Dn#A%lN.>siECm:_f4E9bbaF*YZd\c!.hH=5sgk[4S.*jI3s?]:Z1p%g@Atb-%\@neX#%lX>t,l7"]!HpD7ZmWH^*USC.g.f`Z@)%4:W,l@&NUA03IKKG$@"PZN[>+K.Xg*-.ishkcmj.(g=.&Qnfd+UH/:F?r(UV^>HiD#<ZrD^M+#&m&RMS<EaWib(?7kD5NIS;k_GK%K=:tbCtf]ZFsUk7'&'Kj;Kcm**SYZ`2RN[36JGpe4JnP)&.#)rhuNNmgh^\:Nd@t(#>"iGrS;irDhI?sK/g*,"Q9fo,K'L#\AVe:%"_bg3@(#t9_D9dK6(*Kb;VrTiK7GSY>]#8g.$uLg>FTnV1U.3MXlm=@@_1?ONVJ#'d*(?VVu55Rf8flT`=,6nJ=8*)oQej=%!H^a%Kl>=jh`:$f4*lN?3F)Nr%+>.nb^0`q&Ys2'kfr&iiN3]jnoVE<`Ye((S6i;*F*b2.^Tj:/$U7plSo<1f,(hn!0QN\fEW;8T.jQ@_%+cmD6(\f('aM;6nPlJV;`8AMjfcQ!u^SXOe"JuJfIhk5-Ql\>`V&cnZP[[?!kf2L63(n3IKar1`!LSLT^p=q'!Pr7tl<1m2T`kMf%(MLCNXEGNo&PFf*&^cd&F,lNEP!E9/APJ0_]d=KGRaA"Q2JTLV=qZ(-^KYN40&**N"k.$)%FI^`2Ue>[D0@$;]`EcH*R$]bef/"N%?r`ZGBM3<M>E4'SDDCVI[\/DV,s;VGHLRN&;o4hW;ZH*"@/`]#Dr;d#UL5lX=q4TSKh,B3,nmY%Z@36T*sJLc=L6h/@0(rhjM=t\%b`;,h=jr.7Qb!8K%K]F_oZ,nhM^GBK-)2_u@'!li'SM%3Is/LcI#/'*b7Q/fp5_W?dGWpe@(keG&i]I%6H2T-"i(I^VnMnF3Z80q%T*t!C"P:k4\/TsXRKCDZZF0`sSd;b?oXJPAOGQL>9G5ce/")1sHY[lb59(DpGd'`b_&];l0W.C5rr8g]A(jP/$.O20MY5[%ZfnUT%T0`0X=jJ<DMa)dS[id890!j?7d?F@gm<f/".a2Y:Xt<-oM^p_kok@eEbTjp#<rX,_XP<%"ILn`OGLJ,akY9ZH>sL*71:3<p#VY5A%r4g6i([2MkJE#n]YGL>foR+'4J/*M6V7&S]R'eY^E!hpp`eo6^+?-2P+5cdB7j;d>2\SHm2d)o$kqAVf"Tk5!P"-i1osPP'beY]G%"PE'B3T9=C`ph[ajRk4X4L<d9XI[mV/qB3O&tj;1j'P[\Ig;!<r5,bIA/Vb8M//d&"E*\C%L]Yp`W-PLc-Qh]n1:e*2BA_>:jF[$%@\4Yb=P2\/2[`KS,er+YP<>5]m6BM70(be[DLfEU[?MD12j)hE@Z;/Uf(PoKVD6<^Ul8Nd"b71A^IW4ChlgsG%t5\<5!_iSm2q^N%/A]==]KuJ7RKRLZ=2;T/9lE=%I?n8f$Hl56InEgI(*Z!VOa&\ebFM1o+:/B=`$q(1cn>M6%23DT'T^+\\.(9TUGc'[IBl'0/Gt*]%YWi#:06R'Z%6sf.%9p$<YO@-e#erRZj*"5V?a7'3dUIo%C]sd<:i&jf@0<MsTia8g7hefgN"!T/TJT8q&CmIn1kDTc_U:)r(38A%%S-UE/o)CGE,6h,&XlFm8F!tS;YAcHjTTsAG$;n&f*bBp/75.YrBEE8%b";aW@$1r;W5q3CWfZ`NLI`VJl&69QNe0M9;2=Cp`aNu:%0<oa]7/h7L)@^C/*XP8+9ID$PUGE66Kb/MQ!b;fR*$l7qih'/::s=a@In]Lo#+/m,p`B`C@-GI`(Q!AFF9RY53(gD`(Fg-8+2S<c%(kmDF,q(PFcg`Mo5W(hQLermR(5A,4JoNPsbp!oo:o-]"I4$I!'#br#Lh$J?(l'OBR\LS&MHBkr@4HhA66[8,J.TSQ=9Oj8KEGHB%LOY7VI9VAI"cP<SZ_IY[XA()T"6O'5"jQ1/k8tqt^]I*ENrPVp#of;!J"miMNT]G#%,5Be%(Qgl>[t!a%`bdkJFUVK<VF<p7]2A?%N.n!6]s/E;&IKHtE.nir#nm6V5DYm5DoZ!RooB]%A5/hl.9Ja-YmA<tJ50L$`^5MQ":G3u\g&tm^bYJA&T)&Ps!<k>KJ9&T%_`(C%#XgNiV6H-%M)Z:0!6#QUjDkSDrF`%,#l4Lb.(mF#^"n)5I]-D_8#dCL.(o!]917fbMM_u[Ka%PTJS:FK1M<.i;M/YqAqEI;\7.3u%G2;lS1p#Lfl*l)i`%&5&EMoH.CY@H+]H(*lo)]dl[R6@/9`QO]JA#:K#/=;JOp(Z<>s0Dds,6al!%EBH!7'!7Dc%9sgRcC`)<APb%>bH"6*9ZcFJ(X3cf?Kf8ON(X4k<lC(861(qK%j>XIhqW%2"78)99;%jLn"?ArV9g6q2T6PYQeln;tbJ5B?`RKjqstn7_s]5p4bj-%nH=rg,N,aH1[XkuBS1X&D]n'>3Xu+Q>dtL&$msI!OJ/"G)hlp:)YUUi]YE2F6@JWkDndsI9b5oIU_<^F")GJ@Ef/7+S)dq2KXr/H%bpNqMk#.tRKP'M!Fr8.]ljjANA?L!+h.F9&r*-c\qkbs*^Qa?GC+uE<`d@h@LApp%Lo4QJ++"Epi=54*;;_4KS6SM^qt_]-`BPdT%#:Rd1fb0Z_P.^7QdGOuUB#)Z=3r&_aqSO=fYBJ-?`jq!,b!*p=rd-]]:(57'OHDdj&W0bEpN1?QY7Yu=q#,c2cmXOd\6B*Ye:Ya$%^T1R$od\G$@@-brfRHt`rhJ&45DG`fF*mpmSb]&3RJpq/hG]UZD:rGo_nJF?nuL<UVcWa9pm4[^0JiYl51?*@\iCAmP4/Q3K2e4q%F8X53'%S,1mB:i[coOFkdoOW6nD7_5&d_"6>E[RO0Hc*E;)6kRA6XTb6W3f.1Zs3Cp,Tr>+DS.KX_GedR4`Z(*5pQH6BYB@C"CrM%*:D?p$XLPN9r82[FI//tgG6J(B&/)j*;k@Gdif:m?_rTEi@4)Kc.N:V!B&#r[;NFsC;pdb$`7Sm5Y*_CQE-9po/RnYHD$Z8oF.=3%'ZUO:YY)4,:eLO2Z3$m&CdeBPDL.A@.VW,(JEST`T<3S:edT6cRD3G$l7\T/UW=D+`L&%uZ58lLb's'a"_7Y7qn78n3A=k"?p7l6%d%FL[J#k&JHGs[+`gBO\.obU1njVSM'&,B6#`M'%g"L;p+;X^=T':a0,[&)9!fj(4m%%p<1GO,AWSCpB%3Sj0=N5TJ)Qot=N\nRT%>PEk>7GiF_ksiL^c$H3+_*r8u'5U.@B$K_O.tL[V7)*'W_s)%^+W?'X]?BF=N"7S!R$U-e'\<[obJIZBU&j.T`<DjO>eBe#3aj>^%rZM,ONCEY=>U9^hNhO<(mT2>nNN6,(n<Oq^#1jMff90Y-*_%>qR2;qf3h*hEGh3n`f%\`Df61%=,e(G%G!NL<V;ZONlVH]m/I.f)%L>j?W!=ulj>Q31-Zirqi,RDn.*TPf`6TJ7'6[H6q&D#daC4"$3*`Gn*)1ne/\&IoNLRBct;9b0WL+8W1)C(790FF%W"q98I(f&r)%3fU=E?u%.6C-hHp6,+>e,q%&=,c^HV"i_>n*/RA/qJ$(7EV9'hNF_HkY5pfnR<Q976jO:@/+t\;0qqfu$^Z8&qQ%@F6DaB&hUA,8%1titd;:9fb%%@2epJHL)$!nb5!/&smlk]P2D`[&,6a00t0==7o0EbtF":3'*.qWrX/qikYnHrBfcZaUQC;h;I"J%4<euUK!l!G$Q%AjV&)g@+.d1d13,en1D/?k4JPMF*dO+9O%Do/?sGGSQm0_f/L4*2_MA=nR,G[`Zk%U!]I;"i!=cD*8saU+p&Q->-VD@F99E5+XGV%3qa.*`a;h0r1;^!;3V8t`##dt#H;K_'JCP;-5E_ArR8Z.:QHgn'$>";PA>UcH^$or%""3,)+Z!Q1;$Q.2:\6pg:KPsYLRZ?O/0fA%Dm\X<F2!s#+Mr3Nf+M@@%I,D7<d-pk8HOQ;n9FV^B2.-&3SSV8Q$R#a;0EiNNT)2cjW=>^ouY#K.a4DKCWS,<jDLp^Xf`S:f<hq>%ADg#[lX[`,Bga.jqMHnTbG=g+==*=9fDNMAjC#9F;-5EtoR3ATYjVWRCru\_9VEjJ-=ITc.I%Phj,GlpVqFY`$b*24PW/*HlY^PF%UeaKZRTn@R3YTk@.k31+:2&sTc%`K@\5I20h\1<Mh=U\5n9[g/`;Qs8hHP=GoJ9RN;_/<Wfmjf:)hE[WEaXAt46mgI7P![Ic+6^g%2%+<WRkCgA)'Y[fO9r*C6!LFp86hq-#cuK,C>?/@H[el!";UH$#HY(HG(U)FYI4Q<:<-!>%#\s/$Fp9(<[/4TFCX,YB.-+t@!XL3%b]I\].oEBhJgCVnVQ`pVVVZY<;J5]GcJUAU@\Y_k?YaS,b@-IjQ0VF2oTH:5*@;4ro/U#[0&'J3i9V.T&>&@07G>Gik\Isf"bVos%i`pjF8ea0!9]19J?f</iL3lcVXS#TNg0u-qfDbRp^MqH*$aj/#;P[/3d)0h"j`pHq*j;*#]dI/MjCnA\=f/Kl,f`P^]km;NS:tZ1%YdoR5X/5$*1>Aq,YJZc=o?DQOATi].\O9`Dm:82(:(WoSGB)so0!^fc!DbW8>Apg:"r4MtZ^4B*_`+T6oAf+A1Rea#mDAKF4X^L9%cLDsUk3s8X`JS5R1A4W!(;Jbui>96^[obLH^p*4ERuX*/b/NkhA,^iCI'hOa,GO$r"a1JNN+*<AYA^sH+n2.a<8&u#Sk[JPn(HbK%Yj`EVp0H?O)3-7kbcL@O883)9rYWi)Zh(*U-pQB#-F"@b`f;]BEBlF3ZDifSObEl_D[ITHNtm%_r"NqaRP!uhIp_9jrpqF/_c(K`%Ze,rK0(5GiLtoNJPORaH.VB8P]_NN(QT&,fG0:&8k=InfcR5'36#VKA9tdB#F2DB5M-r!V9J=,CduX>Z5IY9qI`D8nb;J%7+%3k*%HWcto/GA;h_g=;N*&nbkX6[r:D"2[+NQ$L=;(0HnC8?'>,R'!V@X[hJCl:=<fOK^S-DuQ*&&ssK^2j$tFFG:C?*HJ:DVDFN>3c$j%j@_m!0J9cbk]o3i=FGEm&&[!EeN\Q(@+.b1F=81&S>.6QNBTi#QAA?$r6-2SF/&IaC_Gh+q/nFE90(-QmgFcP7+$Vt$jASpfSTT1%/W;o@e)_;<.J6eXYg!QidME:MHDYF"\kdu<SM'`:@V1#,_0N[c>n4Vf54D)M"9Z;;5/L`Z7esV\^q3,;l+4GrNT`(q/Rlm>5;B4T%A7i^+Qg"/df-u/qMka\?Vpt#m0CmM>pF^H$J*Q0"L&>e-e=QYMJ)6B!M`i/2mX2=aI#/>?8tVpR+Wl0U[E?JWa3VWp3uYaO/aVM<%@H8S_Ja'@?m!cGWn\s6IMajl"oJF]ZpTVL)L1`=nq_7m$Fl:Q7H0G42*D/i^^$K<CH^=!I\%DUA.6&j:"$[>mN/\(m#0gis[MF5S%AS</a?`?_].)0=\=9MN/WH&TH_rL@N=,@IL=NNQR*E[b5=NSZY2ET,/k_k[$ok#NE=XUJmUqH$:YHhrn#ipe@kCmq`I&'k2jQq]j%mLs]qj]K,&PN_tHjD>+DU83AB4Kjj#BpXQF6F3=a$O:e@gg(am8t4JpTR3;h]hjd40t=@2+(VV%.ODj5T26Ji`/JRJ/G<?3HKYM?%P>2h`c0(K5[CE'/?0+()!i7>C"B>b8mn:t"[d:`!?^?V4(Wr5MI/,@;Z!YkY_5LTg7Ul1l^\**d:4TE0pb:-*n8%F5IrC+#r-\=E%b&o%,(BC2g'`b=.^=<ZmG5,RN\bjdm$*V$(nkj=H_HKTVETF2jJ_JY-[=Y61V^cW%!C>bZ'.RY8=&6oQIhhk>a^_Jh+)L$**4bsl%lTG/0pSY5a'.3js,!KAaM,\rd>#3>@$L*`+p6U,%:Wa?<9-hNG,l5-9lg!Y1S7r[56'>O.fGM])gO%9,?f&u[AcrlrE$!,b]D66F%rDbLi:D::BCoUYE5a/AVYQ@NhSp]4>k1[FB=F>uFK,oRd(0P72FKhMde^*/p.aojuA$JMlS>^@5ZUD^=.)DNaSnO5'*;c`7I$K4X%:MKU+Q^.P>Nq<#T^`mXKj'HQ3`Wc@\DtrBggp6BfDt=6:3%V:V);8ZiiR<"5D8J/:ZWIA$:a7D/N+GjcJrgNs]MY:1M]=T*8Vf>7%"_^/'fPY/SLa[J]c2P]`_nEohd+_/.#p_$`2H(T6!$:ROCI[l<IG7@[UM^;8]]Q#k`9:JK=e:PN3sc9sI_Id[GUOXoOgBR,5#CN3%Hg!^CL-`UAfd]+jJ5EEECRXFMN#c^rnLH+C=E4u8I2Xs=@V//M&(jZ?7..&@.hW4H/fK>8,8Mr@VR0F!W9c;J5<r?#R)Sb6F+S%[%UsH!E.T<Tg8G^Ob:uI_HfC09*:B2Q97\Z\pG@/fSU^/$"oI5dm73!oTW3X''&D?3]#rP`A'GA*6'L4.D(tCQ,0'N,)X>Z:Zbjm-i%CSHao"#%C+Wo:JW.l"t0_K?Z9$u7W8m>eXM:Uicj)f/<@DfXIUPNt=fQK>33mXV3"U8/Gl,.E69Eni3q>sB^[2GX<b0nSg@j8<`^%^AuTV36OLWGK5F%a(Mh;R/K"sWD);H7(0SYb8I;6iI/Yf)-Dg=(GqN+in3_FYccl#c2B!7EO++1ELqSt\e9_=mf''8B`-qf*Qil[%\bfsCQ#2")IILY-f``hFil,\gj:*jD9_lHG/*57<RJR^7Tb$J;^t/nTUHZgR=Z;N>rjYLG8la9J6Cq)'QOk%PH!tX]Q=T5,FWt4-%MUo4mH$M8Vh6T6E:LSLm^C"<)^Z?#4i$j5d*dKbXEFNBkJiokS(FLPq-Ci[88>mVQNEn<_f"N4^EJ5$t#FHu"#$q+bo8fL.H0iP.%HkJaDs0]/J$Yb&Q<IHAUnkgbWE;/sJfiLuKcMkPsmP%MAO>.J68_5.gm*j?OTNM)OogH7)aoX;X@t/B!NBPLTSQr5M!-&82A;*r-%6u,Z9nhV;GH3=DMjQFq\/,&roG1$?I-^8K`.l06rl?/F[6&bnmnnfoCZ[O+W]aWf>_)=.d.4HW[@4Jh]4R7^1a$8YC51?73?!Dnb%WHLB\0P_F^=S,NFZh)&pc'AKa5<ntkIh+eg"/,PefsMV3,.F>OTHHh50_i`8W%4A45S/)_3F'c71e`&F)EF6>Vb1k.!D9Hkna8Cj%Q^0_[9$3`-`*(4Q>m+NpYsG^f^UqbI;XW_e%7fXMfq,gfBg88u2ZM_*42gZ6jWJ$=?2p4(Xon:<VF<9Jba_]`E1\&T`@csW3Qj+?%DE)q?R)'%\M9P&t>29pL;5-mN^i$:GeU2V.-V.TgA!;nglUNRIg$f@[3oQ^H1l'[l-!uruX&mIc[kA0Pl4MT+^>T]:Vu(N1dqtSI%SqaPMrl6ekGis2p-f4P2-GRJXQ?.n*h@!^jrP^hXq-moO?XdiJ1ttpT?PtP=g.OkU%Qjif3/j"!L;]a[^@k/)6.u]>_:>J<h+XRl%Wo/@1s.T'`:d?kBb*RXlZbal1CN#$1'H2&J,Y?!m2k^'9kM'jVnOsGG@D$@1%#`"l_T*%VlO;A/)5:63T!OWCIq;7XfK]EU4aXi!%,j?rec1.cZ)pHV1pET`U0<s8?Z*P9c](,OCkD0!NL`bBW5PYhV0Omf[\HAlO]s%Sd&iDN/N(a--b>doI@#Ou@fC%FAh&M'F'RRK!%\)hZigG5'%Q0?XdX8`L?aX&]%,Bmk[-/NZN=5j_6hd`2L"ZZ.Jo5#o*FVJVLl"`KRn.`t"H#C[5qi8,oqI6Y@a7;$,a@KSOG!`_H%(2L*J%rsSrE>,S%WO<`8nW)Y(?2cs14;UN'YP^M3i@EJbDARJ6"Pq+i`7R6UR7NiRN\9$!'r59*7.3&\Y9uAo:2agIet;c!m)-ec%.q!83&<C\UD6jX$^3l^inB2k5D+*d!P2\_4o.,jJ?@S#*af4n")I,=1Y$?@WHITMQCDZMEm$I1Af/LB4&"_Fui3K1mE_1bjB/kp;%]GY'O9>8pa$'m;4k1YsgHY'JT3)R;+hSSVNdJ4"/P3WG?aCM#@Q,68S+et,.DYJaf]n5#:Et<nnrK2>[*%3!2m!W,Cm!&V#AIJX5%T8dOVWr,di($EhtkQGsZpi11%NnRj@_Y!1=!eMG1jd,/b8kk&e\0.J\XTn+0odEAn>00YeH^S564`?@dPUjrP'0B`gZan`cn>80;%Hj*.ro[]_oBB#D#G$s2,Gg<E</Iueo/hDUdKYP6X_uil)RRBcr=4*+uJ0\a;;C<8Rggdh`ZT,PN^l6L+$BEj*H+B#`+.!AgnU:)i%MQGnP_-'OH8^?puIH]1,j]$4MTa!(<q,oWO8<:+I2=l[bP5A?RPhUi2$Dcm/@^`29RjWuSWm%X_hK5hsL&'injmlOkW"9fgdKYEi%mm&qJ*SH3FB.&8$Nn/En_#;WP:#:9D,gJFJksWk?b6#0G,,jg'NbZGp04=L;Z/7PP:?[`lT%.pbb)U4P=0-je2FUuf>Y;O[ls5^l%kF_[HQ&b4SbM=%0?aCR0.:&)hY]F57\8%RBER\E)Yt'`g&e1pZhS1Q6ZE97#c9JbVd>A7/#]'QSc*85Tm6$XAUJ+3X+)_%/S:_Xc%`3M!rq;UXc8l1Z'Uf^4CBlGd>;)SV?G^.mI?n]^+g@,\+0&MbMGUh.@&%#<gH,Tq0^WR;]\D6T[F86)J;<9mk,4cs[AnP`/<-isF%eOA=(Jks:WKT!dgpC^2E_kgVVhmc%.K&"Cu)du&tb#ClR:-'maQ_cuY$(1Yl[gKI3\QJa?$tJdSRp4uD/p/_\q*nTsKF>F?@[t+)%L0u@q3,GHK<@7G+\7c2_&:>k6TZ!C4NhA/h3tSDFU,7+,,/nA@rPLSfXcPmdAHf((S=S]"6dE=5?I`EJ'(3Q:o:DSpZ57a7_/3^P%dH3d>ZU=HG53X/c(nmkU&B&_A:#tL/op9+g0?TYmg?t=(7*6tOi&QTjp-ETQUX?6_3SLPXEqcWs[chN*%!bW_[M,U*c7^#mUGOrg%^;ER_`fs-dql8)tpo3+/nO!%lZuA!4g&<!,I3B=9i#4.i.=_XBYitirQ]EG2bNT07Ie`TiV6</o)]+%8*)OOhYm\&`Z`/6'/bQrF%^tRLgLK+&HE)TAVi<dJmhRk+%is=3KFm7%kkC,lNPagV'4IP1K>/!l0Eup9lNJu/hZ);Rj(U%Y`B^=D[G1HO%"gYbm>gc3a!r@<5%Q=<Vh/?fqICiX,QbH9kY([nQJOspDNgm>WZ'n!\0EB2b#N7.@$4N3uS%:N``$]W+Hr?2hkn@.06EcqjXhVNC0`pt(fMdFU4ZjsSM%nTgqG+%]c$g:f+sbLj.c@_ooa)XPa5F)c]f$oru<Km:FU[&!<Pfl.dVke9:"A!oZk0R4\1TbZ-]2K]i4-oN!C1L[Ulq&9$<jdr63%]mT:#gDRWp&sVit!*9)1#'93GS\(La*b@gNpQXLDT?`=RH3hIg4MR3..]e4-Mh*9c(&5o'84CulSpGBQkfo!VBlL:hZNP=q==V-X%]ucE<DI6kDYB'n"\3/Hf&)o,96YrWMjZ=E;9*0^pXi#LN.h+ej41WDk3;bsm@G5<>5tSLVbP>K87q5IOCS!=?!l>nW;K=`:FHSR)%rE]6bI5aI&$H&;GfrR,OZ(B;5Z_I''oJ5XFW'FSgqlB^:mbYs&3>=6QaKg$*A6/!J7Z(!X\&?TYgb0tdlT`ekq=!co[F4l(AM:ep%`a!sBotK!`(pI!qf)>*Hq1'f(eg$TTqoMUp-/Rl1"8@N-Ti:iT<R4H$<?>uK3A1fdL?mokCQ!ih(%'ifK:oPVT7$#9F+D#Q*bFc>%)74^4AfN3=49;WEg&kKm].UgI#P*c7nJ4gMS0GpY?AdihqF)EJZn]\[jY!;'n7EPt`B*=YC=G9okg4ZrPi(nJgf?K4GAlYU=!Jg5%[2PW,PYa.>nSrF]pd@i0E>djUVdcrt_YIl0b/O>fV$3Tc]kk'kHQmi5`O]nSaMR+ai2BnISS2;3Y#aPa=t.>_?Q-=J:-X-d>c5+%%8/=QHM_3<@eK`,)-l;HJ&A(hK"/tFmO&64fPd=)).%dq?.Gq;\0=s8'=6sq\H,du,1PGd2,d1Y^rPeIQqA@;8\I^Q-qa+,3m&i<3%J%K)S<K!JlY[`=,+InL)#6AOG@rsQ9ppaG1'2%;iO9\EhBB$$0S!t7CqQGP'Da+hEK^7SkGQlCR]>k0+h"dZ(?TShmZ.D`?6Efl+%!TW/k?$d7CH0;q./(ZkM#i#sj43^jS.2(Nqp^Ad#]dcTW9=JbR92Y[:002HP$E,5E^m.=C91pK&gU=UiNOH2hMpQ:k;(^7mXLXc0%<`qF.#I'&XTqg2dXTc4":8LuV/Aths`3N1'4c0S1<Z?E]\Zu@&L!SnC#9VU8NkDa'6R,rE<g8D*kYr`u"pOa,3@7XME!%,$p)'bi%,]XscFs^<.fmB]M0&&WkN9DRrNb(G!>FchWfLPW?e/5DEh_@0?[^2bYbDk9"*`i@WMoDDghFj,+XFN#RKiBQcS1\IGbr,S%KE>AT%[mmLq10ZLFM+1%DJcYBn,1&\Y?a4Mp_LX[-;,R&s1,)$2XGGt(W[.s\HRdC3D[1?<eBYmsP(Pg#eZJ>)[2)r',Gs!,eI7L^bCR4t%+[u:4C'fs.]nDLP/0R$>;!'f!^^8Usm1Kep&-s7qEL5jnf*/aF41s(H8_G36YSm;Z^iVA7r0\Q.3Fo.4BTJ2YYR_cunc6WOP_qc,%QP<"?g/fR@:/WiB)N?,@&7C]l2oj+'>QP%*@kXc;PVpUrX:Y]b7IEaER9kQR9=qaSK@Ok=='E43!=+fDcjb]Ree`jug_:UY%B6]?%,K*k6C,eVWI#)l++eso?U&cI<>0&5]aaoU.6X`[#>kHQ];l%4*'pA)P3##+)Nj37hoRR[&,92LX:<>kL\Ij_[N'q,n_DEM-j?^@i%b0Eoj:#-t\FR!WJV)G<HHZ9LKQoNmHE-b.]@RclPNKV!iOAZZH8I0#?YfIa]Q6DZ\)p#+N>!iB=)>!oCT_XhBDu/l1[BD_J"8JZ3%r[##hW%DX_FAfO^\_-JER6=#.\cR_E0AK>&6dNU?+432Y"#jOlBYRXI^`"m^J6>Bp:c!4J,dX0jCf)-Ie8d@7Y5>H%S*;lL_qgg.%9iZh?(\mTr,fCV;m`A,j[/,LarH_[O5'XT?)m,OT5nT7lr5I&<K11;TZ"^V:kY8[PQMQ=C)PXQ0"H@D<mONQuX].Qp.7F,6J2F3A%7#5e2VD]fqblV5'S,QeP2?EMRA5hNEg\7#WQ"Uj)oa3Y;c_]:XN#gYLl>3IZTpP!8n=b#$fAjh$cprfVX3i?"gX)U,\?;C+ff]%3%JcDe\>T%4Z=q>f]%5pZe#!++Y5Qc*PLjfHW`F4fSd`'25gr^i`C+[Jb,2/`>V@^+FPV#n].=m5r'?g*'B$H3l^;*"/%DA%9dl;s\%24^E;e7j>UF)lfW(sm+&]\DFeZ$"e,k9B,u>LMQ'Gj^hdUHYglet27?iF($qg-A-ND.'^9Dfe$pRLJ@pB!d^*?o=C0Q:,jJ`>XR#%inbdelq7h\0[ZDQSN^K3HHVolA>8Hrs)93nh<5duR3?Loa:;N2C;&.\3_A1/7^]h4_e1UqL#ZDpgG+k,9+7757q*qfWhbWBd6"$n%lj3',W?5W&gC<BZMT/9637aPWqpXr,[oQZOK?4J\J@E#:/O)suH%VXt`MlkDRi?HBMa8<8e>54u"(iB8qZ6<F3q/KXFunDFc*dhS%fq:6m_-j6T*8!18\NsJXD:Y3*4RImj-:WDo`l<CV2B3^E#mW?(>:R3NO'7,4XX>X]^\Y'5%,).EcllM>"b_;p4rZZ8CWk&Zld]$+%M,?pnoU>9Tot;-g\_aP?AYQ0Bb>e(DKm%n44Es#>6[TT*&LZ1G-@emOeIr&7BX5LQ],<L'gK_&kD.(ao@%t&L($Q=_YG&B(a'*"]%:1k!Z$bS)Pa#l\f>"30^77SWFk+bHkXP[,8)j,.=VSZ;Ce52Zj@L5b4V-JqARa!*o;t](B$$Z0*N^\Xk#:rn6gH!l5^"-=KTOo0Y%Tq)M2ck\(m>]Q/)D6^D1iIfO;hIR4peCR\L?#4k:0ltk72j2."Nc-IO*_XhD<l?rJ]d<,e?LBJ:`G=2g[tZ&Rltp3Fe!5Dp_5D3C%Io/?=a.&*:`OqUoIZOh]YJ&f:A/dk-W,V#S)%n"G$(p^>b>>(Bbnim,b,fo<J(6nh\S:"Ojh86d:2Fg&$/9h<+#Su4k)]E"2X_d8%[^j.BEV+%gk5-,fD!pP(DKBaf;^-JZm)J66[Y"B/]V.785[8:EcEt=6TmSs:O1n!u0=W82T>r->-*!SZ_.%&EN,=p]]&$`UWmO*_%=O"N9MD+(HFuHiV<m\Ln+GPp>U4B)Z;N&.V\1c3'hp4u)<-bh3=s';Q3E6E9o,Vae(l$`q:g]N4I@H9IkA8ukQe1@13hL53RV\Yr%'l<kqilU=Wcg$'X1BAT#f(SS[FE*(uEn#Qg1PkL>2Be>to"1(Z](oHEe80""'TYn,('ne%e]>C1qLNNPWjujiBeO)2PLo`a%FpIr%Z5Fa3*Ve<j<PNDZ6J'fD87"H7fhU[2Ri=qC;25_'_F<D\dk%A4KLV&Klb/%H)tBIX?*QE.+T]16'l*L@eVC>n3QG*]:R@Ouk1s=U%-A(3b$i2(33Xc_8l[9)3;+V;281l1jJW[ZjUI@nQOh8u!;+$6;Ek2!ThLDt>N-6:WTc^u:q'f=>S+n5-KsVanfQ/j-e7.>$C[0-K%EF,`tC.OcK=5^sG^USbl6V<T"9M,bn`=?RVk83[3;*phiiTE.ogr\HQp@PH!:>/q$l[)X-Q1Iuh,=OAbltc7K=`9%u[77RI]FCf#%6L*E?n(D3l*n`U5[I?dVM@ucUW$X1G>[ME?:;s/d40cpJ,:,L`IS#RlSU#_KheO?/IR^odE=e1h'J578_r&#P6lHGng.ldd.Bm*I%Uj&S!$<UE;\$;"`e"l5,6b797T1KKfObqh\V^q%'_p?Xs3C2F#(:ClJQ,g.fqZYMJ6V<U#hocp/UZ_@(o"(JZMQh&5HUPjIoq7>P%6KFZD/,$'ehX.j,_]aI%]+dl$\HuWV@64[,95h/BXKO9+U)EQd#cVGIBpE#pRMoB\HeNjqkp_^OehVOmRgmO_>"FRi[HB]HNjSMD%b^M?,pSpd=Qd-.UV0ZLDk7,!C+uGCqqMFpDqb/#EUIsFV^:7Gm;N"h4p;+9ZCEdUkmPt*EK![j,1tF*uUs5"W@dfVhW@QN55-4'_%RReMa.q`'<Ub1R\djU)EnR6bGg?WkFoAf9;>nuUNCKAnPqY_BOQ8Oc<`Bf[E2fl`[?Z3[1McM#C;FUFbo.Mt`1A80.-6bmbQrI/!%6ts62X!3P\ps3d0GCKp\-@_7PZho]0E_-'N[mFd[G5"Y9kJ:g\BA-@NpU*S?H'11@e@.BcI"))TaSKNSOBsYge(`#b`?F&L]J(u/%^=lthGI'j3cX]af$@U-qS$jK9JUO"eoCG*sC_]KlA!b`P.#TuN2Z*n\kZ`g\^+e!^7C(:%,J@KP?@Rfn'$?e$3I8Y;Dr#$1/+%99%4.58n-LV!C#+r$]Y7<Y-dCml)S>9oOnZb]d4iK3tV##I//fqCVSq$oThe>7Xdp$p-4G=AdGRJ]?=q^Hd*E,(]`lV#Jm`d;cI(Gi<%4_[*>h:@a-imYTgO&MYI0?pudPMV'no4a5*]F<;]E^!1G]?F*?D`@QqdA?!Sf%H^'eT`"93i]1IL?I41q3+Xfh=XMr^U^9'=]5(&%?Z.STT0<t&]U+JHmW%U@h@J<shgTr'-Ef7uIb?qp(MZ`+NdYhaf2^))B+Iu@:@m^Z<_e-X4U"mB>t+sWm6@dQiUi>re%r?IDJD=W%fGq:XO#G#uV;-3cepP))A^3iKV`>]=iD+-./5dcd=!#*-8_9e*VnJY59nn!u#c&/14'r^u:@%/_F--c9$QN)jSpAGdUeenBHZ&M6%<dY(cVa(Z]Y6BC.B:hh`B'%?p\E`):IHbKfH[urqGY.^Io1cq\kYD3W<jqg]pBC3P&M5dlK[i(u@5rYJq`JdUR5<!2FmJ5(nI93!%c4T=4O;"f@g#W\pbp;!W]T+Y9Y`O7diPc;b)l3[bkJ?C_h[R$]XFq?NI`8tGTuBR9.;F7.JM_\%hHeH7eWGTY?dt0@lkh<J6JnST%NfYG2b+kH7-;l[/%^_<-0iDH:&%=41^;:k^DbH0%*KG1Ql/m@[h[;tB$ML?H/f$cL.s$X`H/gGZpTq6118M_D.nUI(?9;gCKs`2-%*'QcmjNn6^IFgjom+m?&OeS+n!\)\:%P:jG9[o3%C]Q\p9rB=9m#O^"I:ZcJ8(*NZ.\5MFj%nGq\-jt-Kml+"@A)`&DQu$O(d7op%-p=sHgI3HZgi:mhO!XTRkEWul7+M6V/J*-o-)%hjH,jmD`R2s\1`hpVqSYV_[;4F2$[mpY%[CA4;elE.$\LttWYaQ[L300\=p2an%.j<+[R:/GGdj7*Ma*55V&7>_]^rrK95S%u(C<\Z"Kb1NBb6KD:d4Y@-QTFs5(`bFc+tW*?=g0Sr,Rosm]nNX"Zp`esGj_e"5A-!&%4h,XU)(=T.;30AsplECS7.S`]W*,iA*<QI:T0"EVm^8*rAr)lmY7ZDWh!,V1SU02T)b*LkIlQH@27Z?ZS2Nh9"HLTMM#SkmE.@f>%B?&tUNr-l:/j*lW>ZRf=p$M#ubM;k9Nnl`sVBf-X/8\ftOe2Jp=TJk"8;tK8T37M0'9XZa($NB?A6%K8b]7$^n'DkiNF%Y-4D#@o%InA/?phm@+@$]U?\G&_D7nGnK+iV6#b`>6XXi<mL.$,uiTS#*b>$C`!&f@]B%hMY0Z%"aiYsHuihECaQ$F=TNPrP51g9p*"ZX)U-%o"JLZPX:dncF$F!n=N=jJ`si"+Je5?]tuMV^$/)9/,D0^i'r2lfLpbV@:c0#(;&:68Rr'lJkm!t">uFdq3Th:`'"hmL<6n/XmB=Q%X2cuMd%7']/+8`lO<$WMEC`V@(o\$>',3D%EkV)2lWp]qYBThH-^A5JGP8Dm*QrNPf-Pk/c`:-Qf<?V<?l*+FL=fd/`Y8N4rkO&A%60s$QJGq!6TG1Ak:*@X`UG#FJIG%Y#.8*b=)m)kI$$t>8mWi6HdC%Wg6fQoDP$u=CN\`LT_CRU'D_rgg9qP9W(;ZJch(#9JIeA$N%pf7r%Wb/plf"4cT:Em.+G$9T&f.1k#eKbH8jYg&h+KBS1dA,mQ8P%9MkUb/u1Ga=#@$Rq]=;^l3Z4U?qFWHAB`ijEpYac2*H`7=/%[JYd[P><Uhk`X/TEa[5iMjQlqHM]]Ga$,n)E_LAu%d)DIQK/Tep(jgc['gQEo8Z8s=;L')HE,t6d+G$lSY2t[e&5j+a!;/'\lN])%B.)0Nr6s!2@1-Xi2g90cX(],Aai,i]c(4#RLPa!*`NI7PoL>46%DrJ:NaWYA"Ts0-*iAR!D2G/5`*uDtJJBk+Lsid1*D^e,*YW![%X:;i];q/=76J&CGX:3c6bradkA-IdE8A/s<!D+1AI&\?X0-,RN0;u_a0]3<g_\raA6UO.SC2Sg:i\O#f5goHo#!g8@;,OmuXkeZ#%RkOh"A<Xh4*5cllInn8f=mQAK*INQ.iYcWjjd/X-G7ABq5+\Ku`@Y5=7p_h`=Js0-*+XO3dME,2+j;]>EA_@e:.f`f=CrSPi\G,f%'g-T#Qj%%_<q*Z&<,pGWRW3EUAG45PKL@JZ:fiB^Q.5/UA2PSWMn7\rf2r_+LLd)o:5`D!$#dCjRH3235,0]!!KIRkhoVeX?\C?h%G*%A!lM(i<k>YTc^`lrEeL6tJ9PA5:q3Q(C@=A6s(rc=cVEcA4K6S%e--6cu+H&(t?0U]Nkt6RJ."d@CNhW4'/K]V"dZl`QS`%=V%kqS9;Zgi`GVAjUIF/<1od)8?):elYXd[0$cqcGjsi-AZnr>cH/k"/l<Pk1KZ6Pd;JUl2O2-bWk*!)COAT^7f9)7)9LnSH$s\>rAI%>.uP,7krC/bsTSp_7S?llHj..;jtIPH3M'O&I*s?WC@U05Yo0hbZdjeT%`1?a'0D@q+_lr4Pm*;0.,\\#ah=V);8Vs1e2I^i)*FB%nl5>X%,o8DP%LZGgCn5Y*2.or.)K/NouDLha6^IZYJdh\4r0N%L[_N>'H7B6g\)O#'_kr(-"R*)\K8H%^fm*,:0oeY6PIoX!_!8&%hW*'qjYuQ]`C`%3Ts?l>ZY5hrHdAF'AmVeZ9qK\Ghg]$-p?,P9ejW[Np#%]YBj*?Tj9'Uf&?nMRg:jJ<imK3YBJ=1q76<j1!KL<@%-:E3fi#H[_!6PWA?83Fjh&p(]L#SER5#+pSF6!G#[t9o`*@cFN_7SW'^%a-H=S(mu`mJ_>gOS+P?Ui<_V&;>H1Fn!A[j6,o(*P\[%VZHmGYaI2N(,KRrT^2n@A]D=]oO),cD3QT%7ST#pUh*tniTRiGRSY8N,mWW.'F5+9[\24,GrLJ!5iNBqU8`kQf^E>#i`sPnH;P3d%b1R>To,mDXWsL5\@qYP).0=*o_aj[9&D&1rSdcc9q"JNETiqj?!W0Q[c]@>FO#RsTIMP;GAi?H]2iAh=L\pg\:f(KUZ*PUN7X$Jl%R"hA#)sYb'$4HJ!o?5f`@kR[ipPBVei7B4%OefZd\g2Q'nm,+(ns#MrTkT0D)4_r0=XeS3"qcckVdhhp7@YHMrD't)kn8)B/#o7X%CZQNliU0mV=+p.L%%,IaNSRNN`<RB2#\mOgrH((XOq\NPQXiJV;D-B_\bpg';B_\YfJ&nu2).u(VkI^KShbB3E4ldHC$u+j<A$#[%e)-ZFgD5@'n(l(*je.9Q!#E/UCc"p"+T[VB%Wa@(EY*Lfc9H`Gnaosl)Tr&\R=*1eOi`7t;$'<9-%]&JV#1$D+N]"sNa+5;<u0R.%Y\1;$dE*r3m+F/n>j):?c'?3S3fEqn20A[0FBlf3d5?#\8AtosIdcs^)ERg(3j)ZUkScKJW)P;2`;/N))ERg(3j)ZUkScM\$9F/]%_1QOe]Xei"6FGa620>9XE<Vo_]/Z[B:;;Ajf)$hoU!p3<@q-=qf?ib`d%U.35rEbiKOgW7TNc&3[LuYIp.G9Em7JMsW^N=%K1Kq.%3-!\__E#Y?=oLk<W@CIHmoLXrn4<"`;*Na()*6;2^7mC$oK,71\hZj16n?aQWp_]?%#4Hj*qY(5auqpO@/>.NHMs&XN#5XARI8s=%jQcJ5&"4fdYk$0aEhu9hBPU^7q%lJ@->cH`Vh3"@aM03tg6tP9Z.MbrK:!)eCBfbE=_acH`2fL.kA";WbITDZG5Fu`Lgn%.A,a)r%Z$`Y(MEmHX.`nXA9m]1.`YMQi=jftJ3HuE>_J;&ThY;Z;j=+3lrf0^FqD#!t1hX.@AJ9u.^1,/kg"R#d;^dX6T4R8gME8IeP?!CX%JMU]"\<j<1l'6upbQSJhn[0Q7!q1:Mq2Wu[[5B_K9="taX+8R#"#G&2%]JFB*F<`[;$GN0Wdd$q"g,.)e$P$@e6H_$*-gYsjBTkK%b_hNo'B<_q")iMCA6=sa0\'pp:"SpS)5EXfI8I4#2$L3o.mug&a;`_aOuWN0VSrLh@n%1h#B@tl9_8mVBc`":#+2-.-NE`)QR=go%EFQV!-'pW!Ft`!iD\q(iMr6noEa%$\$c),QW:H)IU-;-?k=\mgX."r0738Oe`SS+>HEeh&+BAmO#V?.P%mgDlGr1D_H5/qRY>jqV%,K+l3.!SCP?1Y"q"fesdepTo/..[2A`Em>Ha$c3J\Z,3Ck`D7!bB$28b:=St1:c(2j`_HKROje)%(Xl&I2%r1B#?]fV38-q<jb1f%a6I>>6uC7GjH%j`2."dVMm:9Of+&2WW8o,,10-Ij]VACcVAa01Xt.bS^k!(8+A&=L)2P!sM9+nBKTu:o=\OTH@A=/ko0aT5O\r3C%jRM-CIRIdF5<:"+b#nW3nf3qSZO>$#S7#c!QKMKu"-18D190[=qXG.8!8u;ImPpjJc$VoKVcrTbL^Yb";c]^n,'aGoTS6)C!\D?M%d>l;80$_9s$nB[eZogk-=[j3h&9;EOXg-<V6T+$XLGE0(\RqJYeg.C;a(-sHU2Vg.30+C2aL[[Z)<CFYl.SE0m-=0M.Nd-"/fdbP%p)mlXr&W"6<K<J?RcV0iFk&p'FiWXI,IU!7<=0ZM5o[Cj<(SB=6[tB#HFNcaOeU_Acg*Bpq/B:rS@B>u<l?#M;l<t5GKfkmk3M!u%AF+F2E"YD2\-b(KHs(M.WlN].nU@dV,4:h)WS)1F'1#Dp&#YO!`P6JgH8sk1,8E'u>s01IZ<%WN1j9sD&#V08P*E[Ze\c+)`O*'r%T":huX@ErZa`8R+'Zu7hp+=PM6p@^EF!=?Dralp,`XUi]+iP.PUM?A#MU,u.9u8V`8"tO.N5K$_-`H*hB/4FIj_lrHEH.OmfNXpL%D_C)'q;^/OG]s(b%YR.T-+e)aCA;c?$6$*!T%>>g6NEs'XGjk6do=6J[AhYdI;^+qgWXukY[m5;VZC9eB%4k/onq]JY<M`?mK<&"%[&DA9&m40N/Zgkqr?Hk&:I@LB1f%n/qt=N%W;,^\$Ykra<:]AY%$VhbHt5Z\n*JLk&ZNm0eD=>84(Ma1,5(I?'rc+9Vl<3UE)'8m%MX&0@Y=M)Y:/R.2i0ZS1>*@L8=hjX.HYBGD,U;hC$b'J3%A-B/f4&Y!0K><pkYaBK(,M*#oD;EFrNi.m<=6c]jccZtqsR2:I^Q=@%\.h^:%&-[e_WdZKE3`A$U\L4up"?[CA(\A&c[f.E*9e2%9f-ok[82J-o#D(<K4U1u*?,,2@d`SKirCh9VEEQ"f07F8+iEG#(K@H_%T1s4^kag!,VHfY^eEUA"MjotW]kJOC_b,U$DIRo'*?oT@S50S92[9&/b]IVuR6U=-Ms%u`WLUK>ITYsu:AVD`%;q_jE[MNI0#!RB%42mO!PKd+&SU)G$(_d>Q?is\$csH=-OaSi0R>X&HCU(gX1N$JI^ZFc]]C%5!Qb8T@Qb:u<EmVC`#+oHAG*.X%T!GK*lHZ!nMVX"Q%9r.P^D->`*]J'[uX525kqPAhOi_N+,$FO!QI=+WT7d-nYfF;+D/_k*>\4#`.V0?2b)3B+[ne*Wpl>iRu@2D'ks,$1#[#3[GFXla.%_$dp`]2bc(M:BqK-UTJ][/PK$G>Hp`9/j$h:%hmE6^OF6p[LE(m>WTo.u,0qioE49ZJDA0Nh,o%>)(q'VBCWL[qn-Dl>/p)N[Phg%j&NS$Rk#jc^"BTHPZsshlWrrG&`#KKV^_!fc;7M19sjAoqDg+i8uJK1-ok:Uo1Kte48pQeOX)ZmUpsLui98Vg9le"-_S$^ZVb$+9%_\A*V&XV\Rl!.esQ9;8kKfec:3R.Qfhtq#-fne>\);d;Z[KP.!4X4Qq1/+)oXY1DmGnH0qFBADKkjXJuUt'S-`aR(ke#BGOp@%!'%[[Kt>207rur2Q2\/LDlVgo5;hpk+jB>.W`E+-kAuC51>\nnL3C[U:X6Xen2FKFlV_FLjJi-`a+CgS[p%HTe[':,8\5/Y2a`a>)4e%C2k$2q3ED.VGjZ93H[3MM0#gp:edig9=MA\H?;$8g12JK@89fsVa_;+c#L=03ji-Pq2ID4W2<K45HHLcXesS$iB;$8Sai8fVl6Ki%%EAs^VUOMV$*3;a<8!e7RSM*5WRP#j=\YgVGtMkQ:K'uc#!d3I_MP;We94JAF5VOR9d]t73"beIeT>QfA#_U87oe$;e^A0V0>F]f%;e(PcD#CeX3ji-Poh)AsWp/"o`1K>kiKRA=Z2jN<=CaLrhmL@^DUQ8<MdHIAnZcF:55hE0];BdlWr))R]Sk7p=(fOb0ZU)nf6KXF%,eVR('1XpJL5psZ&Z@gn%',u]6tqg[D[Q1om<+5JDbM0:P.WORLcXbRANc3P.ngTl7Yad.f.QMr(sNdmL9,;-/#(BZ@Vp(h\QTP<%jgM8hMsc$mZR1SHX5q0cG0/!9F(];taG-Zt-/G_tEB,ohb4qDe;u+O*?ZRSoEU$hOGP!b:#=K8e\E7Z^U8W7_h''0uWn6#TCYr)E%\iY$*B\bYa3EMnJQde,qlG,H=`lV!A?8p5JN!H-YCNSsdXY6:^Eu3>?j;oA(CQ/_dN]i+=("-f/1eTW)$nDaoP;l6;V4e5`mBjb5%P/n2Q'VR`C8_1L^96e>\R*V>GH6RHEWhRi9B1$D#pJc#H#8MDrA4(oE)<?F>c@uBsLA>>VZ_7Ad\VtG)`+Ei_:/^n4r)O)XZ?I:u%EqE)C3H3,>c0T0eUOb0Kg_/22;V:c=8IS:jYZ>3b9bu<gpQHr^\'plTLk$LcOg-+*)lPW(bbT<H-7_/%.hB/Y<QBr8HhQ(_W"P.%%rFt/PBdWJ-[L#`-RA)h<pfE.X@dRCKK_[<%aPb1r.^t4`U&3Z`rHIqWa.qGs%Z4Rnk5fNsE(U*<kP)GcMbr&RI]^f$%a.l>C)/T&%Eei96<DgX=bsI-e,OiI\iGQEE;LZ[B;>!=DElISC<h$YYc@e-*JfF-fb/[GZU!=*kLYe9i]6YZdS+;S@_n@#W[*Ihn;]fKJL-'JN%^&IGS40tiRU["aeO/>7HSKrROfYZ@O+&+]7@Q390."E>PW`H6L4Sk@c<*sl%.>Roi3EI&XBtL@8F+rSCUn71H0XhfRKVMf\Mc4CB%JeT)h0qmq(N9f6KG.Vu@7]D,6QZ#Y/P:hK=d#;c-hts9T`cP;pPOn'LV`frPQSE2SKGh^'/I.Lp-!dAte5_h%.U&6^RF+V_782"-%V>WgJasRi1G`-PZdjLnl\SK>BPXH7X9U%7PiYY8t99`h05#%"eRQm(8MFmCl%]sa<DbS_<9$`(?WsCfXBIXn?:3PIRZXO#;X1$`@%&(BF'3hORU9mOR-C0]<]':mOQ4Oj.^)HS''FOd^(N@PeG63GVoWT3#E5?.)P^$6;EUr?Z]#O@GiF1U3\B"[NVe`t<sKhmt<[^PYh%XZWDLl*DQqn_hcs,^.C[Oqls3AF?9b5FF<t4"B%'p@*G[%9:O=@7qABT/GomgtG2AbjHuQb&+GY%$0nVf)DrKYf6%dmoi/)D[N<,%H*BX&h`@QmZuZ/oeO8](o`J]`,!;@L@b80SmP^eF&%?Pu*9',5o$Xnd`9k^[c:+Q(Xu$H;ht8UOlNK,-''2UJ<Wd%M3+`]Y'Yh#t%n31uV<\C-#81SoI0-X;)a(1ni/$2bp^"9kdYjnBC'XY/FlB^P,H@_[bKMUBWGWX5Ocr@VRJP`^`ogRPsq!o\O-6RVuX)1Fu-DAc3%@AVF%=r=/0<2H7oHkIbePA-5jMDO7XmfsRb'.4<ZRfW*1>4*gWV[R:+,ftI@'p@X%$>U;T396>!]o=Y\o%uJd8#KDX,W1kOV5c7P%'9T)bnKfTHTgKgKk#:#.$C[ro[)5eBFK3c21,L;TS!oNg`MT!4ri&;f;(:Eha7/DV`;/6CqI72(c8\J?@cI+FU@*Rk#O9K)-VoY1%d9^^lgfslJBoh%OQ1jZ?q;"pM@+PgI^,?RUr?r[,g_)U?lo.Ih0jTd7&mdbLQfk,cpdqi-22OcPo/7+/G#N)C0@.'*-lj")f",>s%<<4.f#d&>PS;DPHUK,M:=`Je]N8e@<U_/kDem@#tc)_cj;a0.Y\Q:t,f3?rG(#6q(=MC8DfO7js/=iR*V#_LC_G2[r-]b9\J+aK\%AoYhl59d2I[B&&RZqi\<>=cd%,Z]je2q*IkC6_K-XKbBb3TiXQ8[JD-=OE$I)g^O"P0OfIn_]Q4o&D[@0WO"h?OCIgkDed%WTEg^%/&m9(VM,'.CM[t5bQ5NODUG`A%g/\r<K?+,@4fe+F<t3G-f^T^cK2k^CPL_'JF/U0bBA,kVuegA*K#';rMBouU6W;IJBCeJ%]]Xf%>6?;DqL29FW%iaJ21R.oWWuK()Q]X>p;INC!`UmsW\o=\H*Cn\!;36*X^$QIWrU]FWFe)rC95WZ!Lg+k<*:Ff:^*f0q^/9C<*^_]%=aKdgp"N.8IWHagiKs,7<hu>b;EgYM_?hmWZ^<Qfa'Hh8dE6t.;Ej>?i]hW9+4<b%U/#eZ+3GW]>8:tm-gaS&%_TRIQ^@:1726A2%;'"O3;e&cFXM!)E^W#ORB1$Cjl??&NQd39n#G)CtbBs1e]68e4U#btEkspH7o99`sf2"a`\Qf#m4<$o&f2"UJ@<=DlfmEZ+lRPbO%Y?tK-<^4,?s8H=hrQGh2rA=9FRBP[4;7<4AXaYWgb:i>We*i`;m,Gg-rNrTmoZk!.r*DVd%e7"aBQ`P6Ws;J;SaNK>jr%Z*.;LZ-%F(TBpT>("CDu:=DqWUdt&qB8HHi<`E;SUcNQR>Vsh<Uu23lUM6*.P/a?5E2#_I>aS]m_?-GrK`HhZ<KA*HA9T"H$O2eH'V!07;BS%83Q<G5Q*':Cb8G%YFfEP$A!*fZfi4/Rk@J[FDpi9e\*#DYFjZ8:%Cf_qkcooV@U2g:I!fA[3G8[p\Ll>Di(d@>0GspoeZ:nc."ln%h<S]OpQ)u=O"X"&^X_chp[K,+-YN9>^0f[]VZK;]5/4;`OPfB%>ij,;L^g\-Blj%FkpNo3A$F#/l_f6(#CA,Mnb;nEhs)T5Pt0]s%Vn_,jPsoZU]ma-rP2YH7nUfF>%5[bK*NqZnI=*EP(/sstAb2fYm,.,Al7+t,$hLuWrA4T1goZ#r?VYUEhk#)7DY6)g.db@9>V4@J%iNR"IiL7F2:Z'FU/*i80f.X7QX5CbfnboHpGQ0ijSa)k8ma74MXcKuQmsllm9l%:hYM\f,iGksf'_hG1C8cHZ+3&=62:T7g%n0#a%ENc!`U6B1_l+hZEFI2BN@je=&d_=8X>hi6&0s``5L?m!7n+BVcJ`<e\-cd@I,j@sTjL"`Xme&B='g9OLIej5QHSb4Gn+G-Z*t&t^%A*+/.$NYku<f?2BZMqOd#Pp-h][or-,l%lh;q88oqC0,0cR@]A2#$k2:CcsO[kDr%AU8UKRiGU;oo'Da?l.-BPML\$(OjgCmHQ(U%/'8VnR\Y+cjbXhl8me]slTs*5j&!9s/-r>q=d'-"kbu;C)ass.F2K]]An$C,V/Gn=hHUW.VcesqNp<T[(Y@nTJ8d)W_85Fu*+C8f%EdI_V\EeHGre9*ps2br)nP/HLB:"\5hKm'NI/;">,OrsW`U:6RrS0nlB$[Zc80C$N?^IAdN<!IH1b7Ogr;E^d)7H`DO-:'%'DZom%dA)W?S3(!R53pu_B$#>`BglZ>bFd,5O.FBFUGoX%RuHq_jJkW8UXr\o]pkOE#9.!_d7HI-\@+3LmBdsO!UiP07ZDm=]W$uK99f%-%4Ad./l9lr`\7_24KT"O%+)@A;O(a"Vl+c'^Kn(34<RCa_#W39.gkBsKn"@YFCu/4V]",bi\daePQX7B_581TDh&<iU_A/0r50;Us%C%p\oc+8L0QrOn`Ad<F&lX6+,Kh]rrGu#fjSs-lOIsC4R0:#;9m%D5Uh>)G3)kosQ3aWkAg\KFZ)jIOL^#Wo@D7O\b@j`nm+oHYu%P.U'rL&+'dD@9oi<>'58F:HH_Je.4mP1=[(?J$!"b4H@]5dTrd\UTLn'S^8Ri&4T]"ujHCEoMIi>C+MJ5(ILnFCkI@oTlOID1-s+%nABliDo-RXhH:8P1-U1u0:Oj(Y@"H!\](SZaYb+]5J<nKV^hNG*PS'L:slG,?.PnucO=,?&](RWAKuS?=\B`n"J#B;dY/pd^l]Jl%Mo7`fl5/hiS^l<\_j(c4!41<."()E:rl&o^>b\C]!4GLEMa%$@m&JWOUsD's`.Z![L0OKsZ0_i.]_I&sc95og#Jq_#oUV$[/Na;2%+05i[i;kBQ:s&a1l@Kt9p`&k%dWP6Yju5J<o5T"'4:'mB%E[m(Q9\Bc"^1Mb6g+OWQ=r-#X-n>,ohGRXm#Si9ZZl0i4k+.a&PI/q%$VV]VY<4i7?]h9a&61;6a?c\XfQP;d*Sbcl=B%k]3_/!!U=s'=/R;1jIi*J2*P[hKPWP)B6s)(hLA-+F*Z06E[t@PafVmKWU.>W\%!X8D:<O(kXVqfgC8q^i^T)dkVo1FP#O)/_fkfWcqI%5!@/uGJ3i@TU,\O28F9>0dXZA!!G8.rc%Nt<sNSZp1RWgJVLU@RNg%&Ac)%"Z-<F#'mJ',f#+[7sD:&P!Tj8nqcI](&AUW5)!,NV9;:A^:nOt56lGk?\83f08/gd,&J_[Ft.7g91\oX34gRJAj6SG3;\a*I<jeS%f-K,fEIsXgm3Q,V%>mkB>Y%4>?S64dQ0f._7hUC9icXM,HU't;Ek#<Vq@3Ed5J#2h;YWXOgKflXkdRc'26bpjIm#n1MVbkT>V9;H%`2+LV2jG2Tme<&r/tIE;5B4[//":mp%\#P&'*arm%ltfZ4C#7!']UW[7S_8bkX"%eqcUDT"8J;m%;iiFVlJ#5F3[>=CG]'7O?j+L%)AbV)f1XCW[:kVTdj!sTgV[/`:iV`Vj[Y$I"9oI\4I1<T:\QA'I2Jr)eV,jqH$q(B<qW\q:qVZ8qHpqg/dgaecW(<^o8(&[-Xk*k%m7X[Ll7:(LNBl@S*>bI.itOm8*Hn.Co)LLe\WU&Dd!fOeM7_^j9-;&Q9JSApIb&CGCZ6:?"cN''ML`_.J1s^1LFs4GH%(4N/<g'k%g-dW@DEKn[SZ4Nm!oUo#4fi2-BRI"gX%&E3ZI$?YfoOLlJY2[$n?j,Z,5h_O$o\<%,GRsF2XeKLqffpUaS7dY'qutZWs\$bnrp=(%"i=^>jFbp12iGn''\8P=,$E0&Y.6MN>PLC"m:R#%Z8!at%/RHY'D/A!KH-T%9lTB5<fdn_%RYZ\oi]2a5oE<KjPZ<%;"!Nc>R8Ig%`Z,p5M34hX5X"H@**"O9`!B21W,K9sTV7k[&FMO%nV%C-=4aV^5^B+jSZJo$YqR@d8uN^c64R`Hcjg#dM"MFWq^n_S!g3%0<N<r7%SkPpD,Xtfu4t^9H*+XnADRmL-;&+OXTP`X=3=%U^0LCSfrGa^U./(%DWAroJ3*IbqF23gQ'nR8(Lp7"]>XZKlq:T[mL2r?!2&('?%_\t"oJT:MVgg$9O62JBn#j%pB($^55MNe""<[O%]A]jlIPic5)*2,b`35$=j6B:;!L@cd=)59F"q&9L^nC'mYbEbg8p"=`ni0C<i%cBUEKHiqKj'e&gNdm]EgJ7Mq3.(A#EL6^P""/O7cT)qar*^Cmj=NL#4D*g/s#+SL^eeD^ZU>DA9TGbuW<NLJu)Gb`B[L#\3A!Cd,%MG"tb5Z0C0\M)NVZ_E:WI$?:91b4KsZnTSRlP2/NN&J5r'N:b=+Y.(:jP[)&J6q=V_.gKN'`h\MUCY49_LTWY_-SB3TtFmh!#kbm%0&UA7_nbhuEZUr?%d\W]NDuntS;^q1:d4*@c&9OmGmWrr[1U=_oiW:O5iHHA;(P[Vj._.T6MWUi"G9p4k3gDc0R=fpAc-eI-8c23%3(A%p0Kb.ja?E_($+f"$RKk"a5WN4Gamp1jJ3>1YA^-$o$3<NtA?;7&YZ%l_6:(d?0m=>UPnskeC[*TKn2.Xb84c`ph,*OSBQ:m*%K)o7#>I4,G%DFff0kUM\:,VRBd0M)?Ie+U+U:]!b29K&q:.6jnB%$;ph5HNiQnntg="fQ5<+@Te,`68)IeD48S#]Gd#&_4V#!)=B%@/5RlYSJ<lI9Rr2B7pVdBe*Eojd6NUdQ?Ml'QRl`qI*Dr6b/Gf82OSb1;KYOaS]=0?V7bSbk+:_.VrK(+2?MR4%q=q5)X]\@-=,:%23Ed6BW+-S;df6%)$LIS4gM%1!S8Fh-<Fk(R4p]Jo";^.4$T1Gb+X4"Oe]W3#9DmkeRbU:)&D5IB5FXPrt,@a'7(U+/ZibW[q&Fu%-=&,(Z^sc3cD`e]qeF"g(e^O3J`mK<@IaD2&];>#cU-Db6*`5/YnN+k-a%HuTHr$5IMW-BDd4XSQ"0n5e>n[Zk\OW5'ZURR[*?F!%isU+*+Y5uEG<!lTBi`dU5bo%h%c[-aqW[;-O_dDc+)uoi0Q_hh;(2p[0V9.6&Vr,k#XK!t+(dcW,#1=uW%VAhTgf-^Pm0_<=Pk!t%V2G#KlT:"dD>Clp%%bLso4XdMCe2/0&Kubbq^i.\hoUnWA&HuKpas3i)`n8oL.#A;Dmlc`,655R!3k)n-L@]7_U[Fn(tt<FL:LK5%U`t?+\4k%p/V]cE=5l4c1'U6OD>*lrOU!RZ-ibA@q4Iin=amB4in=of&m-9b\aU4Qr2acBa(dnQPA)"^jaVXPiI?2dK%&<!)nJS:%^@5kSB0kE3`4uN-l`_>!m$Fr]8#E+8(\^>%r+Y3;),-R,%kd&$)eio2GrK@t[/7G/]Y_L2(:tskkioosH-7VM*Pd?rT=G1/MGHUW%@h=O*AmEEJg6#jOh0V.q?)(fH)5?7r*$!Oi\ODNAfiGp%)rtW%c`__D4#1gK0CI_*i=iAue4?t`?^8pBi'YWgC4(e>J4JMq,%Ui&%,@pqjg7)Y?2C(&o@o(dlGSYsb+q"r>1IVa90?KYVa<YCkSd?IMr"MW8\,jAhjl62_8>IfP;/8$9>]"cNhq:CEfYX+ZLD`+n,]C/^%@-?>TDCpTuj?7JUh;t%9n8$/I$7n2_/ga-r(Su^/"^nV(JbZ*J#D(M0JCBru!8'FBo,u\Mb^GJtf*?S%-U(N/Li0H;@IF:pBVd<e%S3V%,2l-%/3aj4O>W979TI<bHOhs,9`ZRINKI-s<!79sqcACj(m3[8"d]F#[/;sUc`7AuL%0a?[AONJI0KC%"MWuu`"!2kB._;G5%BJb%7)\G@!F\]rQ!'Xkn87@PW7]::uf;qql]"\JZ>p'PYWAir705;a:YW8a`o:iXOSpOe3d#Xu6-3*#f>*copZ(:4a=k'U"k2A=Y%k<4j3m"?e.Ql]`e*s"1XX$+%ZES)qefWPLWZ;-iC),_>NJuE!dK1C'Zl7Wg`N;_%8TFa>%Q3L+(PZ79>m)NgfIn`Oi;_fSe#;N`E%q2_#-dCsMV.#f<:$VGP)E(3<$gI^YfAF=M:5)m6Ilso(HIOb@kZDj):N,GVYT=Juh'9T3#c1a6b82f[Z<4Ql;%K]e?,PPd@9r>+m%ac"DjG?.0D)X(rh5WD8?YE1'H<S8c93?l1smG1q+cPs(3\SXE1!jLGJV72s&D)Zb8S\=`cCJma8`P!^j$Q#Lge#2RZqB7<@Fi)7!%?rsPMKa'6I>One31.a9*ITUuBcVX8RSK(&L<=CNK\Fb[3=TFX*\k"B\"Q9[jnQ4eW+of4hOR0<:_=LCDgV%-\j/'(d:6i[Hef/b7%]+0`>Gl-;_>diB,:H]%:m'`'^'K/knD]!rk*+UqbXPspdn;7uiS<leW?=&!T)t=]U@Op<9ZOu(&$_)r8(sZuMHdH]i]g*[+3R[@#%3G.oU#dW?h\Rk;AQ%;1a0m?T>\kfG!:Z:sM/`L*T2th<0Jg"PMYq+L!`1:[4n*#Zd]7Z`*$!$LWTmSs:O59F`=7"]=6(8M[=oGLr%(f)KC@n$nc)TehG2A:<_(u569K6Wg!J%-(kl59I?Q5I!g$cjD4b>@l+k_hAZXcuI%a6+e$Y7Q7"D6(`\!U"6LYMd._"OMThW("C<%BU""1p/CD27%N(%lMWh;p[+lj.KYpo=F!!]o#p7jRN&gciZ*lWG\b<#gma<nr*5Ng(E=(0M\GdH=;lS[n#A<6mO5(pN3XTpTYXR#%MM"qHT5K?\%cZ^'^Sj(Yfsaq;)Q,oiDX7_N`oD7-F5Dl7F*nSP1pkL+i-3P!+]/r\EhXlt"GMa=\K1:DlZk^HpXK[IDgOq6k4mp$%[#K*Pe(ld<S*^Q<P2Xme2-Ye>CA;6D@am\R:dVKS6jWj]9YAK.3EC:kNM,kj,`X!fV;7;>0j2BR>3g`C$l3(,FC?#W^9?EI?g@IL%j\,2+KY4$@nTG*Mer*?%PU8q'PUR79":7!pLX"nY>^=+*>Z?Bp%\G;,<ShGeI40<r.5;ZnQJ!(EP4Fp+]kJZr)>MFPYE='9nD[F\%S`duF?'!khig"QPY4.=tQCq;\<FFog+5_6=bd`B\TbNG$g"Y;RCF(j/;^GYJM3?6g?khIe34n4j6b+"W.5>BT/E7DcVLV2^L!9n'%$h,6UjV2b^T?rI#!e-qb-Z>V''9gYa+BDO6kksA8@XFYd7u(.K]l!RBgsVBVHaAD_EXn\O^-'[<U4M6"4iI)2c.AtI%s-QRi+_9!%b2,jO>ieVcQc)Q>&3W4AM+&!cf5$M@]5Z.%@n1li"f`8_\\b*K;oULe(%;*GoB9?6[<iZ'022Jm;o1jDUbt<?PJ?J'Z6iJRBP<18%cmq^:'FYt%E[+u4!\#u&ZgA7#hP8f/3+!Zp[ScN031FZ>&Rg9_h-U1E?7Ru]!?%R<3N.KjLp5ekA]S9fQ/N0R!_`**Lao7l-'V#!%62Q6Jl(+)jXk0ue)RU@7U+0!Yh(.2RW4IZXq@/Brcmdp$9&gW]M0"Mm:9/?JV3+d3WsXtXS*t0+L"r(A%niMX-/7Gn24dTdGI#Mb%-PsgILV%ipmWQQ`pX@@02M'suP`;BsK[05W.L<@MTn+L)O$61b`U_1glL8N!65H[0pCjG[$.b#oq)ToGN\R<bC05MM;])cRo(/aC%D1fP0q10r&$s>Di?D`hWf`07Cj6(F3[<':%*p[/04pN`!Vs>N5?CrIJ.SJF6;?8BN2Llno!VVmk&@>UV]RipDHsJR>R=H;Ec-)'C%]A]5am!\),r@r6s?eRCj1\(:+&tHQe&BT'dGOCn`M:]e&k54mhE\T$uFgI]dB+KH2(bg4$NJD*0plU)*)NDIWSn%CjP:>ppEhD,@%dCH:4G"d?e'KrY\n0R[b.u)\rPF<Z#k.F(df8K&en]K<7U=<i#=V!M6+-Xk7=Y1SKFT6PcOIdb.BFhGdftc9k,T9+$94<k-k^o]8%rE?I,OE-?$3A@%3Qc<(QKrq"N)^sR)bFumGWM4l>JbcI2P[f0ZQSf$rn%>[g/NZ:j*(i^%gZHW9bSW253*cbokW7*6LBVi[%(ftq%@rMOQfQeX$>sE;I)V<'Q2:5J$ALQ`HQ!eGj,]M$O0m)59EuCF9)*7-f0c8c8GJ%a<-Hk<TA/cF>H!6nmPnU';omD5:n^A"qFYj&Y%=jcdt<q8,M_29"p0CUKVUl,"F$F>_9H&>O:>c$SF9/Lh.jAAR6Q&deGjSZ)TLpCP'[/hmQ[X3`<J<R;Ec`M_rQ-o#"''>Ncf5\@^%e!\s+beV<45BITHb0M)H,$_KRkGuh-b\rao48\Sdl>mPsTZ(`!EY"a4<"W-G]CnR/&$3s!0$@M7XHW&dCVqZldROE2-qSrdgq2N=%80dk#o?419aLc[*E;BE2nYJ^\m!prh"FUW6>NGYp:K>%]c%G[fmNUfn:O?H[(.GR2HNi1,-m2GIQ'jKb:X.N#U*tU;P9L?k!b\(s%k?Rn@Ls3raWZLA\Dm0*jp\/J?"BASb7`OpeKHGs1.N"n*En]/[cs,tDPe@kTgoBJS1H@b&<LYlSDYc$LiA@XZiuXa<N.;HYM[#Wf%JLkq#e^sJJ^q.tQMM0;ONDFH,GmK&)WO$m.@tWHq8`1'@POe<b]P"Q`1VCSq=k`iJb`^UYd'#[iIbo1h%e`nTYURGl3_/q/Z011J%rU6r@kN[QhiE?5^>Mgr[R0:6\i29=%Ta%DFS)iJQQ@YqS<cLn87nZHI@cI-_<J((?a^>9@Z0;IoY(-`I=C!=%VD]"PMp^`?0Y=Jj%S\Fij@!5h^3m5Rt2;bg\lLL=C#0a51X#'8=AmA)H(6/,pDn$eRjJI=-2dEM(W&^L9%@?B"C<l"^g$G>Rb2pu]:r&&lhZmLQO0+5d%:h^0EcF4ZOH<I7]1fW=Zf9Yr%j-8hsmmc4HY?!'l."(JVTS@Y?Rmerb$F!^Hr]6q\\s:],RchDcJj>)^PqGM:U07rJ4c=_*T=k/B%!l#fDJ*teK%\>dHa=48LF,*:A7%GF$HT&4LpIDCn=9dL?mK1*g\BL#dRsC+H.Q]U7bGalZ]:2ZUVls1\l<.DC55pLmY6WtJTUh!b%^^ApmTu+Jk8'>D2l_87oeu0`h3'+VKFsr+%W'/&[*j1bJ/RaBWk&Pn+Mf^Oi\NI$uB24<cQQtah4-?ZL/r,m?kL*V9>V86Nm7MH%%E]G+4kL*V9>gD7Z4-\mIfs*NcSBK<=2;iQ:Q7PRJ>>rT6^t+ZG2-cQQ@L1JR#*h)(hW`SZ^jN&j(P]F[mZhu10I,Yj1*&<TONci_%pa:f7NQ^PTLC"5u"*./%h_35f$])p\i>BMGGV"+KU6,ih@TU2K*?@pPm#!JNAjJ44P2KA5B:s;fSdTOeGIJ\je]]paDdXGXWhG@J%H1TD)jd]SD^W02I9cFsfq/VTOW2Mh^>4u&C_>0:`N:dYUe&o,0*a.W[a-R(o2qX^tPit4>L5!GYUfeOn6$'TC(Rq2r=u)/+\3XV'%6A.f7J[ggSaUaI4Gig$;H)PchX>cGXFMRSZOULlN*O%5-F^h&bHgH:M)^6)7d/cm3QMH]#4P]J[MmWl_H1Vh,5?()KmbEThhp*t8%:^!o3-I.+mKPq:Uc&9!1gNBkPV0GODK<:9:2(-4;4c;40\7Q4Qp])H\o+"m0>;E\Pc2mfNib(U_a#ggAMp$P@#A##+g$X9o@N6`e%\Jan,UqhIh<:B!Y0*X/rReu:`>s$oYOL*TXa4L\&?F2+F?Oj17DMW]<bBbqY/h?5S*q;t77'G`q#RTM`iDYMI+QOOKP7b0Vfe"9u%!@q\Hc?YI4Zcj/)h=uS,:mjeFEA&kajF?F-\lrLX3R:6SJmA2=3KfVu8S<1O*8G#LVR&<d%T`V_FB0d4R9Qbq1q-dpSaTNj-*WqQ%:Y)er'*lRaE+'e@POYR&Q9"M=eC`o0D4*a_WR`uZCWd^>@q0;1Et3W/DI<mdVWB6p<$jWKgb;2n0<`OISKj#8I678lCH.C=?;0b]%q4Z(@J1cTHQad5E@Bb$+3:?p$T\lBmjQV1uX08kXoZD_J]KaHqNP,s"ml#Ka8qjnp>\3%(0s=?f&qRqik&2:QB=C'$qH/$<nT^mP%iq'tLf]":AO7hcbjAU!he/q?[98uG"muJL2$QC+"Zka1I_g%inoBJW@f,?62r>I:JF4?-V<^t01$Q!D1O0Tg3Do_HR'GK>b#PJW"%g-8Gq#O6+Q"YMd_"0%?er\4r-aY5;c6!t3Jq1*XBiU#m'6_+?,A\uCV4SgdmS46^Y8++kA]-&V6o/kt@7k'"JEl&Q4EaDV]!aa0J%$qNCG"0!r6Sp&)e_SEkTL-3iLj@3D$FDlVM3g-8)40K6?,/sB.pGF2X*WC9grBA!6]L4KukB8aI5<]!:fK*F%&(:Zh,8k)TU*k$Q%@:?n12%5,>(m)nX)9gRNIK^5+R`)!<TF+bDW]?/5:^'.l\qgWF(h6%4J:4RRA6$LJJ8BL/$+@e*1?D/Z\XQb,QC11$S/H3%`lr0k%I:"QsLUB=([`s3ic;O=0G5>hCAitu@dNf[>==XZ8Nl*sm1ms"cPf=YuMjeqb_!3k#UT;U$&!(fP&l'bD8Fbs3f%KXtrVD8?O%25@%Bf$4apLMlV5AS.c_H$Ge#dD_kXto!4jcc*m1ge?\4]m-Q%r2pAm<T[m[f54t1R'PQ)U<Q=P`aMBEPB*9&$'8IT3lH/4@V+f3dD`?%c/SqVWb'a'FCTb*Ai!EW\A]`ZSa:dUIM<H,,RJ'9964Gec1hEj3dUT71HD9cWr79aZ+_.n+Y9*)(/hP"UFHs.H6-PZ2gRd00R;%S%gdE:biBGBANjqCl8$JeQSJn!U0P5CZ+Q-X8&g]rP/#Xj(2>lWS<=SE0hBAg*.a![j/Orj^\m^:E0LEO+@6IZ$np'li?00DSe4E\4%hO__K$a2)Jlckq[s#JlINY-#J7oudr"\+=)[pD$ZJ.^(VC<-[k)Pd0WLY&#32(HO'8a[XT"d>`bQ^TaOL!9A6E0lU*:1sk6:]Bk#%BJS`UPH\+)7LI/Pr7r(_^=Up>a7J2LD;gki=-Us`n9-mM)d7F[lE@R&/p+0B5RX2LY-WZXJ.^[V#?i5SNpQ8$P+s;8TfbeB=As;"%]\'l8h]LiA8ip1+2Y(:#&c#j;b8G4_Tk$'SL>Uh4_E%B#;fr$!Sfl<=D[GR4pmNb7`Ke=LV"%ZR"HR_g9k'%rjqYcZ8)uj":5hce%p,4>\h%;<cpXrqil@&tl8J2HpZnR>^ACSuf+:=\6JOpCGiF#)%dUIDnU+mq"Z8/b?TUGV8am59$'tOKU7Sfo?M@)7TiLuh2'p(qh%)FA$SZW?C=m=d>V3.69\WY_(#n;=XgRk`cCA;6@XMQn&@?#(lLT8_"0cj6qm^OOd7Ce";a)6f<;`36/ubDYkp@;H/3.VFRjhB!IH%ic%m6PSi5Da`<L]#=0A2I_,G/ft-Jg>(!sWo6i2T4M597ZL`aU2A/F8@R\UEB+]&J+l^bc]CcUr*UsopaHd:A4#J]V3c<V/1lsg<%YO<8U%1;qRUiE0RmS3J<RH6e&%[5?AcTr`8X>r,AWTmbc]J[.<qlKUlhVEH1%r'jHms`iT+2%uNS-$,W[RI_V1&b[Pr]mtWhc4,O%1RPi=C/GG4I[VTZNUtU%?`Wq*3.JZV7KsYFr%tfpR5.t(NOS,aN:-mmDMtsDDCghcS$;b_bdSHRK1EJuo-q00;.b_c>97@.L2oSn%cD?Hj4Th&-e`qCgDIq2iSrhoWiDrGJbEFB`a1HIEUFoRdfirPKkF>j!(`76u5((*14Q>c"?$f]T4,!ksQ4lQ'6IA:G*X79Zcu_OL%`j!sk+LJDgJ9HE!B)Dh7`:`u:)+JbW-n4^W5>IrB"^/itn@u&-h8d1]:o5-iNYsl:8pLth,f^+p.Y^H2f7>W*XLe[C\4C09_f'-'%jQFS^9P4M$1"8,NG+?HfEIpQFcd1J`L><%j]lN5s5dVGQ>E"!2:$Y8W\$P8ph7/`B$O**qV0%cM*]8B@Mh5iiUHI*8'JuaE:Z)<o%qbg*'R]"Vh2AbU]&EjJRSk_\b('H[UIHsY(CI+W"<LFb_FD;0td^A1*`7h#4!)/3b1c'<$lUl;o1c2^mpWLG3RULBkkW*qgT#0/W%pDp:7bBuO4#gP:A&hCfLEe5ce9cu+/j=LCJrA.5g6-ST(:?g:8/BDh74ba?QLK*LP/m&\P3$PcNE5@-.75ie2b1GXK]"Vh$fA`U;%^7j`5f94<:h(-"na2WB5Emf2\\aJL]f$d(feQuJ-?8:Q`)j:L%?tpSn%NqDkhEpu.![ZXR4F%N%]G4ma=t8$&]$]b&HH83('X%P4%>hVLtF;/P_cd"eB?EJ!Rds:Tpb@KCd"u3bR7LD&1iGE8)l]$maU=%`AT@0TrcK%f=BVk$SN=KKdVt-bX^d^g2`?nWshUq%J__eXH%ou9Hk2tEb\BVg(07OMtfFLBfJ;&A9jkOgsQh=uIsiW*h8D\aSactVgh*;'t5`O5L%k5O9/0B`B&)f"dADN^7lp93de/lTTb-tHr;%5)X,p0f6+@A#duh69E"bQQV]e^0]:!iRugEM8^Y#`S0dsY\:/VH8Fb/?6oQoe4^8D\o+Tl\[\Ht8AX9<h=A@#\07;RBrPbBpM-Mt%-qd2S'0)-G<d0h*79BJOYQMe(,PBKkB^N2d$!OWciQ%5NHKeT/L3f5[V."Zc3%qs<ciOa(ri)6UKk@FJ">-f<jEL52Zi]<0qJT*a%0?_[3pBt)N.7*84-?]3mhk@Ff\E21g?(Is\rOV&GSSZ-Glb'fS,\4_tpERB;`ifal*LXcJ;EJ&'S#uAL@Rr/lJkWiRL0+2j*tROt%T2-Qj10.Q^[QQ^3+hP&jj[/Jj*mQ'=-I'H=8@[09Vr[*d\qb?@($1$+Ep#EKVQSS?_\Zs`=)pJ=Bj\"Km;lh]e`ai8b]d%#\MKVF%_8/<.^(t@t1Ge_Uq-'9lcXi^7ID-J0_;guF%;^:Lh+.5AhcMS[kT/=FM!OgO]^P#un[a;i.S$acg=E]*9kF;#]h?^R-T+o]:rD?n%SY`43;d%1O^rW[UR1.k@d:e0OZ*<Rc]mMETG7c0N0>hai+"ZU0+E$FDV+NI$_NG5nf\;cZd)ZQ'>%0A]GX(MG3sb23nL+X6HFs;!%eG(R#Ou[`rKmO4k,O<IPKtfg0^HRSU$D.LkU5l#,Yb47tBCYq*Sgq-W31d._T"KLi/i?GEf)i_1b@<0&_=HOt$7I]b8U5J+TCmGP%pKBHGWQZrhof-7cr6B^i)l[];9W^.hls>)ZKDdt4ddakqq*)aWD9O.)--ij$.:'W.o>CQJNlr:bT[mGIjN?fCjl#G*R]8X?`L<."%C@QBNS[Rj2Lb5,e=7&TVmY[Z]Gt/rGrX8:W7b4=/]I??"iFm,KSg3?q7B/Icb#(bjl:28*Q?%)ki`PKC*2Nh>c)JQ7*##`"DC3J]%>Zho*C:LR&i3;[>\6pDN,BHMi>gD.%%Ja7Inl+LmaaKIQNY6BBNZi>3+uc#5/(U_ea;GNNFnUD?%h#%VNm/f@RLFc3m=Ia657h5:%^.MrUCC[Og?!JE;>:<X1n'!C,A/o%!o+bAjX%dk#H8m3'L0cHiM^3aglA=*uFQ8TeiL.!d48+383p2e^/+8g3**3'/Ugq:Y(D!\c%f4-\QRLQuUCIFHO?u=lg_>IJlD@Ob;gE$(!JQkL!S-7S.VV$tVp'p\V.5k^nW)l0`R?(Go<A<bK;tLm#+SqL`3@uQEF!YAN(&]fo%c.2T6:@tU$(Md)r$Yj[Y[#B\_(1]kYXQs,fcXQ3USFWMYKJ-&:I;@^]>E*N9jP*5D`Gr,:I-f1O\+OKR@(aJnEl"-;I5.08_(9!C%E%HG?D<0XsgR1K3/BEroj:O;k)l`ikoXH(Cm&#t.F1]V[,+_E1@U0CMT',!TOEj;BZen0<TmJ$g;=gXlD"RU&^9C)#qWnV[`p#N'%<)s11V"O0^Q!"qkM=U_-:BE$;aO!e>Eb)N/[l3<gl%)^>Fu(gurSqKtkY#mM!k+LBV;;;^$Lejl)OMVG9_8Gf1T[^I?U]*TgqmE;%/C+<H.>4Sooo`Ja9nO>\\QmXMT5m?W+Ek+p.?EHc5PmXg-HCW3U.8kdL\E"s(GVN[glcanaC3bA".'=,S?D<+Q=@Mj,]6Y5\=nft%etoDi@8)a?JqR4fD^Xj>lQWp8K-9-PqmP.U^%_Ir4`j6]07_'S;9GeU37JRPjl:MX,sC>QqJ$9@!17EEEVp,qb@];oqhn_miqlP?%*^l6O6Kn!a`oQgLnL>IJVI7iec`?$j\%=![iK"e1'ZlZ!A'<eio=NgdoDTmIk9kI%VH7DQ!$_mZL!D6ufsEro$`$,r[_c-^P$hAS%iVo@fA7(RFIq.0]1p:DAoE#k:rLQC`Q<dcZ'NtGurcrX:Z*5BCUOIBZ*l;_#d\sR559Z(_rU)!H%Q3bXb\$6U'I-&40oM4]9fsC=%Ln4ogj,c/'D>PkdRrO@ndAWN==IX@hg*I]/#jf7^!S1kW(_9\%Qc[BPN%(Q(=1r;>kD9mmE?\@8WHXIK1mPJ?k;p&0`fVHl,toMr%JeI1PF^0;8B@$0rFAHB`f&tq>bfK!)U7`MjE8odsR,-7EWntVo>!q6"lBOW(mhX-cM\oI_c`F52*FT:Rh7aR@HE^n$3mRj<r.Tlj%#p#G>O9JkJ8j5nrr*%TEgC_6'1-P$2kckb,K.Uma1KYIG_S3/sJ6V,Z`%='2!,e(ZoaQ$W!Sf05&AI]\a.$lt3&]lBPN04-Jst_F%&E$62^)^=kd&j.I,NHF?S3>K=o+GjY.9AT)\E[YNY>)Qr6U=(0Xqp*@qY_>c1OKrr[^;&+Sh1Kc#;7*aF3ZG=a+juJelLsA>m<"-%pJ`Wf^C=#2",/r('jXM:$WpgXoO,:>^uN2UDSgt`fq$THg2`nLj"kDmj;H'pMr\E+Y/<[V&fC)(?GlpFpVi*PTMD%()uOa67Ec%M%>n]$RiB]qCfR2]eR)n>k@RfW1>hq$PN1bCs41W7<82QU&`/Jq=&_uPaG\;H&5qMN)&ao3=p%-%@L*k(Y.M>Dm&+U@ifM!#DqN0r6%"a)-(Z$735]^h""?9+LPe6Eh8pVrH7*!d=4bocghl;cKYSL%W[Mt>KoOV(;nC*-1+h"0=Q24?Q:m&9A`BiN?Q,<&7_-]:/A4`[kc%FL#!_5qh"E%@o'2(Mh4=Or(N1o/u>%jt=slb;UC;Sf;sHa7'(fq):'e-RP!,fG_;*#emGMmb&kn]o4#+H57iVjS>N?qM)TSYd>$+%6Ka'HJ9ct!5_+$dl9'YWZeU6iN:t8D-#k[#eOI]VF+uFKpXL09\3l+ob9_"Z>K0i"0gZ0/0jj3l6aq,l:?TVp?W.o8$JJBiF'.a@%ngI<4cD*J49P;o&JnLf<HC30]Sjl?mVPcGVl=mUd5CY>->1JhFEQ1&EiD$\Ud2KWneS-D"g@/"Ihp8d8dC,/PY`90RJA!O:n8'_/%NbisB>4<rPBo=m^)VoSQdqq$nlqTp_:6lGH9qI/$3LU@QY5OGE,AK%0qC]j:hWM48Kp`!T9to*sL-!t7\6;dgVsE)s]bcKt7dFaN%)!Y-6e?G-`=&,P7K"A-9%!ATVlFrs00[tS^7bYgX[tLF"*jX($7c<[=L'VN^DnLe'*(iJ`(dEJ(R#tXL^;^q_eCQ^8\lAlU9/.Y#%1"<<LW,]gHVa6^,Rt>(+1Qf:G&>CumXN?a^q9=4&C3i:<?QC9g3o28-W8Y8pG])nV'lRW9IeF9KdR<A9KRJ,#0QK1!4tsS>@:inH%XUbl*daBL"7]d,YljpfM(^if>%ue7EQt[%fER>cP$&[,.*t'-*?QOMC"L:P8Anc^KS>K'\o-5BL:]<`Ik]>iBFj&,>XS('=DDSA:%;<*q:#`GW6;F3B`rd/V;Us]CVVRaF!1Y-icKN@bOID<.anW$Aqj+hJ\XatKL/qU_oL:HMi;3N*aAn"SAP\-1!S3fg:_Z\b@;rb2"%?jQ^WG^'e_G9R/R[2'A&&TN4h$R22TFVQ1.rDfE"1^DI+)O_C\Z(U)G&FF!&_"!Ri04T6IAUYB#4tgX:BP7D(^W0BKB4>&GQgU1$%kj@,WhP=;!3\mO?6)OGCCW$f+%1L"=>skdkIUMg?bNF1p_LcF]R:9,\:2X$h#oLsCQ1j=\s+EEX=]7>$I6rs[_JtZk[U-k:nIE#&%d,9)JG/CteDCgLDg'M&-3S=d#o$t4FSeR#fd2(fa=5QJfEocUXi+%@RV7f1:-'FnPYM`[afU/W#*q;A*S[q<F]>6,O;#acY.2>%l%NB'3,=qt;r!'10>Bu&3c&S)4n/L\s7PpXThAuDkTE/"jaEh-Ya-bq<`5%:dZ)"$GTptWj3(W]5q3`KSe=1itN]]aaC'3I;+Fr;RN%au"\V2aCn\=Mef"1ROU3`;#m!gW6^sr-WJh^WsLKo?/he!0u^L6irYi5^>NopAT?A8s"#!OA*CG_GDHaiJ[5)9:5''lXB1CB&'[(%4D&@'kOmKmg\L,Kjo*VoI1hNoK&Cs$@IjD<H?lLf\3Z60nAs,,il(6RCu<U^j4V`h^^%=BC8,%oJUR=Xb98_4CNeraB6)ll1/Ku:%S@AqB<jS,Wp(k@`]\S.R%e"u`2L\_'WV>MZhW0<fVpr'P;Q+aoIo*9@0SQrnIq^9ap=c".[9>n\]?09X4jF?j!jb%qrZ?Y7kad$N%pE$^9BoK-4CLp<4IPq!t1e_'%@<a0>M`E0>=]B;*>.acQ[NR/rB2Xa"hJT:.ll3O6a/\qC;\\$ZD!AVQT'J\9XKNuZ*(jNr'0,Hi%&\CJ`>3<,6UI?*t$2ApH[-M!-MkB^s/Jf>`8k,t?YLRUC=gd"-_2[I69]d%P@=`UFZ!^^>%$_A-5-p,Yirq%2p<GpU8GadX*-PWK%;#;b):e;!9"_m@77Lbt2m1umI[*la8\MuXA`[jIp9]>Ut?B,l[oFOq)Rs\4'!Rj,"+g5A]Z3O\3f>nqLY7)![Lq\@E`HP68EH8MK%DGnDX%?+`Ca`';nh#/&iDqNAie'TAM&(L+GV)=X_fD?7m$JO#(SlM1-BToCX9b9O6EY3_LLZWt$eRNN.A7>.g9(kZ!nuBp@R(=c;%`FuPob]-mc+OS`mptVVi2)9c1TaV9bN!=9-j?\NH*q59=(D!ps?!<"\+&Cm1=pJ2D!MoFYPF5foj]097\M4l)>gcJ`IM#4XnHea[%OP:N+6a6+(K,aGG9O0[_HKEFV>][gh/^.(&>_ga+hpVrt+](LmBRf!KVpqEhHaW?MVa`!o`f9T,-hEPRHRC>[k1R4)@P_#YM?\'k%;u,Zd-ui[RF<eE5`HS#T=g`[Cj@__t1+k6'e*Xb-Z1`HN=Y3Z(HNZij@t2-6=,sU-MSYE"<tmRQ=W3<.oh0r3/)k"]gV\djFC;pn%T=M`gBVc'?kjjZj,-Ceb>QVH`r_:;YcXtCoa^@rmK[jVQ8[b_>*u-?mAB7pfX(-G2BIB\sh(BH6$CHO\RD?=6L3'_e[]WaUl^)(K%7a+$J'%"LL)J*kc#?T7^PLPH)g43s_-),fQ"`+e;)cHp%dK'8<&Ee7e!`gFXa(0k2ajkDo>Q@(Pqm+Mt1ckYb!A<rt9f*(^9_Q!t%M`?Gg;X:O6EB%H?bggaX?-j=t&f)n@2YcjI5D,>`9k4c5QmR(d=@t@F5F^\N4hgnpI@ZqsT:Ycd`B0"*A@eASXljb/g>#LFeT,KV%fRslRkHu:62)\l,V.PRVK%%V=H"3';]JVTarlc8@g$Ml\.k7u">m<<K2D4jV6EKBaSYBJf-!d_pX%1?3&=7o;]RS`W+ON-tBol7T%kqu`uc8IX^gLV&C:<p+70oZ[UF``in9l3!!#Sq>f16<:bPebsZ:-k8WU(I*&Zs$OTB6@TNALu[L'?c/hpa:0>-8WKiK0/<t"3\IH%]mDg0C>"8ff"CkqFg:,0-0saXY/c+!8ih>]Rgi^GonMd/ead%BRqnI&o8.c/4lSMOSbJF#a=_%hVPUY\!qHLUW!(Wh.';0+coju[%=+Eoqkbg>fc*`mEPH5+6C]pi"[h"b>GKU.'2p(u1$WOI(jEhFIcR:1%L]=3>GhiLlD/%uX#?TF7l0H#PReZ_s![@H$l$RUNa8An+%+MmIubE^86jIjd1jA]'nf"R.&#>TJa6Iu@S;4WJ,]Zj:5S!cc@DKf*-q^0#\X&t1i8g5:q(Mr?)ZYdnD4cOn/(g@?N#=`@7l(;&W%GnkBAk/Vh90LXOTQl1DQkbls`UhTJM/%@esJZVX_8M%K4^YZ(q[AObbB5JHuJ;H/EI+g)Sl@F)"\_O\SR#gR6chj$OV#p*Qh`Bsg%)hS4;>.fSRVfdZV*B)u+-sLj#',t)Ff"m6fq.-]eEkG:X6E'O.4=2TDBU3r$jcWm%0=:cnRqR`O@26-(BBc13FFR\(/agh^]foWV%LH?\IBf$g%qsj&4RNur$#W8rC+9l)c25q?AV0/"S5HHI[GFR#lY#k>'P`:hne&Y1!OF)FJeCGB@b6JEdaRpIA3]6haB9Nsh^tame%n6DJ?OSX"h4dMT+*_UqOou[*gQ1mp9hG,.m[hX2BjNCmdi]f*nSEFDN2Z)9n74*U-AtM^$L2Z4S^@-e?mq&-'*e/C\C=$UK+eMa&%[Ip1ghuD,Z^?\:a>E-,A>iT\$n!7_\h3gkMB5F<R6tSlpn'8f'\D?@kq:E?S7N1^shH2#9Z-3eLn]fD*6D0i[/ckB>WliIL-*:[F%X,nYLc=u%gl1WpiLaA\$/KX;!&q8YsC6Bn1%kOC`2SlJ7RionVY*u(GGIR1[fBog`8ur)Ggd+A&9O4cibf7XT%gus8.7S3d!j^nr%ANG^uin-rT#_jRZF25'DWs6<35F1O>;fdOW5&i<*[.X5jhpD#UjheXm1Ve,G2'>+H9Pq5!p8Sodcr1&%;c*Xi$HF6XWP\*ia1+<"%<B+-tKe9@ae$&WajS>D`2,N^l3%/*,FW<8hDs*=&lJ-!0EqE7<"OF"j_ii-7gJ,*.<mb6,lE%gKFlTnsUuu83(uB"!9rl6Z+8t_F%!g@cn!#,2el18FPaaSJ^JQKG"+KiMUNdG%@R?)']OPC)gC'?b-'&#MPeoSC/Y7\$D,J1;Q<%[LcUs"n$rRp+EohOUH^>1GuMaX[E%oK-a5QRh')IqtAplRD(&19H[G?Up.(2n?NL\F;nX't1m`I7/9`X>%BfFS?)P_KYOukt^koEEu:F2<9LOU=";l\)L!np#&k66,,Hu%f[llHWb1$_*Tq(:a:C4ZP'V]4AKleD0%XTe/MKMo!V%.uYljJT%au:GI.]R:JIr[_<a/W"lM"CW"MR'9(b@\t]DB/@Hgu3TdPrn9%@t]Q>oEt@s@"`sqYsN82ZsP^QO1)`i<+8119W>k-+]4:8@QohU!sVRUS:2b[V_;\i00aA&bYN.NH/ZK@@c>6<W4bi(]YuC9EVfl,%_r]VV&.K052+M.LTn#(>f.eH>Jf5]O5Z.N"]I;?+b)r($\t)4KjVEQHJmbOCaO=UCEefst<^js@TuND8dHd9<TX:-S%DY]Cg.g.[%kJ:BbKbE1_c`A2"Ca\&=a6UY/9q[L)8$"0;ja<hT\Ag9.<E5V:@0l,=h;i-Sc2gWYKMU]=heI)2="P,eBS]]2O:n%<Ui>&-0MqZ.%p^@A;5>eMV"ZmlTV7$XI17Y1HhaaF>Po]`moH&(>_G^+lP)I/_=U_S6i-OV=jhVABWBi&/Na.]JZNZEt.'EG'C@V/[*<JeF[5dbm%6*-D_RW;AH#:mA$##+hBA]hpF<T!\n>aT0"3"t=No!AJA4fmd3kWD)/TO/7rp:NG="j8F-P2lSDNbej9NB<6u.dr]flmtgo"KV%<%fZMpm]A!])(Zh,-QK5JFQ0t`/P6L[4:=MOWp,L`S;C+!=VKMV-C34Np$%"d!Y+R(F\thr_FnYLR1FH2N[;4O#?-s_A]R_0X=sc=-%Se233j$uSY2(d)c:Q0"$C!60QDskNePXD](%E3[a7db=8'7R,$e&ZeE!2DLMcA\X;,5M#VV2iu9]$C6i=G_,8\<g*=093Fg%Sj^)%*hU%]IYliX=kmAcEP@).5(,Z"J8@%s=?d3Voc5Z"))7bi)Rt\cL#qLX_'PX;IA2%l7)#JK]<ijZ?5VdM6<#a\;7^&QG=&f*0H8L:%l5Y)RiIH`0<5#Qj)-S92%otCaf^X2M;P3659YPOb,`:,rhePGW^L!_MXY_3i0/1K>'@s/8r6NPM=)-#/S*KmAbE;InaS)pcJK/q\%2k)MD[9^uWnR>1n/RQ?0-XKTa$%&/Gp=d.V_Y%C.);!J\1k*a?h^[+eD_^/B1=CmBAYd?=U+i5,hBg-D>S#,4@Ws^PCl,c(1>V[g%qcm?Z.68qOOo4H#qjdO3+jDt,ku\_PF1i-S`76f*;A9M49e9X'?nRQDjI7"kJ"XTd9MXaZC\+]*$9F^V'c>YR"kidXP9R9[7"t%9%Z7&I=kQNfJH+lLW][1`+99b#F5'8P*/rno%d7#WJ1,(VcbL;1c\a^EqaMWY3P"tpIJsWr:jE5HOUZ!oQ=(K1B4.[')]<;=YOcS>h%_rfaYD^`pBZ_mrH#5k\c2[$,Kg$23iDWp2nalQ_[Co*/l,WWpZatVKbKqY$:-_C=K;iVK,Q]p:CPe3C$4\Q,;0O0uc?VB['dTaMT%@JkT?V5^bt34!Ud/\`rK6AZ:rZG[TmZ;#)@B8>_3`n";AFj6.OmHL2$bad3%NQ&mdd_>[Y[Ls<\q<+(p#egI6$&%m0Brlcj78qk)%/"\GAbX1o[=8o-NFfK4uF<'[o\l78djl9mH*l\uFaIt@?6TLrhs5aUsAkWdP126&Q.AP#H!M),0#h58aAFeJVYlKi@%>u(:j"?m%%@.b?(*?'f$][4lk*%bGr:_pkE[&$cBZ1(@0BPi1gqSVE`/lso-rOr8P`pRjg`#Hjao"YILbQb<J0h;h%]1]YtA'CHm!3<kT3D\&3%M7A@[;?"120rB4HU[ftU[+m>K"-6XYer#3K(N'bI@7Jt[JIRPTcL2]IGJ?h5[%eX[cDFr]-45VNWHC3MP17'q3R$+[;HduQ4&;s\%``*in^F5-PN;iV^14KZ8#eNP>S&kG,1.-.\IScZ'=t\]:1bjrc!LJ9;9oKZA<T*F0@tr1q^KPF:1F4%-F2CGWdeC)a7r0I-1.=C8%a5q)Ha9G6OZo/#!q#44.fjE"bC$#$%6e((Ror:j>aQ3$;eQ(*A@tU^9Asj9)8i=VeT-_A(),&Z38Ts8e<rOq_J*#t/2R\-1NQcp[%[_I\_P<%*SNZn:q',R#EC+I*bDI.X7%!:;..FuH-$=%!5!bQ`W2;D-\FU]T^f;KZ.W,1Z'kHEF"AIR^*c%WUhen&WnZmIC`Q8U1W%&?NYpbX&T^maij><drmB^pp`,EnsRC/g/+j1%.nkZL07SS0c!ZHjMjiq0fh<4`f&'5JUr[]i",7Wc]q,fB,?%Zbi@Z&\(GYc]WD@%-BlVkc\ME9.jU[=X"MEI;;2`i38["B6NKDNEJHT0Y%.,u8LN]!?C*gF;J._l;iSuCGksuTbF'e0K<-9c$oe==Cip<l3+j\b2'V:N%jiVE[[d"BB(r^->O-%_FG5c-.O3gDE!`,G:GV!9[doH5.rcc^5OtK'CONPI2$Iaplr$BJg^/KlN7rD`lo+VNe0_7L=kHN,$P\0b3%h(LL@a#p3(_n6R`[^?Hi\iLlENs+$[^I:7_9;n=%B'7BDq98=?Y*W*HX^p\gN@n!iZ$f^p-nVI4k#JmZMhiuDTiX+O=m=hUF[OV[%\6a3qH@4+dGe<'r,M@i<GF/bcOnRH((9I/s8Xk`a;Q_R076P_m^q00\qVj.r!DT;jeh*]XD6FpHc2jSTj*nhHc!^-j3T[oS5=3eM%&Ic;=,fTK=6s[j5qeQAZ@kTB2V3i'1n$_Q7$b90H=pR%<2CA<U)S,pM"!GEj3jU^\MQBBuP+UdW5d6(Oc1_MhK%`4b!81_J_Ji]&%CpL;gek<%keg!F"G#mctVo54sc8I"IbmaM_mnhNJ>GF+nr%CN\m^:nF3URrc2.moBrc'_JoHcKb[GFUQqDr8H/aCU\M:PPS6uP70%*hkuSZD-4D=;0p8?VYd#O@!bc4qsigEe$B[Z&U%O&2,c09?T8^J?FT&K&i36i:@:&"^AtJFJmG]2k`tr!5`%6.N(K=Qs34+'E#4b%oA>nR`5orG4[Z%aSj&/liYP$A9Sa=uhS4Hf27S]Q!/"Xbrnqh=euT,$U3*k^P(:m&K.-HPWe*3kF3BRl11_5COc*KPI`49MbkIs<%b)FUQ5.A*1]')s9ekWs*X5WBR]A5FpHP-@a0JKhR[/01-CA-XA8LGPahD\MEl_",^X0A1&$rts1a(J7XT=JjV9dWmOf3U;:RkSB1%-`d_Ui<.Qh+OuOL/S&OpQ_2Cr?<bu-`EfOuUsgVI6M2(AV+t:H*7b['dg8W1D[`e"J8uC3O"Sn$HnB#qoeOdO[MkE2>;r7K9b(c"%Je#1[(R7G"3eIlKjg*ScbgQsB$\rVS)3]St0G,^']kGKSi7H-eH!8n#C;r)NFh:*us*TVg>aU`p;_@gtM#qIM&8e\4-2Sls9GR2J%/5eneB_r9T/tC/;@n_;<*O;QN(_bGMi+d^6fi$6cN3-S[*;S5i28<2F&YI4kWqj'FPB(jGT%'[A=3K\i'L.nak1:c*CgsJeol4HB%i+?r)QREb8=V)D@pR'K0<P)*M)_-oYP<5u1f4lm%_N&eEc*,)iIcO#Uqsi=;Rbr^#I(ob-eC=6#6FCF,+LZ.#^)tA\<,74YNclk(%2-)C6PnWlcngm=V^Sp)W%%OcV$E030PDrINEoh$+/(emoNVj,ZilBi?@t$/,Q)62F$RoB)(79R1cAOY$]`"die>q75&bE7T5ut1:%j:<H1?rUWJ/Ei<&EIYh2q=Nun)7e%=fo(<JFIKNHPQr5^G4ZGAgW1*/@;=$b5u^UVB(ulE0)4Xo+8$%l=tP)No(%4Q<<Mt#s7:#)%URHa\?X?qRGB;qsH#49UN;F8^iP?V/<[TmYG;m=d2Ql`%agD4BiOaP1q7Ym0I"\haltqthSphY8LLRGjVXkEp)"hW^5JSsk!WQEa%YD9\l36=Cm4tK2/bG0gLJ(U.8%"<"q9QRWU56,p(bK8u"j_s\SDVpPlBf,n*ku$,`EX[>FZ<iI^g@LG4c!'K!8jH%Q:%ZkZadSP0%p.Cr"r_!#7Co!I.qMDFq\?tF#&Y0^O(&d0cN&lNo0_:G:hCcX,>Fm^cq/PQ67F'io#P7kKX,nX(UW=Ct3A@nlFd?Er8h6*<1W.e8%n\'Lm@W\";6/0B3iJP>>B(EKM*f_TsDB&Gc32V2*I,#^n5C*3V\5G_)fu*8QHuuuLZgr8&rp@SHr*egD1KH_1"]T-X.c(<q*JuDg%UC`g6o(SD*_c>#HQOQ$.]+D)`pHL"q$u$=kr:)b_R]I21$uTPO(XSJk0Nl#CL>T+MNLF&r>+IJc!h)3B5kr5d5hWO8'23lW(5B+r%\\PmlUqf/HO/^=dH9nZD9:NH1`7=58b3$pOTYS!LO8ZRk\p<ge's5()G`rq<EFgpi?rnru!3G(p0B,sLedTIt=]BLWKd,93Sk@op%lZ(I_/R?eTs#8PrUiFnV7R:!SM<^_gJ%YUJBD9aFeb.8fM8&5gai+]4%Xqa`>5e'SbM+]MpL318`T-?PT+Cm!rKE.XQ8^_MB][FV%YKJTt'AC]tfUY'@p4hN<Wfd6X6V:FoAnsW^?gc73XaCRAbgf*#X7b.sdc@J-^*/FoSf&C$3Q_OQ^0SXK:;<)"`ZM,8TI4GbTG238%D8Q!85[STZN9;V'4dmgjY5V&MX5L9kn3Ac\8ApE"G<;9%>M8s[\j#`"]_^qBHrp.8nL1's"fntfZPUR:4_(,uh&;_tFeZiNX,dN`%rq?;0@,g!6"Zl\_E+#J`p&`:DM>p7bY?5LZp]R@ok6=OC?[kI''gb$hTqW"(OZ6_]S/)6Z?AenT+>4!']bUjc9A'saH7]Wj:qiYh%ctdX:#,LDbJmO?;I]D8ef69155W8a6Qd?,jCN7-,HjTp@YJl(,Tm?c+YJgMQe32j\`nlRTI7"0h^jOY]52,`j<K"+,"Itp=LR'$]%#hmGEbJst6fVc.U_l6GD^IB^AQaSi>7W8:m/PJ@HlV!M9N!UGQcE5p848cUu*Y4cf(*64adn8.^V^S+kCHp>AMnNQbLUq-*7/7Qi%![ZK%i@b7.OAXD1b0e]u!fuNOU1Dq!(2aP:3GKr1!X=sVBur'`a-#MMCa'k)s,\HNYdTm,qp3"(.Ndf%A,X,?4qq42I.^8d&)EX+%"8a?0`CL>W)cfkhng\j?M7_l"V3P?FQsS20A]D28Sd4&BPYq)+0r!"Jh%Z;jG2T"Rh>6^,O2Wc,RB>k'D%e0UIu,cko5O$Y].F@L%d)+YEL8l9_\fIlB7'Hjg*tXh;)XbqT1O63F#p"YZ%(I=l8@L_U/C=YC7db+,HSnNN@r(1FIIT5**;[5:kKiLu0cpuu:6_0pp:*j*%8c'Is)9U&J5`8tZ$nVpkE"a&*2,,Vrl6`G1oG\(^Whm7rp>0;R!32baqg7m[@VUou"Ol6+B%i#)PLmE2iU3/&3@4YsBZo2Q_(g_?%+&VAATZJ%CRD.KIZ%%9r>)XN^T3geI:#?rWG]Tc9!Z]SIl)Z-2"Zua$CuP?F)4[&`<VV1p;`EqOUEfBN2f;g_>k,D(AG6=fnF.%@%i)/E&?^Qm\lu&S=nH+(/+h'E6X>_qY3:L^h!\M-b^f5bBVKnnsNgpXJIjDLJ\>K.%K\`+h3:S@^?G34-^crh7;ZON$Vr1'ka&B3-%:aJ106SehB4:0uBRfr*(%lXg5CS$oFq5GH#Gm_QG#]/s(6HMuSq'\sh=V?2s)GJ!6"7Q3/!B10)_1q^)_fcZ]m">,5]a(mKQU\IN%'Wcd6^\E8n;aAR%Afi_2'3)eL4HEF8_,dSn`4.DpeZ]'(d-u,jpHM-Zkl\N90h#.[-UO^mCt]+RQ-G)826aZ\9$F8b#+odfJHZIR%mXki)YM[:7e7=?(C7L2=#1NYDZ&Y:"V2"C%DLT#Ok:`EE]Xp[<D5)I]fu$p9*!R^Cn[a-^Zm5F%C1a2$51/1?%Rd;#SE@!H=6"+/%a#0QNDa`kLEK[]7W=$g?0G<-Yea-g*B7iUNHLoKBeFKG++?s]%rl*Uf&iUE;*'=.pIXBDC/c?_Jc`MX4DT:\&kRKcKT<,aDj12"U%cg5_$-+5KW&FCgUggb,$@B$AsXkdJ0;0K1X?3BMG$^6:`0rM>=@B>erKD)iNDNCp?<RK>o3BnB"CTti_DW4E5H<e^SN%fqY(::Ri%(T#f*_l:"%Emk\O&MJ?M>Y.#:`!GZ*(fQ;F()*@$s%$Ii7")q@eb2e>[=!.PL[hpgS$Fb\57-U-^[aMZW2gc!:m@%grX&e4NB8n-%e#rng,Wdp![Q8-)gjuZ=^&%HUKtVDaqL?X/cKlXmrBF9%X]'YKjT"0aq-s@XR9'p&]WVV0:V_n81q5@(dgejmXm(,Js2.i]C&_!V%/HLoETN-(n@@G+#kWfU$`JH\K[GU]ReMtkAC[I"t]f9Tam>:4;=ri=aKfe;e,WQCR`V]p8gM>:%`TmX)Q.H@Kj=eW(7Yj??>q:W=%D;LTV\48aq_Z%tXq.a_cn)A,JYS7NY>^\t.NSZ1(YeE0IIZ*mQZQRf$$7;8k)t6uHJ"]7)T7ZOL:P.samg8XW$\)(JVbf<KRD+[>%f-Ac$kDN>Fk9I1_`)0olnogKbPpb,gGbk7%XS`nl-BB8+,AUMAIGhueS"[tm2L=@T,rWn/m/FgbpaP8fGubS94M$H7q?d/sn/h8k%:W!)Vr?)@soGSo2XOEfnX/GDM/?b#1UT:G\m<;md/#.>?33a7Pc"U-mOPTASj5)6F0X*cXijWMK$>pu0Uhs4DMmIUfG4[-2k\F!5%IeO;V"`0khGs-L<MIQJq*4^9Jj*fTRB!_RDK_&^&#Q'S]_o]d9iq--##%1l'`4Ppb6gch7)&IMmPMqXFb9_#RqK.5d6i58ON%;,E%Vos\ZTDW@@4H+!^;do6K*K6dP0::]K^o>J28J*<Oq8(_(eoh/$,HATEX$poqD#]_am/I%0ohG/iTaU7/jl`K/53j.+!m6uc&!(r0%5kK?dbLQ:3lIiqer94mnqS*%0_gdlO?c]T]7M5P2+glXQ2aYjaMp_Ohcb?+!PDao3<j"(sY(-C4qt':U.3opO<t@2iqPX2_Z_-40%l2D:Y:%0$lL-LZlcgEU]n8hs`^Bjjhpb2DT[kB."Boo/_Io$VaV:$31#dYqCfVc$4i\X^*6P9`gi#gEIW^ue)T(N8ahpBrhiKm:6%iB*/#eK=L'pE+klqCh@pqgFT!bF)6_N%-9s5n`nKp4ZXQQ9cYjV+f'@!e7<FL&@I^<&k5YN+c?s7Np&L>S^aucUFf]b="gBBek7R%.d/Y7&nj=d?oIP1,`MV=lL^q,pU1!jdTeqMY:)"N&;0sRoSoT+'W.(C41kHsnal=ps+T@,kb!7onE\E8R5!IK8$d9i(\`uLp)h"e%UG3?Cg"8TSIV7f2a$((aQj&ig4'T1+[R?Z("BlLnjY04Nd-SB1G#P<PC>[@'qP(H'+B=lh7M9]qDZ_:[;jGdSbBUXqTb8hp5JVFU%\<h/[72dHMTa8hEO@g@L9VQQj#-)%H^.Eo5Jf[K#9dW3SYEG]_OpF*$1Y`lH.LsU@'SQE?'BZ\N.u0h>qYq'g,Km&!n6,tl;h\Yp%$=l/\8^afZ"Epl.5Z+EC0J:BhXSPAX$EuJ9.+3\]g(XiUKFNVh^aP4o!]rD9J-&rDH4I,M4FW/Y8W6r;=ZMIL)rk^s*Yr]7j,=6U%[L@('#q]R]69LSh4p>;O"[8d*&PN4%dW-NG;F29d^6[`p_;E,./<UEs,k1HdBVBD_/l?((i0ak"J-EgaOI!bG;%ZK^J7FEfV(d<S%Q\"D9&0XfOY[:&H.Y@q)/BdZc(l9;`,4r6jJFO"Li#$d'8j0a89P%sP^`oKu9Q2lJa".ZD=ERc$#@aD66^&Z%-VS7)6TnYp9)(D+%r7&1eL*V?b:V;W"r=.tOI4g7+*^WB7,dt<5`id0gWNr.Pc%:U_@(R5ET`L@.G"(]2$I-^i8g:7?8n!qEH4oft?rnJ3_B)A!iukf!%_B)b[Ai#A'o9tj,eeE4dk3f+ll"JAuK)U0XO[:N7:B1V>Q7dh4A=Ps[kWl!Wn9^tMYkjd^_r2fFW,9f<s.7BJVt0;UXFD_#F\h+I%;jd^j.%1Ut]<JHbR5@G<8kgJqrtr[.9<1*WQq";?8SYR">1u]Ap@-o[!s,*F`E^Z,,D1;/k8mB]&<UQ*&l1Vrc;I'K.+/7\$EmuV%'=JR'#NcpoGY=hXbAb:*YCk%ah17p/_eI#R#_I^W"\:>dM/L[6E=g0p'JXEg0VB.R?lkTO-*uTcKOutcTflMi3!j_SZ0;TJYnl\V%6(#@d0B'Vjg_\lpgm=9&'#E!C+ha@c?U48BG>mo;a?]GZmL*hQ&85bR;sm9m\9GJ:@9/CT6)72t^po&kfju%F"W3_k_N=`\XoKCs%Y@cQ'i#;NIN-bWMKmStK:R!&d1f)eR-p(3BcUk'[:/kU_,.Vd9F\PBm=HW'@T%J<9^8lT)b\'qk*O2ZI!o&pSIDJZM^oOR?pB2@=%O9hS#:QU!nGD-W&O_3M4ScJ*8h?hXG+PFfF/&8I8L8(/g\tTfYKX<n!H%.;XHP5"5V<pib59Xl>69>Or4g>VYbTup.G-:sSN+:\-%g?2AG'\lr,GHq#pg_.9*[WbSZ[Z_X5*"(F\*\:P2G+NqR@f*0r]%D.cB/m'#&FR'?"bUl7(Pd?hkMCU&Ef/5h]%naLJU*#R`WMQU%6JU5]3Zuu>9jeJ)1#Bf51EX#/4\9FM"R;1u2D&]cm*6Y,i&/_fp`LdX0q?.Q=.n61BR>nFY%WlGC<qQC'0p&&C"Wfu1W'qZf)Z(m%\R"PVm33>K)RCX2m=<3)Z!7liYj^;[87kY`aTBR>?J?484>##W4[s>$ia!>./"sQXCf`sDn825ngLYa-V"W`W9+&CKo\,bG$q4e\%-Gb*<F%3(o(.e3-h=.+$Afsjq$!$Jt))#=&oNd_9_cQV9K`W:="WoN_,9W9Qc(/#T7Ki9-cn$PG$3$r@lO!:ec]2Eq$24L43MtJ9%"SS%9m=o,V$$RV;$oR-a^idk62V#S53D?t&5i^=XE]7sIVRn:$"1\OnT9PaSNc8_p@7cmSK-TK-ZTW9':p7&%Z-;M6G:IYSi*"?A%%oUjp2""tlb\@t#D+.?__h%O"*O3XF%(I[&VFc0r'eqk&Is"Opi='4Irp[Y+lo,W%?V"K7OOHm)&po9u@5g\i[N:<tVC.N)KSYUE%$(Jl]YU9bE:eLjB"t]r%ZFs)gT((kHh8+1YFlSYYXB:#S'a*8*j9+PL=E?+M3o$1g#7.R-7IE\2qPLbEWP&L'`>ue.UK^Y>j5Yk!%<bce1hRU3:YZo>s`B./q,BI3lVB]7/*]"hQXhi89VB]MWmkU&hYTmSlQP9d/fF`AM;G9;o+aHdLdgo\,_ZE[V`.!6r@Cm;L>QFAG%o4Ph[O(G`$WR/&m?WAshF)m3Y!78qUEW]=-`OZ@QhHZM0^sj0u(K\\lC-,lX/RC"KK3`-XM6tm>?$dL(H'S+p-mRlO]TmFlg9&:V%O`%RO?fFP@q<a)1J32!0*#)$>.ea'@%rV_;27/*M!mKW?_e=;"4bIuk\N+*-KQN!rG/[eAp?3`..'a->+8f8R-+N8cndNRTs0X,i%R.(>Rj0$05[P[DEi)VqD>?r!>-CtLWfJ;1pbNP<$j7@Y4=_=5XH$;qFF$c_brL(9[n92l8*mY5rB`+=4B&Gbib6UkW^$9De/B`-Z%>NTg8HO".XN5o]HH=r_Q]s+R(DVRprMk=qMbVFEeK4dpkZT!<pk13---nh$i(km]<\;T6f_b,2LrW!k_Tp8P3X1qeO-?F3\Q$Ru#%?Za^nk*de+;:WD2^9IdI4_Oqn$6kSo[+unMZ:*Ffi\Ztr,>:K:V()CoXoN$-O+48BJ#s62XUfo`%tC\lJ#s7]]<)UoHIdj1J#s62%XUfo`%tC\lJ#s62XUfo`%tC\lJ#s5EZ9GoelU*JHU@=;I+ebDeKQ5/A(<5#9O-N)^G50=\]hde)dLP,6A3GLB[P=1m0X8qZZLAqW%=?#8TA%fJ,(p/97l"Z@%.(Gu\KDfS)'#41)YtlLOAD".Fp,S:F;<s2d)TZse_'lUji_?&0BJKpJf:jL8/R"n#U.=fZ"A+9233PbD%nloY!hkHnA/Y]3T\X1pB-2B,Jd;RF[r"aj#!Z+W0(+mXHObnOFNomeVf)bD\Y=2+T>@aJcU8.N9K&0h(7n`DWA>7tUUZG\'Ztf$<%aJ<(!L6uc(dejk:,K+jZ>*@be'E&[eXlU<qArG[bRLCFR+lcV+\b6o+W"\1;lu7ICn*]o9Ss:#B#\%6NPO(isZ<<n\`u`K02O$R*%>4EMAMVk#!q9<'*h\p=g_I7I1^HEq?%6Bs8,&3;U<T@8i,elbpqCOasf-3iS"fC?O?Ak-5[HQ$9(-rHSn_.d+P5H)`kdTbhIZ'kM%OaYMjd?=DCRHV-DBRYk3C>%$Nd?=DCRHV-DBXno-ilX5YY/Rb[ANX/>/UAtDH'?Rt6I\6B6JD?@$S6r>d\qD8PAEhiZ8'b!@n6-V%/IMFAR""Y\_;DpQoWS8K1+`.>Oo0BikVqX;IZ*Emb+3HDn_5iV^H"sX>DiQt-2c#+"b-2MTO2bYB3K*CRp]-s*CJ%.Anc^PCju+^%Zm<CT-Mf;TRbqQe'q)KTq(4ALDpcu1(/n(8!N,YZ)4KHQ-$cWcr!^XGkReRn'a%k?qYt,K$9sd&kS-GuknJW>qto1KdcY)-Q\-2q%QUK@ff))M_Na8JAh_<I=?1<klX:];sVG/jRVts4KS?S"!F<`WMnX2;E6`6RPB?X\fbtITq/bSkKs6f&t$S>^aQI\U@jbkV_@*`a@%g#f]iK:=@WL4@_%;uanip[<0QT6oGXMLoY-p*+Q]Z1X5<s).8@`l`PoZ*@ml#Qa=T&i$8j8WlmQ)WRD$a;t9r#>%Ou2mQ811jQU`%-i<q_*D.bT;A'1s3Z2\5L6OTMObdJ`G"?=e]7Ri*JHB"WNY@,\E"N=giY+ReTS/+5F:I%lQ^4lnLmVukn>`^#1(bJCXV;P\/.eq=%Aka]cYpANn"HcQB"f&%"@`*ct?aXPeJ_<?9qCMjpE[)b?ckls!=QGH41=P2)Z!Yj+cjXTe*>kLo.@l_'S-H[LJ8sm!9hg*L:LZB%%&.KLZI':VeSkYgkRb8*#L'$1gVK3e11Xd441G0ON1RfH-\E8mkLsdF*c<55rN^cgA:Wpsu&nH]N082*dl-g>BValZTa0%R-:G\QE%0/DJMZsB!GbbgpEgfVP[`!pCW1LbD]mTnW\)aL%tT$>3JEL#Vag1?O!in:\C6E5\tV[Kn/)/i7XZ'1m.*VN'PRbUAs@8sQnAXMuL%A:0gS1XfjGX^rd%A9t&ubU$#u)*LH3cs1l=^cXNd^Q''7I$i^!5V1?ikqH0%K[nO^GIjT/*]0F*dLe?@fYfNW24G9)VV.JWQQW<!%(`qgc0p([R-<"H3rBOg)f?ho935#jIV8tc8\'f>Sa,qI%FE^/_=U@F6BekhFn;JKo#A6t'XuV.TBkL_Q)5;kf;s,.lHddog_j%#I%HiXnPUfi;371#K9#ZI2q5o,6sLEha<_Im?U5@i08e7h\o6,`V$+"W<f^3")>Pio/-gGMl[\NDG8*_F?VBm4\F'DC3l4Ms^JZ7O9c%(V*>K1g$#4$G&rW>]>8s*F-SZePqW=\f.4A3t(DoK2DaU'FWYS;1q(C!lb^31g<4d*tb(][\OD80t;O_?J-HV9])p$ZEQKN[NIO1%V/5,sN(=%$PTPL@C'VCL+g3og.+04m(&1'I)Pe`*hTIfT"^dpB!"HIL+ib-JWA8c0Q;5>@L$Kh(%1f4J.L`]LTu0)#QPM%Q?OJF_%S+3X2E4EU.YU9kZ#iMFI=sPsR3"U7,&`3RkC5rWJ]J:bnSOeV5Ia)m6!1HV)_Uo8F2OaqI&beWt..k^4Kd.o+G[an^pEMC6<B@`c%bOh<5]S/d+8s;n&_9JGefO@'V75DPIJJTXC@E?81aGJ+H1ZSLs["1&iP&j"1[U"Q&C5s1$M*UtdFZ`-2P%nr_@V.-&Q@t&n4^FHF%a^AVDR4Uf7)I0P'*R1Ys@VGEC_NZjl<GF3212HI^ab!3&-O+"rH3-6u17l6#/Mn.)e+0]Y/Z*/3[eq$%dsB/A0>`B6Y-/FEigB^<%Y=H[$+JbE,UY*ecFAK/H#;i#VpsDd2iebT-/=n\)-b+?DUfjZ1ds:1r>1S_M<(V*&(k1b9(pX!b*Y\NbWd#H<hFM.J7L+grJprZl%dHtJ%[iOqB&C-KmG/BCN]Rs[?F?_!<%o_@!3tkRX&\FI`dh./PU.KOTOUu+7PDD:8!H6A,R$\IT^k)+l-8nsO69I2$To4/O5[N'u%aEWgk\,[.LH#t8+Aq>lWS6Y#*+NZ"_/hl&d9N1@[8p02.7UpF>6@?`B0a%^EH)+)!^D=[,XtXF(l:-<u29f[#g.qe-f/&guSK`ru%<8k*\a@\aY7n#.jD;M=5b\YXQ2e+c07M"fsfH?)7k]*GZA8_?"I#d>EZQKS(nI.!)D`5@D_[NY#8P2A@D-O"(!`#$>/L!&u9a$f?%VbYU#+r0]j.&^"W4qoS&-X4>d$L""1505-*'QOYB=9gu:o^!dD9'='5`MZ.bAo:-g1]+0e`Jo,&?SrY5`/k>SK,#[<f&CseH;#6X%VM0bKTL?\m#UB9SBu),O1n"]D&e#4ZQt]qB5G?&%$Z#s7!d7>GLns$$9(sfSL^Z6GdWeOHJ7"Rb'X@%r[.DR%C4lU(:<M-$,q4A?%?OPOEO!R)/F,;`+[@G2Y+'#Hk8S$sc9"VB#_OloBcnHu&U7!)To1GMerbT`h#M"7/[&GfB:ND7ASoFRoD(atR=Et15Um\mBc9$S%%oj]n;<4HN#8]bdE,!/te7\EgCRTIP*;W$9,5Xqlr)Y;g"Fq2V,\jdn?IupAhmrNuNleQV[R9SEeS624uZ1K*ENg&7N9l62+O8nf=%rVPC-kFU]oS]R;D)YOG>RX^"'#ON,G4o"aWrI++Kni=';OC?g(6C-aU+n%^DKQ7U3IY9CV$0ibEjPEc@8<fF+F4If+,ID&OE*./l%[e7b<0H5b2T=)G[rI+*`_/j/M26nGK+\U##Np]2[KQ7V&4[OXjqlbC-$CVgbOcPU#j^^mUTKPWP#QGj=^X)j[4r4B)fdk,MEgGi0%+n%^DKQ7SeFbC#kbob5"B[IWZHEqBk)c;m]!N1(oX*rTZ,H::jVqPq?^Sa9Mm(lr8KK95/B_`LNB';-&,UamoAHU+2b^dq]RR2a,%6OqHC:FLlU$8Tcc._1@oO.OlZhI6Qie&e7RMC1>'.20i[K,\kdqHJqF*YB]_l&[YS)2ku?Mdc0%CYgu="tr1RR^,X/--=E.g4^.H%k@mMIo)YJhJ=0BsC9TS!Es-O"oM!iu+..U>n-8\>BrlmQ>\jsH-8T:DBUWJ/jJL3Z[8Q?Ab*!0k99tje</N1=#l'G.MhEr/nW+8^%H,O8D'`.[<1f#c![I2I"X8'V5R*#`::4eB*1D:B2.8,j5$SarFidf0*8Zp)JAq?UIMGe"``#>'9]cZ2p3cu'%N&#G(i&X^b-;<'(%Bc<),6YUt;dN73G9aAc91^!d$d3>-*X?\""k*'6V-d.XnrLBW;!6V49Kop)<*LW8\.qElCV_!IY_iDs9Ode:"'5h?H-Jca*)NW+*%PT?/^Z6Q]_d#H8t+u_9<<ZDu(8?3b6;J0N3SWTak7[=d<XVm?/FIG1`d9VDN2^h$+hO"^CH:+t`2^1UehLH"`oYtB4DE*@bH)!*i%r:a\_(5qfVgfP1p`XQX*0UA$qa`+0n:-aapRk?ASPJM-1A1M7SN[/j3(-)t!_#n]a0I:@rn7dc/[H[[T),nc9<D4HI`g!6d0dZ7G%&W\A\=J_D*PbXX$H*i50Q2!<dF!_M]d$+cH_%*/)'DNgf'RhoLnjnAQPbXX$V05PTEj4&r*P/cQQr8Z[+O,keUP1fWO(LD>94=bC%*gAN*;A*jcPXe@<Y@aJmj^&u[j\b,QF<V9JC\Fl>,`<n$(6\'K1tj>HY[IqN7)!91,;cL&5h"q_^gY<K6$U!]O'u/ceUV@]>,4ZA%1u<Rf`$;R4#Ke*kLZHhkf0YqZ5@ME=P--eQg\5A!O"!RT@o@K.Jde[bjcMsi=!!UFCh(2"1FNX`7%,!X7oM$b^ar(lnsF5OfdPo9%3KaRC4&X9IElg[/X90VYqQ:2D1R0>%jAo[+0JJd')-(L"QLUVqOr727>Dm>`6u7'?/9juORMhA\P<:D9_d\`21G$S%@V$_LQ5#cr%=\]Tb4=Z7L-cD]"Pt,>3]`Z1tc&Bgh!b30BiR&LTQD^-jASt6[&/j-ue<ikb$nOp/#Ss"pKYn?&]5&%s`c<oUWJSEA,Rk\[R[KC.%R=TW/"r2H[a:&H/CWnU]L502^Jc.k#64POu.K$29K_^20V6nJ:(PZuV$lp%B#:,8"'fL%[i]586Un+,7i":5k)aiZr2^Pqr3d--7%:!-/RV^W[N7go9O$qf2JA+E17`UYiA.OPP!bf,7#5!r@Q$8aOg-W+:DOWKe4H;(kWAW^NCjK]h>2Di>r"2deHIPkX+8Bf"?lroQ7%-B?%O1Zi*eM5.$Qa)$F!!#JLd]JhN#XWEQo@kK)Z#KRa\.M<!4AYcb19+/M'&\5M;@h'h`2kl7$A8)W's2Faj1E03,QrN#G0`krq%5)jR-,'3-+%hgQT,>^KPO(OcH:Vt2aJG04VL\7Y9BsAOUSu,"("4n5sKdC*Z;8>`u*(c1tZ(A=m;.*?H,almo$0GQ>RN@WE.3a_=%L*ZSLNeGXV`WL6,`T'gu)<P-ec,MJY0Oc;pEM8K;5jF.1U`>JbdD%jsi=Xc?)/3\NU&BZ'?61Dfh[H9:/F6_5[N-7TOE*06,R<hY%3S-X(JQR`U1h4\Uba@aV*HAZ/%&)]uJ4%^ob0`2udsa21@u=Q-ET't?P_V%jGYgDh)3dWaGu-C*4T`mQT^:obi,e.%l\[\=^4=?D%dKC(18(3+]U81JuTsOkZP0BopBSo<Gg!M;3?]&E+,jBk/GK:K=0.8=e,PG:O/5O^so4cFaPYGbL#^SWfAWNE<9M>cE3NW`^-/C+,%&+aHX7fiBAk$cEhPt3\5ZZg!!Gj?>Dn\CB[ooOHd;@`9D6(L1kidp3)H=ZHNKdP_9:GO0dBH3H$$4e::hMdC<GE?>>k"*_;PWOUs%^uL;WquJT/B7@ac">_ZSj<AE2Kjjc$N6"k`P::_,,/ke4@P8YGc%m"aYD>\ZKj:FMEMR;2nd&B$K`+^6\jWV9j_8=#/hk.3LJ\p9%1T%8CX$M?KgPdiU;%:d/b"Ag6bfhWF,&%`1K2-upO,&X)clj?*J]=-USu,!m>)b:p=Z6[n(^CNoF>m2>lVWAa]p4s^Kp%cUB"c8#%&W7L2O#6"=0aI^=BkC0W:*1(R5LMCN+W+)r7q%Nl#,Q.[M.(!;"b3l2H3?_%&\/1A,ifR!BP'g'"=2426?`JD<f04%5t*]306Hq"%7NL_*`NCR;O!mLS,B=#40mq1iV*R>c:34HRAmo+W[kX1-dY"j/l"&8sXI]__fec-HTIasIl6]D[.Q2:*FJQf::n-uA29>\:B/WS;%o,!&o^LeZS9[GM/csB*Fp6c<or2L(45RWE+qIaX':T\\g,<sOM`F1BU@'>?k5q%SH>t#^-N>aMP&g;t0lgFmLO"Bd89PN%Fbgn,P%-4.4B6L6mOr%FrHK'lt+Wmt4\LP`1L0OKlQ9&t5&1!6i%_F%8;%NR+cj*Wtd[Z_NC@KM.'"XE&man3Z=XlQAFGU4%[b]Apca-&d4%"ac2%cohTVnslMq"K3NR.q""nJOP.gK!><U0X495)Wb+UO`Ma9g*oJ<]k0H,'BMg4?aG)QIL2h`5AEZK91?QZM[$&kJXJbAj^].&%l%)DBf?\=fj[;e$GLHY8Ou1U'O>F(BAoq]4]_ZNch578oL*So9Qg2A>dpmqkY)3E/4YG^a7V(Z0_f0:1\hR10"?IngVT6V3@6?A"%IqH'$N#oI8`/Mmm&T&sYN'-:c=GaI@dT?WJ-XFe+f9+:qP%L"-@O!qf;"6]#,T<$AWg3e)"\s.&[g`F6D.Ih*kpk+J,sS59-J:<m%(tM0-=*e,/le::BeWZ$"6`1(5!>bcqc+"C%SOT%h=(29W"(MmaV6uD\LQsh@=hk6X7(Ur/D+5`)F,$qk.N0XU!']_tZ0R8)X<rDX%7FnAH.q<"L^E-Js3gqfKEtR'3g[MPSNLIa]I/O4LDKQsi9Y#_/91*0J3_E\-9jAls!4"gcR".*=a'fVmYXTYd)]"VHk]'%/Rg@TE%,?G"<(q,055aWlm_?t"FNilju?O^:L4)%Z/=*IY9:*gOaRW4KJCG.c$1gJ;;lB.qK(5@jh2SkJTCLeT7>bTp;P#Z:!.94B"=J6[#%@NpStbbn-7/!Mm83_6#I/'GYgUuSa\@^h\7mFmEHPenTe,`1[]S-keYDu-0[.]Buo%FSrJ4EtF>)JVKK<*7V-7]#H:klH"F<G3+D%gF_!Vh)[!K%j0>3hAj\<f!1trAjk(LPHq2GlSD-f1R$[O11p[YB\"kI\fY+pg(h=2Kl8VB+m[W1@map(Jl[FlRPgaXs$LQ89Xq:"%[0\2JK</$V4!EFTg3dKQR$\N(=?3L'&o#q@C">5M2F6YK<M</5AO"6o_9eeHd+SWY*/<#kk]TC*D1Ygg<AmTX8=sL1K!%XHA8Qq8%4_JV`p7Oh),j8?CA90$,S/r:@`\0d3(W(Z7HXPcl9b][%#`g`5S>4)aP4e#]ZATT'LPF=s:nf_j&:;'!ld'NA8n(hsI@>*r2)@Ia%8K_tT5%<YZXr8Hajt_R0lmHCF3j>'D94\aGia8cYk=F1qBkGU:":,)'dDS%/4dpM@g5[$,jc_IjdIQ('cBW1VO9Ejmb:b.B@iJ=X%Ef"c7BhOYK#&n]X'Bso4I"E$nI-uAePL0-\\LSF5iCK*Uf>Nn5ru2IsG$dl^MSOZmi=U>lMi@.=RDUu9&UDG'r^Ie[^;6QN*`7rp%!<HNs4)'g7I)2Vt?QB-cdO[4!8$`a@98ac$b0j`(6Le_)#\@_,K:uCNlJOuMNR9/?Pgoc-d]<oi.]<H&.RLdOJ8$4I/-n!6^EKs8%%5W['AP"/APd4X&6-unG,U3.n_uk`#U!N3uKU@Jls6;fQQ+?ond!nVJ.d<^ri%/!Ar,O![G.gsoRWOG2nT+"^!G*NsjbSW\G\SPG%e.jpmQUr7\$^&bbC("toc_k;AJR_(KB=kE/i2@!VQ5<gAFmECmCbh-7;n@Xb$n/qtir!;KM3a!7Q8Nb;RM7aTX6;)gfjO0:T_2=Z%fP1F!*H(cV@dl2]0hP0gVT`(^Dk;^e<`N"303Ge>QF*`-O=#YMPWHu(_E[]#`tga-.IQh3)Au)t&2QcmB+@3.RNRl8CA$f3n:ZlK%DQTqZr2t&X.G0cCcn-n2L,P.sZ*bg07VT6F,%k(MV6AsLilGH?#h,5_`\l6MF]h9"GdUD<PcKOr]2*o#YZY?JV`i7oct8UrFj^[+%8#^Ss!t-**`=]oAl/r.`^5cKj;i0ZomZ7$$'tWm.P#"b];LbF+ShjnHSC,;fH,6SM3X(GG2CH>lKeThN>m+g/^qITF3'!m2R"UK3%Eo2O&f9XG&+QtbiciY/)7JY<I,d_n>TtB%GU@[09%-MaK(.q(0`!#sK)ic\T.W@jCc5RW^jGXLA<_n<fns7n>+LF*S4PQ`(WAEMO%CcEV`RQ^jj';Rt@]\sMen&XeILkeN79hTj9PI@?52<M"I-Zt&1:H8nc\O28J"CmrpSSH@:3_LpdVt@-e2;a]TM)1\u:ddmVoPR>)%NUfk1G)nFg0BNM+<\P>*5\ka?R:]1M,2@d$hJZ;q-[J^N9hoXg6?4]Jl/<dT"C;FKTnLO,M:_r(1FZH=VIK=Y9ULOEm=kr$BH'Am%WK&_\QnWR8/Mng];/U>CKk>h%ZIG2Vi!qJ<ER.[&Ejt%.@P_?q]RATG@8'/SAM">7dIaG.UB7W[QaGmJAc.JC-^lZ$s-et1ks*aX%U?.2m`bdp%@leEO&45\kJ",@3/[@.6l=g%;)6LL[(h22nSbB(35>?5%nk>m*As,da!L>2M3jWH1$_M#$%`JmGU`OhgVb]g`PIA2@%s'nG\M:>[nNQ*/b$"HD9AROs&r^)eoHK$WBE"GINcCB[7FITEEH7m&D).hr>dPSgBd:)/_QC+c+]W+<<\>"AD5=$22M2>aNN0VdT%oQ+R;Ms0!@p`)_Sg/b)%QRqL#$.Ca!-.9r:Bb)5ARRRP`aXa9[N"js=GmNn&fNMg"G,_c'4S4L^#Zs2H6j65E0\!r^h@jmjC&<h1%Qq4Gmr>5]7#5/AkZ_Cu_Ok+?6Ftf%u,16#!8`^X4;U)S#BBBPJ_fNtX'W(EN"&X/[U<ba8F-YsXgDNRr]ODc52^jN"Wq05ZDWlIP%WQdl2F5$k1AODga0=<;r!0<M1"Ic5&gEb.pU=V*+l2!)<D\2FWlEqf0O8`h2+@6,5VAbX9=HbIh1hKN+H4KVpE@m-kfM4qMZf39S%9-CH5:D%>hW0@nXMinX?f5N+*.?`Jm8?a0SYI?o3r>MnMVC8mb:pNXm!H_qo.C8%_H[!J+$U%(+k"Kh>6hj3"e,,L!2Ao[r,gg)@%-+Yso9N2P6"1U3X>#H8?o;YYe("lu*NfSIm2_ERX5[GuZj+8C3&PCKMo["<J1F"jh7SKKnV(3oa;^7^JJdE'01>#+qg?V8rOY+VX%X>K'm]"#^gF1^Yk2?^M<q\o!<jLHMBX_&Tr\Ckk.%!RTqGQg=_r5SQ1mtR`Li\3#@jZlT"AB(,`3Q3,N:hPX98c%C@JYQ=g;[D*X%1@]X[i$h,6/Ya)MFV6gth>3u[bW@!MaCHR#"9sg9\1Umh`!AH94_1.QeOc=d<fpcB8QeO3.2e`I^hKBsiX`F4B'rC:DDQBJ6mROY%PG&lmmG&B='K$\i.p2()O=B%E,Ya\Xa\X_d<m4pm]0X\=2HMJ!F*q:.gMuI'N?h3f7nL)-edrp63euK/V`9p,X/"Nb_Ymq61VO4@%CNWEN@8;lQ'4*EC0?n'[%T@5=OLB35B#R-"B&#Ii),b6`1#i(!UH1h.?5D\#&t6e6!R8!+SgrQ"@^cJdO`W)<`8,/`1p+`jIFj/!%T\VL81@5Q+E#Q)+_dV/bXUQXIM`#]2<$m`-`_36iTL+A#e];]CHl`FW`5iU\GE=V:`YIeBaS7'qEFZnmOdg<*M89L\V8eH;0fEk7%3BtQP&eM=G:BXkRkU&VbRm4`t/u"bJb*]F_`LjBNI*/!,<:*A+Tc"!PZZ5HX8q]NXm7kVLX@p#:o8JHP&S[<@Tk/s#Wg$_cXQ17;%h2q(OmBXiUi!UJV&E75l6O91t>U5@bN/Rb61i>ikkj/uo?0Aan!(oZ7*a`;`@UI*m`k"1B(IF&RL]TZ:e@<:C8\',,d1.EtckL&C%2dg=VbTbno0b9SsfXeJT(FA'M(V$0`@$-?bBhn/05`DpbO'j,#7aR5T')KhQ>_rNq!;n<6<,mEYX%MnnR.9%mR^J$#i)1d6%29Tf%nE)9(KVD**BFuttRnK-h=dU8qh:rZ=0T5cf:I&aflO2R_;1cP4?9eR.;,_#dbfhqX>-^9e$#Mh(JYG-`/-VT71a@hY'<nA[!""A=%LsnVOMPT]"p]3%\Loa.%O*OfrjNp]P#0k*Or58"K_H-K,+FH+SMolMK4b,TXXkdem:PNaPN!s9$`^5buZ;QHNAn7Lo:U"[QK,Bu:%)_a*@V=q0IY;,.A4*Q\SXf)YD%hm-G:`Rq.<T42eN'q0`&8#OgWabRVR*Q"__XS#t=OWaqd$=5,mfj2Sq*LnDpd=)F-?GQB]$O^L%`$e=J6GDkS2c#*r7C=SO4c'4l4J4![5G<LoM?%HT#gUg<.Q=TQgju7*o=KkTKX0c.C7o9/Q8tO5?)p4f"?grhAg)]OhcbJb%IB]<%m&%JKg_M'pN0YHFYIB%@SZ3^7A.[EX)mgn+E]:=kK`$\R$3i%"CWfAj5WA9@Hi'I>@m6UQ*_8_f@=?om%69V?j5rV7TfjMMqi]Zc%Us5/eTkS98!6+tM%-l8fJ>+bB7VeDf#UcDro*Kc/TW>kU_X]O_A*F0E\AqalT*Ur<,PVrGc4;mKT<r6]9]TA;BA!sK*PDPc@-*l.%V*L(g!o<tO?l7@'R&;D-$2\W$^0s2U'))_#S]KS6bbQWs_+'k.X!I-6bK?>(_G(`=@a#;nepq-.00460&]k+RKX@q'bVCcPl&%5]%!H/>o%Rp^M+'TF8G`T*PUt@"hLlqCQ/M*G(;BC-Dd[<q-V?$3&&b9Tp^6u7P_qc<,%Y=Bm9Kl=M)HLfsA<apd4@eq-6>$B*7>^^^%>%^2p\ZYQP1k.G@R$:-//90I=8YlolYY:LsimA<.bHrfU8`rHi(J]7?BN>LVO\20c4j=,aBp7$l:5A).p;50u3H1e4N""MJAf)p'%d3imOA_KD1TtVu@>-T<kAn8D%[8r;i$i27Yqs[+n"_$gf5F$^PY6#Mn7q/4_UnB;E^T6]D@bWtUk8aY#iPO&#af:Go-`h.t)7XTe%qcHgq[=lT#m'L9"bRbLhY:%E\BSmC7A!RlN8GX!nh'p/0'(f)tUIEj56lFDI];aIH#jF,q$X/kQG_eeROYC$:58Mr'0UKH?8S!1,%QqfegZ(6)\R-JsXD=8$]C0&a+8]L^bm8/?cRMQY*#HE3LDg"cMkoN";KX]6%PJc$Bq9eON.9Wa(J*&QHTD?\q;]K$?1W?WL5>rP+%F]0:WZ(2EU.<!sdYNqG9/Mu&5HGHPMqX1)-nP5uQe!<G4OmtY.I>2?'6Tt@V::,`Sa"WU4C,BLAL,Mmc%rj$G,#oWi_>gbmKOiuA%7rtjlb7`CWR^U>8KH"WLV38IL>HJe&lR\>I^M=BBl0aku,4.pE&tbqQ:AVEfet]d"S#m)+8.r*F[.];(+FFZfL%403[&QX6U5b9a%kfN;EUUbT<INN.s1fYI'+`pUJ//*YY&hU6NdEi"?Zj(:&X[dI$2Z%qBqr=<ZE5I+e_?mibE6o?Gg]rM/J4r4JP/XDp*s1)KBG:dV%-su+YSs`dA\c':A!=_W%/VQKVC9/L\$rUM#ZnfcsLkUU=N<ku66NP?`:#AkI*flON+H<*L'r*b.5M&-'qF?j;(,%9]Dte`ESDgfL%0OehCC2jB7<1GhCb)?VDMTKa)7aaPgTN#Warh9V.;k*`#Kr)/o=2R(CJ*5Rac4/Y3973Q8ctW^]"XDW,iBbHNf4@6:'IcPQH8H$D%(TB5,-iG[HDX+Tarji4/eH<B,'CUg+en_uo^*+D<X6p!d=BCaha:`@:%jV=iUAkqpe<iiO9V^b)1/6\o74iB"f#QU4FG$EtC5.Z5%7>P&C50>QQ-"1UTh3)GS-6*LBI)Qa<W/OKQq4StD5t#l?FF5A_Acek;Q*h&!G+l`Th<67aN2EIhV=`;9o5:u)]I.cXUPu"O#97=^%mS(Lh-4NHO>(3IPR>C2c%Q9EkKRqat+@p25@g$T?C@08c,o9.9;(9^'JIT(,nOF01M=L@@4W4NI9#X8!k]u6&2g*i$L>uH]2rkGf%*[H\C,jPt0YYp'd*CV%5b+*11Kfto"]t[LU@jidD&nQn(<[SNg,_=-J$rs<_YI;&J:p8o"&4oIgQ5"8=>Db$A'*K$0mS3jp!+]7u%,RmI3_M5+6hX0-rmV6EnKNUqL]b[h#,alYcN`R.g*m%`,D"JNRC2*7_a)mUY<eip\-<2(CciB2ocM:1-];]Z7)0U-apV3Z-.lY1Z%>&Us3_Ubb$9",`T=V`K^/-ZtQ.W72q2@_O[>(crh\[SIl;/gcYP'NqO;iK!*V%Lk$!$4QCp2EJ&#^AeW3f1.&QA"o>:h??i\qmM#%?m84;_ZUG$.b17F!j"`46]D]5`k5N'[s,kJ;:+9``g01gRk@'j#s+@R\eNa<)\+H1OZgRlVi97PVK#HoV^//4!,g8tUKIaLIrQ_0%>krYJ4o=u?5G_98d*UY&eX*apcE;*"r9:i)5PmZPqTjWi`-8uO_-d&Brd;83%Jck#rnFW++U)32a+oC!];pA[+$kk[hu~>%AI9_PrivateDataEnd