%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: CMS_Xsec-Summary3.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: disserto
%%CreationDate: 30/8/15, 20:56
%%BoundingBox: 0 0 595 415
%%HiResBoundingBox: 0 0 594.2972 414.9373
%%CropBox: 0 0 594.2972 414.9373
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 988 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-21:37:19        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2015-08-30T18:47:29Z"
   xmp:CreatorTool="Preview"
   xmp:ModifyDate="2015-08-30T20:55:28+02:00"
   xmp:MetadataDate="2015-08-30T20:55:28+02:00"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.10.4 Quartz PDFContext"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:42327f4d-e5f7-df4e-ba99-3bfb420e9d6c"
   xmpMM:InstanceID="uuid:db04cb53-8728-b741-a8fd-22ccb3c162df">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">CMS_Xsec-Summary copy</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -414.937 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 414.937 li
594.297 414.937 li
594.297 0 li
cp
clp
[1 0 0 1 -130.281 0 ]ct
gsave
135 415.536 mo
707 415.536 li
707 8.53555 li
135 8.53555 li
cp
clp
138 3.57254 mo
704.929 3.57254 li
704.929 396.536 li
138 396.536 li
cp
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
grestore
gsave
138 396.536 mo
705 396.536 li
705 8.53555 li
138 8.53555 li
cp
clp
.002 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
138 396.536 mo
704.929 396.536 li
704.929 3.57254 li
138 3.57254 li
cp
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
@
grestore
gsave
135 415.536 mo
707 415.536 li
707 8.53555 li
135 8.53555 li
cp
clp
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
208.866 366.736 mo
690.756 366.736 li
690.756 37.9566 li
208.866 37.9566 li
cp
208.866 366.736 mo
690.756 366.736 li
690.756 37.9566 li
208.866 37.9566 li
cp
false sop
.75021 .679683 .670222 .90164 cmyk
@
.75 lw
208.866 366.736 mo
690.756 366.736 li
208.866 366.736 mo
690.756 366.736 li
217.08 376.757 mo
217.08 366.736 li
230.77 376.757 mo
230.77 366.736 li
244.46 376.757 mo
244.46 366.736 li
258.15 376.757 mo
258.15 366.736 li
271.84 376.757 mo
271.84 366.736 li
285.53 376.757 mo
285.53 366.736 li
299.22 376.757 mo
299.22 366.736 li
312.911 376.757 mo
312.911 366.736 li
326.601 376.757 mo
326.601 366.736 li
340.291 376.757 mo
340.291 366.736 li
353.981 376.757 mo
353.981 366.736 li
367.671 376.757 mo
367.671 366.736 li
381.361 376.757 mo
381.361 366.736 li
395.051 376.757 mo
395.051 366.736 li
408.741 376.757 mo
408.741 366.736 li
422.431 376.757 mo
422.431 366.736 li
436.121 376.757 mo
436.121 366.736 li
449.811 376.757 mo
449.811 366.736 li
463.501 376.757 mo
463.501 366.736 li
477.191 376.757 mo
477.191 366.736 li
490.881 376.757 mo
490.881 366.736 li
504.571 376.757 mo
504.571 366.736 li
518.261 376.757 mo
518.261 366.736 li
531.951 376.757 mo
531.951 366.736 li
545.641 376.757 mo
545.641 366.736 li
559.331 376.757 mo
559.331 366.736 li
573.021 376.757 mo
573.021 366.736 li
586.712 376.757 mo
586.712 366.736 li
600.402 376.757 mo
600.402 366.736 li
614.092 376.757 mo
614.092 366.736 li
627.782 376.757 mo
627.782 366.736 li
641.472 376.757 mo
641.472 366.736 li
655.162 376.757 mo
655.162 366.736 li
668.852 376.757 mo
668.852 366.736 li
682.542 376.757 mo
682.542 366.736 li
217.08 376.757 mo
217.08 366.736 li
682.542 376.757 mo
682.542 366.736 li
208.866 366.736 mo
208.866 37.9566 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /LWYAAA+Helvetica
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000036c6670
676d000000000000042800000a1d676c7966000000000000142800002f14
686561640000000000000e4800000036686865610000000000000e800000
0024686d74780000000000000ea4000000f46c6f63610000000000000f98
0000007c6d6178700000000000001014000000206e616d65000000000000
103400000024707265700000000000001058000003cf6764697200000000
000000000000000005c0001005bd00280580001a042f001f0000ffd90000
ffda0000ffd9fe55ffe605c70010fe6dfff1033b000000b9000000b902fe
3f3c00c0008d009b00af000600a800c00028005e009800c9016a00b9015c
00b400d6011e002e0080000400b8004c00cc01ffffd1006600a400af0074
00c2009500b1000c0028006d0015004c008e0125ff7a000c0040004c0062
0084ffa200240038008600bd0039005e008e00edffa9ffb3004000520055
00aa00ab00c200cb012302b10413ffaeffe4000800510074008400aa00d1
ff4cffaf0012002c004200500051008400be012503daff680018003b0098
009c009f00a100c100ec018201b4ff68ff76ffd0ffe100020018001c0053
0053007d01b401e103af0486ff9cffeafffe001f0028002a005200600093
00a300aa00af00af00c001000145016b0174019301950240028202b40485
0517fefd00060029004700470048006f008800b400b900c400f200f901ef
02180310037403c5ff35fff3000b004b004c005200550065007600760087
0087008e00ab00bb0106013001430150017d0194019501d3022a02550258
0277027802e6034e035c037903d3047304b2058c0598060bfef5ffbbffc7
ffd50017001d005b0072007e009c00c200d000f400fa01030106011c0125
013b0142015e015e0180019b02b901a101b9025001c001d002aa01df01e3
01ef01fb0205020c0215022b0274029302ab02c202ce03690395039903df
03f5043e050205a105e5062507dbfe62fe89feceff3bffe1fff800030008
002100390042004e005f0061006f00700034007f008e00ad00ad00af00bd
00c400c500c900c900c900e3011c00ed00f800f901000112011a0132014d
014d014e014f01660169019e01ba01ba01be01e301ef01f6020002000209
02110217021c02530262026d028002d50280031b032a034a035a03af03af
03c803d603fb03fb04050413041504470449008c046d049a049a04a604a8
04b204cf0539053e054e055605800589058c036305d105d6067e068e06b2
06ef06f00728074c076f078c00b400c900c000c100000000000000000000
00000004012400af0032006e0063014401620096014301a10161008a0074
0064018801ef01700028ff5d037e0347023000aa00be007b0062009a007d
0089035c00a1ffd803aa00d70093006c0000008000a70442001d0597001d
00820030002a002a002a002a002a40292a292827262524232221201f1e1d
1c1b1a191817161514131211100d0c0b0a090807060504030201002c4523
466020b02660b004262348482d2c452346236120b02661b004262348482d
2c45234660b0206120b04660b004262348482d2c4523462361b0206020b0
2661b02061b004262348482d2c45234660b0406120b06660b00426234848
2d2c4523462361b0406020b02661b04061b004262348482d2c0110203c00
3c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed515823
20b04d44235920b09051582320b00d44235921212d2c20204518684420b0
01602045b04676688a4560442d2c01b9400000000a2d2c00b9000040000b
2d2c2045b00043617d6818b0004360442d2c45b01a234445b01923442d2c
2045b00325456164b050515845441b2121592d2c20b0032552582359212d
2c69b04061b0008b0c6423648bb8400062600c642364615c58b0036159b0
02602d2c45b0112bb0172344b0177ae5182d2c45b0112bb01723442d2c45
b0112bb017458cb0172344b0177ae5182d2cb002254661658a46b040608b
482d2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185
592d2c20b0032545b019236a4445b01a23444565234520b00325606a20b0
09234223688a6a606120b0005258b21a401a4523614459b0005058b21940
1945236144592d2cb9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b
2d2cb93b21e7830b2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c456920b00943b0022660
b00325b005254961b0805358b21940194523616844b21a401a4523606a44
b209191a45652345604259b00943608a103a2d2c01b005251023208af500
b0016023edec2d2c01b005251023208af500b0016123edec2d2c01b00625
10f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d
2c764520b003254523616818236860442d2c7645b0032545236168231845
6860442d2c7645b0032545616823452361442d2c4569b014b0324b505821
b0205961442db8002b2c4bb800095058b101018e59b801ff85b800441db9
000900035f5e2db8002c2c2020456944b001602db8002d2cb8002c2a212d
b8002e2c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db8002f2c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800302c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80031
2c2020456944b001602020457d691844b001602db800322cb800312a2db8
00332c4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a
1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321b8
01408a8a1b8a235920b80003265358b0032545b8018050582321b8018023
211bb003254523212321591b2159442db800342c4b535845441b2121592d
b800352c4bb800095058b101018e59b801ff85b800441db9000900035f5e
2db800362c2020456944b001602db800372cb800362a212db800382c2046
b003254652582359208a208a49648a204620686164b00425462068616452
5823658a592f20b00053586920b000545821b040591b6920b000545821b0
406559593a2db800392c2046b00425465258238a592046206a6164b00425
46206a61645258238a592ffd2db8003a2c4b20b0032650585158b080441b
b04044591b21212045b0c05058b0c0441b2159592db8003b2c2020456944
b001602020457d691844b001602db8003c2cb8003b2a2db8003d2c4b20b0
03265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0
032653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a
235920b80003265358b0032545b8018050582321b8018023211bb0032545
23212321591b2159442db8003e2c4b535845441b2121592db8003f2c4bb8
00095058b101018e59b801ff85b800441db9000900035f5e2db800402c20
20456944b001602db800412cb800402a212db800422c2046b00325465258
2359208a208a49648a204620686164b004254620686164525823658a592f
20b00053586920b000545821b040591b6920b000545821b0406559593a2d
b800432c2046b00425465258238a592046206a6164b0042546206a616452
58238a592ffd2db800442c4b20b0032650585158b080441bb04044591b21
212045b0c05058b0c0441b2159592db800452c2020456944b00160202045
7d691844b001602db800462cb800452a2db800472c4b20b003265358b080
1bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321
b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003
265358b0032545b8018050582321b8018023211bb003254523212321591b
2159442db800482c4b535845441b2121592db800492c4bb800095058b101
018e59b801ff85b800441db9000900035f5e2db8004a2c2020456944b001
602db8004b2cb8004a2a212db8004c2c2046b003254652582359208a208a
49648a204620686164b004254620686164525823658a592f20b000535869
20b000545821b040591b6920b000545821b0406559593a2db8004d2c2046
b00425465258238a592046206a6164b0042546206a61645258238a592ffd
2db8004e2c4b20b0032650585158b080441bb04044591b21212045b0c050
58b0c0441b2159592db8004f2c2020456944b001602020457d691844b001
602db800502cb8004f2a2db800512c4b20b003265358b0801bb040598a8a
20b0032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b
8a235920b0032653582321b801408a8a1b8a235920b80003265358b00325
45b8018050582321b8018023211bb003254523212321591b2159442db800
522c4b535845441b2121592db800532c4bb800095058b101018e59b801ff
85b800441db9000900035f5e2db800542c2020456944b001602db800552c
b800542a212db800562c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800572c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800582c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800592c2020456944b001602020457d691844b001602db8005a2c
b800592a2db8005b2c4b20b003265358b0401bb000598a8a20b003265358
2321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003
2653582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a23
5920b80003265358b0032545b8018050582321b8018023211bb003254523
212321591b2159442db8005c2c4b535845441b2121592d00000000010000
0000000037422dfa5f0f3cf500110800000000005f4d8f0000000000cff2
eef7f865fc270b9108f9000000090001000000000000000100000629fe29
00000c01f865fced0b9100010000000000000000000000000000003d0512
004202390000071d004202aa008e02aa0044023900aa02aa0055023900af
0239000004730040047300c4047300400473003104730034047300420473
004d0473004b0473004204730049023900e304ac005c0556001e05560097
05c7005a055600af04e300af05c700a1040000230473009c06aa009705c7
009c055600af0556006004e3002105560034078d002504e3002f02390080
0239002f04730052047300760400003b04730038047300480239001c0473
003d0473008401c7008401c7ffda01c7008906aa0084047300840473003b
047300760473003c02aa00890400004202390017047300800400000b0400
001500000036003600fe0146018801ba01d801f8021c028a02b0033c03e8
043604ca056005aa065c06f2071e074607d2085608e6092a095c099409d6
09fe0a8a0ae00b360c020c300c8e0d5a0da60dd20e040ece0f380fba1026
10f0113c11e412341262129c12be133a1396140e148014f4153a161a166a
16c416f4178a00010000003d00920009006b0007000200100010005d0000
07e80a1d000400010000000100120001000000000006001000004e444f49
42492b48656c7665746963610000b800532bb800492bb8003f2bb800352b
b8002b2b4118008001a6009001a600a001a600030069018b0079018b0089
018b0099018b00040089018b0099018b00a9018b00b9018bb2040840ba01
79001a014a400b041f5414191f180a0b1fd2b80106b49e1fd918e3bb0119
000d00e10119b20d0009410a01a0019f0064001f01a50025017a00480028
019ab3296c1f60410a01a9007001a9008001a90003008001a9000101a9b2
1e321fbe012c00250401001f0126001e0401b61fe7312d1fe531b80201b2
1fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d671fbe1d671fab27
b80401b21faa29b80401b61fa91d6c1f931eb8019ab21f921db80101b21f
911db80101b21f751db80201b61f6d29961f6431b8019ab21f4c96b802ab
b21f391db80156400b1f3638211f351de41f2f27b80801400b1f2d1d4c1f
2a31cd1f241db802abb21f201eb8012540111f1c1d931f3a1d4c1f1e1d45
273a1d4527bb01aa019b002a019bb2254a1fba019b0025017ab349293896
b8017bb348283125b8017a403648289629482725294c1f25294627272948
2756c80784075b07410732072b072807260721071b071408120810080e08
0c080a08080807b801acb23f1f06bb01ab003f001f01abb308060805b801
aeb23f1f04bb01ad003f001f01adb70804080208000814b8ffe0b4000001
0014b801abb41000000100b801abb606100000010006b801adb300000100
b801ad401f04000001000410000001001002000001000200000001000002
010802004a00b0018db806008516763f183f123e113946443e113946443e
113946443e113946443e113946443e11394660443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b2b2b2b2b2b2b182b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b74752b2b2b65422b2b4b5279b376706a664565234560234565602345
60b08b766818b080622020b16a704565234520b003266062636820b00326
6165b070236544b06a234420b176664565234520b003266062636820b003
266165b066236544b0762344b10066455458b166406544b2764076452361
4459b36242725d456523456023456560234560b089766818b080622020b1
72424565234520b003266062636820b003266165b042236544b072234420
b1625d4565234520b003266062636820b003266165b05d236544b0622344
b1005d455458b15d406544b262406245236144592b2b2b2b456953427374
b8019a2045694b20b02853b049515a58b020615944b801a6204569447500
00>
[12053 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> LWYAAA+Helvetica AddT42Char 
1 784 5 <000100aafed0018000da000e002d401600230e0a64080a1017171a07340a
640008190f6365182b4e10f44d3cfded4e456544e6003f4dedd4ed313017
3637363534262723353315140607aa451c0f01026dd66076d10c552d2a07
0b07daca77b415000000>LWYAAA+Helvetica AddT42Char 
1 4268 23 <0002005affda057105e5001d001e00b1403b1b0597019605031f011f0482
018705891305530803861d111115063a1d030c3a15091e021e1e19033102
3b1031111a20093119191f20a1216a66182b2b4ef44ded4e10f64dedf4ed
12392f003f3fed3fed12392f10ed31304379403a001c172513260e251b26
0b160932000d1410320112110f10071c0932000500033201010204030a18
0c32000f120c3200081a06320104010632012b2b2b2b01103c103c2b2b10
3c103c2b2b2b2b2b2b815d015d080117232e012322001110123332373637
3306070621202726111037362123041e013411c221c5b2d9fef5f1efdc73
3d1ec21a92affed7ff00aee5acba01472805e5fedabb8ea6fecffec5fefe
febfa95991e89dbd9bcd01ac0145d0e20000>LWYAAA+Helvetica AddT42Char 
1 5568 31 <000200af000004f805bd000a001400614035690c6912790c7a1204481458
1468147a140407081e1110100a010e0f1e0100020a080206120c04091414
31041a160f092500191516b8010bb3219589182b2b4ef44dfd3c4e10f64d
fd11121739003f3f3cfd3c1012392f3cfd3c015d31305d13213216151406
2321112300272623211121323635af0295c4f0d6defe32c70380784273fe
74018c86a705bdddc8acfffd9304b93a1ffe03729000>LWYAAA+Helvetica AddT42Char 
1 5740 32 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>LWYAAA+Helvetica AddT42Char 
1 6988 37 <00010080fe6d020005c700070035401c031c0010041c07120917171a0501
580304200700190809f0216c33182b2b4ef43c4dfd3cf43c4e456544e600
3f4dfd3ffd31301321152311331521800180d6d6fe8005c793f9cc93>LWYAAA+Helvetica AddT42Char 
1 7076 38 <0001002ffe6d01af05c70007003e402000070102031c050410001c071209
17171a06200201580003190809f0213c7c182b2b4ef43c4df43cfd4e4565
44e6003f4dfd3f3cfd3c01113939313013331123352111212fd5d50180fe
80ff00063493f8a60000>LWYAAA+Helvetica AddT42Char 
1 7580 40 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>LWYAAA+Helvetica AddT42Char 
1 7792 41 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>LWYAAA+Helvetica AddT42Char 
1 8052 42 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>LWYAAA+Helvetica AddT42Char 
1 8268 43 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>LWYAAA+Helvetica AddT42Char 
1 9320 47 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>LWYAAA+Helvetica AddT42Char 
1 9844 51 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>LWYAAA+Helvetica AddT42Char 
1 10028 52 <0003003bffd90421044e000c0018001900904033980896109916a504a808
a610a916b808c808d704e50ee9140c3a08061d18070c1d120b1907191915
02270f1a1b092715191a1bb80109b321725d182b2b4ef44ded4e10f64ded
12392f003f3fed3fed31304379402c001704260b13092600001102260107
17092600050d0226010a140c260001100c26000816062601030e0626012b
2b2b2b012b2b2b2b2b81005d241235342726232206151416331200111002
212200351000330702e085304cbaa59696a3d6011efcfef7ddfefc0112e7
0674010fa6965e94fcb2abe403dafeecfef4fefdfeae012bfc010e014005
>LWYAAA+Helvetica AddT42Char 
1 10268 53 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>LWYAAA+Helvetica AddT42Char 
1 10728 55 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>LWYAAA+Helvetica AddT42Char 
1 10868 56 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>LWYAAA+Helvetica AddT42Char 
1 11316 57 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>LWYAAA+Helvetica AddT42Char 
1 11476 58 <00020080ffe303de044900170018005e403ab814c8140209130814191319
1428067703d707070800050e0a00060d0a051d120b180718180b160d2e0a
290c0b1a1a01291619191ad2216242182b2b4ef44ded4e10f63c4dfde411
12392f003f3fed3f3f3c391112393130005d015d01111417163332373635
11331123370607062322272635112501381a3083bc4425b4aa0223346793
e5532d01af042ffd39523460a85a9d020efbd19e3d2a5499528902d81a00
>LWYAAA+Helvetica AddT42Char 
1 0 0 <00020042000004d005bd000300070043b800532bb800082fb800042fb800
0810b80000d0b800002fb8000410b80003dcb8000010b80007dcb8000310
b80009dc00ba0007000000562bba0002000500562b303133112111271121
1142048eb8fce205bdfa43b8044dfbb30000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/space 1 def
/comma 5 def
/C 23 def
/P 31 def
/S 32 def
/bracketleft 37 def
/bracketright 38 def
/b 40 def
/c 41 def
/d 42 def
/e 43 def
/i 47 def
/n 51 def
/o 52 def
/p 53 def
/r 55 def
/s 56 def
/t 57 def
/u 58 def
end
LWYAAA+Helvetica /Encoding get
dup 32 /space put
dup 44 /comma put
dup 67 /C put
dup 80 /P put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica /LWYAAA+Helvetica findfont ct_VMDictPut/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 22{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [0 -18.4868 -18.4868 0 0 0 ]msf167.863 72.7795 mo( [pb])[-5.13931 -5.13934 -10.2787 -10.2786 0 ]ysh%ADOBeginSubsetFont: JIWAAA+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /JIWAAA+Symbol
Type42DictBegin
[<00010000000c000c000c000c4f532f32e67a4476000000cc000000606376
74206e7d83040000012c000002166670676dc62bd4b60000034400000200
676c7966037510d6000013800000048868656164cf8bbaf2000005440000
0036686865610cca02960000057c00000024686d74788f92d202000005a0
0000031c6c6f63618d8c8e4a000008bc000001906d61787008d608cd0000
0a4c000000206e616d657940a07400000a6c000001037072657016a939d3
00000b700000081067646972000000000000000000000000000304940190
0005000402bc028a0000008c02bc028a000001dd003200fa000000000000
000000000000800000eb380160ea14400000000000007079727300400000
f8ff059cfd9c0000069e0264000000010000000000000000000000200000
00ee00cd003b00870289003f005600c1005e01ec00b20193008b012d0089
00ee003b00ae00b200c700b20037002d006003a600c100fc00d300b800d3
025c00cb00c100660031021900c1004e005400b2009c0202021d007500c1
019600c1020e023f01ac009e029c017f00a0005a001f042700c100f40058
03b4006d003302a8005e046a02850700007302a2007501100073005e0242
024e0902009804f600370546005c00bc00b000a6036d02e7075e004401f8
0075006800dd00e1003502370062008d0262008900be01d301b601d701e3
025200cf01c301fc01cd05480548054805660000001700ee05c100b6021b
007100b60000001b003f030405480548054805480000001f0029004e0029
004e0066019305cb019e008b015000ee00ee0031009a0091004e009a0548
00b000310398002d036d003300e9004a004a00290398039800330583004a
00c3008f005205d3005a019c0075067d00600398039803b601b200330398
058301c70398039803980000001201e5061d003904210227065e008700e9
05b0023d02d70077008302f6058301b400df058d02a600750112059c0283
0162005e0242024e004e0552008b058d001404f60021058d005c002d001f
05f4005201ba022d001003a601aa0075006800dd00e105c902e7020c0646
006405ec01ee01f8062f062501b205f80200008301c10635003d01fc0633
01be0639060e00680083006200be7b857fff00820030002a000040070605
04030201002c2010b002254964b040515820c859212d2cb002254964b040
515820c859212d2c20100720b00050b00d7920b8ffff5058041b0559b005
1cb0032508b0042523e120b00050b00d7920b8ffff5058041b0559b0051c
b0032508e12d2c4b505820b80107454459212d2cb002254560442d2c4b53
58b00225b0022545445921212d2c45442db800072c4bb800065058b10101
8e59b801ff85b800441db9000600035f5e2db800082c2020456944b00160
2db800092cb800082a212db8000a2c2046b003254652582359208a208a49
648a204620686164b004254620686164525823658a592f20b00053586920
b000545821b040591b6920b000545821b0406559593a2db8000b2c2046b0
0425465258238a592046206a6164b0042546206a61645258238a592ffd2d
b8000c2c4b20b0032650585158b080441bb04044591b21212045b0c05058
b0c0441b2159592db8000d2c2020456944b001602020457d691844b00160
2db8000e2cb8000d2a2db8000f2c4b20b003265358b0401bb000598a8a20
b0032653582321b0808a8a1b8a235920b0032653582321b800c08a8a1b8a
235920b0032653582321b801008a8a1b8a235920b0032653582321b80140
8a8a1b8a235920b80003265358b0032545b8018050582321b8018023211b
b003254523212321591b2159442db800102c4b535845441b2121592d0001
0000000100002b1695d25f0f3cf50111080000000000a1cd888000000000
c62fe93dfeaafd9c08c0069e00000006000100000000000000010000059c
fd9c00000856feaafbdc08810001000000000000000000000000000000c7
04cd00660000000000fa00000200000002aa00dd0400fffa06aa00810639
006002aa005e02aa00600464005a02000058020000890239fff20400003b
040000a00400003d0400003b040000330400002b04000054040000390400
00520400004c023900a002390079046400600464005804640060038d007d
02aa005402aa00540400ffee03d7009e019a00a003d7009e0333007903ae
00ae0464005c05b4006d0464005a0464005804640058049c009603f4007f
05b4004a0696003d046400230231ff480625006605b400d50464ffe30400
ffec0464001f04e5002b080000d90464005803f400060156feaa06520071
046400580464006d0464005804d3011d07e5007307e5007304d3011d0856
00ac05b400370625009806250098057d0252057d008f05c7fff605560031
04d3003504e3002904e3002905c7002b05ee005802aa003905c7003f057d
001d071d003f05c700270529007105c700560625002f0473002f04bc0012
04e300210585001b061b004605c70019065c0002050c004604640089034a
000203f4004803f4002704d30012042b005e02a2009c0464000e04640023
042b000003f20021046400420464007d04d30048038300540383ffcf049c
fff8042b003304640014057dfff8057d00460200008901fa0083034a0093
0606007306060021060600cd0606008105b400c90400049c038300140625
0025062500250464005805b4003705b4003705b4003705b4003705b40037
04d300b207e5004407e5004404d300b20856007d0544004a05b4003704d3
00a604d300a40625008d06e7014c06960050057d025206960127031200be
031200be031200810312008105b400480464004a0400009102a2003502a2
0035050c001205b4fff604d3003d0383006d05b400310312008d0312008d
031200250312002507e5013f03f401b603f4005a03f401b603f401b603f4
006603f401b603f4006604f6ffec04d3022d0800ff7f0312008d031200be
031201fc031201cd0652006206520062071f01350652004806520048064a
00c1057d005e065c003d0464001f0544007d05f4ffb20200fff202007fff
02007fff02007fff02007fff02007fff0000002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
002200220022002200220022002200220022002200220022002200220022
00220022002200220022005a009200920092009200920092009200920092
00920092009200de00de00de00de00de00de00f600f600f600f600f6012a
012a012a012a012a012a012a012a012a012a012a012a012a012a012a012a
012a012a012a012a012a012a012a012a012a012a012a012a012a012a012a
012a018c018c018c018c018c018c018c018c01ea01ea01ea01ea02440244
024402440244024402440244024402440244024402440244024402440244
024402440244024402440244024402440244024402440244024402440244
024402440244024402440244024402440244024402440244024402440244
024402440244024402440244024402440244024402440244024402440244
024402440244024402440244024402440244024402440244024402440244
024402440244024402440244024402440244024402440244024400010000
00c7007a0004000000000002001000400011000007e80810000100010000
000800660001000000000003000d00000001000000000004000d000d0001
000000000006000d001a0003000004090001001a00270003000004090002
000e00410003000004090003001a004f0003000004090004001a00690003
000004090006001a00834f4c434d464e2b53796d626f6c4f4c434d464e2b
53796d626f6c4f4c434d464e2b53796d626f6c004f004c0043004d004600
4e002b00530079006d0062006f006c0052006500670075006c0061007200
4f004c0043004d0046004e002b00530079006d0062006f006c004f004c00
43004d0046004e002b00530079006d0062006f006c004f004c0043004d00
46004e002b00530079006d0062006f006c00b800072b41ff0280010500fe
0003010400fe00030103007d0003010200fe0003010100fe0003010000fe
000300ff00fe000300fe00fe000300fd00fe000300fc00fe000300fb00fe
000300fa00fe000300f800fe000300f700fe000300f600fe000300f500fe
000300f400fe000300f300fe000300f200fe000300f100fe000300f000fe
000300ef00fe000300ee00fe000300ed00fe000300ec00fe000300eb0000
000300ea00fe000300e900e80064000500e900fe000300e80064000300e7
00fe000300e600fe000300e500fe000300e400fe000300e300fe000300e2
00fe000300e100fe000300df00fe000300de00fe000300dc00fe000300db
00fe000300da00fe000300d900fe000300d800fe000300d700fe000300d6
0084001d000500d60023000300d200fe000300d20023000400d100fe0003
00d000fe000300d00023000400cf00fe000300ce00fe000300cc00fe0003
00cb00c8000300ca00fe000300c900fe000300c800fe000300c700fe0003
00c60064000300c500fe000300c400fe000300c300fe000300c100fe0003
00bf00fe000300be00fe000300bd00fe000300bc00fe000300bb00fe0003
00ba00b9004f000500ba00fe000300baffd0000400b9004f000300b800b7
000e000500b80016000300b80080000400b700b60006000500b7000e0003
00b70040000400b60006000300b50032000300b40082000341ff00b300a0
0033000500b3005c000300b30040000400b200fe000300b10064000300b0
00af00ba000500b000fe000300af00ae0076000500af00ba000300af0080
000400ae00a00033000500ae0076000300ae0040000400ab004b000300aa
00fe000300a900fe000300a800fe000300a70064000300a6003a000300a5
0064000300a400fe000300a3005c000300a20064000300a100a000330005
00a1003f000300a10040000400a000330003009f003a0003009e00410003
009d00d20003009c00fe0003009b004b0003009a00fe0003009900fe0003
0098007d0003009700380003009600fe0003009500fe00030094003a0003
0093007d00030092007d0003009100640003009000fe0003008f00fa0003
008e003a0003008d007d0003008c007d0003008b00c80003008a00fe0003
008900fe00030088002800030088fff00004008700fe0003008600fe0003
00850084001d00050085003e00030084001d000300830082003300050083
00fe00030083ffd000040082003300030081008000dc0005008100fe0003
008100c000040080007f008c0005008000dc0003008000800004007f007e
003c0005007f008c0003007f00400004007e003c0003007d00fe0003007c
00fe0003007b007a003c0005007b00fe0003007bffd00004007a003c0003
007900fe0003007800fe0003007700fe0003007600640003007541ff00fe
00030073007200450005007300fe00030073ffd000040072004500030071
007000ba0005007100fe00030070006f00760005007000ba000300700080
0004006f006e00260005006f00760003006f00400004006e00260003006b
00fe0003006800fe0003006700fe0003006500fe0003006300fe0003005f
00fe0003005e00fe0003005d00fe0003005c00fe0003005b005a00640005
005b00fe0003005a00640003005900fe0003005800fe0003005700fe0003
005600fe0003005500fe0003005400fe00030053007d0003005200fe0003
005000fe0003004f00fe0003004e00fe0003004d00fe0003004c00fe0003
004b00fe00030048ffe00004004700640003004600fe0003004400230004
004300fe0003004200fe0003004100fe0003004000260003003f00fe0003
003e00fe0003003d00fe0003003c00fe0003003b00fe0003003a00fe0003
003900430003003800fe0003003700fe0003003400fe0003003300fe0003
003200fe0003003100340003003000fe0003002f00fe0003002e00fe0003
002d00fe0003002c00480003002b00fe0003002a00fe0003002900fe0003
00280027003a0005002800fe00030027003a0003002600fe0003002500fe
00030024000f00030023001b0003002200960003002100fe000300200055
0003001f003a0003001e00fe0003001d003a0003001c003a0003001b4176
00640003001a00640003001900480003001800fe0003001700fe00030016
00fe0003001500fe00030015001000040014001100250005001400fe0003
00130012004b000500130096000300120011002500050012004b00030011
00250003001000fe0003001000100004000f00fa0003000e00fe0003000d
00fe0003000c00fe0003000b00fe0003000a00fe0003000900fe00030008
00fe0003000700350003000600ce0003000500fe0003000400fe00030003
00fe00030002001d00030002001000040001006400030060001b0060001d
0080000d0090000d00a0000d00b0000d00c0000d00070001014c858d0173
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b1d00>
[1161 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 980 109 <00020048ffe904d503dd000b0024003b401e0c220309b212221b1e03b218
b01273251e1f0f0c06001f00190f0619152510d4e4d4e4c4111239111239
310010e4f4ecc4d4c410ee11123930013402232206151412333236031e01
15140023220035340033320433323637330e012322260398bf9e8a9ac09a
9493177271fed8f0e2fede012cf932010f545251032d034a61143f0185e7
0113c2b1d8fef1af02673ab97fd4fef4010ccee101120e1a1b644c050000
>JIWAAA+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>JIWAAA+Symbol AddT42Char 
JIWAAA+Symbol /CharStrings get begin
/g109 109 def
end
JIWAAA+Symbol /Encoding get
dup 32 /g109 put
pop
end
%ADOEndSubsetFont
/ZHQEFD+Symbol /JIWAAA+Symbol findfont ct_VMDictPut/ZHQEFD+Symbol*1 [32{/.notdef}rp /g109 223{/.notdef}rp]ZHQEFD+Symbol nfZHQEFD+Symbol*1 [0 -18.4868 -18.4868 0 0 0 ]msf167.863 83.6812 mo( )shZHQEFC+Helvetica*1 [0 -18.4868 -18.4868 0 0 0 ]msf167.863 308.368 mo(Production Cross Section,  )[-12.3308 -6.15594 -10.2787 -10.2787 -10.2787 -9.24341 -5.13934 -4.10406 -10.2787 -10.2787 -5.13931 -13.3475 -6.15598 -10.2787 -9.24338 -9.24341 -5.13934 -12.3308 -10.2787 -9.24341 -5.13931 -4.10406 -10.2787 -10.2787 -5.13931 -5.13934 0 ]ysh223.096 366.736 mo
208.866 366.736 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1080 9 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>LWYAAA+Helvetica AddT42Char 
1 1300 10 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>LWYAAA+Helvetica AddT42Char 
1 1656 12 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/zero 9 def
/one 10 def
/three 12 def
end
LWYAAA+Helvetica /Encoding get
dup 48 /zero put
dup 49 /one put
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /.notdef /three 15{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 366.673 mo(3)sh%ADOBeginSubsetFont: JIWAAA+Symbol AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JIWAAA+Symbol gcheck setglobal} if
1 444 60 <00010058019e040c0229000300134008028c008b0400010410d4c4310010
fcec3001213521040cfc4c03b4019e8b0000>JIWAAA+Symbol AddT42Char 
JIWAAA+Symbol /CharStrings get begin
/g60 60 def
end
JIWAAA+Symbol /Encoding get
dup 33 /g60 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFD+Symbol*1 [32{/.notdef}rp /g109 /g60 222{/.notdef}rp]ZHQEFD+Symbol nfZHQEFD+Symbol*1 [10.9025 0 0 -10.9025 0 0 ]msf192.513 366.673 mo(!)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf174.5 374.257 mo(10)[9.22443 0 ]xsh215.981 355.461 mo
208.866 355.461 li
215.981 348.866 mo
208.866 348.866 li
215.981 344.186 mo
208.866 344.186 li
215.981 340.557 mo
208.866 340.557 li
215.981 337.591 mo
208.866 337.591 li
215.981 335.084 mo
208.866 335.084 li
215.981 332.912 mo
208.866 332.912 li
215.981 330.996 mo
208.866 330.996 li
223.096 329.282 mo
208.866 329.282 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 1376 11 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/two 11 def
end
LWYAAA+Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three 15{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 329.699 mo(2)shZHQEFD+Symbol*1 [10.9025 0 0 -10.9025 0 0 ]msf192.513 329.699 mo(!)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf174.5 336.809 mo(10)[9.22443 0 ]xsh215.981 318.007 mo
208.866 318.007 li
215.981 311.412 mo
208.866 311.412 li
215.981 306.732 mo
208.866 306.732 li
215.981 303.102 mo
208.866 303.102 li
215.981 300.137 mo
208.866 300.137 li
215.981 297.629 mo
208.866 297.629 li
215.981 295.457 mo
208.866 295.457 li
215.981 293.541 mo
208.866 293.541 li
223.096 291.828 mo
208.866 291.828 li
@
ZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf200.571 292.251 mo(1)shZHQEFD+Symbol*1 [10.9025 0 0 -10.9025 0 0 ]msf194.409 292.251 mo(!)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf176.396 299.361 mo(10)[9.22443 0 ]xsh215.981 280.553 mo
208.866 280.553 li
215.981 273.957 mo
208.866 273.957 li
215.981 269.278 mo
208.866 269.278 li
215.981 265.648 mo
208.866 265.648 li
215.981 262.683 mo
208.866 262.683 li
215.981 260.175 mo
208.866 260.175 li
215.981 258.003 mo
208.866 258.003 li
215.981 256.087 mo
208.866 256.087 li
223.096 254.373 mo
208.866 254.373 li
@
ZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf198.395 261.389 mo(1)sh215.981 243.099 mo
208.866 243.099 li
215.981 236.503 mo
208.866 236.503 li
215.981 231.824 mo
208.866 231.824 li
215.981 228.194 mo
208.866 228.194 li
215.981 225.228 mo
208.866 225.228 li
215.981 222.721 mo
208.866 222.721 li
215.981 220.549 mo
208.866 220.549 li
215.981 218.633 mo
208.866 218.633 li
223.096 216.919 mo
208.866 216.919 li
@
ZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf186.545 223.935 mo(10)[9.22443 0 ]xsh215.981 205.644 mo
208.866 205.644 li
215.981 199.049 mo
208.866 199.049 li
215.981 194.369 mo
208.866 194.369 li
215.981 190.74 mo
208.866 190.74 li
215.981 187.774 mo
208.866 187.774 li
215.981 185.267 mo
208.866 185.267 li
215.981 183.095 mo
208.866 183.095 li
215.981 181.179 mo
208.866 181.179 li
223.096 179.465 mo
208.866 179.465 li
@
ZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 179.908 mo(2)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf180.662 187.018 mo(10)[9.22443 0 ]xsh215.981 168.19 mo
208.866 168.19 li
215.981 161.595 mo
208.866 161.595 li
215.981 156.915 mo
208.866 156.915 li
215.981 153.285 mo
208.866 153.285 li
215.981 150.32 mo
208.866 150.32 li
215.981 147.812 mo
208.866 147.812 li
215.981 145.64 mo
208.866 145.64 li
215.981 143.724 mo
208.866 143.724 li
223.096 142.011 mo
208.866 142.011 li
@
ZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 141.987 mo(3)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf180.662 149.571 mo(10)[9.22443 0 ]xsh215.981 130.736 mo
208.866 130.736 li
215.981 124.14 mo
208.866 124.14 li
215.981 119.461 mo
208.866 119.461 li
215.981 115.831 mo
208.866 115.831 li
215.981 112.865 mo
208.866 112.865 li
215.981 110.358 mo
208.866 110.358 li
215.981 108.186 mo
208.866 108.186 li
215.981 106.27 mo
208.866 106.27 li
223.096 104.556 mo
208.866 104.556 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 2000 13 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/four 13 def
end
LWYAAA+Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three /four 14{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 105.013 mo(4)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf180.662 112.123 mo(10)[9.22443 0 ]xsh215.981 93.2805 mo
208.866 93.2805 li
215.981 86.6855 mo
208.866 86.6855 li
215.981 82.0066 mo
208.866 82.0066 li
215.981 78.3766 mo
208.866 78.3766 li
215.981 75.4106 mo
208.866 75.4106 li
215.981 72.9036 mo
208.866 72.9036 li
215.981 70.7316 mo
208.866 70.7316 li
215.981 68.8156 mo
208.866 68.8156 li
223.096 67.1016 mo
208.866 67.1016 li
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 2156 14 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/five 14 def
end
LWYAAA+Helvetica /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two /three /four /five 13{/.notdef}rp /C 12{/.notdef}rp /P 2{/.notdef}rp /S 7{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf198.675 67.0905 mo(5)shZHQEFC+Helvetica*1 [16.5907 0 0 -16.5907 0 0 ]msf180.662 74.6753 mo(10)[9.22443 0 ]xsh215.981 55.8266 mo
208.866 55.8266 li
215.981 49.2315 mo
208.866 49.2315 li
215.981 44.5515 mo
208.866 44.5515 li
215.981 40.9226 mo
208.866 40.9226 li
215.981 37.9566 mo
208.866 37.9566 li
690.756 366.736 mo
690.756 37.9566 li
676.526 366.736 mo
690.756 366.736 li
683.641 355.461 mo
690.756 355.461 li
683.641 348.866 mo
690.756 348.866 li
683.641 344.186 mo
690.756 344.186 li
683.641 340.557 mo
690.756 340.557 li
683.641 337.591 mo
690.756 337.591 li
683.641 335.084 mo
690.756 335.084 li
683.641 332.912 mo
690.756 332.912 li
683.641 330.996 mo
690.756 330.996 li
676.526 329.282 mo
690.756 329.282 li
683.641 318.007 mo
690.756 318.007 li
683.641 311.412 mo
690.756 311.412 li
683.641 306.732 mo
690.756 306.732 li
683.641 303.102 mo
690.756 303.102 li
683.641 300.137 mo
690.756 300.137 li
683.641 297.629 mo
690.756 297.629 li
683.641 295.457 mo
690.756 295.457 li
683.641 293.541 mo
690.756 293.541 li
676.526 291.828 mo
690.756 291.828 li
683.641 280.553 mo
690.756 280.553 li
683.641 273.957 mo
690.756 273.957 li
683.641 269.278 mo
690.756 269.278 li
683.641 265.648 mo
690.756 265.648 li
683.641 262.683 mo
690.756 262.683 li
683.641 260.175 mo
690.756 260.175 li
683.641 258.003 mo
690.756 258.003 li
683.641 256.087 mo
690.756 256.087 li
676.526 254.373 mo
690.756 254.373 li
683.641 243.099 mo
690.756 243.099 li
683.641 236.503 mo
690.756 236.503 li
683.641 231.824 mo
690.756 231.824 li
683.641 228.194 mo
690.756 228.194 li
683.641 225.228 mo
690.756 225.228 li
683.641 222.721 mo
690.756 222.721 li
683.641 220.549 mo
690.756 220.549 li
683.641 218.633 mo
690.756 218.633 li
676.526 216.919 mo
690.756 216.919 li
683.641 205.644 mo
690.756 205.644 li
683.641 199.049 mo
690.756 199.049 li
683.641 194.369 mo
690.756 194.369 li
683.641 190.74 mo
690.756 190.74 li
683.641 187.774 mo
690.756 187.774 li
683.641 185.267 mo
690.756 185.267 li
683.641 183.095 mo
690.756 183.095 li
683.641 181.179 mo
690.756 181.179 li
676.526 179.465 mo
690.756 179.465 li
683.641 168.19 mo
690.756 168.19 li
683.641 161.595 mo
690.756 161.595 li
683.641 156.915 mo
690.756 156.915 li
683.641 153.285 mo
690.756 153.285 li
683.641 150.32 mo
690.756 150.32 li
683.641 147.812 mo
690.756 147.812 li
683.641 145.64 mo
690.756 145.64 li
683.641 143.724 mo
690.756 143.724 li
676.526 142.011 mo
690.756 142.011 li
683.641 130.736 mo
690.756 130.736 li
683.641 124.14 mo
690.756 124.14 li
683.641 119.461 mo
690.756 119.461 li
@
683.641 115.831 mo
690.756 115.831 li
683.641 112.865 mo
690.756 112.865 li
683.641 110.358 mo
690.756 110.358 li
683.641 108.186 mo
690.756 108.186 li
683.641 106.27 mo
690.756 106.27 li
676.526 104.556 mo
690.756 104.556 li
683.641 93.2805 mo
690.756 93.2805 li
683.641 86.6855 mo
690.756 86.6855 li
683.641 82.0066 mo
690.756 82.0066 li
683.641 78.3766 mo
690.756 78.3766 li
683.641 75.4106 mo
690.756 75.4106 li
683.641 72.9036 mo
690.756 72.9036 li
683.641 70.7316 mo
690.756 70.7316 li
683.641 68.8156 mo
690.756 68.8156 li
676.526 67.1016 mo
690.756 67.1016 li
683.641 55.8266 mo
690.756 55.8266 li
683.641 49.2315 mo
690.756 49.2315 li
683.641 44.5515 mo
690.756 44.5515 li
683.641 40.9226 mo
690.756 40.9226 li
683.641 37.9566 mo
690.756 37.9566 li
@
461.402 107.77 mo
460.215 108.957 li
461.402 103.922 mo
456.839 108.485 li
459.113 102.362 mo
456.839 104.637 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
459.12 108.957 mo
455.698 108.957 li
459.12 108.957 mo
462.543 108.957 li
@
.75 lw
459.12 49.3385 mo
459.12 45.0705 li
456.75 45.0705 mo
461.49 45.0705 li
459.12 49.3385 mo
459.12 55.1405 li
456.75 55.1405 mo
461.49 55.1405 li
@
457.224 49.3386 mo
457.224 46.8105 461.016 46.8105 461.016 49.3386 cv
461.016 51.8665 457.224 51.8665 457.224 49.3386 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
457.224 49.3385 mo
457.224 46.8106 461.016 46.8106 461.016 49.3385 cv
461.016 51.8665 457.224 51.8665 457.224 49.3385 cv
cp
459.12 64.2425 mo
459.12 59.9756 li
456.75 59.9756 mo
461.49 59.9756 li
459.12 64.2425 mo
459.12 70.0446 li
456.75 70.0446 mo
461.49 70.0446 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
457.224 64.2426 mo
457.224 61.7145 461.016 61.7145 461.016 64.2426 cv
461.016 66.7705 457.224 66.7705 457.224 64.2426 cv
f
457.224 64.2425 mo
457.224 61.7146 461.016 61.7146 461.016 64.2425 cv
461.016 66.7705 457.224 66.7705 457.224 64.2425 cv
cp
@
1.5 lw
459.12 79.1476 mo
455.698 79.1476 li
459.12 79.1476 mo
462.543 79.1476 li
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
@
459.12 94.0515 mo
455.698 94.0515 li
459.12 94.0515 mo
462.543 94.0515 li
.85452 .206394 1 .0839551 cmyk
@
217.08 67.2375 mo
223.925 67.2375 li
223.925 68.0796 li
217.08 68.0796 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
217.08 68.0796 mo
223.925 68.0796 li
223.925 67.2375 li
217.08 67.2375 li
cp
@
.75 lw
220.503 67.8726 mo
220.503 67.7126 li
218.132 67.7126 mo
222.873 67.7126 li
220.503 67.8726 mo
220.503 68.0345 li
218.132 68.0345 mo
222.873 68.0345 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
218.607 67.8726 mo
218.607 65.3445 222.399 65.3445 222.399 67.8726 cv
222.399 70.4005 218.607 70.4005 218.607 67.8726 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
218.607 67.8726 mo
218.607 65.3446 222.399 65.3446 222.399 67.8726 cv
222.399 70.4005 218.607 70.4005 218.607 67.8726 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
223.925 64.7235 mo
230.77 64.7235 li
230.77 65.5786 li
223.925 65.5786 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
223.925 65.5786 mo
230.77 65.5786 li
230.77 64.7236 li
223.925 64.7236 li
cp
@
.75 lw
227.348 65.1056 mo
227.348 64.5796 li
224.978 64.5796 mo
229.718 64.5796 li
227.348 65.1056 mo
227.348 65.6485 li
224.978 65.6485 mo
229.718 65.6485 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
225.452 65.1056 mo
225.452 62.5775 229.244 62.5775 229.244 65.1056 cv
229.244 67.6335 225.452 67.6335 225.452 65.1056 cv
f
225.452 65.1056 mo
225.452 62.5775 229.244 62.5775 229.244 65.1056 cv
229.244 67.6335 225.452 67.6335 225.452 65.1056 cv
cp
@
230.77 101.184 mo
244.46 101.184 li
244.46 102.51 li
230.77 102.51 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
230.77 102.51 mo
244.46 102.51 li
244.46 101.184 li
230.77 101.184 li
cp
@
.75 lw
237.615 100.326 mo
237.615 97.8965 li
235.245 97.8965 mo
239.985 97.8965 li
237.615 100.326 mo
237.615 103.182 li
235.245 103.182 mo
239.985 103.182 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
235.719 100.326 mo
235.719 97.7975 239.511 97.7975 239.511 100.326 cv
239.511 102.854 235.719 102.854 235.719 100.326 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
235.719 100.326 mo
235.719 97.7975 239.511 97.7975 239.511 100.326 cv
239.511 102.854 235.719 102.854 235.719 100.326 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
244.46 128.612 mo
258.15 128.612 li
258.15 129.778 li
244.46 129.778 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
244.46 129.778 mo
258.15 129.778 li
258.15 128.612 li
244.46 128.612 li
cp
@
.75 lw
251.305 127.239 mo
251.305 124.374 li
248.935 124.374 mo
253.675 124.374 li
251.305 127.239 mo
251.305 130.719 li
248.935 130.719 mo
253.675 130.719 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
249.409 127.239 mo
249.409 124.711 253.201 124.711 253.201 127.239 cv
253.201 129.767 249.409 129.767 249.409 127.239 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
249.409 127.239 mo
249.409 124.711 253.201 124.711 253.201 127.239 cv
253.201 129.767 249.409 129.767 249.409 127.239 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
258.15 156.987 mo
271.84 156.987 li
271.84 158.428 li
258.15 158.428 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
258.15 158.428 mo
271.84 158.428 li
271.84 156.987 li
258.15 156.987 li
cp
@
.75 lw
264.995 157.285 mo
264.995 153.723 li
262.625 153.723 mo
267.365 153.723 li
264.995 157.285 mo
264.995 161.85 li
262.625 161.85 mo
267.365 161.85 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
263.099 157.285 mo
263.099 154.756 266.891 154.756 266.891 157.285 cv
266.891 159.813 263.099 159.813 263.099 157.285 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
263.099 157.285 mo
263.099 154.756 266.891 154.756 266.891 157.285 cv
266.891 159.813 263.099 159.813 263.099 157.285 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
271.84 184.123 mo
285.53 184.123 li
285.53 185.866 li
271.84 185.866 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
271.84 185.866 mo
285.53 185.866 li
285.53 184.123 li
271.84 184.123 li
cp
@
.75 lw
278.685 188.818 mo
278.685 182.925 li
276.315 182.925 mo
281.055 182.925 li
278.685 188.818 mo
278.685 198.152 li
276.315 198.152 mo
281.055 198.152 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
276.789 188.818 mo
276.789 186.29 280.581 186.29 280.581 188.818 cv
280.581 191.347 276.789 191.347 276.789 188.818 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
276.789 188.818 mo
276.789 186.29 280.581 186.29 280.581 188.818 cv
280.581 191.347 276.789 191.347 276.789 188.818 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
285.53 86.8445 mo
292.375 86.8445 li
292.375 87.8506 li
285.53 87.8506 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
285.53 87.8506 mo
292.375 87.8506 li
292.375 86.8445 li
285.53 86.8445 li
cp
@
.75 lw
288.953 87.2726 mo
288.953 87.1086 li
286.583 87.1086 mo
291.323 87.1086 li
288.953 87.2726 mo
288.953 87.4386 li
286.583 87.4386 mo
291.323 87.4386 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
287.057 87.2726 mo
287.057 84.7446 290.849 84.7446 290.849 87.2726 cv
290.849 89.8006 287.057 89.8006 287.057 87.2726 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
287.057 87.2726 mo
287.057 84.7446 290.849 84.7446 290.849 87.2726 cv
290.849 89.8006 287.057 89.8006 287.057 87.2726 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
292.375 84.2906 mo
299.22 84.2906 li
299.22 85.4426 li
292.375 85.4426 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
292.375 85.4426 mo
299.22 85.4426 li
299.22 84.2906 li
292.375 84.2906 li
cp
@
.75 lw
295.798 84.5706 mo
295.798 84.0506 li
293.428 84.0506 mo
298.168 84.0506 li
295.798 84.5706 mo
295.798 85.1086 li
293.428 85.1086 mo
298.168 85.1086 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
293.902 84.5706 mo
293.902 82.0425 297.694 82.0425 297.694 84.5706 cv
297.694 87.0985 293.902 87.0985 293.902 84.5706 cv
f
293.902 84.5706 mo
293.902 82.0425 297.694 82.0425 297.694 84.5706 cv
297.694 87.0985 293.902 87.0985 293.902 84.5706 cv
cp
@
299.22 117.62 mo
312.91 117.62 li
312.91 118.79 li
299.22 118.79 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
299.22 118.79 mo
312.91 118.79 li
312.91 117.62 li
299.22 117.62 li
cp
@
.75 lw
306.065 118.241 mo
306.065 115.687 li
303.695 115.687 mo
308.436 115.687 li
306.065 118.241 mo
306.065 121.272 li
303.695 121.272 mo
308.436 121.272 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
304.169 118.241 mo
304.169 115.713 307.962 115.713 307.962 118.241 cv
307.962 120.769 304.169 120.769 304.169 118.241 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
304.169 118.241 mo
304.169 115.713 307.962 115.713 307.962 118.241 cv
307.962 120.769 304.169 120.769 304.169 118.241 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
312.911 144.48 mo
326.601 144.48 li
326.601 145.549 li
312.911 145.549 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
312.911 145.549 mo
326.601 145.549 li
326.601 144.48 li
312.911 144.48 li
cp
@
.75 lw
319.756 146.025 mo
319.756 142.834 li
317.385 142.834 mo
322.126 142.834 li
319.756 146.025 mo
319.756 150 li
317.385 150 mo
322.126 150 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
317.859 146.025 mo
317.859 143.497 321.652 143.497 321.652 146.025 cv
321.652 148.553 317.859 148.553 317.859 146.025 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
317.859 146.025 mo
317.859 143.497 321.652 143.497 321.652 146.025 cv
321.652 148.553 317.859 148.553 317.859 146.025 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
326.601 172.486 mo
340.291 172.486 li
340.291 173.86 li
326.601 173.86 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
326.601 173.86 mo
340.291 173.86 li
340.291 172.486 li
326.601 172.486 li
cp
@
.75 lw
333.446 176.293 mo
333.446 171.375 li
331.075 171.375 mo
335.816 171.375 li
333.446 176.293 mo
333.446 183.375 li
331.075 183.375 mo
335.816 183.375 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
331.55 176.293 mo
331.55 173.765 335.342 173.765 335.342 176.293 cv
335.342 178.821 331.55 178.821 331.55 176.293 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
331.55 176.293 mo
331.55 173.765 335.342 173.765 335.342 176.293 cv
335.342 178.821 331.55 178.821 331.55 176.293 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
340.291 199.347 mo
353.981 199.347 li
353.981 202.269 li
340.291 202.269 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
340.291 202.269 mo
353.981 202.269 li
353.981 199.347 li
340.291 199.347 li
cp
@
.75 lw
347.136 201.901 mo
347.136 193.428 li
344.766 193.428 mo
349.506 193.428 li
347.136 201.901 mo
347.136 220.62 li
344.766 220.62 mo
349.506 220.62 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
345.24 201.901 mo
345.24 199.373 349.032 199.373 349.032 201.901 cv
349.032 204.429 345.24 204.429 345.24 201.901 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
345.24 201.901 mo
345.24 199.373 349.032 199.373 349.032 201.901 cv
349.032 204.429 345.24 204.429 345.24 201.901 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
353.981 162.841 mo
367.671 162.841 li
367.671 160.998 li
353.981 160.998 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
ef
.002 lw
353.981 162.841 mo
367.671 162.841 li
367.671 160.998 li
353.981 160.998 li
cp
@
.75 lw
360.826 159.435 mo
360.826 157.703 li
358.456 157.703 mo
363.196 157.703 li
360.826 159.435 mo
360.826 161.374 li
358.456 161.374 mo
363.196 161.374 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
358.93 159.435 mo
358.93 156.907 362.722 156.907 362.722 159.435 cv
362.722 161.963 358.93 161.963 358.93 159.435 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
358.93 159.435 mo
358.93 156.907 362.722 156.907 362.722 159.435 cv
362.722 161.963 358.93 161.963 358.93 159.435 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
367.671 170.84 mo
374.516 170.84 li
374.516 172.453 li
367.671 172.453 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
367.671 172.453 mo
374.516 172.453 li
374.516 170.84 li
367.671 170.84 li
cp
@
.75 lw
371.093 171.988 mo
371.093 171.131 li
368.723 171.131 mo
373.463 171.131 li
371.093 171.988 mo
371.093 172.894 li
368.723 172.894 mo
373.463 172.894 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
369.197 171.988 mo
369.197 169.46 372.989 169.46 372.989 171.988 cv
372.989 174.517 369.197 174.517 369.197 171.988 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
369.197 171.988 mo
369.197 169.46 372.989 169.46 372.989 171.988 cv
372.989 174.517 369.197 174.517 369.197 171.988 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
374.516 167.982 mo
381.361 167.982 li
381.361 169.843 li
374.516 169.843 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
374.516 169.843 mo
381.361 169.843 li
381.361 167.982 li
374.516 167.982 li
cp
@
.75 lw
377.938 169.175 mo
377.938 168.304 li
375.568 168.304 mo
380.308 168.304 li
377.938 169.175 mo
377.938 170.096 li
375.568 170.096 mo
380.308 170.096 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
376.042 169.175 mo
376.042 166.647 379.834 166.647 379.834 169.175 cv
379.834 171.703 376.042 171.703 376.042 169.175 cv
f
376.042 169.175 mo
376.042 166.647 379.834 166.647 379.834 169.175 cv
379.834 171.703 376.042 171.703 376.042 169.175 cv
cp
@
381.361 191.069 mo
388.206 191.069 li
388.206 192.454 li
381.361 192.454 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
381.361 192.454 mo
388.206 192.454 li
388.206 191.069 li
381.361 191.069 li
cp
@
.75 lw
384.783 189.977 mo
384.783 188.475 li
382.413 188.475 mo
387.153 188.475 li
384.783 189.977 mo
384.783 191.632 li
382.413 191.632 mo
387.153 191.632 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
382.887 189.977 mo
382.887 187.449 386.679 187.449 386.679 189.977 cv
386.679 192.505 382.887 192.505 382.887 189.977 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
382.887 189.977 mo
382.887 187.449 386.679 187.449 386.679 189.977 cv
386.679 192.505 382.887 192.505 382.887 189.977 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
388.206 187.505 mo
395.051 187.505 li
395.051 188.158 li
388.206 188.158 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
388.206 188.158 mo
395.051 188.158 li
395.051 187.505 li
388.206 187.505 li
cp
@
.75 lw
391.628 187.747 mo
391.628 186.492 li
389.258 186.492 mo
393.998 186.492 li
391.628 187.747 mo
391.628 189.106 li
389.258 189.106 mo
393.998 189.106 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
389.732 187.747 mo
389.732 185.219 393.524 185.219 393.524 187.747 cv
393.524 190.275 389.732 190.275 389.732 187.747 cv
f
389.732 187.747 mo
389.732 185.219 393.524 185.219 393.524 187.747 cv
393.524 190.275 389.732 190.275 389.732 187.747 cv
cp
@
395.051 207.001 mo
401.896 207.001 li
401.896 208.098 li
395.051 208.098 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
395.051 208.098 mo
401.896 208.098 li
401.896 207.001 li
395.051 207.001 li
cp
@
.75 lw
398.473 205.038 mo
398.473 203.687 li
396.103 203.687 mo
400.843 203.687 li
398.473 205.038 mo
398.473 206.511 li
396.103 206.511 mo
400.843 206.511 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
396.577 205.038 mo
396.577 202.509 400.369 202.509 400.369 205.038 cv
400.369 207.566 396.577 207.566 396.577 205.038 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
396.577 205.038 mo
396.577 202.509 400.369 202.509 400.369 205.038 cv
400.369 207.566 396.577 207.566 396.577 205.038 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
401.896 203.417 mo
408.741 203.417 li
408.741 204.94 li
401.896 204.94 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
401.896 204.94 mo
408.741 204.94 li
408.741 203.417 li
401.896 203.417 li
cp
@
.75 lw
405.318 202.27 mo
405.318 201.124 li
402.948 201.124 mo
407.688 201.124 li
405.318 202.27 mo
405.318 203.504 li
402.948 203.504 mo
407.688 203.504 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
403.422 202.27 mo
403.422 199.742 407.214 199.742 407.214 202.27 cv
407.214 204.798 403.422 204.798 403.422 202.27 cv
f
403.422 202.27 mo
403.422 199.742 407.214 199.742 407.214 202.27 cv
407.214 204.798 403.422 204.798 403.422 202.27 cv
cp
@
408.741 223.434 mo
415.586 223.434 li
415.586 225.502 li
408.741 225.502 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
408.741 225.502 mo
415.586 225.502 li
415.586 223.434 li
408.741 223.434 li
cp
@
.75 lw
412.163 224.59 mo
412.163 222.256 li
409.793 222.256 mo
414.533 222.256 li
412.163 224.59 mo
412.163 227.317 li
409.793 227.317 mo
414.533 227.317 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
410.267 224.59 mo
410.267 222.062 414.059 222.062 414.059 224.59 cv
414.059 227.118 410.267 227.118 410.267 224.59 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
410.267 224.59 mo
410.267 222.062 414.059 222.062 414.059 224.59 cv
414.059 227.118 410.267 227.118 410.267 224.59 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
415.586 219.95 mo
422.431 219.95 li
422.431 222.49 li
415.586 222.49 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
415.586 222.49 mo
422.431 222.49 li
422.431 219.95 li
415.586 219.95 li
cp
@
.75 lw
419.008 221.171 mo
419.008 219.548 li
416.638 219.548 mo
421.379 219.548 li
419.008 221.171 mo
419.008 222.973 li
416.638 222.973 mo
421.379 222.973 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
417.112 221.171 mo
417.112 218.642 420.904 218.642 420.904 221.171 cv
420.904 223.699 417.112 223.699 417.112 221.171 cv
f
417.112 221.171 mo
417.112 218.642 420.904 218.642 420.904 221.171 cv
420.904 223.699 417.112 223.699 417.112 221.171 cv
cp
@
422.431 264.762 mo
436.121 264.762 li
436.121 266.586 li
422.431 266.586 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
422.431 266.586 mo
436.121 266.586 li
436.121 264.762 li
422.431 264.762 li
cp
@
.75 lw
429.276 268.484 mo
429.276 265.029 li
426.906 265.029 mo
431.646 265.029 li
429.276 268.484 mo
429.276 272.877 li
426.906 272.877 mo
431.646 272.877 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
427.38 268.484 mo
427.38 265.956 431.172 265.956 431.172 268.484 cv
431.172 271.012 427.38 271.012 427.38 268.484 cv
f
427.38 268.484 mo
427.38 265.956 431.172 265.956 431.172 268.484 cv
431.172 271.012 427.38 271.012 427.38 268.484 cv
cp
@
436.121 283.007 mo
442.966 283.007 li
442.966 284.183 li
436.121 284.183 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
436.121 284.183 mo
442.966 284.183 li
442.966 283.007 li
436.121 283.007 li
cp
@
.75 lw
439.543 284.804 mo
439.543 279.563 li
437.173 279.563 mo
441.914 279.563 li
439.543 284.804 mo
439.543 292.584 li
437.173 292.584 mo
441.914 292.584 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
437.647 284.804 mo
437.647 282.276 441.44 282.276 441.44 284.804 cv
441.44 287.332 437.647 287.332 437.647 284.804 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
437.647 284.804 mo
437.647 282.276 441.44 282.276 441.44 284.804 cv
441.44 287.332 437.647 287.332 437.647 284.804 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
442.966 278.564 mo
449.811 278.564 li
449.811 281.387 li
442.966 281.387 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
442.966 281.387 mo
449.811 281.387 li
449.811 278.564 li
442.966 278.564 li
cp
@
.75 lw
446.389 282.818 mo
446.389 279.247 li
444.018 279.247 mo
448.759 279.247 li
446.389 282.818 mo
446.389 287.401 li
444.018 287.401 mo
448.759 287.401 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
444.492 282.818 mo
444.492 280.29 448.285 280.29 448.285 282.818 cv
448.285 285.346 444.492 285.346 444.492 282.818 cv
f
444.492 282.818 mo
444.492 280.29 448.285 280.29 448.285 282.818 cv
448.285 285.346 444.492 285.346 444.492 282.818 cv
cp
@
449.811 330.289 mo
456.656 330.289 li
456.656 336.041 li
449.811 336.041 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
449.811 336.041 mo
456.656 336.041 li
456.656 330.289 li
449.811 330.289 li
cp
@
.75 lw
454.603 314.688 mo
452.232 317.059 li
454.603 310.84 mo
451.865 313.578 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
453.234 317.059 mo
450.952 317.059 li
453.234 317.059 mo
455.515 317.059 li
@
456.656 322.687 mo
463.501 322.687 li
463.501 325.523 li
456.656 325.523 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
456.656 325.523 mo
463.501 325.523 li
463.501 322.687 li
456.656 322.687 li
cp
@
.75 lw
460.079 314.64 mo
460.079 309.138 li
457.708 309.138 mo
462.449 309.138 li
460.079 314.64 mo
460.079 323.015 li
457.708 323.015 mo
462.449 323.015 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
458.182 314.64 mo
458.182 312.112 461.975 312.112 461.975 314.64 cv
461.975 317.168 458.182 317.168 458.182 314.64 cv
f
458.182 314.64 mo
458.182 312.112 461.975 312.112 461.975 314.64 cv
461.975 317.168 458.182 317.168 458.182 314.64 cv
cp
@
463.501 335.083 mo
477.191 335.083 li
477.191 341.913 li
463.501 341.913 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
463.501 341.913 mo
477.191 341.913 li
477.191 335.083 li
463.501 335.083 li
cp
@
.75 lw
470.346 344.186 mo
470.346 336.446 li
467.976 336.446 mo
472.716 336.446 li
470.346 344.186 mo
470.346 359.479 li
467.976 359.479 mo
472.716 359.479 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
468.45 344.186 mo
468.45 341.658 472.242 341.658 472.242 344.186 cv
472.242 346.715 468.45 346.715 468.45 344.186 cv
f
468.45 344.186 mo
468.45 341.658 472.242 341.658 472.242 344.186 cv
472.242 346.715 468.45 346.715 468.45 344.186 cv
cp
@
477.191 289.797 mo
490.881 289.797 li
490.881 297.653 li
477.191 297.653 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
477.191 297.653 mo
490.881 297.653 li
490.881 289.797 li
477.191 289.797 li
cp
@
.75 lw
486.774 270.972 mo
484.374 273.372 li
486.774 267.123 mo
481.298 272.599 li
483.272 266.776 mo
481.298 268.751 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
484.036 273.372 mo
479.473 273.372 li
484.036 273.372 mo
488.599 273.372 li
@
490.881 169.994 mo
497.726 169.994 li
497.726 171.32 li
490.881 171.32 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
490.881 171.32 mo
497.726 171.32 li
497.726 169.994 li
490.881 169.994 li
cp
@
.75 lw
494.304 171.628 mo
494.304 170.968 li
491.934 170.968 mo
496.674 170.968 li
494.304 171.628 mo
494.304 172.315 li
491.934 172.315 mo
496.674 172.315 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
492.408 171.628 mo
492.408 169.1 496.2 169.1 496.2 171.628 cv
496.2 174.156 492.408 174.156 492.408 171.628 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
492.408 171.628 mo
492.408 169.1 496.2 169.1 496.2 171.628 cv
496.2 174.156 492.408 174.156 492.408 171.628 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
497.726 164.209 mo
504.571 164.209 li
504.571 165.487 li
497.726 165.487 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
497.726 165.487 mo
504.571 165.487 li
504.571 164.209 li
497.726 164.209 li
cp
@
.75 lw
501.149 166.13 mo
501.149 165.083 li
498.779 165.083 mo
503.519 165.083 li
501.149 166.13 mo
501.149 167.25 li
498.779 167.25 mo
503.519 167.25 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
499.253 166.13 mo
499.253 163.602 503.045 163.602 503.045 166.13 cv
503.045 168.658 499.253 168.658 499.253 166.13 cv
f
499.253 166.13 mo
499.253 163.602 503.045 163.602 503.045 166.13 cv
503.045 168.658 499.253 168.658 499.253 166.13 cv
cp
@
504.571 189.578 mo
511.416 189.578 li
511.416 191.85 li
504.571 191.85 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
504.571 191.85 mo
511.416 191.85 li
511.416 189.578 li
504.571 189.578 li
cp
@
.75 lw
507.994 192.745 mo
507.994 191.444 li
505.624 191.444 mo
510.364 191.444 li
507.994 192.745 mo
507.994 194.159 li
505.624 194.159 mo
510.364 194.159 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
506.098 192.745 mo
506.098 190.217 509.89 190.217 509.89 192.745 cv
509.89 195.273 506.098 195.273 506.098 192.745 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
506.098 192.745 mo
506.098 190.217 509.89 190.217 509.89 192.745 cv
509.89 195.273 506.098 195.273 506.098 192.745 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
511.416 183.569 mo
518.261 183.569 li
518.261 185.906 li
511.416 185.906 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
511.416 185.906 mo
518.261 185.906 li
518.261 183.569 li
511.416 183.569 li
cp
@
.75 lw
514.839 186.199 mo
514.839 184.845 li
512.469 184.845 mo
517.209 184.845 li
514.839 186.199 mo
514.839 187.677 li
512.469 187.677 mo
517.209 187.677 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
512.943 186.199 mo
512.943 183.671 516.735 183.671 516.735 186.199 cv
516.735 188.727 512.943 188.727 512.943 186.199 cv
f
512.943 186.199 mo
512.943 183.671 516.735 183.671 516.735 186.199 cv
516.735 188.727 512.943 188.727 512.943 186.199 cv
cp
@
518.261 205.322 mo
525.106 205.322 li
525.106 212.403 li
518.261 212.403 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
518.261 212.403 mo
525.106 212.403 li
525.106 205.322 li
518.261 205.322 li
cp
@
.75 lw
521.684 209.79 mo
521.684 208.211 li
519.314 208.211 mo
524.054 208.211 li
521.684 209.79 mo
521.684 211.539 li
519.314 211.539 mo
524.054 211.539 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
519.788 209.79 mo
519.788 207.262 523.58 207.262 523.58 209.79 cv
523.58 212.319 519.788 212.319 519.788 209.79 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
519.788 209.79 mo
519.788 207.262 523.58 207.262 523.58 209.79 cv
523.58 212.319 519.788 212.319 519.788 209.79 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
525.106 198.833 mo
531.951 198.833 li
531.951 204.392 li
525.106 204.392 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
525.106 204.392 mo
531.951 204.392 li
531.951 198.833 li
525.106 198.833 li
cp
@
.75 lw
528.529 203.584 mo
528.529 201.885 li
526.159 201.885 mo
530.899 201.885 li
528.529 203.584 mo
528.529 205.482 li
526.159 205.482 mo
530.899 205.482 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
526.633 203.584 mo
526.633 201.056 530.425 201.056 530.425 203.584 cv
530.425 206.113 526.633 206.113 526.633 203.584 cv
f
526.633 203.584 mo
526.633 201.056 530.425 201.056 530.425 203.584 cv
530.425 206.113 526.633 206.113 526.633 203.584 cv
cp
@
531.951 224.695 mo
538.796 224.695 li
538.796 233.538 li
531.951 233.538 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
531.951 233.538 mo
538.796 233.538 li
538.796 224.695 li
531.951 224.695 li
cp
@
.75 lw
535.374 231.662 mo
535.374 228.097 li
533.004 228.097 mo
537.744 228.097 li
535.374 231.662 mo
535.374 236.234 li
533.004 236.234 mo
537.744 236.234 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
533.478 231.662 mo
533.478 229.134 537.27 229.134 537.27 231.662 cv
537.27 234.19 533.478 234.19 533.478 231.662 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
533.478 231.662 mo
533.478 229.134 537.27 229.134 537.27 231.662 cv
537.27 234.19 533.478 234.19 533.478 231.662 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
538.796 217.415 mo
545.641 217.415 li
545.641 226.063 li
538.796 226.063 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
538.796 226.063 mo
545.641 226.063 li
545.641 217.415 li
538.796 217.415 li
cp
@
.75 lw
542.219 224.281 mo
542.219 221.795 li
539.849 221.795 mo
544.589 221.795 li
542.219 224.281 mo
542.219 227.216 li
539.849 227.216 mo
544.589 227.216 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
540.323 224.281 mo
540.323 221.752 544.115 221.752 544.115 224.281 cv
544.115 226.809 540.323 226.809 540.323 224.281 cv
f
540.323 224.281 mo
540.323 221.752 544.115 221.752 544.115 224.281 cv
544.115 226.809 540.323 226.809 540.323 224.281 cv
cp
@
545.641 185.726 mo
552.486 185.726 li
552.486 186.788 li
545.641 186.788 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
545.641 186.788 mo
552.486 186.788 li
552.486 185.726 li
545.641 185.726 li
cp
@
.75 lw
549.064 185.931 mo
549.064 184.517 li
546.694 184.517 mo
551.434 184.517 li
549.064 185.931 mo
549.064 187.479 li
546.694 187.479 mo
551.434 187.479 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
547.168 185.931 mo
547.168 183.403 550.96 183.403 550.96 185.931 cv
550.96 188.459 547.168 188.459 547.168 185.931 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
547.168 185.931 mo
547.168 183.403 550.96 183.403 550.96 185.931 cv
550.96 188.459 547.168 188.459 547.168 185.931 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
552.486 181.155 mo
559.331 181.155 li
559.331 182.248 li
552.486 182.248 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
552.486 182.248 mo
559.331 182.248 li
559.331 181.155 li
552.486 181.155 li
cp
@
.75 lw
555.909 182.379 mo
555.909 180.937 li
553.539 180.937 mo
558.279 180.937 li
555.909 182.379 mo
555.909 183.961 li
553.539 183.961 mo
558.279 183.961 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
554.013 182.379 mo
554.013 179.85 557.805 179.85 557.805 182.379 cv
557.805 184.907 554.013 184.907 554.013 182.379 cv
f
554.013 182.379 mo
554.013 179.85 557.805 179.85 557.805 182.379 cv
557.805 184.907 554.013 184.907 554.013 182.379 cv
cp
@
559.331 208.384 mo
566.176 208.384 li
566.176 211.101 li
559.331 211.101 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
559.331 211.101 mo
566.176 211.101 li
566.176 208.384 li
559.331 208.384 li
cp
@
.75 lw
562.754 209.274 mo
562.754 205.243 li
560.384 205.243 mo
565.124 205.243 li
562.754 209.274 mo
562.754 214.646 li
560.384 214.646 mo
565.124 214.646 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
560.858 209.274 mo
560.858 206.746 564.65 206.746 564.65 209.274 cv
564.65 211.802 560.858 211.802 560.858 209.274 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
560.858 209.274 mo
560.858 206.746 564.65 206.746 564.65 209.274 cv
564.65 211.802 560.858 211.802 560.858 209.274 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
566.176 202.884 mo
573.021 202.884 li
573.021 205.085 li
566.176 205.085 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
566.176 205.085 mo
573.021 205.085 li
573.021 202.884 li
566.176 202.884 li
cp
@
.75 lw
569.599 203.09 mo
569.599 199.713 li
567.229 199.713 mo
571.969 199.713 li
569.599 203.09 mo
569.599 207.358 li
567.229 207.358 mo
571.969 207.358 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
567.703 203.09 mo
567.703 200.562 571.495 200.562 571.495 203.09 cv
571.495 205.619 567.703 205.619 567.703 203.09 cv
f
567.703 203.09 mo
567.703 200.562 571.495 200.562 571.495 203.09 cv
571.495 205.619 567.703 205.619 567.703 203.09 cv
cp
@
573.021 225.864 mo
586.711 225.864 li
586.711 227.154 li
573.021 227.154 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
573.021 227.154 mo
586.711 227.154 li
586.711 225.864 li
573.021 225.864 li
cp
@
.75 lw
582.605 213.626 mo
581.584 214.646 li
582.605 209.777 mo
577.736 214.646 li
580.483 208.05 mo
577.128 211.405 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
579.866 214.646 mo
575.303 214.646 li
579.866 214.646 mo
584.43 214.646 li
@
586.712 240.826 mo
600.402 240.826 li
600.402 250.106 li
586.712 250.106 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
586.712 250.106 mo
600.402 250.106 li
600.402 240.826 li
586.712 240.826 li
cp
@
.75 lw
593.557 240.133 mo
593.557 236.503 li
591.186 236.503 mo
595.927 236.503 li
593.557 240.133 mo
593.557 244.812 li
591.186 244.812 mo
595.927 244.812 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
591.66 240.133 mo
591.66 237.605 595.453 237.605 595.453 240.133 cv
595.453 242.661 591.66 242.661 591.66 240.133 cv
f
591.66 240.133 mo
591.66 237.605 595.453 237.605 595.453 240.133 cv
595.453 242.661 591.66 242.661 591.66 240.133 cv
cp
@
600.402 278.638 mo
614.092 278.638 li
614.092 282.177 li
600.402 282.177 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
600.402 282.177 mo
614.092 282.177 li
614.092 278.638 li
600.402 278.638 li
cp
@
.75 lw
607.247 270.027 mo
607.247 265.927 li
604.876 265.927 mo
609.617 265.927 li
607.247 270.027 mo
607.247 275.521 li
604.876 275.521 mo
609.617 275.521 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
605.351 270.027 mo
605.351 267.499 609.143 267.499 609.143 270.027 cv
609.143 272.555 605.351 272.555 605.351 270.027 cv
f
605.351 270.027 mo
605.351 267.499 609.143 267.499 609.143 270.027 cv
609.143 272.555 605.351 272.555 605.351 270.027 cv
cp
@
614.092 285.124 mo
620.937 285.124 li
620.937 288.46 li
614.092 288.46 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
614.092 288.46 mo
620.937 288.46 li
620.937 285.124 li
614.092 285.124 li
cp
@
.75 lw
617.514 275.08 mo
617.514 268.751 li
615.144 268.751 mo
619.884 268.751 li
617.514 275.08 mo
617.514 285.579 li
615.144 285.579 mo
619.884 285.579 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
615.618 275.08 mo
615.618 272.552 619.41 272.552 619.41 275.08 cv
619.41 277.608 615.618 277.608 615.618 275.08 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
615.618 275.08 mo
615.618 272.552 619.41 272.552 619.41 275.08 cv
619.41 277.608 615.618 277.608 615.618 275.08 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
620.937 278.315 mo
627.782 278.315 li
627.782 282.042 li
620.937 282.042 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
620.937 282.042 mo
627.782 282.042 li
627.782 278.315 li
620.937 278.315 li
cp
@
.75 lw
624.359 276.474 mo
624.359 273.138 li
621.989 273.138 mo
626.729 273.138 li
624.359 276.474 mo
624.359 280.675 li
621.989 280.675 mo
626.729 280.675 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
622.463 276.474 mo
622.463 273.946 626.255 273.946 626.255 276.474 cv
626.255 279.002 622.463 279.002 622.463 276.474 cv
f
622.463 276.474 mo
622.463 273.946 626.255 273.946 626.255 276.474 cv
626.255 279.002 622.463 279.002 622.463 276.474 cv
cp
@
627.782 208.563 mo
634.627 208.563 li
634.627 211.983 li
627.782 211.983 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
627.782 211.983 mo
634.627 211.983 li
634.627 208.563 li
627.782 208.563 li
cp
@
.75 lw
631.204 209.703 mo
631.204 204.944 li
628.834 204.944 mo
633.574 204.944 li
631.204 209.703 mo
631.204 216.457 li
628.834 216.457 mo
633.574 216.457 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
629.308 209.703 mo
629.308 207.174 633.1 207.174 633.1 209.703 cv
633.1 212.231 629.308 212.231 629.308 209.703 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
629.308 209.703 mo
629.308 207.174 633.1 207.174 633.1 209.703 cv
633.1 212.231 629.308 212.231 629.308 209.703 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
634.627 204.639 mo
641.472 204.639 li
641.472 208.036 li
634.627 208.036 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
634.627 208.036 mo
641.472 208.036 li
641.472 204.639 li
634.627 204.639 li
cp
@
.75 lw
638.049 210.083 mo
638.049 206.745 li
635.679 206.745 mo
640.419 206.745 li
638.049 210.083 mo
638.049 214.289 li
635.679 214.289 mo
640.419 214.289 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
636.153 210.083 mo
636.153 207.555 639.945 207.555 639.945 210.083 cv
639.945 212.612 636.153 212.612 636.153 210.083 cv
f
636.153 210.083 mo
636.153 207.555 639.945 207.555 639.945 210.083 cv
639.945 212.612 636.153 212.612 636.153 210.083 cv
cp
@
641.472 250.739 mo
648.317 250.739 li
648.317 251.494 li
641.472 251.494 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
641.472 251.494 mo
648.317 251.494 li
648.317 250.739 li
641.472 250.739 li
cp
@
.75 lw
644.894 241.825 mo
644.894 234.866 li
642.524 234.866 mo
647.264 234.866 li
644.894 241.825 mo
644.894 254.241 li
642.524 254.241 mo
647.264 254.241 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
642.998 241.825 mo
642.998 239.296 646.79 239.296 646.79 241.825 cv
646.79 244.353 642.998 244.353 642.998 241.825 cv
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
642.998 241.825 mo
642.998 239.296 646.79 239.296 646.79 241.825 cv
646.79 244.353 642.998 244.353 642.998 241.825 cv
cp
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
648.317 246.518 mo
655.162 246.518 li
655.162 247.4 li
648.317 247.4 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
648.317 247.4 mo
655.162 247.4 li
655.162 246.518 li
648.317 246.518 li
cp
@
.75 lw
651.739 246.631 mo
651.739 241.539 li
649.369 241.539 mo
654.109 241.539 li
651.739 246.631 mo
651.739 254.086 li
649.369 254.086 mo
654.109 254.086 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
649.843 246.631 mo
649.843 244.103 653.635 244.103 653.635 246.631 cv
653.635 249.159 649.843 249.159 649.843 246.631 cv
f
649.843 246.631 mo
649.843 244.103 653.635 244.103 653.635 246.631 cv
653.635 249.159 649.843 249.159 649.843 246.631 cv
cp
@
655.162 255.332 mo
662.007 255.332 li
662.007 256.371 li
655.162 256.371 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
655.162 256.371 mo
662.007 256.371 li
662.007 255.332 li
655.162 255.332 li
cp
@
.75 lw
659.953 236.336 mo
657.215 239.074 li
659.277 233.164 mo
657.215 235.226 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
658.584 239.759 mo
656.303 239.759 li
658.584 239.759 mo
660.866 239.759 li
@
662.007 252.042 mo
668.852 252.042 li
668.852 253.036 li
662.007 253.036 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
662.007 253.036 mo
668.852 253.036 li
668.852 252.042 li
662.007 252.042 li
cp
@
.75 lw
665.429 253.195 mo
665.429 247.53 li
663.059 247.53 mo
667.799 247.53 li
665.429 253.195 mo
665.429 261.963 li
663.059 261.963 mo
667.799 261.963 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
663.533 253.195 mo
663.533 250.667 667.325 250.667 667.325 253.195 cv
667.325 255.724 663.533 255.724 663.533 253.195 cv
f
663.533 253.195 mo
663.533 250.667 667.325 250.667 667.325 253.195 cv
667.325 255.724 663.533 255.724 663.533 253.195 cv
cp
@
668.852 292.578 mo
675.697 292.578 li
675.697 296.048 li
668.852 296.048 li
cp
.883665 .769161 3.0518e-05 3.0518e-05 cmyk
f
.002 lw
668.852 296.048 mo
675.697 296.048 li
675.697 292.578 li
668.852 292.578 li
cp
@
.75 lw
673.643 264.979 mo
671.709 266.913 li
673.643 261.131 mo
670.905 263.869 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
1.5 lw
672.274 266.913 mo
669.993 266.913 li
672.274 266.913 mo
674.556 266.913 li
@
675.697 286.521 mo
682.542 286.521 li
682.542 288.859 li
675.697 288.859 li
cp
.85452 .206394 1 .0839551 cmyk
f
.002 lw
675.697 288.859 mo
682.542 288.859 li
682.542 286.521 li
675.697 286.521 li
cp
@
.75 lw
679.119 268.376 mo
679.119 263.585 li
676.749 263.585 mo
681.489 263.585 li
679.119 268.376 mo
679.119 275.197 li
676.749 275.197 mo
681.489 275.197 li
3.0518e-05 .993988 1 3.0518e-05 cmyk
@
677.223 268.376 mo
677.223 265.848 681.015 265.848 681.015 268.376 cv
681.015 270.904 677.223 270.904 677.223 268.376 cv
f
677.223 268.376 mo
677.223 265.848 681.015 265.848 681.015 268.376 cv
681.015 270.904 677.223 270.904 677.223 268.376 cv
cp
@
[1 2 ] 0 dsh
217.08 366.736 mo
217.08 37.9566 li
230.77 366.736 mo
230.77 37.9566 li
244.46 366.736 mo
244.46 37.9566 li
258.15 366.736 mo
258.15 37.9566 li
271.84 366.736 mo
271.84 37.9566 li
285.53 366.736 mo
285.53 37.9566 li
299.22 366.736 mo
299.22 37.9566 li
312.911 366.736 mo
312.911 37.9566 li
326.601 366.736 mo
326.601 37.9566 li
340.291 366.736 mo
340.291 37.9566 li
353.981 366.736 mo
353.981 37.9566 li
367.671 366.736 mo
367.671 37.9566 li
381.361 366.736 mo
381.361 37.9566 li
395.051 366.736 mo
395.051 37.9566 li
408.741 366.736 mo
408.741 37.9566 li
422.431 366.736 mo
422.431 124.14 li
436.121 366.736 mo
436.121 124.14 li
449.811 366.736 mo
449.811 124.14 li
463.501 366.736 mo
463.501 124.14 li
477.191 366.736 mo
477.191 124.14 li
490.881 366.736 mo
490.881 124.14 li
504.571 366.736 mo
504.571 124.14 li
518.261 366.736 mo
518.261 124.14 li
531.951 366.736 mo
531.951 124.14 li
545.641 366.736 mo
545.641 124.14 li
559.331 366.736 mo
559.331 124.14 li
573.021 366.736 mo
573.021 124.14 li
586.712 366.736 mo
586.712 124.14 li
600.402 366.736 mo
600.402 124.14 li
614.092 366.736 mo
614.092 124.14 li
627.782 366.736 mo
627.782 124.14 li
641.472 366.736 mo
641.472 124.14 li
655.162 366.736 mo
655.162 124.14 li
668.852 366.736 mo
668.852 124.14 li
682.542 366.736 mo
682.542 37.9566 li
.597284 .512352 .507713 .201328 cmyk
@
[] 0 dsh
208.866 366.736 mo
690.756 366.736 li
217.08 376.757 mo
217.08 366.736 li
230.77 376.757 mo
230.77 366.736 li
244.46 376.757 mo
244.46 366.736 li
258.15 376.757 mo
258.15 366.736 li
271.84 376.757 mo
271.84 366.736 li
285.53 376.757 mo
285.53 366.736 li
299.22 376.757 mo
299.22 366.736 li
312.911 376.757 mo
312.911 366.736 li
326.601 376.757 mo
326.601 366.736 li
340.291 376.757 mo
340.291 366.736 li
353.981 376.757 mo
353.981 366.736 li
367.671 376.757 mo
367.671 366.736 li
381.361 376.757 mo
381.361 366.736 li
395.051 376.757 mo
395.051 366.736 li
408.741 376.757 mo
408.741 366.736 li
422.431 376.757 mo
422.431 366.736 li
436.121 376.757 mo
436.121 366.736 li
449.811 376.757 mo
449.811 366.736 li
463.501 376.757 mo
463.501 366.736 li
477.191 376.757 mo
477.191 366.736 li
490.881 376.757 mo
490.881 366.736 li
504.571 376.757 mo
504.571 366.736 li
518.261 376.757 mo
518.261 366.736 li
531.951 376.757 mo
531.951 366.736 li
545.641 376.757 mo
545.641 366.736 li
559.331 376.757 mo
559.331 366.736 li
573.021 376.757 mo
573.021 366.736 li
586.712 376.757 mo
586.712 366.736 li
600.402 376.757 mo
600.402 366.736 li
614.092 376.757 mo
614.092 366.736 li
627.782 376.757 mo
627.782 366.736 li
641.472 376.757 mo
641.472 366.736 li
655.162 376.757 mo
655.162 366.736 li
668.852 376.757 mo
668.852 366.736 li
682.542 376.757 mo
682.542 366.736 li
217.08 376.757 mo
217.08 366.736 li
682.542 376.757 mo
682.542 366.736 li
208.866 366.736 mo
208.866 37.9566 li
223.096 366.736 mo
208.866 366.736 li
215.981 355.461 mo
208.866 355.461 li
215.981 348.866 mo
208.866 348.866 li
215.981 344.186 mo
208.866 344.186 li
215.981 340.557 mo
208.866 340.557 li
215.981 337.591 mo
208.866 337.591 li
215.981 335.084 mo
208.866 335.084 li
215.981 332.912 mo
208.866 332.912 li
215.981 330.996 mo
208.866 330.996 li
223.096 329.282 mo
208.866 329.282 li
215.981 318.007 mo
208.866 318.007 li
215.981 311.412 mo
208.866 311.412 li
215.981 306.732 mo
208.866 306.732 li
215.981 303.102 mo
208.866 303.102 li
215.981 300.137 mo
208.866 300.137 li
215.981 297.629 mo
208.866 297.629 li
215.981 295.457 mo
208.866 295.457 li
215.981 293.541 mo
208.866 293.541 li
223.096 291.828 mo
208.866 291.828 li
215.981 280.553 mo
208.866 280.553 li
215.981 273.957 mo
208.866 273.957 li
215.981 269.278 mo
208.866 269.278 li
215.981 265.648 mo
208.866 265.648 li
215.981 262.683 mo
208.866 262.683 li
215.981 260.175 mo
208.866 260.175 li
.75021 .679683 .670222 .90164 cmyk
@
215.981 258.003 mo
208.866 258.003 li
215.981 256.087 mo
208.866 256.087 li
223.096 254.373 mo
208.866 254.373 li
215.981 243.099 mo
208.866 243.099 li
215.981 236.503 mo
208.866 236.503 li
215.981 231.824 mo
208.866 231.824 li
215.981 228.194 mo
208.866 228.194 li
215.981 225.228 mo
208.866 225.228 li
215.981 222.721 mo
208.866 222.721 li
215.981 220.549 mo
208.866 220.549 li
215.981 218.633 mo
208.866 218.633 li
223.096 216.919 mo
208.866 216.919 li
215.981 205.644 mo
208.866 205.644 li
215.981 199.049 mo
208.866 199.049 li
215.981 194.369 mo
208.866 194.369 li
215.981 190.74 mo
208.866 190.74 li
215.981 187.774 mo
208.866 187.774 li
215.981 185.267 mo
208.866 185.267 li
215.981 183.095 mo
208.866 183.095 li
215.981 181.179 mo
208.866 181.179 li
223.096 179.465 mo
208.866 179.465 li
215.981 168.19 mo
208.866 168.19 li
215.981 161.595 mo
208.866 161.595 li
215.981 156.915 mo
208.866 156.915 li
215.981 153.285 mo
208.866 153.285 li
215.981 150.32 mo
208.866 150.32 li
215.981 147.812 mo
208.866 147.812 li
215.981 145.64 mo
208.866 145.64 li
215.981 143.724 mo
208.866 143.724 li
223.096 142.011 mo
208.866 142.011 li
215.981 130.736 mo
208.866 130.736 li
215.981 124.14 mo
208.866 124.14 li
215.981 119.461 mo
208.866 119.461 li
215.981 115.831 mo
208.866 115.831 li
215.981 112.865 mo
208.866 112.865 li
215.981 110.358 mo
208.866 110.358 li
215.981 108.186 mo
208.866 108.186 li
215.981 106.27 mo
208.866 106.27 li
223.096 104.556 mo
208.866 104.556 li
215.981 93.2805 mo
208.866 93.2805 li
215.981 86.6855 mo
208.866 86.6855 li
215.981 82.0066 mo
208.866 82.0066 li
215.981 78.3766 mo
208.866 78.3766 li
215.981 75.4106 mo
208.866 75.4106 li
215.981 72.9036 mo
208.866 72.9036 li
215.981 70.7316 mo
208.866 70.7316 li
215.981 68.8156 mo
208.866 68.8156 li
223.096 67.1016 mo
208.866 67.1016 li
215.981 55.8266 mo
208.866 55.8266 li
215.981 49.2315 mo
208.866 49.2315 li
215.981 44.5515 mo
208.866 44.5515 li
215.981 40.9226 mo
208.866 40.9226 li
215.981 37.9566 mo
208.866 37.9566 li
690.756 366.736 mo
690.756 37.9566 li
676.526 366.736 mo
690.756 366.736 li
683.641 355.461 mo
690.756 355.461 li
683.641 348.866 mo
690.756 348.866 li
683.641 344.186 mo
690.756 344.186 li
683.641 340.557 mo
690.756 340.557 li
683.641 337.591 mo
690.756 337.591 li
683.641 335.084 mo
690.756 335.084 li
683.641 332.912 mo
690.756 332.912 li
683.641 330.996 mo
690.756 330.996 li
676.526 329.282 mo
690.756 329.282 li
@
683.641 318.007 mo
690.756 318.007 li
683.641 311.412 mo
690.756 311.412 li
683.641 306.732 mo
690.756 306.732 li
683.641 303.102 mo
690.756 303.102 li
683.641 300.137 mo
690.756 300.137 li
683.641 297.629 mo
690.756 297.629 li
683.641 295.457 mo
690.756 295.457 li
683.641 293.541 mo
690.756 293.541 li
676.526 291.828 mo
690.756 291.828 li
683.641 280.553 mo
690.756 280.553 li
683.641 273.957 mo
690.756 273.957 li
683.641 269.278 mo
690.756 269.278 li
683.641 265.648 mo
690.756 265.648 li
683.641 262.683 mo
690.756 262.683 li
683.641 260.175 mo
690.756 260.175 li
683.641 258.003 mo
690.756 258.003 li
683.641 256.087 mo
690.756 256.087 li
676.526 254.373 mo
690.756 254.373 li
683.641 243.099 mo
690.756 243.099 li
683.641 236.503 mo
690.756 236.503 li
683.641 231.824 mo
690.756 231.824 li
683.641 228.194 mo
690.756 228.194 li
683.641 225.228 mo
690.756 225.228 li
683.641 222.721 mo
690.756 222.721 li
683.641 220.549 mo
690.756 220.549 li
683.641 218.633 mo
690.756 218.633 li
676.526 216.919 mo
690.756 216.919 li
683.641 205.644 mo
690.756 205.644 li
683.641 199.049 mo
690.756 199.049 li
683.641 194.369 mo
690.756 194.369 li
683.641 190.74 mo
690.756 190.74 li
683.641 187.774 mo
690.756 187.774 li
683.641 185.267 mo
690.756 185.267 li
683.641 183.095 mo
690.756 183.095 li
683.641 181.179 mo
690.756 181.179 li
676.526 179.465 mo
690.756 179.465 li
683.641 168.19 mo
690.756 168.19 li
683.641 161.595 mo
690.756 161.595 li
683.641 156.915 mo
690.756 156.915 li
683.641 153.285 mo
690.756 153.285 li
683.641 150.32 mo
690.756 150.32 li
683.641 147.812 mo
690.756 147.812 li
683.641 145.64 mo
690.756 145.64 li
683.641 143.724 mo
690.756 143.724 li
676.526 142.011 mo
690.756 142.011 li
683.641 130.736 mo
690.756 130.736 li
683.641 124.14 mo
690.756 124.14 li
683.641 119.461 mo
690.756 119.461 li
683.641 115.831 mo
690.756 115.831 li
683.641 112.865 mo
690.756 112.865 li
683.641 110.358 mo
690.756 110.358 li
683.641 108.186 mo
690.756 108.186 li
683.641 106.27 mo
690.756 106.27 li
676.526 104.556 mo
690.756 104.556 li
683.641 93.2805 mo
690.756 93.2805 li
683.641 86.6855 mo
690.756 86.6855 li
683.641 82.0066 mo
690.756 82.0066 li
683.641 78.3766 mo
690.756 78.3766 li
683.641 75.4106 mo
690.756 75.4106 li
683.641 72.9036 mo
690.756 72.9036 li
683.641 70.7316 mo
690.756 70.7316 li
683.641 68.8156 mo
690.756 68.8156 li
676.526 67.1016 mo
690.756 67.1016 li
683.641 55.8266 mo
690.756 55.8266 li
@
683.641 49.2315 mo
690.756 49.2315 li
683.641 44.5515 mo
690.756 44.5515 li
683.641 40.9226 mo
690.756 40.9226 li
683.641 37.9566 mo
690.756 37.9566 li
@
1.5 lw
208.866 366.736 mo
690.756 366.736 li
690.756 37.9566 li
208.866 37.9566 li
cp
208.866 366.736 mo
690.756 366.736 li
690.756 37.9566 li
208.866 37.9566 li
cp
@
%ADOBeginSubsetFont: LWYAAA+Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LWYAAA+Helvetica gcheck setglobal} if
1 108 2 <00050042ffda06d00592000b000f001b0027003300f04052060c250c0237
0e580c670c960ca70cc60cd70cf60c0868080d0e0e46120f0f0c0e0f1218
0c0d2a301b2421f215240d272d240bf23324050a0f0e3517171a2a2402f2
302408ea12241ef218242419343f52182b4e10f44dedfcedf6edfced4e45
6544e6002f3c4d3fedfcfd2fc4edf4ed011112393911123939872e2b7d10
c43130184379405200322e0a301b002c002a1b011a22181b001020121b01
1626181b00141c121b013206301b0028042a1b012f092d1b012b012d1b01
19231b1b00111f1b1b001725151b01131d151b013107331b002903331b00
002b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b81015d710016151406232226
353436330333012312363534262322061514163312161514062322263534
36330036353426232206151416330604cccc9091cccc91916ffcdf6f3279
79565579795591cccc9190cccc90042b7979555679795602b8cc9090cccc
9090cc02dafa4803687955557978565579022bcd9090cccc9090cdfb2179
55557979555579000000>LWYAAA+Helvetica AddT42Char 
1 508 3 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>LWYAAA+Helvetica AddT42Char 
1 652 4 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>LWYAAA+Helvetica AddT42Char 
1 884 6 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>LWYAAA+Helvetica AddT42Char 
1 944 7 <000100af0000018000da000300264013012a030a0517171a016400190405
64216365182b2b4ef44dfd4e456544e6003f4ded313037331523afd1d1da
da000000>LWYAAA+Helvetica AddT42Char 
1 1008 8 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>LWYAAA+Helvetica AddT42Char 
1 2452 15 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>LWYAAA+Helvetica AddT42Char 
1 2752 16 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>LWYAAA+Helvetica AddT42Char 
1 2900 17 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>LWYAAA+Helvetica AddT42Char 
1 3256 18 <00020049ffd80411059a001b002700ab402e19052b052816480658056805
8919881a981a09460807212727350a0a182135100504351bc7180d07023c
071e3114b80155400b0d00291b8124380d2947281076c418d4edf4ed10f5
fd397d4b52787a2f18003feded3fed12392fed1112393130437940341f26
191a0b13010312250226220f24280020111e28010319002800260b242800
230e2128011f13212801011a042800250c2728002b2b2b2b012b2b2b2b2b
2b81818181015d01161716333236130e0123220235341233201316151007
02212226350036353426232206151416330110086b374581b6263cb166cf
f1eee8013977424f83fec7d2da0232b19f7b849b8895015a95391ed70149
5f4d0102cbc30128fee69be9fef9cbfeaedca601268db09e9bb1948ca500
>LWYAAA+Helvetica AddT42Char 
1 3556 19 <000200e3000001b40421000300070032401a052a07032a0006070a091717
1a05016404001908096421787c182b2b4ef44d3cfd3c4e456544e6003f3f
4ded10ed31301333152311331523e3d1d1d1d10421dafd93da000000>LWYAAA+Helvetica AddT42Char 
1 3644 20 <0002005c00de046f03360003000700274015012000cd07200604001a0907
021908095c213f52182b2b4ef43c10f63c002f4dedfdfd31300115213501
152135046ffbed0413fbed0336a8a8fe53abab00>LWYAAA+Helvetica AddT42Char 
1 3724 21 <0003001e0000053d05bd0002000a000b00da405048015801680103880397
04980aa90ab809b80a06280a010007060601020809090102080a00070501
8c01030420140a0a251209090114050525120606010b0b0503090a040605
010b02010300021e0708b80159400904030206090a030508b801a840120d
0d17171a059e019e0a190c0da1218c5e182b2b194ef4184dfdfd194e4565
44e6464418003f173c3f3c4dfd3cfd3c11393f011112393912393911392f
872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b003c01bb0
03c4592b1112393912393987103c3c07103c3c3130015d5d005d010b0113
3301230321032301038edfed85e10215da95fdbb9fcc0290025a0289fd77
0363fa4301b8fe4805bd>LWYAAA+Helvetica AddT42Char 
1 4004 22 <000300970000050405bd000a00150028008240385a0d5a116a026a0d6a11
7a02772107490d4811021d081f0f041f131e000027081e17020b1e270804
311b690f31231a2a091525281619292ab8015fb3217666182b2b4ef43c4d
fd3c4e10f64dedf4ed003ffd3fed12392ffd390111123931304379401218
1a0508192506260718042b01051a082b01002b012b2b2b8181015d5d0132
373635342726232111013237363534272623211103212017161514070607
16171615140706290102c47e466e754282fe9d01adb74e318f4c7dfe75c3
027701026d404f294d7138635985fedefd93035023378f90321cfe39fd5a
6a435fa03a1ffdfb05139a5b778b592f272b3660a98e73ac>LWYAAA+Helvetica AddT42Char 
1 4556 24 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>LWYAAA+Helvetica AddT42Char 
1 4692 25 <000100af000004aa05bd000900394018071e040409031e0100020908066b
011a0b03082500190a0bb80157b32195dc182b2b4ef44dfd3c4e10f64de4
003f3f3ced12392ffd313013211521112115211123af03fbfccc02d1fd2f
c705bdb4fe42affd6400>LWYAAA+Helvetica AddT42Char 
1 4792 26 <000100a10000052f05bd000b003f402108091e0302020401020a07080407
2506051a0d010a250b00190c0c0da0217670182b2b104ef43c4dfd3c4e10
f63c4dfd3c003f3c3f3c392f3cfd3c3130133311211133112311211123a1
c902fcc9c9fd04c905bdfda1025ffa4302affd510000>LWYAAA+Helvetica AddT42Char 
1 4904 27 <00010023ffd9036d05bd00130042402209061906670b7a06970205780401
09090412020d9204091125001a150a2507191415b80151b3218c70182b2b
4ef44ded4e10f64ded003fed3f12392f5d31305d011407062122263d0133
15141633323736351133036d3766fee2a5eabb6b719f311ec501b6ba67bc
b3e5696978796d43ba03d300>LWYAAA+Helvetica AddT42Char 
1 5036 28 <0001009c0000044b05bd000500314013000203021e040508031a07010225
0500190607b80153b321765e182b2b4ef43c4dfd3c4e10e6003f3c4dfd3c
3f31301333112115219cc702e8fc5105bdfaf2af>LWYAAA+Helvetica AddT42Char 
1 5116 29 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>LWYAAA+Helvetica AddT42Char 
1 5396 30 <0002009c0000052a05bd0009000a00764014370138060207011701270147
0158020507010202b8019b4017120606070207080301020806080a030a0a
010608020302b8019bb505041a0c0708b8019b400a0900190b0ca0217670
182b2b4ef43c4dfd3c4e10f63c4dfd3c11123939392f003f3f3c3f3c1239
3904872e2b877dc53130005d015d13330111331123011123019ceb02e6bd
dffd0fbe023a05bdfb5a04a6fa4304a5fb5b05bd0000>LWYAAA+Helvetica AddT42Char 
1 6148 33 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>LWYAAA+Helvetica AddT42Char 
1 6240 34 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>LWYAAA+Helvetica AddT42Char 
1 6428 35 <000100250000077105bd000c0156409508090178077909780b8701860405
47014b02440348044d08420a8908870ac802c703c707c80b0c580b670768
0b890286038607890b9902960395079a0ba902a603a507aa0b0f0808070a
080b1908160a5707060b08040a023e284528052506060700250c0c0b0904
01030b020305060c050002080a0b0307080e17171a0705068640080304f4
0a0209f4800b0001860c190d8e5e182b194e10f4184dfd39391afd3939fd
39391afd3939194e456544e618003f173c3f173c12173901874d2eed872e
ed4b5279b4090a09080ab8019a400f120101020405030406070908090a08
b8019a400a12040403010102000c0b877d1008c5872e18052b087d10c587
0810c5872e18052b087d10c54b5179b301010002b8019ab6090a09040405
03b8019a400f090908040503040607010001020c0b870810c0870810c087
10057afd1808c4188710057afd7d08c4313001725d5d71005d7213090133
090133012309012301fd0115014cd8014c0115dafe7ed1feadfeabd1fe80
05bdfb5504abfb5504abfa4304c2fb3e05bd>LWYAAA+Helvetica AddT42Char 
1 6836 36 <0002002f000004b405bd0009000a00634036170518060201050606251200
0001010603040501021e0403020700061e0809080a030a0a030705041a0c
03690900190b0ca0218edc182b2b4ef43c4de44e10f63cc412392f003f3f
3c4dfd393c3f3cfd3c390111123939872e2b877dc43130015d3701213521
1501211521012f0385fcbd0443fc76038afb7b0264a50469afabfb9daf05
bd00>LWYAAA+Helvetica AddT42Char 
1 7176 39 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>LWYAAA+Helvetica AddT42Char 
1 8672 44 <0001001c0000021705d20017004d402b071d060a1d03010f1439160d0612
0a1917171a0e0d1129171207120f0e1f0e020efc14191819fc21677e182b
2b4ef44dfd5d39c42f3cfd3c104e456544e6003f3f3c4dfd3c3fedd4ed31
3012373633321617152e012322061533152311231123353335b5233fb411
24171c190b5220b2b4b295950542345c0202a4020155ae8efc64039c8ea8
0000>LWYAAA+Helvetica AddT42Char 
1 8824 45 <0003003dfe3b03e80449001f002d002e00b7404d36144908490958085909
880ca91ba81da927a62bb91b0b4008031622290ec40a221d1f070406291d
190a121d0a0f2e072e2e051c032e162e2d29051a300c0e270d3e26271c19
2f3087217242182b2b4ef44dedf4ed394e10f64dfde4f51112392f003f3f
ed3fed3f3fed10ed1112393931304379402c23281a1e0b1124251026231e
262600281a262600110b0e21000f0e0c0d251d222601271b2926000f0c12
2100002b2b2b01103c103c2b2b2b2b2b818181005d001716173533111407
06212226273316171633323736270e012322241110003300262322070615
1416333237363501027c5e3335a63c70fec9adec0eb70d273d83cf402603
36987daefefb0107ba0144a47fbe4625937cc24f2cfed104423e234387fc
32cc76da9ba548273c9256dd5250f7011d010d012efea1c0b25f9ab5bdaf
6384022d0000>LWYAAA+Helvetica AddT42Char 
1 9160 46 <00010084000003ed05c200160053402c0607070817071708270427137507
750808130d0213150000111d0607150c0a0d290a1a180115290016191718
b80106b3216242182b2b4ef43c4dfd3c4e10f64ded003f3c3fed3f113939
0112393130005d1333113637363332171615112311342726232206151123
84b440335782e9532db91e318770b6b405c2fddc512139a3599efd5102a3
7637589ad6fdc8000000>LWYAAA+Helvetica AddT42Char 
1 9412 48 <0002ffdafe50013805bd00030011002fb800532bba0000000100562bb800
0110b80007d0b8000010b80009d000b8000e2fb800112fba000300000056
2b303101233533013e0135113311140706232226270138b4b4fea27931b4
263fb00d1d1f04edd0f93404235c04b6fb37753a620203000000>LWYAAA+Helvetica AddT42Char 
1 9528 49 <000100890000013d05bd0003002940150000030a0517171a010229000319
0405aa216242182b2b4ef43c4dfd3c4e456544e6003f3f31301333112389
b4b405bdfa430000>LWYAAA+Helvetica AddT42Char 
1 9596 50 <0001008400000625044700260085403b0708070e060f1708170e170f2708
270e270f4819560b670b0c23250a1a1d23190a02041725211d171d0d0607
00061b1c2503130a2817171a112914b80101b21a291db80101400a00012e
25292600192728b8010db3216242182b2b4ef43c4dfde410f4edf4fd4e45
6544e6003f173c3f3f3c4deded111217390111123912393130005d133315
36373633321716173e013332171615112311342623220615112311342726
23220615112384b240345971804e2c243ca265d84e2abb6b4d6a99b71a29
7066a7b4042f984f243d3f244656539c548efd3702e86b508ea6fd9102bb
6d324b9ecffdc800>LWYAAA+Helvetica AddT42Char 
1 10496 54 <0002003cfe5503ed0447000e0020007a4033381848185818a801a705a81c
0628081217030b1d20071306031d1a0b160e072e132e162915141a220e27
1d19212287217242182b2b4ef44ded4e10f63c4dfde4e4003f3fed3f3fed
11393931304379401c1b1f0c0d00020126021b0e26000c1f0e2600001c03
26000d1e0b26012b2b012b2b2b818181005d121716333237363534272623
2206150017161735331123110e0123220011101233f82745b2bc47272b49
b875a7018f5b322eabb52d9f77abfef2fdc9017e5ea7b061978b5d9fcbd4
023e43244695fa2602264855010c01120101014a0000>LWYAAA+Helvetica AddT42Char 
1 11656 59 <0001000b000003e1042f000b002300b10a083fb00633b100063fb0033301
b00c2fb00dd600b1000a1112b102083939303113331b0117090123090123
011ee9f6f9dbfe970179e6fef6fefee40179042ffe87017905fdfbfddb01
92fe6e022500>LWYAAA+Helvetica AddT42Char 
1 11752 60 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>LWYAAA+Helvetica AddT42Char 
LWYAAA+Helvetica /CharStrings get begin
/percent 2 def
/parenleft 3 def
/parenright 4 def
/hyphen 6 def
/period 7 def
/slash 8 def
/six 15 def
/seven 16 def
/eight 17 def
/nine 18 def
/colon 19 def
/equal 20 def
/A 21 def
/B 22 def
/E 24 def
/F 25 def
/H 26 def
/J 27 def
/L 28 def
/M 29 def
/N 30 def
/T 33 def
/V 34 def
/W 35 def
/Z 36 def
/a 39 def
/f 44 def
/g 45 def
/h 46 def
/j 48 def
/l 49 def
/m 50 def
/q 54 def
/x 59 def
/y 60 def
end
LWYAAA+Helvetica /Encoding get
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 113 /q put
dup 120 /x put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFC+Helvetica*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A /B /C /.notdef /E /F /.notdef /H /.notdef /J /.notdef /L /M /N /.notdef /P 2{/.notdef}rp /S /T /.notdef /V /W 2{/.notdef}rp /Z /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e /f /g /h /i /j /.notdef /l /m /n /o /p /q /r /s /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]ZHQEFC+Helvetica nfZHQEFC+Helvetica*1 [20.3829 0 0 -20.3829 0 0 ]msf518.165 31.0656 mo(CMS Preliminary)[14.7164 16.9788 13.5956 5.66644 13.5955 6.78735 11.3329 4.52502 4.52502 16.9788 4.52502 11.3329 11.3329 6.78735 0 ]xshZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf217.161 31.0656 mo(July 2015)[5.45126 6.06177 2.42035 5.45126 3.03088 6.0618 6.0618 6.06177 0 ]xsh177.343 392.27 mo(All results at: http://cern.ch/go/pNj7)[7.27203 2.42038 2.42035 3.03088 3.63046 6.0618 5.45123 6.0618 2.42035 3.03088 5.45126 3.03088 6.0618 3.03088 3.03088 3.03091 6.0618 3.03088 3.03088 6.0618 3.03088 3.03091 3.03088 5.45123 6.0618 3.63046 6.06177 3.03088 5.45126 6.0618 3.03088 6.0618 6.0618 3.03088 6.06177 7.87161 2.42038 0 ]xshZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf220.953 377.575 mo(W1j)[16.1172 3.16272 0 ]xsh%ADOBeginSubsetFont: JIWAAA+Symbol AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal JIWAAA+Symbol gcheck setglobal} if
1 180 42 <000200580025040c03aa0003000a00394023380948095809030a08070604
053f090109c505028c000b0207010704003c0805013b0b10f43c3ce43239
315d0010d4fcd4e45d1739305d252135211101352d013501040cfc4c03b4
fc4c02c1fd3f03b4258b014cfed78fdbde8ffed70000>JIWAAA+Symbol AddT42Char 
1 596 97 <00010002fe44030603b20026004b40280d0e0b1b0e00032108061503060b
b021b12719106a0c7a0c0306240d0e070e001b1e1807241e072710c4d4c4
10c610d6ce3911123912395d310010e4f4c4c43912391117391112393025
0a01232206072335343633321317361336373e01333216151402071e0115
1406232226353436018d3e963e1f26052f4748848f12632204030c342c2b
2dfa3f10112a2e2d2e2a730127015a3c373d7b79fd7154eb0117240f5b51
2e2c52fe059c73b73f67594a4949cf00>JIWAAA+Symbol AddT42Char 
1 492 65 <000100730121077303b800090037401e060407050301020005cf07ce02cf
00cd0a0705020004060142034308480a10f4f4e4321739310010fcecfcec
111239391112393930012537051505272521350691fe5d2d0258fda82d01
a3f9e202a6aa68fe9bfe68aa7300>JIWAAA+Symbol AddT42Char 
1 792 105 <00010000ffe903e703b800200057403a1615120e121f0600110307030719
0e981f210f1f091c3c1f3c204a1f44125611561259155a1f631163126915
0d201f15121100061c08061c060b2fc4c412391117395d310010c4f43cc4
cc11173912391112393930132e012322061d012334263534363332161713
3e013d0134363332161514000723ba0e201527212d025c564d6034c75c54
3a452b33feb1693503002620445012061807757e5986fe048ef177316351
2d2745fdade30000>JIWAAA+Symbol AddT42Char 
1 292 54 <0002002b000004c3056000020006006b40132802000571009e0306050201
0005070308040710d410c412173931002fece41139304b535840314a027a
028a02031600190102022102010021040405021b011b03060302050d0612
051d0644054b0675058505aa06b9060a015d070510ecec0710ec08ec015d
005d5937210901210133bc02fcfe830288fb6802352d5c03acfbf8056000
0000>JIWAAA+Symbol AddT42Char 
1 68 41 <000200580025040c03aa0003000a003b4024380948095809030a08070504
053f090109c506028c000b0d0401010b040905003c073b0b10f4e4323239
1239315d0010d4fcd4e45d1739305d2521352101051501350115040cfc4c
03b4fd4002c0fc4e03b2258b018ddb8f01298501298f>JIWAAA+Symbol AddT42Char 
JIWAAA+Symbol /CharStrings get begin
/g42 42 def
/g97 97 def
/g65 65 def
/g105 105 def
/g54 54 def
/g41 41 def
end
JIWAAA+Symbol /Encoding get
dup 34 /g42 put
dup 35 /g97 put
dup 36 /g65 put
dup 37 /g105 put
dup 38 /g54 put
dup 39 /g41 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ZHQEFD+Symbol*1 [32{/.notdef}rp /g109 /g60 /g42 /g97 /g65 /g105 /g54 /g41 216{/.notdef}rp]ZHQEFD+Symbol nfZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf233.752 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf250.817 377.575 mo(2j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf247.498 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf264.089 377.575 mo(3j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf260.771 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf277.836 377.575 mo(4j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf274.518 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf290.16 377.575 mo(Z1j)[15.1678 3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf302.01 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf319.076 377.575 mo(2j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf315.758 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf332.823 377.575 mo(3j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf329.504 377.575 mo(")shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf346.569 377.575 mo(4j)[3.16269 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf343.251 377.575 mo("#)[18.9551 0 ]xshZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf356.524 377.575 mo(W)shZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf374.062 377.575 mo(#)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf370.744 377.575 mo(ZWWWZZZ)[11.3771 5.36975 9.32425 5.36975 9.32593 3.47552 0 ]xsh%ADOBeginSubsetFont: DLGQMX+Symbol Initial
ct_T42Dict begin
-0.164 -0.297 1.094 0.824
 256 array 0 1 255 {1 index exch /.notdef put} for  /DLGQMX+Symbol
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000002166670
676d00000000000002d400000200676c79660000000000000d9000000130
6865616400000000000004d40000003668686561000000000000050c0000
0024686d74780000000000000530000000086c6f63610000000000000538
000000066d6178700000000000000540000000206e616d65000000000000
056000000020707265700000000000000580000008106764697200000000
000000000000000000ee00cd003b00870289003f005600c1005e01ec00b2
0193008b012d008900ee003b00ae00b200c700b20037002d006003a600c1
00fc00d300b800d3025c00cb00c100660031021900c1004e005400b2009c
0202021d007500c1019600c1020e023f01ac009e029c017f00a0005a001f
042700c100f4005803b4006d003302a8005e046a02850700007302a20075
01100073005e0242024e0902009804f600370546005c00bc00b000a6036d
02e7075e004401f80075006800dd00e1003502370062008d0262008900be
01d301b601d701e3025200cf01c301fc01cd054805480548056600000017
00ee05c100b6021b007100b60000001b003f030405480548054805480000
001f0029004e0029004e0066019305cb019e008b015000ee00ee0031009a
0091004e009a054800b000310398002d036d003300e9004a004a00290398
039800330583004a00c3008f005205d3005a019c0075067d006003980398
03b601b200330398058301c70398039803980000001201e5061d00390421
0227065e008700e905b0023d02d70077008302f6058301b400df058d02a6
00750112059c02830162005e0242024e004e0552008b058d001404f60021
058d005c002d001f05f4005201ba022d001003a601aa0075006800dd00e1
05c902e7020c0646006405ec01ee01f8062f062501b205f80200008301c1
0635003d01fc063301be0639060e00680083006200be7b857fff00820030
002a00004007060504030201002c2010b002254964b040515820c859212d
2cb002254964b040515820c859212d2c20100720b00050b00d7920b8ffff
5058041b0559b0051cb0032508b0042523e120b00050b00d7920b8ffff50
58041b0559b0051cb0032508e12d2c4b505820b80107454459212d2cb002
254560442d2c4b5358b00225b0022545445921212d2c45442db800072c4b
b800065058b101018e59b801ff85b800441db9000600035f5e2db800082c
2020456944b001602db800092cb800082a212db8000a2c2046b003254652
582359208a208a49648a204620686164b004254620686164525823658a59
2f20b00053586920b000545821b040591b6920b000545821b0406559593a
2db8000b2c2046b00425465258238a592046206a6164b0042546206a6164
5258238a592ffd2db8000c2c4b20b0032650585158b080441bb04044591b
21212045b0c05058b0c0441b2159592db8000d2c2020456944b001602020
457d691844b001602db8000e2cb8000d2a2db8000f2c4b20b003265358b0
401bb000598a8a20b0032653582321b0808a8a1b8a235920b00326535823
21b800c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b003
2653582321b801408a8a1b8a235920b80003265358b0032545b801805058
2321b8018023211bb003254523212321591b2159442db800102c4b535845
441b2121592d0001000000010000285b03145f0f3cf50111080000000000
a1cd888000000000c62fe93dfeaafd9c08c0069e00000006000100000000
000000010000059cfd9c00000856feaafbdc088100010000000000000000
000000000000000204cd0066049c00960000002200980000000100000002
007a0004000000000002001000400011000007e808100001000100000001
00120001000000000006000d000048554b5356462b53796d626f6c00b800
072b41ff0280010500fe0003010400fe00030103007d0003010200fe0003
010100fe0003010000fe000300ff00fe000300fe00fe000300fd00fe0003
00fc00fe000300fb00fe000300fa00fe000300f800fe000300f700fe0003
00f600fe000300f500fe000300f400fe000300f300fe000300f200fe0003
00f100fe000300f000fe000300ef00fe000300ee00fe000300ed00fe0003
00ec00fe000300eb0000000300ea00fe000300e900e80064000500e900fe
000300e80064000300e700fe000300e600fe000300e500fe000300e400fe
000300e300fe000300e200fe000300e100fe000300df00fe000300de00fe
000300dc00fe000300db00fe000300da00fe000300d900fe000300d800fe
000300d700fe000300d60084001d000500d60023000300d200fe000300d2
0023000400d100fe000300d000fe000300d00023000400cf00fe000300ce
00fe000300cc00fe000300cb00c8000300ca00fe000300c900fe000300c8
00fe000300c700fe000300c60064000300c500fe000300c400fe000300c3
00fe000300c100fe000300bf00fe000300be00fe000300bd00fe000300bc
00fe000300bb00fe000300ba00b9004f000500ba00fe000300baffd00004
00b9004f000300b800b7000e000500b80016000300b80080000400b700b6
0006000500b7000e000300b70040000400b60006000300b50032000300b4
0082000341ff00b300a00033000500b3005c000300b30040000400b200fe
000300b10064000300b000af00ba000500b000fe000300af00ae00760005
00af00ba000300af0080000400ae00a00033000500ae0076000300ae0040
000400ab004b000300aa00fe000300a900fe000300a800fe000300a70064
000300a6003a000300a50064000300a400fe000300a3005c000300a20064
000300a100a00033000500a1003f000300a10040000400a000330003009f
003a0003009e00410003009d00d20003009c00fe0003009b004b0003009a
00fe0003009900fe00030098007d0003009700380003009600fe00030095
00fe00030094003a00030093007d00030092007d00030091006400030090
00fe0003008f00fa0003008e003a0003008d007d0003008c007d0003008b
00c80003008a00fe0003008900fe00030088002800030088fff000040087
00fe0003008600fe000300850084001d00050085003e00030084001d0003
0083008200330005008300fe00030083ffd0000400820033000300810080
00dc0005008100fe0003008100c000040080007f008c0005008000dc0003
008000800004007f007e003c0005007f008c0003007f00400004007e003c
0003007d00fe0003007c00fe0003007b007a003c0005007b00fe0003007b
ffd00004007a003c0003007900fe0003007800fe0003007700fe00030076
00640003007541ff00fe00030073007200450005007300fe00030073ffd0
00040072004500030071007000ba0005007100fe00030070006f00760005
007000ba0003007000800004006f006e00260005006f00760003006f0040
0004006e00260003006b00fe0003006800fe0003006700fe0003006500fe
0003006300fe0003005f00fe0003005e00fe0003005d00fe0003005c00fe
0003005b005a00640005005b00fe0003005a00640003005900fe00030058
00fe0003005700fe0003005600fe0003005500fe0003005400fe00030053
007d0003005200fe0003005000fe0003004f00fe0003004e00fe0003004d
00fe0003004c00fe0003004b00fe00030048ffe000040047006400030046
00fe0003004400230004004300fe0003004200fe0003004100fe00030040
00260003003f00fe0003003e00fe0003003d00fe0003003c00fe0003003b
00fe0003003a00fe0003003900430003003800fe0003003700fe00030034
00fe0003003300fe0003003200fe0003003100340003003000fe0003002f
00fe0003002e00fe0003002d00fe0003002c00480003002b00fe0003002a
00fe0003002900fe000300280027003a0005002800fe00030027003a0003
002600fe0003002500fe00030024000f00030023001b0003002200960003
002100fe0003002000550003001f003a0003001e00fe0003001d003a0003
001c003a0003001b417600640003001a00640003001900480003001800fe
0003001700fe0003001600fe0003001500fe000300150010000400140011
00250005001400fe000300130012004b0005001300960003001200110025
00050012004b0003001100250003001000fe0003001000100004000f00fa
0003000e00fe0003000d00fe0003000c00fe0003000b00fe0003000a00fe
0003000900fe0003000800fe0003000700350003000600ce0003000500fe
0003000400fe0003000300fe00030002001d000300020010000400010064
00030060001b0060001d0080000d0090000d00a0000d00b0000d00c0000d
00070001014c858d01732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1d00>
[305 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 68 1 <00010096fe540477039800330057402e0031061a04070f092003100c03a7
101d177332079828342e22312520221a11140f1a08060f14062c08002c25
313410d4c4ecd4ecd4c411123911123911123911123939310010c4e432f4
3cc4ec32111739121739300114163332123511331114163332363d01331e
01151406232226270e012322262706151412151406232226353436353402
3511330154394a769abd26282b2d2b010161586768012f9d785a76170283
2e282f290806bc013990630149fe010bfd605c5655531c081312727dafb1
b6aa6b68132781fec11d282e434c12c9524a010c3c01f6000000>DLGQMX+Symbol AddT42Char 
1 0 0 <00020066fe96046605a400030007001740090400060108050204002fccdc
cc310010d4ccd4cc301311211125211121660400fc73031bfce5fe96070e
f8f2720629000000>DLGQMX+Symbol AddT42Char 
DLGQMX+Symbol /CharStrings get begin
/g1 1 def
end
DLGQMX+Symbol /Encoding get
dup 33 /g1 put
pop
end
%ADOEndSubsetFont
/ZHQEFE+Symbol /DLGQMX+Symbol findfont ct_VMDictPut/ZHQEFE+Symbol*1 [33{/.notdef}rp /g1 222{/.notdef}rp]ZHQEFE+Symbol nfZHQEFE+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf471.712 388.951 mo(!)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf457.017 388.951 mo(ll, l=e,)[1.26282 1.26282 1.5813 1.58136 1.26282 3.32196 3.16272 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf451.329 388.951 mo($)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf444.693 388.951 mo(, Z)[1.58136 1.58136 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf441.374 388.951 mo(%)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf440.426 388.951 mo(l)shZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf434.738 388.951 mo($)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf429.051 388.951 mo(W)sh422.888 380.893 mo(qqW)[3.16272 3.16266 0 ]xsh422.888 375.205 mo(EW)[3.79413 0 ]xsh437.582 380.893 mo(qqZ)[3.16272 3.16266 0 ]xsh437.582 375.205 mo(EW)[3.79413 0 ]xsh450.856 380.893 mo(WW)[5.36975 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf456.544 373.783 mo($)sh453.698 373.783 mo(#)sh450.855 373.783 mo(#)shZHQEFC+Helvetica*1 [4.7402 0 0 -4.7402 0 0 ]msf463.178 380.419 mo(ssWW)[2.37012 2.37006 4.47479 0 ]xsh463.178 375.679 mo( EW)[1.31775 3.1618 0 ]xshZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf487.353 377.575 mo(#)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf477.873 377.575 mo(WVtt1j2j3j)[5.36975 12.1696 1.5813 11.6906 3.16272 10.5842 3.16266 10.5848 3.16272 0 ]xshZHQEFC+Helvetica*1 [3.7922 0 0 -3.7922 0 0 ]msf549.924 379.471 mo(t-ch)[1.05426 1.26276 1.89612 0 ]xshZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf548.028 377.575 mo(ttW)[14.2208 1.58136 0 ]xshZHQEFC+Helvetica*1 [3.7922 0 0 -3.7922 0 0 ]msf576.943 379.471 mo(s-ch)[1.89612 1.26276 1.89612 0 ]xshZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf575.046 377.575 mo(t)shZHQEFD+Symbol*1 [5.6883 0 0 -5.6883 0 0 ]msf593.534 377.575 mo(#)shZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf590.216 377.575 mo(ttttWttZ)[1.58136 10.744 1.58136 1.58136 11.5313 1.58136 1.58136 0 ]xshZHQEFD+Symbol*1 [7.1103 0 0 -7.1103 0 0 ]msf682.176 388.951 mo( )sh677.435 388.951 mo(&)shZHQEFC+Helvetica*1 [7.1103 0 0 -7.1103 0 0 ]msf652.313 388.951 mo( in exp. )[1.97668 1.57849 3.95331 1.97662 3.95337 3.55511 3.95337 1.97662 0 ]xshZHQEFC+Helvetica*1 [4.7402 0 0 -4.7402 0 0 ]msf648.995 391.322 mo(H)shZHQEFD+Symbol*1 [7.1103 0 0 -7.1103 0 0 ]msf644.728 388.951 mo( )sh639.988 388.951 mo(&)shZHQEFC+Helvetica*1 [7.1103 0 0 -7.1103 0 0 ]msf627.664 388.951 mo(Th. )[4.34436 3.95331 1.97668 0 ]xshZHQEFC+Helvetica*1 [5.6883 0 0 -5.6883 0 0 ]msf629.085 377.575 mo(ggH)[3.16272 3.16266 0 ]xsh642.358 380.893 mo(qqH)[3.16272 3.16266 0 ]xsh642.358 375.205 mo(VBF)[3.79413 3.79413 0 ]xsh658.001 377.575 mo(VHttH)[3.79413 9.95282 1.58136 1.58136 0 ]xshZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf465.549 113.071 mo(CMS 95%CL limit)[7.87158 9.08173 7.27203 3.03088 6.06183 6.06177 9.69238 7.87164 6.06177 3.03088 2.42035 2.42035 9.08173 2.42035 0 ]xsh649.943 53.3446 mo(\))shZHQEFC+Helvetica*1 [7.1103 0 0 -7.1103 0 0 ]msf644.728 48.1304 mo(-1)[2.36768 0 ]xshZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf614.391 53.3445 mo( 5.0 fb)[3.03088 6.06177 3.03094 6.06177 3.03088 3.03088 0 ]xshZHQEFD+Symbol*1 [10.9025 0 0 -10.9025 0 0 ]msf608.229 53.3445 mo(')shZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf465.549 53.3445 mo(7 TeV CMS measurement \(L )[6.06177 3.03088 6.66138 6.06177 7.27209 3.03088 7.87158 9.08173 7.27203 3.03088 9.08173 6.06177 6.06177 5.45129 6.06177 3.63043 6.06183 9.08167 6.06177 6.06183 3.03088 3.03088 3.63043 6.06183 0 ]xsh656.105 68.0389 mo(\))shZHQEFC+Helvetica*1 [7.1103 0 0 -7.1103 0 0 ]msf650.891 62.8245 mo(-1)[2.36768 0 ]xshZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf614.391 68.0386 mo( 19.6 fb)[3.03088 6.06177 6.06183 3.03088 6.06177 3.03088 3.03094 0 ]xshZHQEFD+Symbol*1 [10.9025 0 0 -10.9025 0 0 ]msf608.229 68.0386 mo(')shZHQEFC+Helvetica*1 [10.9025 0 0 -10.9025 0 0 ]msf465.549 68.0386 mo(8 TeV CMS measurement \(L )[6.06177 3.03088 6.66138 6.06177 7.27209 3.03088 7.87158 9.08173 7.27203 3.03088 9.08173 6.06177 6.06177 5.45129 6.06177 3.63043 6.06183 9.08167 6.06183 6.06177 3.03088 3.03088 3.63049 6.06177 0 ]xsh465.549 81.7856 mo(7 TeV Theory prediction)[6.06177 3.03088 6.66138 6.06177 7.27209 3.03088 6.66132 6.06183 6.06177 6.06177 3.63049 5.45123 3.03088 6.06177 3.63043 6.06183 6.06177 2.42035 5.45129 3.03088 2.42035 6.06177 0 ]xsh465.549 96.481 mo(8 TeV Theory prediction)[6.06177 3.03088 6.66138 6.06177 7.27209 3.03088 6.66132 6.06183 6.06177 6.06177 3.63049 5.45123 3.03088 6.06177 3.63043 6.06183 6.06177 2.42035 5.45129 3.03088 2.42035 6.06177 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ZHQEFE+Symbol*1 uf/ZHQEFE+Symbol uf/DLGQMX+Symbol uf/ZHQEFD+Symbol*1 uf/ZHQEFD+Symbol uf/JIWAAA+Symbol uf/ZHQEFC+Helvetica*1 uf/ZHQEFC+Helvetica uf/LWYAAA+Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
