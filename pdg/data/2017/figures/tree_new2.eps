%!PS-Adobe-3.1 EPSF-3.0
%%Title: tree_new2 [Converted].eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Piotr Zyla
%%CreationDate: 10/4/07
%%BoundingBox: 0 0 334 510
%%HiResBoundingBox: 0 0 333.1314 509.8687
%%CropBox: 0 0 333.1314 509.8687
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: font Symbol
%%+ font Times-Roman
%%+ font Times-Italic
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentNeededFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (tree_new2 [Converted].eps) 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-10-04T21:44:33Z</xap:CreateDate>
  <xap:ModifyDate>2007-10-04T21:44:33Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>168</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUBea7o1lewWN3ewwXlzT0IHcK7cm4rQH+Zv&#xA;hHiduuKo/FUr8yeZNK8u6RPqmpTLHDCjMkZkijeVlUv6UXqvGjSMFPFeWKt3nmbQLA2yapqFtptx&#xA;doZILa8mihlYKKvRWbfhX4uNaYq2vmby2+npqSarZtp0kggjvRcRGFpS3ARrJy4luXw8a1riqZYq&#xA;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&#xA;sVdirsVdirsVdirsVf/Z</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -509.869 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 509.869 li
333.132 509.869 li
333.132 0 li
clp
[1 0 0 1 0 0 ] concat
1.63801 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
58.1246 44.4024 mo
276.184 44.4024 li
false sop
/0 
[/DeviceCMYK] add_csa
0 0 0 1 cmyk
@
170.513 44.4024 mo
161.281 40.6724 li
162.801 41.2872 163.796 42.7627 163.796 44.4024 cv
163.796 46.042 162.801 47.5176 161.281 48.1319 cv
170.513 44.4024 li
f
276.184 102.552 mo
58.1246 102.552 li
@
163.797 102.552 mo
173.028 106.282 li
171.508 105.667 170.513 104.192 170.513 102.552 cv
170.513 100.912 171.508 99.4366 173.028 98.8213 cv
163.797 102.552 li
f
276.184 131.626 mo
203.498 160.702 li
@
236.723 147.412 mo
246.681 147.445 li
245.041 147.44 243.569 146.439 242.959 144.917 cv
242.35 143.394 242.726 141.654 243.91 140.519 cv
236.723 147.412 li
f
203.498 160.702 mo
276.184 189.776 li
@
242.959 176.486 mo
235.773 169.593 li
236.957 170.728 237.333 172.468 236.724 173.991 cv
236.114 175.514 234.641 176.514 233.001 176.52 cv
242.959 176.486 li
f
130.812 102.552 mo
128.691 109.717 130.894 111.48 137.419 107.838 cv
143.945 104.197 146.147 105.959 144.027 113.125 cv
141.907 120.291 144.11 122.052 150.635 118.411 cv
157.161 114.769 159.363 116.531 157.243 123.697 cv
155.123 130.863 157.325 132.625 163.851 128.983 cv
170.376 125.342 172.579 127.105 170.458 134.27 cv
168.339 141.436 170.542 143.198 177.067 139.556 cv
183.592 135.915 185.795 137.677 183.674 144.842 cv
181.554 152.008 183.757 153.77 190.282 150.128 cv
196.807 146.488 199.01 148.25 196.891 155.416 cv
194.77 162.581 196.972 164.342 203.498 160.702 cv
@
gsave % PSGState
69.0274 73.4771 mo
69.0274 49.4034 64.1426 29.8653 58.1246 29.8653 cv
52.106 29.8653 47.2217 49.4034 47.2217 73.4771 cv
47.2217 97.5508 52.106 117.089 58.1246 117.089 cv
64.1426 117.089 69.0274 97.5508 69.0274 73.4771 cv
clp
51.4683 112.744 mo
51.4683 112.744 li
51.4683 112.013 50.8755 111.419 50.1451 111.419 cv
49.4151 111.419 48.8223 112.013 48.8223 112.744 cv
48.8223 113.474 49.4151 114.066 50.1451 114.066 cv
50.8755 114.066 51.4683 113.474 51.4683 112.744 cv
f
57.1563 112.744 mo
57.1563 112.744 li
57.1563 112.013 56.564 111.419 55.8335 111.419 cv
55.1036 111.419 54.5108 112.013 54.5108 112.744 cv
54.5108 113.474 55.1036 114.066 55.8335 114.066 cv
56.564 114.066 57.1563 113.474 57.1563 112.744 cv
f
62.8453 112.744 mo
62.8453 112.744 li
62.8453 112.013 62.2525 111.419 61.522 111.419 cv
60.7916 111.419 60.1993 112.013 60.1993 112.744 cv
60.1993 113.474 60.7916 114.066 61.522 114.066 cv
62.2525 114.066 62.8453 113.474 62.8453 112.744 cv
f
68.5332 112.744 mo
68.5332 112.744 li
68.5332 112.013 67.9405 111.419 67.2105 111.419 cv
66.4805 111.419 65.8877 112.013 65.8877 112.744 cv
65.8877 113.474 66.4805 114.066 67.2105 114.066 cv
67.9405 114.066 68.5332 113.474 68.5332 112.744 cv
f
48.6241 107.054 mo
48.6241 107.054 li
48.6241 106.325 48.0313 105.732 47.3008 105.732 cv
46.5704 105.732 45.9781 106.325 45.9781 107.054 cv
45.9781 107.785 46.5704 108.377 47.3008 108.377 cv
48.0313 108.377 48.6241 107.785 48.6241 107.054 cv
f
54.3121 107.054 mo
54.3121 107.054 li
54.3121 106.325 53.7198 105.732 52.9893 105.732 cv
52.2593 105.732 51.6666 106.325 51.6666 107.054 cv
51.6666 107.785 52.2593 108.377 52.9893 108.377 cv
53.7198 108.377 54.3121 107.785 54.3121 107.054 cv
f
60.0005 107.054 mo
60.0005 107.054 li
60.0005 106.325 59.4082 105.732 58.6778 105.732 cv
57.9478 105.732 57.355 106.325 57.355 107.054 cv
57.355 107.785 57.9478 108.377 58.6778 108.377 cv
59.4082 108.377 60.0005 107.785 60.0005 107.054 cv
f
65.6895 107.054 mo
65.6895 107.054 li
65.6895 106.325 65.0967 105.732 64.3663 105.732 cv
63.6358 105.732 63.0435 106.325 63.0435 107.054 cv
63.0435 107.785 63.6358 108.377 64.3663 108.377 cv
65.0967 108.377 65.6895 107.785 65.6895 107.054 cv
f
71.3775 107.054 mo
71.3775 107.054 li
71.3775 106.325 70.7847 105.732 70.0547 105.732 cv
69.3248 105.732 68.732 106.325 68.732 107.054 cv
68.732 107.785 69.3248 108.377 70.0547 108.377 cv
70.7847 108.377 71.3775 107.785 71.3775 107.054 cv
f
51.4683 101.367 mo
51.4683 101.367 li
51.4683 100.636 50.8755 100.043 50.1451 100.043 cv
49.4151 100.043 48.8223 100.636 48.8223 101.367 cv
48.8223 102.097 49.4151 102.689 50.1451 102.689 cv
50.8755 102.689 51.4683 102.097 51.4683 101.367 cv
f
57.1563 101.367 mo
57.1563 101.367 li
57.1563 100.636 56.564 100.043 55.8335 100.043 cv
55.1036 100.043 54.5108 100.636 54.5108 101.367 cv
54.5108 102.097 55.1036 102.689 55.8335 102.689 cv
56.564 102.689 57.1563 102.097 57.1563 101.367 cv
f
62.8453 101.367 mo
62.8453 101.367 li
62.8453 100.636 62.2525 100.043 61.522 100.043 cv
60.7916 100.043 60.1993 100.636 60.1993 101.367 cv
60.1993 102.097 60.7916 102.689 61.522 102.689 cv
62.2525 102.689 62.8453 102.097 62.8453 101.367 cv
f
68.5332 101.367 mo
68.5332 101.367 li
68.5332 100.636 67.9405 100.043 67.2105 100.043 cv
66.4805 100.043 65.8877 100.636 65.8877 101.367 cv
65.8877 102.097 66.4805 102.689 67.2105 102.689 cv
67.9405 102.689 68.5332 102.097 68.5332 101.367 cv
f
48.6241 95.6768 mo
48.6241 95.6768 li
48.6241 94.9473 48.0313 94.3545 47.3008 94.3545 cv
46.5704 94.3545 45.9781 94.9473 45.9781 95.6768 cv
45.9781 96.4073 46.5704 97 47.3008 97 cv
48.0313 97 48.6241 96.4073 48.6241 95.6768 cv
f
54.3121 95.6768 mo
54.3121 95.6768 li
54.3121 94.9473 53.7198 94.3545 52.9893 94.3545 cv
52.2593 94.3545 51.6666 94.9473 51.6666 95.6768 cv
51.6666 96.4073 52.2593 97 52.9893 97 cv
53.7198 97 54.3121 96.4073 54.3121 95.6768 cv
f
60.0005 95.6768 mo
60.0005 95.6768 li
60.0005 94.9473 59.4082 94.3545 58.6778 94.3545 cv
57.9478 94.3545 57.355 94.9473 57.355 95.6768 cv
57.355 96.4073 57.9478 97 58.6778 97 cv
59.4082 97 60.0005 96.4073 60.0005 95.6768 cv
f
65.6895 95.6768 mo
65.6895 95.6768 li
65.6895 94.9473 65.0967 94.3545 64.3663 94.3545 cv
63.6358 94.3545 63.0435 94.9473 63.0435 95.6768 cv
63.0435 96.4073 63.6358 97 64.3663 97 cv
65.0967 97 65.6895 96.4073 65.6895 95.6768 cv
f
71.3775 95.6768 mo
71.3775 95.6768 li
71.3775 94.9473 70.7847 94.3545 70.0547 94.3545 cv
69.3248 94.3545 68.732 94.9473 68.732 95.6768 cv
68.732 96.4073 69.3248 97 70.0547 97 cv
70.7847 97 71.3775 96.4073 71.3775 95.6768 cv
f
51.4683 89.9893 mo
51.4683 89.9893 li
51.4683 89.2588 50.8755 88.6661 50.1451 88.6661 cv
49.4151 88.6661 48.8223 89.2588 48.8223 89.9893 cv
48.8223 90.7198 49.4151 91.3116 50.1451 91.3116 cv
50.8755 91.3116 51.4683 90.7198 51.4683 89.9893 cv
f
57.1563 89.9893 mo
57.1563 89.9893 li
57.1563 89.2588 56.564 88.6661 55.8335 88.6661 cv
55.1036 88.6661 54.5108 89.2588 54.5108 89.9893 cv
54.5108 90.7198 55.1036 91.3116 55.8335 91.3116 cv
56.564 91.3116 57.1563 90.7198 57.1563 89.9893 cv
f
62.8453 89.9893 mo
62.8453 89.9893 li
62.8453 89.2588 62.2525 88.6661 61.522 88.6661 cv
60.7916 88.6661 60.1993 89.2588 60.1993 89.9893 cv
60.1993 90.7198 60.7916 91.3116 61.522 91.3116 cv
62.2525 91.3116 62.8453 90.7198 62.8453 89.9893 cv
f
68.5332 89.9893 mo
68.5332 89.9893 li
68.5332 89.2588 67.9405 88.6661 67.2105 88.6661 cv
66.4805 88.6661 65.8877 89.2588 65.8877 89.9893 cv
65.8877 90.7198 66.4805 91.3116 67.2105 91.3116 cv
67.9405 91.3116 68.5332 90.7198 68.5332 89.9893 cv
f
48.6241 84.3003 mo
48.6241 84.3003 li
48.6241 83.5704 48.0313 82.9776 47.3008 82.9776 cv
46.5704 82.9776 45.9781 83.5704 45.9781 84.3003 cv
45.9781 85.0308 46.5704 85.6236 47.3008 85.6236 cv
48.0313 85.6236 48.6241 85.0308 48.6241 84.3003 cv
f
54.3121 84.3003 mo
54.3121 84.3003 li
54.3121 83.5704 53.7198 82.9776 52.9893 82.9776 cv
52.2593 82.9776 51.6666 83.5704 51.6666 84.3003 cv
51.6666 85.0308 52.2593 85.6236 52.9893 85.6236 cv
53.7198 85.6236 54.3121 85.0308 54.3121 84.3003 cv
f
60.0005 84.3003 mo
60.0005 84.3003 li
60.0005 83.5704 59.4082 82.9776 58.6778 82.9776 cv
57.9478 82.9776 57.355 83.5704 57.355 84.3003 cv
57.355 85.0308 57.9478 85.6236 58.6778 85.6236 cv
59.4082 85.6236 60.0005 85.0308 60.0005 84.3003 cv
f
65.6895 84.3003 mo
65.6895 84.3003 li
65.6895 83.5704 65.0967 82.9776 64.3663 82.9776 cv
63.6358 82.9776 63.0435 83.5704 63.0435 84.3003 cv
63.0435 85.0308 63.6358 85.6236 64.3663 85.6236 cv
65.0967 85.6236 65.6895 85.0308 65.6895 84.3003 cv
f
71.3775 84.3003 mo
71.3775 84.3003 li
71.3775 83.5704 70.7847 82.9776 70.0547 82.9776 cv
69.3248 82.9776 68.732 83.5704 68.732 84.3003 cv
68.732 85.0308 69.3248 85.6236 70.0547 85.6236 cv
70.7847 85.6236 71.3775 85.0308 71.3775 84.3003 cv
f
51.4683 78.6119 mo
51.4683 78.6119 li
51.4683 77.8819 50.8755 77.2891 50.1451 77.2891 cv
49.4151 77.2891 48.8223 77.8819 48.8223 78.6119 cv
48.8223 79.3423 49.4151 79.9346 50.1451 79.9346 cv
50.8755 79.9346 51.4683 79.3423 51.4683 78.6119 cv
f
57.1563 78.6119 mo
57.1563 78.6119 li
57.1563 77.8819 56.564 77.2891 55.8335 77.2891 cv
55.1036 77.2891 54.5108 77.8819 54.5108 78.6119 cv
54.5108 79.3423 55.1036 79.9346 55.8335 79.9346 cv
56.564 79.9346 57.1563 79.3423 57.1563 78.6119 cv
f
62.8453 78.6119 mo
62.8453 78.6119 li
62.8453 77.8819 62.2525 77.2891 61.522 77.2891 cv
60.7916 77.2891 60.1993 77.8819 60.1993 78.6119 cv
60.1993 79.3423 60.7916 79.9346 61.522 79.9346 cv
62.2525 79.9346 62.8453 79.3423 62.8453 78.6119 cv
f
68.5332 78.6119 mo
68.5332 78.6119 li
68.5332 77.8819 67.9405 77.2891 67.2105 77.2891 cv
66.4805 77.2891 65.8877 77.8819 65.8877 78.6119 cv
65.8877 79.3423 66.4805 79.9346 67.2105 79.9346 cv
67.9405 79.9346 68.5332 79.3423 68.5332 78.6119 cv
f
48.6241 72.9234 mo
48.6241 72.9234 li
48.6241 72.1934 48.0313 71.6006 47.3008 71.6006 cv
46.5704 71.6006 45.9781 72.1934 45.9781 72.9234 cv
45.9781 73.6539 46.5704 74.2466 47.3008 74.2466 cv
48.0313 74.2466 48.6241 73.6539 48.6241 72.9234 cv
f
54.3121 72.9234 mo
54.3121 72.9234 li
54.3121 72.1934 53.7198 71.6006 52.9893 71.6006 cv
52.2593 71.6006 51.6666 72.1934 51.6666 72.9234 cv
51.6666 73.6539 52.2593 74.2466 52.9893 74.2466 cv
53.7198 74.2466 54.3121 73.6539 54.3121 72.9234 cv
f
60.0005 72.9234 mo
60.0005 72.9234 li
60.0005 72.1934 59.4082 71.6006 58.6778 71.6006 cv
57.9478 71.6006 57.355 72.1934 57.355 72.9234 cv
57.355 73.6539 57.9478 74.2466 58.6778 74.2466 cv
59.4082 74.2466 60.0005 73.6539 60.0005 72.9234 cv
f
65.6895 72.9234 mo
65.6895 72.9234 li
65.6895 72.1934 65.0967 71.6006 64.3663 71.6006 cv
63.6358 71.6006 63.0435 72.1934 63.0435 72.9234 cv
63.0435 73.6539 63.6358 74.2466 64.3663 74.2466 cv
65.0967 74.2466 65.6895 73.6539 65.6895 72.9234 cv
f
71.3775 72.9234 mo
71.3775 72.9234 li
71.3775 72.1934 70.7847 71.6006 70.0547 71.6006 cv
69.3248 71.6006 68.732 72.1934 68.732 72.9234 cv
68.732 73.6539 69.3248 74.2466 70.0547 74.2466 cv
70.7847 74.2466 71.3775 73.6539 71.3775 72.9234 cv
f
51.4683 67.2354 mo
51.4683 67.2354 li
51.4683 66.5049 50.8755 65.9122 50.1451 65.9122 cv
49.4151 65.9122 48.8223 66.5049 48.8223 67.2354 cv
48.8223 67.9654 49.4151 68.5582 50.1451 68.5582 cv
50.8755 68.5582 51.4683 67.9654 51.4683 67.2354 cv
f
57.1563 67.2354 mo
57.1563 67.2354 li
57.1563 66.5049 56.564 65.9122 55.8335 65.9122 cv
55.1036 65.9122 54.5108 66.5049 54.5108 67.2354 cv
54.5108 67.9654 55.1036 68.5582 55.8335 68.5582 cv
56.564 68.5582 57.1563 67.9654 57.1563 67.2354 cv
f
62.8453 67.2354 mo
62.8453 67.2354 li
62.8453 66.5049 62.2525 65.9122 61.522 65.9122 cv
60.7916 65.9122 60.1993 66.5049 60.1993 67.2354 cv
60.1993 67.9654 60.7916 68.5582 61.522 68.5582 cv
62.2525 68.5582 62.8453 67.9654 62.8453 67.2354 cv
f
68.5332 67.2354 mo
68.5332 67.2354 li
68.5332 66.5049 67.9405 65.9122 67.2105 65.9122 cv
66.4805 65.9122 65.8877 66.5049 65.8877 67.2354 cv
65.8877 67.9654 66.4805 68.5582 67.2105 68.5582 cv
67.9405 68.5582 68.5332 67.9654 68.5332 67.2354 cv
f
48.6241 61.5464 mo
48.6241 61.5464 li
48.6241 60.8165 48.0313 60.2237 47.3008 60.2237 cv
46.5704 60.2237 45.9781 60.8165 45.9781 61.5464 cv
45.9781 62.2769 46.5704 62.8697 47.3008 62.8697 cv
48.0313 62.8697 48.6241 62.2769 48.6241 61.5464 cv
f
54.3121 61.5464 mo
54.3121 61.5464 li
54.3121 60.8165 53.7198 60.2237 52.9893 60.2237 cv
52.2593 60.2237 51.6666 60.8165 51.6666 61.5464 cv
51.6666 62.2769 52.2593 62.8697 52.9893 62.8697 cv
53.7198 62.8697 54.3121 62.2769 54.3121 61.5464 cv
f
60.0005 61.5464 mo
60.0005 61.5464 li
60.0005 60.8165 59.4082 60.2237 58.6778 60.2237 cv
57.9478 60.2237 57.355 60.8165 57.355 61.5464 cv
57.355 62.2769 57.9478 62.8697 58.6778 62.8697 cv
59.4082 62.8697 60.0005 62.2769 60.0005 61.5464 cv
f
65.6895 61.5464 mo
65.6895 61.5464 li
65.6895 60.8165 65.0967 60.2237 64.3663 60.2237 cv
63.6358 60.2237 63.0435 60.8165 63.0435 61.5464 cv
63.0435 62.2769 63.6358 62.8697 64.3663 62.8697 cv
65.0967 62.8697 65.6895 62.2769 65.6895 61.5464 cv
f
71.3775 61.5464 mo
71.3775 61.5464 li
71.3775 60.8165 70.7847 60.2237 70.0547 60.2237 cv
69.3248 60.2237 68.732 60.8165 68.732 61.5464 cv
68.732 62.2769 69.3248 62.8697 70.0547 62.8697 cv
70.7847 62.8697 71.3775 62.2769 71.3775 61.5464 cv
f
51.4683 55.8584 mo
51.4683 55.8584 li
51.4683 55.128 50.8755 54.5352 50.1451 54.5352 cv
49.4151 54.5352 48.8223 55.128 48.8223 55.8584 cv
48.8223 56.5884 49.4151 57.1812 50.1451 57.1812 cv
50.8755 57.1812 51.4683 56.5884 51.4683 55.8584 cv
f
57.1563 55.8584 mo
57.1563 55.8584 li
57.1563 55.128 56.564 54.5352 55.8335 54.5352 cv
55.1036 54.5352 54.5108 55.128 54.5108 55.8584 cv
54.5108 56.5884 55.1036 57.1812 55.8335 57.1812 cv
56.564 57.1812 57.1563 56.5884 57.1563 55.8584 cv
f
62.8453 55.8584 mo
62.8453 55.8584 li
62.8453 55.128 62.2525 54.5352 61.522 54.5352 cv
60.7916 54.5352 60.1993 55.128 60.1993 55.8584 cv
60.1993 56.5884 60.7916 57.1812 61.522 57.1812 cv
62.2525 57.1812 62.8453 56.5884 62.8453 55.8584 cv
f
68.5332 55.8584 mo
68.5332 55.8584 li
68.5332 55.128 67.9405 54.5352 67.2105 54.5352 cv
66.4805 54.5352 65.8877 55.128 65.8877 55.8584 cv
65.8877 56.5884 66.4805 57.1812 67.2105 57.1812 cv
67.9405 57.1812 68.5332 56.5884 68.5332 55.8584 cv
f
48.6241 50.1695 mo
48.6241 50.1695 li
48.6241 49.4395 48.0313 48.8467 47.3008 48.8467 cv
46.5704 48.8467 45.9781 49.4395 45.9781 50.1695 cv
45.9781 50.9 46.5704 51.4927 47.3008 51.4927 cv
48.0313 51.4927 48.6241 50.9 48.6241 50.1695 cv
f
54.3121 50.1695 mo
54.3121 50.1695 li
54.3121 49.4395 53.7198 48.8467 52.9893 48.8467 cv
52.2593 48.8467 51.6666 49.4395 51.6666 50.1695 cv
51.6666 50.9 52.2593 51.4927 52.9893 51.4927 cv
53.7198 51.4927 54.3121 50.9 54.3121 50.1695 cv
f
60.0005 50.1695 mo
60.0005 50.1695 li
60.0005 49.4395 59.4082 48.8467 58.6778 48.8467 cv
57.9478 48.8467 57.355 49.4395 57.355 50.1695 cv
57.355 50.9 57.9478 51.4927 58.6778 51.4927 cv
59.4082 51.4927 60.0005 50.9 60.0005 50.1695 cv
f
65.6895 50.1695 mo
65.6895 50.1695 li
65.6895 49.4395 65.0967 48.8467 64.3663 48.8467 cv
63.6358 48.8467 63.0435 49.4395 63.0435 50.1695 cv
63.0435 50.9 63.6358 51.4927 64.3663 51.4927 cv
65.0967 51.4927 65.6895 50.9 65.6895 50.1695 cv
f
71.3775 50.1695 mo
71.3775 50.1695 li
71.3775 49.4395 70.7847 48.8467 70.0547 48.8467 cv
69.3248 48.8467 68.732 49.4395 68.732 50.1695 cv
68.732 50.9 69.3248 51.4927 70.0547 51.4927 cv
70.7847 51.4927 71.3775 50.9 71.3775 50.1695 cv
f
51.4683 44.4815 mo
51.4683 44.4815 li
51.4683 43.751 50.8755 43.1583 50.1451 43.1583 cv
49.4151 43.1583 48.8223 43.751 48.8223 44.4815 cv
48.8223 45.2115 49.4151 45.8042 50.1451 45.8042 cv
50.8755 45.8042 51.4683 45.2115 51.4683 44.4815 cv
f
57.1563 44.4815 mo
57.1563 44.4815 li
57.1563 43.751 56.564 43.1583 55.8335 43.1583 cv
55.1036 43.1583 54.5108 43.751 54.5108 44.4815 cv
54.5108 45.2115 55.1036 45.8042 55.8335 45.8042 cv
56.564 45.8042 57.1563 45.2115 57.1563 44.4815 cv
f
62.8453 44.4815 mo
62.8453 44.4815 li
62.8453 43.751 62.2525 43.1583 61.522 43.1583 cv
60.7916 43.1583 60.1993 43.751 60.1993 44.4815 cv
60.1993 45.2115 60.7916 45.8042 61.522 45.8042 cv
62.2525 45.8042 62.8453 45.2115 62.8453 44.4815 cv
f
68.5332 44.4815 mo
68.5332 44.4815 li
68.5332 43.751 67.9405 43.1583 67.2105 43.1583 cv
66.4805 43.1583 65.8877 43.751 65.8877 44.4815 cv
65.8877 45.2115 66.4805 45.8042 67.2105 45.8042 cv
67.9405 45.8042 68.5332 45.2115 68.5332 44.4815 cv
f
48.6241 38.793 mo
48.6241 38.793 li
48.6241 38.0626 48.0313 37.4698 47.3008 37.4698 cv
46.5704 37.4698 45.9781 38.0626 45.9781 38.793 cv
45.9781 39.523 46.5704 40.1158 47.3008 40.1158 cv
48.0313 40.1158 48.6241 39.523 48.6241 38.793 cv
f
54.3121 38.793 mo
54.3121 38.793 li
54.3121 38.0626 53.7198 37.4698 52.9893 37.4698 cv
52.2593 37.4698 51.6666 38.0626 51.6666 38.793 cv
51.6666 39.523 52.2593 40.1158 52.9893 40.1158 cv
53.7198 40.1158 54.3121 39.523 54.3121 38.793 cv
f
60.0005 38.793 mo
60.0005 38.793 li
60.0005 38.0626 59.4082 37.4698 58.6778 37.4698 cv
57.9478 37.4698 57.355 38.0626 57.355 38.793 cv
57.355 39.523 57.9478 40.1158 58.6778 40.1158 cv
59.4082 40.1158 60.0005 39.523 60.0005 38.793 cv
f
65.6895 38.793 mo
65.6895 38.793 li
65.6895 38.0626 65.0967 37.4698 64.3663 37.4698 cv
63.6358 37.4698 63.0435 38.0626 63.0435 38.793 cv
63.0435 39.523 63.6358 40.1158 64.3663 40.1158 cv
65.0967 40.1158 65.6895 39.523 65.6895 38.793 cv
f
71.3775 38.793 mo
71.3775 38.793 li
71.3775 38.0626 70.7847 37.4698 70.0547 37.4698 cv
69.3248 37.4698 68.732 38.0626 68.732 38.793 cv
68.732 39.523 69.3248 40.1158 70.0547 40.1158 cv
70.7847 40.1158 71.3775 39.523 71.3775 38.793 cv
f
51.4683 33.1045 mo
51.4683 33.1045 li
51.4683 32.3741 50.8755 31.7813 50.1451 31.7813 cv
49.4151 31.7813 48.8223 32.3741 48.8223 33.1045 cv
48.8223 33.8345 49.4151 34.4273 50.1451 34.4273 cv
50.8755 34.4273 51.4683 33.8345 51.4683 33.1045 cv
f
57.1563 33.1045 mo
57.1563 33.1045 li
57.1563 32.3741 56.564 31.7813 55.8335 31.7813 cv
55.1036 31.7813 54.5108 32.3741 54.5108 33.1045 cv
54.5108 33.8345 55.1036 34.4273 55.8335 34.4273 cv
56.564 34.4273 57.1563 33.8345 57.1563 33.1045 cv
f
62.8453 33.1045 mo
62.8453 33.1045 li
62.8453 32.3741 62.2525 31.7813 61.522 31.7813 cv
60.7916 31.7813 60.1993 32.3741 60.1993 33.1045 cv
60.1993 33.8345 60.7916 34.4273 61.522 34.4273 cv
62.2525 34.4273 62.8453 33.8345 62.8453 33.1045 cv
f
68.5332 33.1045 mo
68.5332 33.1045 li
68.5332 32.3741 67.9405 31.7813 67.2105 31.7813 cv
66.4805 31.7813 65.8877 32.3741 65.8877 33.1045 cv
65.8877 33.8345 66.4805 34.4273 67.2105 34.4273 cv
67.9405 34.4273 68.5332 33.8345 68.5332 33.1045 cv
f
grestore % PSGState
69.0274 73.4771 mo
69.0274 49.4034 64.1426 29.8653 58.1246 29.8653 cv
52.106 29.8653 47.2217 49.4034 47.2217 73.4771 cv
47.2217 97.5508 52.106 117.089 58.1246 117.089 cv
64.1426 117.089 69.0274 97.5508 69.0274 73.4771 cv
@
gsave % PSGState
297.954 117.089 mo
297.954 68.9415 291.44 29.8653 283.416 29.8653 cv
275.391 29.8653 268.878 68.9415 268.878 117.089 cv
268.878 165.237 275.391 204.314 283.416 204.314 cv
291.44 204.314 297.954 165.237 297.954 117.089 cv
clp
270.299 205.516 mo
270.299 205.516 li
270.299 204.786 269.707 204.193 268.976 204.193 cv
268.246 204.193 267.653 204.786 267.653 205.516 cv
267.653 206.247 268.246 206.839 268.976 206.839 cv
269.707 206.839 270.299 206.247 270.299 205.516 cv
f
275.988 205.516 mo
275.988 205.516 li
275.988 204.786 275.395 204.193 274.665 204.193 cv
273.934 204.193 273.341 204.786 273.341 205.516 cv
273.341 206.247 273.934 206.839 274.665 206.839 cv
275.395 206.839 275.988 206.247 275.988 205.516 cv
f
281.675 205.516 mo
281.675 205.516 li
281.675 204.786 281.083 204.193 280.353 204.193 cv
279.623 204.193 279.03 204.786 279.03 205.516 cv
279.03 206.247 279.623 206.839 280.353 206.839 cv
281.083 206.839 281.675 206.247 281.675 205.516 cv
f
287.364 205.516 mo
287.364 205.516 li
287.364 204.786 286.771 204.193 286.042 204.193 cv
285.311 204.193 284.718 204.786 284.718 205.516 cv
284.718 206.247 285.311 206.839 286.042 206.839 cv
286.771 206.839 287.364 206.247 287.364 205.516 cv
f
293.053 205.516 mo
293.053 205.516 li
293.053 204.786 292.46 204.193 291.73 204.193 cv
291 204.193 290.407 204.786 290.407 205.516 cv
290.407 206.247 291 206.839 291.73 206.839 cv
292.46 206.839 293.053 206.247 293.053 205.516 cv
f
298.742 205.516 mo
298.742 205.516 li
298.742 204.786 298.149 204.193 297.418 204.193 cv
296.688 204.193 296.095 204.786 296.095 205.516 cv
296.095 206.247 296.688 206.839 297.418 206.839 cv
298.149 206.839 298.742 206.247 298.742 205.516 cv
f
273.143 199.829 mo
273.143 199.829 li
273.143 199.098 272.55 198.505 271.82 198.505 cv
271.09 198.505 270.498 199.098 270.498 199.829 cv
270.498 200.558 271.09 201.151 271.82 201.151 cv
272.55 201.151 273.143 200.558 273.143 199.829 cv
f
278.832 199.829 mo
278.832 199.829 li
278.832 199.098 278.239 198.505 277.509 198.505 cv
276.779 198.505 276.186 199.098 276.186 199.829 cv
276.186 200.558 276.779 201.151 277.509 201.151 cv
278.239 201.151 278.832 200.558 278.832 199.829 cv
f
284.52 199.829 mo
284.52 199.829 li
284.52 199.098 283.927 198.505 283.197 198.505 cv
282.467 198.505 281.875 199.098 281.875 199.829 cv
281.875 200.558 282.467 201.151 283.197 201.151 cv
283.927 201.151 284.52 200.558 284.52 199.829 cv
f
290.208 199.829 mo
290.208 199.829 li
290.208 199.098 289.616 198.505 288.885 198.505 cv
288.155 198.505 287.562 199.098 287.562 199.829 cv
287.562 200.558 288.155 201.151 288.885 201.151 cv
289.616 201.151 290.208 200.558 290.208 199.829 cv
f
295.897 199.829 mo
295.897 199.829 li
295.897 199.098 295.304 198.505 294.574 198.505 cv
293.843 198.505 293.251 199.098 293.251 199.829 cv
293.251 200.558 293.843 201.151 294.574 201.151 cv
295.304 201.151 295.897 200.558 295.897 199.829 cv
f
270.299 194.139 mo
270.299 194.139 li
270.299 193.41 269.707 192.817 268.976 192.817 cv
268.246 192.817 267.653 193.41 267.653 194.139 cv
267.653 194.87 268.246 195.462 268.976 195.462 cv
269.707 195.462 270.299 194.87 270.299 194.139 cv
f
275.988 194.139 mo
275.988 194.139 li
275.988 193.41 275.395 192.817 274.665 192.817 cv
273.934 192.817 273.341 193.41 273.341 194.139 cv
273.341 194.87 273.934 195.462 274.665 195.462 cv
275.395 195.462 275.988 194.87 275.988 194.139 cv
f
281.675 194.139 mo
281.675 194.139 li
281.675 193.41 281.083 192.817 280.353 192.817 cv
279.623 192.817 279.03 193.41 279.03 194.139 cv
279.03 194.87 279.623 195.462 280.353 195.462 cv
281.083 195.462 281.675 194.87 281.675 194.139 cv
f
287.364 194.139 mo
287.364 194.139 li
287.364 193.41 286.771 192.817 286.042 192.817 cv
285.311 192.817 284.718 193.41 284.718 194.139 cv
284.718 194.87 285.311 195.462 286.042 195.462 cv
286.771 195.462 287.364 194.87 287.364 194.139 cv
f
293.053 194.139 mo
293.053 194.139 li
293.053 193.41 292.46 192.817 291.73 192.817 cv
291 192.817 290.407 193.41 290.407 194.139 cv
290.407 194.87 291 195.462 291.73 195.462 cv
292.46 195.462 293.053 194.87 293.053 194.139 cv
f
298.742 194.139 mo
298.742 194.139 li
298.742 193.41 298.149 192.817 297.418 192.817 cv
296.688 192.817 296.095 193.41 296.095 194.139 cv
296.095 194.87 296.688 195.462 297.418 195.462 cv
298.149 195.462 298.742 194.87 298.742 194.139 cv
f
273.143 188.451 mo
273.143 188.451 li
273.143 187.721 272.55 187.128 271.82 187.128 cv
271.09 187.128 270.498 187.721 270.498 188.451 cv
270.498 189.181 271.09 189.774 271.82 189.774 cv
272.55 189.774 273.143 189.181 273.143 188.451 cv
f
278.832 188.451 mo
278.832 188.451 li
278.832 187.721 278.239 187.128 277.509 187.128 cv
276.779 187.128 276.186 187.721 276.186 188.451 cv
276.186 189.181 276.779 189.774 277.509 189.774 cv
278.239 189.774 278.832 189.181 278.832 188.451 cv
f
284.52 188.451 mo
284.52 188.451 li
284.52 187.721 283.927 187.128 283.197 187.128 cv
282.467 187.128 281.875 187.721 281.875 188.451 cv
281.875 189.181 282.467 189.774 283.197 189.774 cv
283.927 189.774 284.52 189.181 284.52 188.451 cv
f
290.208 188.451 mo
290.208 188.451 li
290.208 187.721 289.616 187.128 288.885 187.128 cv
288.155 187.128 287.562 187.721 287.562 188.451 cv
287.562 189.181 288.155 189.774 288.885 189.774 cv
289.616 189.774 290.208 189.181 290.208 188.451 cv
f
295.897 188.451 mo
295.897 188.451 li
295.897 187.721 295.304 187.128 294.574 187.128 cv
293.843 187.128 293.251 187.721 293.251 188.451 cv
293.251 189.181 293.843 189.774 294.574 189.774 cv
295.304 189.774 295.897 189.181 295.897 188.451 cv
f
270.299 182.762 mo
270.299 182.762 li
270.299 182.032 269.707 181.44 268.976 181.44 cv
268.246 181.44 267.653 182.032 267.653 182.762 cv
267.653 183.493 268.246 184.085 268.976 184.085 cv
269.707 184.085 270.299 183.493 270.299 182.762 cv
f
275.988 182.762 mo
275.988 182.762 li
275.988 182.032 275.395 181.44 274.665 181.44 cv
273.934 181.44 273.341 182.032 273.341 182.762 cv
273.341 183.493 273.934 184.085 274.665 184.085 cv
275.395 184.085 275.988 183.493 275.988 182.762 cv
f
281.675 182.762 mo
281.675 182.762 li
281.675 182.032 281.083 181.44 280.353 181.44 cv
279.623 181.44 279.03 182.032 279.03 182.762 cv
279.03 183.493 279.623 184.085 280.353 184.085 cv
281.083 184.085 281.675 183.493 281.675 182.762 cv
f
287.364 182.762 mo
287.364 182.762 li
287.364 182.032 286.771 181.44 286.042 181.44 cv
285.311 181.44 284.718 182.032 284.718 182.762 cv
284.718 183.493 285.311 184.085 286.042 184.085 cv
286.771 184.085 287.364 183.493 287.364 182.762 cv
f
293.053 182.762 mo
293.053 182.762 li
293.053 182.032 292.46 181.44 291.73 181.44 cv
291 181.44 290.407 182.032 290.407 182.762 cv
290.407 183.493 291 184.085 291.73 184.085 cv
292.46 184.085 293.053 183.493 293.053 182.762 cv
f
298.742 182.762 mo
298.742 182.762 li
298.742 182.032 298.149 181.44 297.418 181.44 cv
296.688 181.44 296.095 182.032 296.095 182.762 cv
296.095 183.493 296.688 184.085 297.418 184.085 cv
298.149 184.085 298.742 183.493 298.742 182.762 cv
f
273.143 177.074 mo
273.143 177.074 li
273.143 176.343 272.55 175.751 271.82 175.751 cv
271.09 175.751 270.498 176.343 270.498 177.074 cv
270.498 177.804 271.09 178.397 271.82 178.397 cv
272.55 178.397 273.143 177.804 273.143 177.074 cv
f
278.832 177.074 mo
278.832 177.074 li
278.832 176.343 278.239 175.751 277.509 175.751 cv
276.779 175.751 276.186 176.343 276.186 177.074 cv
276.186 177.804 276.779 178.397 277.509 178.397 cv
278.239 178.397 278.832 177.804 278.832 177.074 cv
f
284.52 177.074 mo
284.52 177.074 li
284.52 176.343 283.927 175.751 283.197 175.751 cv
282.467 175.751 281.875 176.343 281.875 177.074 cv
281.875 177.804 282.467 178.397 283.197 178.397 cv
283.927 178.397 284.52 177.804 284.52 177.074 cv
f
290.208 177.074 mo
290.208 177.074 li
290.208 176.343 289.616 175.751 288.885 175.751 cv
288.155 175.751 287.562 176.343 287.562 177.074 cv
287.562 177.804 288.155 178.397 288.885 178.397 cv
289.616 178.397 290.208 177.804 290.208 177.074 cv
f
295.897 177.074 mo
295.897 177.074 li
295.897 176.343 295.304 175.751 294.574 175.751 cv
293.843 175.751 293.251 176.343 293.251 177.074 cv
293.251 177.804 293.843 178.397 294.574 178.397 cv
295.304 178.397 295.897 177.804 295.897 177.074 cv
f
270.299 171.386 mo
270.299 171.386 li
270.299 170.656 269.707 170.063 268.976 170.063 cv
268.246 170.063 267.653 170.656 267.653 171.386 cv
267.653 172.116 268.246 172.708 268.976 172.708 cv
269.707 172.708 270.299 172.116 270.299 171.386 cv
f
275.988 171.386 mo
275.988 171.386 li
275.988 170.656 275.395 170.063 274.665 170.063 cv
273.934 170.063 273.341 170.656 273.341 171.386 cv
273.341 172.116 273.934 172.708 274.665 172.708 cv
275.395 172.708 275.988 172.116 275.988 171.386 cv
f
281.675 171.386 mo
281.675 171.386 li
281.675 170.656 281.083 170.063 280.353 170.063 cv
279.623 170.063 279.03 170.656 279.03 171.386 cv
279.03 172.116 279.623 172.708 280.353 172.708 cv
281.083 172.708 281.675 172.116 281.675 171.386 cv
f
287.364 171.386 mo
287.364 171.386 li
287.364 170.656 286.771 170.063 286.042 170.063 cv
285.311 170.063 284.718 170.656 284.718 171.386 cv
284.718 172.116 285.311 172.708 286.042 172.708 cv
286.771 172.708 287.364 172.116 287.364 171.386 cv
f
293.053 171.386 mo
293.053 171.386 li
293.053 170.656 292.46 170.063 291.73 170.063 cv
291 170.063 290.407 170.656 290.407 171.386 cv
290.407 172.116 291 172.708 291.73 172.708 cv
292.46 172.708 293.053 172.116 293.053 171.386 cv
f
298.742 171.386 mo
298.742 171.386 li
298.742 170.656 298.149 170.063 297.418 170.063 cv
296.688 170.063 296.095 170.656 296.095 171.386 cv
296.095 172.116 296.688 172.708 297.418 172.708 cv
298.149 172.708 298.742 172.116 298.742 171.386 cv
f
273.143 165.698 mo
273.143 165.698 li
273.143 164.967 272.55 164.375 271.82 164.375 cv
271.09 164.375 270.498 164.967 270.498 165.698 cv
270.498 166.427 271.09 167.02 271.82 167.02 cv
272.55 167.02 273.143 166.427 273.143 165.698 cv
f
278.832 165.698 mo
278.832 165.698 li
278.832 164.967 278.239 164.375 277.509 164.375 cv
276.779 164.375 276.186 164.967 276.186 165.698 cv
276.186 166.427 276.779 167.02 277.509 167.02 cv
278.239 167.02 278.832 166.427 278.832 165.698 cv
f
284.52 165.698 mo
284.52 165.698 li
284.52 164.967 283.927 164.375 283.197 164.375 cv
282.467 164.375 281.875 164.967 281.875 165.698 cv
281.875 166.427 282.467 167.02 283.197 167.02 cv
283.927 167.02 284.52 166.427 284.52 165.698 cv
f
290.208 165.698 mo
290.208 165.698 li
290.208 164.967 289.616 164.375 288.885 164.375 cv
288.155 164.375 287.562 164.967 287.562 165.698 cv
287.562 166.427 288.155 167.02 288.885 167.02 cv
289.616 167.02 290.208 166.427 290.208 165.698 cv
f
295.897 165.698 mo
295.897 165.698 li
295.897 164.967 295.304 164.375 294.574 164.375 cv
293.843 164.375 293.251 164.967 293.251 165.698 cv
293.251 166.427 293.843 167.02 294.574 167.02 cv
295.304 167.02 295.897 166.427 295.897 165.698 cv
f
270.299 160.009 mo
270.299 160.009 li
270.299 159.279 269.707 158.686 268.976 158.686 cv
268.246 158.686 267.653 159.279 267.653 160.009 cv
267.653 160.739 268.246 161.332 268.976 161.332 cv
269.707 161.332 270.299 160.739 270.299 160.009 cv
f
275.988 160.009 mo
275.988 160.009 li
275.988 159.279 275.395 158.686 274.665 158.686 cv
273.934 158.686 273.341 159.279 273.341 160.009 cv
273.341 160.739 273.934 161.332 274.665 161.332 cv
275.395 161.332 275.988 160.739 275.988 160.009 cv
f
281.675 160.009 mo
281.675 160.009 li
281.675 159.279 281.083 158.686 280.353 158.686 cv
279.623 158.686 279.03 159.279 279.03 160.009 cv
279.03 160.739 279.623 161.332 280.353 161.332 cv
281.083 161.332 281.675 160.739 281.675 160.009 cv
f
287.364 160.009 mo
287.364 160.009 li
287.364 159.279 286.771 158.686 286.042 158.686 cv
285.311 158.686 284.718 159.279 284.718 160.009 cv
284.718 160.739 285.311 161.332 286.042 161.332 cv
286.771 161.332 287.364 160.739 287.364 160.009 cv
f
293.053 160.009 mo
293.053 160.009 li
293.053 159.279 292.46 158.686 291.73 158.686 cv
291 158.686 290.407 159.279 290.407 160.009 cv
290.407 160.739 291 161.332 291.73 161.332 cv
292.46 161.332 293.053 160.739 293.053 160.009 cv
f
298.742 160.009 mo
298.742 160.009 li
298.742 159.279 298.149 158.686 297.418 158.686 cv
296.688 158.686 296.095 159.279 296.095 160.009 cv
296.095 160.739 296.688 161.332 297.418 161.332 cv
298.149 161.332 298.742 160.739 298.742 160.009 cv
f
273.143 154.32 mo
273.143 154.32 li
273.143 153.59 272.55 152.998 271.82 152.998 cv
271.09 152.998 270.498 153.59 270.498 154.32 cv
270.498 155.05 271.09 155.644 271.82 155.644 cv
272.55 155.644 273.143 155.05 273.143 154.32 cv
f
278.832 154.32 mo
278.832 154.32 li
278.832 153.59 278.239 152.998 277.509 152.998 cv
276.779 152.998 276.186 153.59 276.186 154.32 cv
276.186 155.05 276.779 155.644 277.509 155.644 cv
278.239 155.644 278.832 155.05 278.832 154.32 cv
f
284.52 154.32 mo
284.52 154.32 li
284.52 153.59 283.927 152.998 283.197 152.998 cv
282.466 152.998 281.875 153.59 281.875 154.32 cv
281.875 155.05 282.466 155.644 283.197 155.644 cv
283.927 155.644 284.52 155.05 284.52 154.32 cv
f
290.208 154.32 mo
290.208 154.32 li
290.208 153.59 289.616 152.998 288.885 152.998 cv
288.155 152.998 287.562 153.59 287.562 154.32 cv
287.562 155.05 288.155 155.644 288.885 155.644 cv
289.616 155.644 290.208 155.05 290.208 154.32 cv
f
295.897 154.32 mo
295.897 154.32 li
295.897 153.59 295.304 152.998 294.574 152.998 cv
293.843 152.998 293.251 153.59 293.251 154.32 cv
293.251 155.05 293.843 155.644 294.574 155.644 cv
295.304 155.644 295.897 155.05 295.897 154.32 cv
f
270.299 148.632 mo
270.299 148.632 li
270.299 147.902 269.707 147.308 268.976 147.308 cv
268.246 147.308 267.653 147.902 267.653 148.632 cv
267.653 149.363 268.246 149.955 268.976 149.955 cv
269.707 149.955 270.299 149.363 270.299 148.632 cv
f
275.988 148.632 mo
275.988 148.632 li
275.988 147.902 275.395 147.308 274.665 147.308 cv
273.934 147.308 273.341 147.902 273.341 148.632 cv
273.341 149.363 273.934 149.955 274.665 149.955 cv
275.395 149.955 275.988 149.363 275.988 148.632 cv
f
281.675 148.632 mo
281.675 148.632 li
281.675 147.902 281.083 147.308 280.353 147.308 cv
279.623 147.308 279.03 147.902 279.03 148.632 cv
279.03 149.363 279.623 149.955 280.353 149.955 cv
281.083 149.955 281.675 149.363 281.675 148.632 cv
f
287.364 148.632 mo
287.364 148.632 li
287.364 147.902 286.771 147.308 286.042 147.308 cv
285.311 147.308 284.718 147.902 284.718 148.632 cv
284.718 149.363 285.311 149.955 286.042 149.955 cv
286.771 149.955 287.364 149.363 287.364 148.632 cv
f
293.053 148.632 mo
293.053 148.632 li
293.053 147.902 292.46 147.308 291.73 147.308 cv
291 147.308 290.407 147.902 290.407 148.632 cv
290.407 149.363 291 149.955 291.73 149.955 cv
292.46 149.955 293.053 149.363 293.053 148.632 cv
f
298.742 148.632 mo
298.742 148.632 li
298.742 147.902 298.149 147.308 297.418 147.308 cv
296.688 147.308 296.095 147.902 296.095 148.632 cv
296.095 149.363 296.688 149.955 297.418 149.955 cv
298.149 149.955 298.742 149.363 298.742 148.632 cv
f
273.143 142.943 mo
273.143 142.943 li
273.143 142.212 272.55 141.621 271.82 141.621 cv
271.09 141.621 270.498 142.212 270.498 142.943 cv
270.498 143.673 271.09 144.266 271.82 144.266 cv
272.55 144.266 273.143 143.673 273.143 142.943 cv
f
278.832 142.943 mo
278.832 142.943 li
278.832 142.212 278.239 141.621 277.509 141.621 cv
276.779 141.621 276.186 142.212 276.186 142.943 cv
276.186 143.673 276.779 144.266 277.509 144.266 cv
278.239 144.266 278.832 143.673 278.832 142.943 cv
f
284.52 142.943 mo
284.52 142.943 li
284.52 142.212 283.927 141.621 283.197 141.621 cv
282.466 141.621 281.875 142.212 281.875 142.943 cv
281.875 143.673 282.466 144.266 283.197 144.266 cv
283.927 144.266 284.52 143.673 284.52 142.943 cv
f
290.208 142.943 mo
290.208 142.943 li
290.208 142.212 289.616 141.621 288.885 141.621 cv
288.155 141.621 287.562 142.212 287.562 142.943 cv
287.562 143.673 288.155 144.266 288.885 144.266 cv
289.616 144.266 290.208 143.673 290.208 142.943 cv
f
295.897 142.943 mo
295.897 142.943 li
295.897 142.212 295.304 141.621 294.574 141.621 cv
293.843 141.621 293.251 142.212 293.251 142.943 cv
293.251 143.673 293.843 144.266 294.574 144.266 cv
295.304 144.266 295.897 143.673 295.897 142.943 cv
f
270.299 137.255 mo
270.299 137.255 li
270.299 136.525 269.707 135.932 268.976 135.932 cv
268.246 135.932 267.653 136.525 267.653 137.255 cv
267.653 137.985 268.246 138.578 268.976 138.578 cv
269.707 138.578 270.299 137.985 270.299 137.255 cv
f
275.988 137.255 mo
275.988 137.255 li
275.988 136.525 275.395 135.932 274.665 135.932 cv
273.934 135.932 273.341 136.525 273.341 137.255 cv
273.341 137.985 273.934 138.578 274.665 138.578 cv
275.395 138.578 275.988 137.985 275.988 137.255 cv
f
281.675 137.255 mo
281.675 137.255 li
281.675 136.525 281.083 135.932 280.353 135.932 cv
279.623 135.932 279.03 136.525 279.03 137.255 cv
279.03 137.985 279.623 138.578 280.353 138.578 cv
281.083 138.578 281.675 137.985 281.675 137.255 cv
f
287.364 137.255 mo
287.364 137.255 li
287.364 136.525 286.771 135.932 286.042 135.932 cv
285.311 135.932 284.718 136.525 284.718 137.255 cv
284.718 137.985 285.311 138.578 286.042 138.578 cv
286.771 138.578 287.364 137.985 287.364 137.255 cv
f
293.053 137.255 mo
293.053 137.255 li
293.053 136.525 292.46 135.932 291.73 135.932 cv
291 135.932 290.407 136.525 290.407 137.255 cv
290.407 137.985 291 138.578 291.73 138.578 cv
292.46 138.578 293.053 137.985 293.053 137.255 cv
f
298.742 137.255 mo
298.742 137.255 li
298.742 136.525 298.149 135.932 297.418 135.932 cv
296.688 135.932 296.095 136.525 296.095 137.255 cv
296.095 137.985 296.688 138.578 297.418 138.578 cv
298.149 138.578 298.742 137.985 298.742 137.255 cv
f
273.143 131.566 mo
273.143 131.566 li
273.143 130.836 272.55 130.244 271.82 130.244 cv
271.09 130.244 270.498 130.836 270.498 131.566 cv
270.498 132.296 271.09 132.89 271.82 132.89 cv
272.55 132.89 273.143 132.296 273.143 131.566 cv
f
278.832 131.566 mo
278.832 131.566 li
278.832 130.836 278.239 130.244 277.509 130.244 cv
276.779 130.244 276.186 130.836 276.186 131.566 cv
276.186 132.296 276.779 132.89 277.509 132.89 cv
278.239 132.89 278.832 132.296 278.832 131.566 cv
f
284.52 131.566 mo
284.52 131.566 li
284.52 130.836 283.927 130.244 283.197 130.244 cv
282.466 130.244 281.875 130.836 281.875 131.566 cv
281.875 132.296 282.466 132.89 283.197 132.89 cv
283.927 132.89 284.52 132.296 284.52 131.566 cv
f
290.208 131.566 mo
290.208 131.566 li
290.208 130.836 289.616 130.244 288.885 130.244 cv
288.155 130.244 287.562 130.836 287.562 131.566 cv
287.562 132.296 288.155 132.89 288.885 132.89 cv
289.616 132.89 290.208 132.296 290.208 131.566 cv
f
295.897 131.566 mo
295.897 131.566 li
295.897 130.836 295.304 130.244 294.574 130.244 cv
293.843 130.244 293.251 130.836 293.251 131.566 cv
293.251 132.296 293.843 132.89 294.574 132.89 cv
295.304 132.89 295.897 132.296 295.897 131.566 cv
f
270.299 125.878 mo
270.299 125.878 li
270.299 125.148 269.707 124.555 268.976 124.555 cv
268.246 124.555 267.653 125.148 267.653 125.878 cv
267.653 126.609 268.246 127.201 268.976 127.201 cv
269.707 127.201 270.299 126.609 270.299 125.878 cv
f
275.988 125.878 mo
275.988 125.878 li
275.988 125.148 275.395 124.555 274.665 124.555 cv
273.934 124.555 273.341 125.148 273.341 125.878 cv
273.341 126.609 273.934 127.201 274.665 127.201 cv
275.395 127.201 275.988 126.609 275.988 125.878 cv
f
281.675 125.878 mo
281.675 125.878 li
281.675 125.148 281.083 124.555 280.353 124.555 cv
279.623 124.555 279.03 125.148 279.03 125.878 cv
279.03 126.609 279.623 127.201 280.353 127.201 cv
281.083 127.201 281.675 126.609 281.675 125.878 cv
f
287.364 125.878 mo
287.364 125.878 li
287.364 125.148 286.771 124.555 286.042 124.555 cv
285.311 124.555 284.718 125.148 284.718 125.878 cv
284.718 126.609 285.311 127.201 286.042 127.201 cv
286.771 127.201 287.364 126.609 287.364 125.878 cv
f
293.053 125.878 mo
293.053 125.878 li
293.053 125.148 292.46 124.555 291.73 124.555 cv
291 124.555 290.407 125.148 290.407 125.878 cv
290.407 126.609 291 127.201 291.73 127.201 cv
292.46 127.201 293.053 126.609 293.053 125.878 cv
f
298.742 125.878 mo
298.742 125.878 li
298.742 125.148 298.149 124.555 297.418 124.555 cv
296.688 124.555 296.095 125.148 296.095 125.878 cv
296.095 126.609 296.688 127.201 297.418 127.201 cv
298.149 127.201 298.742 126.609 298.742 125.878 cv
f
273.143 120.189 mo
273.143 120.189 li
273.143 119.459 272.55 118.867 271.82 118.867 cv
271.09 118.867 270.498 119.459 270.498 120.189 cv
270.498 120.919 271.09 121.513 271.82 121.513 cv
272.55 121.513 273.143 120.919 273.143 120.189 cv
f
278.832 120.189 mo
278.832 120.189 li
278.832 119.459 278.239 118.867 277.509 118.867 cv
276.779 118.867 276.186 119.459 276.186 120.189 cv
276.186 120.919 276.779 121.513 277.509 121.513 cv
278.239 121.513 278.832 120.919 278.832 120.189 cv
f
284.52 120.189 mo
284.52 120.189 li
284.52 119.459 283.927 118.867 283.197 118.867 cv
282.466 118.867 281.875 119.459 281.875 120.189 cv
281.875 120.919 282.466 121.513 283.197 121.513 cv
283.927 121.513 284.52 120.919 284.52 120.189 cv
f
290.208 120.189 mo
290.208 120.189 li
290.208 119.459 289.616 118.867 288.885 118.867 cv
288.155 118.867 287.562 119.459 287.562 120.189 cv
287.562 120.919 288.155 121.513 288.885 121.513 cv
289.616 121.513 290.208 120.919 290.208 120.189 cv
f
295.897 120.189 mo
295.897 120.189 li
295.897 119.459 295.304 118.867 294.574 118.867 cv
293.843 118.867 293.251 119.459 293.251 120.189 cv
293.251 120.919 293.843 121.513 294.574 121.513 cv
295.304 121.513 295.897 120.919 295.897 120.189 cv
f
270.299 114.501 mo
270.299 114.501 li
270.299 113.771 269.707 113.178 268.976 113.178 cv
268.246 113.178 267.653 113.771 267.653 114.501 cv
267.653 115.232 268.246 115.824 268.976 115.824 cv
269.707 115.824 270.299 115.232 270.299 114.501 cv
f
275.988 114.501 mo
275.988 114.501 li
275.988 113.771 275.395 113.178 274.665 113.178 cv
273.934 113.178 273.341 113.771 273.341 114.501 cv
273.341 115.232 273.934 115.824 274.665 115.824 cv
275.395 115.824 275.988 115.232 275.988 114.501 cv
f
281.675 114.501 mo
281.675 114.501 li
281.675 113.771 281.083 113.178 280.353 113.178 cv
279.623 113.178 279.03 113.771 279.03 114.501 cv
279.03 115.232 279.623 115.824 280.353 115.824 cv
281.083 115.824 281.675 115.232 281.675 114.501 cv
f
287.364 114.501 mo
287.364 114.501 li
287.364 113.771 286.771 113.178 286.042 113.178 cv
285.311 113.178 284.718 113.771 284.718 114.501 cv
284.718 115.232 285.311 115.824 286.042 115.824 cv
286.771 115.824 287.364 115.232 287.364 114.501 cv
f
293.053 114.501 mo
293.053 114.501 li
293.053 113.771 292.46 113.178 291.73 113.178 cv
291 113.178 290.407 113.771 290.407 114.501 cv
290.407 115.232 291 115.824 291.73 115.824 cv
292.46 115.824 293.053 115.232 293.053 114.501 cv
f
298.742 114.501 mo
298.742 114.501 li
298.742 113.771 298.149 113.178 297.418 113.178 cv
296.688 113.178 296.095 113.771 296.095 114.501 cv
296.095 115.232 296.688 115.824 297.418 115.824 cv
298.149 115.824 298.742 115.232 298.742 114.501 cv
f
273.143 108.813 mo
273.143 108.813 li
273.143 108.083 272.55 107.49 271.82 107.49 cv
271.09 107.49 270.498 108.083 270.498 108.813 cv
270.498 109.542 271.09 110.136 271.82 110.136 cv
272.55 110.136 273.143 109.542 273.143 108.813 cv
f
278.832 108.813 mo
278.832 108.813 li
278.832 108.083 278.239 107.49 277.509 107.49 cv
276.779 107.49 276.186 108.083 276.186 108.813 cv
276.186 109.542 276.779 110.136 277.509 110.136 cv
278.239 110.136 278.832 109.542 278.832 108.813 cv
f
284.52 108.813 mo
284.52 108.813 li
284.52 108.083 283.927 107.49 283.197 107.49 cv
282.466 107.49 281.875 108.083 281.875 108.813 cv
281.875 109.542 282.466 110.136 283.197 110.136 cv
283.927 110.136 284.52 109.542 284.52 108.813 cv
f
290.208 108.813 mo
290.208 108.813 li
290.208 108.083 289.616 107.49 288.885 107.49 cv
288.155 107.49 287.562 108.083 287.562 108.813 cv
287.562 109.542 288.155 110.136 288.885 110.136 cv
289.616 110.136 290.208 109.542 290.208 108.813 cv
f
295.897 108.813 mo
295.897 108.813 li
295.897 108.083 295.304 107.49 294.574 107.49 cv
293.843 107.49 293.251 108.083 293.251 108.813 cv
293.251 109.542 293.843 110.136 294.574 110.136 cv
295.304 110.136 295.897 109.542 295.897 108.813 cv
f
270.299 103.125 mo
270.299 103.125 li
270.299 102.394 269.707 101.801 268.976 101.801 cv
268.246 101.801 267.653 102.394 267.653 103.125 cv
267.653 103.855 268.246 104.447 268.976 104.447 cv
269.707 104.447 270.299 103.855 270.299 103.125 cv
f
275.988 103.125 mo
275.988 103.125 li
275.988 102.394 275.395 101.801 274.665 101.801 cv
273.934 101.801 273.341 102.394 273.341 103.125 cv
273.341 103.855 273.934 104.447 274.665 104.447 cv
275.395 104.447 275.988 103.855 275.988 103.125 cv
f
281.675 103.125 mo
281.675 103.125 li
281.675 102.394 281.083 101.801 280.353 101.801 cv
279.623 101.801 279.03 102.394 279.03 103.125 cv
279.03 103.855 279.623 104.447 280.353 104.447 cv
281.083 104.447 281.675 103.855 281.675 103.125 cv
f
287.364 103.125 mo
287.364 103.125 li
287.364 102.394 286.771 101.801 286.042 101.801 cv
285.311 101.801 284.718 102.394 284.718 103.125 cv
284.718 103.855 285.311 104.447 286.042 104.447 cv
286.771 104.447 287.364 103.855 287.364 103.125 cv
f
293.053 103.125 mo
293.053 103.125 li
293.053 102.394 292.46 101.801 291.73 101.801 cv
291 101.801 290.407 102.394 290.407 103.125 cv
290.407 103.855 291 104.447 291.73 104.447 cv
292.46 104.447 293.053 103.855 293.053 103.125 cv
f
298.742 103.125 mo
298.742 103.125 li
298.742 102.394 298.149 101.801 297.418 101.801 cv
296.688 101.801 296.095 102.394 296.095 103.125 cv
296.095 103.855 296.688 104.447 297.418 104.447 cv
298.149 104.447 298.742 103.855 298.742 103.125 cv
f
273.143 97.4356 mo
273.143 97.4356 li
273.143 96.7051 272.55 96.1124 271.82 96.1124 cv
271.09 96.1124 270.498 96.7051 270.498 97.4356 cv
270.498 98.1651 271.09 98.7588 271.82 98.7588 cv
272.55 98.7588 273.143 98.1651 273.143 97.4356 cv
f
278.832 97.4356 mo
278.832 97.4356 li
278.832 96.7051 278.239 96.1124 277.509 96.1124 cv
276.779 96.1124 276.186 96.7051 276.186 97.4356 cv
276.186 98.1651 276.779 98.7588 277.509 98.7588 cv
278.239 98.7588 278.832 98.1651 278.832 97.4356 cv
f
284.52 97.4356 mo
284.52 97.4356 li
284.52 96.7051 283.927 96.1124 283.197 96.1124 cv
282.466 96.1124 281.875 96.7051 281.875 97.4356 cv
281.875 98.1651 282.466 98.7588 283.197 98.7588 cv
283.927 98.7588 284.52 98.1651 284.52 97.4356 cv
f
290.208 97.4356 mo
290.208 97.4356 li
290.208 96.7051 289.616 96.1124 288.885 96.1124 cv
288.155 96.1124 287.562 96.7051 287.562 97.4356 cv
287.562 98.1651 288.155 98.7588 288.885 98.7588 cv
289.616 98.7588 290.208 98.1651 290.208 97.4356 cv
f
295.897 97.4356 mo
295.897 97.4356 li
295.897 96.7051 295.304 96.1124 294.574 96.1124 cv
293.843 96.1124 293.251 96.7051 293.251 97.4356 cv
293.251 98.1651 293.843 98.7588 294.574 98.7588 cv
295.304 98.7588 295.897 98.1651 295.897 97.4356 cv
f
270.299 91.7471 mo
270.299 91.7471 li
270.299 91.0166 269.707 90.4249 268.976 90.4249 cv
268.246 90.4249 267.653 91.0166 267.653 91.7471 cv
267.653 92.4776 268.246 93.0694 268.976 93.0694 cv
269.707 93.0694 270.299 92.4776 270.299 91.7471 cv
f
275.988 91.7471 mo
275.988 91.7471 li
275.988 91.0166 275.395 90.4249 274.665 90.4249 cv
273.934 90.4249 273.341 91.0166 273.341 91.7471 cv
273.341 92.4776 273.934 93.0694 274.665 93.0694 cv
275.395 93.0694 275.988 92.4776 275.988 91.7471 cv
f
281.675 91.7471 mo
281.675 91.7471 li
281.675 91.0166 281.083 90.4249 280.353 90.4249 cv
279.623 90.4249 279.03 91.0166 279.03 91.7471 cv
279.03 92.4776 279.623 93.0694 280.353 93.0694 cv
281.083 93.0694 281.675 92.4776 281.675 91.7471 cv
f
287.364 91.7471 mo
287.364 91.7471 li
287.364 91.0166 286.771 90.4249 286.042 90.4249 cv
285.311 90.4249 284.718 91.0166 284.718 91.7471 cv
284.718 92.4776 285.311 93.0694 286.042 93.0694 cv
286.771 93.0694 287.364 92.4776 287.364 91.7471 cv
f
293.053 91.7471 mo
293.053 91.7471 li
293.053 91.0166 292.46 90.4249 291.73 90.4249 cv
291 90.4249 290.407 91.0166 290.407 91.7471 cv
290.407 92.4776 291 93.0694 291.73 93.0694 cv
292.46 93.0694 293.053 92.4776 293.053 91.7471 cv
f
298.742 91.7471 mo
298.742 91.7471 li
298.742 91.0166 298.149 90.4249 297.418 90.4249 cv
296.688 90.4249 296.095 91.0166 296.095 91.7471 cv
296.095 92.4776 296.688 93.0694 297.418 93.0694 cv
298.149 93.0694 298.742 92.4776 298.742 91.7471 cv
f
273.143 86.0586 mo
273.143 86.0586 li
273.143 85.3282 272.55 84.7354 271.82 84.7354 cv
271.09 84.7354 270.498 85.3282 270.498 86.0586 cv
270.498 86.7891 271.09 87.3814 271.82 87.3814 cv
272.55 87.3814 273.143 86.7891 273.143 86.0586 cv
f
278.832 86.0586 mo
278.832 86.0586 li
278.832 85.3282 278.239 84.7354 277.509 84.7354 cv
276.779 84.7354 276.186 85.3282 276.186 86.0586 cv
276.186 86.7891 276.779 87.3814 277.509 87.3814 cv
278.239 87.3814 278.832 86.7891 278.832 86.0586 cv
f
284.52 86.0586 mo
284.52 86.0586 li
284.52 85.3282 283.927 84.7354 283.197 84.7354 cv
282.466 84.7354 281.875 85.3282 281.875 86.0586 cv
281.875 86.7891 282.466 87.3814 283.197 87.3814 cv
283.927 87.3814 284.52 86.7891 284.52 86.0586 cv
f
290.208 86.0586 mo
290.208 86.0586 li
290.208 85.3282 289.616 84.7354 288.885 84.7354 cv
288.155 84.7354 287.562 85.3282 287.562 86.0586 cv
287.562 86.7891 288.155 87.3814 288.885 87.3814 cv
289.616 87.3814 290.208 86.7891 290.208 86.0586 cv
f
295.897 86.0586 mo
295.897 86.0586 li
295.897 85.3282 295.304 84.7354 294.574 84.7354 cv
293.843 84.7354 293.251 85.3282 293.251 86.0586 cv
293.251 86.7891 293.843 87.3814 294.574 87.3814 cv
295.304 87.3814 295.897 86.7891 295.897 86.0586 cv
f
270.299 80.3702 mo
270.299 80.3702 li
270.299 79.6402 269.707 79.0474 268.976 79.0474 cv
268.246 79.0474 267.653 79.6402 267.653 80.3702 cv
267.653 81.1002 268.246 81.6929 268.976 81.6929 cv
269.707 81.6929 270.299 81.1002 270.299 80.3702 cv
f
275.988 80.3702 mo
275.988 80.3702 li
275.988 79.6402 275.395 79.0474 274.665 79.0474 cv
273.934 79.0474 273.341 79.6402 273.341 80.3702 cv
273.341 81.1002 273.934 81.6929 274.665 81.6929 cv
275.395 81.6929 275.988 81.1002 275.988 80.3702 cv
f
281.675 80.3702 mo
281.675 80.3702 li
281.675 79.6402 281.083 79.0474 280.353 79.0474 cv
279.623 79.0474 279.03 79.6402 279.03 80.3702 cv
279.03 81.1002 279.623 81.6929 280.353 81.6929 cv
281.083 81.6929 281.675 81.1002 281.675 80.3702 cv
f
287.364 80.3702 mo
287.364 80.3702 li
287.364 79.6402 286.771 79.0474 286.042 79.0474 cv
285.311 79.0474 284.718 79.6402 284.718 80.3702 cv
284.718 81.1002 285.311 81.6929 286.042 81.6929 cv
286.771 81.6929 287.364 81.1002 287.364 80.3702 cv
f
293.053 80.3702 mo
293.053 80.3702 li
293.053 79.6402 292.46 79.0474 291.73 79.0474 cv
291 79.0474 290.407 79.6402 290.407 80.3702 cv
290.407 81.1002 291 81.6929 291.73 81.6929 cv
292.46 81.6929 293.053 81.1002 293.053 80.3702 cv
f
298.742 80.3702 mo
298.742 80.3702 li
298.742 79.6402 298.149 79.0474 297.418 79.0474 cv
296.688 79.0474 296.095 79.6402 296.095 80.3702 cv
296.095 81.1002 296.688 81.6929 297.418 81.6929 cv
298.149 81.6929 298.742 81.1002 298.742 80.3702 cv
f
273.143 74.6817 mo
273.143 74.6817 li
273.143 73.9512 272.55 73.3584 271.82 73.3584 cv
271.09 73.3584 270.498 73.9512 270.498 74.6817 cv
270.498 75.4122 271.09 76.0044 271.82 76.0044 cv
272.55 76.0044 273.143 75.4122 273.143 74.6817 cv
f
278.832 74.6817 mo
278.832 74.6817 li
278.832 73.9512 278.239 73.3584 277.509 73.3584 cv
276.779 73.3584 276.186 73.9512 276.186 74.6817 cv
276.186 75.4122 276.779 76.0044 277.509 76.0044 cv
278.239 76.0044 278.832 75.4122 278.832 74.6817 cv
f
284.52 74.6817 mo
284.52 74.6817 li
284.52 73.9512 283.927 73.3584 283.197 73.3584 cv
282.466 73.3584 281.875 73.9512 281.875 74.6817 cv
281.875 75.4122 282.466 76.0044 283.197 76.0044 cv
283.927 76.0044 284.52 75.4122 284.52 74.6817 cv
f
290.208 74.6817 mo
290.208 74.6817 li
290.208 73.9512 289.616 73.3584 288.885 73.3584 cv
288.155 73.3584 287.562 73.9512 287.562 74.6817 cv
287.562 75.4122 288.155 76.0044 288.885 76.0044 cv
289.616 76.0044 290.208 75.4122 290.208 74.6817 cv
f
295.897 74.6817 mo
295.897 74.6817 li
295.897 73.9512 295.304 73.3584 294.574 73.3584 cv
293.843 73.3584 293.251 73.9512 293.251 74.6817 cv
293.251 75.4122 293.843 76.0044 294.574 76.0044 cv
295.304 76.0044 295.897 75.4122 295.897 74.6817 cv
f
270.299 68.9932 mo
270.299 68.9932 li
270.299 68.2627 269.707 67.67 268.976 67.67 cv
268.246 67.67 267.653 68.2627 267.653 68.9932 cv
267.653 69.7232 268.246 70.316 268.976 70.316 cv
269.707 70.316 270.299 69.7232 270.299 68.9932 cv
f
275.988 68.9932 mo
275.988 68.9932 li
275.988 68.2627 275.395 67.67 274.665 67.67 cv
273.934 67.67 273.341 68.2627 273.341 68.9932 cv
273.341 69.7232 273.934 70.316 274.665 70.316 cv
275.395 70.316 275.988 69.7232 275.988 68.9932 cv
f
281.675 68.9932 mo
281.675 68.9932 li
281.675 68.2627 281.083 67.67 280.353 67.67 cv
279.623 67.67 279.03 68.2627 279.03 68.9932 cv
279.03 69.7232 279.623 70.316 280.353 70.316 cv
281.083 70.316 281.675 69.7232 281.675 68.9932 cv
f
287.364 68.9932 mo
287.364 68.9932 li
287.364 68.2627 286.771 67.67 286.042 67.67 cv
285.311 67.67 284.718 68.2627 284.718 68.9932 cv
284.718 69.7232 285.311 70.316 286.042 70.316 cv
286.771 70.316 287.364 69.7232 287.364 68.9932 cv
f
293.053 68.9932 mo
293.053 68.9932 li
293.053 68.2627 292.46 67.67 291.73 67.67 cv
291 67.67 290.407 68.2627 290.407 68.9932 cv
290.407 69.7232 291 70.316 291.73 70.316 cv
292.46 70.316 293.053 69.7232 293.053 68.9932 cv
f
298.742 68.9932 mo
298.742 68.9932 li
298.742 68.2627 298.149 67.67 297.418 67.67 cv
296.688 67.67 296.095 68.2627 296.095 68.9932 cv
296.095 69.7232 296.688 70.316 297.418 70.316 cv
298.149 70.316 298.742 69.7232 298.742 68.9932 cv
f
273.143 63.3047 mo
273.143 63.3047 li
273.143 62.5748 272.55 61.982 271.82 61.982 cv
271.09 61.982 270.498 62.5748 270.498 63.3047 cv
270.498 64.0347 271.09 64.6275 271.82 64.6275 cv
272.55 64.6275 273.143 64.0347 273.143 63.3047 cv
f
278.832 63.3047 mo
278.832 63.3047 li
278.832 62.5748 278.239 61.982 277.509 61.982 cv
276.779 61.982 276.186 62.5748 276.186 63.3047 cv
276.186 64.0347 276.779 64.6275 277.509 64.6275 cv
278.239 64.6275 278.832 64.0347 278.832 63.3047 cv
f
284.52 63.3047 mo
284.52 63.3047 li
284.52 62.5748 283.927 61.982 283.197 61.982 cv
282.466 61.982 281.875 62.5748 281.875 63.3047 cv
281.875 64.0347 282.466 64.6275 283.197 64.6275 cv
283.927 64.6275 284.52 64.0347 284.52 63.3047 cv
f
290.208 63.3047 mo
290.208 63.3047 li
290.208 62.5748 289.616 61.982 288.885 61.982 cv
288.155 61.982 287.562 62.5748 287.562 63.3047 cv
287.562 64.0347 288.155 64.6275 288.885 64.6275 cv
289.616 64.6275 290.208 64.0347 290.208 63.3047 cv
f
295.897 63.3047 mo
295.897 63.3047 li
295.897 62.5748 295.304 61.982 294.574 61.982 cv
293.843 61.982 293.251 62.5748 293.251 63.3047 cv
293.251 64.0347 293.843 64.6275 294.574 64.6275 cv
295.304 64.6275 295.897 64.0347 295.897 63.3047 cv
f
270.299 57.6163 mo
270.299 57.6163 li
270.299 56.8858 269.707 56.2935 268.976 56.2935 cv
268.246 56.2935 267.653 56.8858 267.653 57.6163 cv
267.653 58.3467 268.246 58.9395 268.976 58.9395 cv
269.707 58.9395 270.299 58.3467 270.299 57.6163 cv
f
275.988 57.6163 mo
275.988 57.6163 li
275.988 56.8858 275.395 56.2935 274.665 56.2935 cv
273.934 56.2935 273.341 56.8858 273.341 57.6163 cv
273.341 58.3467 273.934 58.9395 274.665 58.9395 cv
275.395 58.9395 275.988 58.3467 275.988 57.6163 cv
f
281.675 57.6163 mo
281.675 57.6163 li
281.675 56.8858 281.083 56.2935 280.353 56.2935 cv
279.623 56.2935 279.03 56.8858 279.03 57.6163 cv
279.03 58.3467 279.623 58.9395 280.353 58.9395 cv
281.083 58.9395 281.675 58.3467 281.675 57.6163 cv
f
287.364 57.6163 mo
287.364 57.6163 li
287.364 56.8858 286.771 56.2935 286.042 56.2935 cv
285.311 56.2935 284.718 56.8858 284.718 57.6163 cv
284.718 58.3467 285.311 58.9395 286.042 58.9395 cv
286.771 58.9395 287.364 58.3467 287.364 57.6163 cv
f
293.053 57.6163 mo
293.053 57.6163 li
293.053 56.8858 292.46 56.2935 291.73 56.2935 cv
291 56.2935 290.407 56.8858 290.407 57.6163 cv
290.407 58.3467 291 58.9395 291.73 58.9395 cv
292.46 58.9395 293.053 58.3467 293.053 57.6163 cv
f
298.742 57.6163 mo
298.742 57.6163 li
298.742 56.8858 298.149 56.2935 297.418 56.2935 cv
296.688 56.2935 296.095 56.8858 296.095 57.6163 cv
296.095 58.3467 296.688 58.9395 297.418 58.9395 cv
298.149 58.9395 298.742 58.3467 298.742 57.6163 cv
f
273.143 51.9278 mo
273.143 51.9278 li
273.143 51.1978 272.55 50.605 271.82 50.605 cv
271.09 50.605 270.498 51.1978 270.498 51.9278 cv
270.498 52.6578 271.09 53.2505 271.82 53.2505 cv
272.55 53.2505 273.143 52.6578 273.143 51.9278 cv
f
278.832 51.9278 mo
278.832 51.9278 li
278.832 51.1978 278.239 50.605 277.509 50.605 cv
276.779 50.605 276.186 51.1978 276.186 51.9278 cv
276.186 52.6578 276.779 53.2505 277.509 53.2505 cv
278.239 53.2505 278.832 52.6578 278.832 51.9278 cv
f
284.52 51.9278 mo
284.52 51.9278 li
284.52 51.1978 283.927 50.605 283.197 50.605 cv
282.466 50.605 281.875 51.1978 281.875 51.9278 cv
281.875 52.6578 282.466 53.2505 283.197 53.2505 cv
283.927 53.2505 284.52 52.6578 284.52 51.9278 cv
f
290.208 51.9278 mo
290.208 51.9278 li
290.208 51.1978 289.616 50.605 288.885 50.605 cv
288.155 50.605 287.562 51.1978 287.562 51.9278 cv
287.562 52.6578 288.155 53.2505 288.885 53.2505 cv
289.616 53.2505 290.208 52.6578 290.208 51.9278 cv
f
295.897 51.9278 mo
295.897 51.9278 li
295.897 51.1978 295.304 50.605 294.574 50.605 cv
293.843 50.605 293.251 51.1978 293.251 51.9278 cv
293.251 52.6578 293.843 53.2505 294.574 53.2505 cv
295.304 53.2505 295.897 52.6578 295.897 51.9278 cv
f
270.299 46.2393 mo
270.299 46.2393 li
270.299 45.5088 269.707 44.9166 268.976 44.9166 cv
268.246 44.9166 267.653 45.5088 267.653 46.2393 cv
267.653 46.9698 268.246 47.5626 268.976 47.5626 cv
269.707 47.5626 270.299 46.9698 270.299 46.2393 cv
f
275.988 46.2393 mo
275.988 46.2393 li
275.988 45.5088 275.395 44.9166 274.665 44.9166 cv
273.934 44.9166 273.341 45.5088 273.341 46.2393 cv
273.341 46.9698 273.934 47.5626 274.665 47.5626 cv
275.395 47.5626 275.988 46.9698 275.988 46.2393 cv
f
281.675 46.2393 mo
281.675 46.2393 li
281.675 45.5088 281.083 44.9166 280.353 44.9166 cv
279.623 44.9166 279.03 45.5088 279.03 46.2393 cv
279.03 46.9698 279.623 47.5626 280.353 47.5626 cv
281.083 47.5626 281.675 46.9698 281.675 46.2393 cv
f
287.364 46.2393 mo
287.364 46.2393 li
287.364 45.5088 286.771 44.9166 286.042 44.9166 cv
285.311 44.9166 284.718 45.5088 284.718 46.2393 cv
284.718 46.9698 285.311 47.5626 286.042 47.5626 cv
286.771 47.5626 287.364 46.9698 287.364 46.2393 cv
f
293.053 46.2393 mo
293.053 46.2393 li
293.053 45.5088 292.46 44.9166 291.73 44.9166 cv
291 44.9166 290.407 45.5088 290.407 46.2393 cv
290.407 46.9698 291 47.5626 291.73 47.5626 cv
292.46 47.5626 293.053 46.9698 293.053 46.2393 cv
f
298.742 46.2393 mo
298.742 46.2393 li
298.742 45.5088 298.149 44.9166 297.418 44.9166 cv
296.688 44.9166 296.095 45.5088 296.095 46.2393 cv
296.095 46.9698 296.688 47.5626 297.418 47.5626 cv
298.149 47.5626 298.742 46.9698 298.742 46.2393 cv
f
273.143 40.5508 mo
273.143 40.5508 li
273.143 39.8204 272.55 39.2281 271.82 39.2281 cv
271.09 39.2281 270.498 39.8204 270.498 40.5508 cv
270.498 41.2813 271.09 41.8736 271.82 41.8736 cv
272.55 41.8736 273.143 41.2813 273.143 40.5508 cv
f
278.832 40.5508 mo
278.832 40.5508 li
278.832 39.8204 278.239 39.2281 277.509 39.2281 cv
276.779 39.2281 276.186 39.8204 276.186 40.5508 cv
276.186 41.2813 276.779 41.8736 277.509 41.8736 cv
278.239 41.8736 278.832 41.2813 278.832 40.5508 cv
f
284.52 40.5508 mo
284.52 40.5508 li
284.52 39.8204 283.927 39.2281 283.197 39.2281 cv
282.466 39.2281 281.875 39.8204 281.875 40.5508 cv
281.875 41.2813 282.466 41.8736 283.197 41.8736 cv
283.927 41.8736 284.52 41.2813 284.52 40.5508 cv
f
290.208 40.5508 mo
290.208 40.5508 li
290.208 39.8204 289.616 39.2281 288.885 39.2281 cv
288.155 39.2281 287.562 39.8204 287.562 40.5508 cv
287.562 41.2813 288.155 41.8736 288.885 41.8736 cv
289.616 41.8736 290.208 41.2813 290.208 40.5508 cv
f
295.897 40.5508 mo
295.897 40.5508 li
295.897 39.8204 295.304 39.2281 294.574 39.2281 cv
293.843 39.2281 293.251 39.8204 293.251 40.5508 cv
293.251 41.2813 293.843 41.8736 294.574 41.8736 cv
295.304 41.8736 295.897 41.2813 295.897 40.5508 cv
f
270.299 34.8624 mo
270.299 34.8624 li
270.299 34.1324 269.707 33.5396 268.976 33.5396 cv
268.246 33.5396 267.653 34.1324 267.653 34.8624 cv
267.653 35.5928 268.246 36.1856 268.976 36.1856 cv
269.707 36.1856 270.299 35.5928 270.299 34.8624 cv
f
275.988 34.8624 mo
275.988 34.8624 li
275.988 34.1324 275.395 33.5396 274.665 33.5396 cv
273.934 33.5396 273.341 34.1324 273.341 34.8624 cv
273.341 35.5928 273.934 36.1856 274.665 36.1856 cv
275.395 36.1856 275.988 35.5928 275.988 34.8624 cv
f
281.675 34.8624 mo
281.675 34.8624 li
281.675 34.1324 281.083 33.5396 280.353 33.5396 cv
279.623 33.5396 279.03 34.1324 279.03 34.8624 cv
279.03 35.5928 279.623 36.1856 280.353 36.1856 cv
281.083 36.1856 281.675 35.5928 281.675 34.8624 cv
f
287.364 34.8624 mo
287.364 34.8624 li
287.364 34.1324 286.771 33.5396 286.042 33.5396 cv
285.311 33.5396 284.718 34.1324 284.718 34.8624 cv
284.718 35.5928 285.311 36.1856 286.042 36.1856 cv
286.771 36.1856 287.364 35.5928 287.364 34.8624 cv
f
293.053 34.8624 mo
293.053 34.8624 li
293.053 34.1324 292.46 33.5396 291.73 33.5396 cv
291 33.5396 290.407 34.1324 290.407 34.8624 cv
290.407 35.5928 291 36.1856 291.73 36.1856 cv
292.46 36.1856 293.053 35.5928 293.053 34.8624 cv
f
298.742 34.8624 mo
298.742 34.8624 li
298.742 34.1324 298.149 33.5396 297.418 33.5396 cv
296.688 33.5396 296.095 34.1324 296.095 34.8624 cv
296.095 35.5928 296.688 36.1856 297.418 36.1856 cv
298.149 36.1856 298.742 35.5928 298.742 34.8624 cv
f
273.143 29.1739 mo
273.143 29.1739 li
273.143 28.4439 272.55 27.8511 271.82 27.8511 cv
271.09 27.8511 270.498 28.4439 270.498 29.1739 cv
270.498 29.9043 271.09 30.4971 271.82 30.4971 cv
272.55 30.4971 273.143 29.9043 273.143 29.1739 cv
f
278.832 29.1739 mo
278.832 29.1739 li
278.832 28.4439 278.239 27.8511 277.509 27.8511 cv
276.779 27.8511 276.186 28.4439 276.186 29.1739 cv
276.186 29.9043 276.779 30.4971 277.509 30.4971 cv
278.239 30.4971 278.832 29.9043 278.832 29.1739 cv
f
284.52 29.1739 mo
284.52 29.1739 li
284.52 28.4439 283.927 27.8511 283.197 27.8511 cv
282.466 27.8511 281.875 28.4439 281.875 29.1739 cv
281.875 29.9043 282.466 30.4971 283.197 30.4971 cv
283.927 30.4971 284.52 29.9043 284.52 29.1739 cv
f
290.208 29.1739 mo
290.208 29.1739 li
290.208 28.4439 289.616 27.8511 288.885 27.8511 cv
288.155 27.8511 287.562 28.4439 287.562 29.1739 cv
287.562 29.9043 288.155 30.4971 288.885 30.4971 cv
289.616 30.4971 290.208 29.9043 290.208 29.1739 cv
f
295.897 29.1739 mo
295.897 29.1739 li
295.897 28.4439 295.304 27.8511 294.574 27.8511 cv
293.843 27.8511 293.251 28.4439 293.251 29.1739 cv
293.251 29.9043 293.843 30.4971 294.574 30.4971 cv
295.304 30.4971 295.897 29.9043 295.897 29.1739 cv
f
grestore % PSGState
297.954 117.089 mo
297.954 68.9415 291.44 29.8653 283.416 29.8653 cv
275.391 29.8653 268.878 68.9415 268.878 117.089 cv
268.878 165.237 275.391 204.314 283.416 204.314 cv
291.44 204.314 297.954 165.237 297.954 117.089 cv
@
133.428 102.552 mo
133.428 102.552 li
133.428 101.107 132.256 99.9346 130.812 99.9346 cv
129.367 99.9346 128.195 101.107 128.195 102.552 cv
128.195 103.997 129.367 105.169 130.812 105.169 cv
132.256 105.169 133.428 103.997 133.428 102.552 cv
f
206.115 160.702 mo
206.115 160.702 li
206.115 159.257 204.942 158.085 203.498 158.085 cv
202.053 158.085 200.881 159.257 200.881 160.702 cv
200.881 162.146 202.053 163.318 203.498 163.318 cv
204.942 163.318 206.115 162.146 206.115 160.702 cv
f
/1 
[/DeviceGray] add_csa
0 gry
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic /Times-Italic findfont def
/KIIMLO+Times-Italic*1 
[
100{/.notdef}repeat /d 155{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
87.1987 38.5874 mov
(d) sh
%%IncludeResource: font Times-Roman
/JIIMLO+Times-Roman /Times-Roman findfont def
/JIIMLO+Times-Roman*1 
[
32{/.notdef}repeat /space 78{/.notdef}repeat /o 2{/.notdef}repeat /r 141{/.notdef}repeat
] JIIMLO+Times-Roman nfnt
JIIMLO+Times-Roman*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
97.0381 38.5874 mov
( or ) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*2 
[
115{/.notdef}repeat /s 140{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
120.293 38.5874 mov
(s) sh
1.9656 lw
96.48 79.7334 mo
88.4029 79.7334 li
0 0 0 1 cmyk
@
0 gry
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*2 
[
98{/.notdef}repeat /b 16{/.notdef}repeat /s 140{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
87.1987 95.7373 mov
(b) sh
255.82 81.4844 mo
247.847 81.4844 li
0 0 0 1 cmyk
@
0 gry
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*2 
[
98{/.notdef}repeat /b 14{/.notdef}repeat /q /.notdef /s 140{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
246.109 94.7373 mov
(q) sh
255.82 120.357 mo
247.847 120.357 li
0 0 0 1 cmyk
@
0 gry
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*2 
[
86{/.notdef}repeat /V 11{/.notdef}repeat /b 14{/.notdef}repeat /q /.notdef /s 
140{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
246.109 132.534 mov
(q) sh
%%IncludeResource: font Symbol
/IIIMLO+Symbol /Symbol findfont def
/IIIMLO+Symbol*1 
[
162{/.notdef}repeat /minute 93{/.notdef}repeat
] IIIMLO+Symbol nfnt
IIIMLO+Symbol*1  [20.7593 0 -0 -20.7593 0 0 ]mfnt sfnt
256.931 132.36 mov
(\242) sh
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
246.109 198.683 mov
(q) sh
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
119.314 90.9219 mov
(V) sh
%%IncludeResource: font Symbol
/IIIMLO+Symbol*2 
[
42{/.notdef}repeat /asteriskmath 213{/.notdef}repeat
] IIIMLO+Symbol nfnt
IIIMLO+Symbol*2  [12.2113 0 -0 -12.2113 0 0 ]mfnt sfnt
131.048 81.1992 mov
(*) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
127.048 93.4111 mov
(qb) sh
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
190.016 178.306 mov
(V) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
197.75 181.795 mov
(qq) sh
IIIMLO+Symbol*1  [14.5315 0 -0 -14.5315 0 0 ]mfnt sfnt
211.499 182.374 mov
(\242) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*3 
[
48{/.notdef}repeat /zero 17{/.notdef}repeat /B 189{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*3  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
21.3408 58.9395 mov
(B) sh
KIIMLO+Times-Italic*3  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
36.1602 48.0366 mov
(0) sh
%%IncludeResource: font Times-Roman
/JIIMLO+Times-Roman*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 55{/.notdef}repeat /a 13{/.notdef}repeat 
/o 2{/.notdef}repeat /r 141{/.notdef}repeat
] JIIMLO+Times-Roman nfnt
JIIMLO+Times-Roman*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
21.9385 77.6289 mov
(or) sh
KIIMLO+Times-Italic*3  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
21.272 103.101 mov
(B) sh
KIIMLO+Times-Italic*2  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
33.0913 107.462 mov
(s) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*4 
[
102{/.notdef}repeat /f 153{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*4  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
312.527 117.089 mov
(f) sh
JIIMLO+Times-Roman*1  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
72.6616 189.775 mov
(\(a\) ) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*5 
[
116{/.notdef}repeat /t 139{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*5  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
104.252 189.775 mov
(t) sh
KIIMLO+Times-Italic*4  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
109.537 194.137 mov
(f) sh
1.63801 lw
58.1241 293.048 mo
276.184 293.048 li
0 0 0 1 cmyk
@
170.512 293.048 mo
161.281 289.318 li
162.8 289.933 163.796 291.409 163.796 293.048 cv
163.796 294.688 162.8 296.164 161.281 296.778 cv
170.512 293.048 li
f
276.184 351.198 mo
58.1241 351.198 li
@
218.311 351.198 mo
227.542 354.927 li
226.022 354.313 225.027 352.838 225.027 351.198 cv
225.027 349.558 226.022 348.083 227.542 347.467 cv
218.311 351.198 li
f
276.184 380.272 mo
203.498 409.347 li
@
236.722 396.057 mo
246.681 396.09 li
245.041 396.085 243.569 395.084 242.958 393.562 cv
242.349 392.04 242.726 390.299 243.91 389.165 cv
236.722 396.057 li
f
203.498 409.347 mo
276.184 438.421 li
@
242.958 425.132 mo
235.772 418.239 li
236.956 419.374 237.333 421.114 236.723 422.636 cv
236.114 424.16 234.641 425.16 233.001 425.166 cv
242.958 425.132 li
f
167.155 351.198 mo
164.074 353.581 163.104 357.772 165.417 361.473 cv
167.729 365.173 171.922 366.139 175.414 364.414 cv
179.965 362.165 180.925 360.174 179.961 358.631 cv
178.996 357.088 176.787 357.079 172.771 360.184 cv
130.811 351.198 mo
137.813 348.999 138.059 346.813 131.936 342.629 cv
125.813 338.446 126.881 335.392 134.278 335.939 cv
141.673 336.486 142.843 334.623 139.142 328.197 cv
135.44 321.772 137.728 319.483 144.154 323.185 cv
150.58 326.887 152.442 325.716 151.896 318.321 cv
151.349 310.925 154.403 309.856 158.585 315.98 cv
162.769 322.103 164.956 321.856 167.671 314.957 cv
170.387 308.056 173.602 308.418 174.715 315.75 cv
175.827 323.082 177.904 323.808 183.344 318.77 cv
188.786 313.73 191.525 315.452 189.346 322.541 cv
187.168 329.628 188.723 331.185 195.811 329.006 cv
202.9 326.827 204.622 329.566 199.583 335.007 cv
194.544 340.448 195.27 342.525 202.602 343.637 cv
209.934 344.75 210.296 347.965 203.498 351.198 cv
@
4.914 lw
0 lc
172.771 360.184 mo
169.69 362.567 168.721 366.76 171.033 370.46 cv
0 0 0 0 cmyk
@
1.63801 lw
1 lc
172.771 360.184 mo
169.69 362.567 168.721 366.76 171.033 370.46 cv
173.345 374.161 177.54 375.126 181.031 373.4 cv
185.582 371.151 186.542 369.162 185.577 367.618 cv
184.613 366.075 182.404 366.066 178.388 369.171 cv
0 0 0 1 cmyk
@
4.914 lw
0 lc
178.388 369.171 mo
175.307 371.553 174.336 375.747 176.65 379.447 cv
0 0 0 0 cmyk
@
1.63801 lw
1 lc
178.388 369.171 mo
175.307 371.553 174.336 375.747 176.65 379.447 cv
178.962 383.147 183.156 384.112 186.647 382.387 cv
191.199 380.137 192.159 378.148 191.194 376.605 cv
190.229 375.061 188.02 375.052 184.004 378.158 cv
0 0 0 1 cmyk
@
4.914 lw
0 lc
184.004 378.158 mo
180.924 380.54 179.954 384.733 182.266 388.433 cv
0 0 0 0 cmyk
@
1.63801 lw
1 lc
184.004 378.158 mo
180.924 380.54 179.954 384.733 182.266 388.433 cv
184.58 392.133 188.773 393.098 192.264 391.374 cv
196.816 389.126 197.775 387.135 196.811 385.591 cv
195.845 384.047 193.637 384.04 189.622 387.145 cv
0 0 0 1 cmyk
@
4.914 lw
0 lc
189.622 387.145 mo
186.541 389.527 185.57 393.719 187.883 397.42 cv
0 0 0 0 cmyk
@
1.63801 lw
1 lc
189.622 387.145 mo
186.541 389.527 185.57 393.719 187.883 397.42 cv
190.196 401.121 194.389 402.084 197.881 400.361 cv
202.432 398.112 203.392 396.122 202.427 394.579 cv
201.462 393.036 199.253 393.026 195.238 396.131 cv
0 0 0 1 cmyk
@
4.914 lw
0 lc
195.238 396.131 mo
192.158 398.513 191.187 402.706 193.5 406.407 cv
0 0 0 0 cmyk
@
1.63801 lw
1 lc
195.238 396.131 mo
192.158 398.513 191.187 402.706 193.5 406.407 cv
195.813 410.106 200.006 411.072 203.498 409.347 cv
0 0 0 1 cmyk
@
gsave % PSGState
69.0274 322.123 mo
69.0274 298.049 64.1426 278.511 58.1241 278.511 cv
52.1055 278.511 47.2208 298.049 47.2208 322.123 cv
47.2208 346.197 52.1055 365.735 58.1241 365.735 cv
64.1426 365.735 69.0274 346.197 69.0274 322.123 cv
clp
51.4678 361.389 mo
51.4678 361.389 li
51.4678 360.659 50.875 360.066 50.1446 360.066 cv
49.4141 360.066 48.8223 360.659 48.8223 361.389 cv
48.8223 362.12 49.4141 362.711 50.1446 362.711 cv
50.875 362.711 51.4678 362.12 51.4678 361.389 cv
f
57.1563 361.389 mo
57.1563 361.389 li
57.1563 360.659 56.5635 360.066 55.8331 360.066 cv
55.1026 360.066 54.5108 360.659 54.5108 361.389 cv
54.5108 362.12 55.1026 362.711 55.8331 362.711 cv
56.5635 362.711 57.1563 362.12 57.1563 361.389 cv
f
62.8448 361.389 mo
62.8448 361.389 li
62.8448 360.659 62.252 360.066 61.5215 360.066 cv
60.7911 360.066 60.1993 360.659 60.1993 361.389 cv
60.1993 362.12 60.7911 362.711 61.5215 362.711 cv
62.252 362.711 62.8448 362.12 62.8448 361.389 cv
f
68.5332 361.389 mo
68.5332 361.389 li
68.5332 360.659 67.9405 360.066 67.21 360.066 cv
66.4805 360.066 65.8877 360.659 65.8877 361.389 cv
65.8877 362.12 66.4805 362.711 67.21 362.711 cv
67.9405 362.711 68.5332 362.12 68.5332 361.389 cv
f
48.6231 355.7 mo
48.6231 355.7 li
48.6231 354.97 48.0313 354.377 47.3008 354.377 cv
46.5704 354.377 45.9786 354.97 45.9786 355.7 cv
45.9786 356.43 46.5704 357.024 47.3008 357.024 cv
48.0313 357.024 48.6231 356.43 48.6231 355.7 cv
f
54.3116 355.7 mo
54.3116 355.7 li
54.3116 354.97 53.7198 354.377 52.9893 354.377 cv
52.2588 354.377 51.6661 354.97 51.6661 355.7 cv
51.6661 356.43 52.2588 357.024 52.9893 357.024 cv
53.7198 357.024 54.3116 356.43 54.3116 355.7 cv
f
60 355.7 mo
60 355.7 li
60 354.97 59.4082 354.377 58.6778 354.377 cv
57.9473 354.377 57.3545 354.97 57.3545 355.7 cv
57.3545 356.43 57.9473 357.024 58.6778 357.024 cv
59.4082 357.024 60 356.43 60 355.7 cv
f
65.6885 355.7 mo
65.6885 355.7 li
65.6885 354.97 65.0958 354.377 64.3653 354.377 cv
63.6348 354.377 63.043 354.97 63.043 355.7 cv
63.043 356.43 63.6348 357.024 64.3653 357.024 cv
65.0958 357.024 65.6885 356.43 65.6885 355.7 cv
f
71.377 355.7 mo
71.377 355.7 li
71.377 354.97 70.7842 354.377 70.0538 354.377 cv
69.3243 354.377 68.7315 354.97 68.7315 355.7 cv
68.7315 356.43 69.3243 357.024 70.0538 357.024 cv
70.7842 357.024 71.377 356.43 71.377 355.7 cv
f
51.4678 350.012 mo
51.4678 350.012 li
51.4678 349.282 50.875 348.689 50.1446 348.689 cv
49.4141 348.689 48.8223 349.282 48.8223 350.012 cv
48.8223 350.743 49.4141 351.334 50.1446 351.334 cv
50.875 351.334 51.4678 350.743 51.4678 350.012 cv
f
57.1563 350.012 mo
57.1563 350.012 li
57.1563 349.282 56.5635 348.689 55.8331 348.689 cv
55.1026 348.689 54.5108 349.282 54.5108 350.012 cv
54.5108 350.743 55.1026 351.334 55.8331 351.334 cv
56.5635 351.334 57.1563 350.743 57.1563 350.012 cv
f
62.8448 350.012 mo
62.8448 350.012 li
62.8448 349.282 62.252 348.689 61.5215 348.689 cv
60.7911 348.689 60.1993 349.282 60.1993 350.012 cv
60.1993 350.743 60.7911 351.334 61.5215 351.334 cv
62.252 351.334 62.8448 350.743 62.8448 350.012 cv
f
68.5332 350.012 mo
68.5332 350.012 li
68.5332 349.282 67.9405 348.689 67.21 348.689 cv
66.4805 348.689 65.8877 349.282 65.8877 350.012 cv
65.8877 350.743 66.4805 351.334 67.21 351.334 cv
67.9405 351.334 68.5332 350.743 68.5332 350.012 cv
f
48.6231 344.323 mo
48.6231 344.323 li
48.6231 343.593 48.0313 343 47.3008 343 cv
46.5704 343 45.9786 343.593 45.9786 344.323 cv
45.9786 345.053 46.5704 345.646 47.3008 345.646 cv
48.0313 345.646 48.6231 345.053 48.6231 344.323 cv
f
54.3116 344.323 mo
54.3116 344.323 li
54.3116 343.593 53.7198 343 52.9893 343 cv
52.2588 343 51.6661 343.593 51.6661 344.323 cv
51.6661 345.053 52.2588 345.646 52.9893 345.646 cv
53.7198 345.646 54.3116 345.053 54.3116 344.323 cv
f
60 344.323 mo
60 344.323 li
60 343.593 59.4082 343 58.6778 343 cv
57.9473 343 57.3545 343.593 57.3545 344.323 cv
57.3545 345.053 57.9473 345.646 58.6778 345.646 cv
59.4082 345.646 60 345.053 60 344.323 cv
f
65.6885 344.323 mo
65.6885 344.323 li
65.6885 343.593 65.0958 343 64.3653 343 cv
63.6348 343 63.043 343.593 63.043 344.323 cv
63.043 345.053 63.6348 345.646 64.3653 345.646 cv
65.0958 345.646 65.6885 345.053 65.6885 344.323 cv
f
71.377 344.323 mo
71.377 344.323 li
71.377 343.593 70.7842 343 70.0538 343 cv
69.3243 343 68.7315 343.593 68.7315 344.323 cv
68.7315 345.053 69.3243 345.646 70.0538 345.646 cv
70.7842 345.646 71.377 345.053 71.377 344.323 cv
f
51.4678 338.635 mo
51.4678 338.635 li
51.4678 337.905 50.875 337.312 50.1446 337.312 cv
49.4141 337.312 48.8223 337.905 48.8223 338.635 cv
48.8223 339.366 49.4141 339.958 50.1446 339.958 cv
50.875 339.958 51.4678 339.366 51.4678 338.635 cv
f
57.1563 338.635 mo
57.1563 338.635 li
57.1563 337.905 56.5635 337.312 55.8331 337.312 cv
55.1026 337.312 54.5108 337.905 54.5108 338.635 cv
54.5108 339.366 55.1026 339.958 55.8331 339.958 cv
56.5635 339.958 57.1563 339.366 57.1563 338.635 cv
f
62.8448 338.635 mo
62.8448 338.635 li
62.8448 337.905 62.252 337.312 61.5215 337.312 cv
60.7911 337.312 60.1993 337.905 60.1993 338.635 cv
60.1993 339.366 60.7911 339.958 61.5215 339.958 cv
62.252 339.958 62.8448 339.366 62.8448 338.635 cv
f
68.5332 338.635 mo
68.5332 338.635 li
68.5332 337.905 67.9405 337.312 67.21 337.312 cv
66.4805 337.312 65.8877 337.905 65.8877 338.635 cv
65.8877 339.366 66.4805 339.958 67.21 339.958 cv
67.9405 339.958 68.5332 339.366 68.5332 338.635 cv
f
48.6231 332.947 mo
48.6231 332.947 li
48.6231 332.216 48.0313 331.624 47.3008 331.624 cv
46.5704 331.624 45.9786 332.216 45.9786 332.947 cv
45.9786 333.677 46.5704 334.27 47.3008 334.27 cv
48.0313 334.27 48.6231 333.677 48.6231 332.947 cv
f
54.3116 332.947 mo
54.3116 332.947 li
54.3116 332.216 53.7198 331.624 52.9893 331.624 cv
52.2588 331.624 51.6661 332.216 51.6661 332.947 cv
51.6661 333.677 52.2588 334.27 52.9893 334.27 cv
53.7198 334.27 54.3116 333.677 54.3116 332.947 cv
f
60 332.947 mo
60 332.947 li
60 332.216 59.4082 331.624 58.6778 331.624 cv
57.9473 331.624 57.3545 332.216 57.3545 332.947 cv
57.3545 333.677 57.9473 334.27 58.6778 334.27 cv
59.4082 334.27 60 333.677 60 332.947 cv
f
65.6885 332.947 mo
65.6885 332.947 li
65.6885 332.216 65.0958 331.624 64.3653 331.624 cv
63.6348 331.624 63.043 332.216 63.043 332.947 cv
63.043 333.677 63.6348 334.27 64.3653 334.27 cv
65.0958 334.27 65.6885 333.677 65.6885 332.947 cv
f
71.377 332.947 mo
71.377 332.947 li
71.377 332.216 70.7842 331.624 70.0538 331.624 cv
69.3243 331.624 68.7315 332.216 68.7315 332.947 cv
68.7315 333.677 69.3243 334.27 70.0538 334.27 cv
70.7842 334.27 71.377 333.677 71.377 332.947 cv
f
51.4678 327.258 mo
51.4678 327.258 li
51.4678 326.528 50.875 325.935 50.1446 325.935 cv
49.4141 325.935 48.8223 326.528 48.8223 327.258 cv
48.8223 327.988 49.4141 328.581 50.1446 328.581 cv
50.875 328.581 51.4678 327.988 51.4678 327.258 cv
f
57.1563 327.258 mo
57.1563 327.258 li
57.1563 326.528 56.5635 325.935 55.8331 325.935 cv
55.1026 325.935 54.5108 326.528 54.5108 327.258 cv
54.5108 327.988 55.1026 328.581 55.8331 328.581 cv
56.5635 328.581 57.1563 327.988 57.1563 327.258 cv
f
62.8448 327.258 mo
62.8448 327.258 li
62.8448 326.528 62.252 325.935 61.5215 325.935 cv
60.7911 325.935 60.1993 326.528 60.1993 327.258 cv
60.1993 327.988 60.7911 328.581 61.5215 328.581 cv
62.252 328.581 62.8448 327.988 62.8448 327.258 cv
f
68.5332 327.258 mo
68.5332 327.258 li
68.5332 326.528 67.9405 325.935 67.21 325.935 cv
66.4805 325.935 65.8877 326.528 65.8877 327.258 cv
65.8877 327.988 66.4805 328.581 67.21 328.581 cv
67.9405 328.581 68.5332 327.988 68.5332 327.258 cv
f
48.6231 321.57 mo
48.6231 321.57 li
48.6231 320.839 48.0313 320.247 47.3008 320.247 cv
46.5704 320.247 45.9786 320.839 45.9786 321.57 cv
45.9786 322.3 46.5704 322.893 47.3008 322.893 cv
48.0313 322.893 48.6231 322.3 48.6231 321.57 cv
f
54.3116 321.57 mo
54.3116 321.57 li
54.3116 320.839 53.7198 320.247 52.9893 320.247 cv
52.2588 320.247 51.6661 320.839 51.6661 321.57 cv
51.6661 322.3 52.2588 322.893 52.9893 322.893 cv
53.7198 322.893 54.3116 322.3 54.3116 321.57 cv
f
60 321.57 mo
60 321.57 li
60 320.839 59.4082 320.247 58.6778 320.247 cv
57.9473 320.247 57.3545 320.839 57.3545 321.57 cv
57.3545 322.3 57.9473 322.893 58.6778 322.893 cv
59.4082 322.893 60 322.3 60 321.57 cv
f
65.6885 321.57 mo
65.6885 321.57 li
65.6885 320.839 65.0958 320.247 64.3653 320.247 cv
63.6348 320.247 63.043 320.839 63.043 321.57 cv
63.043 322.3 63.6348 322.893 64.3653 322.893 cv
65.0958 322.893 65.6885 322.3 65.6885 321.57 cv
f
71.377 321.57 mo
71.377 321.57 li
71.377 320.839 70.7842 320.247 70.0538 320.247 cv
69.3243 320.247 68.7315 320.839 68.7315 321.57 cv
68.7315 322.3 69.3243 322.893 70.0538 322.893 cv
70.7842 322.893 71.377 322.3 71.377 321.57 cv
f
51.4678 315.881 mo
51.4678 315.881 li
51.4678 315.151 50.875 314.559 50.1446 314.559 cv
49.4141 314.559 48.8223 315.151 48.8223 315.881 cv
48.8223 316.611 49.4141 317.204 50.1446 317.204 cv
50.875 317.204 51.4678 316.611 51.4678 315.881 cv
f
57.1563 315.881 mo
57.1563 315.881 li
57.1563 315.151 56.5635 314.559 55.8331 314.559 cv
55.1026 314.559 54.5108 315.151 54.5108 315.881 cv
54.5108 316.611 55.1026 317.204 55.8331 317.204 cv
56.5635 317.204 57.1563 316.611 57.1563 315.881 cv
f
62.8448 315.881 mo
62.8448 315.881 li
62.8448 315.151 62.252 314.559 61.5215 314.559 cv
60.7911 314.559 60.1993 315.151 60.1993 315.881 cv
60.1993 316.611 60.7911 317.204 61.5215 317.204 cv
62.252 317.204 62.8448 316.611 62.8448 315.881 cv
f
68.5332 315.881 mo
68.5332 315.881 li
68.5332 315.151 67.9405 314.559 67.21 314.559 cv
66.4805 314.559 65.8877 315.151 65.8877 315.881 cv
65.8877 316.611 66.4805 317.204 67.21 317.204 cv
67.9405 317.204 68.5332 316.611 68.5332 315.881 cv
f
48.6231 310.193 mo
48.6231 310.193 li
48.6231 309.462 48.0313 308.87 47.3008 308.87 cv
46.5704 308.87 45.9786 309.462 45.9786 310.193 cv
45.9786 310.923 46.5704 311.516 47.3008 311.516 cv
48.0313 311.516 48.6231 310.923 48.6231 310.193 cv
f
54.3116 310.193 mo
54.3116 310.193 li
54.3116 309.462 53.7198 308.87 52.9893 308.87 cv
52.2588 308.87 51.6661 309.462 51.6661 310.193 cv
51.6661 310.923 52.2588 311.516 52.9893 311.516 cv
53.7198 311.516 54.3116 310.923 54.3116 310.193 cv
f
60 310.193 mo
60 310.193 li
60 309.462 59.4082 308.87 58.6778 308.87 cv
57.9473 308.87 57.3545 309.462 57.3545 310.193 cv
57.3545 310.923 57.9473 311.516 58.6778 311.516 cv
59.4082 311.516 60 310.923 60 310.193 cv
f
65.6885 310.193 mo
65.6885 310.193 li
65.6885 309.462 65.0958 308.87 64.3653 308.87 cv
63.6348 308.87 63.043 309.462 63.043 310.193 cv
63.043 310.923 63.6348 311.516 64.3653 311.516 cv
65.0958 311.516 65.6885 310.923 65.6885 310.193 cv
f
71.377 310.193 mo
71.377 310.193 li
71.377 309.462 70.7842 308.87 70.0538 308.87 cv
69.3243 308.87 68.7315 309.462 68.7315 310.193 cv
68.7315 310.923 69.3243 311.516 70.0538 311.516 cv
70.7842 311.516 71.377 310.923 71.377 310.193 cv
f
51.4678 304.504 mo
51.4678 304.504 li
51.4678 303.774 50.875 303.182 50.1446 303.182 cv
49.4141 303.182 48.8223 303.774 48.8223 304.504 cv
48.8223 305.234 49.4141 305.827 50.1446 305.827 cv
50.875 305.827 51.4678 305.234 51.4678 304.504 cv
f
57.1563 304.504 mo
57.1563 304.504 li
57.1563 303.774 56.5635 303.182 55.8331 303.182 cv
55.1026 303.182 54.5108 303.774 54.5108 304.504 cv
54.5108 305.234 55.1026 305.827 55.8331 305.827 cv
56.5635 305.827 57.1563 305.234 57.1563 304.504 cv
f
62.8448 304.504 mo
62.8448 304.504 li
62.8448 303.774 62.252 303.182 61.5215 303.182 cv
60.7911 303.182 60.1993 303.774 60.1993 304.504 cv
60.1993 305.234 60.7911 305.827 61.5215 305.827 cv
62.252 305.827 62.8448 305.234 62.8448 304.504 cv
f
68.5332 304.504 mo
68.5332 304.504 li
68.5332 303.774 67.9405 303.182 67.21 303.182 cv
66.4805 303.182 65.8877 303.774 65.8877 304.504 cv
65.8877 305.234 66.4805 305.827 67.21 305.827 cv
67.9405 305.827 68.5332 305.234 68.5332 304.504 cv
f
48.6231 298.816 mo
48.6231 298.816 li
48.6231 298.085 48.0313 297.493 47.3008 297.493 cv
46.5704 297.493 45.9786 298.085 45.9786 298.816 cv
45.9786 299.546 46.5704 300.139 47.3008 300.139 cv
48.0313 300.139 48.6231 299.546 48.6231 298.816 cv
f
54.3116 298.816 mo
54.3116 298.816 li
54.3116 298.085 53.7198 297.493 52.9893 297.493 cv
52.2588 297.493 51.6661 298.085 51.6661 298.816 cv
51.6661 299.546 52.2588 300.139 52.9893 300.139 cv
53.7198 300.139 54.3116 299.546 54.3116 298.816 cv
f
60 298.816 mo
60 298.816 li
60 298.085 59.4082 297.493 58.6778 297.493 cv
57.9473 297.493 57.3545 298.085 57.3545 298.816 cv
57.3545 299.546 57.9473 300.139 58.6778 300.139 cv
59.4082 300.139 60 299.546 60 298.816 cv
f
65.6885 298.816 mo
65.6885 298.816 li
65.6885 298.085 65.0958 297.493 64.3653 297.493 cv
63.6348 297.493 63.043 298.085 63.043 298.816 cv
63.043 299.546 63.6348 300.139 64.3653 300.139 cv
65.0958 300.139 65.6885 299.546 65.6885 298.816 cv
f
71.377 298.816 mo
71.377 298.816 li
71.377 298.085 70.7842 297.493 70.0538 297.493 cv
69.3243 297.493 68.7315 298.085 68.7315 298.816 cv
68.7315 299.546 69.3243 300.139 70.0538 300.139 cv
70.7842 300.139 71.377 299.546 71.377 298.816 cv
f
51.4678 293.127 mo
51.4678 293.127 li
51.4678 292.397 50.875 291.804 50.1446 291.804 cv
49.4141 291.804 48.8223 292.397 48.8223 293.127 cv
48.8223 293.857 49.4141 294.45 50.1446 294.45 cv
50.875 294.45 51.4678 293.857 51.4678 293.127 cv
f
57.1563 293.127 mo
57.1563 293.127 li
57.1563 292.397 56.5635 291.804 55.8331 291.804 cv
55.1026 291.804 54.5108 292.397 54.5108 293.127 cv
54.5108 293.857 55.1026 294.45 55.8331 294.45 cv
56.5635 294.45 57.1563 293.857 57.1563 293.127 cv
f
62.8448 293.127 mo
62.8448 293.127 li
62.8448 292.397 62.252 291.804 61.5215 291.804 cv
60.7911 291.804 60.1993 292.397 60.1993 293.127 cv
60.1993 293.857 60.7911 294.45 61.5215 294.45 cv
62.252 294.45 62.8448 293.857 62.8448 293.127 cv
f
68.5332 293.127 mo
68.5332 293.127 li
68.5332 292.397 67.9405 291.804 67.21 291.804 cv
66.4805 291.804 65.8877 292.397 65.8877 293.127 cv
65.8877 293.857 66.4805 294.45 67.21 294.45 cv
67.9405 294.45 68.5332 293.857 68.5332 293.127 cv
f
48.6231 287.439 mo
48.6231 287.439 li
48.6231 286.708 48.0313 286.116 47.3008 286.116 cv
46.5704 286.116 45.9786 286.708 45.9786 287.439 cv
45.9786 288.169 46.5704 288.762 47.3008 288.762 cv
48.0313 288.762 48.6231 288.169 48.6231 287.439 cv
f
54.3116 287.439 mo
54.3116 287.439 li
54.3116 286.708 53.7198 286.116 52.9893 286.116 cv
52.2588 286.116 51.6661 286.708 51.6661 287.439 cv
51.6661 288.169 52.2588 288.762 52.9893 288.762 cv
53.7198 288.762 54.3116 288.169 54.3116 287.439 cv
f
60 287.439 mo
60 287.439 li
60 286.708 59.4082 286.116 58.6778 286.116 cv
57.9473 286.116 57.3545 286.708 57.3545 287.439 cv
57.3545 288.169 57.9473 288.762 58.6778 288.762 cv
59.4082 288.762 60 288.169 60 287.439 cv
f
65.6885 287.439 mo
65.6885 287.439 li
65.6885 286.708 65.0958 286.116 64.3653 286.116 cv
63.6348 286.116 63.043 286.708 63.043 287.439 cv
63.043 288.169 63.6348 288.762 64.3653 288.762 cv
65.0958 288.762 65.6885 288.169 65.6885 287.439 cv
f
71.377 287.439 mo
71.377 287.439 li
71.377 286.708 70.7842 286.116 70.0538 286.116 cv
69.3243 286.116 68.7315 286.708 68.7315 287.439 cv
68.7315 288.169 69.3243 288.762 70.0538 288.762 cv
70.7842 288.762 71.377 288.169 71.377 287.439 cv
f
51.4678 281.75 mo
51.4678 281.75 li
51.4678 281.02 50.875 280.427 50.1446 280.427 cv
49.4141 280.427 48.8223 281.02 48.8223 281.75 cv
48.8223 282.481 49.4141 283.073 50.1446 283.073 cv
50.875 283.073 51.4678 282.481 51.4678 281.75 cv
f
57.1563 281.75 mo
57.1563 281.75 li
57.1563 281.02 56.5635 280.427 55.8331 280.427 cv
55.1026 280.427 54.5108 281.02 54.5108 281.75 cv
54.5108 282.481 55.1026 283.073 55.8331 283.073 cv
56.5635 283.073 57.1563 282.481 57.1563 281.75 cv
f
62.8448 281.75 mo
62.8448 281.75 li
62.8448 281.02 62.252 280.427 61.5215 280.427 cv
60.7911 280.427 60.1993 281.02 60.1993 281.75 cv
60.1993 282.481 60.7911 283.073 61.5215 283.073 cv
62.252 283.073 62.8448 282.481 62.8448 281.75 cv
f
68.5332 281.75 mo
68.5332 281.75 li
68.5332 281.02 67.9405 280.427 67.21 280.427 cv
66.4805 280.427 65.8877 281.02 65.8877 281.75 cv
65.8877 282.481 66.4805 283.073 67.21 283.073 cv
67.9405 283.073 68.5332 282.481 68.5332 281.75 cv
f
grestore % PSGState
69.0274 322.123 mo
69.0274 298.049 64.1426 278.511 58.1241 278.511 cv
52.1055 278.511 47.2208 298.049 47.2208 322.123 cv
47.2208 346.197 52.1055 365.735 58.1241 365.735 cv
64.1426 365.735 69.0274 346.197 69.0274 322.123 cv
@
gsave % PSGState
297.953 365.735 mo
297.953 317.587 291.44 278.511 283.416 278.511 cv
275.391 278.511 268.878 317.587 268.878 365.735 cv
268.878 413.883 275.391 452.96 283.416 452.96 cv
291.44 452.96 297.953 413.883 297.953 365.735 cv
clp
270.298 454.163 mo
270.298 454.163 li
270.298 453.432 269.706 452.839 268.975 452.839 cv
268.246 452.839 267.653 453.432 267.653 454.163 cv
267.653 454.892 268.246 455.485 268.975 455.485 cv
269.706 455.485 270.298 454.892 270.298 454.163 cv
f
275.987 454.163 mo
275.987 454.163 li
275.987 453.432 275.394 452.839 274.664 452.839 cv
273.934 452.839 273.341 453.432 273.341 454.163 cv
273.341 454.892 273.934 455.485 274.664 455.485 cv
275.394 455.485 275.987 454.892 275.987 454.163 cv
f
281.675 454.163 mo
281.675 454.163 li
281.675 453.432 281.083 452.839 280.353 452.839 cv
279.623 452.839 279.03 453.432 279.03 454.163 cv
279.03 454.892 279.623 455.485 280.353 455.485 cv
281.083 455.485 281.675 454.892 281.675 454.163 cv
f
287.364 454.163 mo
287.364 454.163 li
287.364 453.432 286.771 452.839 286.042 452.839 cv
285.311 452.839 284.718 453.432 284.718 454.163 cv
284.718 454.892 285.311 455.485 286.042 455.485 cv
286.771 455.485 287.364 454.892 287.364 454.163 cv
f
293.052 454.163 mo
293.052 454.163 li
293.052 453.432 292.46 452.839 291.729 452.839 cv
290.999 452.839 290.407 453.432 290.407 454.163 cv
290.407 454.892 290.999 455.485 291.729 455.485 cv
292.46 455.485 293.052 454.892 293.052 454.163 cv
f
298.741 454.163 mo
298.741 454.163 li
298.741 453.432 298.148 452.839 297.418 452.839 cv
296.688 452.839 296.095 453.432 296.095 454.163 cv
296.095 454.892 296.688 455.485 297.418 455.485 cv
298.148 455.485 298.741 454.892 298.741 454.163 cv
f
273.143 448.474 mo
273.143 448.474 li
273.143 447.744 272.55 447.151 271.82 447.151 cv
271.089 447.151 270.497 447.744 270.497 448.474 cv
270.497 449.204 271.089 449.796 271.82 449.796 cv
272.55 449.796 273.143 449.204 273.143 448.474 cv
f
278.832 448.474 mo
278.832 448.474 li
278.832 447.744 278.239 447.151 277.508 447.151 cv
276.778 447.151 276.185 447.744 276.185 448.474 cv
276.185 449.204 276.778 449.796 277.508 449.796 cv
278.239 449.796 278.832 449.204 278.832 448.474 cv
f
284.519 448.474 mo
284.519 448.474 li
284.519 447.744 283.926 447.151 283.197 447.151 cv
282.466 447.151 281.874 447.744 281.874 448.474 cv
281.874 449.204 282.466 449.796 283.197 449.796 cv
283.926 449.796 284.519 449.204 284.519 448.474 cv
f
290.208 448.474 mo
290.208 448.474 li
290.208 447.744 289.616 447.151 288.885 447.151 cv
288.155 447.151 287.562 447.744 287.562 448.474 cv
287.562 449.204 288.155 449.796 288.885 449.796 cv
289.616 449.796 290.208 449.204 290.208 448.474 cv
f
295.897 448.474 mo
295.897 448.474 li
295.897 447.744 295.304 447.151 294.574 447.151 cv
293.843 447.151 293.25 447.744 293.25 448.474 cv
293.25 449.204 293.843 449.796 294.574 449.796 cv
295.304 449.796 295.897 449.204 295.897 448.474 cv
f
270.298 442.785 mo
270.298 442.785 li
270.298 442.055 269.706 441.462 268.975 441.462 cv
268.246 441.462 267.653 442.055 267.653 442.785 cv
267.653 443.515 268.246 444.108 268.975 444.108 cv
269.706 444.108 270.298 443.515 270.298 442.785 cv
f
275.987 442.785 mo
275.987 442.785 li
275.987 442.055 275.394 441.462 274.664 441.462 cv
273.934 441.462 273.341 442.055 273.341 442.785 cv
273.341 443.515 273.934 444.108 274.664 444.108 cv
275.394 444.108 275.987 443.515 275.987 442.785 cv
f
281.675 442.785 mo
281.675 442.785 li
281.675 442.055 281.083 441.462 280.353 441.462 cv
279.623 441.462 279.03 442.055 279.03 442.785 cv
279.03 443.515 279.623 444.108 280.353 444.108 cv
281.083 444.108 281.675 443.515 281.675 442.785 cv
f
287.364 442.785 mo
287.364 442.785 li
287.364 442.055 286.771 441.462 286.042 441.462 cv
285.311 441.462 284.718 442.055 284.718 442.785 cv
284.718 443.515 285.311 444.108 286.042 444.108 cv
286.771 444.108 287.364 443.515 287.364 442.785 cv
f
293.052 442.785 mo
293.052 442.785 li
293.052 442.055 292.46 441.462 291.729 441.462 cv
290.999 441.462 290.407 442.055 290.407 442.785 cv
290.407 443.515 290.999 444.108 291.729 444.108 cv
292.46 444.108 293.052 443.515 293.052 442.785 cv
f
298.741 442.785 mo
298.741 442.785 li
298.741 442.055 298.148 441.462 297.418 441.462 cv
296.688 441.462 296.095 442.055 296.095 442.785 cv
296.095 443.515 296.688 444.108 297.418 444.108 cv
298.148 444.108 298.741 443.515 298.741 442.785 cv
f
273.143 437.096 mo
273.143 437.096 li
273.143 436.367 272.55 435.774 271.82 435.774 cv
271.089 435.774 270.497 436.367 270.497 437.096 cv
270.497 437.827 271.089 438.419 271.82 438.419 cv
272.55 438.419 273.143 437.827 273.143 437.096 cv
f
278.832 437.096 mo
278.832 437.096 li
278.832 436.367 278.239 435.774 277.508 435.774 cv
276.778 435.774 276.185 436.367 276.185 437.096 cv
276.185 437.827 276.778 438.419 277.508 438.419 cv
278.239 438.419 278.832 437.827 278.832 437.096 cv
f
284.519 437.096 mo
284.519 437.096 li
284.519 436.367 283.926 435.774 283.197 435.774 cv
282.466 435.774 281.874 436.367 281.874 437.096 cv
281.874 437.827 282.466 438.419 283.197 438.419 cv
283.926 438.419 284.519 437.827 284.519 437.096 cv
f
290.208 437.096 mo
290.208 437.096 li
290.208 436.367 289.616 435.774 288.885 435.774 cv
288.155 435.774 287.562 436.367 287.562 437.096 cv
287.562 437.827 288.155 438.419 288.885 438.419 cv
289.616 438.419 290.208 437.827 290.208 437.096 cv
f
295.897 437.096 mo
295.897 437.096 li
295.897 436.367 295.304 435.774 294.574 435.774 cv
293.843 435.774 293.25 436.367 293.25 437.096 cv
293.25 437.827 293.843 438.419 294.574 438.419 cv
295.304 438.419 295.897 437.827 295.897 437.096 cv
f
270.298 431.409 mo
270.298 431.409 li
270.298 430.678 269.706 430.085 268.975 430.085 cv
268.246 430.085 267.653 430.678 267.653 431.409 cv
267.653 432.139 268.246 432.731 268.975 432.731 cv
269.706 432.731 270.298 432.139 270.298 431.409 cv
f
275.987 431.409 mo
275.987 431.409 li
275.987 430.678 275.394 430.085 274.664 430.085 cv
273.934 430.085 273.341 430.678 273.341 431.409 cv
273.341 432.139 273.934 432.731 274.664 432.731 cv
275.394 432.731 275.987 432.139 275.987 431.409 cv
f
281.675 431.409 mo
281.675 431.409 li
281.675 430.678 281.083 430.085 280.353 430.085 cv
279.623 430.085 279.03 430.678 279.03 431.409 cv
279.03 432.139 279.623 432.731 280.353 432.731 cv
281.083 432.731 281.675 432.139 281.675 431.409 cv
f
287.364 431.409 mo
287.364 431.409 li
287.364 430.678 286.771 430.085 286.042 430.085 cv
285.311 430.085 284.718 430.678 284.718 431.409 cv
284.718 432.139 285.311 432.731 286.042 432.731 cv
286.771 432.731 287.364 432.139 287.364 431.409 cv
f
293.052 431.409 mo
293.052 431.409 li
293.052 430.678 292.46 430.085 291.729 430.085 cv
290.999 430.085 290.407 430.678 290.407 431.409 cv
290.407 432.139 290.999 432.731 291.729 432.731 cv
292.46 432.731 293.052 432.139 293.052 431.409 cv
f
298.741 431.409 mo
298.741 431.409 li
298.741 430.678 298.148 430.085 297.418 430.085 cv
296.688 430.085 296.095 430.678 296.095 431.409 cv
296.095 432.139 296.688 432.731 297.418 432.731 cv
298.148 432.731 298.741 432.139 298.741 431.409 cv
f
273.143 425.72 mo
273.143 425.72 li
273.143 424.99 272.55 424.397 271.82 424.397 cv
271.089 424.397 270.497 424.99 270.497 425.72 cv
270.497 426.451 271.089 427.042 271.82 427.042 cv
272.55 427.042 273.143 426.451 273.143 425.72 cv
f
278.832 425.72 mo
278.832 425.72 li
278.832 424.99 278.239 424.397 277.508 424.397 cv
276.778 424.397 276.185 424.99 276.185 425.72 cv
276.185 426.451 276.778 427.042 277.508 427.042 cv
278.239 427.042 278.832 426.451 278.832 425.72 cv
f
284.519 425.72 mo
284.519 425.72 li
284.519 424.99 283.926 424.397 283.197 424.397 cv
282.466 424.397 281.874 424.99 281.874 425.72 cv
281.874 426.451 282.466 427.042 283.197 427.042 cv
283.926 427.042 284.519 426.451 284.519 425.72 cv
f
290.208 425.72 mo
290.208 425.72 li
290.208 424.99 289.616 424.397 288.885 424.397 cv
288.155 424.397 287.562 424.99 287.562 425.72 cv
287.562 426.451 288.155 427.042 288.885 427.042 cv
289.616 427.042 290.208 426.451 290.208 425.72 cv
f
295.897 425.72 mo
295.897 425.72 li
295.897 424.99 295.304 424.397 294.574 424.397 cv
293.843 424.397 293.25 424.99 293.25 425.72 cv
293.25 426.451 293.843 427.042 294.574 427.042 cv
295.304 427.042 295.897 426.451 295.897 425.72 cv
f
270.298 420.032 mo
270.298 420.032 li
270.298 419.301 269.706 418.708 268.975 418.708 cv
268.246 418.708 267.653 419.301 267.653 420.032 cv
267.653 420.761 268.246 421.354 268.975 421.354 cv
269.706 421.354 270.298 420.761 270.298 420.032 cv
f
275.987 420.032 mo
275.987 420.032 li
275.987 419.301 275.394 418.708 274.664 418.708 cv
273.934 418.708 273.341 419.301 273.341 420.032 cv
273.341 420.761 273.934 421.354 274.664 421.354 cv
275.394 421.354 275.987 420.761 275.987 420.032 cv
f
281.675 420.032 mo
281.675 420.032 li
281.675 419.301 281.083 418.708 280.353 418.708 cv
279.623 418.708 279.03 419.301 279.03 420.032 cv
279.03 420.761 279.623 421.354 280.353 421.354 cv
281.083 421.354 281.675 420.761 281.675 420.032 cv
f
287.364 420.032 mo
287.364 420.032 li
287.364 419.301 286.771 418.708 286.042 418.708 cv
285.311 418.708 284.718 419.301 284.718 420.032 cv
284.718 420.761 285.311 421.354 286.042 421.354 cv
286.771 421.354 287.364 420.761 287.364 420.032 cv
f
293.052 420.032 mo
293.052 420.032 li
293.052 419.301 292.46 418.708 291.729 418.708 cv
290.999 418.708 290.407 419.301 290.407 420.032 cv
290.407 420.761 290.999 421.354 291.729 421.354 cv
292.46 421.354 293.052 420.761 293.052 420.032 cv
f
298.741 420.032 mo
298.741 420.032 li
298.741 419.301 298.148 418.708 297.418 418.708 cv
296.688 418.708 296.095 419.301 296.095 420.032 cv
296.095 420.761 296.688 421.354 297.418 421.354 cv
298.148 421.354 298.741 420.761 298.741 420.032 cv
f
273.143 414.343 mo
273.143 414.343 li
273.143 413.613 272.55 413.02 271.82 413.02 cv
271.089 413.02 270.497 413.613 270.497 414.343 cv
270.497 415.073 271.089 415.666 271.82 415.666 cv
272.55 415.666 273.143 415.073 273.143 414.343 cv
f
278.832 414.343 mo
278.832 414.343 li
278.832 413.613 278.239 413.02 277.508 413.02 cv
276.778 413.02 276.185 413.613 276.185 414.343 cv
276.185 415.073 276.778 415.666 277.508 415.666 cv
278.239 415.666 278.832 415.073 278.832 414.343 cv
f
284.519 414.343 mo
284.519 414.343 li
284.519 413.613 283.926 413.02 283.197 413.02 cv
282.466 413.02 281.874 413.613 281.874 414.343 cv
281.874 415.073 282.466 415.666 283.197 415.666 cv
283.926 415.666 284.519 415.073 284.519 414.343 cv
f
290.208 414.343 mo
290.208 414.343 li
290.208 413.613 289.616 413.02 288.885 413.02 cv
288.155 413.02 287.562 413.613 287.562 414.343 cv
287.562 415.073 288.155 415.666 288.885 415.666 cv
289.616 415.666 290.208 415.073 290.208 414.343 cv
f
295.897 414.343 mo
295.897 414.343 li
295.897 413.613 295.304 413.02 294.574 413.02 cv
293.843 413.02 293.25 413.613 293.25 414.343 cv
293.25 415.073 293.843 415.666 294.574 415.666 cv
295.304 415.666 295.897 415.073 295.897 414.343 cv
f
270.298 408.655 mo
270.298 408.655 li
270.298 407.924 269.706 407.332 268.975 407.332 cv
268.246 407.332 267.653 407.924 267.653 408.655 cv
267.653 409.385 268.246 409.977 268.975 409.977 cv
269.706 409.977 270.298 409.385 270.298 408.655 cv
f
275.987 408.655 mo
275.987 408.655 li
275.987 407.924 275.394 407.332 274.664 407.332 cv
273.934 407.332 273.341 407.924 273.341 408.655 cv
273.341 409.385 273.934 409.977 274.664 409.977 cv
275.394 409.977 275.987 409.385 275.987 408.655 cv
f
281.675 408.655 mo
281.675 408.655 li
281.675 407.924 281.083 407.332 280.353 407.332 cv
279.623 407.332 279.03 407.924 279.03 408.655 cv
279.03 409.385 279.623 409.977 280.353 409.977 cv
281.083 409.977 281.675 409.385 281.675 408.655 cv
f
287.364 408.655 mo
287.364 408.655 li
287.364 407.924 286.771 407.332 286.042 407.332 cv
285.311 407.332 284.718 407.924 284.718 408.655 cv
284.718 409.385 285.311 409.977 286.042 409.977 cv
286.771 409.977 287.364 409.385 287.364 408.655 cv
f
293.052 408.655 mo
293.052 408.655 li
293.052 407.924 292.46 407.332 291.729 407.332 cv
290.999 407.332 290.407 407.924 290.407 408.655 cv
290.407 409.385 290.999 409.977 291.729 409.977 cv
292.46 409.977 293.052 409.385 293.052 408.655 cv
f
298.741 408.655 mo
298.741 408.655 li
298.741 407.924 298.148 407.332 297.418 407.332 cv
296.688 407.332 296.095 407.924 296.095 408.655 cv
296.095 409.385 296.688 409.977 297.418 409.977 cv
298.148 409.977 298.741 409.385 298.741 408.655 cv
f
273.143 402.965 mo
273.143 402.965 li
273.143 402.236 272.55 401.643 271.82 401.643 cv
271.089 401.643 270.497 402.236 270.497 402.965 cv
270.497 403.696 271.089 404.29 271.82 404.29 cv
272.55 404.29 273.143 403.696 273.143 402.965 cv
f
278.832 402.965 mo
278.832 402.965 li
278.832 402.236 278.239 401.643 277.508 401.643 cv
276.778 401.643 276.185 402.236 276.185 402.965 cv
276.185 403.696 276.778 404.29 277.508 404.29 cv
278.239 404.29 278.832 403.696 278.832 402.965 cv
f
284.519 402.965 mo
284.519 402.965 li
284.519 402.236 283.926 401.643 283.197 401.643 cv
282.466 401.643 281.874 402.236 281.874 402.965 cv
281.874 403.696 282.466 404.29 283.197 404.29 cv
283.926 404.29 284.519 403.696 284.519 402.965 cv
f
290.208 402.965 mo
290.208 402.965 li
290.208 402.236 289.616 401.643 288.885 401.643 cv
288.155 401.643 287.562 402.236 287.562 402.965 cv
287.562 403.696 288.155 404.29 288.885 404.29 cv
289.616 404.29 290.208 403.696 290.208 402.965 cv
f
295.897 402.965 mo
295.897 402.965 li
295.897 402.236 295.304 401.643 294.574 401.643 cv
293.843 401.643 293.25 402.236 293.25 402.965 cv
293.25 403.696 293.843 404.29 294.574 404.29 cv
295.304 404.29 295.897 403.696 295.897 402.965 cv
f
270.298 397.278 mo
270.298 397.278 li
270.298 396.547 269.706 395.955 268.975 395.955 cv
268.246 395.955 267.653 396.547 267.653 397.278 cv
267.653 398.008 268.246 398.6 268.975 398.6 cv
269.706 398.6 270.298 398.008 270.298 397.278 cv
f
275.987 397.278 mo
275.987 397.278 li
275.987 396.547 275.394 395.955 274.664 395.955 cv
273.934 395.955 273.341 396.547 273.341 397.278 cv
273.341 398.008 273.934 398.6 274.664 398.6 cv
275.394 398.6 275.987 398.008 275.987 397.278 cv
f
281.675 397.278 mo
281.675 397.278 li
281.675 396.547 281.083 395.955 280.353 395.955 cv
279.623 395.955 279.03 396.547 279.03 397.278 cv
279.03 398.008 279.623 398.6 280.353 398.6 cv
281.083 398.6 281.675 398.008 281.675 397.278 cv
f
287.364 397.278 mo
287.364 397.278 li
287.364 396.547 286.771 395.955 286.042 395.955 cv
285.311 395.955 284.718 396.547 284.718 397.278 cv
284.718 398.008 285.311 398.6 286.042 398.6 cv
286.771 398.6 287.364 398.008 287.364 397.278 cv
f
293.052 397.278 mo
293.052 397.278 li
293.052 396.547 292.46 395.955 291.729 395.955 cv
290.999 395.955 290.406 396.547 290.406 397.278 cv
290.406 398.008 290.999 398.6 291.729 398.6 cv
292.46 398.6 293.052 398.008 293.052 397.278 cv
f
298.741 397.278 mo
298.741 397.278 li
298.741 396.547 298.148 395.955 297.418 395.955 cv
296.688 395.955 296.095 396.547 296.095 397.278 cv
296.095 398.008 296.688 398.6 297.418 398.6 cv
298.148 398.6 298.741 398.008 298.741 397.278 cv
f
273.143 391.589 mo
273.143 391.589 li
273.143 390.859 272.55 390.266 271.82 390.266 cv
271.089 390.266 270.497 390.859 270.497 391.589 cv
270.497 392.319 271.089 392.912 271.82 392.912 cv
272.55 392.912 273.143 392.319 273.143 391.589 cv
f
278.832 391.589 mo
278.832 391.589 li
278.832 390.859 278.239 390.266 277.508 390.266 cv
276.778 390.266 276.185 390.859 276.185 391.589 cv
276.185 392.319 276.778 392.912 277.508 392.912 cv
278.239 392.912 278.832 392.319 278.832 391.589 cv
f
284.519 391.589 mo
284.519 391.589 li
284.519 390.859 283.926 390.266 283.197 390.266 cv
282.466 390.266 281.874 390.859 281.874 391.589 cv
281.874 392.319 282.466 392.912 283.197 392.912 cv
283.926 392.912 284.519 392.319 284.519 391.589 cv
f
290.208 391.589 mo
290.208 391.589 li
290.208 390.859 289.616 390.266 288.885 390.266 cv
288.155 390.266 287.562 390.859 287.562 391.589 cv
287.562 392.319 288.155 392.912 288.885 392.912 cv
289.616 392.912 290.208 392.319 290.208 391.589 cv
f
295.897 391.589 mo
295.897 391.589 li
295.897 390.859 295.304 390.266 294.574 390.266 cv
293.843 390.266 293.25 390.859 293.25 391.589 cv
293.25 392.319 293.843 392.912 294.574 392.912 cv
295.304 392.912 295.897 392.319 295.897 391.589 cv
f
270.298 385.901 mo
270.298 385.901 li
270.298 385.17 269.706 384.578 268.975 384.578 cv
268.246 384.578 267.653 385.17 267.653 385.901 cv
267.653 386.631 268.246 387.223 268.975 387.223 cv
269.706 387.223 270.298 386.631 270.298 385.901 cv
f
275.987 385.901 mo
275.987 385.901 li
275.987 385.17 275.394 384.578 274.664 384.578 cv
273.934 384.578 273.341 385.17 273.341 385.901 cv
273.341 386.631 273.934 387.223 274.664 387.223 cv
275.394 387.223 275.987 386.631 275.987 385.901 cv
f
281.675 385.901 mo
281.675 385.901 li
281.675 385.17 281.083 384.578 280.353 384.578 cv
279.623 384.578 279.03 385.17 279.03 385.901 cv
279.03 386.631 279.623 387.223 280.353 387.223 cv
281.083 387.223 281.675 386.631 281.675 385.901 cv
f
287.364 385.901 mo
287.364 385.901 li
287.364 385.17 286.771 384.578 286.042 384.578 cv
285.311 384.578 284.718 385.17 284.718 385.901 cv
284.718 386.631 285.311 387.223 286.042 387.223 cv
286.771 387.223 287.364 386.631 287.364 385.901 cv
f
293.052 385.901 mo
293.052 385.901 li
293.052 385.17 292.46 384.578 291.729 384.578 cv
290.999 384.578 290.406 385.17 290.406 385.901 cv
290.406 386.631 290.999 387.223 291.729 387.223 cv
292.46 387.223 293.052 386.631 293.052 385.901 cv
f
298.741 385.901 mo
298.741 385.901 li
298.741 385.17 298.148 384.578 297.418 384.578 cv
296.688 384.578 296.095 385.17 296.095 385.901 cv
296.095 386.631 296.688 387.223 297.418 387.223 cv
298.148 387.223 298.741 386.631 298.741 385.901 cv
f
273.143 380.211 mo
273.143 380.211 li
273.143 379.482 272.55 378.889 271.82 378.889 cv
271.089 378.889 270.497 379.482 270.497 380.211 cv
270.497 380.942 271.089 381.536 271.82 381.536 cv
272.55 381.536 273.143 380.942 273.143 380.211 cv
f
278.832 380.211 mo
278.832 380.211 li
278.832 379.482 278.239 378.889 277.508 378.889 cv
276.778 378.889 276.185 379.482 276.185 380.211 cv
276.185 380.942 276.778 381.536 277.508 381.536 cv
278.239 381.536 278.832 380.942 278.832 380.211 cv
f
284.519 380.211 mo
284.519 380.211 li
284.519 379.482 283.926 378.889 283.197 378.889 cv
282.466 378.889 281.874 379.482 281.874 380.211 cv
281.874 380.942 282.466 381.536 283.197 381.536 cv
283.926 381.536 284.519 380.942 284.519 380.211 cv
f
290.208 380.211 mo
290.208 380.211 li
290.208 379.482 289.616 378.889 288.885 378.889 cv
288.155 378.889 287.562 379.482 287.562 380.211 cv
287.562 380.942 288.155 381.536 288.885 381.536 cv
289.616 381.536 290.208 380.942 290.208 380.211 cv
f
295.897 380.211 mo
295.897 380.211 li
295.897 379.482 295.304 378.889 294.574 378.889 cv
293.843 378.889 293.25 379.482 293.25 380.211 cv
293.25 380.942 293.843 381.536 294.574 381.536 cv
295.304 381.536 295.897 380.942 295.897 380.211 cv
f
270.298 374.524 mo
270.298 374.524 li
270.298 373.793 269.706 373.202 268.975 373.202 cv
268.246 373.202 267.653 373.793 267.653 374.524 cv
267.653 375.254 268.246 375.846 268.975 375.846 cv
269.706 375.846 270.298 375.254 270.298 374.524 cv
f
275.987 374.524 mo
275.987 374.524 li
275.987 373.793 275.394 373.202 274.664 373.202 cv
273.934 373.202 273.341 373.793 273.341 374.524 cv
273.341 375.254 273.934 375.846 274.664 375.846 cv
275.394 375.846 275.987 375.254 275.987 374.524 cv
f
281.675 374.524 mo
281.675 374.524 li
281.675 373.793 281.083 373.202 280.353 373.202 cv
279.623 373.202 279.03 373.793 279.03 374.524 cv
279.03 375.254 279.623 375.846 280.353 375.846 cv
281.083 375.846 281.675 375.254 281.675 374.524 cv
f
287.364 374.524 mo
287.364 374.524 li
287.364 373.793 286.771 373.202 286.042 373.202 cv
285.311 373.202 284.718 373.793 284.718 374.524 cv
284.718 375.254 285.311 375.846 286.042 375.846 cv
286.771 375.846 287.364 375.254 287.364 374.524 cv
f
293.052 374.524 mo
293.052 374.524 li
293.052 373.793 292.46 373.202 291.729 373.202 cv
290.999 373.202 290.406 373.793 290.406 374.524 cv
290.406 375.254 290.999 375.846 291.729 375.846 cv
292.46 375.846 293.052 375.254 293.052 374.524 cv
f
298.741 374.524 mo
298.741 374.524 li
298.741 373.793 298.148 373.202 297.418 373.202 cv
296.688 373.202 296.095 373.793 296.095 374.524 cv
296.095 375.254 296.688 375.846 297.418 375.846 cv
298.148 375.846 298.741 375.254 298.741 374.524 cv
f
273.143 368.835 mo
273.143 368.835 li
273.143 368.105 272.55 367.512 271.82 367.512 cv
271.089 367.512 270.497 368.105 270.497 368.835 cv
270.497 369.566 271.089 370.159 271.82 370.159 cv
272.55 370.159 273.143 369.566 273.143 368.835 cv
f
278.832 368.835 mo
278.832 368.835 li
278.832 368.105 278.239 367.512 277.508 367.512 cv
276.778 367.512 276.185 368.105 276.185 368.835 cv
276.185 369.566 276.778 370.159 277.508 370.159 cv
278.239 370.159 278.832 369.566 278.832 368.835 cv
f
284.519 368.835 mo
284.519 368.835 li
284.519 368.105 283.926 367.512 283.197 367.512 cv
282.466 367.512 281.874 368.105 281.874 368.835 cv
281.874 369.566 282.466 370.159 283.197 370.159 cv
283.926 370.159 284.519 369.566 284.519 368.835 cv
f
290.208 368.835 mo
290.208 368.835 li
290.208 368.105 289.616 367.512 288.885 367.512 cv
288.155 367.512 287.562 368.105 287.562 368.835 cv
287.562 369.566 288.155 370.159 288.885 370.159 cv
289.616 370.159 290.208 369.566 290.208 368.835 cv
f
295.897 368.835 mo
295.897 368.835 li
295.897 368.105 295.304 367.512 294.574 367.512 cv
293.843 367.512 293.25 368.105 293.25 368.835 cv
293.25 369.566 293.843 370.159 294.574 370.159 cv
295.304 370.159 295.897 369.566 295.897 368.835 cv
f
270.298 363.147 mo
270.298 363.147 li
270.298 362.416 269.706 361.825 268.975 361.825 cv
268.246 361.825 267.653 362.416 267.653 363.147 cv
267.653 363.877 268.246 364.469 268.975 364.469 cv
269.706 364.469 270.298 363.877 270.298 363.147 cv
f
275.987 363.147 mo
275.987 363.147 li
275.987 362.416 275.394 361.825 274.664 361.825 cv
273.934 361.825 273.341 362.416 273.341 363.147 cv
273.341 363.877 273.934 364.469 274.664 364.469 cv
275.394 364.469 275.987 363.877 275.987 363.147 cv
f
281.675 363.147 mo
281.675 363.147 li
281.675 362.416 281.083 361.825 280.353 361.825 cv
279.623 361.825 279.03 362.416 279.03 363.147 cv
279.03 363.877 279.623 364.469 280.353 364.469 cv
281.083 364.469 281.675 363.877 281.675 363.147 cv
f
287.364 363.147 mo
287.364 363.147 li
287.364 362.416 286.771 361.825 286.042 361.825 cv
285.311 361.825 284.718 362.416 284.718 363.147 cv
284.718 363.877 285.311 364.469 286.042 364.469 cv
286.771 364.469 287.364 363.877 287.364 363.147 cv
f
293.052 363.147 mo
293.052 363.147 li
293.052 362.416 292.46 361.825 291.729 361.825 cv
290.999 361.825 290.406 362.416 290.406 363.147 cv
290.406 363.877 290.999 364.469 291.729 364.469 cv
292.46 364.469 293.052 363.877 293.052 363.147 cv
f
298.741 363.147 mo
298.741 363.147 li
298.741 362.416 298.148 361.825 297.418 361.825 cv
296.688 361.825 296.095 362.416 296.095 363.147 cv
296.095 363.877 296.688 364.469 297.418 364.469 cv
298.148 364.469 298.741 363.877 298.741 363.147 cv
f
273.143 357.458 mo
273.143 357.458 li
273.143 356.728 272.55 356.135 271.82 356.135 cv
271.089 356.135 270.497 356.728 270.497 357.458 cv
270.497 358.188 271.089 358.782 271.82 358.782 cv
272.55 358.782 273.143 358.188 273.143 357.458 cv
f
278.832 357.458 mo
278.832 357.458 li
278.832 356.728 278.239 356.135 277.508 356.135 cv
276.778 356.135 276.185 356.728 276.185 357.458 cv
276.185 358.188 276.778 358.782 277.508 358.782 cv
278.239 358.782 278.832 358.188 278.832 357.458 cv
f
284.519 357.458 mo
284.519 357.458 li
284.519 356.728 283.926 356.135 283.197 356.135 cv
282.466 356.135 281.874 356.728 281.874 357.458 cv
281.874 358.188 282.466 358.782 283.197 358.782 cv
283.926 358.782 284.519 358.188 284.519 357.458 cv
f
290.208 357.458 mo
290.208 357.458 li
290.208 356.728 289.616 356.135 288.885 356.135 cv
288.155 356.135 287.562 356.728 287.562 357.458 cv
287.562 358.188 288.155 358.782 288.885 358.782 cv
289.616 358.782 290.208 358.188 290.208 357.458 cv
f
295.897 357.458 mo
295.897 357.458 li
295.897 356.728 295.304 356.135 294.574 356.135 cv
293.843 356.135 293.25 356.728 293.25 357.458 cv
293.25 358.188 293.843 358.782 294.574 358.782 cv
295.304 358.782 295.897 358.188 295.897 357.458 cv
f
270.298 351.77 mo
270.298 351.77 li
270.298 351.04 269.706 350.447 268.975 350.447 cv
268.246 350.447 267.653 351.04 267.653 351.77 cv
267.653 352.5 268.246 353.092 268.975 353.092 cv
269.706 353.092 270.298 352.5 270.298 351.77 cv
f
275.987 351.77 mo
275.987 351.77 li
275.987 351.04 275.394 350.447 274.664 350.447 cv
273.934 350.447 273.341 351.04 273.341 351.77 cv
273.341 352.5 273.934 353.092 274.664 353.092 cv
275.394 353.092 275.987 352.5 275.987 351.77 cv
f
281.675 351.77 mo
281.675 351.77 li
281.675 351.04 281.083 350.447 280.353 350.447 cv
279.623 350.447 279.03 351.04 279.03 351.77 cv
279.03 352.5 279.623 353.092 280.353 353.092 cv
281.083 353.092 281.675 352.5 281.675 351.77 cv
f
287.364 351.77 mo
287.364 351.77 li
287.364 351.04 286.771 350.447 286.042 350.447 cv
285.311 350.447 284.718 351.04 284.718 351.77 cv
284.718 352.5 285.311 353.092 286.042 353.092 cv
286.771 353.092 287.364 352.5 287.364 351.77 cv
f
293.052 351.77 mo
293.052 351.77 li
293.052 351.04 292.46 350.447 291.729 350.447 cv
290.999 350.447 290.406 351.04 290.406 351.77 cv
290.406 352.5 290.999 353.092 291.729 353.092 cv
292.46 353.092 293.052 352.5 293.052 351.77 cv
f
298.741 351.77 mo
298.741 351.77 li
298.741 351.04 298.148 350.447 297.418 350.447 cv
296.688 350.447 296.095 351.04 296.095 351.77 cv
296.095 352.5 296.688 353.092 297.418 353.092 cv
298.148 353.092 298.741 352.5 298.741 351.77 cv
f
273.143 346.082 mo
273.143 346.082 li
273.143 345.352 272.55 344.758 271.82 344.758 cv
271.089 344.758 270.497 345.352 270.497 346.082 cv
270.497 346.811 271.089 347.405 271.82 347.405 cv
272.55 347.405 273.143 346.811 273.143 346.082 cv
f
278.832 346.082 mo
278.832 346.082 li
278.832 345.352 278.239 344.758 277.508 344.758 cv
276.778 344.758 276.185 345.352 276.185 346.082 cv
276.185 346.811 276.778 347.405 277.508 347.405 cv
278.239 347.405 278.832 346.811 278.832 346.082 cv
f
284.519 346.082 mo
284.519 346.082 li
284.519 345.352 283.926 344.758 283.197 344.758 cv
282.466 344.758 281.874 345.352 281.874 346.082 cv
281.874 346.811 282.466 347.405 283.197 347.405 cv
283.926 347.405 284.519 346.811 284.519 346.082 cv
f
290.208 346.082 mo
290.208 346.082 li
290.208 345.352 289.616 344.758 288.885 344.758 cv
288.155 344.758 287.562 345.352 287.562 346.082 cv
287.562 346.811 288.155 347.405 288.885 347.405 cv
289.616 347.405 290.208 346.811 290.208 346.082 cv
f
295.897 346.082 mo
295.897 346.082 li
295.897 345.352 295.304 344.758 294.574 344.758 cv
293.843 344.758 293.25 345.352 293.25 346.082 cv
293.25 346.811 293.843 347.405 294.574 347.405 cv
295.304 347.405 295.897 346.811 295.897 346.082 cv
f
270.298 340.393 mo
270.298 340.393 li
270.298 339.663 269.706 339.071 268.975 339.071 cv
268.246 339.071 267.653 339.663 267.653 340.393 cv
267.653 341.124 268.246 341.716 268.975 341.716 cv
269.706 341.716 270.298 341.124 270.298 340.393 cv
f
275.987 340.393 mo
275.987 340.393 li
275.987 339.663 275.394 339.071 274.664 339.071 cv
273.934 339.071 273.341 339.663 273.341 340.393 cv
273.341 341.124 273.934 341.716 274.664 341.716 cv
275.394 341.716 275.987 341.124 275.987 340.393 cv
f
281.675 340.393 mo
281.675 340.393 li
281.675 339.663 281.083 339.071 280.353 339.071 cv
279.623 339.071 279.03 339.663 279.03 340.393 cv
279.03 341.124 279.623 341.716 280.353 341.716 cv
281.083 341.716 281.675 341.124 281.675 340.393 cv
f
287.364 340.393 mo
287.364 340.393 li
287.364 339.663 286.771 339.071 286.042 339.071 cv
285.311 339.071 284.718 339.663 284.718 340.393 cv
284.718 341.124 285.311 341.716 286.042 341.716 cv
286.771 341.716 287.364 341.124 287.364 340.393 cv
f
293.052 340.393 mo
293.052 340.393 li
293.052 339.663 292.46 339.071 291.729 339.071 cv
290.999 339.071 290.406 339.663 290.406 340.393 cv
290.406 341.124 290.999 341.716 291.729 341.716 cv
292.46 341.716 293.052 341.124 293.052 340.393 cv
f
298.741 340.393 mo
298.741 340.393 li
298.741 339.663 298.148 339.071 297.418 339.071 cv
296.688 339.071 296.095 339.663 296.095 340.393 cv
296.095 341.124 296.688 341.716 297.418 341.716 cv
298.148 341.716 298.741 341.124 298.741 340.393 cv
f
273.143 334.705 mo
273.143 334.705 li
273.143 333.975 272.55 333.382 271.82 333.382 cv
271.089 333.382 270.497 333.975 270.497 334.705 cv
270.497 335.435 271.089 336.027 271.82 336.027 cv
272.55 336.027 273.143 335.435 273.143 334.705 cv
f
278.832 334.705 mo
278.832 334.705 li
278.832 333.975 278.239 333.382 277.508 333.382 cv
276.778 333.382 276.185 333.975 276.185 334.705 cv
276.185 335.435 276.778 336.027 277.508 336.027 cv
278.239 336.027 278.832 335.435 278.832 334.705 cv
f
284.519 334.705 mo
284.519 334.705 li
284.519 333.975 283.926 333.382 283.197 333.382 cv
282.466 333.382 281.874 333.975 281.874 334.705 cv
281.874 335.435 282.466 336.027 283.197 336.027 cv
283.926 336.027 284.519 335.435 284.519 334.705 cv
f
290.208 334.705 mo
290.208 334.705 li
290.208 333.975 289.616 333.382 288.885 333.382 cv
288.155 333.382 287.562 333.975 287.562 334.705 cv
287.562 335.435 288.155 336.027 288.885 336.027 cv
289.616 336.027 290.208 335.435 290.208 334.705 cv
f
295.897 334.705 mo
295.897 334.705 li
295.897 333.975 295.304 333.382 294.574 333.382 cv
293.843 333.382 293.25 333.975 293.25 334.705 cv
293.25 335.435 293.843 336.027 294.574 336.027 cv
295.304 336.027 295.897 335.435 295.897 334.705 cv
f
270.298 329.016 mo
270.298 329.016 li
270.298 328.286 269.706 327.693 268.975 327.693 cv
268.246 327.693 267.653 328.286 267.653 329.016 cv
267.653 329.747 268.246 330.339 268.975 330.339 cv
269.706 330.339 270.298 329.747 270.298 329.016 cv
f
275.987 329.016 mo
275.987 329.016 li
275.987 328.286 275.394 327.693 274.664 327.693 cv
273.934 327.693 273.341 328.286 273.341 329.016 cv
273.341 329.747 273.934 330.339 274.664 330.339 cv
275.394 330.339 275.987 329.747 275.987 329.016 cv
f
281.675 329.016 mo
281.675 329.016 li
281.675 328.286 281.083 327.693 280.353 327.693 cv
279.623 327.693 279.03 328.286 279.03 329.016 cv
279.03 329.747 279.623 330.339 280.353 330.339 cv
281.083 330.339 281.675 329.747 281.675 329.016 cv
f
287.364 329.016 mo
287.364 329.016 li
287.364 328.286 286.771 327.693 286.042 327.693 cv
285.311 327.693 284.718 328.286 284.718 329.016 cv
284.718 329.747 285.311 330.339 286.042 330.339 cv
286.771 330.339 287.364 329.747 287.364 329.016 cv
f
293.052 329.016 mo
293.052 329.016 li
293.052 328.286 292.46 327.693 291.729 327.693 cv
290.999 327.693 290.406 328.286 290.406 329.016 cv
290.406 329.747 290.999 330.339 291.729 330.339 cv
292.46 330.339 293.052 329.747 293.052 329.016 cv
f
298.741 329.016 mo
298.741 329.016 li
298.741 328.286 298.148 327.693 297.418 327.693 cv
296.688 327.693 296.095 328.286 296.095 329.016 cv
296.095 329.747 296.688 330.339 297.418 330.339 cv
298.148 330.339 298.741 329.747 298.741 329.016 cv
f
273.143 323.328 mo
273.143 323.328 li
273.143 322.597 272.55 322.005 271.82 322.005 cv
271.089 322.005 270.497 322.597 270.497 323.328 cv
270.497 324.058 271.089 324.651 271.82 324.651 cv
272.55 324.651 273.143 324.058 273.143 323.328 cv
f
278.832 323.328 mo
278.832 323.328 li
278.832 322.597 278.239 322.005 277.508 322.005 cv
276.778 322.005 276.185 322.597 276.185 323.328 cv
276.185 324.058 276.778 324.651 277.508 324.651 cv
278.239 324.651 278.832 324.058 278.832 323.328 cv
f
284.519 323.328 mo
284.519 323.328 li
284.519 322.597 283.926 322.005 283.197 322.005 cv
282.466 322.005 281.874 322.597 281.874 323.328 cv
281.874 324.058 282.466 324.651 283.197 324.651 cv
283.926 324.651 284.519 324.058 284.519 323.328 cv
f
290.208 323.328 mo
290.208 323.328 li
290.208 322.597 289.616 322.005 288.885 322.005 cv
288.155 322.005 287.562 322.597 287.562 323.328 cv
287.562 324.058 288.155 324.651 288.885 324.651 cv
289.616 324.651 290.208 324.058 290.208 323.328 cv
f
295.897 323.328 mo
295.897 323.328 li
295.897 322.597 295.304 322.005 294.574 322.005 cv
293.843 322.005 293.25 322.597 293.25 323.328 cv
293.25 324.058 293.843 324.651 294.574 324.651 cv
295.304 324.651 295.897 324.058 295.897 323.328 cv
f
270.298 317.639 mo
270.298 317.639 li
270.298 316.909 269.706 316.316 268.975 316.316 cv
268.246 316.316 267.653 316.909 267.653 317.639 cv
267.653 318.37 268.246 318.962 268.975 318.962 cv
269.706 318.962 270.298 318.37 270.298 317.639 cv
f
275.987 317.639 mo
275.987 317.639 li
275.987 316.909 275.394 316.316 274.664 316.316 cv
273.934 316.316 273.341 316.909 273.341 317.639 cv
273.341 318.37 273.934 318.962 274.664 318.962 cv
275.394 318.962 275.987 318.37 275.987 317.639 cv
f
281.675 317.639 mo
281.675 317.639 li
281.675 316.909 281.083 316.316 280.353 316.316 cv
279.623 316.316 279.03 316.909 279.03 317.639 cv
279.03 318.37 279.623 318.962 280.353 318.962 cv
281.083 318.962 281.675 318.37 281.675 317.639 cv
f
287.364 317.639 mo
287.364 317.639 li
287.364 316.909 286.771 316.316 286.042 316.316 cv
285.311 316.316 284.718 316.909 284.718 317.639 cv
284.718 318.37 285.311 318.962 286.042 318.962 cv
286.771 318.962 287.364 318.37 287.364 317.639 cv
f
293.052 317.639 mo
293.052 317.639 li
293.052 316.909 292.46 316.316 291.729 316.316 cv
290.999 316.316 290.406 316.909 290.406 317.639 cv
290.406 318.37 290.999 318.962 291.729 318.962 cv
292.46 318.962 293.052 318.37 293.052 317.639 cv
f
298.741 317.639 mo
298.741 317.639 li
298.741 316.909 298.148 316.316 297.418 316.316 cv
296.688 316.316 296.095 316.909 296.095 317.639 cv
296.095 318.37 296.688 318.962 297.418 318.962 cv
298.148 318.962 298.741 318.37 298.741 317.639 cv
f
273.143 311.951 mo
273.143 311.951 li
273.143 311.221 272.55 310.628 271.82 310.628 cv
271.089 310.628 270.497 311.221 270.497 311.951 cv
270.497 312.681 271.089 313.274 271.82 313.274 cv
272.55 313.274 273.143 312.681 273.143 311.951 cv
f
278.832 311.951 mo
278.832 311.951 li
278.832 311.221 278.239 310.628 277.508 310.628 cv
276.778 310.628 276.185 311.221 276.185 311.951 cv
276.185 312.681 276.778 313.274 277.508 313.274 cv
278.239 313.274 278.832 312.681 278.832 311.951 cv
f
284.519 311.951 mo
284.519 311.951 li
284.519 311.221 283.926 310.628 283.197 310.628 cv
282.466 310.628 281.874 311.221 281.874 311.951 cv
281.874 312.681 282.466 313.274 283.197 313.274 cv
283.926 313.274 284.519 312.681 284.519 311.951 cv
f
290.208 311.951 mo
290.208 311.951 li
290.208 311.221 289.616 310.628 288.885 310.628 cv
288.155 310.628 287.562 311.221 287.562 311.951 cv
287.562 312.681 288.155 313.274 288.885 313.274 cv
289.616 313.274 290.208 312.681 290.208 311.951 cv
f
295.897 311.951 mo
295.897 311.951 li
295.897 311.221 295.304 310.628 294.574 310.628 cv
293.843 310.628 293.25 311.221 293.25 311.951 cv
293.25 312.681 293.843 313.274 294.574 313.274 cv
295.304 313.274 295.897 312.681 295.897 311.951 cv
f
270.298 306.262 mo
270.298 306.262 li
270.298 305.532 269.706 304.939 268.975 304.939 cv
268.246 304.939 267.653 305.532 267.653 306.262 cv
267.653 306.993 268.246 307.585 268.975 307.585 cv
269.706 307.585 270.298 306.993 270.298 306.262 cv
f
275.987 306.262 mo
275.987 306.262 li
275.987 305.532 275.394 304.939 274.664 304.939 cv
273.934 304.939 273.341 305.532 273.341 306.262 cv
273.341 306.993 273.934 307.585 274.664 307.585 cv
275.394 307.585 275.987 306.993 275.987 306.262 cv
f
281.675 306.262 mo
281.675 306.262 li
281.675 305.532 281.083 304.939 280.353 304.939 cv
279.623 304.939 279.03 305.532 279.03 306.262 cv
279.03 306.993 279.623 307.585 280.353 307.585 cv
281.083 307.585 281.675 306.993 281.675 306.262 cv
f
287.364 306.262 mo
287.364 306.262 li
287.364 305.532 286.771 304.939 286.042 304.939 cv
285.311 304.939 284.718 305.532 284.718 306.262 cv
284.718 306.993 285.311 307.585 286.042 307.585 cv
286.771 307.585 287.364 306.993 287.364 306.262 cv
f
293.052 306.262 mo
293.052 306.262 li
293.052 305.532 292.46 304.939 291.729 304.939 cv
290.999 304.939 290.406 305.532 290.406 306.262 cv
290.406 306.993 290.999 307.585 291.729 307.585 cv
292.46 307.585 293.052 306.993 293.052 306.262 cv
f
298.741 306.262 mo
298.741 306.262 li
298.741 305.532 298.148 304.939 297.418 304.939 cv
296.688 304.939 296.095 305.532 296.095 306.262 cv
296.095 306.993 296.688 307.585 297.418 307.585 cv
298.148 307.585 298.741 306.993 298.741 306.262 cv
f
273.143 300.574 mo
273.143 300.574 li
273.143 299.844 272.55 299.251 271.82 299.251 cv
271.089 299.251 270.497 299.844 270.497 300.574 cv
270.497 301.304 271.089 301.897 271.82 301.897 cv
272.55 301.897 273.143 301.304 273.143 300.574 cv
f
278.832 300.574 mo
278.832 300.574 li
278.832 299.844 278.239 299.251 277.508 299.251 cv
276.778 299.251 276.185 299.844 276.185 300.574 cv
276.185 301.304 276.778 301.897 277.508 301.897 cv
278.239 301.897 278.832 301.304 278.832 300.574 cv
f
284.519 300.574 mo
284.519 300.574 li
284.519 299.844 283.926 299.251 283.197 299.251 cv
282.466 299.251 281.874 299.844 281.874 300.574 cv
281.874 301.304 282.466 301.897 283.197 301.897 cv
283.926 301.897 284.519 301.304 284.519 300.574 cv
f
290.208 300.574 mo
290.208 300.574 li
290.208 299.844 289.616 299.251 288.885 299.251 cv
288.155 299.251 287.562 299.844 287.562 300.574 cv
287.562 301.304 288.155 301.897 288.885 301.897 cv
289.616 301.897 290.208 301.304 290.208 300.574 cv
f
295.897 300.574 mo
295.897 300.574 li
295.897 299.844 295.304 299.251 294.574 299.251 cv
293.843 299.251 293.25 299.844 293.25 300.574 cv
293.25 301.304 293.843 301.897 294.574 301.897 cv
295.304 301.897 295.897 301.304 295.897 300.574 cv
f
270.298 294.886 mo
270.298 294.886 li
270.298 294.155 269.706 293.562 268.975 293.562 cv
268.246 293.562 267.653 294.155 267.653 294.886 cv
267.653 295.616 268.246 296.208 268.975 296.208 cv
269.706 296.208 270.298 295.616 270.298 294.886 cv
f
275.987 294.886 mo
275.987 294.886 li
275.987 294.155 275.394 293.562 274.664 293.562 cv
273.934 293.562 273.341 294.155 273.341 294.886 cv
273.341 295.616 273.934 296.208 274.664 296.208 cv
275.394 296.208 275.987 295.616 275.987 294.886 cv
f
281.675 294.886 mo
281.675 294.886 li
281.675 294.155 281.083 293.562 280.353 293.562 cv
279.623 293.562 279.03 294.155 279.03 294.886 cv
279.03 295.616 279.623 296.208 280.353 296.208 cv
281.083 296.208 281.675 295.616 281.675 294.886 cv
f
287.364 294.886 mo
287.364 294.886 li
287.364 294.155 286.771 293.562 286.042 293.562 cv
285.311 293.562 284.718 294.155 284.718 294.886 cv
284.718 295.616 285.311 296.208 286.042 296.208 cv
286.771 296.208 287.364 295.616 287.364 294.886 cv
f
293.052 294.886 mo
293.052 294.886 li
293.052 294.155 292.46 293.562 291.729 293.562 cv
290.999 293.562 290.406 294.155 290.406 294.886 cv
290.406 295.616 290.999 296.208 291.729 296.208 cv
292.46 296.208 293.052 295.616 293.052 294.886 cv
f
298.741 294.886 mo
298.741 294.886 li
298.741 294.155 298.148 293.562 297.418 293.562 cv
296.688 293.562 296.095 294.155 296.095 294.886 cv
296.095 295.616 296.688 296.208 297.418 296.208 cv
298.148 296.208 298.741 295.616 298.741 294.886 cv
f
273.143 289.197 mo
273.143 289.197 li
273.143 288.467 272.55 287.874 271.82 287.874 cv
271.089 287.874 270.497 288.467 270.497 289.197 cv
270.497 289.927 271.089 290.52 271.82 290.52 cv
272.55 290.52 273.143 289.927 273.143 289.197 cv
f
278.832 289.197 mo
278.832 289.197 li
278.832 288.467 278.239 287.874 277.508 287.874 cv
276.778 287.874 276.185 288.467 276.185 289.197 cv
276.185 289.927 276.778 290.52 277.508 290.52 cv
278.239 290.52 278.832 289.927 278.832 289.197 cv
f
284.519 289.197 mo
284.519 289.197 li
284.519 288.467 283.926 287.874 283.197 287.874 cv
282.466 287.874 281.874 288.467 281.874 289.197 cv
281.874 289.927 282.466 290.52 283.197 290.52 cv
283.926 290.52 284.519 289.927 284.519 289.197 cv
f
290.208 289.197 mo
290.208 289.197 li
290.208 288.467 289.616 287.874 288.885 287.874 cv
288.155 287.874 287.562 288.467 287.562 289.197 cv
287.562 289.927 288.155 290.52 288.885 290.52 cv
289.616 290.52 290.208 289.927 290.208 289.197 cv
f
295.897 289.197 mo
295.897 289.197 li
295.897 288.467 295.304 287.874 294.574 287.874 cv
293.843 287.874 293.25 288.467 293.25 289.197 cv
293.25 289.927 293.843 290.52 294.574 290.52 cv
295.304 290.52 295.897 289.927 295.897 289.197 cv
f
270.298 283.508 mo
270.298 283.508 li
270.298 282.778 269.706 282.186 268.975 282.186 cv
268.246 282.186 267.653 282.778 267.653 283.508 cv
267.653 284.239 268.246 284.832 268.975 284.832 cv
269.706 284.832 270.298 284.239 270.298 283.508 cv
f
275.987 283.508 mo
275.987 283.508 li
275.987 282.778 275.394 282.186 274.664 282.186 cv
273.934 282.186 273.341 282.778 273.341 283.508 cv
273.341 284.239 273.934 284.832 274.664 284.832 cv
275.394 284.832 275.987 284.239 275.987 283.508 cv
f
281.675 283.508 mo
281.675 283.508 li
281.675 282.778 281.083 282.186 280.353 282.186 cv
279.623 282.186 279.03 282.778 279.03 283.508 cv
279.03 284.239 279.623 284.832 280.353 284.832 cv
281.083 284.832 281.675 284.239 281.675 283.508 cv
f
287.364 283.508 mo
287.364 283.508 li
287.364 282.778 286.771 282.186 286.042 282.186 cv
285.311 282.186 284.718 282.778 284.718 283.508 cv
284.718 284.239 285.311 284.832 286.042 284.832 cv
286.771 284.832 287.364 284.239 287.364 283.508 cv
f
293.052 283.508 mo
293.052 283.508 li
293.052 282.778 292.46 282.186 291.729 282.186 cv
290.999 282.186 290.406 282.778 290.406 283.508 cv
290.406 284.239 290.999 284.832 291.729 284.832 cv
292.46 284.832 293.052 284.239 293.052 283.508 cv
f
298.741 283.508 mo
298.741 283.508 li
298.741 282.778 298.148 282.186 297.418 282.186 cv
296.688 282.186 296.095 282.778 296.095 283.508 cv
296.095 284.239 296.688 284.832 297.418 284.832 cv
298.148 284.832 298.741 284.239 298.741 283.508 cv
f
273.143 277.82 mo
273.143 277.82 li
273.143 277.09 272.55 276.498 271.82 276.498 cv
271.089 276.498 270.497 277.09 270.497 277.82 cv
270.497 278.55 271.089 279.143 271.82 279.143 cv
272.55 279.143 273.143 278.55 273.143 277.82 cv
f
278.832 277.82 mo
278.832 277.82 li
278.832 277.09 278.239 276.498 277.508 276.498 cv
276.778 276.498 276.185 277.09 276.185 277.82 cv
276.185 278.55 276.778 279.143 277.508 279.143 cv
278.239 279.143 278.832 278.55 278.832 277.82 cv
f
284.519 277.82 mo
284.519 277.82 li
284.519 277.09 283.926 276.498 283.197 276.498 cv
282.466 276.498 281.874 277.09 281.874 277.82 cv
281.874 278.55 282.466 279.143 283.197 279.143 cv
283.926 279.143 284.519 278.55 284.519 277.82 cv
f
290.208 277.82 mo
290.208 277.82 li
290.208 277.09 289.616 276.498 288.885 276.498 cv
288.155 276.498 287.562 277.09 287.562 277.82 cv
287.562 278.55 288.155 279.143 288.885 279.143 cv
289.616 279.143 290.208 278.55 290.208 277.82 cv
f
295.897 277.82 mo
295.897 277.82 li
295.897 277.09 295.304 276.498 294.574 276.498 cv
293.843 276.498 293.25 277.09 293.25 277.82 cv
293.25 278.55 293.843 279.143 294.574 279.143 cv
295.304 279.143 295.897 278.55 295.897 277.82 cv
f
grestore % PSGState
297.953 365.735 mo
297.953 317.587 291.44 278.511 283.416 278.511 cv
275.391 278.511 268.878 317.587 268.878 365.735 cv
268.878 413.883 275.391 452.96 283.416 452.96 cv
291.44 452.96 297.953 413.883 297.953 365.735 cv
@
133.428 351.198 mo
133.428 351.198 li
133.428 349.753 132.255 348.581 130.811 348.581 cv
129.367 348.581 128.195 349.753 128.195 351.198 cv
128.195 352.642 129.367 353.815 130.811 353.815 cv
132.255 353.815 133.428 352.642 133.428 351.198 cv
f
206.114 351.198 mo
206.114 351.198 li
206.114 349.753 204.942 348.581 203.498 348.581 cv
202.053 348.581 200.881 349.753 200.881 351.198 cv
200.881 352.642 202.053 353.815 203.498 353.815 cv
204.942 353.815 206.114 352.642 206.114 351.198 cv
f
0 gry
KIIMLO+Times-Italic*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
87.1982 287.233 mov
(d) sh
JIIMLO+Times-Roman*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
97.0381 287.233 mov
( or ) sh
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
120.293 287.233 mov
(s) sh
1.9656 lw
96.4795 330.38 mo
88.4024 330.38 li
0 0 0 1 cmyk
@
0 gry
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
87.1982 345.383 mov
(b) sh
255.819 331.131 mo
247.847 331.131 li
0 0 0 1 cmyk
@
0 gry
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
246.109 343.383 mov
(q) sh
IIIMLO+Symbol*1  [20.7593 0 -0 -20.7593 0 0 ]mfnt sfnt
256.931 343.209 mov
(\242) sh
255.819 368.002 mo
247.847 368.002 li
0 0 0 1 cmyk
@
0 gry
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
246.109 380.18 mov
(q) sh
246.109 442.328 mov
(q) sh
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
109.659 372.433 mov
(V) sh
IIIMLO+Symbol*2  [12.2113 0 -0 -12.2113 0 0 ]mfnt sfnt
119.394 363.71 mov
(*) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
119.394 375.921 mov
(q) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*5 
[
116{/.notdef}repeat /t /u 138{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*5  [14 0 -0 -14 0 0 ]mfnt sfnt
127.269 369.816 mov
(u) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
132.979 375.921 mov
(b) sh
KIIMLO+Times-Italic*2  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
194.973 371.71 mov
(V) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
204.707 375.199 mov
(q) sh
KIIMLO+Times-Italic*5  [14 0 -0 -14 0 0 ]mfnt sfnt
211.582 369.094 mov
(u) sh
KIIMLO+Times-Italic*2  [14 0 -0 -14 0 0 ]mfnt sfnt
216.292 375.199 mov
(q) sh
IIIMLO+Symbol*1  [14.5315 0 -0 -14.5315 0 0 ]mfnt sfnt
223.166 375.777 mov
(\242) sh
168.297 330.131 mo
160.325 330.131 li
0 0 0 1 cmyk
@
0 gry
KIIMLO+Times-Italic*2  [20 0 -0 -20 0 0 ]mfnt sfnt
158.622 342.383 mov
(q) sh
%%IncludeResource: font Times-Italic
/KIIMLO+Times-Italic*5 
[
112{/.notdef}repeat /p 3{/.notdef}repeat /t /u 138{/.notdef}repeat
] KIIMLO+Times-Italic nfnt
KIIMLO+Times-Italic*5  [14 0 -0 -14 0 0 ]mfnt sfnt
169.444 334.66 mov
(u) sh
KIIMLO+Times-Italic*3  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
20.3408 307.585 mov
(B) sh
KIIMLO+Times-Italic*3  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
34.1602 296.683 mov
(0) sh
%%IncludeResource: font Times-Roman
/JIIMLO+Times-Roman*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright 55{/.notdef}repeat /a /b 
12{/.notdef}repeat /o 2{/.notdef}repeat /r 141{/.notdef}repeat
] JIIMLO+Times-Roman nfnt
JIIMLO+Times-Roman*1  [17.4448 0 -0 -17.4448 0 0 ]mfnt sfnt
21.9385 326.275 mov
(or) sh
KIIMLO+Times-Italic*3  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
21.2715 351.746 mov
(B) sh
KIIMLO+Times-Italic*2  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
33.0908 356.107 mov
(s) sh
KIIMLO+Times-Italic*4  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
312.527 365.734 mov
(f) sh
JIIMLO+Times-Roman*1  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
72.6621 438.421 mov
(\(b\) ) sh
KIIMLO+Times-Italic*5  [21.806 0 -0 -21.806 0 0 ]mfnt sfnt
103.54 438.421 mov
(p) sh
KIIMLO+Times-Italic*4  [15.2642 0 -0 -15.2642 0 0 ]mfnt sfnt
112.948 444.782 mov
(f) sh
KIIMLO+Times-Italic*2  [15.2642 0.065636 0.065636 -15.2642 0 0 ]mfnt sfnt
117.929 430.5 mov
(q) sh
KIIMLO+Times-Italic*5  [10.6849 0 -0 -10.6849 0 0 ]mfnt sfnt
125.541 434.571 mov
(u) sh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
/KIIMLO+Times-Italic*1 ufnt
/KIIMLO+Times-Italic*2 ufnt
/KIIMLO+Times-Italic*3 ufnt
/KIIMLO+Times-Italic*4 ufnt
/KIIMLO+Times-Italic*5 ufnt
/Times-Italic ufnt
/JIIMLO+Times-Roman*1 ufnt
/Times-Roman ufnt
/IIIMLO+Symbol*1 ufnt
/IIIMLO+Symbol*2 ufnt
/Symbol ufnt
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
