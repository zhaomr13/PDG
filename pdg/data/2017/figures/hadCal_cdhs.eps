%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 7.0%%AI8_CreatorVersion: 10.0%%For: (Don Groom) (Lawrence Berkeley Lab)%%Title: (cdhs.eps)%%CreationDate: 4/30/10 2:50 PM%%BoundingBox: 157 273 464 499%%HiResBoundingBox: 157.6006 273.292 463.6309 498.0083%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentFonts: Helvetica%%DocumentNeededFonts: Helvetica%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 3%AI5_OpenToView: 9.6299 619.4219 2 1853 1152 18 0 1 21 42 0 0%AI5_OpenViewLayers: 777%%PageOrigin:30 31%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -31 -30 31%AI7_GridSettings: 72 8 72 8 0 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 128 96 8%%BeginData: 8502 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0CFF7D7DFD04A87DFD04A87DFD05A87DFD05A87DFD05A87DFD04%A87DFD05A87DFD05A87DFD05A87DFD04A87DFD05A87DFD05A87DFD05A87D%FD04A87DFD05A87DFD05A87DFD04A87DFD05A87DFD05A87DFD04A87D7DFD%0CFF7DFD16FFA8FD16FFA8FD16FFA8FD16FFA8FD16FF7DFD0CFFA8FD72FF%A8FD0CFF7DA8FD46FFA87D527D527D52FF52A85252A8FD1DFF7DA8FD0CFF%A8FD09FFC2BCFD3CFF7DFFFF7DFFFF7D7D52A87D52FD1FFFA8FD04FF527D%527D527DFFFF7DFD09FFBBBBFFFFBBCFFD38FFA87D527D527D52FF52A852%7DA8FD1EFFA8FD04FFA8527D527D7DFFFF7DA8FD0BFFCAFCC3FD62FFA87D%FD04FF527D527D527DFFFF7DFD09FFA2CBFD05FFC9C2FD36FFA8527D52FF%FF7D52A8FFFF7DFF7DFD1CFFA8FD0CFFA8FD09FFA29CFD05FFBBB5FD34FF%84FFFF7D7D7DA8FF7D7D7D52527D7DFD1DFFA8FD0CFF7DFD0DFFA2FD06FF%C2CAFD2FFF2F2FA8FF52A852A8FF7D527D527D7D7DFD1DFFA8FD0CFFA8FD%0CFFA878CBFD05FFFCC3FD2FFFAFA8FD2BFFA8FD0CFF7DFD05FFCAB5CAFF%A7ADFD06FFA8FFFFCAFD5DFFA8FF527DA8FD08FF7DA8FD05FFB5CFFF5E5E%FFAE5EAEFF9CA2FD36FFFD047DA8FF7D7DA8FFFF7DFF7DFD1BFFA8A8FFA8%7DFD09FF7DFD06FFA2FFFFAEFFFFCF57AEFFCBA8FD05FFC2FCFD2CFFBBBB%FFA8527DFF7DFF7D7D7D2752527DFD1DFFA8FF7D527DFD08FFA8FD05FFCB%71FD09FF8382FD05FFCAC2FD2CFFC9BCFFFD047DA8FF527D52FD047DFD1D%FF7DA8F8527DFD08FF7DFD10FF8357FFFF77A8FD5CFFA8FF527DA8FD08FF%A8FD09FF5227FD09FFA8FD06FFBBC2FD55FFA8FF7D52A8FD08FF7DFD09FF%7D7DFD09FFAEAEFD05FFB5C9FD28FF7D7DFF7D52A852FFFF7D52FFFFFF7D%FF7DFD1CFFA8FF7D7D7DFD08FFA8FD06FFAEFD05FFA852A8FD05FF3389FF%FFA2FD2CFF7DF8FF527D7DFF52FF7D7D5252527D52FD1DFFA8FFA852FF52%7D527D527DFFFF7DFD05FFA733A7FD04FFA827A8FD05FFAEA8FFA277FD05%FFCABCFD28FFA8527D52A8FF7D5252527D7D7DFD1DFFA8FF7D7DA8FFFD05%7DFFFFA8FD06FFAEFD09FF7D7DFD0CFFC2FCCFFFC2CAFD4EFFA8FF7D7DFF%FF7D527D527DFFFF7DA8A89493FFA827A8FD08FF7D52FD09FFA2FD06FFB4%B5FD24FFA8527D52FFFF7D52A8FFFF7DFF7DFD19FFA8A87DA8FF7D7D7DFD%08FF7DA8FF9BC3FFA827A8FD0FFFAD5EFFFF71A2FD28FF8333FFFF7D527D%A8FF527D7D52527D7DFD1CFFA87DFF7D52A8FD08FF7DFD17FF835EFD0CFF%C9B5CAFD1DFFA782FFFF52A852A8FF7D5252527D7D7DFD1DFFA8FF527DA8%FD08FF7DA8FD08FFC9C3FD09FFF87DFD08FFA89CFD05FFCAB4FFFFC9C3FD%46FFA8A8A87D52A8FD08FF7DA8FD08FFB5B5FFC3B4C3FD05FF7D7DFD05FF%3389FFCBA2FFFFA8A8FD05FFB4BBFD46FF7DA8FD0CFFA8FD0CFFC9C2C9FF%C9C9FD09FF89A7FD05FF77A8FD06FFCFFD1BFFA8FF52A87DFF52A8FF7D52%FFFFFF7DFF7DFD1BFFA8FFA87DA8FD08FF7DA8FD0FFFBC93FD05FF7D7DFD%2CFFA29CFF7D52FF52FF52FF527D5227527D52FD1BFF7DA8FF277D7DFD08%FFA8FD10FFC9C9FD05FF7DF8FD06FFCFFD0CFFCABCCAFD19FF7D7D7DA87D%7DFF7D7D7D527D7D7DFD1CFFA8FF7D27A8FD08FF7DFFFF9974FD1AFF8333%FFFF5E82FFA871FD05FFCAFCCAFFC9C2FD40FFA8FF7D7DA8FD08FF7DA8FF%99BBFFFFC2FD0DFFB4BCFD08FFCFADFFFF5EADFFFFA2FFFFCBCBFD05FFB5%BBFD16FF52FF52FF7DA8FF7D7DFFFFFF7DFF7DFD1AFFA87DFF7D7DFD09FF%7DFD05FFC2B5A0FD0CFFBCC2FD05FFF87DFD0CFF719CFD08FFCABBC9FD0F%FFBCBBFF7D7D5252FF52FF527D5227527D52FD1CFFA8FF7D7D7DFD08FFA8%FD1BFF7DA8FD08FFAE57FD0DFFFCC9FD0FFFC2B5FF7DA8277D7D7DFF7D7D%7D527D7D7DFD1CFFA8A8F8527DFD08FF7DA8FD08FF7E7EA8FD19FFA75EA8%FF8283FFFF77FD43FF7DA8FD0CFFA8FD09FF5A2FFD0CFFC2B5FD10FF8382%FFA878CBFF77A2FD05FFCAC3FD39FFA8FFF8F87DFFFFFD047DFFFF7DFD05%FFA85AA8FFA8FFFFAF2FA9FD08FFBCB5FD05FF7D27FD10FFCBA8FD05FFB5%FCFFFFC3FD36FFA8FF7D7DA8FFFFFF527D7DFFFFA8FD05FFA90DA9FD04FF%A8307EFD0FFF7D52FD18FFCAFFFFFCBCFD35FFA8FF7D52FFFFFF527D5252%FFFF7DA8FD04FFA8FFA9FD05FFA8FFFFFF84FD09FFBBC3FD05FF7D7DFD08%FFAE32AEFD0CFFC9FFFFC2FCFD31FF7DA8FF527D52FD08FFA8FD10FF2F2F%A8FD08FFB5BBFD05FF527DFD09FF83CFFFAEAEFFFFCBFD09FFC3BBFD32FF%7DFD0CFF7DFD10FFA97EFD13FFA8A8A8FD08FF5E57FFA871A8FD3CFFA8A8%527DA8FD08FFA8FFFFBBBCFD21FFA8F8A8FD08FFAEFD07FFA8FD09FFC2FD%2FFFA8FFA852FD09FF7DFFFFBBBBFD0FFFA85AA8FD0FFFA8A8A8FF5252FD%08FFA73382FF7777FD09FFFCBBFD2EFFA8FF527DA8FD08FF7DA8FF5A5AFD%10FF0785FD08FFBBB5FD09FF7D52FD09FF33AEFD0CFFCAFD2EFFA8A8FD0C%FF7DFFFF5A53FD11FFA8FD08FFC3BBFFFFC9C9FD13FFA8ADFD0CFFA7C2FF%FF93C2FD27FFA8FF527DA8FD08FFA8FD17FFA95AFD09FFBBC2FD13FF8233%FD0CFFC3FCCFFFBBBCFD27FFA8FFA87DFD09FF7DFD17FF5A2FA8FD08FFC9%C9FFC3BBC3FD04FFA8F8A8FD0CFF33A7FFCB77FD32FFA8FF7DF87DFD08FF%A8FD18FFA9FD0CFFC9B5C9FD04FFA87DA8FD0CFF82AEFF7D7DFD32FF7DA8%5252A8FD08FF7DFD1BFF7EFD14FF2727FD0CFF8333FD32FFA8FFA87DA8FD%08FFA8FD1AFFA8305AFD0CFFBBB5FD05FF7D7DFD1AFFC9FCC9FD23FFA8FF%7D52A8FD08FF7DFD1BFF84A9FD0CFFBCC2FD08FFA87DA8FD0CFF71A2FFA8%71FD05FFCFBBFFFFCACAFD20FFA8FF527DA8FFFFA8527D52FFFFA8FD33FF%7DF87DFD0CFF3383FFCB9CFD09FFB5BBFD20FFA8FF7D52A8FFFFFF7D527D%FFFF7DA8A8FD2AFFCA99CAFD04FFA87DA8FD0CFFAEA8FFA8ADFFFFA8FD06%FFCACAFD1DFFA8A87DA8FF7D7D7DFFFFFF7D7D52FFFF7DA8FD1EFFAFFD0C%FFC2B5C2FD16FFAD33FFFF9CA2FD09FFC2FD1CFFA8A8FF7D52FD09FF7DFD%1EFF7E07A9FD16FF7D7DFD0DFFAEFFFFA2FD09FFC3FCC3FFC9C9FD19FFA8%FF527DA8FD08FF7DA8FD1DFF7E7EFD10FFC3C9FD05FF7D27FFFF527DFD17%FFC9FFFFBBB4FD18FFA87DFF7D52A8FD08FF7DFD22FFA9FD0DFFBBB5FFA0%B5C2FD05FF52A8FD0CFF5EA7FFFFA2FD09FFCACFFD19FFA8FF527DA8FD08%FF7DA8FD21FF2F5AFD0CFFC3C9FFBCB5BCFD13FF5E82FFA871FD0DFFCACF%FD14FFA8A8FF7D277DFD08FF7DFD22FF7E7EFD1AFF7DF8FD1AFFC9FCC3FD%15FFA8FF7D7DA8FD08FF7DA8FD24FF852FA9FD16FFA87DFFFFA8FD0DFFCB%FD0AFFCACAFD14FFA8A8FFA87DA8FD08FF7DFD25FF7E2FA8FD0FFFBBB5FF%FFFCBCFD05FFF852FD08FFAE33CFFF7777FD20FFA8FF7D52A8FD08FF7DA8%FD36FFC9C2FFFFC2C3FD05FFA8FD09FFA75EAEFD05FF9CFD1CFFA8A8FFA8%52FD09FF7DFD29FF5A84FD1AFF7D7DFD0CFFA871A8FD08FFC2B5FD12FFA8%FF527DA8FD08FFA8FD29FF302FFD13FFC2C2FD05FF7DF8FFFF2752FD0CFF%CBA2FD05FFC2BBFFFFFCC3FD0EFF7DFF5252A8FD08FF7DA8FD28FFA8AFFD%13FFBC8CFD09FF7DA8FD05FF5E57FD05FFA2A2FD09FFBBA7FD0DFF7DA8FD%0CFFA8FD50FF83AEFFFF82FD1DFFA8A87D52A8FD04FF7D7DA8FF7DFD53FF%A833A8FF8282FFFFA2FD09FFCAC3FD0BFFA8FF527D7DFD05FF52FFFFA8FD%2DFFA9FD29FF835EFFCB71A8FD08FFC2FCFD0BFFA8FF7D27A8FD04FF7D7D%7DFF7DA8FD2BFF840784FD36FFCACAFD0AFF7DA8FF7D7DA8FD08FFA8FD2C%FFA884A9FD13FFB4C2FD2EFFA8FF7D277DFD08FF7DFD42FFC3C9FD17FF82%AEFD0CFFBCC9FD07FFA8FF7D7D7DFD08FFA8FD4CFFA8F87DFD0BFFAE5DA7%FD0CFFB4C2FD07FF7DFF7D7DFD09FF7DFD45FFC9C2FD06FF52A8FF5252FD%0CFFA271FD12FFA8FF7D7D7DFD08FF7DA8FD2FFF7E84FD13FFC2B4FD09FF%527DFD10FFCAFD0EFFA8A87D7D527DFD08FF7DFD30FF542FFD13FFC9C3FD%1BFF71A2FD0EFFA8A852A8A8FD08FFA8FD30FFA8FFFFFF7EFD14FFC9C9FD%27FFA8FD0CFF7DFD33FF840D59FD13FF93C2FD1AFFA89CFD0BFFA8FD0CFF%A8FD34FF84FD14FFC9C9FD13FFAEADFD05FFCB9CFD0BFFA8FD0CFF7DFD5E%FF8233FD12FFA8FD0CFFA8FD4CFFC9C2C9FD05FF52FD1DFF7DFD08FFA852%FFFF7DFD4CFFC3B4C2FD04FF7DF87DFD13FF77CBFD07FFA8FD09FF7DFFFF%7DFD16FFA8FD16FFA8FD16FFA8FD16FFA8FD0DFFA2A8FD07FF7DFD09FF7D%FFFF527D7DA87DA87DA87DA87D7D7DA87DA87D7D7DA87DA87D7D7DA87DA8%7D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D%7DA87DA87D7D7DA87DA87D7D7DA87DA87D7D7DA87DA87DA87DA87DA87DA8%7DA87DA87DA87DA87D7D7DA87DA87D7D7DA87DA87D7D7DA8FD047DFD8BFF%A852FD0AFFA87DFD09FF7D7DFD0AFF52A8FD0AFF7DFD0AFF7DA8FD09FF7D%7DFD0AFF527DFD09FF7D7DFD0AFF7D7DFD08FF7D7D7DFD0BFF7D7DFD0AFF%7D7DFD09FFA87DFD0AFF7D7DFD09FF7D52FD0AFF527DFD09FF527DFD0AFF%7DA8FD09FF527DFD0AFF527DFD07FFA8527D7DFD0BFF7D52FD0BFF52FD09%FF527DFD0AFF527DFD09FF7D27FD0AFF7D52FD09FF5252FD0AFF52FD0AFF%7D52FD0AFF7D7DFD08FF7D527DFDFCFFFDFCFFFD35FF527DFD04FFA8FFFF%FFA8FD05FF7DFD05FFA8FFFFA8FD06FF7DFD05FFA8FD05FF7DA8FFFFA8FD%4FFF7DFFF8525252F8527D7D7D527D527D527D27A827F8FF7D277D272727%A8277D5252527D2752FF7D277D527D2752525227A852FD4EFF527D7D7D27%7DF8FF7D7D7DFF7D52FD067DF8FF7D7D7D27FD047DF87D52FD047DFF7D7D%7DFF7D5252FD057DFD52FF7DFD05FF7DFD1FFFA852FD04FFA87DFDFCFFFD%24FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 50 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 40 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIDataProc null def	/XIVersion 6 def	/XIColorSpace /DeviceGray def	/XIColorValues 0 defendcurrentdict /_colorimage known not {	/colorimage where {		/colorimage get /_colorimage exch def	}{		/_colorimage null def	} ifelse} if/_image systemdict /image get def/_currenttransfer systemdict /currenttransfer get def/FourEqual {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual { 				/plateindex 0 def			}{				0 1 0 0 FourEqual { 					/plateindex 1 def				}{					0 0 1 0 FourEqual {						/plateindex 2 def					}{						0 0 0 1 FourEqual { 							/plateindex 3 def						}{							0 0 0 0 FourEqual {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/clrspaceissepn {	type /arraytype eq } def/clrspacegetname {	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse} def/clrspacegetalt {	aload pop pop pop colormake} def/clrspacegetcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/clrspacemarksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				/findcmykcustomcolor where {					pop					dup length 2 sub get					0.1 0.1 0.1 0.1 5 -1 roll					findcmykcustomcolor 1 setcustomcolor					systemdict /currentgray get exec					1 ne				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/colormake {	dup clrspacegetcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/colorexpand {	dup clrspacegetname exch	dup clrspaceissepn {		clrspacegetalt		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				clrspacegetalt colortint colortocmyk			} ifelse		} ifelse	} ifelse} def/makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/WalkRGBString {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/CMYKToGrayImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/SeparateCMYKImageProc {		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne {			sourcearray plateindex get exec		}{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub {				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/ColorImageCompositeEmulator {	pop true eq {		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse				load		 end		} if		image	} ifelse} def/colorimage {	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index end		dup 8 eq exch 1 eq or not {		/_colorimage load null ne {			_colorimage		}{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}{		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {			/_colorimage load null eq {				ColorImageCompositeEmulator			}{				dup 1 eq {					pop pop image				}{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {						grestore					} if				} ifelse			} ifelse		}{			dup 1 eq {				pop pop				image			}{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0 {									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace clrspacegetcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] makeimagedict _image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] makeimagedict _image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} stringapply			} concatprocs _image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} stringapply			} concatprocs false _pticomps			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse		} ifelse	} ifelse} def/graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray proctintimage} def/cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK proctintimage} def/rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB proctintimage} def/tintimage {	TestPlateIndex -1 eq {		colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop graytintimage		}{			dup /DeviceRGB eq {				pop rgbtintimage			}{				pop cmyktintimage			} ifelse		} ifelse	}{		dup clrspacemarksplate {			plateindex 5 lt {				colortocmyk plateindex get 1 exch sub				exch {1 0}{0 1} ifelse () graytintimage			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage			} ifelse		}{			pop pop pop			{pop 1} 0 1 () /DeviceGray proctintimage		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace tintimage} def/XIImage {	0 setgray	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIType 1 eq {			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH {	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEncoding 0 ne XIVersion 6 le and {			currentfile 128 string readline pop pop		} if		XICompression 0 eq {			/XIBuffer1 XIRowBytes string def			XIEncoding 0 eq {				{currentfile XIBuffer1 readhexstring pop}			}{				{currentfile XIBuffer1 readstring pop}			} ifelse		}{			/XIBuffer1 256 string def			/XIBuffer2 XIRowBytes string def			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}			/ASCIIHexDecode filter /DCTDecode filter			/XIFile exch def			{XIFile XIBuffer2 readstring pop}		} ifelse		/XIDataProc exch def				XIVersion 6 le {			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIType 1 eq {				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if		XIEnable {			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helveticauserdict /_useSmoothShade true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 0 TZ%AI3_EndEncoding TrueType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp13 Bn%AI5_BeginGradient: (Black, White Radial)(Black, White Radial) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 0 1 50 0 %_Bs0 0 0 1 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Copper)(Copper) 0 7 Bd[<5E5E5D5D5C5B5B5A5A595958585757565655555454535352525150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464645444443434242414140403F3F3E3E3D3D3C3C3B3B3A39393838373736363535343433333232313130302F2F2E2D2D2C2C2B2B2A2A292928282727262625252424232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919181817161615151414131312121111><9A9998989796959493929291908F8E8D8C8C8B8A8988878686858483828181807F7E7D7C7B7B7A79787776757574737271706F6F6E6D6C6B6A6969686766656463636261605F5E5D5D5C5B5A5958575756555453525151504F4E4D4C4B4B4A49484746454544434241403F3F3E3D3C3B3A3A39383736353434333231302F2E2E2D2C2B2A2928282726252423222221201F1E1D1C1C><B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D><12121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909080808080808080807070707070707070606060606060606050505050505050504040404040404040403030303030303030202020202020202010101010101010100000000>1 %_Br<737373737373737373737373737373737373737373737372727272727272727271717171717170707070706F6F6F6F6F6E6E6E6E6D6D6D6D6C6C6C6B6B6B6A6A6A69696968686767676666656564646463636262616160605F5F5E><BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABAAAAA9A9A8A7A7A6A5A4A4A3A2A2A1A09F9E9E9D9C9B9A><D9D9D9D9D9D9D9D9D9D9D9D9D8D8D8D8D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D5D5D5D5D4D4D4D3D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCBCBCACAC9C9C8C7C7C6C5C5C4C3C2C2C1C0BFBFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1><28282828282828272727272727272727272727272727272727262626262626262625252525252524242424242323232323222222212121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1A1A1A191918181717161615151414131312>1 %_Br<5E5F5F6060616162626364646565666667676868696A6A6B6B6C6C6D6D6E6E6F7070717172727373><9A9B9C9D9E9F9FA0A1A2A3A4A5A6A6A7A8A9AAABACADADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBBBC><B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9><12131314141516161717181819191A1A1B1C1C1D1D1E1E1F1F202021222223232424252526262728>1 %_Br<0001010202030304040505060607070809090A0A0B0B0C0C0D0D0E0E0F0F1010111212131314141515161617171818191A1A1B1B1C1C1D1D1E1E1F1F202021212223232424252526262727282829292A2B2B2C2C2D2D2E2E2F2F303031313232333434353536363737383839393A3A3B3C3C3D3D3E3E3F3F404041414242434344454546464747484849494A4A4B4B4C4D4D4E4E4F4F505051515252535354555556565757585859595A5A5B5B5C5C5D5E5E><00010203030405060708090A0A0B0C0D0E0F1011111213141516171818191A1B1C1D1E1E1F20212223242525262728292A2B2C2C2D2E2F3031323333343536373839393A3B3C3D3E3F4040414243444546474748494A4B4C4D4E4E4F50515253545455565758595A5B5B5C5D5E5F6061626263646566676869696A6B6C6D6E6F6F70717273747576767778797A7B7C7D7D7E7F80818283848485868788898A8A8B8C8D8E8F9091919293949596979898999A><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1><0000000000010101010101010101010202020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060607070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F101010101010101010111111111111111111111212121212121212>1 %_Br<24232222212120201F1F1E1D1D1C1C1B1B1A1919181817171615151414131312121110100F0F0E0E0D0C0C0B0B0A0A0908080707060605050403030202010100><3B3A39383737363534333231302F2E2D2C2B2A29282827262524232221201F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A0908080706050403020100><403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242322211F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><01010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<59595858585757575656565555555454545353535252525151515050504F4F4F4E4E4E4D4D4D4C4C4C4B4B4B4A4A4A4949494848484747474646464545454444444343434242424141414040403F3F3F3E3E3E3D3D3D3C3C3C3B3B3A3A3A3939393838383737373636363535353434343333333232323131313030302F2F2F2E2E2E2D2D2D2C2C2C2B2B2B2A2A2A292929282828272727262626252525242424><ADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929191908F8E8E8D8C8B8B8A89898887868685848483828181807F7F7E7D7C7C7B7A7A79787777767575747372727170706F6E6D6D6C6B6B6A69686867666665646363626161605F5E5E5D5C5C5B5A59595857565655545453525151504F4F4E4D4C4C4B4A4A49484747464545444342424140403F3E3D3D3C3B><DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140><0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A090909090909090909090908080808080808080808080707070707070707070707070606060606060606060606050505050505050505050504040404040404040404040303030303030303030303030202020202020202020202010101010101010101>1 %_Br[0.0656 0.1081 0.1138 0.0003 1 50 100 %_Bs0.3689 0.6046 0.6942 0.0716 1 50 85 %_Bs0.4526 0.7386 0.8504 0.1551 1 73.9136 75 %_Bs0.3689 0.6046 0.6942 0.0716 1 50 63 %_Bs0 0 0 0 1 50 34 %_Bs0.1397 0.2324 0.251 0.0029 1 50 14 %_Bs0.3494 0.6791 0.8753 0.0583 1 50 2 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302>0.9882<0505050505050505050505050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080808080808080808080808>01 %_Br<E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9><1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC><0909090909090909090909090909090909090909090909090909090909090808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080807070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505>01 %_Br<ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8><131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09>01 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC><05050505050505050506060606060606060606060606060606070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101010101111111111111111111111111111111112121212121212121212121212121212131313131313131313><E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF>01 %_Br<03030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808><F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605>0.913701 %_Br[0.0078 0.9882 0.0314 0 1 50 100 %_Bs0.9765 0.9882 0.0196 0 1 50 80 %_Bs0.9098 0.0784 0.0353 0 1 50 60 %_Bs0.9255 0.0745 0.9373 0 1 50 40 %_Bs0.0314 0.0196 0.9137 0 1 50 20 %_Bs0.0118 0.9608 0.9137 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Tropical Sunset)(Tropical Sunset) 0 5 Bd[0<BFBEBDBCBBBAB9B8B7B6B5B4B3B2B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C9B9A9A99989796959493939291908F8E8E8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A7A79787777767575747372727170706F6E6D6D6C6B6B6A696968676766666564646362626161605F5F5E5E5D5C5C5B5B5A5A595858575756565555545453535252515150504F4F4E4E4D4D4D4C4C4B4B4B4A4A49494948484747474646464545454444444443434343424242424141414141414040404040404040><BFBFBFBFBFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7>01 %_Br<08080808080808080808080807070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060505050505050505050505050505050505050505050505040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020101010101010101010101010101010101010101010101000000000000000000000000><05060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF><E9E9E9E8E8E8E8E7E7E7E7E7E6E6E6E6E5E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E2E1E1E1E1E0E0E0E0E0DFDFDFDFDEDEDEDEDEDDDDDDDDDCDCDCDCDCDBDBDBDBDADADADADAD9D9D9D9D8D8D8D8D7D7D7D7D7D6D6D6D6D5D5D5D5D5D4D4D4D4D3D3D3D3D3D2D2D2D2D1D1D1D1D1D0D0D0D0CFCFCFCFCFCECECECECDCDCDCDCCCCCCCCCCCBCBCBCBCACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C6C6C5C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C1C0C0C0C0BFBF>01 %_Br<202020201F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A191919191919191919181818181818181818181717171717171717171716161616161616161616151515151515151515151414141414141414141313131313131313131312121212121212121212111111111111111111111010101010101010100F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A090909090909090909090808080808><696868676766666665656464636363626261616060605F5F5E5E5D5D5D5C5C5B5B5A5A5A59595858575757565655555454545353525251515150504F4F4E4E4E4D4D4C4C4B4B4B4A4A4949494848474746464645454444434343424241414040403F3F3E3E3D3D3D3C3C3B3B3A3A3A39393838373737363635353434343333323231313130302F2F2E2E2E2D2D2C2C2B2B2B2A2A29292828282727262625252524242323222222212120201F1F1F1E1E1D1D1C1C1C1B1B1A1A1A19191818171717161615151414141313121211111110100F0F0E0E0E0D0D0C0C0B0B0B0A0A0909080808070706060505><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9>01 %_Br<CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120><000101020203040405050607070809090A0A0B0C0C0D0D0E0F0F101011121213131415151616171818191A1A1B1B1C1D1D1E1E1F20202121222323242425262627282829292A2B2B2C2C2D2E2E2F2F303131323233343435353637373839393A3A3B3C3C3D3D3E3F3F404041424243434445454647474848494A4A4B4B4C4D4D4E4E4F50505151525353545455565657585859595A5B5B5C5C5D5E5E5F5F606161626263646465666667676869>001 %_Br[0 0.25 0.78 0 1 50 100 %_Bs0 0.75 0.75 0 1 35.5263 57.3034 %_Bs0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs0.125 0.41 0 0 1 50 44.9438 %_Bs0.8 0 0 0 1 50 19.1011 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient)(Unnamed gradient) 0 6 Bd[<F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302>0.9882<0505050505050505050505050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080808080808080808080808><0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9><1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC><0909090909090909090909090909090909090909090909090909090909090808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080807070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505>0.00391 %_Br<ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8><131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09><030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101>1 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC><05050505050505050506060606060606060606060606060606070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101010101111111111111111111111111111111112121212121212121212121212121212131313131313131313><E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF><00000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030303030303030303030303030303>1 %_Br<03030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808><F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605>0.913701 %_Br[0.0078 0.9882 0.0314 0 1 50 100 %_Bs0.9765 0.9882 0.0196 0.0039 1 50 80 %_Bs0.9098 0.0784 0.0353 0.0039 1 50 60 %_Bs0.9255 0.0745 0.9373 0.0118 1 50 40 %_Bs0.0314 0.0196 0.9137 0 1 50 20 %_Bs0.0118 0.9608 0.9137 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 1 6 Bd[<03030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808><F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605>0.913701 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC><05050505050505050506060606060606060606060606060606070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101010101111111111111111111111111111111112121212121212121212121212121212131313131313131313><E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF><00000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030303030303030303030303030303>1 %_Br<ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8><131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09><030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101>1 %_Br<E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9><1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC><0909090909090909090909090909090909090909090909090909090909090808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080807070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505>0.00391 %_Br<F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302>0.9882<0505050505050505050505050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080808080808080808080808><0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br[0.0118 0.9608 0.9137 0 1 50 0 %_Bs0.0314 0.0196 0.9137 0 1 50 20 %_Bs0.9255 0.0745 0.9373 0.0118 1 50 40 %_Bs0.9098 0.0784 0.0353 0.0039 1 50 60 %_Bs0.9765 0.9882 0.0196 0.0039 1 50 80 %_Bs0.0078 0.9882 0.0314 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 12)(Unnamed gradient 12) 0 5 Bd[<040506070809090A0B0C0D0E0F10111213141415161718191A1B1C1D1E1E1F20212223242526272828292A2B2C2D2E2F30313233333435363738393A3B3C3D3D3E3F40414243444546474848494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F60616263646566676768696A6B6C><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041424344454648494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F8081><DEDEDEDFDFDFDFDFDFE0E0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E2E3E3E3E3E3E3E4E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E6E7E7E7E7E7E7E8E8E8E8E8E9E9E9E9E9E9EAEAEAEAEAEAEBEBEBEBEBECECECECECECEDEDEDEDEDEDEEEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F0F1F1F1F1F1F1F2F2F2><0001020203040506060708090A0A0B0C0D0E0E0F1011121213141516161718191A1A1B1C1D1E1E1F2021222223242526262728292A2A2B2C2D2E2E2F303131323334353536373839393A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F505151525354555556575859595A5B>1 %_Br<6C6B6A69686767666564636261605F5E5D5C5C5B5A59585756555453525251504F4E4D4C4B4A49484847464544434241403F3E3D3D3C3B3A39383736353433333231302F2E2D2C2B2A29282827262524232221201F1E1E1D1C1B1A19181716151414131211100F0E0D0C0B0A09090807060504><81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><F2F2F2F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDEDECECECECECECEBEBEBEBEBEAEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E7E7E7E7E7E7E6E6E6E6E6E6E5E5E5E5E5E4E4E4E4E4E4E3E3E3E3E3E3E2E2E2E2E2E2E1E1E1E1E1E0E0E0E0E0E0DFDFDFDFDFDFDEDEDE><5B5A595958575655555453525151504F4E4D4D4C4B4A494948474645454443424141403F3E3D3D3C3B3A393938373635353433323131302F2E2E2D2C2B2A2A2928272626252423222221201F1E1E1D1C1B1A1A1918171616151413121211100F0E0E0D0C0B0A0A090807060605040302020100>1 %_Br<040506070809090A0B0C0D0E0F10111213141415161718191A1B1C1D1E1E1F20212223242526272828292A2B2C2D2E2F30313233333435363738393A3B3C3D3D3E3F40414243444546474848494A4B4C4D4E4F50515252535455565758595A5B5C5C5D5E5F60616263646566676768696A6B6C><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F4041424344454648494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F8081><DEDEDEDFDFDFDFDFDFE0E0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E2E3E3E3E3E3E3E4E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E6E7E7E7E7E7E7E8E8E8E8E8E9E9E9E9E9E9EAEAEAEAEAEAEBEBEBEBEBECECECECECECEDEDEDEDEDEDEEEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F0F1F1F1F1F1F1F2F2F2><0001020203040506060708090A0A0B0C0D0E0E0F1011121213141516161718191A1A1B1C1D1E1E1F2021222223242526262728292A2A2B2C2D2E2E2F303131323334353536373839393A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F505151525354555556575859595A5B>1 %_Br<6C6B6A69686767666564636261605F5E5D5C5C5B5A59585756555453525251504F4E4D4C4B4A49484847464544434241403F3E3D3D3C3B3A39383736353433333231302F2E2D2C2B2A29282827262524232221201F1E1E1D1C1B1A19181716151414131211100F0E0D0C0B0A09090807060504><81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E><F2F2F2F1F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDEDECECECECECECEBEBEBEBEBEAEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E7E7E7E7E7E7E6E6E6E6E6E6E5E5E5E5E5E4E4E4E4E4E4E3E3E3E3E3E3E2E2E2E2E2E2E1E1E1E1E1E0E0E0E0E0E0DFDFDFDFDFDFDEDEDE><5B5A595958575655555453525151504F4E4D4D4C4B4A494948474645454443424141403F3E3D3D3C3B3A393938373635353433323131302F2E2E2D2C2B2A2A2928272626252423222221201F1E1E1D1C1B1A1A1918171616151413121211100F0E0E0D0C0B0A0A090807060605040302020100>1 %_Br[0.4235 0.5059 0.949 0.3569 1 50 100 %_Bs0.0157 0.0549 0.8706 0 1 50 78.0899 %_Bs0.4235 0.5059 0.949 0.3569 1 50 53.9326 %_Bs0.0157 0.0549 0.8706 0 1 50 28.0899 %_Bs0.4235 0.5059 0.949 0.3569 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 27)(Unnamed gradient 27) 1 4 Bd[<3333333434343535353636363737383839393A3A3B3B3C3C3D3D3E3F3F404041414243434445454646474848494A4A4B4C4D4D4E4F4F505151525354545556575758595A5A5B5C5D5E5E5F6061626263646566666768696A6B6B6C6D6E6F7071717273747576777878797A7B7C7D7E7F80818282838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9E9FA0A1A2A3><3333333434343535353636363737383839393A3A3B3B3C3C3D3D3E3F3F404041414243434445454646474848494A4A4B4C4D4D4E4F4F505151525354545556575758595A5A5B5C5D5E5E5F6061626263646566666768696A6B6B6C6D6E6F7071717273747576777878797A7B7C7D7E7F80818282838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9E9FA0A1A2A3><3333333434343535353636363737383839393A3A3B3B3C3C3D3D3E3F3F404041414243434445454646474848494A4A4B4C4D4D4E4F4F505151525354545556575758595A5A5B5C5D5E5E5F6061626263646566666768696A6B6B6C6D6E6F7071717273747576777878797A7B7C7D7E7F80818282838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9E9FA0A1A2A3><3333333434343535353636363737383839393A3A3B3B3C3C3D3D3E3F3F404041414243434445454646474848494A4A4B4C4D4D4E4F4F505151525354545556575758595A5A5B5C5D5E5E5F6061626263646566666768696A6B6B6C6D6E6F7071717273747576777878797A7B7C7D7E7F80818282838485868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9E9FA0A1A2A3>1 %_Br<A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC><A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC><A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC><A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCC>1 %_Br<CCCAC8C6C4C2C0BEBCBBB9B7B6B4B3B1B0AEADABAAA9A7A6A5A4A3A1A09F9E9D9C9B9A99999897969594949392929190908F8E8E8D8D8C8C8B8B8A8A8A8989888888878787868686858585858484848484838383838382828282828282818181818181818181818181808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080><CCCAC8C6C4C2C0BEBCBBB9B7B6B4B3B1B0AEADABAAA9A7A6A5A4A3A1A09F9E9D9C9B9A99999897969594949392929190908F8E8E8D8D8C8C8B8B8A8A8A8989888888878787868686858585858484848484838383838382828282828282818181818181818181818181808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080><CCCAC8C6C4C2C0BEBCBBB9B7B6B4B3B1B0AEADABAAA9A7A6A5A4A3A1A09F9E9D9C9B9A99999897969594949392929190908F8E8E8D8D8C8C8B8B8A8A8A8989888888878787868686858585858484848484838383838382828282828282818181818181818181818181808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080><CCCAC8C6C4C2C0BEBCBBB9B7B6B4B3B1B0AEADABAAA9A7A6A5A4A3A1A09F9E9D9C9B9A99999897969594949392929190908F8E8E8D8D8C8C8B8B8A8A8A8989888888878787868686858585858484848484838383838382828282828282818181818181818181818181808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080>1 %_Br[0.2 0.2 0.2 0.2 1 59.434 0 %_Bs0.64 0.64 0.64 0.64 1 50 60 %_Bs0.8 0.8 0.8 0.8 1 13 60.5 %_Bs0.5 0.5 0.5 0.5 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 29)(Unnamed gradient 29) 1 3 Bd[0.10.10.10.11 %_Br<1A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F3031313233343536373839393A3B3C3D3E3F404041424344454546474849494A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E5F5F606161626363646465666667676869696A6A6B6B6C6D6D6E6E6F6F70707171727273737474747575767677777778787979797A7A7A7B7B7B7C7C7C7D7D7D7D7E7E7E7E7E7F7F7F7F7F7F7F7F80><1A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F3031313233343536373839393A3B3C3D3E3F404041424344454546474849494A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E5F5F606161626363646465666667676869696A6A6B6B6C6D6D6E6E6F6F70707171727273737474747575767677777778787979797A7A7A7B7B7B7C7C7C7D7D7D7D7E7E7E7E7E7F7F7F7F7F7F7F7F80><1A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F3031313233343536373839393A3B3C3D3E3F404041424344454546474849494A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E5F5F606161626363646465666667676869696A6A6B6B6C6D6D6E6E6F6F70707171727273737474747575767677777778787979797A7A7A7B7B7B7C7C7C7D7D7D7D7E7E7E7E7E7F7F7F7F7F7F7F7F80><1A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F3031313233343536373839393A3B3C3D3E3F404041424344454546474849494A4B4C4D4D4E4F50505152535354555656575858595A5B5B5C5D5D5E5F5F606161626363646465666667676869696A6A6B6B6C6D6D6E6E6F6F70707171727273737474747575767677777778787979797A7A7A7B7B7B7C7C7C7D7D7D7D7E7E7E7E7E7F7F7F7F7F7F7F7F80>1 %_Br[0.1 0.1 0.1 0.1 1 50 0 %_Bs0.1 0.1 0.1 0.1 1 35.5932 4 %_Bs0.5 0.5 0.5 0.5 1 50 25.2809 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 4)(Unnamed gradient 4) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 55)(Unnamed gradient 55) 1 4 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2C2D2E2F303132333435363738393A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515152535455565758595A5B5C5C5D5E5F60616263646565666768696A6B6C6C6D6E6F7071727373747576777878797A7B7C7D7D7E7F80808182838484858686878889898A><000001010101020202030303030404040505050506060607070707080808090909090A0A0A0B0B0B0B0C0C0C0D0D0D0D0E0E0E0E0F0F0F101010101111111112121213131313141414141515151616161617171717181818181919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F202020202121212122222222232323232424242424252525252626262626272727272728>001 %_Br<8A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C2C3C4C5C6C7C8C9CACACBCC><282828282929292A2A2A2A2B2B2B2C2C2C2D2D2D2D2E2E2E2F2F2F2F303030313131313232323233333334343434353535363636363737373738383838393939393A3A3A3A3B>001 %_Br<CCCCCCCCCCCDCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D1D1D1D1D2D2D2D3D3D3D3D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9DADADBDBDBDCDCDCDDDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBECECECEDEDEEEEEFEFEFF0F0F1F1F2F2F3F3F3F4F4F5F5F6F6F7F7F8F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF><3B3B3B3B3C3C3C3D3D3D3E3E3F3F3F4040414142424343444445464647474848494A4A4B4C4C4D4D4E4F4F50515152535354555656575858595A5B5B5C5D5E5E5F606161626364656566676869696A6B6C6D6D6E6F7071727373747576777879797A7B7C7D7E7F80818182838485868788898A8B8C8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6>001 %_Br[0 0 0 0 1 46.6667 9.4444 %_Bs0.54 0.1552 0 0 1 48.0769 43.3333 %_Bs0.8 0.23 0 0 1 59.6154 71.1111 %_Bs1 0.65 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Violet Eye)(Violet Eye) 1 5 Bd[<FFFFFFFFFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9><FFFEFEFDFCFCFBFAFAF9F9F8F7F7F6F6F5F4F4F3F3F2F1F1F0F0EFEEEEEDEDECECEBEAEAE9E9E8E8E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACACAC9C9C8C8C8C7C7C7C6C6C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBABABABAB9B9B9B8B8B8B8B7B7B7B7B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B2B1B1B1B1B0B0B0B0AFAFAFAFAFAEAEAEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A3A2A2A2A2A2A2A2A2A2A1A1A1A1A1A1A1A1A1A0A0A0A0A0A0A0A0A0A09F9F9F9F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E9E9E9E9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9B9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898989898><060606060606060606060606060605050505050505050505050505050505050505050505050505050505050504040404040404040404040404040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><FFFDFCFAF9F7F5F4F2F1EFEEECEBE9E8E6E5E3E2E0DFDDDCDAD9D7D6D5D3D2D0CFCECCCBC9C8C7C5C4C3C1C0BFBDBCBBBAB8B7B6B5B3B2B1B0AEADACABAAA8A7A6A5A4A2A1A09F9E9D9C9A999897969594939291908F8D8C8B8A898887868584838281807F7E7D7C7C7B7A79787776757473727170706F6E6D6C6B6A6A6968676665656463626161605F5E5D5D5C5B5A5A59585757565555545352525150504F4E4E4D4C4C4B4A4A494848474646454544434342424140403F3F3E3D3D3C3C3B3B3A3A39393837373636353534343333323231313030302F2F2E2E2D2D2C2C2B2B2B2A2A29292828282727262626252524242423232322222121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A191919181818181717171616161615151515141414141313131312121212111111111110101010100F0F0F0F0F0E0E0E0E0E0D0D0D0D0D0D0C0C0C0C0C0B0B0B0B0B0B0B0A0A0A0A0A0A09090909090909090808080808080808070707070707070706060606060606060606050505050505050505050504040404040404040404040404040303030303030303030303030303030302020202020202020202020202020202020202020202010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<E9E9E9E9E9E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDDDCDCDCDCDC><9897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625>001 %_Br<DCDCDCDCDBDBDBDBDBDADADAD9D9D9D8D8D8D7D7D7D6D6D5D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCECECDCDCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B2B2B1B0B0AFAEADADACABAAAAA9A8A7A7A6A5A4A4A3A2A1A1A09F9E9D9D9C9B9A9999989796959494939291908F><252525252626262627272728282829292A2A2A2B2B2C2C2D2D2E2E2F2F30303131323233343435353637373838393A3A3B3C3C3D3E3E3F40404142434344454646474849494A4B4C4C4D4E4F505051525354545556575859595A5B5C5D5E5F5F60616263646566676868696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101020202020202020202020202020202>01 %_Br<8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><807F7E7D7C7B7A79787777767574737271706F6F6E6D6C6B6A69686767666564636261605F5F5E5D5C5B5A59585756565554535251504F4E4E4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39383736353534333231302F2E2D2D2C2B2A29282726252524232221201F1E1D1D1C1B1A19181716151514131211100F0E0D0C0C0B0A0908070605040403020100><020202020202020202020202020202020202020202020201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000>01 %_Br[1 1 0.0235 1 1 16.6667 25.8427 %_Bs0.9137 0.5961 0 0 1 50 49.4382 %_Bs0.8627 0.1451 0 0 1 61.5385 64.6067 %_Bs0.5623 0.5 0.007 0 1 50 70.2247 %_Bs0 0 0 0 1 50 78.6517 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 1 1 50 100 %_Bs0 0 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Azure Rings)(Azure Rings) 22.5 22.5 58.5 58.5 [%AI3_Tile(0 O 0 R 0.9569 0.9294 0 0 k 0.9569 0.9294 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1.75 w 4 M []0 d0 XR40.5 58.5 m40.5 48.5586 32.4409 40.5 22.5 40.5 c12.5591 40.5 4.5 48.5586 4.5 58.5 c4.5 68.4414 12.5591 76.5 22.5 76.5 c32.4409 76.5 40.5 68.4414 40.5 58.5 cs40.5 22.5 m40.5 12.5586 32.4409 4.5 22.5 4.5 c12.5591 4.5 4.5 12.5586 4.5 22.5 c4.5 32.4414 12.5591 40.5 22.5 40.5 c32.4409 40.5 40.5 32.4414 40.5 22.5 cs40.5 40.5 m40.5 30.5586 32.4409 22.5 22.5 22.5 c12.5591 22.5 4.5 30.5586 4.5 40.5 c4.5 50.4414 12.5591 58.5 22.5 58.5 c32.4409 58.5 40.5 50.4414 40.5 40.5 cs58.5 58.5 m58.5 48.5586 50.4409 40.5 40.5 40.5 c30.5591 40.5 22.5 48.5586 22.5 58.5 c22.5 68.4414 30.5591 76.5 40.5 76.5 c50.4409 76.5 58.5 68.4414 58.5 58.5 cs58.5 22.5 m58.5 12.5586 50.4409 4.5 40.5 4.5 c30.5591 4.5 22.5 12.5586 22.5 22.5 c22.5 32.4414 30.5591 40.5 40.5 40.5 c50.4409 40.5 58.5 32.4414 58.5 22.5 cs58.5 40.5 m58.5 30.5586 50.4409 22.5 40.5 22.5 c30.5591 22.5 22.5 30.5586 22.5 40.5 c22.5 50.4414 30.5591 58.5 40.5 58.5 c50.4409 58.5 58.5 50.4414 58.5 40.5 cs76.5 58.5 m76.5 48.5586 68.4409 40.5 58.5 40.5 c48.5591 40.5 40.5 48.5586 40.5 58.5 c40.5 68.4414 48.5591 76.5 58.5 76.5 c68.4409 76.5 76.5 68.4414 76.5 58.5 cs76.5 22.5 m76.5 12.5586 68.4409 4.5 58.5 4.5 c48.5591 4.5 40.5 12.5586 40.5 22.5 c40.5 32.4414 48.5591 40.5 58.5 40.5 c68.4409 40.5 76.5 32.4414 76.5 22.5 cs76.5 40.5 m76.5 30.5586 68.4409 22.5 58.5 22.5 c48.5591 22.5 40.5 30.5586 40.5 40.5 c40.5 50.4414 48.5591 58.5 58.5 58.5 c68.4409 58.5 76.5 50.4414 76.5 40.5 cs%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Camouflage)(Camouflage) 1 1 73 73 [%AI3_Tile(0 O 0 R 0.6 0.1412 0.9373 0.0275 k 0.6 0.1412 0.9373 0.0275 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 73 m1 1 L73 1 L73 73 L1 73 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.3529 0.9529 0.2 k 0.4941 0.3529 0.9529 0.2 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR18.5449 73 m18.5449 1 L46.7832 1 L46.7832 73 L18.5449 73 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1882 0.1098 0.9059 0.0157 k 0.1882 0.1098 0.9059 0.0157 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR11.9512 1 m11.9512 4.7129 9.2314 2.8813 9.2314 6.5938 c9.2314 10.2334 4.25 10.2334 4.25 13.8735 c4.25 17.4858 10.0313 17.4858 10.0313 21.0991 c10.0313 24.832 10.208 24.832 10.208 28.5654 c10.208 32.3071 5.5205 32.3071 5.5205 36.0469 c5.5205 39.7021 11.8838 39.7021 11.8838 43.356 c11.8838 47.0566 7.4609 47.0566 7.4609 50.7568 c7.4609 54.4043 5.7959 54.4043 5.7959 58.0542 c5.7959 61.7686 4.6631 61.7686 4.6631 65.4805 c4.6631 69.1636 11.9512 69.3184 11.9512 73 C27.9268 73 L27.9268 69.3184 22.0635 69.1636 22.0635 65.4805 c22.0635 61.7686 28.6631 61.7686 28.6631 58.0542 c28.6631 54.4043 25.1553 54.4043 25.1553 50.7568 c25.1553 47.0566 28.8145 47.0566 28.8145 43.356 c28.8145 39.7021 22.1191 39.7021 22.1191 36.0469 c22.1191 32.3071 26.3945 32.3071 26.3945 28.5654 c26.3945 24.832 24.4248 24.832 24.4248 21.0991 c24.4248 17.4858 20.3838 17.4858 20.3838 13.8735 c20.3838 10.2334 24.6055 10.2334 24.6055 6.5938 c24.6055 2.8813 27.9268 4.7129 27.9268 1 C11.9512 1 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.9216 0.2157 0.9451 0.0745 k 0.9216 0.2157 0.9451 0.0745 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR41.875 1 m41.875 4.7134 42.3867 2.8818 42.3867 6.5938 c42.3867 10.2334 40.5947 10.2334 40.5947 13.8735 c40.5947 17.4858 41.5742 17.4858 41.5742 21.0991 c41.5742 24.832 43.6484 24.832 43.6484 28.5659 c43.6484 32.3076 39.1709 32.3076 39.1709 36.0469 c39.1709 39.7026 39.7549 39.7026 39.7549 43.356 c39.7549 47.0566 45.3896 47.0566 45.3896 50.7568 c45.3896 54.4043 40.1055 54.4043 40.1055 58.0542 c40.1055 61.7686 40.6289 61.7686 40.6289 65.4805 c40.6289 69.1636 41.875 69.3184 41.875 73 C59.0752 73 L59.0752 69.4219 53.4805 70.1934 53.4805 66.6143 c53.4805 62.9136 55.8945 62.9136 55.8945 59.2153 c55.8945 55.502 61.0059 55.502 61.0059 51.7886 c61.0059 48.1489 60.5635 48.1489 60.5635 44.5103 c60.5635 40.897 59.9277 40.897 59.9277 37.2842 c59.9277 33.5508 56.3662 33.5508 56.3662 29.8169 c56.3662 26.0762 61.0908 26.0762 61.0908 22.3354 c61.0908 18.6812 52.6025 18.6812 52.6025 15.0264 c52.6025 11.3262 55.7461 11.3262 55.7461 7.6265 c55.7461 3.978 59.0752 4.6484 59.0752 1 C41.875 1 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Honeycomb)(Honeycomb) 12.9819 14.6548 65.8066 60.6758 [%AI3_Tile(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR64.0161 21.3906 m64.0161 7.9009 L52.3345 1.1543 L40.6475 7.9009 L40.6475 21.3906 L52.3345 28.1372 L64.0161 21.3906 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.9536 19.4839 m43.9536 9.8081 L52.3345 4.9702 L60.7153 9.8081 L60.7153 19.4839 L52.3345 24.3218 L43.9536 19.4839 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR37.479 21.394 m37.479 7.9014 L25.7944 1.1548 L14.1099 7.9014 L14.1099 21.3911 L25.7944 28.1406 L37.479 21.394 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR17.4126 19.4839 m17.4126 9.8081 L25.7944 4.9702 L34.1743 9.8081 L34.1743 19.4839 L25.7944 24.3218 L17.4126 19.4839 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR24.3691 44.0386 m24.3691 30.5459 L12.6846 23.7993 L1 30.5459 L1 44.0356 L12.6846 50.7852 L24.3691 44.0386 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR4.3027 42.1284 m4.3027 32.4526 L12.6846 27.6147 L21.0645 32.4526 L21.0645 42.1284 L12.6846 46.9663 L4.3027 42.1284 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR77.2871 44.3774 m77.2871 30.8843 L65.603 24.1382 L53.9185 30.8843 L53.9185 44.3765 L65.603 51.1226 L77.2871 44.3774 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR57.2202 42.4692 m57.2202 32.7915 L65.603 27.9536 L73.9819 32.7915 L73.9819 42.4692 L65.603 47.3081 L57.2202 42.4692 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR50.7471 44.3774 m50.7471 30.8843 L39.0649 24.1382 L27.3774 30.8843 L27.3774 44.3765 L39.0649 51.1235 L50.7471 44.3774 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR30.6821 42.4692 m30.6821 32.7915 L39.0649 27.9517 L47.4438 32.7915 L47.4438 42.4702 L39.0649 47.3091 L30.6821 42.4692 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR37.479 67.3599 m37.479 53.8682 L25.7944 47.1221 L14.1099 53.8682 L14.1099 67.3599 L25.7944 74.1074 L37.479 67.3599 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR17.4126 65.4526 m17.4126 55.7749 L25.7944 50.937 L34.1743 55.7749 L34.1772 65.4526 L25.7944 70.2905 L17.4126 65.4526 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.4235 0.5059 0.949 0.3569 k 0.4235 0.5059 0.949 0.3569 K) @(%AI6_BeginPatternLayer0 J 0 j 2 w 4 M []0 d0 XR64.0161 67.3599 m64.0161 53.8682 L52.3345 47.1221 L40.6475 53.8682 L40.6475 67.3599 L52.3345 74.1074 L64.0161 67.3599 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.2 0.4627 0.9922 0.0627 k 0.2 0.4627 0.9922 0.0627 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.9536 65.4526 m43.9536 55.7749 L52.3345 50.937 L60.7153 55.7749 L60.7153 65.4526 L52.3345 70.2905 L43.9536 65.4526 Ls%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Jungle Stripes)(Jungle Stripes) 37 19 73 55 [%AI3_Tile(0 O 0 R 1 0 1 0 k 1 0 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 18 w 4 M []0 d0 XR37 37 m73 37 lS%AI6_EndPatternLayer) &(0 O 0 R 0.3451 0 0.6863 0 k 0.3451 0 0.6863 0 K) @(%AI6_BeginPatternLayer0 J 0 j 9 w 4 M []0 d0 XR37 37 m73 37 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Mediterranean Tiles)(Mediterranean Tiles) 4.9482 11.5332 39.291 45.8818 [%AI3_Tile(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR0.1499 40.748 m10.0083 40.749 L16.9673 33.79 L16.9702 23.9297 L10.0093 16.9697 L0.1509 16.9688 L0.1499 40.748 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR0.1499 40.748 m10.0083 40.749 L16.9673 33.79 L16.9702 23.9297 L10.0093 16.9697 L0.1509 16.9688 L0.1499 40.748 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9712 0.1504 m10.0122 7.1094 L10.0093 16.9697 L16.9702 23.9297 L26.8296 23.9307 L33.7915 16.9727 L33.7915 7.1123 L26.8335 0.1514 L16.9712 0.1504 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9712 0.1504 m10.0122 7.1094 L10.0093 16.9697 L16.9702 23.9297 L26.8296 23.9307 L33.7915 16.9727 L33.7915 7.1123 L26.8335 0.1514 L16.9712 0.1504 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9673 33.79 m10.0083 40.749 L10.0054 50.6084 L16.9663 57.5693 L26.8257 57.5703 L33.7876 50.6113 L33.7876 40.752 L26.8296 33.791 L16.9673 33.79 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR16.9673 33.79 m10.0083 40.749 L10.0054 50.6084 L16.9663 57.5693 L26.8257 57.5703 L33.7876 50.6113 L33.7876 40.752 L26.8296 33.791 L16.9673 33.79 Ls%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR33.7915 16.9727 m26.8296 23.9307 L26.8296 33.791 L33.7876 40.752 L43.6475 40.7529 L50.6094 33.7939 L50.6094 23.9336 L43.6494 16.9736 L33.7915 16.9727 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.57 0.75 0 0 k 0.57 0.75 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 0.3 w 4 M []0 d0 XR33.7915 16.9727 m26.8296 23.9307 L26.8296 33.791 L33.7876 40.752 L43.6475 40.7529 L50.6094 33.7939 L50.6094 23.9336 L43.6494 16.9736 L33.7915 16.9727 Ls%AI6_EndPatternLayer) &(0 O 0 R 0.9725 0.9451 0 0 k 0.9725 0.9451 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR43.6514 7.1123 m43.6514 16.9727 L33.7915 16.9727 L33.7915 7.1123 L43.6514 7.1123 Lf26.8296 23.9307 m26.8296 33.791 L16.9702 33.791 L16.9702 23.9307 L26.8296 23.9307 Lf10.0093 7.1094 m10.0093 16.9697 L0.1538 16.9697 L0.1538 7.1094 L10.0093 7.1094 Lf43.6494 40.752 m43.6494 50.6113 L33.7876 50.6113 L33.7876 40.752 L43.6494 40.752 Lf10.0083 40.749 m10.0083 50.6084 L0.1499 50.6084 L0.1499 40.749 L10.0083 40.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Pyramids)(Pyramids) 1 1 19.5 19.5 [%AI3_Tile(0 O 0 R 0.1882 0.1294 0.102 0.0118 k 0.1882 0.1294 0.102 0.0118 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 19.5 m10.25 10.25 l19.5 19.5 l1 19.5 lf%AI6_EndPatternLayer) &(0 O 0 R 0.6235 0.4863 0.4863 0.4784 k 0.6235 0.4863 0.4863 0.4784 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR19.5 1 m10.25 10.25 l1 1 l19.5 1 lf%AI6_EndPatternLayer) &(0 O 0 R 0.3529 0.2549 0.2235 0.0667 k 0.3529 0.2549 0.2235 0.0667 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR1 1 m10.25 10.25 l1 19.5 l1 1 lf%AI6_EndPatternLayer) &(0 O 0 R 0.4902 0.3647 0.3451 0.2196 k 0.4902 0.3647 0.3451 0.2196 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR19.5 19.5 m10.25 10.25 l19.5 1 l19.5 19.5 lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registration]) Pc0 0 0 0 k(White) Pc0 0 0 1 k(Black) Pc0 0 0 0.8 k(80% Black) Pc0 0 0 0.6 k(60% Black) Pc0 0 0 0.4 k(40% Black) Pc0 0 0 0.2 k(20% Black) Pc0 1 1 0 k(Red M=100 Y=100) Pc0 0.75 0.75 0 k(75% Red M=75 Y=75) Pc0 0.5 0.5 0 k(50% Red M=50 Y=50) Pc0 0.25 0.25 0 k(25% Red M=25 Y=25) Pc0.8 0 1 0 k(Green C=80 Y=100) Pc0.6 0 0.75 0 k(75% Green C=60 Y=75) Pc0.4 0 0.5 0 k(50% Green C=40 Y=50) Pc0.2 0 0.25 0 k(25% Green C=20 Y=25) Pc1 0.5 0 0 k(Blue C=100 M=50) Pc0.75 0.375 0 0 k(75% Blue C=75 M=37.5) Pc0.5 0.25 0 0 k(50% Blue C=50 M=25) Pc0.25 0.125 0 0 k(25% Blue C=25 M=12.5) Pc0 0.5 1 0 k(Orange M=50 Y=100) Pc0 0.375 0.75 0 k(75% Orange M=37.5 Y=75) Pc0 0.25 0.5 0 k(50% Orange M=25 Y=50) Pc0 0.125 0.25 0 k(25% Orange M=12.5 Y=25) Pc0.5 0.9 0 0 k(Violet C=50 M=90) Pc0.375 0.675 0 0 k(75% Violet C=37.5 M=67.5) Pc0.25 0.45 0 0 k(50% Violet C=25 M=45 ) Pc0.125 0.225 0 0 k(25% Violet C=12.5 M=22.5) Pc0.8 0 0 0 k(Azure C=80) Pc0.6 0 0 0 k(75% Azure C=60) Pc0.4 0 0 0 k(50% Azure C=40) Pc0.2 0 0 0 k(25% Azure C=20) Pc0 0 1 0 k(Yellow) Pc0 0 0.75 0 k(75% Yellow) Pc0 0 0.5 0 k(50% Yellow) Pc0 0 0.25 0 k(25% Yellow) PcBb2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(White, Black) PcBb0 0 0 0 Bh2 (Black, White Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Black, White Radial) PcBb2 (Copper) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Copper) PcBb2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Rainbow) PcBb0 0 0 0 Bh2 (Violet Eye) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Violet Eye) PcBb2 (Tropical Sunset) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Tropical Sunset) Pc(Mediterranean Tiles) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Mediterranean Tiles) Pc(Pyramids) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Pyramids) Pc(Honeycomb) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Honeycomb) Pc(Jungle Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Jungle Stripes) Pc(Azure Rings) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Azure Rings) Pc(Camouflage) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Camouflage) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 187.0361 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr0 O0 g0 J 0 j 1 w 4 M []0 d0 XR%_ 0 50 XQ/_Helvetica 7.8 7.8 -3.462 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV23.4 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti1 Ta0 1 2 2 3 Th0 Tq0 Tg0 0 Tl0 Tc0 Tw(0) Tx (\r) TX TO0 To1 0 0 1 241.9248 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(2) Tx (\r) TX TO0 To1 0 0 1 296.8135 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(4) Tx (\r) TX TO0 To1 0 0 1 351.6836 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(6) Tx (\r) TX TO0 To1 0 0 1 406.5732 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(8) Tx (\r) TX TO0 To1 0 0 1 459.293 292.9941 0 Tp0 TvTP-4.338 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 214.9863 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(1) Tx (\r) TX TO0 To1 0 0 1 269.875 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(3) Tx (\r) TX TO0 To1 0 0 1 324.7637 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(5) Tx (\r) TX TO0 To1 0 0 1 379.6338 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(7) Tx (\r) TX TO0 To1 0 0 1 434.5234 292.9941 0 Tp0 TvTP-2.169 0 Td0 Tr(9) Tx (\r) TX TO0 To1 0 0 1 324.6445 276.7539 0 Tp0 TvTP-59.616 0 Td0 Tr(Depth \(nuclear interaction lengths\)) Tx (\r) TX TO300 Ar0 R0 G0.2835 w 2.5 M187.2393 375.0039 m192.73 375.0039 lS187.2393 447.2856 m192.73 447.2856 lSuu0 To1 0 0 1 182.8228 302.7217 0 Tp0 TvTP-5.0054 0 Td0 Tr0 O0 g1 w 4 M/_Helvetica 9 9 -3.9946 Tf2 Ta(1) Tx (\r) TX TO0 To1 0 0 1 182.4165 372.4063 0 Tp0 TvTP-10.0107 0 Td0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 182.0098 444.688 0 Tp0 TvTP-15.0161 0 Td0 Tr(100) Tx (\r) TX TOUu0 To1 0 0 1 182.8228 334.5469 0 Tp0 TvTP-5.0054 0 Td0 Tr(3) Tx (\r) TX TO0 To1 0 0 1 182.4165 407.5059 0 Tp0 TvTP-10.0107 0 Td0 Tr(3) Tx (0) Tx (\r) TX TO0 To1 0 0 1 182.0098 479.7881 0 Tp0 TvTP-15.0161 0 Td0 Tr(3) Tx (00) Tx (\r) TX TOUU0 To0 1 -1 0 165.4004 394.625 0 Tp0 TvTP-75.2236 0 Td0 Tr/_Helvetica 7.8 7.8 -3.462 Tf1 Ta(Scaled mean number of particles in counter) Tx (\r) TX TOu1 0.5 0 0 k196.6729 394.8477 m198.2021 395.9531 l196.3042 395.9531 l195.7148 397.7773 l195.1255 395.9531 l193.2275 395.9531 l194.7754 394.8477 l194.1855 393.042 l195.7148 394.1484 l197.2627 393.042 l196.6729 394.8477 l198.2021 395.9531 l196.6729 394.8477 lf205.1484 411.0068 m206.6963 412.1309 l204.7803 412.1309 l204.209 413.936 l203.6196 412.1309 l201.7031 412.1309 l203.251 411.0068 l202.6611 409.2012 l204.209 410.3252 l205.7383 409.2012 l205.1484 411.0068 l206.6963 412.1309 l205.1484 411.0068 lf213.6245 415.7603 m215.1719 416.8843 l213.2744 416.8843 l212.6846 418.6899 l212.0947 416.8843 l210.1973 416.8843 l211.7266 415.7603 l211.1372 413.9546 l212.6846 415.0786 l214.2139 413.9546 l213.6245 415.7603 l215.1719 416.8843 l213.6245 415.7603 lf222.1187 410.9146 m223.6475 412.0386 l221.75 412.0386 l221.1602 413.8442 l220.5703 412.0386 l218.6729 412.0386 l220.2021 410.9146 l219.6123 409.1089 l221.1602 410.2144 l222.6895 409.1089 l222.1187 410.9146 l223.6475 412.0386 l222.1187 410.9146 lf230.5938 405.5161 m232.123 406.6401 l230.2251 406.6401 l229.6357 408.4453 l229.0464 406.6401 l227.1484 406.6401 l228.6963 405.5161 l228.1064 403.7104 l229.6357 404.8345 l231.1836 403.7104 l230.5938 405.5161 l232.123 406.6401 l230.5938 405.5161 lf239.0693 396.9297 m240.6172 398.0352 l238.7012 398.0352 l238.1113 399.8408 l237.54 398.0352 l235.624 398.0352 l237.1714 396.9297 l236.582 395.1055 l238.1113 396.23 l239.6592 395.1055 l239.0693 396.9297 l240.6172 398.0352 l239.0693 396.9297 lf247.5454 389.4492 m249.0928 390.5732 l247.1953 390.5732 l246.6055 392.3789 l246.0156 390.5732 l244.1182 390.5732 l245.6475 389.4492 l245.0576 387.6436 l246.6055 388.7676 l248.1348 387.6436 l247.5454 389.4492 l249.0928 390.5732 l247.5454 389.4492 lf256.0205 381.9502 m257.5684 383.0742 l255.6704 383.0742 l255.0811 384.8789 l254.4917 383.0742 l252.5938 383.0742 l254.123 381.9502 l253.5332 380.1445 l255.0811 381.2686 l256.6104 380.1445 l256.0205 381.9502 l257.5684 383.0742 l256.0205 381.9502 lf264.5146 369.2188 m266.0439 370.3418 l264.1465 370.3418 l263.5566 372.1484 l262.9668 370.3418 l261.0693 370.3418 l262.5981 369.2188 l262.0273 367.4121 l263.5566 368.5371 l265.1045 367.4121 l264.5146 369.2188 l266.0439 370.3418 l264.5146 369.2188 lf272.9902 362.125 m274.5195 363.248 l272.6221 363.248 l272.0322 365.0547 l271.4424 363.248 l269.5449 363.248 l271.0923 362.125 l270.5029 360.3193 l272.0322 361.4238 l273.5796 360.3193 l272.9902 362.125 l274.5195 363.248 l272.9902 362.125 lf281.4658 356.4863 m283.0137 357.6113 l281.0972 357.6113 l280.5264 359.416 l279.9365 357.6113 l278.0205 357.6113 l279.5684 356.4863 l278.9785 354.6807 l280.5264 355.8047 l282.0557 354.6807 l281.4658 356.4863 l283.0137 357.6113 l281.4658 356.4863 lf289.9414 348.9316 m291.4893 350.0381 l289.5913 350.0381 l289.002 351.8438 l288.4126 350.0381 l286.5146 350.0381 l288.0435 348.9316 l287.4541 347.1074 l289.002 348.2324 l290.5313 347.1074 l289.9414 348.9316 l291.4893 350.0381 l289.9414 348.9316 lf298.4355 335.832 m299.9648 336.9561 l298.0674 336.9561 l297.4775 338.7617 l296.8877 336.9561 l294.9902 336.9561 l296.5195 335.832 l295.9297 334.0254 l297.4775 335.1504 l299.0249 334.0254 l298.4355 335.832 l299.9648 336.9561 l298.4355 335.832 lf306.9111 322.5664 m308.4404 323.6895 l306.5425 323.6895 l305.9531 325.4951 l305.3633 323.6895 l303.4653 323.6895 l305.0132 322.5664 l304.4238 320.7598 l305.9531 321.8652 l307.501 320.7598 l306.9111 322.5664 l308.4404 323.6895 l306.9111 322.5664 lf315.3867 317.167 m316.9336 318.291 l315.0176 318.291 l314.4297 320.0967 l313.8574 318.291 l311.9414 318.291 l313.4883 317.167 l312.8984 315.3613 l314.4297 316.4854 l315.9766 315.3613 l315.3867 317.167 l316.9336 318.291 l315.3867 317.167 lfU*u1 D0 0.75 0.75 0 k0 R0 1 1 0 K0.2835 w 2.5 M197.1704 401.3521 m194.2778 401.3521 l194.2778 398.4404 l197.1704 398.4404 l197.1704 401.3521 lB205.6465 424.4204 m202.7534 424.4204 l202.7534 421.5273 l205.6465 421.5273 l205.6465 424.4204 lB214.1216 438.8105 m211.229 438.8105 l211.229 435.9175 l214.1216 435.9175 l214.1216 438.8105 lB222.6157 437.668 m219.7046 437.668 l219.7046 434.7754 l222.6157 434.7754 l222.6157 437.668 lB231.0913 433.6328 m228.1987 433.6328 l228.1987 430.7217 l231.0913 430.7217 l231.0913 433.6328 lB239.5669 425.7656 m236.6743 425.7656 l236.6743 422.854 l239.5669 422.854 l239.5669 425.7656 lB248.0425 415.9629 m245.1499 415.9629 l245.1499 413.0522 l248.0425 413.0522 l248.0425 415.9629 lB256.5366 407.8745 m253.6255 407.8745 l253.6255 404.9634 l256.5366 404.9634 l256.5366 407.8745 lB265.0122 397.2617 m262.1011 397.2617 l262.1011 394.3496 l265.0122 394.3496 l265.0122 397.2617 lB273.4878 393.2998 m270.5952 393.2998 l270.5952 390.3887 l273.4878 390.3887 l273.4878 393.2998 lB281.9634 389.5967 m279.0703 389.5967 l279.0703 386.7041 l281.9634 386.7041 l281.9634 389.5967 lB290.439 382.7051 m287.5464 382.7051 l287.5464 379.7949 l290.439 379.7949 l290.439 382.7051 lB298.9331 374.5059 m296.022 374.5059 l296.022 371.6133 l298.9331 371.6133 l298.9331 374.5059 lB307.4082 366.584 m304.5156 366.584 l304.5156 363.6719 l307.4082 363.6719 l307.4082 366.584 lB324.3594 356.5234 m321.4668 356.5234 l321.4668 353.6309 l324.3594 353.6309 l324.3594 356.5234 lB332.8535 356.5234 m329.9434 356.5234 l329.9434 353.6309 l332.8535 353.6309 l332.8535 356.5234 lB341.3291 348.4707 m338.418 348.4707 l338.418 345.5605 l341.3291 345.5605 l341.3291 348.4707 lB349.8047 335.3525 m346.9121 335.3525 l346.9121 332.46 l349.8047 332.46 l349.8047 335.3525 lB358.2803 325.9375 m355.3887 325.9375 l355.3887 323.0254 l358.2803 323.0254 l358.2803 325.9375 lB366.7744 318.9355 m363.8633 318.9355 l363.8633 316.0244 l366.7744 316.0244 l366.7744 318.9355 lB375.25 309.8887 m372.3389 309.8887 l372.3389 306.9961 l375.25 306.9961 l375.25 309.8887 lB*U0 D0 g1 w 4 M205.6465 446.9912 m202.7534 446.9912 l202.7534 444.0986 l205.6465 444.0986 l205.6465 446.9912 l205.6465 446.9912 lf214.1216 459.3359 m211.229 459.3359 l211.229 456.4434 l214.1216 456.4434 l214.1216 459.3359 l214.1216 459.3359 lf222.6157 454.0298 m219.7046 454.0298 l219.7046 451.1372 l222.6157 451.1372 l222.6157 454.0298 l222.6157 454.0298 lf231.0913 449.2393 m228.1987 449.2393 l228.1987 446.3281 l231.0913 446.3281 l231.0913 449.2393 l231.0913 449.2393 lf239.5669 440.4502 m236.6743 440.4502 l236.6743 437.5576 l239.5669 437.5576 l239.5669 440.4502 l239.5669 440.4502 lf248.0425 432.0669 m245.1499 432.0669 l245.1499 429.1743 l248.0425 429.1743 l248.0425 432.0669 l248.0425 432.0669 lf256.5366 423.5908 m253.6255 423.5908 l253.6255 420.6982 l256.5366 420.6982 l256.5366 423.5908 l256.5366 423.5908 lf265.0122 413.4575 m262.1011 413.4575 l262.1011 410.5459 l265.0122 410.5459 l265.0122 413.4575 l265.0122 413.4575 lf273.4878 408.3169 m270.5952 408.3169 l270.5952 405.4238 l273.4878 405.4238 l273.4878 408.3169 l273.4878 408.3169 lf281.9634 402.6045 m279.0703 402.6045 l279.0703 399.6938 l281.9634 399.6938 l281.9634 402.6045 l281.9634 402.6045 lf290.439 398.9937 m287.5464 398.9937 l287.5464 396.082 l290.439 396.082 l290.439 398.9937 l290.439 398.9937 lf298.9331 390.2051 m296.022 390.2051 l296.022 387.3125 l298.9331 387.3125 l298.9331 390.2051 l298.9331 390.2051 lf307.4082 385.4141 m304.5156 385.4141 l304.5156 382.5029 l307.4082 382.5029 l307.4082 385.4141 l307.4082 385.4141 lf324.3594 369.8447 m321.4668 369.8447 l321.4668 366.9336 l324.3594 366.9336 l324.3594 369.8447 l324.3594 369.8447 lf332.8535 368.2422 m329.9434 368.2422 l329.9434 365.3496 l332.8535 365.3496 l332.8535 368.2422 l332.8535 368.2422 lf341.3291 361.4434 m338.418 361.4434 l338.418 358.5508 l341.3291 358.5508 l341.3291 361.4434 l341.3291 361.4434 lf349.8047 357.1133 m346.9121 357.1133 l346.9121 354.2207 l349.8047 354.2207 l349.8047 357.1133 l349.8047 357.1133 lf358.2803 350.6826 m355.3887 350.6826 l355.3887 347.7891 l358.2803 347.7891 l358.2803 350.6826 l358.2803 350.6826 lf366.7744 349.2266 m363.8633 349.2266 l363.8633 346.3154 l366.7744 346.3154 l366.7744 349.2266 l366.7744 349.2266 lf375.25 330.3223 m372.3389 330.3223 l372.3389 327.4121 l375.25 327.4121 l375.25 330.3223 l375.25 330.3223 lf383.7246 327.4668 m380.834 327.4668 l380.834 324.5557 l383.7246 324.5557 l383.7246 327.4668 l383.7246 327.4668 lf392.2021 309.8887 m389.3086 309.8887 l389.3086 306.9961 l392.2021 306.9961 l392.2021 309.8887 l392.2021 309.8887 lf*u1 D0.8 0 1 0 k197.3545 426.9995 m197.2256 427.6265 l196.8755 428.1606 l196.3413 428.5107 l195.7148 428.6396 l195.0884 428.5107 l194.5723 428.1606 l194.2041 427.6265 l194.0938 426.9995 l194.2041 426.3735 l194.5723 425.8389 l195.0884 425.4888 l195.7148 425.3599 l196.3413 425.4888 l196.8755 425.8389 l197.2256 426.3735 l197.3545 426.9995 lF205.8306 451.3945 m205.7197 452.021 l205.3516 452.5557 l204.8354 452.9058 l204.209 453.0347 l203.5825 452.9058 l203.0483 452.5557 l202.6797 452.021 l202.5693 451.3945 l202.6797 450.7681 l203.0483 450.2339 l203.5825 449.8838 l204.209 449.7549 l204.8354 449.8838 l205.3516 450.2339 l205.7197 450.7681 l205.8306 451.3945 lF214.3242 468.4199 m214.1958 469.0464 l213.8452 469.562 l213.311 469.9307 l212.6846 470.0415 l212.0581 469.9307 l211.5239 469.562 l211.1738 469.0464 l211.0444 468.4199 l211.1738 467.7935 l211.5239 467.2588 l212.0581 466.8906 l212.6846 466.7798 l213.311 466.8906 l213.8452 467.2588 l214.1958 467.7935 l214.3242 468.4199 lF222.8003 466.7612 m222.6709 467.3882 l222.3208 467.9219 l221.7866 468.2725 l221.1602 468.4014 l220.5337 468.2725 l219.999 467.9219 l219.6494 467.3882 l219.5205 466.7612 l219.6494 466.1348 l219.999 465.6191 l220.5337 465.2505 l221.1602 465.1401 l221.7866 465.2505 l222.3208 465.6191 l222.6709 466.1348 l222.8003 466.7612 lF231.2754 462.1001 m231.1465 462.7261 l230.7964 463.2607 l230.2622 463.6108 l229.6357 463.7397 l229.0093 463.6108 l228.4751 463.2607 l228.125 462.7261 l227.9961 462.1001 l228.125 461.4736 l228.4751 460.939 l229.0093 460.5889 l229.6357 460.46 l230.2622 460.5889 l230.7964 460.939 l231.1465 461.4736 l231.2754 462.1001 lF239.7515 453.6245 m239.6226 454.251 l239.272 454.7852 l238.7378 455.1353 l238.1113 455.2642 l237.4849 455.1353 l236.9692 454.7852 l236.6006 454.251 l236.4897 453.6245 l236.6006 452.998 l236.9692 452.4819 l237.4849 452.1133 l238.1113 452.0029 l238.7378 452.1133 l239.272 452.4819 l239.6226 452.998 l239.7515 453.6245 lF248.2271 443.1216 m248.1162 443.7485 l247.7476 444.2827 l247.2319 444.6514 l246.6055 444.7617 l245.979 444.6514 l245.4443 444.2827 l245.0942 443.7485 l244.9653 443.1216 l245.0942 442.4951 l245.4443 441.9795 l245.979 441.6108 l246.6055 441.5005 l247.2319 441.6108 l247.7476 441.9795 l248.1162 442.4951 l248.2271 443.1216 lF256.7207 436.3042 m256.5918 436.9312 l256.2417 437.4653 l255.7075 437.834 l255.0811 437.9443 l254.4546 437.834 l253.9204 437.4653 l253.5703 436.9312 l253.4414 436.3042 l253.5703 435.6777 l253.9204 435.1621 l254.4546 434.7935 l255.0811 434.6831 l255.7075 434.7935 l256.2417 435.1621 l256.5918 435.6777 l256.7207 436.3042 lF265.1963 427.2393 m265.0674 427.8657 l264.7178 428.3999 l264.1831 428.75 l263.5566 428.8794 l262.9302 428.75 l262.396 428.3999 l262.0459 427.8657 l261.9165 427.2393 l262.0459 426.6128 l262.396 426.0786 l262.9302 425.7285 l263.5566 425.5996 l264.1831 425.7285 l264.7178 426.0786 l265.0674 426.6128 l265.1963 427.2393 lF273.6724 426.3921 m273.543 427.0181 l273.1929 427.5527 l272.6587 427.9028 l272.0322 428.0317 l271.4058 427.9028 l270.8901 427.5527 l270.521 427.0181 l270.4106 426.3921 l270.521 425.7656 l270.8901 425.231 l271.4058 424.8809 l272.0322 424.752 l272.6587 424.8809 l273.1929 425.231 l273.543 425.7656 l273.6724 426.3921 lF282.1475 419.0586 m282.0371 419.6851 l281.6685 420.2192 l281.1523 420.5879 l280.5264 420.6982 l279.8999 420.5879 l279.3652 420.2192 l279.0151 419.6851 l278.8862 419.0586 l279.0151 418.4321 l279.3652 417.916 l279.8999 417.5479 l280.5264 417.4375 l281.1523 417.5479 l281.6685 417.916 l282.0371 418.4321 l282.1475 419.0586 lF290.6416 416.5713 m290.5127 417.1978 l290.1626 417.7319 l289.6284 418.1001 l289.002 418.2109 l288.3755 418.1001 l287.8413 417.7319 l287.4912 417.1978 l287.3618 416.5713 l287.4912 415.9629 l287.8413 415.4287 l288.3755 415.0601 l289.002 414.9497 l289.6284 415.0601 l290.1626 415.4287 l290.5127 415.9629 l290.6416 416.5713 lF299.1172 407.9849 m298.9883 408.6113 l298.6382 409.1455 l298.104 409.4956 l297.4775 409.625 l296.8511 409.4956 l296.3169 409.1455 l295.9668 408.6113 l295.8374 407.9849 l295.9668 407.3584 l296.3169 406.8428 l296.8511 406.4741 l297.4775 406.3633 l298.104 406.4741 l298.6382 406.8428 l298.9883 407.3584 l299.1172 407.9849 lF307.5928 403.7656 m307.4639 404.3921 l307.1133 404.9263 l306.5796 405.2764 l305.9531 405.4053 l305.3267 405.2764 l304.792 404.9263 l304.4419 404.3921 l304.3135 403.7656 l304.4419 403.1392 l304.792 402.6045 l305.3267 402.2549 l305.9531 402.126 l306.5796 402.2549 l307.1133 402.6045 l307.4639 403.1392 l307.5928 403.7656 lF324.543 392.0293 m324.4336 392.6553 l324.0645 393.1895 l323.5488 393.5391 l322.9219 393.668 l322.2969 393.5391 l321.7617 393.1895 l321.4121 392.6553 l321.2832 392.0293 l321.4121 391.4023 l321.7617 390.8672 l322.2969 390.5176 l322.9219 390.3887 l323.5488 390.5176 l324.0645 390.8672 l324.4336 391.4023 l324.543 392.0293 lF333.0381 388.3613 m332.9102 388.9883 l332.5596 389.5039 l332.0254 389.873 l331.3984 389.9844 l330.7715 389.873 l330.2373 389.5039 l329.8867 388.9883 l329.7588 388.3613 l329.8867 387.7363 l330.2373 387.2012 l330.7715 386.8516 l331.3984 386.7227 l332.0254 386.8516 l332.5596 387.2012 l332.9102 387.7363 l333.0381 388.3613 lF341.5137 385.3398 m341.3848 385.9668 l341.0352 386.502 l340.5 386.8516 l339.875 386.9805 l339.2471 386.8516 l338.7129 386.502 l338.3623 385.9668 l338.2344 385.3398 l338.3623 384.7139 l338.7129 384.1797 l339.2471 383.8301 l339.875 383.7012 l340.5 383.8301 l341.0352 384.1797 l341.3848 384.7139 l341.5137 385.3398 lF349.9883 377.123 m349.8604 377.749 l349.5098 378.2832 l348.9756 378.6328 l348.3496 378.7617 l347.7227 378.6328 l347.207 378.2832 l346.8389 377.749 l346.7285 377.123 l346.8389 376.4961 l347.207 375.9805 l347.7227 375.6113 l348.3496 375.502 l348.9756 375.6113 l349.5098 375.9805 l349.8604 376.4961 l349.9883 377.123 lF358.4648 372.7188 m358.3555 373.3457 l357.9854 373.8799 l357.4707 374.2305 l356.8428 374.3594 l356.2168 374.2305 l355.6826 373.8799 l355.332 373.3457 l355.2041 372.7188 l355.332 372.0928 l355.6826 371.5762 l356.2168 371.208 l356.8428 371.0977 l357.4707 371.208 l357.9854 371.5762 l358.3555 372.0928 l358.4648 372.7188 lF366.959 363.8018 m366.8301 364.4277 l366.4805 364.9619 l365.9453 365.3125 l365.3203 365.4414 l364.6924 365.3125 l364.1582 364.9619 l363.8086 364.4277 l363.6797 363.8018 l363.8086 363.1748 l364.1582 362.6592 l364.6924 362.29 l365.3203 362.1797 l365.9453 362.29 l366.4805 362.6592 l366.8301 363.1748 l366.959 363.8018 lF375.4336 354.4785 m375.3057 355.1045 l374.9551 355.6387 l374.4209 355.9883 l373.7949 356.1182 l373.168 355.9883 l372.6328 355.6387 l372.2842 355.1045 l372.1543 354.4785 l372.2842 353.8516 l372.6328 353.3164 l373.168 352.9668 l373.7949 352.8379 l374.4209 352.9668 l374.9551 353.3164 l375.3057 353.8516 l375.4336 354.4785 lF383.9102 345.4492 m383.7813 346.0762 l383.4307 346.6113 l382.8965 346.9609 l382.2705 347.0898 l381.6426 346.9609 l381.1094 346.6113 l380.7598 346.0762 l380.6309 345.4492 l380.7598 344.8232 l381.1094 344.2891 l381.6426 343.9395 l382.2705 343.8105 l382.8965 343.9395 l383.4307 344.2891 l383.7813 344.8232 l383.9102 345.4492 lF392.3867 342.041 m392.2754 342.668 l391.9063 343.2021 l391.373 343.5518 l390.7461 343.6807 l390.1201 343.5518 l389.6035 343.2021 l389.2344 342.668 l389.125 342.041 l389.2344 341.4141 l389.6035 340.8984 l390.1201 340.5303 l390.7461 340.4199 l391.373 340.5303 l391.9063 340.8984 l392.2754 341.4141 l392.3867 342.041 lF400.8789 340.1982 m400.751 340.8242 l400.3828 341.3594 l399.8662 341.71 l399.2402 341.8389 l398.6133 341.71 l398.0781 341.3594 l397.7295 340.8242 l397.5996 340.1982 l397.7295 339.5723 l398.0781 339.0381 l398.6133 338.6875 l399.2402 338.5586 l399.8662 338.6875 l400.3828 339.0381 l400.751 339.5723 l400.8789 340.1982 lF409.3555 330.2129 m409.2266 330.8389 l408.876 331.3535 l408.3418 331.7227 l407.7158 331.834 l407.0898 331.7227 l406.5547 331.3535 l406.2051 330.8389 l406.0752 330.2129 l406.2051 329.5859 l406.5547 329.0508 l407.0898 328.7012 l407.7158 328.5723 l408.3418 328.7012 l408.876 329.0508 l409.2266 329.5859 l409.3555 330.2129 lF417.8311 313.2793 m417.7012 313.9063 l417.3516 314.4404 l416.8184 314.79 l416.1914 314.9199 l415.5645 314.79 l415.0313 314.4404 l414.6797 313.9063 l414.5508 313.2793 l414.6797 312.6523 l415.0313 312.1367 l415.5645 311.7686 l416.1914 311.6582 l416.8184 311.7686 l417.3516 312.1367 l417.7012 312.6523 l417.8311 313.2793 lF*Uu0 D0 1 1 0 k197.1704 427.6631 m194.2778 427.6631 l194.2778 424.752 l197.1704 424.752 l197.1704 427.6631 l197.1704 427.6631 lf197.3545 446.0332 m197.2256 446.6592 l196.8755 447.1938 l196.3413 447.5439 l195.7148 447.6729 l195.0884 447.5439 l194.5723 447.1938 l194.2041 446.6592 l194.0938 446.0332 l194.2041 445.4067 l194.5723 444.8721 l195.0884 444.522 l195.7148 444.3931 l196.3413 444.522 l196.8755 444.8721 l197.2256 445.4067 l197.3545 446.0332 l197.3545 446.0332 lf205.8306 469.3042 m205.7197 469.9307 l205.3516 470.4648 l204.8354 470.8149 l204.209 470.9438 l203.5825 470.8149 l203.0483 470.4648 l202.6797 469.9307 l202.5693 469.3042 l202.6797 468.6777 l203.0483 468.1616 l203.5825 467.7935 l204.209 467.6826 l204.8354 467.7935 l205.3516 468.1616 l205.7197 468.6777 l205.8306 469.3042 l205.8306 469.3042 lf214.3242 485.8687 m214.1958 486.4946 l213.8452 487.0293 l213.311 487.3794 l212.6846 487.5083 l212.0581 487.3794 l211.5239 487.0293 l211.1738 486.4946 l211.0444 485.8687 l211.1738 485.2422 l211.5239 484.7075 l212.0581 484.3574 l212.6846 484.2285 l213.311 484.3574 l213.8452 484.7075 l214.1958 485.2422 l214.3242 485.8687 l214.3242 485.8687 lf222.8003 483.2153 m222.6709 483.8418 l222.3208 484.376 l221.7866 484.7261 l221.1602 484.855 l220.5337 484.7261 l219.999 484.376 l219.6494 483.8418 l219.5205 483.2153 l219.6494 482.5889 l219.999 482.0547 l220.5337 481.7041 l221.1602 481.5752 l221.7866 481.7041 l222.3208 482.0547 l222.6709 482.5889 l222.8003 483.2153 l222.8003 483.2153 lf231.2754 478.1665 m231.1465 478.793 l230.7964 479.3276 l230.2622 479.6777 l229.6357 479.8066 l229.0093 479.6777 l228.4751 479.3276 l228.125 478.793 l227.9961 478.1665 l228.125 477.54 l228.4751 477.0059 l229.0093 476.6558 l229.6357 476.5269 l230.2622 476.6558 l230.7964 477.0059 l231.1465 477.54 l231.2754 478.1665 l231.2754 478.1665 lf239.7515 473.1553 m239.6226 473.7817 l239.272 474.3159 l238.7378 474.666 l238.1113 474.7949 l237.4849 474.666 l236.9692 474.3159 l236.6006 473.7817 l236.4897 473.1553 l236.6006 472.5288 l236.9692 471.9941 l237.4849 471.644 l238.1113 471.5151 l238.7378 471.644 l239.272 471.9941 l239.6226 472.5288 l239.7515 473.1553 l239.7515 473.1553 lf248.2271 464.9927 m248.1162 465.6191 l247.7476 466.1533 l247.2319 466.5034 l246.6055 466.6328 l245.979 466.5034 l245.4443 466.1533 l245.0942 465.6191 l244.9653 464.9927 l245.0942 464.3662 l245.4443 463.8315 l245.979 463.4819 l246.6055 463.3525 l247.2319 463.4819 l247.7476 463.8315 l248.1162 464.3662 l248.2271 464.9927 l248.2271 464.9927 lf256.7207 457.4199 m256.5918 458.0464 l256.2417 458.5806 l255.7075 458.9307 l255.0811 459.0601 l254.4546 458.9307 l253.9204 458.5806 l253.5703 458.0464 l253.4414 457.4199 l253.5703 456.7935 l253.9204 456.2588 l254.4546 455.9092 l255.0811 455.7798 l255.7075 455.9092 l256.2417 456.2588 l256.5918 456.7935 l256.7207 457.4199 l256.7207 457.4199 lf265.1963 449.4971 m265.0674 450.1235 l264.7178 450.6577 l264.1831 451.0078 l263.5566 451.1372 l262.9302 451.0078 l262.396 450.6577 l262.0459 450.1235 l261.9165 449.4971 l262.0459 448.8706 l262.396 448.3359 l262.9302 447.9858 l263.5566 447.8569 l264.1831 447.9858 l264.7178 448.3359 l265.0674 448.8706 l265.1963 449.4971 l265.1963 449.4971 lf273.6724 447.1016 m273.543 447.7285 l273.1929 448.2627 l272.6587 448.6123 l272.0322 448.7417 l271.4058 448.6123 l270.8901 448.2627 l270.521 447.7285 l270.4106 447.1016 l270.521 446.4751 l270.8901 445.9409 l271.4058 445.5908 l272.0322 445.4619 l272.6587 445.5908 l273.1929 445.9409 l273.543 446.4751 l273.6724 447.1016 l273.6724 447.1016 lf282.1475 440.4316 m282.0371 441.0581 l281.6685 441.5928 l281.1523 441.9429 l280.5264 442.0718 l279.8999 441.9429 l279.3652 441.5928 l279.0151 441.0581 l278.8862 440.4316 l279.0151 439.8052 l279.3652 439.2896 l279.8999 438.9209 l280.5264 438.8105 l281.1523 438.9209 l281.6685 439.2896 l282.0371 439.8052 l282.1475 440.4316 l282.1475 440.4316 lf290.6416 437.4102 m290.5127 438.0366 l290.1626 438.5708 l289.6284 438.9209 l289.002 439.0498 l288.3755 438.9209 l287.8413 438.5708 l287.4912 438.0366 l287.3618 437.4102 l287.4912 436.7837 l287.8413 436.249 l288.3755 435.8989 l289.002 435.7705 l289.6284 435.8989 l290.1626 436.249 l290.5127 436.7837 l290.6416 437.4102 l290.6416 437.4102 lf299.1172 428.2896 m298.9883 428.916 l298.6382 429.4502 l298.104 429.8008 l297.4775 429.9297 l296.8511 429.8008 l296.3169 429.4502 l295.9668 428.916 l295.8374 428.2896 l295.9668 427.6631 l296.3169 427.1289 l296.8511 426.7788 l297.4775 426.6494 l298.104 426.7788 l298.6382 427.1289 l298.9883 427.6631 l299.1172 428.2896 l299.1172 428.2896 lf307.5928 425.6548 m307.4639 426.2813 l307.1133 426.8154 l306.5796 427.1655 l305.9531 427.2944 l305.3267 427.1655 l304.792 426.8154 l304.4419 426.2813 l304.3135 425.6548 l304.4419 425.0283 l304.792 424.4941 l305.3267 424.144 l305.9531 424.0151 l306.5796 424.144 l307.1133 424.4941 l307.4639 425.0283 l307.5928 425.6548 l307.5928 425.6548 lf316.0684 421.1587 m315.9395 421.7856 l315.5898 422.3198 l315.0547 422.6699 l314.4297 422.7988 l313.8027 422.6699 l313.2871 422.3198 l312.918 421.7856 l312.8066 421.1587 l312.918 420.5322 l313.2871 419.998 l313.8027 419.6479 l314.4297 419.5195 l315.0547 419.6479 l315.5898 419.998 l315.9395 420.5322 l316.0684 421.1587 l316.0684 421.1587 lf324.543 413.5127 m324.4336 414.1392 l324.0645 414.6733 l323.5488 415.0234 l322.9219 415.1523 l322.2969 415.0234 l321.7617 414.6733 l321.4121 414.1392 l321.2832 413.5127 l321.4121 412.8862 l321.7617 412.3521 l322.2969 412.002 l322.9219 411.8726 l323.5488 412.002 l324.0645 412.3521 l324.4336 412.8862 l324.543 413.5127 l324.543 413.5127 lf333.0381 410.9146 m332.9102 411.541 l332.5596 412.0752 l332.0254 412.4438 l331.3984 412.5542 l330.7715 412.4438 l330.2373 412.0752 l329.8867 411.541 l329.7588 410.9146 l329.8867 410.3066 l330.2373 409.772 l330.7715 409.4038 l331.3984 409.2935 l332.0254 409.4038 l332.5596 409.772 l332.9102 410.3066 l333.0381 410.9146 l333.0381 410.9146 lf341.5137 407.4321 m341.3848 408.0586 l341.0352 408.5933 l340.5 408.9434 l339.875 409.0723 l339.2471 408.9434 l338.7129 408.5933 l338.3623 408.0586 l338.2344 407.4321 l338.3623 406.8057 l338.7129 406.29 l339.2471 405.9214 l339.875 405.811 l340.5 405.9214 l341.0352 406.29 l341.3848 406.8057 l341.5137 407.4321 l341.5137 407.4321 lf349.9883 399.0303 m349.8604 399.6567 l349.5098 400.1909 l348.9756 400.541 l348.3496 400.6704 l347.7227 400.541 l347.207 400.1909 l346.8389 399.6567 l346.7285 399.0303 l346.8389 398.4038 l347.207 397.8691 l347.7227 397.5195 l348.3496 397.3906 l348.9756 397.5195 l349.5098 397.8691 l349.8604 398.4038 l349.9883 399.0303 l349.9883 399.0303 lf358.4648 392.2129 m358.3555 392.8398 l357.9854 393.374 l357.4707 393.7236 l356.8428 393.8535 l356.2168 393.7236 l355.6826 393.374 l355.332 392.8398 l355.2041 392.2129 l355.332 391.5859 l355.6826 391.0518 l356.2168 390.7021 l356.8428 390.5732 l357.4707 390.7021 l357.9854 391.0518 l358.3555 391.5859 l358.4648 392.2129 l358.4648 392.2129 lf366.959 392.748 m366.8301 393.373 l366.4805 393.9082 l365.9453 394.2578 l365.3203 394.3867 l364.6924 394.2578 l364.1582 393.9082 l363.8086 393.373 l363.6797 392.748 l363.8086 392.1211 l364.1582 391.5859 l364.6924 391.2363 l365.3203 391.1074 l365.9453 391.2363 l366.4805 391.5859 l366.8301 392.1211 l366.959 392.748 l366.959 392.748 lf375.4336 381.25 m375.3057 381.877 l374.9551 382.4111 l374.4209 382.7607 l373.7949 382.8896 l373.168 382.7607 l372.6328 382.4111 l372.2842 381.877 l372.1543 381.25 l372.2842 380.623 l372.6328 380.0889 l373.168 379.7393 l373.7949 379.6104 l374.4209 379.7393 l374.9551 380.0889 l375.3057 380.623 l375.4336 381.25 l375.4336 381.25 lf383.9102 377.418 m383.7813 378.0439 l383.4307 378.5781 l382.8965 378.9287 l382.2705 379.0576 l381.6426 378.9287 l381.1094 378.5781 l380.7598 378.0439 l380.6309 377.418 l380.7598 376.791 l381.1094 376.2568 l381.6426 375.9063 l382.2705 375.7773 l382.8965 375.9063 l383.4307 376.2568 l383.7813 376.791 l383.9102 377.418 l383.9102 377.418 lf392.3867 370.2686 m392.2754 370.8945 l391.9063 371.4297 l391.373 371.7793 l390.7461 371.9082 l390.1201 371.7793 l389.6035 371.4297 l389.2344 370.8945 l389.125 370.2686 l389.2344 369.6426 l389.6035 369.1074 l390.1201 368.7578 l390.7461 368.6289 l391.373 368.7578 l391.9063 369.1074 l392.2754 369.6426 l392.3867 370.2686 l392.3867 370.2686 lf400.8789 368.002 m400.751 368.6289 l400.3828 369.1621 l399.8662 369.5137 l399.2402 369.6426 l398.6133 369.5137 l398.0781 369.1621 l397.7295 368.6289 l397.5996 368.002 l397.7295 367.376 l398.0781 366.8418 l398.6133 366.4922 l399.2402 366.3623 l399.8662 366.4922 l400.3828 366.8418 l400.751 367.376 l400.8789 368.002 l400.8789 368.002 lf409.3555 360.5039 m409.2266 361.1299 l408.876 361.6641 l408.3418 362.0137 l407.7158 362.1426 l407.0898 362.0137 l406.5547 361.6641 l406.2051 361.1299 l406.0752 360.5039 l406.2051 359.877 l406.5547 359.3418 l407.0898 358.9922 l407.7158 358.8633 l408.3418 358.9922 l408.876 359.3418 l409.2266 359.877 l409.3555 360.5039 l409.3555 360.5039 lf417.8311 349.9453 m417.7012 350.5723 l417.3516 351.0879 l416.8184 351.457 l416.1914 351.5664 l415.5645 351.457 l415.0313 351.0879 l414.6797 350.5723 l414.5508 349.9453 l414.6797 349.3193 l415.0313 348.7852 l415.5645 348.4346 l416.1914 348.3057 l416.8184 348.4346 l417.3516 348.7852 l417.7012 349.3193 l417.8311 349.9453 l417.8311 349.9453 lf426.3066 347.7715 m426.1777 348.3975 l425.8281 348.9316 l425.293 349.2832 l424.666 349.4121 l424.041 349.2832 l423.5234 348.9316 l423.1563 348.3975 l423.0449 347.7715 l423.1563 347.1445 l423.5234 346.6113 l424.041 346.2598 l424.666 346.1309 l425.293 346.2598 l425.8281 346.6113 l426.1777 347.1445 l426.3066 347.7715 l426.3066 347.7715 lf434.7822 339.2402 m434.6719 339.8672 l434.3027 340.4014 l433.7871 340.752 l433.1602 340.8809 l432.5352 340.752 l432 340.4014 l431.6504 339.8672 l431.5205 339.2402 l431.6504 338.6143 l432 338.0801 l432.5352 337.7305 l433.1602 337.6016 l433.7871 337.7305 l434.3027 338.0801 l434.6719 338.6143 l434.7822 339.2402 l434.7822 339.2402 lf443.2764 330.2129 m443.1465 330.8389 l442.7969 331.3535 l442.2637 331.7227 l441.6367 331.834 l441.0098 331.7227 l440.4766 331.3535 l440.125 330.8389 l439.9961 330.2129 l440.125 329.5859 l440.4766 329.0508 l441.0098 328.7012 l441.6367 328.5723 l442.2637 328.7012 l442.7969 329.0508 l443.1465 329.5859 l443.2764 330.2129 l443.2764 330.2129 lfU0 To1 0 0 1 359.4063 483.1763 0 Tp0 TvTP0 Tr0 g/_Helvetica 10 10 -4.4385 Tf0 Ta(CDHS) Tx (:) Tx (\r) TX TO0 To1 0 0 1 159.8047 313.3008 0 Tp0 TvTP3 Tr(NIM 151 \(1978\) 69-80) Tx ( ) Tx (\r) TX TO0 To1 0 0 1 359.5352 473.0791 0 Tp0 TvTP0 Tr0 O0 g/_Helvetica 9 9 -3.9946 Tf( ) Tx (15 GeV) Tx (\r) TX 0 -11 Td( ) Tx (30) Tx ( GeV) Tx (\r) TX 0 -11 Td( ) Tx (50) Tx ( GeV) Tx (\r) TX 0 -11 Td( ) Tx (75) Tx ( GeV) Tx (\r) TX 0 -11 Td(100) Tx ( GeV) Tx (\r) TX 0 -11 Td(140 GeV) Tx (\r) TX TO1 D0 0.75 0.75 0 k0 R0 1 1 0 K0.2835 w 2.5 M315.8848 364.8145 m312.9922 364.8145 l312.9922 361.9043 l315.8848 361.9043 l315.8848 364.8145 lB0 D0 g1 w 4 M315.8848 378.873 m312.9922 378.873 l312.9922 375.9619 l315.8848 375.9619 l315.8848 378.873 l315.8848 378.873 lf1 D0.8 0 1 0 k316.0684 397.9985 m315.9395 398.625 l315.5898 399.1592 l315.0547 399.5093 l314.4297 399.6387 l313.8027 399.5093 l313.2871 399.1592 l312.918 398.625 l312.8066 397.9985 l312.918 397.3721 l313.2871 396.8379 l313.8027 396.4873 l314.4297 396.3584 l315.0547 396.4873 l315.5898 396.8379 l315.9395 397.3721 l316.0684 397.9985 lF0 0.75 0.75 0 k0 R0 1 1 0 K0.2835 w 2.5 M315.8848 364.8145 m312.9922 364.8145 l312.9922 361.9043 l315.8848 361.9043 l315.8848 364.8145 lB0 D0 g1 w 4 M315.8848 378.873 m312.9922 378.873 l312.9922 375.9619 l315.8848 375.9619 l315.8848 378.873 l315.8848 378.873 lf1 D0.8 0 1 0 k316.0684 397.9985 m315.9395 398.625 l315.5898 399.1592 l315.0547 399.5093 l314.4297 399.6387 l313.8027 399.5093 l313.2871 399.1592 l312.918 398.625 l312.8066 397.9985 l312.918 397.3721 l313.2871 396.8379 l313.8027 396.4873 l314.4297 396.3584 l315.0547 396.4873 l315.5898 396.8379 l315.9395 397.3721 l316.0684 397.9985 lFLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 11 0 153 153 Lb(Layer 3) Ln0 Au0 O0.5 0.9 0 0 k0 J 0 j 1 w 4 M []0 d0 XR195.5254 447.3359 m193.9766 444.6455 l197.0923 444.6455 l195.5254 447.3359 lF204.0254 466.019 m202.458 463.3286 l205.5747 463.3286 l204.0254 466.019 lF212.5073 480.0957 m210.9399 477.4058 l214.0557 477.4058 l212.5073 480.0957 lF220.9883 475.2686 m219.4209 472.5781 l222.5557 472.5781 l220.9883 475.2686 lF229.4702 469.4644 m227.9209 466.7744 l231.0376 466.7744 l229.4702 469.4644 lF237.9521 461.9282 m236.4038 459.2383 l239.5195 459.2383 l237.9521 461.9282 lF246.4521 453.7842 m244.8848 451.0942 l248.0005 451.0942 l246.4521 453.7842 lF254.9341 446.2852 m253.3657 443.5957 l256.4824 443.5957 l254.9341 446.2852 lF263.415 440.3892 m261.8667 437.6812 l264.9824 437.6812 l263.415 440.3892 lF271.897 436.7598 m270.3477 434.0693 l273.4644 434.0693 l271.897 436.7598 lF280.397 428.8369 m278.8296 426.1284 l281.9453 426.1284 l280.397 428.8369 lF288.8789 424.6729 m287.3115 421.9824 l290.4272 421.9824 l288.8789 424.6729 lF297.3599 418.1133 m295.7925 415.4048 l298.9272 415.4048 l297.3599 418.1133 lF305.8418 416.6943 m304.2925 413.9858 l307.4092 413.9858 l305.8418 416.6943 lF314.3242 405.1606 m312.7744 402.4702 l315.8906 402.4702 l314.3242 405.1606 lF322.8223 400.7935 m321.2559 398.104 l324.3721 398.104 l322.8223 400.7935 lF339.7871 389.9043 m338.2373 387.2129 l341.3535 387.2129 l339.7871 389.9043 lF348.2676 380.8027 m346.7207 378.1113 l349.8359 378.1113 l348.2676 380.8027 lF356.7686 380.5254 m355.2021 377.8164 l358.3184 377.8164 l356.7686 380.5254 lF365.25 373.8008 m363.6836 371.0918 l366.7988 371.0918 l365.25 373.8008 lF373.7314 364.7715 m372.1641 362.0625 l375.2988 362.0625 l373.7314 364.7715 lF382.2148 357.291 m380.6641 354.582 l383.7813 354.582 l382.2148 357.291 lF390.6943 353.4395 m389.1465 350.7305 l392.2617 350.7305 l390.6943 353.4395 lF399.1953 349.0547 m397.627 346.3457 l400.7441 346.3457 l399.1953 349.0547 lF407.6777 341.0391 m406.1094 338.3496 l409.2246 338.3496 l407.6777 341.0391 lF416.1582 328.8242 m414.6094 326.1152 l417.7256 326.1152 l416.1582 328.8242 lF424.6396 323.9785 m423.0898 321.2871 l426.207 321.2871 l424.6396 323.9785 lF433.1396 318.2656 m431.5723 315.5586 l434.6875 315.5586 l433.1396 318.2656 lF441.6211 308.5195 m440.0547 305.8301 l443.1689 305.8301 l441.6211 308.5195 lFU800 Ar0 D0 R0.5 0.9 0 0 K0.3 w 2.5 M356.54 411.3828 mB356.54 480.9927 mB300 Ar1 0.5 0 0 k1 w 4 M357.4229 475.2349 m358.9697 476.3589 l357.0537 476.3589 l356.4658 478.1646 l355.8936 476.3589 l353.9775 476.3589 l355.5244 475.2349 l354.9346 473.4292 l356.4658 474.5532 l358.0127 473.4292 l357.4229 475.2349 l358.9697 476.3589 l357.4229 475.2349 lf1 D0 0.75 0.75 0 k0 R0 1 1 0 K0.2835 w 2.5 M357.8154 466.3716 m354.9229 466.3716 l354.9229 463.479 l357.8154 463.479 l357.8154 466.3716 lB0 D0 g1 w 4 M358.1123 455.8115 m355.2197 455.8115 l355.2197 452.9004 l358.1123 452.9004 l358.1123 455.8115 l358.1123 455.8115 lf1 D0.8 0 1 0 k358.0596 443.3931 m357.9307 444.0195 l357.5801 444.5537 l357.0469 444.9038 l356.4199 445.0327 l355.793 444.9038 l355.2588 444.5537 l354.9082 444.0195 l354.7803 443.3931 l354.9082 442.7666 l355.2588 442.2319 l355.793 441.8823 l356.4199 441.7534 l357.0469 441.8823 l357.5801 442.2319 l357.9307 442.7666 l358.0596 443.3931 lF0 D0 1 1 0 k358.0068 421.4219 m357.8779 422.0488 l357.5283 422.583 l356.9932 422.9331 l356.3682 423.062 l355.7412 422.9331 l355.2256 422.583 l354.8564 422.0488 l354.7451 421.4219 l354.8564 420.7954 l355.2256 420.2612 l355.7412 419.9111 l356.3682 419.7827 l356.9932 419.9111 l357.5283 420.2612 l357.8779 420.7954 l358.0068 421.4219 l358.0068 421.4219 lf1 D0.5 0.9 0 0 k356.5645 434.3535 m354.998 431.6641 l358.1152 431.6641 l356.5645 434.3535 lFLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 255 79 79 Lb(Layer 2) Ln0 Auu*u0 D0 R0 G0 J 0 j 0.4 w 2.5 M []0 d0 XR200.9663 302.7217 m200.9663 304.6748 lS214.6743 302.7217 m214.6743 304.6748 lS228.4014 302.7217 m228.4014 304.6748 lS1 D255.855 302.7217 m255.855 304.6748 lS0 D269.5635 302.7217 m269.5635 304.6748 lS1 D283.29 302.7217 m283.29 304.6748 lS0 D310.7246 302.7217 m310.7246 304.6748 lS1 D324.4521 302.7217 m324.4521 304.6748 lS338.1777 302.7217 m338.1777 304.6748 lS365.6143 302.7217 m365.6143 304.6748 lS0 D379.3398 302.7217 m379.3398 304.6748 lS1 D393.0684 302.7217 m393.0684 304.6748 lS420.502 302.7217 m420.502 304.6748 lS434.2305 302.7217 m434.2305 304.6748 lS447.9375 302.7217 m447.9375 304.6748 lS*U*u0 D187.2393 497.8081 m461.6641 497.8081 lS187.2393 497.8081 m187.2393 493.9019 lS1 D242.1279 497.8081 m242.1279 493.9019 lS297.0171 497.8081 m297.0171 493.9019 lS0 D351.8867 497.8081 m351.8867 493.9019 lS1 D406.7764 497.8081 m406.7764 493.9019 lS0 D461.6641 497.8081 m461.6641 493.9019 lS200.9663 497.8081 m200.9663 495.855 lS1 D214.6743 497.8081 m214.6743 495.855 lS228.4014 497.8081 m228.4014 495.855 lS0 D255.855 497.8081 m255.855 495.855 lS269.5635 497.8081 m269.5635 495.855 lS1 D283.29 497.8081 m283.29 495.855 lS310.7246 497.8081 m310.7246 495.855 lS0 D324.4521 497.8081 m324.4521 495.855 lS338.1777 497.8081 m338.1777 495.855 lS1 D365.6143 497.8081 m365.6143 495.855 lS379.3398 497.8081 m379.3398 495.855 lS393.0684 497.8081 m393.0684 495.855 lS420.502 497.8081 m420.502 495.855 lS0 D434.2305 497.8081 m434.2305 495.855 lS1 D447.9375 497.8081 m447.9375 495.855 lS0 D187.2393 302.7217 m187.2393 497.8076 lS187.2393 302.7217 m192.73 302.7217 lS*U*u187.2393 324.4814 m189.9849 324.4814 lS1 D187.2393 337.2139 m189.9849 337.2139 lS187.2393 346.2422 m189.9849 346.2422 lS187.2393 353.2441 m189.9849 353.2441 lS187.2393 358.9746 m189.9849 358.9746 lS0 D187.2393 363.8018 m189.9849 363.8018 lS187.2393 368.002 m189.9849 368.002 lS187.2393 371.7051 m189.9849 371.7051 lS1 D187.2393 396.7642 m189.9849 396.7642 lS187.2393 409.4956 m189.9849 409.4956 lS0 D187.2393 418.5244 m189.9849 418.5244 lS187.2393 425.5259 m189.9849 425.5259 lS1 D187.2393 431.2563 m189.9849 431.2563 lS187.2393 436.0835 m189.9849 436.0835 lS0 D187.2393 440.2842 m189.9849 440.2842 lS1 D187.2393 443.9878 m189.9849 443.9878 lS187.2393 469.0464 m189.9849 469.0464 lS0 D187.2393 481.7783 m189.9849 481.7783 lS187.2393 490.8062 m189.9849 490.8062 lS1 D187.2393 497.8081 m189.9849 497.8081 lS*U*u461.6641 302.7217 m461.6641 497.8076 lS0 D461.6641 302.7217 m456.1738 302.7217 lS1 D461.6641 375.0039 m456.1738 375.0039 lS461.6641 447.2856 m456.1738 447.2856 lS461.6641 324.4814 m458.9199 324.4814 lS461.6641 337.2139 m458.9199 337.2139 lS461.6641 346.2422 m458.9199 346.2422 lS0 D461.6641 353.2441 m458.9199 353.2441 lS1 D461.6641 358.9746 m458.9199 358.9746 lS0 D461.6641 363.8018 m458.9199 363.8018 lS1 D461.6641 368.002 m458.9199 368.002 lS461.6641 371.7051 m458.9199 371.7051 lS461.6641 396.7642 m458.9199 396.7642 lS461.6641 409.4956 m458.9199 409.4956 lS461.6641 418.5244 m458.9199 418.5244 lS0 D461.6641 425.5259 m458.9199 425.5259 lS1 D461.6641 431.2563 m458.9199 431.2563 lS461.6641 436.0835 m458.9199 436.0835 lS0 D461.6641 440.2842 m458.9199 440.2842 lS1 D461.6641 443.9878 m458.9199 443.9878 lS0 D461.6641 469.0464 m458.9199 469.0464 lS461.6641 481.7783 m458.9199 481.7783 lS1 D461.6641 490.8062 m458.9199 490.8062 lS0 D461.6641 497.8081 m458.9199 497.8081 lS*UU*u187.2393 302.7217 m461.6641 302.7217 lS187.2393 302.7217 m187.2393 306.627 lS*U242.1279 302.7217 m242.1279 306.627 lS297.0171 302.7217 m297.0171 306.627 lS351.8867 302.7217 m351.8867 306.627 lS406.7764 302.7217 m406.7764 306.627 lS461.6641 302.7217 m461.6641 306.627 lSULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF