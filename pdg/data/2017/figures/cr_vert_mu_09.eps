%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 10.0
%%For: (Don Groom) (Lawrence Berkeley Lab)
%%Title: (vert_mu_2010.eps)
%%CreationDate: 12/1/09 9:41 AM
%%BoundingBox: 165 277 459 492
%%HiResBoundingBox: 165.4707 277.2964 458.4863 491.9189
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentNeededFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 30 35 582 765
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: 157.1421 553.0356 2 1040 959 26 0 1 160 59 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:30 35
%%AI3_PaperRect:-30 761 582 -31
%%AI3_Margin:30 -31 -30 31
%AI7_GridSettings: 72 8 72 8 0 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI7_Thumbnail: 128 96 8
%%BeginData: 7262 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD13FF7DFD09A87DFD04A87DFD04A87DA8A87DA87DA8A87D7DA87D
%A87DFD09A87DFD04A87DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DFD08
%A87DFD05A87DA8A8A87DA8A8A87DA87DA87DA87DA87DA87DFD08A87DFD13
%FFA8FD09FFA8FD04FF7DFD04FFA8FFFF7DFF7DFFFFA87DFF7DFF7DFD09FF
%7DFD04FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD08FF7DFD05FF
%7DFFFFFF7DFFFFFF7DFF7DFF7DFF7DFF7DFF7DFD08FFA8FD13FFA8FD09FF
%A8FD16FFA8FD18FFA8FFFFFFA8FFFFFF7DFD20FFA8FD08FFA8FFFFFFA852
%7D52A8FD0BFFA8FD20FF7DFD20FFA8FD20FF7DFD08FFA8FFFFFF527D7D7D
%52FD0BFFA8FD6BFFA8FFFF52A8FD0FFFA8FD6BFFA8FFFF7D7D7DFD0EFF7D
%FD6BFF7DFD04FFA8FD0EFFA8FD6BFFA8FD13FFA8FD6BFFA8FFFF527D527D
%A8FD0CFFA8FD6BFFA8FFFFFFA87D527DA8FD0BFFA8FD6BFFA8FD04FF52A8
%7DFFFFA87D7D527D52A852A8FFA8FD6BFFA8FD05FF527DFFFFFFFD067DFF
%7DFF7DA8A8A8FD65FFA8A8A87DFD09FFA8527D527D527D52A8FFA8FD30FF
%7DFD3AFFA8FFFFFF7D7D527DFD0CFF7DA8FD24FFF87DFFFFA8F8A87DFFFF
%27F8A8FF527DFFA852FFA8FD12FFA8FD1DFFA87DFFFFFF7D527DFD0DFFA8
%FD21FF7D7DFFFF7D7DFFFFA85252F8FFFFF8F8FF7DF8277D52F852277D52
%7DA8A8FD07FFA8FFA8A8FFA8A8A8FD08FFA8FD14FFA8FFFFFFA87D2752FD
%0CFF7DA8FD20FF527DFD06FF2727FFFFA87D277DFF2727FF275227277D7D
%2727277D27FFA8A8A8FFA8A8FFA8FFA8FFA8A8FFA8A8FFFFA8FFA8FFA8FD
%12FFA87DFFFFFF5252FD0EFFA8FD28FFA852277DA852F8F87DA827FD047D
%27277DF827F85252272727A87DFFA8A8FFA8A8FD04FFA87D7DFF7DA8A8FF
%7DA8FD13FFA8FD04FF7D527DFD0CFF7DA8A8FD26FF7DF8277DA8FFA852FF
%7DFFFFFFA8A827A8A87D272752A8F82727A8FD10FFA8FD15FFA8A87DFD04
%FF7D2752FD0CFFA8FD24FFA87D7DA85252FD09FFA852FD06FF7D27FF52F8
%F8277D7DA8FF277DFD12FFA8A8FD0FFFA8FD05FF7DFD0DFFA8FD22FF7D27
%52F87DA8FD0BFF5227FD06FF7DA8A8FFA87D272727A8FF527DFFA8FD10FF
%A8FFA8FD0EFFA8FFFFFF7D7D2752FD0CFF7D7DFD1EFFA8F87D7D527D52A8
%FD0CFFA852FFFFFFA8A8FFFFA8FD05FFA8FFFFFFA8FF5227277DFD0EFFA8
%A8FD0EFF7D7DFFFFFF52FFFF7DFD0CFF7DFD1FFF7D27A8A8FD10FFA8A8FF
%FFA8A87DFD0BFFA8FF277D7D527DFD1FFF7DFFFFFFA827277DA8FD0BFFA8
%FD1FFF7DA8FD17FFA8FD0DFF7D2752A87DFD07FF7DFD18FFA8FFFFFFA852
%2752A8FD0BFF7DA8FD1BFFA8277DA8A8FD14FFA8A8FD12FFA8A8FD05FF7D
%7D52FD0EFFA8A8FD07FFA87DFD04FFA8FD0EFFA8FD1BFFA827277DFD15FF
%A8A8A8FD15FFA87DA8FFF85227FD0DFFA8A87DFD08FFA8FFFF7D277DFD0E
%FFA8FD19FF52A87D52A8FD2EFF7DF852A8A8FFA8FD18FFA8FFFFFF7DFD0F
%FFA8FD19FFF827A87DFD14FFA87DFD19FFA87DA87D7DFFA8FF52A8FD15FF
%A8FD13FF7DA8FD17FFA827A8FD16FFA8FFA8FD1BFFA87DA8A8A82727FD14
%FFA87DFD04FF52FFA8FD0CFFA8FD18FF7D27A8FD17FFA8FD1EFFA87DA87D
%FFFFFF7DFD12FFA8FD04FF7D2752FD0CFF7DFD17FF7DFD3BFFA87DFFFF7D
%52FD12FF7DFD04FF7D7D52FD0CFFA8FD15FFA8A8A87DFD15FF7DA8FD23FF
%52F8FFFF52F8FD12FFA8FD04FF7D2752FD0CFFA8FD15FF2752A8FD16FFA8
%A8FD24FFA8A8FFFFA8FFFFA8FD0FFFA8FD13FF7D7DFD12FFA87DF8F8FD17
%FFA8FD27FF7DFFA8FFFFA8FD0EFF7D7DFD13FFA8FD13FFF82752A8FD40FF
%A8FFFFFFA8FD0FFFA8FFFF525252FD0EFFA8FD13FFA8A8A8FD15FFA8A8FD
%2BFFA8FFFFA8FD0FFFA8FFFFFF7DFD0FFFA8FD13FFA8A8FD15FFA8FFA8FD
%2CFFA8FF7DFD0FFFA8FD13FFA8FD12FFA8A8A8FD16FFA8A8FD2DFF7DF852
%FD0EFFA8FD04FF7D7D7DFD0CFF7DFD5BFF7DFD0FFF7DFD04FF522752FD0C
%FFA8FD0EFFA8FF5227A8FD48FF7DF8A8FD0DFFA8FFFFFFA8A8FD0EFF7DA8
%FD0DFFA8FFA852FD49FFA87DA8FD0CFFA87DFFFF525252FD0EFFA8FD0DFF
%7DF827FD17FF7DA8A8FD31FFA8FFFFA8FD0CFFA8FFFFFF7DFD0FFFA8FD0D
%FF7D27F8A8FD17FFA8FD32FFA8FFFFA8A8FD0BFFA8FD13FFA8FD0EFF5252
%A8FD4AFFA8FFFFFFA8A8FD0AFFA8FD04FF7D2752FD0CFFA8FD0FFFA8FD50
%FFA8FD0AFFA8FD04FF527D52FD0CFFA8FD61FFA8A8FD08FFA8FD04FF7D7D
%7DFD0CFF7DFD0DFFA8FD17FFA8FD3CFFA8A8FD07FF7DFD04FF522727FD0C
%FFA8FD0BFFA852A8FD16FF7DA8A8FD3CFFA8FD07FFA8FFFFFF7DFFFFFF7D
%FD0BFFA8FD0AFF7DA87DFD18FFA8FD3EFFA8FD06FFA8FFFFFF7D2752277D
%FD0BFFA8FD09FF7DF85252FD58FFA8FD05FFA8FD13FFA8FD0AFF7DFF7DFD
%58FFA8A8FD04FFA8FD0BFFA87D7D52A852A8FFA8FD08FF27A87D7D7DFD59
%FFA8A8FFFFFFA8FD07FFA8FD04FFFD047DFF7DFFA8FD08FFF852FFA8FD5B
%FFA8FFFFFFA8FD06FF5252FFFFFFA8527D527D52A8FF7D7DA87DFD05FF7D
%FD17FFA8A87DFD45FF277D7D7DFD06FF7D527DFD0AFF7DA8FD20FF7DA8FD
%44FFA82752A87DFD04FFA852FD0DFFA8FD06FFA8FF7DA8FD60FF7DA8FD04
%FF7DA87DFD0CFFA8FD05FFA827277DA8FD61FF7DFD04FF7D522752FD0BFF
%7D7DFD05FF527DA8FD61FF7D7DFFFFFF52527DA8A8FD0BFFA8FD6BFFA8FD
%04FF527D27FD0CFF7D7DFD05FFA8FD63FF7D7DFFFFFFA87D5252FD0CFFA8
%FD06FFA87DFD15FFA8A8A8FD4BFFA8FD04FF7D7D7DFD0CFFA8FD06FFA8FD
%16FFA8A8A8FD4BFFA8FFFFFF7D7DFD0EFF7DA8FFFF7D7DA8FD64FFA87DFD
%04FFA82752FD0CFFA8FFFF7D27277DFD65FFA8FFFFFF7D277DFD0DFFA8FF
%FF27F87DA8FD65FFA8FFFFFF52F87D27FD0CFF7D7D7DF8527DFD65FF7D7D
%FD04FF7D5252FD0CFFA8FF7D52A8A8A8FD65FFA8FD05FF5227FD0CFFA8FF
%FFA8FD68FFA8FFFF7DA8FD0FFFA8FFFF2752FD17FFA8FD4FFFA8FFFF52A8
%7DFD0EFF7DF87DA8FD17FF7DFFA8FD4DFF7D7DFD13FF52F852A8FD18FFA8
%FD4FFF7DFFFFA8A87DFD0EFFA87DA8A8A8FD67FFA8FFFF7D7D52FFFF7DFD
%0BFFA8FFFFA8FD68FFA8FD06FF5252FD0BFFA8A8FD6AFFA8FD06FF7D7D7D
%FD0AFF5227A8FD67FFA8A87DFD04FFA852FD0DFFA852FD6AFFA8FD04FF7D
%A87DFD0CFF7DA8FD16FFA8FD53FFA8FD04FF7D52277DFD0BFF52A8A8FD15
%FFA87DFD07FFA8FD20FFA8FD20FFA8FD08FFA8FD07FFA8FD0BFF52A8FD16
%FFA8FD08FFA8FD20FFA8FD20FFA8FD08FF7DFD13FF7DFD0EFFA8FD04FFA8
%FFFFA8FFA8FFFFA8A8FFA8FF7DFD09FFA8FD04FFA8FFFFFFA8FFFFFFA8FF
%FFFFA8FFFFFFA8FFA8FD08FFA8FD05FFA8FFFFFFA8FFFFFFA8FFA8FFA8FF
%A8FFA8FF7DFD08FFA8FD13FF7DFD09FFA8FD04FFA8FD04FFA8FFFFA8FFA8
%FFFFA8A8FFA8FFA8FD09FFA8FD04FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8
%FFA8FFA8FD08FFA8FD05FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8
%FD08FFA8FD13FF7D7DA87DA87DA87DA87D7D7DA87DA87DA87DA87D7D7DA8
%7DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87D7D
%7DA8FD0D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87D7DFD92FF7D7DFD1EFF52FF527DFD1C
%FF52FFFD047DFD1AFFFD087DA8FD18FF7DFD1EFF7DFF7D7DFD1CFF7DFFFD
%047DFD1BFF7D7DFF7DFF7DFF7DFD17FF7D52FD1EFF52A8527DFD1CFF52A8
%5252527DFD1AFF7D52FD077DFD47FF7DA8A87DFFFFFF7DFF52FFFFFF7D7D
%FD35FFA8FD0BFFA8FD09FFA8FFFFFFA8FD07FFA8FFA8FD17FF277D52A87D
%7DFF27FF7D52FF7DA827FD36FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFFFFA8
%FFFFFFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FD0CFF527D52FD07FF5227FF
%5227277D7D52FD057D52FD5BFFA8FD0BFF277DA8FD07FF27A852527D527D
%FF27FF525252A827FD66FFA852A8FF7D7DFD05FF52A8FD0BFFA852FD6AFF
%5252FD7EFF7DFDFCFFFDC7FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
userdict /_useSmoothShade true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 0 TZ
%AI3_EndEncoding TrueType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 0 TZ
%AI3_EndEncoding TrueType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_Begin_NonPrinting
Np
7 Bn
%AI5_BeginGradient: (Black, White Radial)
(Black, White Radial) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 0 1 50 0 %_Bs
0 0 0 1 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Copper)
(Copper) 0 7 Bd
[
<
5E5E5D5D5C5B5B5A5A595958585757565655555454535352525150504F4F4E4E4D4D4C4C4B4B4A4A
494948484747464645444443434242414140403F3F3E3E3D3D3C3C3B3B3A39393838373736363535
343433333232313130302F2F2E2D2D2C2C2B2B2A2A29292828272726262525242423222221212020
1F1F1E1E1D1D1C1C1B1B1A1A1919181817161615151414131312121111
>
<
9A9998989796959493929291908F8E8D8C8C8B8A8988878686858483828181807F7E7D7C7B7B7A79
787776757574737271706F6F6E6D6C6B6A6969686766656463636261605F5E5D5D5C5B5A59585757
56555453525151504F4E4D4C4B4B4A49484746454544434241403F3F3E3D3C3B3A3A393837363534
34333231302F2E2E2D2C2B2A2928282726252423222221201F1E1D1C1C
>
<
B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A6968676665646362
61605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A
393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D
>
<
12121212121212111111111111111110101010101010100F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D
0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0909090909090909
08080808080808080707070707070707060606060606060605050505050505050404040404040404
0403030303030303030202020202020202010101010101010100000000
>
1 %_Br
<
73737373737373737373737373737373737373737373737272727272727272727171717171717070
7070706F6F6F6F6F6E6E6E6E6D6D6D6D6C6C6C6B6B6B6A6A6A696969686867676766666565646464
63636262616160605F5F5E
>
<
BCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBBBBBBBBBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7
B7B7B6B6B6B5B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABAAAAA9A9A8A7A7A6A5A4A4A3
A2A2A1A09F9E9E9D9C9B9A
>
<
D9D9D9D9D9D9D9D9D9D9D9D9D8D8D8D8D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D5D5D5D5D4D4D4D3D3
D3D2D2D2D1D1D0D0CFCFCFCECECDCDCCCBCBCACAC9C9C8C7C7C6C5C5C4C3C2C2C1C0BFBFBEBDBCBB
BABAB9B8B7B6B5B4B3B2B1
>
<
28282828282828272727272727272727272727272727272727262626262626262625252525252524
242424242323232323222222212121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1A1A1A19191818
1717161615151414131312
>
1 %_Br
<
5E5F5F6060616162626364646565666667676868696A6A6B6B6C6C6D6D6E6E6F7070717172727373
>
<
9A9B9C9D9E9F9FA0A1A2A3A4A5A6A6A7A8A9AAABACADADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBBBC
>
<
B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9
>
<
12131314141516161717181819191A1A1B1C1C1D1D1E1E1F1F202021222223232424252526262728
>
1 %_Br
<
0001010202030304040505060607070809090A0A0B0B0C0C0D0D0E0E0F0F10101112121313141415
15161617171818191A1A1B1B1C1C1D1D1E1E1F1F202021212223232424252526262727282829292A
2B2B2C2C2D2D2E2E2F2F303031313232333434353536363737383839393A3A3B3C3C3D3D3E3E3F3F
404041414242434344454546464747484849494A4A4B4B4C4D4D4E4E4F4F50505151525253535455
5556565757585859595A5A5B5B5C5C5D5E5E
>
<
00010203030405060708090A0A0B0C0D0E0F1011111213141516171818191A1B1C1D1E1E1F202122
23242525262728292A2B2C2C2D2E2F3031323333343536373839393A3B3C3D3E3F40404142434445
46474748494A4B4C4D4E4E4F50515253545455565758595A5B5B5C5D5E5F60616262636465666768
69696A6B6C6D6E6F6F70717273747576767778797A7B7C7D7D7E7F80818283848485868788898A8A
8B8C8D8E8F9091919293949596979898999A
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1
>
<
00000000000101010101010101010102020202020202020202030303030303030303040404040404
04040404050505050505050505050606060606060606060607070707070707070708080808080808
080808090909090909090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C
0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F101010101010101010
111111111111111111111212121212121212
>
1 %_Br
<
24232222212120201F1F1E1D1D1C1C1B1B1A1919181817171615151414131312121110100F0F0E0E
0D0C0C0B0B0A0A0908080707060605050403030202010100
>
<
3B3A39383737363534333231302F2E2D2C2B2A29282827262524232221201F1E1D1C1B1A19181817
161514131211100F0E0D0C0B0A0908080706050403020100
>
<
403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625242322211F1E1D1C1B1A1918
17161514131211100F0E0D0C0B0A09080706050403020100
>
<
01010101010101010101010101010101010101010100000000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
1 %_Br
<
59595858585757575656565555555454545353535252525151515050504F4F4F4E4E4E4D4D4D4C4C
4C4B4B4B4A4A4A4949494848484747474646464545454444444343434242424141414040403F3F3F
3E3E3E3D3D3D3C3C3C3B3B3A3A3A3939393838383737373636363535353434343333333232323131
313030302F2F2F2E2E2E2D2D2D2C2C2C2B2B2B2A2A2A292929282828272727262626252525242424
>
<
ADACACABAAAAA9A8A7A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A999898979696959493939291
91908F8E8E8D8C8B8B8A89898887868685848483828181807F7F7E7D7C7C7B7A7A79787777767575
747372727170706F6E6D6D6C6B6B6A69686867666665646363626161605F5E5E5D5C5C5B5A595958
57565655545453525151504F4F4E4D4C4C4B4A4A49484747464545444342424140403F3E3D3D3C3B
>
<
DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8
B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190
8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A6968
67666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140
>
<
0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0B0B
0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A09090909090909090909090808080808080808
08080807070707070707070707070706060606060606060606060505050505050505050505040404
04040404040404040303030303030303030303030202020202020202020202010101010101010101
>
1 %_Br
[
0.0656 0.1081 0.1138 0.0003 1 50 100 %_Bs
0.3689 0.6046 0.6942 0.0716 1 50 85 %_Bs
0.4526 0.7386 0.8504 0.1551 1 73.9136 75 %_Bs
0.3689 0.6046 0.6942 0.0716 1 50 63 %_Bs
0 0 0 0 1 50 34 %_Bs
0.1397 0.2324 0.251 0.0029 1 50 14 %_Bs
0.3494 0.6791 0.8753 0.0583 1 50 2 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2
D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAA
A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878685848382
81807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A
595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938373635343332
31302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A
0908070605040302
>
0.9882
<
05050505050505050505050505050505050505050505050505050505050505050505050505050505
05050606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070708080808080808080808080808080808080808080808080808080808080808080808
0808080808080808
>
0
1 %_Br
<
E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEB
EBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1
F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4
F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9
>
<
1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B
3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263
6465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B
8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3
B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADB
DCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC
>
<
09090909090909090909090909090909090909090909090909090909090908080808080808080808
08080808080808080808080808080808080808080808080808080808080808080808080808080808
08080808080808080707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707060606060606060606060606060606
06060606060606060606060606060606060606060606060606060606060606060606060606060606
060606050505050505050505050505050505050505050505050505050505050505
>
0
1 %_Br
<
ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8
>
<
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313131313
13131313131313131313131313131313131313131313131313131313131313131313131313141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414141414141414141414
14141414141414141414141414141414141414141414141414141414141414
>
<
EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8
C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A0
9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A7978
77767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525150
4F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928
27262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09
>
0
1 %_Br
<
08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F
303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354555657
58595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F
808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7
A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECF
D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC
>
<
05050505050505050506060606060606060606060606060606070707070707070707070707070707
070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A
0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F
0F0F0F0F0F0F0F0F0F0F0F0F10101010101010101010101010101010111111111111111111111111
1111111112121212121212121212121212121212131313131313131313
>
<
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECEC
ECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDED
EDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
0
1 %_Br
<
03030303030303030303030303030303030303030303030304040404040404040404040404040404
04040404040404040404040404040404040404040404040404040404040404040505050505050505
05050505050505050505050505050505050505050505050505050505050505050505050505050505
06060606060606060606060606060606060606060606060606060606060606060606060606060606
06060606060606060707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707080808080808080808080808080808080808080808080808
08
>
<
F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCE
CDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6
A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E
7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
5554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E
2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706
05
>
0.9137
0
1 %_Br
[
0.0078 0.9882 0.0314 0 1 50 100 %_Bs
0.9765 0.9882 0.0196 0 1 50 80 %_Bs
0.9098 0.0784 0.0353 0 1 50 60 %_Bs
0.9255 0.0745 0.9373 0 1 50 40 %_Bs
0.0314 0.0196 0.9137 0 1 50 20 %_Bs
0.0118 0.9608 0.9137 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Tropical Sunset)
(Tropical Sunset) 0 5 Bd
[
0
<
BFBEBDBCBBBAB9B8B7B6B5B4B3B2B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A3A2A1A09F9E9D9C9B9A
9A99989796959493939291908F8E8E8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A7A
79787777767575747372727170706F6E6D6D6C6B6B6A696968676766666564646362626161605F5F
5E5E5D5C5C5B5B5A5A595858575756565555545453535252515150504F4F4E4E4D4D4D4C4C4B4B4B
4A4A4949494848474747464646454545444444444343434342424242414141414141404040404040
4040
>
<
BFBFBFBFBFC0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1
C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3
C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5
C5C5C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6
C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7
C7C7
>
0
1 %_Br
<
08080808080808080808080807070707070707070707070707070707070707070707070706060606
06060606060606060606060606060606060606050505050505050505050505050505050505050505
05050404040404040404040404040404040404040404040404030303030303030303030303030303
03030303030303030202020202020202020202020202020202020202020202020101010101010101
010101010101010101010101010101000000000000000000000000
>
<
05060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C
2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F5051525354
55565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C
7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4
A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF
>
<
E9E9E9E8E8E8E8E7E7E7E7E7E6E6E6E6E5E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E2E1E1E1E1E0E0
E0E0E0DFDFDFDFDEDEDEDEDEDDDDDDDDDCDCDCDCDCDBDBDBDBDADADADADAD9D9D9D9D8D8D8D8D7D7
D7D7D7D6D6D6D6D5D5D5D5D5D4D4D4D4D3D3D3D3D3D2D2D2D2D1D1D1D1D1D0D0D0D0CFCFCFCFCFCE
CECECECDCDCDCDCCCCCCCCCCCBCBCBCBCACACACACAC9C9C9C9C8C8C8C8C8C7C7C7C7C6C6C6C6C6C5
C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C1C0C0C0C0BFBF
>
0
1 %_Br
<
202020201F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1D1D1C1C1C1C1C1C1C
1C1C1C1B1B1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A1A1A1A1919191919191919191818181818181818
18181717171717171717171716161616161616161616151515151515151515151414141414141414
14131313131313131313131212121212121212121211111111111111111111101010101010101010
0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B
0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A090909090909090909090808080808
>
<
696868676766666665656464636363626261616060605F5F5E5E5D5D5D5C5C5B5B5A5A5A59595858
575757565655555454545353525251515150504F4F4E4E4E4D4D4C4C4B4B4B4A4A49494948484747
46464645454444434343424241414040403F3F3E3E3D3D3D3C3C3B3B3A3A3A393938383737373636
35353434343333323231313130302F2F2E2E2E2D2D2C2C2B2B2B2A2A292928282827272626252525
24242323222222212120201F1F1F1E1E1D1D1C1C1C1B1B1A1A1A1919181817171716161515141414
1313121211111110100F0F0E0E0E0D0D0C0C0B0B0B0A0A0909080808070706060505
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9
>
0
1 %_Br
<
CCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5
A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D
7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A5958575655
54535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D
2C2B2A29282726252423222120
>
<
000101020203040405050607070809090A0A0B0C0C0D0D0E0F0F1010111212131314151516161718
18191A1A1B1B1C1D1D1E1E1F20202121222323242425262627282829292A2B2B2C2C2D2E2E2F2F30
3131323233343435353637373839393A3A3B3C3C3D3D3E3F3F404041424243434445454647474848
494A4A4B4B4C4D4D4E4E4F50505151525353545455565657585859595A5B5B5C5C5D5E5E5F5F6061
61626263646465666667676869
>
0
0
1 %_Br
[
0 0.25 0.78 0 1 50 100 %_Bs
0 0.75 0.75 0 1 35.5263 57.3034 %_Bs
0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs
0.125 0.41 0 0 1 50 44.9438 %_Bs
0.8 0 0 0 1 50 19.1011 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Violet Eye)
(Violet Eye) 1 5 Bd
[
<
FFFFFFFFFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFAFAFAFAFA
FAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6
F6F6F6F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F2
F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0
F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
EEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECEC
ECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEB
EBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEA
EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9
>
<
FFFEFEFDFCFCFBFAFAF9F9F8F7F7F6F6F5F4F4F3F3F2F1F1F0F0EFEEEEEDEDECECEBEAEAE9E9E8E8
E7E7E6E6E5E5E4E3E3E2E2E1E1E0E0DFDFDEDEDDDDDCDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D5D4
D4D3D3D2D2D2D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACACAC9C9C8C8C8C7C7C7C6C6C5C5C5C4
C4C4C3C3C3C2C2C2C1C1C1C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBABABABAB9B9B9B8B8B8
B8B7B7B7B7B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B2B1B1B1B1B0B0B0B0AFAFAFAFAFAEAE
AEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7
A7A7A6A6A6A6A6A6A6A5A5A5A5A5A5A5A4A4A4A4A4A4A4A3A3A3A3A3A3A3A3A2A2A2A2A2A2A2A2A2
A1A1A1A1A1A1A1A1A1A0A0A0A0A0A0A0A0A0A09F9F9F9F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E9E
9E9E9D9D9D9D9D9D9D9D9D9D9D9D9D9D9D9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9B9B9B9B9B9B
9B9B9B9B9B9B9B9B9B9B9B9B9B9B9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A
9A9A9A99999999999999999999999999999999999999999999999999999999999999999999999999
99999999999999999999999998989898989898989898989898989898989898989898989898989898
98989898989898989898989898989898989898989898989898989898989898989898989898989898
98989898989898989898989898989898989898989898989898989898989898989898989898989898
98989898989898989898989898989898989898989898989898989898989898989898989898989898
>
<
06060606060606060606060606060505050505050505050505050505050505050505050505050505
05050505040404040404040404040404040404040404040404040404040404040404040404040404
03030303030303030303030303030303030303030303030303030303030303030303030303030303
03030303020202020202020202020202020202020202020202020202020202020202020202020202
02020202020202020202020202020202020202020202020101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
>
<
FFFDFCFAF9F7F5F4F2F1EFEEECEBE9E8E6E5E3E2E0DFDDDCDAD9D7D6D5D3D2D0CFCECCCBC9C8C7C5
C4C3C1C0BFBDBCBBBAB8B7B6B5B3B2B1B0AEADACABAAA8A7A6A5A4A2A1A09F9E9D9C9A9998979695
94939291908F8D8C8B8A898887868584838281807F7E7D7C7C7B7A79787776757473727170706F6E
6D6C6B6A6A6968676665656463626161605F5E5D5D5C5B5A5A59585757565555545352525150504F
4E4E4D4C4C4B4A4A494848474646454544434342424140403F3F3E3D3D3C3C3B3B3A3A3939383737
3636353534343333323231313030302F2F2E2E2D2D2C2C2B2B2B2A2A292928282827272626262525
24242423232322222121212020201F1F1F1E1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19191918181818
1717171616161615151515141414141313131312121212111111111110101010100F0F0F0F0F0E0E
0E0E0E0D0D0D0D0D0D0C0C0C0C0C0B0B0B0B0B0B0B0A0A0A0A0A0A09090909090909090808080808
08080807070707070707070606060606060606060605050505050505050505050404040404040404
04040404040403030303030303030303030303030303020202020202020202020202020202020202
02020202010101010101010101010101010101010101010101010101010101010101010101010101
01010100000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
>
1 %_Br
<
E9E9E9E9E9E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E5
E4E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E1E0E0E0E0E0
E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDDDCDCDCDCDC
>
<
9897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271
706F6E6D6C6B6A696867666564636261605F5D5C5B5A595857565554535251504F4E4D4C4B4A4948
47464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625
>
0
0
1 %_Br
<
DCDCDCDCDBDBDBDBDBDADADAD9D9D9D8D8D8D7D7D7D6D6D5D5D5D4D4D3D3D2D2D2D1D1D0D0CFCFCE
CECDCDCCCBCBCACAC9C9C8C8C7C6C6C5C5C4C4C3C2C2C1C0C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6
B5B5B4B3B2B2B1B0B0AFAEADADACABAAAAA9A8A7A7A6A5A4A4A3A2A1A1A09F9E9D9D9C9B9A999998
9796959494939291908F
>
<
252525252626262627272728282829292A2A2A2B2B2C2C2D2D2E2E2F2F3030313132323334343535
3637373838393A3A3B3C3C3D3E3E3F40404142434344454646474849494A4B4C4C4D4E4F50505152
5354545556575859595A5B5C5D5E5F5F60616263646566676868696A6B6C6D6E6F70717273747576
7778797A7B7C7D7E7F80
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010202020202
02020202020202020202
>
0
1 %_Br
<
8F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A6968
67666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140
3F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1918
17161514131211100F0E0D0C0B0A09080706050403020100
>
<
807F7E7D7C7B7A79787777767574737271706F6F6E6D6C6B6A69686767666564636261605F5F5E5D
5C5B5A59585756565554535251504F4E4E4D4C4B4A49484746464544434241403F3E3E3D3C3B3A39
383736353534333231302F2E2D2D2C2B2A29282726252524232221201F1E1D1D1C1B1A1918171615
1514131211100F0E0D0C0C0B0A0908070605040403020100
>
<
02020202020202020202020202020202020202020202020101010101010101010101010101010101
01010101010101010101010101010101010101010101010101010101010101010101010101010101
01010101010101010101010101010101010101010101010000000000000000000000000000000000
000000000000000000000000000000000000000000000000
>
0
1 %_Br
[
1 1 0.0235 1 1 16.6667 25.8427 %_Bs
0.9137 0.5961 0 0 1 50 49.4382 %_Bs
0.8627 0.1451 0 0 1 61.5385 64.6067 %_Bs
0.5623 0.5 0.007 0 1 50 70.2247 %_Bs
0 0 0 0 1 50 78.6517 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (White, Black)
(White, Black) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 1 1 50 100 %_Bs
0 0 0 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Azure Rings)
(Azure Rings) 22.5 22.5 58.5 58.5 [
%AI3_Tile
(0 O 0 R 0.9569 0.9294 0 0 k
 0.9569 0.9294 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1.75 w 4 M []0 d
0 XR
40.5 58.5 m
40.5 48.5586 32.4409 40.5 22.5 40.5 c
12.5591 40.5 4.5 48.5586 4.5 58.5 c
4.5 68.4414 12.5591 76.5 22.5 76.5 c
32.4409 76.5 40.5 68.4414 40.5 58.5 c
s
40.5 22.5 m
40.5 12.5586 32.4409 4.5 22.5 4.5 c
12.5591 4.5 4.5 12.5586 4.5 22.5 c
4.5 32.4414 12.5591 40.5 22.5 40.5 c
32.4409 40.5 40.5 32.4414 40.5 22.5 c
s
40.5 40.5 m
40.5 30.5586 32.4409 22.5 22.5 22.5 c
12.5591 22.5 4.5 30.5586 4.5 40.5 c
4.5 50.4414 12.5591 58.5 22.5 58.5 c
32.4409 58.5 40.5 50.4414 40.5 40.5 c
s
58.5 58.5 m
58.5 48.5586 50.4409 40.5 40.5 40.5 c
30.5591 40.5 22.5 48.5586 22.5 58.5 c
22.5 68.4414 30.5591 76.5 40.5 76.5 c
50.4409 76.5 58.5 68.4414 58.5 58.5 c
s
58.5 22.5 m
58.5 12.5586 50.4409 4.5 40.5 4.5 c
30.5591 4.5 22.5 12.5586 22.5 22.5 c
22.5 32.4414 30.5591 40.5 40.5 40.5 c
50.4409 40.5 58.5 32.4414 58.5 22.5 c
s
58.5 40.5 m
58.5 30.5586 50.4409 22.5 40.5 22.5 c
30.5591 22.5 22.5 30.5586 22.5 40.5 c
22.5 50.4414 30.5591 58.5 40.5 58.5 c
50.4409 58.5 58.5 50.4414 58.5 40.5 c
s
76.5 58.5 m
76.5 48.5586 68.4409 40.5 58.5 40.5 c
48.5591 40.5 40.5 48.5586 40.5 58.5 c
40.5 68.4414 48.5591 76.5 58.5 76.5 c
68.4409 76.5 76.5 68.4414 76.5 58.5 c
s
76.5 22.5 m
76.5 12.5586 68.4409 4.5 58.5 4.5 c
48.5591 4.5 40.5 12.5586 40.5 22.5 c
40.5 32.4414 48.5591 40.5 58.5 40.5 c
68.4409 40.5 76.5 32.4414 76.5 22.5 c
s
76.5 40.5 m
76.5 30.5586 68.4409 22.5 58.5 22.5 c
48.5591 22.5 40.5 30.5586 40.5 40.5 c
40.5 50.4414 48.5591 58.5 58.5 58.5 c
68.4409 58.5 76.5 50.4414 76.5 40.5 c
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Camouflage)
(Camouflage) 1 1 73 73 [
%AI3_Tile
(0 O 0 R 0.6 0.1412 0.9373 0.0275 k
 0.6 0.1412 0.9373 0.0275 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
1 73 m
1 1 L
73 1 L
73 73 L
1 73 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4941 0.3529 0.9529 0.2 k
 0.4941 0.3529 0.9529 0.2 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
18.5449 73 m
18.5449 1 L
46.7832 1 L
46.7832 73 L
18.5449 73 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1882 0.1098 0.9059 0.0157 k
 0.1882 0.1098 0.9059 0.0157 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
11.9512 1 m
11.9512 4.7129 9.2314 2.8813 9.2314 6.5938 c
9.2314 10.2334 4.25 10.2334 4.25 13.8735 c
4.25 17.4858 10.0313 17.4858 10.0313 21.0991 c
10.0313 24.832 10.208 24.832 10.208 28.5654 c
10.208 32.3071 5.5205 32.3071 5.5205 36.0469 c
5.5205 39.7021 11.8838 39.7021 11.8838 43.356 c
11.8838 47.0566 7.4609 47.0566 7.4609 50.7568 c
7.4609 54.4043 5.7959 54.4043 5.7959 58.0542 c
5.7959 61.7686 4.6631 61.7686 4.6631 65.4805 c
4.6631 69.1636 11.9512 69.3184 11.9512 73 C
27.9268 73 L
27.9268 69.3184 22.0635 69.1636 22.0635 65.4805 c
22.0635 61.7686 28.6631 61.7686 28.6631 58.0542 c
28.6631 54.4043 25.1553 54.4043 25.1553 50.7568 c
25.1553 47.0566 28.8145 47.0566 28.8145 43.356 c
28.8145 39.7021 22.1191 39.7021 22.1191 36.0469 c
22.1191 32.3071 26.3945 32.3071 26.3945 28.5654 c
26.3945 24.832 24.4248 24.832 24.4248 21.0991 c
24.4248 17.4858 20.3838 17.4858 20.3838 13.8735 c
20.3838 10.2334 24.6055 10.2334 24.6055 6.5938 c
24.6055 2.8813 27.9268 4.7129 27.9268 1 C
11.9512 1 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9216 0.2157 0.9451 0.0745 k
 0.9216 0.2157 0.9451 0.0745 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
41.875 1 m
41.875 4.7134 42.3867 2.8818 42.3867 6.5938 c
42.3867 10.2334 40.5947 10.2334 40.5947 13.8735 c
40.5947 17.4858 41.5742 17.4858 41.5742 21.0991 c
41.5742 24.832 43.6484 24.832 43.6484 28.5659 c
43.6484 32.3076 39.1709 32.3076 39.1709 36.0469 c
39.1709 39.7026 39.7549 39.7026 39.7549 43.356 c
39.7549 47.0566 45.3896 47.0566 45.3896 50.7568 c
45.3896 54.4043 40.1055 54.4043 40.1055 58.0542 c
40.1055 61.7686 40.6289 61.7686 40.6289 65.4805 c
40.6289 69.1636 41.875 69.3184 41.875 73 C
59.0752 73 L
59.0752 69.4219 53.4805 70.1934 53.4805 66.6143 c
53.4805 62.9136 55.8945 62.9136 55.8945 59.2153 c
55.8945 55.502 61.0059 55.502 61.0059 51.7886 c
61.0059 48.1489 60.5635 48.1489 60.5635 44.5103 c
60.5635 40.897 59.9277 40.897 59.9277 37.2842 c
59.9277 33.5508 56.3662 33.5508 56.3662 29.8169 c
56.3662 26.0762 61.0908 26.0762 61.0908 22.3354 c
61.0908 18.6812 52.6025 18.6812 52.6025 15.0264 c
52.6025 11.3262 55.7461 11.3262 55.7461 7.6265 c
55.7461 3.978 59.0752 4.6484 59.0752 1 C
41.875 1 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Honeycomb)
(Honeycomb) 12.9819 14.6548 65.8066 60.6758 [
%AI3_Tile
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
64.0161 21.3906 m
64.0161 7.9009 L
52.3345 1.1543 L
40.6475 7.9009 L
40.6475 21.3906 L
52.3345 28.1372 L
64.0161 21.3906 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
43.9536 19.4839 m
43.9536 9.8081 L
52.3345 4.9702 L
60.7153 9.8081 L
60.7153 19.4839 L
52.3345 24.3218 L
43.9536 19.4839 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
37.479 21.394 m
37.479 7.9014 L
25.7944 1.1548 L
14.1099 7.9014 L
14.1099 21.3911 L
25.7944 28.1406 L
37.479 21.394 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
17.4126 19.4839 m
17.4126 9.8081 L
25.7944 4.9702 L
34.1743 9.8081 L
34.1743 19.4839 L
25.7944 24.3218 L
17.4126 19.4839 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
24.3691 44.0386 m
24.3691 30.5459 L
12.6846 23.7993 L
1 30.5459 L
1 44.0356 L
12.6846 50.7852 L
24.3691 44.0386 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
4.3027 42.1284 m
4.3027 32.4526 L
12.6846 27.6147 L
21.0645 32.4526 L
21.0645 42.1284 L
12.6846 46.9663 L
4.3027 42.1284 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
77.2871 44.3774 m
77.2871 30.8843 L
65.603 24.1382 L
53.9185 30.8843 L
53.9185 44.3765 L
65.603 51.1226 L
77.2871 44.3774 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
57.2202 42.4692 m
57.2202 32.7915 L
65.603 27.9536 L
73.9819 32.7915 L
73.9819 42.4692 L
65.603 47.3081 L
57.2202 42.4692 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
50.7471 44.3774 m
50.7471 30.8843 L
39.0649 24.1382 L
27.3774 30.8843 L
27.3774 44.3765 L
39.0649 51.1235 L
50.7471 44.3774 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
30.6821 42.4692 m
30.6821 32.7915 L
39.0649 27.9517 L
47.4438 32.7915 L
47.4438 42.4702 L
39.0649 47.3091 L
30.6821 42.4692 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
37.479 67.3599 m
37.479 53.8682 L
25.7944 47.1221 L
14.1099 53.8682 L
14.1099 67.3599 L
25.7944 74.1074 L
37.479 67.3599 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
17.4126 65.4526 m
17.4126 55.7749 L
25.7944 50.937 L
34.1743 55.7749 L
34.1772 65.4526 L
25.7944 70.2905 L
17.4126 65.4526 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4235 0.5059 0.949 0.3569 k
 0.4235 0.5059 0.949 0.3569 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 2 w 4 M []0 d
0 XR
64.0161 67.3599 m
64.0161 53.8682 L
52.3345 47.1221 L
40.6475 53.8682 L
40.6475 67.3599 L
52.3345 74.1074 L
64.0161 67.3599 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.2 0.4627 0.9922 0.0627 k
 0.2 0.4627 0.9922 0.0627 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
43.9536 65.4526 m
43.9536 55.7749 L
52.3345 50.937 L
60.7153 55.7749 L
60.7153 65.4526 L
52.3345 70.2905 L
43.9536 65.4526 L
s
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Jungle Stripes)
(Jungle Stripes) 37 19 73 55 [
%AI3_Tile
(0 O 0 R 1 0 1 0 k
 1 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 18 w 4 M []0 d
0 XR
37 37 m
73 37 l
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.3451 0 0.6863 0 k
 0.3451 0 0.6863 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 9 w 4 M []0 d
0 XR
37 37 m
73 37 l
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Mediterranean Tiles)
(Mediterranean Tiles) 4.9482 11.5332 39.291 45.8818 [
%AI3_Tile
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
0.1499 40.748 m
10.0083 40.749 L
16.9673 33.79 L
16.9702 23.9297 L
10.0093 16.9697 L
0.1509 16.9688 L
0.1499 40.748 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.57 0.75 0 0 k
 0.57 0.75 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
0.1499 40.748 m
10.0083 40.749 L
16.9673 33.79 L
16.9702 23.9297 L
10.0093 16.9697 L
0.1509 16.9688 L
0.1499 40.748 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
16.9712 0.1504 m
10.0122 7.1094 L
10.0093 16.9697 L
16.9702 23.9297 L
26.8296 23.9307 L
33.7915 16.9727 L
33.7915 7.1123 L
26.8335 0.1514 L
16.9712 0.1504 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.57 0.75 0 0 k
 0.57 0.75 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
16.9712 0.1504 m
10.0122 7.1094 L
10.0093 16.9697 L
16.9702 23.9297 L
26.8296 23.9307 L
33.7915 16.9727 L
33.7915 7.1123 L
26.8335 0.1514 L
16.9712 0.1504 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
16.9673 33.79 m
10.0083 40.749 L
10.0054 50.6084 L
16.9663 57.5693 L
26.8257 57.5703 L
33.7876 50.6113 L
33.7876 40.752 L
26.8296 33.791 L
16.9673 33.79 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.57 0.75 0 0 k
 0.57 0.75 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
16.9673 33.79 m
10.0083 40.749 L
10.0054 50.6084 L
16.9663 57.5693 L
26.8257 57.5703 L
33.7876 50.6113 L
33.7876 40.752 L
26.8296 33.791 L
16.9673 33.79 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 0 k
 0 0 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
33.7915 16.9727 m
26.8296 23.9307 L
26.8296 33.791 L
33.7876 40.752 L
43.6475 40.7529 L
50.6094 33.7939 L
50.6094 23.9336 L
43.6494 16.9736 L
33.7915 16.9727 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.57 0.75 0 0 k
 0.57 0.75 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d
0 XR
33.7915 16.9727 m
26.8296 23.9307 L
26.8296 33.791 L
33.7876 40.752 L
43.6475 40.7529 L
50.6094 33.7939 L
50.6094 23.9336 L
43.6494 16.9736 L
33.7915 16.9727 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.9725 0.9451 0 0 k
 0.9725 0.9451 0 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
43.6514 7.1123 m
43.6514 16.9727 L
33.7915 16.9727 L
33.7915 7.1123 L
43.6514 7.1123 L
f
26.8296 23.9307 m
26.8296 33.791 L
16.9702 33.791 L
16.9702 23.9307 L
26.8296 23.9307 L
f
10.0093 7.1094 m
10.0093 16.9697 L
0.1538 16.9697 L
0.1538 7.1094 L
10.0093 7.1094 L
f
43.6494 40.752 m
43.6494 50.6113 L
33.7876 50.6113 L
33.7876 40.752 L
43.6494 40.752 L
f
10.0083 40.749 m
10.0083 50.6084 L
0.1499 50.6084 L
0.1499 40.749 L
10.0083 40.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Pyramids)
(Pyramids) 1 1 19.5 19.5 [
%AI3_Tile
(0 O 0 R 0.1882 0.1294 0.102 0.0118 k
 0.1882 0.1294 0.102 0.0118 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
1 19.5 m
10.25 10.25 l
19.5 19.5 l
1 19.5 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.6235 0.4863 0.4863 0.4784 k
 0.6235 0.4863 0.4863 0.4784 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
19.5 1 m
10.25 10.25 l
1 1 l
19.5 1 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.3529 0.2549 0.2235 0.0667 k
 0.3529 0.2549 0.2235 0.0667 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
1 1 m
10.25 10.25 l
1 19.5 l
1 1 l
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4902 0.3647 0.3451 0.2196 k
 0.4902 0.3647 0.3451 0.2196 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d
0 XR
19.5 19.5 m
10.25 10.25 l
19.5 1 l
19.5 19.5 l
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([Registration]) Pc
1 1 1 1 k
([Registration]) Pc
([Registration]) Pc
([Registration]) Pc
0 0 0 0 k
(White) Pc
0 0 0 1 k
(Black) Pc
0 0 0 0.8 k
(80% Black) Pc
0 0 0 0.6 k
(60% Black) Pc
0 0 0 0.4 k
(40% Black) Pc
0 0 0 0.2 k
(20% Black) Pc
0 1 1 0 k
(Red M=100 Y=100) Pc
0 0.75 0.75 0 k
(75% Red M=75 Y=75) Pc
0 0.5 0.5 0 k
(50% Red M=50 Y=50) Pc
0 0.25 0.25 0 k
(25% Red M=25 Y=25) Pc
0.8 0 1 0 k
(Green C=80 Y=100) Pc
0.6 0 0.75 0 k
(75% Green C=60 Y=75) Pc
0.4 0 0.5 0 k
(50% Green C=40 Y=50) Pc
0.2 0 0.25 0 k
(25% Green C=20 Y=25) Pc
1 0.5 0 0 k
(Blue C=100 M=50) Pc
0.75 0.375 0 0 k
(75% Blue C=75 M=37.5) Pc
0.5 0.25 0 0 k
(50% Blue C=50 M=25) Pc
0.25 0.125 0 0 k
(25% Blue C=25 M=12.5) Pc
0 0.5 1 0 k
(Orange M=50 Y=100) Pc
0 0.375 0.75 0 k
(75% Orange M=37.5 Y=75) Pc
0 0.25 0.5 0 k
(50% Orange M=25 Y=50) Pc
0 0.125 0.25 0 k
(25% Orange M=12.5 Y=25) Pc
0.5 0.9 0 0 k
(Violet C=50 M=90) Pc
0.375 0.675 0 0 k
(75% Violet C=37.5 M=67.5) Pc
0.25 0.45 0 0 k
(50% Violet C=25 M=45 ) Pc
0.125 0.225 0 0 k
(25% Violet C=12.5 M=22.5) Pc
0.8 0 0 0 k
(Azure C=80) Pc
0.6 0 0 0 k
(75% Azure C=60) Pc
0.4 0 0 0 k
(50% Azure C=40) Pc
0.2 0 0 0 k
(25% Azure C=20) Pc
0 0 1 0 k
(Yellow) Pc
0 0 0.75 0 k
(75% Yellow) Pc
0 0 0.5 0 k
(50% Yellow) Pc
0 0 0.25 0 k
(25% Yellow) Pc
Bb
2 (White, Black) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(White, Black) Pc
Bb
0 0 0 0 Bh
2 (Black, White Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black, White Radial) Pc
Bb
2 (Copper) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Copper) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
Bb
0 0 0 0 Bh
2 (Violet Eye) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Violet Eye) Pc
Bb
2 (Tropical Sunset) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Tropical Sunset) Pc
(Mediterranean Tiles) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Mediterranean Tiles) Pc
(Pyramids) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Pyramids) Pc
(Honeycomb) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Honeycomb) Pc
(Jungle Stripes) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Jungle Stripes) Pc
(Azure Rings) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Azure Rings) Pc
(Camouflage) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Camouflage) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
u
*u
300 Ar
0 R
0 G
1 J 1 j 0.5 w 10 M []0 d
0 XR
387.332 434.9683 m
390.4443 432.2231 l
393.5566 429.4229 l
396.668 426.5654 l
399.7803 423.6528 l
402.8926 420.6841 l
406.0039 417.6719 l
409.1172 414.6094 l
412.2285 411.5034 l
415.3398 408.3545 l
418.4531 405.1675 l
421.5645 401.9375 l
424.6758 398.6763 l
427.7891 395.3774 l
430.9004 392.041 l
434.0127 388.6797 l
437.125 385.2813 l
440.2363 381.8584 l
443.3486 378.4102 l
446.4609 374.9385 l
449.5723 371.4404 l
452.6846 367.916 l
455.7969 364.3828 l
457.0313 362.9707 l
S
1 D
213.7144 314.6211 m
213.7144 315.6504 212.8779 316.4883 211.8472 316.4883 c
210.8159 316.4883 209.9795 315.6504 209.9795 314.6211 c
209.9795 313.5898 210.8159 312.7529 211.8472 312.7529 c
212.8779 312.7529 213.7144 313.5898 213.7144 314.6211 c
S
218.6934 328.2148 m
218.6934 329.2441 217.8569 330.082 216.8262 330.082 c
215.7954 330.082 214.959 329.2441 214.959 328.2148 c
214.959 327.1836 215.7954 326.3467 216.8262 326.3467 c
217.8569 326.3467 218.6934 327.1836 218.6934 328.2148 c
S
223.5479 340.7246 m
223.5479 341.7549 222.7114 342.5918 221.6807 342.5918 c
220.6504 342.5918 219.8135 341.7549 219.8135 340.7246 c
219.8135 339.6943 220.6504 338.8574 221.6807 338.8574 c
222.7114 338.8574 223.5479 339.6943 223.5479 340.7246 c
S
228.5894 353.6094 m
228.5894 354.6387 227.7529 355.4746 226.7222 355.4746 c
225.6914 355.4746 224.855 354.6387 224.855 353.6094 c
224.855 352.5771 225.6914 351.7412 226.7222 351.7412 c
227.7529 351.7412 228.5894 352.5771 228.5894 353.6094 c
S
233.4443 363.8779 m
233.4443 364.9082 232.6079 365.7451 231.5771 365.7451 c
230.5464 365.7451 229.71 364.9082 229.71 363.8779 c
229.71 362.8477 230.5464 362.0098 231.5771 362.0098 c
232.6079 362.0098 233.4443 362.8477 233.4443 363.8779 c
S
238.1123 373.5879 m
238.1123 374.6172 237.2759 375.4531 236.2451 375.4531 c
235.2144 375.4531 234.3779 374.6172 234.3779 373.5879 c
234.3779 372.5557 235.2144 371.7207 236.2451 371.7207 c
237.2759 371.7207 238.1123 372.5557 238.1123 373.5879 c
S
243.1538 383.8564 m
243.1538 384.8867 242.3174 385.7246 241.2866 385.7246 c
240.2559 385.7246 239.4194 384.8867 239.4194 383.8564 c
239.4194 382.8262 240.2559 381.9883 241.2866 381.9883 c
242.3174 381.9883 243.1538 382.8262 243.1538 383.8564 c
S
248.0088 392.6328 m
248.0088 393.6631 247.1719 394.5 246.1411 394.5 c
245.1104 394.5 244.2739 393.6631 244.2739 392.6328 c
244.2739 391.6016 245.1104 390.7656 246.1411 390.7656 c
247.1719 390.7656 248.0088 391.6016 248.0088 392.6328 c
S
252.8633 400.8481 m
252.8633 401.8789 252.0264 402.7153 250.9961 402.7153 c
249.9653 402.7153 249.1289 401.8789 249.1289 400.8481 c
249.1289 399.8174 249.9653 398.981 250.9961 398.981 c
252.0264 398.981 252.8633 399.8174 252.8633 400.8481 c
S
257.7178 407.3833 m
257.7178 408.4141 256.8813 409.2505 255.8506 409.2505 c
254.8198 409.2505 253.9834 408.4141 253.9834 407.3833 c
253.9834 406.3525 254.8198 405.5161 255.8506 405.5161 c
256.8813 405.5161 257.7178 406.3525 257.7178 407.3833 c
S
262.5723 414.479 m
262.5723 415.5093 261.7358 416.3462 260.7056 416.3462 c
259.6748 416.3462 258.8384 415.5093 258.8384 414.479 c
258.8384 413.4478 259.6748 412.6113 260.7056 412.6113 c
261.7358 412.6113 262.5723 413.4478 262.5723 414.479 c
S
267.4272 420.4536 m
267.4272 421.4844 266.5908 422.3208 265.5601 422.3208 c
264.5293 422.3208 263.6929 421.4844 263.6929 420.4536 c
263.6929 419.4229 264.5293 418.5864 265.5601 418.5864 c
266.5908 418.5864 267.4272 419.4229 267.4272 420.4536 c
S
272.4688 426.4287 m
272.4688 427.4595 271.6323 428.2959 270.6016 428.2959 c
269.5708 428.2959 268.7344 427.4595 268.7344 426.4287 c
268.7344 425.3984 269.5708 424.5615 270.6016 424.5615 c
271.6323 424.5615 272.4688 425.3984 272.4688 426.4287 c
S
277.3232 430.1631 m
277.3232 431.1938 276.4868 432.0308 275.4561 432.0308 c
274.4258 432.0308 273.5894 431.1938 273.5894 430.1631 c
273.5894 429.1323 274.4258 428.2959 275.4561 428.2959 c
276.4868 428.2959 277.3232 429.1323 277.3232 430.1631 c
S
282.1782 434.8311 m
282.1782 435.8623 281.3418 436.6987 280.311 436.6987 c
279.2803 436.6987 278.4438 435.8623 278.4438 434.8311 c
278.4438 433.8003 279.2803 432.9639 280.311 432.9639 c
281.3418 432.9639 282.1782 433.8003 282.1782 434.8311 c
S
286.8462 437.5386 m
286.8462 438.5693 286.0098 439.4058 284.979 439.4058 c
283.9482 439.4058 283.1118 438.5693 283.1118 437.5386 c
283.1118 436.5078 283.9482 435.6714 284.979 435.6714 c
286.0098 435.6714 286.8462 436.5078 286.8462 437.5386 c
S
292.0742 442.6733 m
292.0742 443.7041 291.2378 444.5405 290.207 444.5405 c
289.1763 444.5405 288.3398 443.7041 288.3398 442.6733 c
288.3398 441.6426 289.1763 440.8062 290.207 440.8062 c
291.2378 440.8062 292.0742 441.6426 292.0742 442.6733 c
S
296.7422 444.167 m
296.7422 445.1982 295.9058 446.0347 294.875 446.0347 c
293.8442 446.0347 293.0078 445.1982 293.0078 444.167 c
293.0078 443.1362 293.8442 442.2998 294.875 442.2998 c
295.9058 442.2998 296.7422 443.1362 296.7422 444.167 c
S
301.5972 446.5947 m
301.5972 447.625 300.7607 448.4614 299.73 448.4614 c
298.6992 448.4614 297.8623 447.625 297.8623 446.5947 c
297.8623 445.564 298.6992 444.7275 299.73 444.7275 c
300.7607 444.7275 301.5972 445.564 301.5972 446.5947 c
S
306.6387 448.2749 m
306.6387 449.3057 305.8022 450.1421 304.7715 450.1421 c
303.7402 450.1421 302.9038 449.3057 302.9038 448.2749 c
302.9038 447.2441 303.7402 446.4077 304.7715 446.4077 c
305.8022 446.4077 306.6387 447.2441 306.6387 448.2749 c
S
312.6133 450.3286 m
312.6133 451.3599 311.7773 452.1963 310.7461 452.1963 c
309.7158 452.1963 308.8789 451.3599 308.8789 450.3286 c
308.8789 449.2983 309.7158 448.4614 310.7461 448.4614 c
311.7773 448.4614 312.6133 449.2983 312.6133 450.3286 c
S
322.3232 452.3828 m
322.3232 453.4136 321.4863 454.25 320.4551 454.25 c
319.4258 454.25 318.5889 453.4136 318.5889 452.3828 c
318.5889 451.3521 319.4258 450.5156 320.4551 450.5156 c
321.4863 450.5156 322.3232 451.3521 322.3232 452.3828 c
S
327.1777 451.2627 m
327.1777 452.293 326.3408 453.1299 325.3105 453.1299 c
324.2793 453.1299 323.4434 452.293 323.4434 451.2627 c
323.4434 450.2319 324.2793 449.3955 325.3105 449.3955 c
326.3408 449.3955 327.1777 450.2319 327.1777 451.2627 c
S
332.0322 452.3828 m
332.0322 453.4136 331.1953 454.25 330.166 454.25 c
329.1348 454.25 328.2979 453.4136 328.2979 452.3828 c
328.2979 451.3521 329.1348 450.5156 330.166 450.5156 c
331.1953 450.5156 332.0322 451.3521 332.0322 452.3828 c
S
336.8867 451.8228 m
336.8867 452.8535 336.0508 453.6899 335.0195 453.6899 c
333.9893 453.6899 333.1523 452.8535 333.1523 451.8228 c
333.1523 450.792 333.9893 449.9556 335.0195 449.9556 c
336.0508 449.9556 336.8867 450.792 336.8867 451.8228 c
S
341.9287 451.6357 m
341.9287 452.6665 341.0918 453.5029 340.0615 453.5029 c
339.0303 453.5029 338.1934 452.6665 338.1934 451.6357 c
338.1934 450.6055 339.0303 449.769 340.0615 449.769 c
341.0918 449.769 341.9287 450.6055 341.9287 451.6357 c
S
346.7832 450.8892 m
346.7832 451.9199 345.9473 452.7563 344.916 452.7563 c
343.8848 452.7563 343.0488 451.9199 343.0488 450.8892 c
343.0488 449.8584 343.8848 449.022 344.916 449.022 c
345.9473 449.022 346.7832 449.8584 346.7832 450.8892 c
S
351.6387 451.0757 m
351.6387 452.1064 350.8008 452.9434 349.7705 452.9434 c
348.7402 452.9434 347.9043 452.1064 347.9043 451.0757 c
347.9043 450.0449 348.7402 449.2085 349.7705 449.2085 c
350.8008 449.2085 351.6387 450.0449 351.6387 451.0757 c
S
356.4922 449.769 m
356.4922 450.7993 355.6563 451.6357 354.625 451.6357 c
353.5957 451.6357 352.7588 450.7993 352.7588 449.769 c
352.7588 448.7383 353.5957 447.9019 354.625 447.9019 c
355.6563 447.9019 356.4922 448.7383 356.4922 449.769 c
S
361.3477 446.0347 m
361.3477 447.0654 360.5117 447.9019 359.4805 447.9019 c
358.4492 447.9019 357.6133 447.0654 357.6133 446.0347 c
357.6133 445.0034 358.4492 444.167 359.4805 444.167 c
360.5117 444.167 361.3477 445.0034 361.3477 446.0347 c
S
367.5098 445.6606 m
367.5098 446.6919 366.6729 447.5283 365.6426 447.5283 c
364.6113 447.5283 363.7744 446.6919 363.7744 445.6606 c
363.7744 444.6304 364.6113 443.7935 365.6426 443.7935 c
366.6729 443.7935 367.5098 444.6304 367.5098 445.6606 c
S
374.6055 440.2461 m
374.6055 441.2769 373.7686 442.1133 372.7373 442.1133 c
371.707 442.1133 370.8701 441.2769 370.8701 440.2461 c
370.8701 439.2153 371.707 438.3789 372.7373 438.3789 c
373.7686 438.3789 374.6055 439.2153 374.6055 440.2461 c
S
382.0732 437.0718 m
382.0732 438.1025 381.2363 438.939 380.2061 438.939 c
379.1758 438.939 378.3398 438.1025 378.3398 437.0718 c
378.3398 436.041 379.1758 435.2046 380.2061 435.2046 c
381.2363 435.2046 382.0732 436.041 382.0732 437.0718 c
S
389.1689 431.6567 m
389.1689 432.688 388.332 433.5244 387.3008 433.5244 c
386.2715 433.5244 385.4346 432.688 385.4346 431.6567 c
385.4346 430.626 386.2715 429.7896 387.3008 429.7896 c
388.332 429.7896 389.1689 430.626 389.1689 431.6567 c
S
396.4512 428.1094 m
396.4512 429.1401 395.6133 429.9766 394.584 429.9766 c
393.5527 429.9766 392.7168 429.1401 392.7168 428.1094 c
392.7168 427.0786 393.5527 426.2417 394.584 426.2417 c
395.6133 426.2417 396.4512 427.0786 396.4512 428.1094 c
S
403.9199 426.0552 m
403.9199 427.0859 403.083 427.9224 402.0527 427.9224 c
401.0215 427.9224 400.1855 427.0859 400.1855 426.0552 c
400.1855 425.0249 401.0215 424.1885 402.0527 424.1885 c
403.083 424.1885 403.9199 425.0249 403.9199 426.0552 c
S
*U
U
0 D
0 O
0 g
0 J 0 j 1 w 4 M
214.0635 330.2793 m
214.0635 332.9199 l
211.4229 332.9199 l
211.4229 330.2793 l
214.0635 330.2793 l
f
217.6919 339.9951 m
217.6919 342.6367 l
215.0513 342.6367 l
215.0513 339.9951 l
217.6919 339.9951 l
f
219.7461 344.3086 m
219.7461 346.9492 l
217.1055 346.9492 l
217.1055 344.3086 l
219.7461 344.3086 l
f
232.5303 370.9609 m
232.5303 373.5996 l
229.8896 373.5996 l
229.8896 370.9609 l
232.5303 370.9609 l
f
245.0776 394.9414 m
245.0776 397.5811 l
242.437 397.5811 l
242.437 394.9414 l
245.0776 394.9414 l
f
248.4448 392.5078 m
248.4448 395.1479 l
245.8042 395.1479 l
245.8042 392.5078 l
248.4448 392.5078 l
f
262.7847 414.061 m
262.7847 416.7017 l
260.1445 416.7017 l
260.1445 414.061 l
262.7847 414.061 l
f
262.7847 415.0508 m
262.7847 417.6909 l
260.1445 417.6909 l
260.1445 415.0508 l
262.7847 415.0508 l
f
277.7783 431.4072 m
277.7783 434.0479 l
275.1377 434.0479 l
275.1377 431.4072 l
277.7783 431.4072 l
f
290.3823 453.7388 m
290.3823 456.3794 l
287.7417 456.3794 l
287.7417 453.7388 l
290.3823 453.7388 l
f
298.9341 456.8633 m
298.9341 459.5039 l
296.2935 459.5039 l
296.2935 456.8633 l
298.9341 456.8633 l
f
309.6074 456.9565 m
309.6074 459.5972 l
306.9673 459.5972 l
306.9673 456.9565 l
309.6074 456.9565 l
f
323.582 457.3677 m
323.582 460.0083 l
320.9404 460.0083 l
320.9404 457.3677 l
323.582 457.3677 l
f
340.293 454.6099 m
340.293 457.251 l
337.6523 457.251 l
337.6523 454.6099 l
340.293 454.6099 l
f
359.1514 447.7637 m
359.1514 450.4043 l
356.5098 450.4043 l
356.5098 447.7637 l
359.1514 447.7637 l
f
379.8652 441.0356 m
379.8652 443.6763 l
377.2236 443.6763 l
377.2236 441.0356 l
379.8652 441.0356 l
f
400.5469 433.5298 m
400.5469 436.1699 l
397.9063 436.1699 l
397.9063 433.5298 l
400.5469 433.5298 l
f
422.4551 405.1294 m
422.4551 407.77 l
419.8145 407.77 l
419.8145 405.1294 l
422.4551 405.1294 l
f
309.3652 453.1362 m
307.4785 456.4033 l
305.5923 453.1362 l
309.3652 453.1362 l
f
322.6543 456.3413 m
320.7676 459.6089 l
318.8809 456.3413 l
322.6543 456.3413 l
f
332.0771 456.3662 m
330.1895 459.6338 l
328.3027 456.3662 l
332.0771 456.3662 l
f
339.3896 456.0552 m
337.5039 459.3223 l
335.6172 456.0552 l
339.3896 456.0552 l
f
345.3584 454.9409 m
343.4727 458.2085 l
341.5859 454.9409 l
345.3584 454.9409 l
f
350.4121 453.9888 m
348.5254 457.2563 l
346.6396 453.9888 l
350.4121 453.9888 l
f
354.7881 452.8369 m
352.9014 456.105 l
351.0156 452.8369 l
354.7881 452.8369 l
f
358.6465 451.7295 m
356.7598 454.9966 l
354.874 451.7295 l
358.6465 451.7295 l
f
362.0957 450.6025 m
360.208 453.8706 l
358.3223 450.6025 l
362.0957 450.6025 l
f
375.3828 445.188 m
373.4961 448.4556 l
371.6094 445.188 l
375.3828 445.188 l
f
384.8066 440.6074 m
382.9199 443.8745 l
381.0332 440.6074 l
384.8066 440.6074 l
f
398.0947 432.5596 m
396.208 435.8271 l
394.3223 432.5596 l
398.0947 432.5596 l
f
407.5176 425.7754 m
405.6309 429.043 l
403.7451 425.7754 l
407.5176 425.7754 l
f
414.8301 419.6821 m
412.9443 422.9497 l
411.0576 419.6821 l
414.8301 419.6821 l
f
u
*u
1 D
0 R
0 G
1 J 1 j 0.4 w 10 M
212.7432 331.5996 m
212.7432 334.2754 l
212.7432 334.2754 l
S
216.3721 341.3164 m
216.3721 344.6445 l
216.3721 344.6445 l
S
0 D
218.4258 345.6279 m
218.4258 349.9355 l
218.4258 349.9355 l
S
231.21 372.2813 m
231.21 375.6289 l
231.21 375.6289 l
S
1 D
243.7573 396.2612 m
243.7573 400.7363 l
243.7573 400.7363 l
S
247.1245 393.8271 m
247.1245 397.0889 l
247.1245 397.0889 l
S
261.4648 415.3809 m
261.4648 420.7959 l
261.4648 420.7959 l
S
261.4648 416.3706 m
261.4648 419.7319 l
261.4648 419.7319 l
S
0 D
276.4585 432.7271 m
276.4585 436.2505 l
276.4585 436.2505 l
S
289.0615 455.0591 m
289.0615 455.4014 l
289.0615 455.4014 l
S
297.6138 458.1836 m
297.6138 458.7251 l
297.6138 458.7251 l
S
308.2881 458.2769 m
308.2881 458.7441 l
308.2881 458.7441 l
S
322.2607 458.6875 m
322.2607 459.3223 l
322.2607 459.3223 l
S
1 D
338.9717 455.9307 m
338.9717 456.9824 l
338.9717 456.9824 l
S
0 D
357.8301 449.0845 m
357.8301 450.7334 l
357.8301 450.7334 l
S
1 D
378.5449 442.356 m
378.5449 445.1567 l
378.5449 445.1567 l
S
0 D
399.2266 434.8501 m
399.2266 440.2837 l
399.2266 440.2837 l
S
421.1348 406.4497 m
421.1348 417.0615 l
421.1348 417.0615 l
S
212.7432 331.5996 m
212.7432 328.7305 l
212.7432 328.7305 l
S
1 D
216.3721 341.3164 m
216.3721 337.6934 l
216.3721 337.6934 l
S
0 D
218.4258 345.6279 m
218.4258 340.8047 l
218.4258 340.8047 l
S
231.21 372.2813 m
231.21 368.6328 l
231.21 368.6328 l
S
243.7573 396.2612 m
243.7573 391.2383 l
243.7573 391.2383 l
S
247.1245 393.8271 m
247.1245 390.2852 l
247.1245 390.2852 l
S
261.4648 415.3809 m
261.4648 409.1323 l
261.4648 409.1323 l
S
1 D
261.4648 416.3706 m
261.4648 412.6987 l
261.4648 412.6987 l
S
276.4585 432.7271 m
276.4585 428.8623 l
276.4585 428.8623 l
S
289.0615 455.0591 m
289.0615 454.7109 l
289.0615 454.7109 l
S
297.6138 458.1836 m
297.6138 457.6357 l
297.6138 457.6357 l
S
0 D
308.2881 458.2769 m
308.2881 457.7979 l
308.2881 457.7979 l
S
1 D
322.2607 458.6875 m
322.2607 458.0342 l
322.2607 458.0342 l
S
0 D
338.9717 455.9307 m
338.9717 454.8477 l
338.9717 454.8477 l
S
357.8301 449.0845 m
357.8301 447.3726 l
357.8301 447.3726 l
S
378.5449 442.356 m
378.5449 439.3438 l
378.5449 439.3438 l
S
399.2266 434.8501 m
399.2266 428.5698 l
399.2266 428.5698 l
S
1 D
421.1348 406.4497 m
421.1348 392.0293 l
421.1348 392.0293 l
S
307.4785 454.2251 m
307.4785 455.3765 l
307.4785 455.3765 l
S
0 D
320.7676 457.4307 m
320.7676 458.252 l
320.7676 458.252 l
S
330.1895 457.4556 m
330.1895 458.3452 l
330.1895 458.3452 l
S
1 D
337.5039 457.144 m
337.5039 458.0527 l
337.5039 458.0527 l
S
0 D
343.4727 456.0303 m
343.4727 456.9512 l
343.4727 456.9512 l
S
348.5254 455.0776 m
348.5254 456.1606 l
348.5254 456.1606 l
S
1 D
352.9014 453.9263 m
352.9014 455.1152 l
352.9014 455.1152 l
S
0 D
356.7598 452.8184 m
356.7598 454.1006 l
356.7598 454.1006 l
S
360.208 451.6919 m
360.208 453.0425 l
360.208 453.0425 l
S
1 D
373.4961 446.2769 m
373.4961 447.9326 l
373.4961 447.9326 l
S
382.9199 441.6963 m
382.9199 443.5884 l
382.9199 443.5884 l
S
396.208 433.6484 m
396.208 436.2563 l
396.208 436.2563 l
S
0 D
405.6309 426.8647 m
405.6309 431.1152 l
405.6309 431.1152 l
S
412.9443 420.771 m
412.9443 426.0742 l
412.9443 426.0742 l
S
307.4785 454.2251 m
307.4785 453.0366 l
307.4785 453.0366 l
S
320.7676 457.4307 m
320.7676 456.5903 l
320.7676 456.5903 l
S
330.1895 457.4556 m
330.1895 456.5469 l
330.1895 456.5469 l
S
1 D
337.5039 457.144 m
337.5039 456.2104 l
337.5039 456.2104 l
S
343.4727 456.0303 m
343.4727 455.0903 l
343.4727 455.0903 l
S
0 D
348.5254 455.0776 m
348.5254 453.9639 l
348.5254 453.9639 l
S
352.9014 453.9263 m
352.9014 452.7002 l
352.9014 452.7002 l
S
1 D
356.7598 452.8184 m
356.7598 451.4927 l
356.7598 451.4927 l
S
0 D
360.208 451.6919 m
360.208 450.2979 l
360.208 450.2979 l
S
1 D
373.4961 446.2769 m
373.4961 444.5591 l
373.4961 444.5591 l
S
0 D
382.9199 441.6963 m
382.9199 439.7173 l
382.9199 439.7173 l
S
1 D
396.208 433.6484 m
396.208 430.854 l
396.208 430.854 l
S
0 D
405.6309 426.8647 m
405.6309 422.1157 l
405.6309 422.1157 l
S
412.9443 420.771 m
412.9443 414.6719 l
412.9443 414.6719 l
S
*U
*u
0.5 w
213.4575 318.7227 m
212.3574 319.8232 l
S
213.4575 320.9258 m
212.3574 319.8232 l
S
1 D
211.2573 320.9258 m
212.3574 319.8232 l
S
211.2573 318.7227 m
212.3574 319.8232 l
S
218.9473 333.7666 m
217.8472 334.8672 l
S
218.9473 335.9688 m
217.8472 334.8672 l
S
0 D
216.7466 335.9688 m
217.8472 334.8672 l
S
216.7466 333.7666 m
217.8472 334.8672 l
S
1 D
223.7769 344.0195 m
222.6768 345.1191 l
S
223.7769 346.2188 m
222.6768 345.1191 l
S
221.5762 346.2188 m
222.6768 345.1191 l
S
221.5762 344.0195 m
222.6768 345.1191 l
S
230.3867 360.4121 m
229.2866 361.5117 l
S
230.3867 362.6133 m
229.2866 361.5117 l
S
228.186 362.6133 m
229.2866 361.5117 l
S
228.186 360.4121 m
229.2866 361.5117 l
S
0 D
240.3823 380.877 m
239.2822 381.9766 l
S
240.3823 383.0771 m
239.2822 381.9766 l
S
238.1821 383.0771 m
239.2822 381.9766 l
S
238.1821 380.877 m
239.2822 381.9766 l
S
1 D
251.3433 399.3682 m
250.2427 400.4683 l
S
0 D
251.3433 401.5688 m
250.2427 400.4683 l
S
249.1426 401.5688 m
250.2427 400.4683 l
S
1 D
249.1426 399.3682 m
250.2427 400.4683 l
S
261.6812 413.6211 m
260.5806 414.7217 l
S
261.6812 415.8218 m
260.5806 414.7217 l
S
259.4805 415.8218 m
260.5806 414.7217 l
S
259.4805 413.6211 m
260.5806 414.7217 l
S
0 D
270.2393 424.0586 m
269.1387 425.1592 l
S
1 D
270.2393 426.2593 m
269.1387 425.1592 l
S
268.0386 426.2593 m
269.1387 425.1592 l
S
0 D
268.0386 424.0586 m
269.1387 425.1592 l
S
280.0298 432.9277 m
278.9292 434.0283 l
S
280.0298 435.1284 m
278.9292 434.0283 l
S
1 D
277.8291 435.1284 m
278.9292 434.0283 l
S
0 D
277.8291 432.9277 m
278.9292 434.0283 l
S
1 D
292.9692 443.1914 m
291.8691 444.2915 l
S
0 D
292.9692 445.3916 m
291.8691 444.2915 l
S
290.7686 445.3916 m
291.8691 444.2915 l
S
1 D
290.7686 443.1914 m
291.8691 444.2915 l
S
0 D
306.6372 446.7891 m
305.5371 447.8892 l
S
306.6372 448.9893 m
305.5371 447.8892 l
S
304.4365 448.9893 m
305.5371 447.8892 l
S
304.4365 446.7891 m
305.5371 447.8892 l
S
318.0205 451.9048 m
316.9199 453.0054 l
S
318.0205 454.1055 m
316.9199 453.0054 l
S
315.8203 454.1055 m
316.9199 453.0054 l
S
315.8203 451.9048 m
316.9199 453.0054 l
S
328.458 452.2783 m
327.3574 453.3789 l
S
328.458 454.479 m
327.3574 453.3789 l
S
1 D
326.2578 454.479 m
327.3574 453.3789 l
S
326.2578 452.2783 m
327.3574 453.3789 l
S
0 D
339.5488 448.6499 m
338.4492 449.75 l
S
1 D
339.5488 450.8506 m
338.4492 449.75 l
S
0 D
337.3496 450.8506 m
338.4492 449.75 l
S
337.3496 448.6499 m
338.4492 449.75 l
S
1 D
350.585 447.5669 m
349.4844 448.667 l
S
350.585 449.7671 m
349.4844 448.667 l
S
348.3848 449.7671 m
349.4844 448.667 l
S
348.3848 447.5669 m
349.4844 448.667 l
S
0 D
361.6387 446.3843 m
360.5391 447.4844 l
S
1 D
361.6387 448.585 m
360.5391 447.4844 l
S
359.4375 448.585 m
360.5391 447.4844 l
S
0 D
359.4375 446.3843 m
360.5391 447.4844 l
S
*U
U
*u
0.4 w
212.3574 319.8232 m
212.3574 320.4531 l
212.3574 320.4531 l
S
1 D
217.8472 334.8672 m
217.8472 335.5215 l
217.8472 335.5215 l
S
0 D
222.6768 345.1191 m
222.6768 345.8145 l
222.6768 345.8145 l
S
1 D
229.2866 361.5117 m
229.2866 362.0156 l
229.2866 362.0156 l
S
239.2822 381.9766 m
239.2822 382.4434 l
239.2822 382.4434 l
S
0 D
250.2427 400.4683 m
250.2427 400.9604 l
250.2427 400.9604 l
S
1 D
260.5806 414.7217 m
260.5806 415.2939 l
260.5806 415.2939 l
S
269.1387 425.1592 m
269.1387 425.7505 l
269.1387 425.7505 l
S
0 D
278.9292 434.0283 m
278.9292 434.5884 l
278.9292 434.5884 l
S
291.8691 444.2915 m
291.8691 444.9141 l
291.8691 444.9141 l
S
1 D
305.5371 447.8892 m
305.5371 448.7666 l
305.5371 448.7666 l
S
316.9199 453.0054 m
316.9199 454.25 l
316.9199 454.25 l
S
327.3574 453.3789 m
327.3574 454.8599 l
327.3574 454.8599 l
S
338.4492 449.75 m
338.4492 451.7793 l
338.4492 451.7793 l
S
0 D
349.4844 448.667 m
349.4844 451.3745 l
349.4844 451.3745 l
S
1 D
360.5391 447.4844 m
360.5391 451.0635 l
360.5391 451.0635 l
S
212.3574 319.8232 m
212.3574 319.1836 l
212.3574 319.1836 l
S
0 D
217.8472 334.8672 m
217.8472 334.2012 l
217.8472 334.2012 l
S
1 D
222.6768 345.1191 m
222.6768 344.4102 l
222.6768 344.4102 l
S
229.2866 361.5117 m
229.2866 361.0029 l
229.2866 361.0029 l
S
0 D
239.2822 381.9766 m
239.2822 381.498 l
239.2822 381.498 l
S
1 D
250.2427 400.4683 m
250.2427 399.9771 l
250.2427 399.9771 l
S
260.5806 414.7217 m
260.5806 414.1367 l
260.5806 414.1367 l
S
269.1387 425.1592 m
269.1387 424.5552 l
269.1387 424.5552 l
S
0 D
278.9292 434.0283 m
278.9292 433.4561 l
278.9292 433.4561 l
S
1 D
291.8691 444.2915 m
291.8691 443.6567 l
291.8691 443.6567 l
S
305.5371 447.8892 m
305.5371 446.9932 l
305.5371 446.9932 l
S
316.9199 453.0054 m
316.9199 451.7168 l
316.9199 451.7168 l
S
0 D
327.3574 453.3789 m
327.3574 451.8413 l
327.3574 451.8413 l
S
1 D
338.4492 449.75 m
338.4492 447.6152 l
338.4492 447.6152 l
S
349.4844 448.667 m
349.4844 445.7607 l
349.4844 445.7607 l
S
0 D
360.5391 447.4844 m
360.5391 443.5571 l
360.5391 443.5571 l
S
*U
u
*u
0.5 w
213.9131 321.125 m
212.3574 321.125 l
S
212.3574 322.6816 m
212.3574 321.125 l
S
210.8013 321.125 m
212.3574 321.125 l
S
212.3574 319.5703 m
212.3574 321.125 l
S
1 D
219.4028 334.917 m
217.8472 334.917 l
S
0 D
217.8472 336.4727 m
217.8472 334.917 l
S
216.291 334.917 m
217.8472 334.917 l
S
1 D
217.8472 333.3613 m
217.8472 334.917 l
S
0 D
224.2329 347.291 m
222.6768 347.291 l
S
1 D
222.6768 348.8467 m
222.6768 347.291 l
S
221.1206 347.291 m
222.6768 347.291 l
S
222.6768 345.7344 m
222.6768 347.291 l
S
240.8384 377.5762 m
239.2822 377.5762 l
S
239.2822 379.1328 m
239.2822 377.5762 l
S
0 D
237.7261 377.5762 m
239.2822 377.5762 l
S
1 D
239.2822 376.0205 m
239.2822 377.5762 l
S
0 D
251.7988 400.6055 m
250.2427 400.6055 l
S
250.2427 402.1616 m
250.2427 400.6055 l
S
1 D
248.6865 400.6055 m
250.2427 400.6055 l
S
0 D
250.2427 399.0493 m
250.2427 400.6055 l
S
1 D
262.1367 416.1592 m
260.5806 416.1592 l
S
260.5806 417.7148 m
260.5806 416.1592 l
S
259.0249 416.1592 m
260.5806 416.1592 l
S
260.5806 414.603 m
260.5806 416.1592 l
S
0 D
270.6948 425.0718 m
269.1387 425.0718 l
S
1 D
269.1387 426.6279 m
269.1387 425.0718 l
S
267.583 425.0718 m
269.1387 425.0718 l
S
269.1387 423.5161 m
269.1387 425.0718 l
S
0 D
280.4854 436.1631 m
278.9292 436.1631 l
S
1 D
278.9292 437.7188 m
278.9292 436.1631 l
S
0 D
277.373 436.1631 m
278.9292 436.1631 l
S
278.9292 434.6069 m
278.9292 436.1631 l
S
293.4253 444.1924 m
291.8691 444.1924 l
S
291.8691 445.748 m
291.8691 444.1924 l
S
1 D
290.313 444.1924 m
291.8691 444.1924 l
S
291.8691 442.6362 m
291.8691 444.1924 l
S
307.0928 450.1484 m
305.5371 450.1484 l
S
0 D
305.5371 451.7041 m
305.5371 450.1484 l
S
1 D
303.981 450.1484 m
305.5371 450.1484 l
S
0 D
305.5371 448.5923 m
305.5371 450.1484 l
S
318.4766 452.0405 m
316.9199 452.0405 l
S
1 D
316.9199 453.5967 m
316.9199 452.0405 l
S
315.3643 452.0405 m
316.9199 452.0405 l
S
0 D
316.9199 450.4844 m
316.9199 452.0405 l
S
328.9141 454.0635 m
327.3574 454.0635 l
S
1 D
327.3574 455.6196 m
327.3574 454.0635 l
S
325.8027 454.0635 m
327.3574 454.0635 l
S
327.3574 452.5073 m
327.3574 454.0635 l
S
340.0059 451.3188 m
338.4492 451.3188 l
S
338.4492 452.8745 m
338.4492 451.3188 l
S
336.8926 451.3188 m
338.4492 451.3188 l
S
338.4492 449.7627 m
338.4492 451.3188 l
S
351.041 452.4512 m
349.4844 452.4512 l
S
349.4844 454.0073 m
349.4844 452.4512 l
S
347.9287 452.4512 m
349.4844 452.4512 l
S
0 D
349.4844 450.895 m
349.4844 452.4512 l
S
362.0947 447.0176 m
360.5391 447.0176 l
S
360.5391 448.5737 m
360.5391 447.0176 l
S
358.9824 447.0176 m
360.5391 447.0176 l
S
360.5391 445.4619 m
360.5391 447.0176 l
S
*U
*u
1 D
0.4 w
213.9131 321.7539 m
210.8013 321.7539 l
213.9131 321.7539 l
s
0 D
219.4028 335.54 m
216.291 335.54 l
219.4028 335.54 l
s
224.2329 347.9199 m
221.1206 347.9199 l
224.2329 347.9199 l
s
1 D
240.8384 381.0918 m
237.7261 381.0918 l
240.8384 381.0918 l
s
251.7988 401.1782 m
248.6865 401.1782 l
251.7988 401.1782 l
s
262.1367 416.7505 m
259.0249 416.7505 l
262.1367 416.7505 l
s
0 D
270.6948 425.7007 m
267.583 425.7007 l
270.6948 425.7007 l
s
1 D
280.4854 436.7793 m
277.373 436.7793 l
280.4854 436.7793 l
s
293.4253 444.833 m
290.313 444.833 l
293.4253 444.833 l
s
0 D
307.0928 450.8892 m
303.981 450.8892 l
307.0928 450.8892 l
s
1 D
318.4766 452.9927 m
315.3643 452.9927 l
318.4766 452.9927 l
s
0 D
328.9141 455.1587 m
325.8027 455.1587 l
328.9141 455.1587 l
s
340.0059 452.7437 m
336.8926 452.7437 l
340.0059 452.7437 l
s
1 D
351.041 454.2437 m
347.9287 454.2437 l
351.041 454.2437 l
s
362.0947 449.4639 m
358.9824 449.4639 l
362.0947 449.4639 l
s
213.9131 320.4902 m
210.8013 320.4902 l
213.9131 320.4902 l
s
219.4028 334.2813 m
216.291 334.2813 l
219.4028 334.2813 l
s
0 D
224.2329 346.6494 m
221.1206 346.6494 l
224.2329 346.6494 l
s
240.8384 373.7188 m
237.7261 373.7188 l
240.8384 373.7188 l
s
251.7988 400.0264 m
248.6865 400.0264 l
251.7988 400.0264 l
s
262.1367 415.562 m
259.0249 415.562 l
262.1367 415.562 l
s
270.6948 424.437 m
267.583 424.437 l
270.6948 424.437 l
s
280.4854 435.5405 m
277.373 435.5405 l
280.4854 435.5405 l
s
1 D
293.4253 443.5386 m
290.313 443.5386 l
293.4253 443.5386 l
s
0 D
307.0928 449.3955 m
303.981 449.3955 l
307.0928 449.3955 l
s
1 D
318.4766 451.0693 m
315.3643 451.0693 l
318.4766 451.0693 l
s
328.9141 452.9307 m
325.8027 452.9307 l
328.9141 452.9307 l
s
340.0059 449.8433 m
336.8926 449.8433 l
340.0059 449.8433 l
s
0 D
351.041 450.5713 m
347.9287 450.5713 l
351.041 450.5713 l
s
1 D
362.0947 444.4097 m
358.9824 444.4097 l
362.0947 444.4097 l
s
*U
U
0 D
0 O
0 g
0 J 0 j 1 w 4 M
214.3491 331.0469 m
212.4819 332.9121 l
210.6147 331.0469 l
212.4819 329.1797 l
214.3491 331.0469 l
f
220.5854 344.2402 m
218.7183 346.1084 l
216.8511 344.2402 l
218.7183 342.373 l
220.5854 344.2402 l
f
228.4653 362.1523 m
226.5981 364.0205 l
224.7305 362.1523 l
226.5981 360.2871 l
228.4653 362.1523 l
f
237.104 378.6094 m
235.2368 380.4766 l
233.3696 378.6094 l
235.2368 376.7422 l
237.104 378.6094 l
f
247.2305 395.9438 m
245.3633 397.8105 l
243.4961 395.9438 l
245.3633 394.0762 l
247.2305 395.9438 l
f
258.5083 412.9165 m
256.6411 414.7837 l
254.7739 412.9165 l
256.6411 411.0493 l
258.5083 412.9165 l
f
272.3442 429.4043 m
270.4771 431.271 l
268.6099 429.4043 l
270.4771 427.5366 l
272.3442 429.4043 l
f
287.251 441.6592 m
285.3833 443.5264 l
283.5161 441.6592 l
285.3833 439.7915 l
287.251 441.6592 l
f
298.6284 444.6963 m
296.7607 446.5635 l
294.8936 444.6963 l
296.7607 442.8291 l
298.6284 444.6963 l
f
309.9316 450.4785 m
308.0645 452.3457 l
306.1968 450.4785 l
308.0645 448.6108 l
309.9316 450.4785 l
f
321.2959 451.5425 m
319.4277 453.4102 l
317.5615 451.5425 l
319.4277 449.6753 l
321.2959 451.5425 l
f
332.5742 444.5034 m
330.707 446.3706 l
328.8398 444.5034 l
330.707 442.6362 l
332.5742 444.5034 l
f
350.4678 451.126 m
348.6006 452.9927 l
346.7344 451.126 l
348.6006 449.2583 l
350.4678 451.126 l
f
u
*u
0 R
0 G
1 J 1 j 0.4 w 10 M
214.3491 332.1729 m
210.6147 332.1729 l
214.3491 332.1729 l
s
1 D
220.5854 345.3672 m
216.8511 345.3672 l
220.5854 345.3672 l
s
0 D
228.4653 363.124 m
224.7305 363.124 l
228.4653 363.124 l
s
237.104 379.5801 m
233.3696 379.5801 l
237.104 379.5801 l
s
247.2305 396.8086 m
243.4961 396.8086 l
247.2305 396.8086 l
s
258.5083 413.7754 m
254.7739 413.7754 l
258.5083 413.7754 l
s
272.3442 430.269 m
268.6099 430.269 l
272.3442 430.269 l
s
287.251 442.7856 m
283.5161 442.7856 l
287.251 442.7856 l
s
298.6284 446.3643 m
294.8936 446.3643 l
298.6284 446.3643 l
s
309.9316 452.4077 m
306.1968 452.4077 l
309.9316 452.4077 l
s
1 D
321.2959 453.9697 m
317.5615 453.9697 l
321.2959 453.9697 l
s
332.5742 447.584 m
328.8398 447.584 l
332.5742 447.584 l
s
350.4678 454.6172 m
346.7344 454.6172 l
350.4678 454.6172 l
s
0 D
214.3491 329.8828 m
210.6147 329.8828 l
214.3491 329.8828 l
s
1 D
220.5854 343.0762 m
216.8511 343.0762 l
220.5854 343.0762 l
s
228.4653 361.1641 m
224.7305 361.1641 l
228.4653 361.1641 l
s
237.104 377.6201 m
233.3696 377.6201 l
237.104 377.6201 l
s
247.2305 395.0659 m
243.4961 395.0659 l
247.2305 395.0659 l
s
258.5083 412.0327 m
254.7739 412.0327 l
258.5083 412.0327 l
s
272.3442 428.5264 m
268.6099 428.5264 l
272.3442 428.5264 l
s
0 D
287.251 440.4951 m
283.5161 440.4951 l
287.251 440.4951 l
s
298.6284 442.9658 m
294.8936 442.9658 l
298.6284 442.9658 l
s
309.9316 448.4429 m
306.1968 448.4429 l
309.9316 448.4429 l
s
1 D
321.2959 448.9595 m
317.5615 448.9595 l
321.2959 448.9595 l
s
0 D
332.5742 441.167 m
328.8398 441.167 l
332.5742 441.167 l
s
350.4678 447.3042 m
346.7344 447.3042 l
350.4678 447.3042 l
s
212.3574 321.125 m
212.3574 321.7539 l
S
1 D
217.8472 334.917 m
217.8472 335.54 l
S
222.6768 347.291 m
222.6768 347.9199 l
S
239.2822 377.5762 m
239.2822 381.0918 l
S
250.2427 400.6055 m
250.2427 401.1782 l
S
260.5806 416.1592 m
260.5806 416.7505 l
S
0 D
269.1387 425.0718 m
269.1387 425.7007 l
S
278.9292 436.1631 m
278.9292 436.7793 l
S
1 D
291.8691 444.1924 m
291.8691 444.833 l
S
0 D
305.5371 450.1484 m
305.5371 450.8892 l
S
316.9199 452.0405 m
316.9199 452.9927 l
S
327.3574 454.0635 m
327.3574 455.1587 l
S
1 D
338.4492 451.3188 m
338.4492 452.7437 l
S
0 D
349.4844 452.4512 m
349.4844 454.2437 l
S
360.5391 447.0176 m
360.5391 449.4639 l
S
212.3574 321.125 m
212.3574 320.4902 l
S
1 D
217.8472 334.917 m
217.8472 334.2813 l
S
222.6768 347.291 m
222.6768 346.6494 l
S
239.2822 377.5762 m
239.2822 373.7188 l
S
250.2427 400.6055 m
250.2427 400.0264 l
S
260.5806 416.1592 m
260.5806 415.562 l
S
0 D
269.1387 425.0718 m
269.1387 424.437 l
S
1 D
278.9292 436.1631 m
278.9292 435.5405 l
S
0 D
291.8691 444.1924 m
291.8691 443.5386 l
S
1 D
305.5371 450.1484 m
305.5371 449.3955 l
S
316.9199 452.0405 m
316.9199 451.0693 l
S
0 D
327.3574 454.0635 m
327.3574 452.9307 l
S
1 D
338.4492 451.3188 m
338.4492 449.8433 l
S
349.4844 452.4512 m
349.4844 450.5713 l
S
0 D
360.5391 447.0176 m
360.5391 444.4097 l
S
1 D
212.4819 331.0469 m
212.4819 332.1729 l
S
218.7183 344.2402 m
218.7183 345.3672 l
S
226.5981 362.1523 m
226.5981 363.124 l
S
0 D
235.2368 378.6094 m
235.2368 379.5801 l
S
1 D
245.3633 395.9438 m
245.3633 396.8086 l
S
256.6411 412.9165 m
256.6411 413.7754 l
S
270.4771 429.4043 m
270.4771 430.269 l
S
0 D
285.3833 441.6592 m
285.3833 442.7856 l
S
1 D
296.7607 444.6963 m
296.7607 446.3643 l
S
308.0645 450.4785 m
308.0645 452.4077 l
S
0 D
319.4277 451.5425 m
319.4277 453.9697 l
S
330.707 444.5034 m
330.707 447.584 l
S
1 D
348.6006 451.126 m
348.6006 454.6172 l
S
212.4819 331.0469 m
212.4819 329.8828 l
S
218.7183 344.2402 m
218.7183 343.0762 l
S
226.5981 362.1523 m
226.5981 361.1641 l
S
0 D
235.2368 378.6094 m
235.2368 377.6201 l
S
1 D
245.3633 395.9438 m
245.3633 395.0659 l
S
0 D
256.6411 412.9165 m
256.6411 412.0327 l
S
270.4771 429.4043 m
270.4771 428.5264 l
S
285.3833 441.6592 m
285.3833 440.4951 l
S
1 D
296.7607 444.6963 m
296.7607 442.9658 l
S
308.0645 450.4785 m
308.0645 448.4429 l
S
319.4277 451.5425 m
319.4277 448.9595 l
S
330.707 444.5034 m
330.707 441.167 l
S
348.6006 451.126 m
348.6006 447.3042 l
S
*U
U
*u
0.5 w
268.2983 314.3652 m
266.1201 316.5449 l
263.9419 314.3652 l
266.1201 312.1875 l
268.2983 314.3652 l
s
275.8169 333.7168 m
273.6387 335.8945 l
271.4604 333.7168 l
273.6387 331.5371 l
275.8169 333.7168 l
s
283.311 351.9404 m
281.1323 354.1172 l
278.9541 351.9404 l
281.1323 349.7617 l
283.311 351.9404 l
s
290.8359 368.291 m
288.6572 370.4688 l
286.479 368.291 l
288.6572 366.1113 l
290.8359 368.291 l
s
298.3672 383.3457 m
296.1885 385.5254 l
294.0103 383.3457 l
296.1885 381.168 l
298.3672 383.3457 l
s
305.8916 396.7031 m
303.7129 398.8813 l
301.5347 396.7031 l
303.7129 394.5254 l
305.8916 396.7031 l
s
313.4287 408.062 m
311.25 410.2402 l
309.0723 408.062 l
311.25 405.8833 l
313.4287 408.062 l
s
320.9473 418.4683 m
318.7695 420.6465 l
316.5908 418.4683 l
318.7695 416.2896 l
320.9473 418.4683 l
s
328.4785 427.0698 m
326.2998 429.2485 l
324.1211 427.0698 l
326.2998 424.8916 l
328.4785 427.0698 l
s
336.0098 434.6943 m
333.832 436.8726 l
331.6523 434.6943 l
333.832 432.5161 l
336.0098 434.6943 l
s
343.541 440.5508 m
341.3623 442.7295 l
339.1836 440.5508 l
341.3623 438.3726 l
343.541 440.5508 l
s
351.0723 445.667 m
348.8926 447.8457 l
346.7148 445.667 l
348.8926 443.4888 l
351.0723 445.667 l
s
358.6025 448.6299 m
356.4238 450.8081 l
354.2461 448.6299 l
356.4238 446.4512 l
358.6025 448.6299 l
s
366.1396 452.4141 m
363.9609 454.5928 l
361.7832 452.4141 l
363.9609 450.2358 l
366.1396 452.4141 l
s
373.6777 453.895 m
371.499 456.0737 l
369.3203 453.895 l
371.499 451.7168 l
373.6777 453.895 l
s
381.2139 454.001 m
379.0352 456.1792 l
376.8574 454.001 l
379.0352 451.8228 l
381.2139 454.001 l
s
388.752 455.8369 m
386.5732 458.0156 l
384.3945 455.8369 l
386.5732 453.6587 l
388.752 455.8369 l
s
396.2891 452.9551 m
394.1104 455.1338 l
391.9316 452.9551 l
394.1104 450.7769 l
396.2891 452.9551 l
s
403.8262 451.4805 m
401.6484 453.6587 l
399.4697 451.4805 l
401.6484 449.3018 l
403.8262 451.4805 l
s
411.3633 453.1982 m
409.1855 455.3765 l
407.0068 453.1982 l
409.1855 451.02 l
411.3633 453.1982 l
s
422.4551 444.9331 m
420.2754 447.1113 l
418.0977 444.9331 l
420.2754 442.7544 l
422.4551 444.9331 l
s
437.5098 434.6069 m
435.332 436.7856 l
433.1543 434.6069 l
435.332 432.4287 l
437.5098 434.6069 l
s
*U
1 A
q
0 D
0 J 0 j 1 w 4 M
209.3262 304.999 m
458.2861 304.999 l
458.2861 491.7188 l
209.3262 491.7188 l
209.3262 304.999 l
h
W
n
*u
0 R
0 G
1 J 1 j 0.4 w 10 M
209.3262 304.999 m
209.3262 309.667 l
S
209.3262 304.999 m
209.3262 314.335 l
S
1 D
232.0376 304.999 m
232.0376 309.667 l
S
0 D
245.3198 304.999 m
245.3198 309.667 l
S
254.749 304.999 m
254.749 309.667 l
S
262.0557 304.999 m
262.0557 309.667 l
S
1 D
268.0313 304.999 m
268.0313 309.667 l
S
273.085 304.999 m
273.085 309.667 l
S
277.4604 304.999 m
277.4604 309.667 l
S
0 D
281.3193 304.999 m
281.3193 309.667 l
S
1 D
284.7671 304.999 m
284.7671 309.667 l
S
0 D
284.7671 304.999 m
284.7671 314.335 l
S
1 D
307.4785 304.999 m
307.4785 309.667 l
S
320.7676 304.999 m
320.7676 309.667 l
S
0 D
330.1895 304.999 m
330.1895 309.667 l
S
337.5039 304.999 m
337.5039 309.667 l
S
343.4727 304.999 m
343.4727 309.667 l
S
1 D
348.5254 304.999 m
348.5254 309.667 l
S
352.9014 304.999 m
352.9014 309.667 l
S
0 D
356.7598 304.999 m
356.7598 309.667 l
S
1 D
360.208 304.999 m
360.208 309.667 l
S
0 D
360.208 304.999 m
360.208 314.335 l
S
382.9199 304.999 m
382.9199 309.667 l
S
1 D
396.208 304.999 m
396.208 309.667 l
S
0 D
405.6309 304.999 m
405.6309 309.667 l
S
1 D
412.9443 304.999 m
412.9443 309.667 l
S
0 D
418.9199 304.999 m
418.9199 309.667 l
S
1 D
423.9668 304.999 m
423.9668 309.667 l
S
428.3418 304.999 m
428.3418 309.667 l
S
0 D
432.2012 304.999 m
432.2012 309.667 l
S
1 D
435.6563 304.999 m
435.6563 309.667 l
S
0 D
435.6563 304.999 m
435.6563 314.335 l
S
232.0376 491.7188 m
232.0376 487.0503 l
S
1 D
245.3198 491.7188 m
245.3198 487.0503 l
S
0 D
254.749 491.7188 m
254.749 487.0503 l
S
1 D
262.0557 491.7188 m
262.0557 487.0503 l
S
268.0313 491.7188 m
268.0313 487.0503 l
S
0 D
273.085 491.7188 m
273.085 487.0503 l
S
277.4604 491.7188 m
277.4604 487.0503 l
S
1 D
281.3193 491.7188 m
281.3193 487.0503 l
S
0 D
284.7671 491.7188 m
284.7671 487.0503 l
S
284.7671 491.7188 m
284.7671 482.3823 l
S
307.4785 491.7188 m
307.4785 487.0503 l
S
320.7676 491.7188 m
320.7676 487.0503 l
S
330.1895 491.7188 m
330.1895 487.0503 l
S
1 D
337.5039 491.7188 m
337.5039 487.0503 l
S
343.4727 491.7188 m
343.4727 487.0503 l
S
0 D
348.5254 491.7188 m
348.5254 487.0503 l
S
352.9014 491.7188 m
352.9014 487.0503 l
S
1 D
356.7598 491.7188 m
356.7598 487.0503 l
S
0 D
360.208 491.7188 m
360.208 487.0503 l
S
360.208 491.7188 m
360.208 482.3823 l
S
382.9199 491.7188 m
382.9199 487.0503 l
S
396.208 491.7188 m
396.208 487.0503 l
S
405.6309 491.7188 m
405.6309 487.0503 l
S
1 D
412.9443 491.7188 m
412.9443 487.0503 l
S
0 D
418.9199 491.7188 m
418.9199 487.0503 l
S
1 D
423.9668 491.7188 m
423.9668 487.0503 l
S
0 D
428.3418 491.7188 m
428.3418 487.0503 l
S
1 D
432.2012 491.7188 m
432.2012 487.0503 l
S
0 D
435.6563 491.7188 m
435.6563 487.0503 l
S
435.6563 491.7188 m
435.6563 482.3823 l
S
209.3262 321.5361 m
213.9941 321.5361 l
S
209.3262 333.1992 m
213.9941 333.1992 l
S
1 D
209.3262 342.248 m
213.9941 342.248 l
S
209.3262 349.6367 m
213.9941 349.6367 l
S
209.3262 355.8867 m
213.9941 355.8867 l
S
0 D
209.3262 361.3008 m
213.9941 361.3008 l
S
1 D
209.3262 366.0811 m
213.9941 366.0811 l
S
0 D
209.3262 370.3516 m
213.9941 370.3516 l
S
209.3262 370.3516 m
218.6621 370.3516 l
S
209.3262 398.4521 m
213.9941 398.4521 l
S
1 D
209.3262 414.8955 m
213.9941 414.8955 l
S
0 D
209.3262 426.5596 m
213.9941 426.5596 l
S
209.3262 435.6089 m
213.9941 435.6089 l
S
1 D
209.3262 442.9971 m
213.9941 442.9971 l
S
0 D
209.3262 449.2461 m
213.9941 449.2461 l
S
1 D
209.3262 454.6611 m
213.9941 454.6611 l
S
0 D
209.3262 459.4409 m
213.9941 459.4409 l
S
1 D
209.3262 463.7104 m
213.9941 463.7104 l
S
0 D
209.3262 463.7104 m
218.6621 463.7104 l
S
458.2861 321.5361 m
453.6182 321.5361 l
S
1 D
458.2861 333.1992 m
453.6182 333.1992 l
S
458.2861 342.248 m
453.6182 342.248 l
S
0 D
458.2861 349.6367 m
453.6182 349.6367 l
S
1 D
458.2861 355.8867 m
453.6182 355.8867 l
S
0 D
458.2861 361.3008 m
453.6182 361.3008 l
S
1 D
458.2861 366.0811 m
453.6182 366.0811 l
S
0 D
458.2861 370.3516 m
453.6182 370.3516 l
S
458.2861 370.3516 m
448.9502 370.3516 l
S
458.2861 398.4521 m
453.6182 398.4521 l
S
1 D
458.2861 414.8955 m
453.6182 414.8955 l
S
0 D
458.2861 426.5596 m
453.6182 426.5596 l
S
1 D
458.2861 435.6089 m
453.6182 435.6089 l
S
458.2861 442.9971 m
453.6182 442.9971 l
S
458.2861 449.2461 m
453.6182 449.2461 l
S
0 D
458.2861 454.6611 m
453.6182 454.6611 l
S
458.2861 459.4409 m
453.6182 459.4409 l
S
1 D
458.2861 463.7104 m
453.6182 463.7104 l
S
458.2861 463.7104 m
448.9502 463.7104 l
S
*U
Q
0 D
0 J 0 j 4 M
209.3262 304.999 m
458.2861 304.999 l
458.2861 491.7188 l
209.3262 491.7188 l
209.3262 304.999 l
s
0 A
u
0 To
1 0 0 1 360.4111 295.1108 0 Tp
0 Tv
TP
-7.002 0 Td
0 Tr
0 O
0 g
0 J 0 j 1 w 4 M []0 d
0 XR
%_ 0 50 XQ
/_Times-Roman 9.336 9.336 -4.0024 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
28.008 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 3 Th
0 Tq
0 Tg
0 0 Tl
0 Tc
0 Tw
(100) Tx 
(\r) TX 
TO
0 To
1 0 0 1 284.4263 295.1108 0 Tp
0 Tv
TP
-4.668 0 Td
0 Tr
(10) Tx 
(\r) TX 
TO
0 To
1 0 0 1 209.5068 295.1108 0 Tp
0 Tv
TP
-2.334 0 Td
0 Tr
(1) Tx 
(\r) TX 
TO
0 To
1 0 0 1 436.5479 295.1108 0 Tp
0 Tv
TP
-9.336 0 Td
0 Tr
(1000) Tx 
(\r) TX 
TO
U
u
0 To
1 0 0 1 191.3423 367.2754 0 Tp
0 Tv
TP
0 Tr
0 Ta
(100) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.6743 460.6357 0 Tp
0 Tv
TP
0 Tr
(1000) Tx 
(\r) TX 
TO
U
0 To
1 0 0 1 322.459 285.0781 0 Tp
0 Tv
TP
-28.7479 0 Td
0 Tr
0 0 0 1 k
/_Times-Italic 10.8975 10.8975 -4.5016 Tf
110 100 Tz
1 Ta
(p) Tx 
/_Symbol 8.558 8.558 -2.5075 Tf
-3.112 Ts
100 100 Tz
(m) Tx 
0 g
/_Times-Roman 10.892 10.892 -4.6695 Tf
0 Ts
(    [GeV/) Tx 
/_Times-Italic 10.892 10.892 -4.4993 Tf
(c) Tx 
/_Times-Roman 10.892 10.892 -4.6695 Tf
(]) Tx 
(\r) TX 
TO
314.1074 456.8643 m
314.1074 457.895 313.2705 458.7314 312.2402 458.7314 c
311.209 458.7314 310.373 457.895 310.373 456.8643 c
310.373 455.8335 311.209 454.9966 312.2402 454.9966 c
313.2705 454.9966 314.1074 455.8335 314.1074 456.8643 c
314.1074 456.8643 l
f
323.0703 455.9307 m
323.0703 456.9609 322.2334 457.7979 321.2031 457.7979 c
320.1719 457.7979 319.3359 456.9609 319.3359 455.9307 c
319.3359 454.8999 320.1719 454.0635 321.2031 454.0635 c
322.2334 454.0635 323.0703 454.8999 323.0703 455.9307 c
323.0703 455.9307 l
f
330.3516 455.5571 m
330.3516 456.5879 329.5156 457.4243 328.4844 457.4243 c
327.4531 457.4243 326.6172 456.5879 326.6172 455.5571 c
326.6172 454.5264 327.4531 453.6899 328.4844 453.6899 c
329.5156 453.6899 330.3516 454.5264 330.3516 455.5571 c
330.3516 455.5571 l
f
336.5137 454.6235 m
336.5137 455.6543 335.6777 456.4907 334.6465 456.4907 c
333.6152 456.4907 332.7793 455.6543 332.7793 454.6235 c
332.7793 453.5928 333.6152 452.7563 334.6465 452.7563 c
335.6777 452.7563 336.5137 453.5928 336.5137 454.6235 c
336.5137 454.6235 l
f
341.9287 453.3164 m
341.9287 454.3472 341.0918 455.1836 340.0615 455.1836 c
339.0303 455.1836 338.1934 454.3472 338.1934 453.3164 c
338.1934 452.2861 339.0303 451.4492 340.0615 451.4492 c
341.0918 451.4492 341.9287 452.2861 341.9287 453.3164 c
341.9287 453.3164 l
f
346.9697 452.0093 m
346.9697 453.04 346.1328 453.8765 345.1025 453.8765 c
344.0723 453.8765 343.2363 453.04 343.2363 452.0093 c
343.2363 450.9785 344.0723 450.1421 345.1025 450.1421 c
346.1328 450.1421 346.9697 450.9785 346.9697 452.0093 c
346.9697 452.0093 l
f
352.3848 450.8892 m
352.3848 451.9199 351.5488 452.7563 350.5176 452.7563 c
349.4863 452.7563 348.6504 451.9199 348.6504 450.8892 c
348.6504 449.8584 349.4863 449.022 350.5176 449.022 c
351.5488 449.022 352.3848 449.8584 352.3848 450.8892 c
352.3848 450.8892 l
f
358.5469 447.9019 m
358.5469 448.9321 357.71 449.769 356.6797 449.769 c
355.6484 449.769 354.8125 448.9321 354.8125 447.9019 c
354.8125 446.8711 355.6484 446.0347 356.6797 446.0347 c
357.71 446.0347 358.5469 446.8711 358.5469 447.9019 c
358.5469 447.9019 l
f
366.3887 445.2876 m
366.3887 446.3184 365.5527 447.1548 364.5215 447.1548 c
363.4912 447.1548 362.6543 446.3184 362.6543 445.2876 c
362.6543 444.2568 363.4912 443.4204 364.5215 443.4204 c
365.5527 443.4204 366.3887 444.2568 366.3887 445.2876 c
366.3887 445.2876 l
f
377.6855 438.939 m
377.6855 439.9697 376.8496 440.8062 375.8184 440.8062 c
374.7871 440.8062 373.9512 439.9697 373.9512 438.939 c
373.9512 437.9082 374.7871 437.0718 375.8184 437.0718 c
376.8496 437.0718 377.6855 437.9082 377.6855 438.939 c
377.6855 438.939 l
f
391.0352 431.0967 m
391.0352 432.1274 390.1992 432.9639 389.1689 432.9639 c
388.1377 432.9639 387.3008 432.1274 387.3008 431.0967 c
387.3008 430.0664 388.1377 429.2295 389.1689 429.2295 c
390.1992 429.2295 391.0352 430.0664 391.0352 431.0967 c
391.0352 431.0967 l
f
405.9727 420.0801 m
405.9727 421.1108 405.1367 421.9473 404.1064 421.9473 c
403.0762 421.9473 402.2393 421.1108 402.2393 420.0801 c
402.2393 419.0498 403.0762 418.2129 404.1064 418.2129 c
405.1367 418.2129 405.9727 419.0498 405.9727 420.0801 c
405.9727 420.0801 l
f
425.2061 400.8481 m
425.2061 401.8789 424.3691 402.7153 423.3379 402.7153 c
422.3076 402.7153 421.4707 401.8789 421.4707 400.8481 c
421.4707 399.8174 422.3076 398.981 423.3379 398.981 c
424.3691 398.981 425.2061 399.8174 425.2061 400.8481 c
425.2061 400.8481 l
f
452.8398 368.1719 m
452.8398 369.2021 452.0039 370.0391 450.9727 370.0391 c
449.9424 370.0391 449.1055 369.2021 449.1055 368.1719 c
449.1055 367.1416 449.9424 366.3047 450.9727 366.3047 c
452.0039 366.3047 452.8398 367.1416 452.8398 368.1719 c
452.8398 368.1719 l
f
0 To
0 1 -1 0 181.0386 399.2549 0 Tp
0 Tv
TP
-84.9216 0 Td
0 Tr
0 0 0 1 k
/_Times-Italic 10.8975 10.8975 -4.5016 Tf
110 100 Tz
28.0222 0 Xb
XB
(p) Tx 
/_Symbol 8.558 8.558 -2.5075 Tf
-3.112 Ts
100 100 Tz
(m) Tx 
/_Times-Roman 8.5623 8.5623 -3.6708 Tf
4.6704 Ts
(2) Tx 
(.7) Tx 
/_Times-Italic 10.8975 10.8975 -4.5016 Tf
0 Ts
110 100 Tz
(dN/dp) Tx 
/_Symbol 8.558 8.558 -2.5075 Tf
-3.112 Ts
(m  ) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
0 Ts
100 100 Tz
( [m) Tx 
/_Symbol 8.5623 8.5623 -2.5087 Tf
4.6704 Ts
(-) Tx 
/_Times-Roman 8.5623 8.5623 -3.6708 Tf
(2 ) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
0 Ts
(s) Tx 
/_Symbol 8.5623 8.5623 -2.5087 Tf
4.6704 Ts
(-) Tx 
/_Times-Roman 8.5623 8.5623 -3.6708 Tf
(1) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
0 Ts
( sr) Tx 
/_Symbol 8.5623 8.5623 -2.5087 Tf
4.6704 Ts
(-) Tx 
/_Times-Roman 8.5623 8.5623 -3.6708 Tf
(1) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
0 Ts
(\(GeV/) Tx 
/_Times-Italic 10.8975 10.8975 -4.5016 Tf
(c) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
(\)) Tx 
/_Times-Roman 8.5623 8.5623 -3.6708 Tf
4.6704 Ts
(1.7) Tx 
/_Times-Roman 10.8975 10.8975 -4.6719 Tf
0 Ts
(]) Tx 
(\r) TX 
TO
/BBAccumRotation (1.570796) XT
0 To
1 0 0 1 178.9497 287.6001 0 Tp
0 Tv
TP
0 Tr
0.85 g
/_Times-Roman 4 4 -1.7148 Tf
28.008 0 Xb
XB
0 Ta
() Tx 
() Tx 
() Tx 
() TX 
TO
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
