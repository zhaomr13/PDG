%!PS-Adobe-3.1 EPSF-3.0
%%Title: axion-fig3_working.eps
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Piotr Zyla
%%CreationDate: 11/7/07
%%BoundingBox: 0 0 1035 786
%%HiResBoundingBox: 0 0 1034.2154 785.4214
%%CropBox: 0 0 1034.2154 785.4214
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: axion-fig3_working.eps 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2007-10-15T21:03:25Z</xap:CreateDate>
  <xap:ModifyDate>2007-11-07T21:23:39Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>196</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAxAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qw/z9qXm2w1Hyu2iS&#xA;ILG51NbbV7f0vUlljeJ2RVkNVijqh5txrXjQjeqrzfyzb/mP+Z3kfWNN1vU/qzl4EZb3TI1h9WSK&#xA;Ga4gaJkjZvqU6ssZr9r7fPjirMfLvla7/LjT/NGvXmovrMd0kFxHalTGYRaxGJYUkdpGKBOCLXcB&#xA;d6kk4qyODXPN08KTRaDA0cgDI318CoPzgxVU/SvnL/qwQf8ASeP+qOKu/SvnL/qwQf8ASeP+qOKu&#xA;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&#xA;8f2fT7Yq/wD/2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -785.422 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 785.422 li
1034.22 785.422 li
1034.22 0 li
clp
[1 0 0 1 0 0 ] concat
126.102 681.102 mo
1020.17 451.102 li
1020.17 315.102 li
126.102 540.102 li
126.102 681.102 li
false sop
/0 
[/DeviceRGB] add_csa
level3{
gsave
clp
[39.7987 156.137 -156.137 39.7987 554.811 426.214 ] concat
0 {
bdict
/ShadingType 2 
/ColorSpace /0 map_csa
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
bdict
/Domain[0 1 ] 
/FunctionType 3
/Functions [
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [1 1 1 ]
/N 1 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.14902 0.560785 0.792157 ]
/C1 [1 1 1 ]
/N 2.51677 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.14902 0.560785 0.792157 ]
/C1 [0.137255 0.564706 0.811765 ]
/N 1 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.137255 0.564706 0.811765 ]
/C1 [1 1 1 ]
/N 2.40943 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [1 1 1 ]
/N 1 
edict
]
/Bounds [0.05 0.3 0.677778 0.85 ]
/Encode [0 1 1 0 0 1 0 1 0 1 ]
edict
edict }add_grad 0 exec_grad shfill grestore
}if
level3 not{
gsave
[39.7987 156.137 -156.137 39.7987 554.811 426.214 ] concat
clp
0 {
/0 map_csa setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~s8W-!s8W-!s8W-!s8DTVjP8;1`kT$hX/2GVPE(HOIX-$SCM.-a>?Fj%:.n,H6U3gt3B&iQ1,1F7/M&D%
.4HYm-RU5f-71&d-7'ra,pai`,pai`,pai`,pai`,pai`,pai`,pai`,paf^,U=W\,U=W\,U=W\,U=W\
,U=W\,U=W\,U=W\,U=TZ,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEX,9nEY,pjuf.4Zu'1,LpN
5!_V/:/b8#@qfk)I>!QDS>EBt_9:Egm.^P[s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~s8W-!s8W-!s8W-!s8Miena5T&iSN;?eBlI_a2Gg/]XkS[Z`pU6Wi2hlUS=ERSt):=R@'>,Q'@MsP*1ri
OH>QbO,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,oBaOH>QcOcbfiPE_>uQ^F52
SY)UNV5UDrYd:dL]tq\0c-b+si8s7mp&"dhs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~s8W-!s8W-!s8W-!s8Mrmq"F@OnaGl3lKRKojQ#7Xhqm2EgY1?5f@JL%e'lamdEp4ccHa\Zc-4DUbKJ)P
b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0.uObKJ)PbKJ)PbKJ)PbKJ)Pbfn;Tbfn;Tbfn;T
bfn;Tbfn;Uc-=MXc-=MXc-=MXc-=MXc-=MYcHa_\cHa_\cHa_\cHa_\cHab^cd0q`cd0qad*U1fdaHUo
eCE.%f\,!5h;7&JioK7bl0Ia*nalJLqYgHos8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} add_grad 0 exec_grad grestore
}if
newpath
578.102 19.2105 mo
578.102 294.102 li
609.102 294.102 li
609.102 239.102 li
633.102 239.102 li
633.102 19.2105 li
578.102 19.2105 li
1 0.97255 0.639216 rgb
f
2.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
578.102 19.2105 mo
578.102 294.102 li
609.102 294.102 li
609.102 239.102 li
633.102 239.102 li
633.102 19.2105 li
578.102 19.2105 li
cp
0 0 0 rgb
@
857.102 568.102 mo
775.102 568.102 li
775.102 520.102 li
857.102 520.102 li
857.102 568.102 li
1 0.97255 0.639216 rgb
f
4 lw
857.102 568.102 mo
775.102 568.102 li
775.102 520.102 li
857.102 520.102 li
857.102 568.102 li
cp
0.152942 0.145099 0.145099 rgb
@
857.102 625.102 mo
775.102 625.102 li
775.102 577.102 li
857.102 577.102 li
857.102 625.102 li
0 0.690197 0.309804 rgb
f
857.102 625.102 mo
775.102 625.102 li
775.102 577.102 li
857.102 577.102 li
857.102 625.102 li
cp
0.152942 0.145099 0.145099 rgb
@
857.102 681.102 mo
775.102 681.102 li
775.102 633.102 li
857.102 633.102 li
857.102 681.102 li
0.97255 0.792157 0.77255 rgb
f
857.102 681.102 mo
775.102 681.102 li
775.102 633.102 li
857.102 633.102 li
857.102 681.102 li
cp
0.152942 0.145099 0.145099 rgb
@
874.102 540.852 mo
877.512 540.852 li
879.723 540.852 881.104 540.758 881.654 540.57 cv
882.204 540.383 882.635 540.061 882.946 539.602 cv
883.258 539.144 883.414 538.57 883.414 537.883 cv
883.414 537.112 883.209 536.49 882.799 536.016 cv
882.389 535.542 881.81 535.242 881.062 535.117 cv
880.688 535.065 879.567 535.039 877.699 535.039 cv
874.102 535.039 li
874.102 540.852 li
cp
869.477 554.102 mo
869.477 531.164 li
879.187 531.164 li
881.628 531.164 883.402 531.371 884.509 531.783 cv
885.615 532.195 886.501 532.929 887.166 533.982 cv
887.831 535.037 888.164 536.242 888.164 537.6 cv
888.164 539.322 887.665 540.744 886.669 541.866 cv
885.672 542.988 884.182 543.695 882.198 543.987 cv
883.187 544.571 884.002 545.212 884.646 545.91 cv
885.289 546.608 886.156 547.849 887.248 549.631 cv
890.039 554.102 li
884.598 554.102 li
881.24 549.08 li
880.045 547.314 879.227 546.2 878.787 545.74 cv
878.347 545.281 877.88 544.966 877.388 544.795 cv
876.895 544.625 876.113 544.539 875.045 544.539 cv
874.102 544.539 li
874.102 554.102 li
869.477 554.102 li
0 0 0 rgb
f
897.211 544.164 mo
897.211 550.227 li
901.506 550.227 li
903.178 550.227 904.238 550.181 904.688 550.087 cv
905.377 549.964 905.939 549.662 906.373 549.183 cv
906.807 548.704 907.023 548.062 907.023 547.257 cv
907.023 546.577 906.856 546 906.522 545.525 cv
906.188 545.051 905.704 544.706 905.072 544.489 cv
904.439 544.272 903.068 544.164 900.957 544.164 cv
897.211 544.164 li
cp
897.211 535.039 mo
897.211 540.289 li
900.242 540.289 li
902.044 540.289 903.164 540.264 903.602 540.212 cv
904.393 540.119 905.016 539.848 905.469 539.398 cv
905.922 538.949 906.148 538.358 906.148 537.625 cv
906.148 536.924 905.953 536.354 905.562 535.914 cv
905.172 535.476 904.591 535.21 903.82 535.116 cv
903.361 535.065 902.044 535.039 899.867 535.039 cv
897.211 535.039 li
cp
892.586 531.164 mo
901.742 531.164 li
903.555 531.164 904.906 531.24 905.797 531.392 cv
906.688 531.544 907.484 531.86 908.188 532.341 cv
908.891 532.822 909.477 533.463 909.945 534.263 cv
910.414 535.062 910.648 535.959 910.648 536.952 cv
910.648 538.03 910.361 539.019 909.788 539.917 cv
909.215 540.816 908.438 541.491 907.457 541.94 cv
908.844 542.347 909.91 543.038 910.655 544.017 cv
911.4 544.995 911.773 546.146 911.773 547.467 cv
911.773 548.508 911.531 549.52 911.047 550.504 cv
910.562 551.487 909.9 552.272 909.062 552.86 cv
908.224 553.448 907.189 553.811 905.961 553.945 cv
905.189 554.029 903.33 554.081 900.383 554.102 cv
892.586 554.102 li
892.586 531.164 li
f
915.695 554.102 mo
915.695 531.164 li
931.383 531.164 li
931.383 535.039 li
920.32 535.039 li
920.32 540.477 li
929.883 540.477 li
929.883 544.352 li
920.32 544.352 li
920.32 554.102 li
915.695 554.102 li
f
869.477 593.164 mo
874.102 593.164 li
874.102 605.671 li
874.102 607.655 874.158 608.941 874.272 609.529 cv
874.468 610.475 874.936 611.233 875.674 611.806 cv
876.412 612.378 877.421 612.664 878.702 612.664 cv
880.003 612.664 880.983 612.395 881.645 611.854 cv
882.306 611.312 882.703 610.648 882.838 609.86 cv
882.972 609.073 883.039 607.766 883.039 605.938 cv
883.039 593.164 li
887.664 593.164 li
887.664 605.235 li
887.664 607.995 887.539 609.944 887.29 611.083 cv
887.041 612.223 886.582 613.185 885.913 613.968 cv
885.244 614.752 884.35 615.377 883.23 615.842 cv
882.109 616.306 880.648 616.539 878.843 616.539 cv
876.664 616.539 875.012 616.285 873.887 615.779 cv
872.762 615.272 871.872 614.614 871.219 613.804 cv
870.565 612.993 870.135 612.145 869.928 611.256 cv
869.627 609.939 869.477 607.995 869.477 605.424 cv
869.477 593.164 li
f
892.586 616.102 mo
892.586 593.164 li
908.273 593.164 li
908.273 597.039 li
897.211 597.039 li
897.211 602.477 li
906.773 602.477 li
906.773 606.352 li
897.211 606.352 li
897.211 616.102 li
892.586 616.102 li
f
881.705 661.679 mo
878.445 653.179 li
875.354 661.679 li
881.705 661.679 li
cp
890.164 670.741 mo
885.183 670.741 li
883.192 665.554 li
873.946 665.554 li
872.059 670.741 li
867.102 670.741 li
875.975 647.804 li
880.898 647.804 li
890.164 670.741 li
f
897.211 651.679 mo
897.211 666.866 li
900.648 666.866 li
901.933 666.866 902.86 666.794 903.431 666.648 cv
904.177 666.46 904.797 666.142 905.289 665.693 cv
905.781 665.245 906.184 664.508 906.494 663.48 cv
906.805 662.453 906.961 661.054 906.961 659.28 cv
906.961 657.508 906.805 656.148 906.494 655.198 cv
906.184 654.249 905.748 653.509 905.188 652.978 cv
904.628 652.446 903.918 652.086 903.058 651.898 cv
902.415 651.752 901.155 651.679 899.279 651.679 cv
897.211 651.679 li
cp
892.586 647.804 mo
901.005 647.804 li
902.903 647.804 904.351 647.95 905.347 648.242 cv
906.685 648.639 907.83 649.343 908.785 650.354 cv
909.739 651.366 910.466 652.606 910.964 654.07 cv
911.462 655.536 911.711 657.343 911.711 659.491 cv
911.711 661.38 911.478 663.007 911.011 664.373 cv
910.44 666.043 909.626 667.394 908.567 668.426 cv
907.769 669.208 906.689 669.818 905.331 670.256 cv
904.314 670.58 902.955 670.741 901.254 670.741 cv
892.586 670.741 li
892.586 647.804 li
f
915.57 670.741 mo
915.57 647.804 li
922.544 647.804 li
926.664 663.45 li
930.778 647.804 li
937.758 647.804 li
937.758 670.741 li
933.445 670.741 li
933.414 652.686 li
928.848 670.741 li
924.414 670.741 li
919.914 652.686 li
919.883 670.741 li
915.57 670.741 li
f
940.008 670.741 mo
947.889 658.786 li
940.758 647.804 li
946.151 647.804 li
950.629 654.63 li
955.129 647.804 li
960.508 647.804 li
953.347 658.774 li
961.195 670.741 li
955.652 670.741 li
950.607 662.972 li
945.535 670.741 li
940.008 670.741 li
f
502.876 475.781 mo
502.876 452.844 li
507.501 452.844 li
507.501 462.978 li
516.821 452.844 li
523.033 452.844 li
514.426 461.705 li
523.471 475.781 li
517.507 475.781 li
511.24 464.987 li
507.501 468.836 li
507.501 475.781 li
502.876 475.781 li
f
524.736 468.406 mo
529.236 467.969 li
529.506 469.453 530.057 470.543 530.885 471.238 cv
531.713 471.934 532.83 472.281 534.236 472.281 cv
535.725 472.281 536.848 471.97 537.604 471.346 cv
538.357 470.722 538.736 469.992 538.736 469.156 cv
538.736 468.62 538.576 468.164 538.26 467.787 cv
537.943 467.411 537.391 467.084 536.604 466.805 cv
536.062 466.613 534.832 466.273 532.912 465.784 cv
530.441 465.157 528.709 464.392 527.713 463.489 cv
526.311 462.22 525.611 460.671 525.611 458.845 cv
525.611 457.67 525.939 456.57 526.598 455.547 cv
527.256 454.523 528.205 453.744 529.445 453.209 cv
530.684 452.674 532.18 452.406 533.932 452.406 cv
536.793 452.406 538.947 453.037 540.395 454.297 cv
541.842 455.558 542.602 457.24 542.674 459.344 cv
538.049 459.531 li
537.854 458.354 537.434 457.508 536.789 456.992 cv
536.146 456.477 535.182 456.219 533.895 456.219 cv
532.566 456.219 531.525 456.496 530.773 457.051 cv
530.289 457.407 530.049 457.884 530.049 458.48 cv
530.049 459.025 530.275 459.491 530.732 459.878 cv
531.312 460.37 532.723 460.888 534.963 461.43 cv
537.201 461.973 538.857 462.529 539.932 463.1 cv
541.004 463.67 541.844 464.45 542.451 465.439 cv
543.057 466.429 543.361 467.65 543.361 469.105 cv
543.361 470.425 542.996 471.66 542.268 472.812 cv
541.537 473.963 540.506 474.818 539.174 475.379 cv
537.84 475.938 536.178 476.219 534.189 476.219 cv
531.293 476.219 529.068 475.554 527.518 474.224 cv
525.965 472.894 525.037 470.954 524.736 468.406 cv
f
552.982 475.781 mo
544.955 452.844 li
549.969 452.844 li
555.674 469.844 li
561.301 452.844 li
566.205 452.844 li
558.02 475.781 li
552.982 475.781 li
f
566.611 475.781 mo
566.611 471.594 li
578.664 456.719 li
567.986 456.719 li
567.986 452.844 li
584.799 452.844 li
584.799 456.469 li
572.291 471.906 li
585.236 471.906 li
585.236 475.781 li
566.611 475.781 li
f
507.501 537.719 mo
507.501 552.906 li
510.938 552.906 li
512.223 552.906 513.151 552.834 513.721 552.688 cv
514.467 552.5 515.087 552.182 515.58 551.733 cv
516.072 551.285 516.474 550.548 516.785 549.52 cv
517.095 548.493 517.251 547.094 517.251 545.32 cv
517.251 543.548 517.095 542.188 516.785 541.238 cv
516.474 540.289 516.039 539.549 515.479 539.018 cv
514.918 538.486 514.208 538.126 513.348 537.938 cv
512.706 537.792 511.446 537.719 509.57 537.719 cv
507.501 537.719 li
cp
502.876 533.844 mo
511.295 533.844 li
513.194 533.844 514.641 533.99 515.637 534.282 cv
516.975 534.679 518.121 535.383 519.076 536.395 cv
520.03 537.406 520.756 538.646 521.254 540.11 cv
521.752 541.576 522.001 543.383 522.001 545.531 cv
522.001 547.42 521.768 549.047 521.301 550.413 cv
520.731 552.083 519.916 553.434 518.858 554.466 cv
518.059 555.248 516.98 555.858 515.622 556.296 cv
514.604 556.62 513.246 556.781 511.544 556.781 cv
502.876 556.781 li
502.876 533.844 li
f
525.986 556.781 mo
525.986 533.844 li
541.674 533.844 li
541.674 537.719 li
530.611 537.719 li
530.611 543.156 li
540.174 543.156 li
540.174 547.031 li
530.611 547.031 li
530.611 556.781 li
525.986 556.781 li
f
544.283 549.406 mo
548.783 548.969 li
549.053 550.453 549.604 551.543 550.432 552.238 cv
551.26 552.934 552.377 553.281 553.783 553.281 cv
555.272 553.281 556.395 552.97 557.15 552.346 cv
557.904 551.722 558.283 550.992 558.283 550.156 cv
558.283 549.62 558.123 549.164 557.807 548.787 cv
557.49 548.411 556.938 548.084 556.15 547.805 cv
555.609 547.613 554.379 547.273 552.459 546.784 cv
549.988 546.157 548.256 545.392 547.26 544.489 cv
545.857 543.22 545.158 541.671 545.158 539.845 cv
545.158 538.67 545.486 537.57 546.145 536.547 cv
546.803 535.523 547.752 534.744 548.992 534.209 cv
550.23 533.674 551.727 533.406 553.478 533.406 cv
556.34 533.406 558.494 534.037 559.941 535.297 cv
561.389 536.558 562.148 538.24 562.221 540.344 cv
557.596 540.531 li
557.4 539.354 556.98 538.508 556.336 537.992 cv
555.693 537.477 554.728 537.219 553.441 537.219 cv
552.113 537.219 551.072 537.496 550.32 538.051 cv
549.836 538.407 549.596 538.884 549.596 539.48 cv
549.596 540.025 549.822 540.491 550.279 540.878 cv
550.859 541.37 552.27 541.888 554.51 542.43 cv
556.748 542.973 558.404 543.529 559.478 544.1 cv
560.551 544.67 561.391 545.45 561.998 546.439 cv
562.604 547.429 562.908 548.65 562.908 550.106 cv
562.908 551.425 562.543 552.66 561.814 553.812 cv
561.084 554.963 560.053 555.818 558.721 556.379 cv
557.387 556.938 555.725 557.219 553.736 557.219 cv
550.84 557.219 548.615 556.554 547.064 555.224 cv
545.512 553.894 544.584 551.954 544.283 549.406 cv
f
564.814 556.781 mo
564.814 552.594 li
576.867 537.719 li
566.189 537.719 li
566.189 533.844 li
583.002 533.844 li
583.002 537.469 li
570.494 552.906 li
583.439 552.906 li
583.439 556.781 li
564.814 556.781 li
f
177.34 524.759 mo
174.08 516.259 li
170.989 524.759 li
177.34 524.759 li
cp
185.799 533.821 mo
180.817 533.821 li
178.827 528.634 li
169.581 528.634 li
167.693 533.821 li
162.736 533.821 li
171.609 510.884 li
176.532 510.884 li
185.799 533.821 li
f
186.064 533.821 mo
192.027 525.259 li
186.314 517.196 li
191.639 517.196 li
194.58 521.768 li
197.627 517.196 li
202.752 517.196 li
197.196 525.07 li
203.314 533.821 li
197.989 533.821 li
194.58 528.671 li
191.189 533.821 li
186.064 533.821 li
f
205.893 533.821 mo
205.893 517.196 li
210.268 517.196 li
210.268 533.821 li
205.893 533.821 li
cp
205.893 514.946 mo
205.893 510.884 li
210.268 510.884 li
210.268 514.946 li
205.893 514.946 li
f
218.283 525.54 mo
218.283 527.206 218.674 528.482 219.457 529.368 cv
220.24 530.254 221.205 530.696 222.354 530.696 cv
223.501 530.696 224.464 530.254 225.241 529.368 cv
226.019 528.482 226.408 527.196 226.408 525.509 cv
226.408 523.864 226.019 522.599 225.241 521.713 cv
224.464 520.827 223.501 520.384 222.354 520.384 cv
221.205 520.384 220.24 520.827 219.457 521.713 cv
218.674 522.599 218.283 523.874 218.283 525.54 cv
cp
213.783 525.305 mo
213.783 523.839 214.143 522.42 214.861 521.048 cv
215.58 519.676 216.598 518.628 217.916 517.905 cv
219.233 517.183 220.705 516.821 222.33 516.821 cv
224.84 516.821 226.897 517.642 228.502 519.28 cv
230.105 520.919 230.908 522.99 230.908 525.493 cv
230.908 528.018 230.098 530.109 228.479 531.77 cv
226.858 533.43 224.819 534.259 222.361 534.259 cv
220.84 534.259 219.39 533.913 218.01 533.223 cv
216.629 532.531 215.58 531.519 214.861 530.183 cv
214.143 528.848 213.783 527.222 213.783 525.305 cv
f
249.455 533.821 mo
245.08 533.821 li
245.08 525.343 li
245.08 523.55 244.985 522.39 244.797 521.862 cv
244.608 521.336 244.303 520.927 243.879 520.635 cv
243.455 520.343 242.944 520.196 242.348 520.196 cv
241.584 520.196 240.898 520.405 240.291 520.822 cv
239.684 521.239 239.267 521.792 239.042 522.48 cv
238.817 523.169 238.705 524.441 238.705 526.297 cv
238.705 533.821 li
234.33 533.821 li
234.33 517.196 li
238.393 517.196 li
238.393 519.634 li
239.842 517.759 241.668 516.821 243.869 516.821 cv
244.839 516.821 245.726 516.996 246.529 517.346 cv
247.332 517.695 247.939 518.142 248.352 518.685 cv
248.764 519.228 249.05 519.843 249.212 520.531 cv
249.374 521.221 249.455 522.207 249.455 523.49 cv
249.455 533.821 li
f
154.314 572.222 mo
154.314 549.284 li
161.288 549.284 li
165.408 564.931 li
169.522 549.284 li
176.502 549.284 li
176.502 572.222 li
172.189 572.222 li
172.158 554.166 li
167.592 572.222 li
163.158 572.222 li
158.658 554.166 li
158.627 572.222 li
154.314 572.222 li
f
184.471 563.94 mo
184.471 565.606 184.861 566.883 185.645 567.769 cv
186.428 568.654 187.393 569.097 188.541 569.097 cv
189.688 569.097 190.651 568.654 191.429 567.769 cv
192.206 566.883 192.596 565.597 192.596 563.909 cv
192.596 562.265 192.206 560.999 191.429 560.113 cv
190.651 559.228 189.688 558.784 188.541 558.784 cv
187.393 558.784 186.428 559.228 185.645 560.113 cv
184.861 560.999 184.471 562.274 184.471 563.94 cv
cp
179.971 563.705 mo
179.971 562.239 180.33 560.82 181.049 559.448 cv
181.768 558.076 182.785 557.028 184.104 556.306 cv
185.421 555.583 186.893 555.222 188.518 555.222 cv
191.027 555.222 193.085 556.042 194.689 557.681 cv
196.293 559.319 197.096 561.391 197.096 563.894 cv
197.096 566.418 196.285 568.51 194.666 570.17 cv
193.046 571.83 191.007 572.659 188.549 572.659 cv
187.027 572.659 185.577 572.314 184.197 571.623 cv
182.816 570.932 181.768 569.919 181.049 568.583 cv
180.33 567.248 179.971 565.622 179.971 563.705 cv
f
204.018 563.572 mo
204.018 565.352 204.266 566.638 204.762 567.433 cv
205.479 568.584 206.48 569.159 207.768 569.159 cv
208.791 569.159 209.661 568.728 210.379 567.864 cv
211.096 567.001 211.455 565.712 211.455 563.996 cv
211.455 562.081 211.106 560.702 210.41 559.86 cv
209.714 559.019 208.822 558.597 207.736 558.597 cv
206.682 558.597 205.798 559.013 205.086 559.845 cv
204.373 560.677 204.018 561.919 204.018 563.572 cv
cp
215.768 572.222 mo
211.705 572.222 li
211.705 569.784 li
211.024 570.732 210.221 571.448 209.294 571.933 cv
208.367 572.417 207.433 572.659 206.491 572.659 cv
204.575 572.659 202.934 571.887 201.567 570.342 cv
200.2 568.797 199.518 566.643 199.518 563.878 cv
199.518 561.05 200.183 558.9 201.513 557.429 cv
202.843 555.958 204.523 555.222 206.555 555.222 cv
208.418 555.222 210.031 555.993 211.393 557.534 cv
211.393 549.284 li
215.768 549.284 li
215.768 572.222 li
f
229.939 562.472 mo
229.908 561.206 229.58 560.244 228.957 559.585 cv
228.334 558.927 227.575 558.597 226.682 558.597 cv
225.725 558.597 224.936 558.944 224.313 559.64 cv
223.688 560.335 223.382 561.278 223.393 562.472 cv
229.939 562.472 li
cp
229.627 566.972 mo
234.002 567.722 li
233.441 569.331 232.559 570.557 231.352 571.398 cv
230.145 572.238 228.634 572.659 226.82 572.659 cv
223.949 572.659 221.825 571.712 220.446 569.815 cv
219.358 568.298 218.814 566.381 218.814 564.066 cv
218.814 561.302 219.533 559.137 220.971 557.57 cv
222.408 556.005 224.226 555.222 226.424 555.222 cv
228.893 555.222 230.84 556.037 232.268 557.667 cv
233.694 559.298 234.377 561.795 234.314 565.159 cv
223.314 565.159 li
223.345 566.462 223.694 567.475 224.363 568.198 cv
225.032 568.923 225.866 569.284 226.864 569.284 cv
227.543 569.284 228.114 569.102 228.577 568.736 cv
229.04 568.371 229.39 567.783 229.627 566.972 cv
f
237.861 572.222 mo
237.861 549.284 li
242.236 549.284 li
242.236 572.222 li
237.861 572.222 li
f
245.252 567.659 mo
249.689 566.972 li
249.875 567.811 250.251 568.447 250.819 568.882 cv
251.387 569.317 252.182 569.534 253.203 569.534 cv
254.328 569.534 255.174 569.323 255.742 568.899 cv
256.123 568.604 256.314 568.207 256.314 567.709 cv
256.314 567.371 256.21 567.091 256.002 566.868 cv
255.782 566.657 255.292 566.461 254.53 566.281 cv
250.983 565.488 248.735 564.766 247.786 564.115 cv
246.472 563.213 245.814 561.959 245.814 560.353 cv
245.814 558.905 246.384 557.688 247.522 556.701 cv
248.661 555.715 250.428 555.222 252.821 555.222 cv
255.1 555.222 256.793 555.591 257.9 556.327 cv
259.008 557.064 259.772 558.154 260.189 559.597 cv
256.064 560.347 li
255.885 559.701 255.545 559.206 255.044 558.862 cv
254.542 558.519 253.827 558.347 252.899 558.347 cv
251.728 558.347 250.89 558.511 250.384 558.839 cv
250.046 559.071 249.877 559.373 249.877 559.743 cv
249.877 560.062 250.023 560.331 250.317 560.553 cv
250.715 560.85 252.09 561.268 254.442 561.807 cv
256.794 562.346 258.437 563.003 259.369 563.778 cv
260.291 564.564 260.752 565.659 260.752 567.064 cv
260.752 568.594 260.116 569.909 258.846 571.009 cv
257.574 572.109 255.694 572.659 253.205 572.659 cv
250.944 572.659 249.155 572.211 247.838 571.314 cv
246.52 570.417 245.658 569.198 245.252 567.659 cv
f
904.162 761.477 mo
908.375 761.477 li
907.986 763.488 li
909.639 761.856 911.373 761.039 913.193 761.039 cv
914.447 761.039 915.416 761.299 916.096 761.818 cv
916.775 762.338 917.209 763.054 917.398 763.967 cv
917.973 763.137 918.799 762.44 919.875 761.88 cv
920.953 761.319 922.072 761.039 923.232 761.039 cv
924.561 761.039 925.596 761.404 926.338 762.133 cv
927.08 762.861 927.453 763.826 927.453 765.026 cv
927.422 765.593 927.262 766.579 926.973 767.985 cv
924.773 778.102 li
920.307 778.102 li
922.432 767.974 li
922.697 766.704 922.85 765.981 922.887 765.804 cv
922.887 765.317 922.746 764.933 922.467 764.65 cv
922.188 764.368 921.768 764.227 921.209 764.227 cv
920.078 764.227 919.07 764.825 918.186 766.022 cv
917.541 766.879 916.992 768.398 916.539 770.58 cv
914.961 778.102 li
910.494 778.102 li
912.598 768.002 li
912.838 766.838 912.957 766.083 912.957 765.736 cv
912.957 765.297 912.809 764.935 912.51 764.651 cv
912.213 764.368 911.803 764.227 911.279 764.227 cv
910.787 764.227 910.279 764.375 909.756 764.671 cv
909.232 764.968 908.773 765.375 908.381 765.893 cv
907.988 766.411 907.65 767.077 907.367 767.891 cv
907.242 768.272 907.037 769.134 906.756 770.477 cv
905.148 778.102 li
900.682 778.102 li
904.162 761.477 li
f
938.497 778.828 mo
936.182 772.641 li
933.926 778.828 li
938.497 778.828 li
cp
944.666 785.422 mo
941.035 785.422 li
939.599 781.641 li
932.9 781.641 li
931.522 785.422 li
927.947 785.422 li
934.43 768.734 li
937.994 768.734 li
944.666 785.422 li
f
954.35 784.852 mo
951.35 784.852 li
949.762 782.442 948.551 779.939 947.721 777.344 cv
946.891 774.748 946.475 772.234 946.475 769.805 cv
946.475 766.791 946.988 763.939 948.018 761.249 cv
948.91 758.913 950.041 756.76 951.412 754.789 cv
954.412 754.789 li
953.033 757.949 952.084 760.637 951.564 762.853 cv
951.047 765.068 950.787 767.417 950.787 769.898 cv
950.787 771.609 950.939 773.361 951.246 775.154 cv
951.551 776.948 951.971 778.652 952.502 780.269 cv
952.852 781.332 953.467 782.859 954.35 784.852 cv
f
960.148 762.102 mo
960.148 772.758 li
960.148 774.262 960.532 775.573 961.812 776.149 cv
962.772 776.565 963.571 776.565 964.436 776.182 cv
965.172 775.83 966.323 775.029 966.772 774.006 cv
966.772 762.102 li
969.523 762.102 li
969.523 774.39 li
969.523 775.222 969.779 776.149 970.26 776.63 cv
970.772 777.142 971.315 777.237 971.956 776.886 cv
972.819 776.374 972.724 775.414 972.947 774.869 cv
973.588 774.869 li
973.332 775.958 973.075 777.302 971.412 778.197 cv
969.876 779.029 968.564 778.518 968.115 778.166 cv
966.996 777.334 967.027 776.533 966.804 775.51 cv
966.516 775.926 966.067 776.63 964.564 777.718 cv
963.828 778.262 962.708 778.646 961.556 778.646 cv
960.052 778.646 958.996 777.43 958.548 777.109 cv
958.548 777.846 li
958.644 779.733 959.188 780.31 959.508 782.102 cv
959.859 784.214 958.899 785.237 958.035 785.237 cv
957.172 785.237 956.212 784.214 956.564 782.102 cv
956.884 780.31 957.396 779.733 957.396 777.846 cv
957.396 762.102 li
960.148 762.102 li
f
986.001 768.352 mo
985.97 767.086 985.642 766.124 985.019 765.465 cv
984.396 764.807 983.637 764.477 982.743 764.477 cv
981.786 764.477 980.997 764.824 980.374 765.52 cv
979.75 766.215 979.443 767.158 979.454 768.352 cv
986.001 768.352 li
cp
985.688 772.852 mo
990.064 773.602 li
989.503 775.211 988.62 776.437 987.413 777.277 cv
986.206 778.118 984.695 778.539 982.882 778.539 cv
980.011 778.539 977.887 777.592 976.508 775.695 cv
975.42 774.178 974.876 772.261 974.876 769.946 cv
974.876 767.182 975.595 765.017 977.032 763.45 cv
978.47 761.885 980.287 761.102 982.485 761.102 cv
984.954 761.102 986.901 761.917 988.329 763.547 cv
989.756 765.178 990.438 767.675 990.376 771.039 cv
979.376 771.039 li
979.406 772.342 979.756 773.354 980.425 774.078 cv
981.094 774.803 981.928 775.164 982.926 775.164 cv
983.604 775.164 984.176 774.981 984.639 774.616 cv
985.102 774.251 985.451 773.663 985.688 772.852 cv
f
999.7 778.102 mo
991.673 755.164 li
996.687 755.164 li
1002.4 772.164 li
1008.02 755.164 li
1012.93 755.164 li
1004.74 778.102 li
999.7 778.102 li
f
1014.15 784.852 mo
1014.98 782.995 1015.56 781.571 1015.9 780.582 cv
1016.24 779.591 1016.56 778.449 1016.85 777.156 cv
1017.14 775.863 1017.36 774.636 1017.5 773.473 cv
1017.64 772.311 1017.71 771.119 1017.71 769.898 cv
1017.71 767.417 1017.45 765.068 1016.94 762.853 cv
1016.42 760.637 1015.47 757.949 1014.08 754.789 cv
1017.08 754.789 li
1018.65 757.031 1019.86 759.409 1020.72 761.922 cv
1021.59 764.436 1022.02 766.984 1022.02 769.57 cv
1022.02 771.75 1021.68 774.085 1021.01 776.577 cv
1020.24 779.372 1018.97 782.13 1017.21 784.852 cv
1014.15 784.852 li
f
128.138 743.738 mo
123.981 743.738 li
123.981 728.08 li
122.461 729.504 120.669 730.557 118.606 731.238 cv
118.606 727.457 li
119.691 727.102 120.871 726.427 122.144 725.434 cv
123.416 724.44 124.29 723.281 124.763 721.957 cv
128.138 721.957 li
128.138 743.738 li
f
338.984 739.863 mo
338.984 743.738 li
324.421 743.738 li
324.579 742.277 325.051 740.893 325.838 739.586 cv
326.626 738.277 328.18 736.543 330.502 734.381 cv
332.371 732.635 333.517 731.45 333.94 730.828 cv
334.511 729.97 334.796 729.121 334.796 728.281 cv
334.796 727.354 334.549 726.641 334.056 726.143 cv
333.562 725.645 332.88 725.395 332.01 725.395 cv
331.15 725.395 330.465 725.655 329.957 726.176 cv
329.449 726.696 329.156 727.561 329.078 728.77 cv
324.921 728.357 li
325.168 726.076 325.94 724.439 327.24 723.446 cv
328.54 722.453 330.165 721.957 332.115 721.957 cv
334.252 721.957 335.931 722.533 337.152 723.688 cv
338.373 724.84 338.984 726.275 338.984 727.99 cv
338.984 728.966 338.809 729.895 338.46 730.777 cv
338.11 731.66 337.556 732.584 336.798 733.549 cv
336.295 734.19 335.387 735.112 334.072 736.314 cv
332.757 737.518 331.925 738.316 331.575 738.71 cv
331.226 739.104 330.942 739.488 330.726 739.863 cv
338.984 739.863 li
f
598.016 738.17 mo
602.172 737.738 li
602.289 738.68 602.639 739.426 603.22 739.976 cv
603.801 740.525 604.47 740.801 605.228 740.801 cv
606.094 740.801 606.826 740.447 607.427 739.738 cv
608.027 739.029 608.328 737.961 608.328 736.533 cv
608.328 735.195 608.028 734.192 607.431 733.523 cv
606.833 732.854 606.055 732.52 605.096 732.52 cv
603.9 732.52 602.828 733.051 601.879 734.113 cv
598.516 733.621 li
600.641 722.301 li
611.641 722.301 li
611.641 726.207 li
603.794 726.207 li
603.134 729.898 li
604.062 729.438 605.012 729.207 605.98 729.207 cv
607.829 729.207 609.396 729.881 610.682 731.227 cv
611.967 732.572 612.609 734.32 612.609 736.468 cv
612.609 738.26 612.091 739.858 611.055 741.264 cv
609.644 743.185 607.686 744.145 605.179 744.145 cv
603.176 744.145 601.543 743.604 600.279 742.524 cv
599.017 741.444 598.262 739.992 598.016 738.17 cv
f
810.348 743.738 mo
806.191 743.738 li
806.191 728.08 li
804.671 729.504 802.879 730.557 800.816 731.238 cv
800.816 727.457 li
801.901 727.102 803.08 726.427 804.354 725.434 cv
805.626 724.44 806.5 723.281 806.973 721.957 cv
810.348 721.957 li
810.348 743.738 li
f
823.614 725.395 mo
823.118 725.395 822.676 725.556 822.286 725.877 cv
821.896 726.199 821.596 726.775 821.381 727.607 cv
821.1 728.688 820.958 730.504 820.958 733.059 cv
820.958 735.613 821.084 737.368 821.338 738.323 cv
821.59 739.279 821.908 739.915 822.293 740.232 cv
822.678 740.549 823.118 740.707 823.614 740.707 cv
824.11 740.707 824.553 740.547 824.942 740.225 cv
825.332 739.902 825.633 739.326 825.848 738.494 cv
826.129 737.425 826.27 735.613 826.27 733.059 cv
826.27 730.504 826.145 728.749 825.891 727.793 cv
825.639 726.838 825.319 726.199 824.936 725.877 cv
824.551 725.556 824.11 725.395 823.614 725.395 cv
cp
823.614 721.957 mo
825.712 721.957 827.352 722.708 828.533 724.21 cv
829.941 725.988 830.646 728.938 830.646 733.059 cv
830.646 737.168 829.937 740.123 828.519 741.922 cv
827.347 743.404 825.712 744.145 823.614 744.145 cv
821.507 744.145 819.809 743.332 818.518 741.707 cv
817.228 740.082 816.583 737.184 816.583 733.014 cv
816.583 728.924 817.292 725.978 818.71 724.18 cv
819.882 722.698 821.517 721.957 823.614 721.957 cv
f
1017.33 739.863 mo
1017.33 743.738 li
1002.77 743.738 li
1002.92 742.277 1003.4 740.893 1004.18 739.586 cv
1004.97 738.277 1006.52 736.543 1008.85 734.381 cv
1010.72 732.635 1011.86 731.45 1012.29 730.828 cv
1012.86 729.97 1013.14 729.121 1013.14 728.281 cv
1013.14 727.354 1012.89 726.641 1012.4 726.143 cv
1011.91 725.645 1011.23 725.395 1010.36 725.395 cv
1009.49 725.395 1008.81 725.655 1008.3 726.176 cv
1007.79 726.696 1007.5 727.561 1007.42 728.77 cv
1003.27 728.357 li
1003.51 726.076 1004.29 724.439 1005.58 723.446 cv
1006.89 722.453 1008.51 721.957 1010.46 721.957 cv
1012.6 721.957 1014.28 722.533 1015.5 723.688 cv
1016.72 724.84 1017.33 726.275 1017.33 727.99 cv
1017.33 728.966 1017.15 729.895 1016.8 730.777 cv
1016.45 731.66 1015.9 732.584 1015.14 733.549 cv
1014.64 734.19 1013.73 735.112 1012.42 736.314 cv
1011.1 737.518 1010.27 738.316 1009.92 738.71 cv
1009.57 739.104 1009.29 739.488 1009.07 739.863 cv
1017.33 739.863 li
f
1027.19 725.395 mo
1026.69 725.395 1026.25 725.556 1025.86 725.877 cv
1025.47 726.199 1025.17 726.775 1024.96 727.607 cv
1024.67 728.688 1024.53 730.504 1024.53 733.059 cv
1024.53 735.613 1024.66 737.368 1024.91 738.323 cv
1025.16 739.279 1025.48 739.915 1025.87 740.232 cv
1026.25 740.549 1026.69 740.707 1027.19 740.707 cv
1027.69 740.707 1028.13 740.547 1028.52 740.225 cv
1028.91 739.902 1029.21 739.326 1029.42 738.494 cv
1029.7 737.425 1029.85 735.613 1029.85 733.059 cv
1029.85 730.504 1029.72 728.749 1029.47 727.793 cv
1029.21 726.838 1028.89 726.199 1028.51 725.877 cv
1028.13 725.556 1027.69 725.395 1027.19 725.395 cv
cp
1027.19 721.957 mo
1029.29 721.957 1030.93 722.708 1032.11 724.21 cv
1033.52 725.988 1034.22 728.938 1034.22 733.059 cv
1034.22 737.168 1033.51 740.123 1032.09 741.922 cv
1030.92 743.404 1029.29 744.145 1027.19 744.145 cv
1025.08 744.145 1023.38 743.332 1022.09 741.707 cv
1020.8 740.082 1020.16 737.184 1020.16 733.014 cv
1020.16 728.924 1020.87 725.978 1022.28 724.18 cv
1023.46 722.698 1025.09 721.957 1027.19 721.957 cv
f
15.6324 421.506 mo
15.6324 411.883 li
24.857 413.814 li
25.5884 414.949 26.2081 416.34 26.7154 417.986 cv
27.2222 419.633 27.4761 421.312 27.4761 423.022 cv
27.4761 425.68 26.8755 427.718 25.6734 429.135 cv
24.0318 431.07 21.6529 432.037 18.5357 432.037 cv
16.4449 432.037 14.4419 431.623 12.5269 430.791 cv
10.2212 429.795 8.43311 428.377 7.1626 426.539 cv
5.89258 424.701 5.25733 422.541 5.25733 420.059 cv
5.25733 417.576 5.83252 415.584 6.98194 414.084 cv
8.13135 412.584 9.80713 411.589 12.0084 411.1 cv
12.4761 415.225 li
11.2671 415.587 10.3555 416.171 9.74122 416.977 cv
9.12696 417.783 8.81983 418.797 8.81983 420.018 cv
8.81983 421.444 9.1919 422.754 9.93506 423.945 cv
10.6788 425.139 11.8282 426.071 13.3838 426.745 cv
14.9395 427.42 16.6373 427.756 18.4761 427.756 cv
20.2862 427.756 21.6241 427.345 22.4898 426.522 cv
23.356 425.698 23.7886 424.492 23.7886 422.904 cv
23.7886 421.955 23.6548 420.98 23.3868 419.98 cv
23.1187 418.98 22.7994 418.117 22.4288 417.393 cv
19.2261 416.721 li
19.2261 422.256 li
15.6324 421.506 li
f
13.8126 399.547 mo
16.7813 399.547 li
16.7813 410.734 li
15.6568 410.613 14.5909 410.25 13.5835 409.646 cv
12.5767 409.041 11.2408 407.848 9.57618 406.064 cv
8.23145 404.629 7.31934 403.748 6.84034 403.422 cv
6.1792 402.984 5.5254 402.766 4.8794 402.766 cv
4.16504 402.766 3.61573 402.957 3.23194 403.34 cv
2.84815 403.723 2.65626 404.252 2.65626 404.927 cv
2.65626 405.595 2.85645 406.125 3.25684 406.52 cv
3.65723 406.914 4.32129 407.143 5.25 407.203 cv
4.93262 410.391 li
3.17481 410.201 1.91358 409.604 1.14795 408.602 cv
0.382813 407.6 0 406.347 0 404.843 cv
0 403.195 0.444825 401.9 1.33448 400.959 cv
2.22413 400.018 3.33057 399.547 4.65381 399.547 cv
5.40674 399.547 6.12305 399.681 6.80372 399.949 cv
7.48438 400.218 8.19727 400.643 8.94239 401.225 cv
9.43653 401.61 10.1475 402.309 11.0752 403.318 cv
12.003 404.33 12.6192 404.969 12.9229 405.237 cv
13.2271 405.506 13.5235 405.723 13.8126 405.889 cv
13.8126 399.547 li
f
33.4136 365.51 mo
33.4136 368.322 li
31.1578 369.83 28.8135 370.977 26.3819 371.765 cv
23.9502 372.553 21.5962 372.947 19.3208 372.947 cv
16.4986 372.947 13.8272 372.463 11.3077 371.493 cv
9.12012 370.651 7.10303 369.584 5.25733 368.291 cv
5.25733 365.479 li
8.2168 366.822 10.7344 367.747 12.8096 368.252 cv
14.8848 368.757 17.0845 369.01 19.4087 369.01 cv
21.0103 369.01 22.6514 368.86 24.3311 368.56 cv
26.0108 368.259 27.6075 367.848 29.1211 367.326 cv
30.1168 366.982 31.5484 366.376 33.4136 365.51 cv
f
19.2261 352.332 mo
15.6011 352.332 li
15.6011 342.988 li
24.1709 342.988 li
25.0528 343.897 25.8296 345.213 26.5005 346.938 cv
27.1714 348.663 27.5074 350.409 27.5074 352.178 cv
27.5074 354.425 27.0347 356.384 26.0894 358.055 cv
25.1441 359.726 23.7916 360.981 22.0328 361.822 cv
20.274 362.662 18.3609 363.082 16.293 363.082 cv
14.0499 363.082 12.0557 362.613 10.3116 361.675 cv
8.56739 360.738 7.22999 359.365 6.29883 357.558 cv
5.58399 356.18 5.22608 354.465 5.22608 352.414 cv
5.22608 349.747 5.78516 347.664 6.90332 346.164 cv
8.02149 344.665 9.56641 343.7 11.5386 343.27 cv
12.3511 347.582 li
11.2984 347.885 10.4678 348.454 9.8584 349.289 cv
9.24952 350.124 8.94483 351.166 8.94483 352.416 cv
8.94483 354.311 9.54737 355.818 10.7525 356.936 cv
11.9576 358.054 13.7457 358.613 16.1168 358.613 cv
18.6744 358.613 20.5923 358.046 21.8707 356.912 cv
23.1495 355.778 23.7886 354.292 23.7886 352.453 cv
23.7886 351.544 23.6104 350.632 23.2535 349.718 cv
22.8965 348.804 22.4634 348.019 21.9546 347.363 cv
19.2261 347.363 li
19.2261 352.332 li
f
17.9761 329.778 mo
16.7925 329.808 15.8921 330.117 15.2759 330.705 cv
14.6597 331.293 14.3511 332.009 14.3511 332.852 cv
14.3511 333.754 14.6763 334.5 15.3267 335.087 cv
15.9771 335.676 16.8599 335.965 17.9761 335.955 cv
17.9761 329.778 li
cp
22.1636 329.997 mo
22.8511 325.903 li
24.3482 326.432 25.4883 327.267 26.271 328.407 cv
27.0538 329.547 27.4449 330.973 27.4449 332.686 cv
27.4449 335.397 26.5616 337.404 24.795 338.706 cv
23.3799 339.733 21.5943 340.247 19.4371 340.247 cv
16.8609 340.247 14.8428 339.572 13.3838 338.221 cv
11.9249 336.871 11.1949 335.163 11.1949 333.098 cv
11.1949 330.779 11.959 328.949 13.4864 327.608 cv
15.0142 326.267 17.3545 325.626 20.5074 325.685 cv
20.5074 336.028 li
21.731 335.999 22.6827 335.665 23.3624 335.025 cv
24.0425 334.387 24.3824 333.59 24.3824 332.637 cv
24.3824 331.988 24.2076 331.442 23.857 331 cv
23.5069 330.558 22.9424 330.224 22.1636 329.997 cv
f
27.1011 316.857 mo
5.63233 324.5 li
5.63233 319.799 li
21.5074 314.391 li
5.63233 309.143 li
5.63233 304.531 li
27.1011 312.189 li
27.1011 316.857 li
f
11.3824 302.803 mo
8.69483 302.803 li
8.69483 294.709 li
11.3824 294.709 li
11.3824 302.803 li
f
13.8126 282.719 mo
16.7813 282.719 li
16.7813 293.906 li
15.6568 293.786 14.5909 293.423 13.5835 292.818 cv
12.5767 292.214 11.2408 291.02 9.57618 289.236 cv
8.23145 287.801 7.31934 286.92 6.84034 286.595 cv
6.1792 286.157 5.5254 285.938 4.8794 285.938 cv
4.16504 285.938 3.61573 286.129 3.23194 286.512 cv
2.84815 286.896 2.65626 287.424 2.65626 288.099 cv
2.65626 288.767 2.85645 289.298 3.25684 289.692 cv
3.65723 290.087 4.32129 290.314 5.25 290.375 cv
4.93262 293.562 li
3.17481 293.373 1.91358 292.777 1.14795 291.774 cv
0.382813 290.772 0 289.519 0 288.015 cv
0 286.368 0.444825 285.073 1.33448 284.131 cv
2.22413 283.19 3.33057 282.719 4.65381 282.719 cv
5.40674 282.719 6.12305 282.853 6.80372 283.122 cv
7.48438 283.39 8.19727 283.815 8.94239 284.397 cv
9.43653 284.783 10.1475 285.48 11.0752 286.491 cv
12.003 287.502 12.6192 288.141 12.9229 288.41 cv
13.2271 288.678 13.5235 288.896 13.8126 289.062 cv
13.8126 282.719 li
f
33.4136 280.531 mo
31.6753 279.721 30.3414 279.15 29.4146 278.818 cv
28.4864 278.487 27.417 278.18 26.2061 277.896 cv
24.9952 277.613 23.8453 277.404 22.7564 277.267 cv
21.6675 277.13 20.5513 277.062 19.4087 277.062 cv
17.0845 277.062 14.8848 277.311 12.8096 277.809 cv
10.7344 278.307 8.2168 279.225 5.25733 280.562 cv
5.25733 277.75 li
7.35694 276.276 9.58399 275.131 11.9376 274.316 cv
14.2911 273.501 16.6792 273.093 19.1011 273.093 cv
21.1421 273.093 23.3301 273.416 25.6641 274.062 cv
28.2813 274.796 30.8648 276.004 33.4136 277.687 cv
33.4136 280.531 li
f
58.3765 30.1011 mo
54.2515 30.1011 li
54.2515 14.5626 li
52.7486 15.9747 50.9781 17.0186 48.939 17.6949 cv
48.939 13.9449 li
50.0132 13.5933 51.1807 12.9263 52.4415 11.9444 cv
53.7017 10.9625 54.5665 9.8169 55.0352 8.50733 cv
58.3765 8.50733 li
58.3765 30.1011 li
f
71.483 11.9136 mo
70.9898 11.9136 70.5494 12.0733 70.1626 12.3926 cv
69.7754 12.712 69.4756 13.2837 69.2632 14.1084 cv
68.9825 15.1792 68.8423 16.9815 68.8423 19.5147 cv
68.8423 22.0489 68.9678 23.7896 69.2193 24.7369 cv
69.4708 25.6846 69.7876 26.3155 70.17 26.6299 cv
70.5518 26.9444 70.9898 27.1011 71.483 27.1011 cv
71.9761 27.1011 72.4161 26.9419 72.8033 26.6226 cv
73.19 26.3033 73.4898 25.7315 73.7027 24.9063 cv
73.983 23.8458 74.1236 22.0489 74.1236 19.5147 cv
74.1236 16.9815 73.9976 15.2408 73.7461 14.293 cv
73.4947 13.3453 73.1778 12.712 72.796 12.3926 cv
72.4136 12.0733 71.9761 11.9136 71.483 11.9136 cv
cp
71.483 8.50733 mo
73.5665 8.50733 75.1954 9.25196 76.3692 10.7413 cv
77.7676 12.5049 78.4673 15.4292 78.4673 19.5147 cv
78.4673 23.5909 77.7627 26.5201 76.3545 28.3028 cv
75.1905 29.7725 73.5665 30.5074 71.483 30.5074 cv
69.3892 30.5074 67.7017 29.7017 66.4205 28.0899 cv
65.1392 26.4786 64.4986 23.6055 64.4986 19.4708 cv
64.4986 15.4146 65.2027 12.4952 66.6114 10.712 cv
67.7754 9.24219 69.399 8.50733 71.483 8.50733 cv
f
81.2457 12.3438 mo
81.2457 9.15626 li
87.5269 9.15626 li
87.5269 12.3438 li
81.2457 12.3438 li
f
99.48 13.8126 mo
99.48 16.7813 li
88.2925 16.7813 li
88.4131 15.6568 88.7759 14.5909 89.3804 13.5835 cv
89.9849 12.5767 91.1792 11.2408 92.9624 9.57618 cv
94.398 8.23145 95.2789 7.31934 95.6041 6.84034 cv
96.042 6.1792 96.2613 5.5254 96.2613 4.8794 cv
96.2613 4.16504 96.0694 3.61573 95.6866 3.23194 cv
95.3033 2.84815 94.7745 2.65626 94.0997 2.65626 cv
93.4317 2.65626 92.9009 2.85645 92.5064 3.25684 cv
92.1119 3.65723 91.8843 4.32129 91.8238 5.25 cv
88.6363 4.93262 li
88.8257 3.17481 89.4219 1.91358 90.4244 1.14795 cv
91.4268 0.382813 92.6797 0 94.1836 0 cv
95.8311 0 97.126 0.444825 98.0674 1.33448 cv
99.0088 2.22413 99.48 3.33057 99.48 4.65381 cv
99.48 5.40674 99.3458 6.12305 99.0772 6.80372 cv
98.8086 7.48438 98.3838 8.19727 97.8018 8.94239 cv
97.4161 9.43653 96.7183 10.1475 95.7076 11.0752 cv
94.6968 12.003 94.0577 12.6192 93.7891 12.9229 cv
93.5206 13.2271 93.3033 13.5235 93.1373 13.8126 cv
99.48 13.8126 li
f
107.95 10.625 mo
107.95 4.93897 li
104.098 10.625 li
107.95 10.625 li
cp
107.95 16.7813 mo
107.95 13.4376 li
101.106 13.4376 li
101.106 10.6363 li
108.36 0.03125 li
111.044 0.03125 li
111.044 10.625 li
113.106 10.625 li
113.106 13.4376 li
111.044 13.4376 li
111.044 16.7813 li
107.95 16.7813 li
f
58.3765 117.462 mo
54.2515 117.462 li
54.2515 101.923 li
52.7486 103.335 50.9781 104.379 48.939 105.056 cv
48.939 101.306 li
50.0132 100.954 51.1807 100.287 52.4415 99.3047 cv
53.7017 98.3228 54.5665 97.1773 55.0352 95.8677 cv
58.3765 95.8677 li
58.3765 117.462 li
f
71.483 99.274 mo
70.9898 99.274 70.5494 99.4336 70.1626 99.753 cv
69.7754 100.073 69.4756 100.645 69.2632 101.469 cv
68.9825 102.54 68.8423 104.342 68.8423 106.876 cv
68.8423 109.41 68.9678 111.15 69.2193 112.098 cv
69.4708 113.045 69.7876 113.676 70.17 113.991 cv
70.5518 114.305 70.9898 114.462 71.483 114.462 cv
71.9761 114.462 72.4161 114.303 72.8033 113.983 cv
73.19 113.664 73.4898 113.092 73.7027 112.267 cv
73.983 111.207 74.1236 109.41 74.1236 106.876 cv
74.1236 104.342 73.9976 102.602 73.7461 101.654 cv
73.4947 100.706 73.1778 100.073 72.796 99.753 cv
72.4136 99.4336 71.9761 99.274 71.483 99.274 cv
cp
71.483 95.8677 mo
73.5665 95.8677 75.1954 96.6124 76.3692 98.1016 cv
77.7676 99.8653 78.4673 102.79 78.4673 106.876 cv
78.4673 110.952 77.7627 113.881 76.3545 115.664 cv
75.1905 117.133 73.5665 117.868 71.483 117.868 cv
69.3892 117.868 67.7017 117.063 66.4205 115.451 cv
65.1392 113.839 64.4986 110.966 64.4986 106.832 cv
64.4986 102.775 65.2027 99.8555 66.6114 98.0723 cv
67.7754 96.6026 69.399 95.8677 71.483 95.8677 cv
f
81.2457 99.7042 mo
81.2457 96.5166 li
87.5269 96.5166 li
87.5269 99.7042 li
81.2457 99.7042 li
f
99.48 101.173 mo
99.48 104.142 li
88.2925 104.142 li
88.4131 103.018 88.7759 101.952 89.3804 100.944 cv
89.9849 99.9371 91.1792 98.6011 92.9624 96.9366 cv
94.398 95.5918 95.2789 94.6797 95.6041 94.2007 cv
96.042 93.5396 96.2613 92.8858 96.2613 92.2398 cv
96.2613 91.5254 96.0694 90.9761 95.6866 90.5923 cv
95.3033 90.2085 94.7745 90.0166 94.0997 90.0166 cv
93.4317 90.0166 92.9009 90.2168 92.5064 90.6172 cv
92.1119 91.0176 91.8843 91.6817 91.8238 92.6104 cv
88.6363 92.293 li
88.8257 90.5352 89.4219 89.274 90.4244 88.5084 cv
91.4268 87.7432 92.6797 87.3604 94.1836 87.3604 cv
95.8311 87.3604 97.126 87.8052 98.0674 88.6949 cv
99.0088 89.5845 99.48 90.691 99.48 92.0142 cv
99.48 92.7671 99.3458 93.4834 99.0772 94.1641 cv
98.8086 94.8448 98.3838 95.5577 97.8018 96.3028 cv
97.4161 96.7969 96.7183 97.5079 95.7076 98.4356 cv
94.6968 99.3633 94.0577 99.9795 93.7891 100.284 cv
93.5206 100.588 93.3033 100.884 93.1373 101.173 cv
99.48 101.173 li
f
101.7 99.878 mo
104.888 99.5479 li
104.979 100.269 105.248 100.84 105.696 101.261 cv
106.145 101.682 106.661 101.892 107.246 101.892 cv
107.914 101.892 108.48 101.621 108.943 101.078 cv
109.406 100.535 109.638 99.7168 109.638 98.6231 cv
109.638 97.5982 109.407 96.8296 108.946 96.3169 cv
108.484 95.8042 107.884 95.5479 107.145 95.5479 cv
106.222 95.5479 105.395 95.9542 104.664 96.7666 cv
102.075 96.3907 li
103.7 87.6729 li
112.169 87.6729 li
112.169 90.6729 li
106.128 90.6729 li
105.628 93.5181 li
106.343 93.1631 107.073 92.9854 107.819 92.9854 cv
109.241 92.9854 110.447 93.5025 111.436 94.5362 cv
112.424 95.5699 112.919 96.9112 112.919 98.5601 cv
112.919 99.9361 112.521 101.164 111.724 102.243 cv
110.639 103.718 109.134 104.455 107.207 104.455 cv
105.667 104.455 104.412 104.041 103.441 103.214 cv
102.47 102.387 101.89 101.275 101.7 99.878 cv
f
58.3765 200.462 mo
54.2515 200.462 li
54.2515 184.923 li
52.7486 186.335 50.9781 187.379 48.939 188.056 cv
48.939 184.306 li
50.0132 183.954 51.1807 183.287 52.4415 182.305 cv
53.7017 181.323 54.5665 180.178 55.0352 178.868 cv
58.3765 178.868 li
58.3765 200.462 li
f
71.483 182.274 mo
70.9898 182.274 70.5494 182.434 70.1626 182.753 cv
69.7754 183.073 69.4756 183.645 69.2632 184.469 cv
68.9825 185.54 68.8423 187.342 68.8423 189.876 cv
68.8423 192.41 68.9678 194.15 69.2193 195.098 cv
69.4708 196.045 69.7876 196.676 70.17 196.991 cv
70.5518 197.305 70.9898 197.462 71.483 197.462 cv
71.9761 197.462 72.4161 197.303 72.8033 196.983 cv
73.19 196.664 73.4898 196.092 73.7027 195.267 cv
73.983 194.207 74.1236 192.41 74.1236 189.876 cv
74.1236 187.342 73.9976 185.602 73.7461 184.654 cv
73.4947 183.706 73.1778 183.073 72.796 182.753 cv
72.4136 182.434 71.9761 182.274 71.483 182.274 cv
cp
71.483 178.868 mo
73.5665 178.868 75.1954 179.613 76.3692 181.102 cv
77.7676 182.866 78.4673 185.79 78.4673 189.876 cv
78.4673 193.952 77.7627 196.881 76.3545 198.664 cv
75.1905 200.133 73.5665 200.868 71.483 200.868 cv
69.3892 200.868 67.7017 200.063 66.4205 198.451 cv
65.1392 196.839 64.4986 193.966 64.4986 189.832 cv
64.4986 185.775 65.2027 182.856 66.6114 181.073 cv
67.7754 179.603 69.399 178.868 71.483 178.868 cv
f
81.2457 182.705 mo
81.2457 179.517 li
87.5269 179.517 li
87.5269 182.705 li
81.2457 182.705 li
f
99.48 184.173 mo
99.48 187.142 li
88.2925 187.142 li
88.4131 186.018 88.7759 184.952 89.3804 183.944 cv
89.9849 182.938 91.1792 181.602 92.9624 179.937 cv
94.398 178.592 95.2789 177.68 95.6041 177.201 cv
96.042 176.54 96.2613 175.886 96.2613 175.24 cv
96.2613 174.526 96.0694 173.977 95.6866 173.593 cv
95.3033 173.209 94.7745 173.017 94.0997 173.017 cv
93.4317 173.017 92.9009 173.217 92.5064 173.618 cv
92.1119 174.018 91.8843 174.682 91.8238 175.611 cv
88.6363 175.293 li
88.8257 173.536 89.4219 172.274 90.4244 171.509 cv
91.4268 170.744 92.6797 170.361 94.1836 170.361 cv
95.8311 170.361 97.126 170.806 98.0674 171.695 cv
99.0088 172.585 99.48 173.691 99.48 175.015 cv
99.48 175.768 99.3458 176.484 99.0772 177.165 cv
98.8086 177.845 98.3838 178.558 97.8018 179.303 cv
97.4161 179.797 96.7183 180.508 95.7076 181.436 cv
94.6968 182.364 94.0577 182.98 93.7891 183.284 cv
93.5206 183.588 93.3033 183.884 93.1373 184.173 cv
99.48 184.173 li
f
105.263 181.52 mo
105.263 182.567 105.5 183.375 105.976 183.944 cv
106.452 184.514 106.996 184.798 107.607 184.798 cv
108.196 184.798 108.687 184.565 109.08 184.099 cv
109.472 183.633 109.669 182.869 109.669 181.806 cv
109.669 180.713 109.458 179.913 109.035 179.405 cv
108.612 178.896 108.083 178.642 107.449 178.642 cv
106.837 178.642 106.32 178.885 105.897 179.37 cv
105.474 179.855 105.263 180.572 105.263 181.52 cv
cp
112.45 174.523 mo
109.356 174.861 li
109.281 174.231 109.087 173.767 108.772 173.467 cv
108.458 173.167 108.05 173.017 107.549 173.017 cv
106.882 173.017 106.319 173.32 105.859 173.925 cv
105.398 174.531 105.108 175.792 104.989 177.71 cv
105.783 176.769 106.77 176.298 107.95 176.298 cv
109.281 176.298 110.421 176.809 111.37 177.829 cv
112.319 178.849 112.794 180.166 112.794 181.779 cv
112.794 183.492 112.294 184.867 111.294 185.902 cv
110.294 186.937 109.01 187.455 107.442 187.455 cv
105.76 187.455 104.377 186.798 103.294 185.485 cv
102.21 184.172 101.669 182.02 101.669 179.028 cv
101.669 175.96 102.231 173.749 103.356 172.394 cv
104.481 171.039 105.942 170.361 107.739 170.361 cv
109 170.361 110.043 170.716 110.87 171.427 cv
111.697 172.138 112.224 173.17 112.45 174.523 cv
f
58.3765 290.062 mo
54.2515 290.062 li
54.2515 274.523 li
52.7486 275.935 50.9781 276.979 48.939 277.655 cv
48.939 273.905 li
50.0132 273.554 51.1807 272.887 52.4415 271.905 cv
53.7017 270.923 54.5665 269.777 55.0352 268.468 cv
58.3765 268.468 li
58.3765 290.062 li
f
71.483 271.874 mo
70.9898 271.874 70.5494 272.034 70.1626 272.353 cv
69.7754 272.672 69.4756 273.244 69.2632 274.069 cv
68.9825 275.14 68.8423 276.942 68.8423 279.475 cv
68.8423 282.009 68.9678 283.75 69.2193 284.697 cv
69.4708 285.645 69.7876 286.276 70.17 286.59 cv
70.5518 286.905 70.9898 287.062 71.483 287.062 cv
71.9761 287.062 72.4161 286.902 72.8033 286.583 cv
73.19 286.264 73.4898 285.692 73.7027 284.867 cv
73.983 283.806 74.1236 282.009 74.1236 279.475 cv
74.1236 276.942 73.9976 275.201 73.7461 274.253 cv
73.4947 273.306 73.1778 272.672 72.796 272.353 cv
72.4136 272.034 71.9761 271.874 71.483 271.874 cv
cp
71.483 268.468 mo
73.5665 268.468 75.1954 269.212 76.3692 270.702 cv
77.7676 272.465 78.4673 275.39 78.4673 279.475 cv
78.4673 283.551 77.7627 286.48 76.3545 288.263 cv
75.1905 289.733 73.5665 290.468 71.483 290.468 cv
69.3892 290.468 67.7017 289.662 66.4205 288.05 cv
65.1392 286.439 64.4986 283.566 64.4986 279.431 cv
64.4986 275.375 65.2027 272.456 66.6114 270.672 cv
67.7754 269.203 69.399 268.468 71.483 268.468 cv
f
81.2457 272.304 mo
81.2457 269.117 li
87.5269 269.117 li
87.5269 272.304 li
81.2457 272.304 li
f
99.48 273.773 mo
99.48 276.742 li
88.2925 276.742 li
88.4131 275.617 88.7759 274.551 89.3804 273.544 cv
89.9849 272.537 91.1792 271.201 92.9624 269.537 cv
94.398 268.192 95.2789 267.28 95.6041 266.801 cv
96.042 266.14 96.2613 265.486 96.2613 264.84 cv
96.2613 264.126 96.0694 263.576 95.6866 263.192 cv
95.3033 262.809 94.7745 262.617 94.0997 262.617 cv
93.4317 262.617 92.9009 262.817 92.5064 263.217 cv
92.1119 263.618 91.8843 264.282 91.8238 265.21 cv
88.6363 264.893 li
88.8257 263.135 89.4219 261.874 90.4244 261.108 cv
91.4268 260.343 92.6797 259.96 94.1836 259.96 cv
95.8311 259.96 97.126 260.405 98.0674 261.295 cv
99.0088 262.185 99.48 263.291 99.48 264.614 cv
99.48 265.367 99.3458 266.084 99.0772 266.764 cv
98.8086 267.445 98.3838 268.158 97.8018 268.903 cv
97.4161 269.397 96.7183 270.108 95.7076 271.036 cv
94.6968 271.963 94.0577 272.58 93.7891 272.883 cv
93.5206 273.188 93.3033 273.484 93.1373 273.773 cv
99.48 273.773 li
f
101.669 263.242 mo
101.669 260.273 li
112.606 260.273 li
112.606 262.585 li
111.701 263.475 110.781 264.751 109.845 266.415 cv
108.91 268.079 108.196 269.848 107.706 271.721 cv
107.215 273.594 106.974 275.268 106.981 276.742 cv
103.888 276.742 li
103.941 274.433 104.418 272.079 105.32 269.679 cv
106.222 267.279 107.426 265.133 108.933 263.242 cv
101.669 263.242 li
f
58.3765 376.062 mo
54.2515 376.062 li
54.2515 360.523 li
52.7486 361.935 50.9781 362.979 48.939 363.655 cv
48.939 359.905 li
50.0132 359.554 51.1807 358.887 52.4415 357.905 cv
53.7017 356.923 54.5665 355.777 55.0352 354.468 cv
58.3765 354.468 li
58.3765 376.062 li
f
71.483 357.874 mo
70.9898 357.874 70.5494 358.034 70.1626 358.353 cv
69.7754 358.672 69.4756 359.244 69.2632 360.069 cv
68.9825 361.14 68.8423 362.942 68.8423 365.475 cv
68.8423 368.009 68.9678 369.75 69.2193 370.697 cv
69.4708 371.645 69.7876 372.276 70.17 372.59 cv
70.5518 372.905 70.9898 373.062 71.483 373.062 cv
71.9761 373.062 72.4161 372.902 72.8033 372.583 cv
73.19 372.264 73.4898 371.692 73.7027 370.867 cv
73.983 369.806 74.1236 368.009 74.1236 365.475 cv
74.1236 362.942 73.9976 361.201 73.7461 360.253 cv
73.4947 359.306 73.1778 358.672 72.796 358.353 cv
72.4136 358.034 71.9761 357.874 71.483 357.874 cv
cp
71.483 354.468 mo
73.5665 354.468 75.1954 355.212 76.3692 356.702 cv
77.7676 358.465 78.4673 361.39 78.4673 365.475 cv
78.4673 369.551 77.7627 372.48 76.3545 374.263 cv
75.1905 375.733 73.5665 376.468 71.483 376.468 cv
69.3892 376.468 67.7017 375.662 66.4205 374.05 cv
65.1392 372.439 64.4986 369.566 64.4986 365.431 cv
64.4986 361.375 65.2027 358.456 66.6114 356.672 cv
67.7754 355.203 69.399 354.468 71.483 354.468 cv
f
81.2457 358.304 mo
81.2457 355.117 li
87.5269 355.117 li
87.5269 358.304 li
81.2457 358.304 li
f
99.48 359.773 mo
99.48 362.742 li
88.2925 362.742 li
88.4131 361.617 88.7759 360.551 89.3804 359.544 cv
89.9849 358.537 91.1792 357.201 92.9624 355.537 cv
94.398 354.192 95.2789 353.28 95.6041 352.801 cv
96.042 352.14 96.2613 351.486 96.2613 350.84 cv
96.2613 350.126 96.0694 349.576 95.6866 349.192 cv
95.3033 348.809 94.7745 348.617 94.0997 348.617 cv
93.4317 348.617 92.9009 348.817 92.5064 349.217 cv
92.1119 349.618 91.8843 350.282 91.8238 351.21 cv
88.6363 350.893 li
88.8257 349.135 89.4219 347.874 90.4244 347.108 cv
91.4268 346.343 92.6797 345.96 94.1836 345.96 cv
95.8311 345.96 97.126 346.405 98.0674 347.295 cv
99.0088 348.185 99.48 349.291 99.48 350.614 cv
99.48 351.367 99.3458 352.084 99.0772 352.764 cv
98.8086 353.445 98.3838 354.158 97.8018 354.903 cv
97.4161 355.397 96.7183 356.108 95.7076 357.036 cv
94.6968 357.963 94.0577 358.58 93.7891 358.883 cv
93.5206 359.188 93.3033 359.484 93.1373 359.773 cv
99.48 359.773 li
f
105.044 350.506 mo
105.044 351.15 105.223 351.653 105.583 352.013 cv
105.941 352.374 106.419 352.554 107.017 352.554 cv
107.622 352.554 108.105 352.372 108.468 352.008 cv
108.831 351.644 109.013 351.139 109.013 350.494 cv
109.013 349.888 108.833 349.403 108.474 349.039 cv
108.115 348.674 107.641 348.492 107.051 348.492 cv
106.438 348.492 105.951 348.676 105.588 349.044 cv
105.225 349.413 105.044 349.9 105.044 350.506 cv
cp
104.763 357.683 mo
104.763 358.576 104.987 359.272 105.436 359.772 cv
105.884 360.273 106.444 360.523 107.115 360.523 cv
107.771 360.523 108.313 360.283 108.743 359.802 cv
109.173 359.321 109.388 358.626 109.388 357.718 cv
109.388 356.925 109.169 356.288 108.732 355.807 cv
108.294 355.326 107.74 355.085 107.069 355.085 cv
106.293 355.085 105.714 355.359 105.334 355.905 cv
104.953 356.452 104.763 357.044 104.763 357.683 cv
cp
104.396 353.735 mo
103.563 353.385 102.958 352.904 102.58 352.291 cv
102.202 351.679 102.013 351.007 102.013 350.276 cv
102.013 349.028 102.446 347.997 103.313 347.182 cv
104.181 346.368 105.414 345.96 107.013 345.96 cv
108.596 345.96 109.825 346.368 110.7 347.182 cv
111.575 347.997 112.013 349.028 112.013 350.276 cv
112.013 351.052 111.812 351.743 111.41 352.348 cv
111.009 352.954 110.444 353.416 109.717 353.735 cv
110.64 354.108 111.342 354.652 111.823 355.367 cv
112.303 356.082 112.544 356.906 112.544 357.842 cv
112.544 359.386 112.054 360.64 111.075 361.606 cv
110.095 362.572 108.792 363.054 107.166 363.054 cv
105.653 363.054 104.394 362.655 103.388 361.856 cv
102.2 360.914 101.606 359.621 101.606 357.979 cv
101.606 357.074 101.83 356.243 102.278 355.486 cv
102.726 354.73 103.432 354.146 104.396 353.735 cv
f
58.3765 460.062 mo
54.2515 460.062 li
54.2515 444.523 li
52.7486 445.936 50.9781 446.979 48.939 447.655 cv
48.939 443.905 li
50.0132 443.554 51.1807 442.887 52.4415 441.904 cv
53.7017 440.923 54.5665 439.777 55.0352 438.468 cv
58.3765 438.468 li
58.3765 460.062 li
f
71.483 441.874 mo
70.9898 441.874 70.5494 442.033 70.1626 442.354 cv
69.7754 442.672 69.4756 443.244 69.2632 444.068 cv
68.9825 445.14 68.8423 446.941 68.8423 449.475 cv
68.8423 452.01 68.9678 453.75 69.2193 454.697 cv
69.4708 455.645 69.7876 456.275 70.17 456.59 cv
70.5518 456.904 70.9898 457.062 71.483 457.062 cv
71.9761 457.062 72.4161 456.902 72.8033 456.583 cv
73.19 456.264 73.4898 455.691 73.7027 454.867 cv
73.983 453.807 74.1236 452.01 74.1236 449.475 cv
74.1236 446.941 73.9976 445.201 73.7461 444.254 cv
73.4947 443.306 73.1778 442.672 72.796 442.354 cv
72.4136 442.033 71.9761 441.874 71.483 441.874 cv
cp
71.483 438.468 mo
73.5665 438.468 75.1954 439.213 76.3692 440.701 cv
77.7676 442.465 78.4673 445.39 78.4673 449.475 cv
78.4673 453.551 77.7627 456.48 76.3545 458.264 cv
75.1905 459.732 73.5665 460.468 71.483 460.468 cv
69.3892 460.468 67.7017 459.662 66.4205 458.051 cv
65.1392 456.439 64.4986 453.566 64.4986 449.432 cv
64.4986 445.375 65.2027 442.455 66.6114 440.672 cv
67.7754 439.203 69.399 438.468 71.483 438.468 cv
f
81.2457 442.305 mo
81.2457 439.117 li
87.5269 439.117 li
87.5269 442.305 li
81.2457 442.305 li
f
99.48 443.773 mo
99.48 446.742 li
88.2925 446.742 li
88.4131 445.617 88.7759 444.551 89.3804 443.544 cv
89.9849 442.537 91.1792 441.201 92.9624 439.537 cv
94.398 438.191 95.2789 437.279 95.6041 436.801 cv
96.042 436.14 96.2613 435.486 96.2613 434.84 cv
96.2613 434.125 96.0694 433.576 95.6866 433.192 cv
95.3033 432.809 94.7745 432.617 94.0997 432.617 cv
93.4317 432.617 92.9009 432.816 92.5064 433.217 cv
92.1119 433.617 91.8843 434.281 91.8238 435.211 cv
88.6363 434.893 li
88.8257 433.135 89.4219 431.874 90.4244 431.108 cv
91.4268 430.344 92.6797 429.961 94.1836 429.961 cv
95.8311 429.961 97.126 430.405 98.0674 431.295 cv
99.0088 432.185 99.48 433.291 99.48 434.614 cv
99.48 435.367 99.3458 436.084 99.0772 436.764 cv
98.8086 437.445 98.3838 438.158 97.8018 438.902 cv
97.4161 439.396 96.7183 440.107 95.7076 441.035 cv
94.6968 441.963 94.0577 442.58 93.7891 442.883 cv
93.5206 443.188 93.3033 443.484 93.1373 443.773 cv
99.48 443.773 li
f
108.95 435.873 mo
108.95 434.84 108.715 434.04 108.245 433.471 cv
107.775 432.901 107.232 432.617 106.616 432.617 cv
106.03 432.617 105.543 432.85 105.156 433.316 cv
104.769 433.783 104.575 434.549 104.575 435.611 cv
104.575 436.689 104.786 437.48 105.207 437.984 cv
105.627 438.49 106.153 438.742 106.785 438.742 cv
107.394 438.742 107.907 438.499 108.324 438.014 cv
108.741 437.527 108.95 436.814 108.95 435.873 cv
cp
101.763 442.894 mo
104.856 442.555 li
104.932 443.18 105.126 443.645 105.442 443.945 cv
105.757 444.248 106.173 444.398 106.691 444.398 cv
107.344 444.398 107.899 444.092 108.357 443.48 cv
108.815 442.869 109.107 441.604 109.235 439.686 cv
108.434 440.619 107.431 441.086 106.229 441.086 cv
104.92 441.086 103.792 440.579 102.843 439.565 cv
101.894 438.552 101.419 437.232 101.419 435.608 cv
101.419 433.916 101.92 432.551 102.924 431.515 cv
103.928 430.479 105.207 429.961 106.76 429.961 cv
108.449 429.961 109.835 430.617 110.919 431.93 cv
112.002 433.242 112.544 435.4 112.544 438.404 cv
112.544 441.463 111.98 443.669 110.854 445.023 cv
109.729 446.377 108.262 447.055 106.456 447.055 cv
105.156 447.055 104.105 446.707 103.305 446.012 cv
102.503 445.316 101.989 444.277 101.763 442.894 cv
f
58.3765 544.062 mo
54.2515 544.062 li
54.2515 528.523 li
52.7486 529.936 50.9781 530.978 48.939 531.655 cv
48.939 527.905 li
50.0132 527.554 51.1807 526.887 52.4415 525.904 cv
53.7017 524.923 54.5665 523.777 55.0352 522.468 cv
58.3765 522.468 li
58.3765 544.062 li
f
71.483 525.874 mo
70.9898 525.874 70.5494 526.033 70.1626 526.354 cv
69.7754 526.672 69.4756 527.244 69.2632 528.068 cv
68.9825 529.14 68.8423 530.941 68.8423 533.475 cv
68.8423 536.01 68.9678 537.75 69.2193 538.697 cv
69.4708 539.645 69.7876 540.275 70.17 540.59 cv
70.5518 540.904 70.9898 541.062 71.483 541.062 cv
71.9761 541.062 72.4161 540.902 72.8033 540.583 cv
73.19 540.264 73.4898 539.691 73.7027 538.867 cv
73.983 537.807 74.1236 536.01 74.1236 533.475 cv
74.1236 530.941 73.9976 529.201 73.7461 528.254 cv
73.4947 527.306 73.1778 526.672 72.796 526.354 cv
72.4136 526.033 71.9761 525.874 71.483 525.874 cv
cp
71.483 522.468 mo
73.5665 522.468 75.1954 523.213 76.3692 524.701 cv
77.7676 526.465 78.4673 529.39 78.4673 533.475 cv
78.4673 537.551 77.7627 540.48 76.3545 542.264 cv
75.1905 543.732 73.5665 544.468 71.483 544.468 cv
69.3892 544.468 67.7017 543.662 66.4205 542.051 cv
65.1392 540.439 64.4986 537.566 64.4986 533.432 cv
64.4986 529.375 65.2027 526.455 66.6114 524.672 cv
67.7754 523.203 69.399 522.468 71.483 522.468 cv
f
81.2457 526.305 mo
81.2457 523.117 li
87.5269 523.117 li
87.5269 526.305 li
81.2457 526.305 li
f
88.5738 526.336 mo
91.6675 525.961 li
91.7662 526.75 92.0318 527.354 92.4654 527.772 cv
92.8985 528.189 93.4229 528.398 94.0381 528.398 cv
94.6993 528.398 95.2559 528.146 95.7081 527.641 cv
96.1602 527.137 96.3863 526.455 96.3863 525.6 cv
96.3863 524.789 96.1705 524.146 95.7393 523.672 cv
95.3082 523.197 94.7828 522.961 94.1626 522.961 cv
93.754 522.961 93.2662 523.04 92.6988 523.199 cv
93.0499 520.617 li
93.9102 520.64 94.5665 520.451 95.0196 520.053 cv
95.4722 519.654 95.6988 519.124 95.6988 518.463 cv
95.6988 517.9 95.5318 517.453 95.1978 517.118 cv
94.8638 516.784 94.4205 516.617 93.8668 516.617 cv
93.3204 516.617 92.8536 516.806 92.4668 517.183 cv
92.0796 517.561 91.8443 518.111 91.7613 518.836 cv
88.8238 518.338 li
89.0284 517.324 89.3374 516.515 89.751 515.909 cv
90.1646 515.304 90.7413 514.827 91.481 514.48 cv
92.2203 514.134 93.0494 513.961 93.9673 513.961 cv
95.5376 513.961 96.7969 514.463 97.7457 515.467 cv
98.5269 516.289 98.9175 517.217 98.9175 518.252 cv
98.9175 519.72 98.1148 520.891 96.5093 521.766 cv
97.4668 521.973 98.2325 522.433 98.8067 523.148 cv
99.3804 523.864 99.6675 524.728 99.6675 525.742 cv
99.6675 527.212 99.1319 528.465 98.0616 529.5 cv
96.9908 530.537 95.6582 531.055 94.0635 531.055 cv
92.5523 531.055 91.2994 530.619 90.3047 529.75 cv
89.3101 528.88 88.733 527.742 88.5738 526.336 cv
f
107.044 516.617 mo
106.658 516.617 106.314 516.74 106.013 516.988 cv
105.71 517.236 105.476 517.68 105.31 518.319 cv
105.091 519.15 104.981 520.548 104.981 522.514 cv
104.981 524.478 105.08 525.829 105.276 526.564 cv
105.472 527.299 105.72 527.789 106.018 528.032 cv
106.316 528.276 106.658 528.398 107.044 528.398 cv
107.429 528.398 107.773 528.274 108.075 528.027 cv
108.377 527.779 108.611 527.336 108.778 526.695 cv
108.997 525.873 109.106 524.478 109.106 522.514 cv
109.106 520.548 109.008 519.197 108.812 518.463 cv
108.615 517.727 108.368 517.236 108.069 516.988 cv
107.771 516.74 107.429 516.617 107.044 516.617 cv
cp
107.044 513.961 mo
108.666 513.961 109.934 514.539 110.848 515.696 cv
111.937 517.066 112.481 519.339 112.481 522.514 cv
112.481 525.68 111.933 527.956 110.836 529.342 cv
109.93 530.483 108.666 531.055 107.044 531.055 cv
105.414 531.055 104.1 530.428 103.103 529.176 cv
102.105 527.924 101.606 525.691 101.606 522.479 cv
101.606 519.328 102.155 517.059 103.251 515.674 cv
104.158 514.531 105.422 513.961 107.044 513.961 cv
f
58.3765 634.062 mo
54.2515 634.062 li
54.2515 618.523 li
52.7486 619.936 50.9781 620.978 48.939 621.655 cv
48.939 617.905 li
50.0132 617.554 51.1807 616.887 52.4415 615.904 cv
53.7017 614.923 54.5665 613.777 55.0352 612.468 cv
58.3765 612.468 li
58.3765 634.062 li
f
71.483 615.874 mo
70.9898 615.874 70.5494 616.033 70.1626 616.354 cv
69.7754 616.672 69.4756 617.244 69.2632 618.068 cv
68.9825 619.14 68.8423 620.941 68.8423 623.475 cv
68.8423 626.01 68.9678 627.75 69.2193 628.697 cv
69.4708 629.645 69.7876 630.275 70.17 630.59 cv
70.5518 630.904 70.9898 631.062 71.483 631.062 cv
71.9761 631.062 72.4161 630.902 72.8033 630.583 cv
73.19 630.264 73.4898 629.691 73.7027 628.867 cv
73.983 627.807 74.1236 626.01 74.1236 623.475 cv
74.1236 620.941 73.9976 619.201 73.7461 618.254 cv
73.4947 617.306 73.1778 616.672 72.796 616.354 cv
72.4136 616.033 71.9761 615.874 71.483 615.874 cv
cp
71.483 612.468 mo
73.5665 612.468 75.1954 613.213 76.3692 614.701 cv
77.7676 616.465 78.4673 619.39 78.4673 623.475 cv
78.4673 627.551 77.7627 630.48 76.3545 632.264 cv
75.1905 633.732 73.5665 634.468 71.483 634.468 cv
69.3892 634.468 67.7017 633.662 66.4205 632.051 cv
65.1392 630.439 64.4986 627.566 64.4986 623.432 cv
64.4986 619.375 65.2027 616.455 66.6114 614.672 cv
67.7754 613.203 69.399 612.468 71.483 612.468 cv
f
81.2457 616.305 mo
81.2457 613.117 li
87.5269 613.117 li
87.5269 616.305 li
81.2457 616.305 li
f
88.5738 616.336 mo
91.6675 615.961 li
91.7662 616.75 92.0318 617.354 92.4654 617.772 cv
92.8985 618.189 93.4229 618.398 94.0381 618.398 cv
94.6993 618.398 95.2559 618.146 95.7081 617.641 cv
96.1602 617.137 96.3863 616.455 96.3863 615.6 cv
96.3863 614.789 96.1705 614.146 95.7393 613.672 cv
95.3082 613.197 94.7828 612.961 94.1626 612.961 cv
93.754 612.961 93.2662 613.04 92.6988 613.199 cv
93.0499 610.617 li
93.9102 610.64 94.5665 610.451 95.0196 610.053 cv
95.4722 609.654 95.6988 609.124 95.6988 608.463 cv
95.6988 607.9 95.5318 607.453 95.1978 607.118 cv
94.8638 606.784 94.4205 606.617 93.8668 606.617 cv
93.3204 606.617 92.8536 606.806 92.4668 607.183 cv
92.0796 607.561 91.8443 608.111 91.7613 608.836 cv
88.8238 608.338 li
89.0284 607.324 89.3374 606.515 89.751 605.909 cv
90.1646 605.304 90.7413 604.827 91.481 604.48 cv
92.2203 604.134 93.0494 603.961 93.9673 603.961 cv
95.5376 603.961 96.7969 604.463 97.7457 605.467 cv
98.5269 606.289 98.9175 607.217 98.9175 608.252 cv
98.9175 609.72 98.1148 610.891 96.5093 611.766 cv
97.4668 611.973 98.2325 612.433 98.8067 613.148 cv
99.3804 613.864 99.6675 614.728 99.6675 615.742 cv
99.6675 617.212 99.1319 618.465 98.0616 619.5 cv
96.9908 620.537 95.6582 621.055 94.0635 621.055 cv
92.5523 621.055 91.2994 620.619 90.3047 619.75 cv
89.3101 618.88 88.733 617.742 88.5738 616.336 cv
f
109.825 620.742 mo
106.638 620.742 li
106.638 608.658 li
105.471 609.752 104.096 610.561 102.513 611.086 cv
102.513 608.18 li
103.345 607.906 104.25 607.389 105.227 606.627 cv
106.203 605.865 106.873 604.977 107.236 603.961 cv
109.825 603.961 li
109.825 620.742 li
f
58.3765 724.062 mo
54.2515 724.062 li
54.2515 708.523 li
52.7486 709.936 50.9781 710.978 48.939 711.655 cv
48.939 707.905 li
50.0132 707.554 51.1807 706.887 52.4415 705.904 cv
53.7017 704.923 54.5665 703.777 55.0352 702.468 cv
58.3765 702.468 li
58.3765 724.062 li
f
71.483 705.874 mo
70.9898 705.874 70.5494 706.033 70.1626 706.354 cv
69.7754 706.672 69.4756 707.244 69.2632 708.068 cv
68.9825 709.14 68.8423 710.941 68.8423 713.475 cv
68.8423 716.01 68.9678 717.75 69.2193 718.697 cv
69.4708 719.645 69.7876 720.275 70.17 720.59 cv
70.5518 720.904 70.9898 721.062 71.483 721.062 cv
71.9761 721.062 72.4161 720.902 72.8033 720.583 cv
73.19 720.264 73.4898 719.691 73.7027 718.867 cv
73.983 717.807 74.1236 716.01 74.1236 713.475 cv
74.1236 710.941 73.9976 709.201 73.7461 708.254 cv
73.4947 707.306 73.1778 706.672 72.796 706.354 cv
72.4136 706.033 71.9761 705.874 71.483 705.874 cv
cp
71.483 702.468 mo
73.5665 702.468 75.1954 703.213 76.3692 704.701 cv
77.7676 706.465 78.4673 709.39 78.4673 713.475 cv
78.4673 717.551 77.7627 720.48 76.3545 722.264 cv
75.1905 723.732 73.5665 724.468 71.483 724.468 cv
69.3892 724.468 67.7017 723.662 66.4205 722.051 cv
65.1392 720.439 64.4986 717.566 64.4986 713.432 cv
64.4986 709.375 65.2027 706.455 66.6114 704.672 cv
67.7754 703.203 69.399 702.468 71.483 702.468 cv
f
81.2457 706.305 mo
81.2457 703.117 li
87.5269 703.117 li
87.5269 706.305 li
81.2457 706.305 li
f
88.5738 706.336 mo
91.6675 705.961 li
91.7662 706.75 92.0318 707.354 92.4654 707.772 cv
92.8985 708.189 93.4229 708.398 94.0381 708.398 cv
94.6993 708.398 95.2559 708.146 95.7081 707.641 cv
96.1602 707.137 96.3863 706.455 96.3863 705.6 cv
96.3863 704.789 96.1705 704.146 95.7393 703.672 cv
95.3082 703.197 94.7828 702.961 94.1626 702.961 cv
93.754 702.961 93.2662 703.04 92.6988 703.199 cv
93.0499 700.617 li
93.9102 700.64 94.5665 700.451 95.0196 700.053 cv
95.4722 699.654 95.6988 699.124 95.6988 698.463 cv
95.6988 697.9 95.5318 697.453 95.1978 697.118 cv
94.8638 696.784 94.4205 696.617 93.8668 696.617 cv
93.3204 696.617 92.8536 696.806 92.4668 697.183 cv
92.0796 697.561 91.8443 698.111 91.7613 698.836 cv
88.8238 698.338 li
89.0284 697.324 89.3374 696.515 89.751 695.909 cv
90.1646 695.304 90.7413 694.827 91.481 694.48 cv
92.2203 694.134 93.0494 693.961 93.9673 693.961 cv
95.5376 693.961 96.7969 694.463 97.7457 695.467 cv
98.5269 696.289 98.9175 697.217 98.9175 698.252 cv
98.9175 699.72 98.1148 700.891 96.5093 701.766 cv
97.4668 701.973 98.2325 702.433 98.8067 703.148 cv
99.3804 703.864 99.6675 704.728 99.6675 705.742 cv
99.6675 707.212 99.1319 708.465 98.0616 709.5 cv
96.9908 710.537 95.6582 711.055 94.0635 711.055 cv
92.5523 711.055 91.2994 710.619 90.3047 709.75 cv
89.3101 708.88 88.733 707.742 88.5738 706.336 cv
f
112.45 707.773 mo
112.45 710.742 li
101.263 710.742 li
101.383 709.617 101.746 708.551 102.351 707.544 cv
102.955 706.537 104.149 705.201 105.933 703.537 cv
107.368 702.191 108.249 701.279 108.574 700.801 cv
109.012 700.14 109.231 699.486 109.231 698.84 cv
109.231 698.125 109.04 697.576 108.657 697.192 cv
108.273 696.809 107.745 696.617 107.07 696.617 cv
106.402 696.617 105.871 696.816 105.477 697.217 cv
105.082 697.617 104.854 698.281 104.794 699.211 cv
101.606 698.893 li
101.796 697.135 102.392 695.874 103.395 695.108 cv
104.397 694.344 105.65 693.961 107.154 693.961 cv
108.801 693.961 110.096 694.405 111.038 695.295 cv
111.979 696.185 112.45 697.291 112.45 698.614 cv
112.45 699.367 112.316 700.084 112.047 700.764 cv
111.779 701.445 111.354 702.158 110.772 702.902 cv
110.386 703.396 109.688 704.107 108.678 705.035 cv
107.667 705.963 107.028 706.58 106.759 706.883 cv
106.491 707.188 106.273 707.484 106.107 707.773 cv
112.45 707.773 li
f
318.435 570.769 mo
324.936 564.269 li
327.769 568.435 li
330.435 562.769 li
334.102 566.102 li
338.435 562.102 li
338.769 556.769 li
342.769 551.769 li
343.435 557.102 li
344.435 558.769 li
350.102 557.102 li
350.769 551.435 li
351.435 549.769 li
354.435 551.435 li
354.435 558.769 li
357.769 558.769 li
358.769 548.769 li
358.769 548.769 359.769 551.102 360.769 551.102 cv
361.769 551.102 364.102 552.769 364.102 552.769 cv
368.102 556.102 li
369.102 550.102 li
373.102 549.769 li
374.769 545.769 li
378.435 551.435 li
380.769 542.435 li
384.435 542.435 li
384.769 546.435 li
388.435 540.435 li
392.435 546.435 li
396.435 544.435 li
396.769 539.769 li
403.102 542.435 li
405.102 547.102 li
406.769 538.102 li
412.769 533.769 li
415.102 538.102 li
418.435 539.102 li
420.102 540.769 li
421.435 533.102 li
423.435 534.769 li
425.102 536.769 li
428.435 535.435 li
430.769 534.769 li
434.102 532.769 li
437.769 537.769 li
440.769 534.102 li
442.769 537.435 li
445.435 530.435 li
448.435 529.435 li
452.769 532.102 li
457.769 524.102 li
460.435 523.435 li
465.102 526.102 li
467.102 519.435 li
470.769 519.435 li
471.769 525.769 li
474.102 516.769 li
478.769 518.102 li
479.769 525.769 li
481.435 526.102 li
481.769 530.769 li
488.435 522.769 li
488.435 19.9175 li
319.049 19.794 li
318.435 570.769 li
level3{
gsave
clp
[132.227 518.748 -518.748 132.227 332.335 16.4068 ] concat
1 {
bdict
/ShadingType 2 
/ColorSpace /0 map_csa
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
bdict
/Domain[0 1 ] 
/FunctionType 3
/Functions [
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.933334 0.792157 0.780393 ]
/C1 [0.933334 0.792157 0.780393 ]
/N 1 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.933334 0.792157 0.780393 ]
/C1 [0.576471 0.662746 0.839216 ]
/N 1.39625 
edict
bdict
/Domain[0 1 ] 
/FunctionType 2
/C0 [0.576471 0.662746 0.839216 ]
/C1 [0.576471 0.662746 0.839216 ]
/N 1 
edict
]
/Bounds [0.816667 0.93889 ]
/Encode [0 1 0 1 0 1 ]
edict
edict }add_grad 1 exec_grad shfill grestore
}if
level3 not{
gsave
[132.227 518.748 -518.748 132.227 332.335 16.4068 ] concat
clp
1 {
/0 map_csa setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBK/lKIEmio&\Jg"+X!c-")F^qI=fZ`gF-UnF6FP`q;pPEV2oPEV2oPEV2o
~>
<~b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lL
b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lL
b0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lLb0%lL
b0%lLb0%lLb0%lLb0%lLb0%iJaN2EA`Pod5_SO%&^:h.i\[],V['R$AYH=n+WMukrWMukrWMukrWMukr
~>
<~a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@
a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@
a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@a2c6@
a2c6@a2c6@a2c6@a2c6@a2c6@a2c9BaN;QHb0%oNbfn>VcHab_d*^7he'lgse^i=&f%/F'f%/F'f%/F'
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} add_grad 1 exec_grad grestore
}if
newpath
2.5 lw
318.435 570.769 mo
324.936 564.269 li
327.769 568.435 li
330.435 562.769 li
334.102 566.102 li
338.435 562.102 li
338.769 556.769 li
342.769 551.769 li
343.435 557.102 li
344.435 558.769 li
350.102 557.102 li
350.769 551.435 li
351.435 549.769 li
354.435 551.435 li
354.435 558.769 li
357.769 558.769 li
358.769 548.769 li
358.769 548.769 359.769 551.102 360.769 551.102 cv
361.769 551.102 364.102 552.769 364.102 552.769 cv
368.102 556.102 li
369.102 550.102 li
373.102 549.769 li
374.769 545.769 li
378.435 551.435 li
380.769 542.435 li
384.435 542.435 li
384.769 546.435 li
388.435 540.435 li
392.435 546.435 li
396.435 544.435 li
396.769 539.769 li
403.102 542.435 li
405.102 547.102 li
406.769 538.102 li
412.769 533.769 li
415.102 538.102 li
418.435 539.102 li
420.102 540.769 li
421.435 533.102 li
423.435 534.769 li
425.102 536.769 li
428.435 535.435 li
430.769 534.769 li
434.102 532.769 li
437.769 537.769 li
440.769 534.102 li
442.769 537.435 li
445.435 530.435 li
448.435 529.435 li
452.769 532.102 li
457.769 524.102 li
460.435 523.435 li
465.102 526.102 li
467.102 519.435 li
470.769 519.435 li
471.769 525.769 li
474.102 516.769 li
478.769 518.102 li
479.769 525.769 li
481.435 526.102 li
481.769 530.769 li
488.435 522.769 li
488.435 19.9175 li
319.049 19.794 li
318.435 570.769 li
cp
1 0 0 rgb
@
[11.5 11.5 ] 0 dsh
124.102 681.102 mo
1020.17 450.102 li
0 0.0313726 0.0745099 rgb
@
[25 25 25 25 25 25 ] 0 dsh
126.102 610.102 mo
1020.17 379.102 li
@
3 lw
[] 0 dsh
1020.17 707.677 mo
126.102 707.677 li
126.102 19.2105 li
1020.17 19.2105 li
1020.17 707.677 li
cp
0 0 0 rgb
@
688.102 19.2105 mo
688.102 219.102 li
710.102 219.102 li
710.102 207.102 li
713.102 207.102 li
713.102 197.102 li
721.102 197.102 li
721.102 179.102 li
742.102 179.102 li
742.102 171.102 li
771.102 171.102 li
771.102 154.102 li
775.102 154.102 li
775.102 136.102 li
794.102 136.102 li
794.102 195.102 li
807.102 195.102 li
807.102 200.102 li
821.102 200.102 li
821.102 19.2105 li
688.102 19.2105 li
0.992157 0.964706 0.650981 rgb
f
2.5 lw
688.102 19.2105 mo
688.102 219.102 li
710.102 219.102 li
710.102 207.102 li
713.102 207.102 li
713.102 197.102 li
721.102 197.102 li
721.102 179.102 li
742.102 179.102 li
742.102 171.102 li
771.102 171.102 li
771.102 154.102 li
775.102 154.102 li
775.102 136.102 li
794.102 136.102 li
794.102 195.102 li
807.102 195.102 li
807.102 200.102 li
821.102 200.102 li
821.102 19.2105 li
688.102 19.2105 li
cp
0 0 0 rgb
@
633.102 19.2105 mo
633.102 317.102 li
659.102 317.102 li
659.102 278.102 li
692.102 278.102 li
692.102 263.102 li
698.102 263.102 li
698.102 19.2105 li
633.102 19.2105 li
0 0.690197 0.309804 rgb
f
633.102 19.2105 mo
633.102 317.102 li
659.102 317.102 li
659.102 278.102 li
692.102 278.102 li
692.102 263.102 li
698.102 263.102 li
698.102 19.2105 li
633.102 19.2105 li
cp
0 0 0 rgb
@
726.102 19.2105 mo
734.102 19.2105 li
734.102 267.102 li
726.102 267.102 li
726.102 19.2105 li
0 0.690197 0.309804 rgb
f
726.102 19.2105 mo
734.102 19.2105 li
734.102 267.102 li
726.102 267.102 li
726.102 19.2105 li
cp
0 0 0 rgb
@
850.102 19.2105 mo
850.102 159.102 li
857.102 159.102 li
857.102 37.1011 li
890.102 37.1011 li
890.102 100.102 li
898.102 100.102 li
898.102 64.1011 li
942.102 64.1011 li
942.102 77.1011 li
961.102 77.1011 li
961.102 19.2105 li
850.102 19.2105 li
0.992157 0.964706 0.650981 rgb
f
850.102 19.2105 mo
850.102 159.102 li
857.102 159.102 li
857.102 37.1011 li
890.102 37.1011 li
890.102 100.102 li
898.102 100.102 li
898.102 64.1011 li
942.102 64.1011 li
942.102 77.1011 li
961.102 77.1011 li
961.102 19.2105 li
850.102 19.2105 li
cp
0 0 0 rgb
@
1.5 lw
1012.11 24.461 mo
1020.17 24.461 li
@
1012.11 29.4991 mo
1020.17 29.4991 li
@
1012.11 34.897 mo
1020.17 34.897 li
@
1012.11 39.9351 mo
1020.17 39.9351 li
@
1012.11 46.7725 mo
1020.17 46.7725 li
@
1012.11 55.0494 mo
1020.17 55.0494 li
@
1012.11 65.8453 mo
1020.17 65.8453 li
@
1012.11 80.5997 mo
1020.17 80.5997 li
@
1012.11 110.998 mo
1020.17 110.998 li
@
1012.11 114.956 mo
1020.17 114.956 li
@
1012.11 119.994 mo
1020.17 119.994 li
@
1012.11 126.112 mo
1020.17 126.112 li
@
1012.11 133.309 mo
1020.17 133.309 li
@
1012.11 141.226 mo
1020.17 141.226 li
@
1012.11 152.022 mo
1020.17 152.022 li
@
1012.11 167.136 mo
1020.17 167.136 li
@
1012.11 196.827 mo
1020.17 196.827 li
@
1012.11 200.786 mo
1020.17 200.786 li
@
1012.11 205.824 mo
1020.17 205.824 li
@
1012.11 211.941 mo
1020.17 211.941 li
@
1012.11 219.139 mo
1020.17 219.139 li
@
1012.11 227.056 mo
1020.17 227.056 li
@
1012.11 237.852 mo
1020.17 237.852 li
@
1012.11 252.966 mo
1020.17 252.966 li
@
1012.11 282.852 mo
1020.17 282.852 li
@
1012.11 286.81 mo
1020.17 286.81 li
@
1012.11 291.848 mo
1020.17 291.848 li
@
1012.11 297.966 mo
1020.17 297.966 li
@
1012.11 305.163 mo
1020.17 305.163 li
@
1012.11 313.08 mo
1020.17 313.08 li
@
1012.11 454.856 mo
1020.17 454.856 li
@
1012.11 459.175 mo
1020.17 459.175 li
@
1012.11 463.854 mo
1020.17 463.854 li
@
1012.11 469.971 mo
1020.17 469.971 li
@
1012.11 476.087 mo
1020.17 476.087 li
@
1012.11 485.085 mo
1020.17 485.085 li
@
1012.11 495.16 mo
1020.17 495.16 li
@
1012.11 510.995 mo
1020.17 510.995 li
@
1012.11 539.852 mo
1020.17 539.852 li
@
1012.11 544.891 mo
1020.17 544.891 li
@
1012.11 549.93 mo
1020.17 549.93 li
@
1012.11 556.047 mo
1020.17 556.047 li
@
1012.11 562.163 mo
1020.17 562.163 li
@
1012.11 571.161 mo
1020.17 571.161 li
@
1012.11 580.876 mo
1020.17 580.876 li
@
1012.11 595.99 mo
1020.17 595.99 li
@
1012.11 625.852 mo
1020.17 625.852 li
@
1012.11 630.891 mo
1020.17 630.891 li
@
1012.11 635.93 mo
1020.17 635.93 li
@
1012.11 642.047 mo
1020.17 642.047 li
@
1012.11 648.163 mo
1020.17 648.163 li
@
1012.11 656.08 mo
1020.17 656.08 li
@
1012.11 666.876 mo
1020.17 666.876 li
@
1012.11 681.99 mo
1020.17 681.99 li
@
1004.11 622.102 mo
1020.17 622.102 li
@
1004.11 535.852 mo
1020.17 535.852 li
@
1004.11 278.852 mo
1020.17 278.852 li
@
1004.11 192.852 mo
1020.17 192.852 li
@
1004.11 106.852 mo
1020.17 106.852 li
@
134.167 24.461 mo
126.102 24.461 li
@
134.167 29.4991 mo
126.102 29.4991 li
@
134.167 34.897 mo
126.102 34.897 li
@
134.167 39.9351 mo
126.102 39.9351 li
@
134.167 46.7725 mo
126.102 46.7725 li
@
134.167 55.0494 mo
126.102 55.0494 li
@
134.167 65.8453 mo
126.102 65.8453 li
@
134.167 80.5997 mo
126.102 80.5997 li
@
134.167 110.998 mo
126.102 110.998 li
@
134.167 114.956 mo
126.102 114.956 li
@
134.167 119.994 mo
126.102 119.994 li
@
134.167 126.112 mo
126.102 126.112 li
@
134.167 133.309 mo
126.102 133.309 li
@
134.167 141.226 mo
126.102 141.226 li
@
134.167 152.022 mo
126.102 152.022 li
@
134.167 167.136 mo
126.102 167.136 li
@
134.167 196.827 mo
126.102 196.827 li
@
134.167 200.786 mo
126.102 200.786 li
@
134.167 205.824 mo
126.102 205.824 li
@
134.167 211.941 mo
126.102 211.941 li
@
134.167 219.139 mo
126.102 219.139 li
@
134.167 227.056 mo
126.102 227.056 li
@
134.167 237.852 mo
126.102 237.852 li
@
134.167 252.966 mo
126.102 252.966 li
@
134.167 282.852 mo
126.102 282.852 li
@
134.167 286.81 mo
126.102 286.81 li
@
134.167 291.848 mo
126.102 291.848 li
@
134.167 297.966 mo
126.102 297.966 li
@
134.167 305.163 mo
126.102 305.163 li
@
134.167 313.08 mo
126.102 313.08 li
@
134.167 454.856 mo
126.102 454.856 li
@
134.167 459.175 mo
126.102 459.175 li
@
134.167 463.854 mo
126.102 463.854 li
@
134.167 469.971 mo
126.102 469.971 li
@
134.167 476.087 mo
126.102 476.087 li
@
134.167 485.085 mo
126.102 485.085 li
@
134.167 495.16 mo
126.102 495.16 li
@
134.167 510.995 mo
126.102 510.995 li
@
134.167 368.772 mo
126.102 368.772 li
@
134.167 373.09 mo
126.102 373.09 li
@
134.167 377.769 mo
126.102 377.769 li
@
134.167 383.886 mo
126.102 383.886 li
@
134.167 390.002 mo
126.102 390.002 li
@
134.167 399 mo
126.102 399 li
@
134.167 409.075 mo
126.102 409.075 li
@
134.167 424.91 mo
126.102 424.91 li
@
142.167 535.852 mo
126.102 535.852 li
@
142.167 278.852 mo
126.102 278.852 li
@
142.167 192.852 mo
126.102 192.852 li
@
142.167 106.852 mo
126.102 106.852 li
@
142.768 364.769 mo
126.102 364.769 li
@
810.741 692.769 mo
810.741 707.677 li
@
779.102 700.769 mo
779.102 707.677 li
@
743.102 700.769 mo
743.102 707.677 li
@
704.436 700.769 mo
704.436 707.677 li
@
657.048 700.769 mo
657.048 707.677 li
@
603.769 700.769 mo
603.769 707.677 li
@
541.102 700.769 mo
541.102 707.677 li
@
454.436 700.769 mo
454.436 707.677 li
@
333.102 700.769 mo
333.102 707.677 li
@
540.435 29.4346 mo
540.435 19.2105 li
@
33.3072 400.27 mo
27.1197 402.585 li
33.3072 404.841 li
33.3072 400.27 li
cp
39.9009 394.101 mo
39.9009 397.731 li
36.1197 399.168 li
36.1197 405.866 li
39.9009 407.245 li
39.9009 410.819 li
23.2134 404.336 li
23.2134 400.772 li
39.9009 394.101 li
f
28.3809 386.189 mo
38.5484 390.947 li
39.2945 390.854 41.9766 390.201 43.772 390.737 cv
44.8682 391.064 45.1944 391.53 45.148 392.206 cv
45.1011 392.859 44.4483 393.303 43.5157 393.303 cv
41.8834 393.303 39.6446 392.346 38.5015 391.903 cv
35.75 392.276 35.0269 392.463 33.4644 392.883 cv
32.3916 393.162 31.1094 393.652 30.6895 394.002 cv
30.3863 394.258 29.6402 395.238 30.4561 396.217 cv
31.086 396.963 31.9253 396.917 32.5084 396.986 cv
32.5084 397.359 li
31.7857 397.336 30.9224 397.453 29.5933 396.963 cv
28.0074 396.381 28.2173 394.795 28.3575 394.352 cv
28.5674 393.629 29.1504 392.93 31.5054 392.346 cv
33.1382 391.973 34.7706 391.6 36.5894 391.297 cv
36.5894 391.25 li
28.3809 388.615 li
28.3809 386.189 li
f
28.3809 376.605 mo
38.5484 381.362 li
39.2945 381.269 41.9766 380.616 43.772 381.152 cv
44.8682 381.479 45.1944 381.945 45.148 382.622 cv
45.1011 383.275 44.4483 383.718 43.5157 383.718 cv
41.8834 383.718 39.6446 382.762 38.5015 382.318 cv
35.75 382.692 35.0269 382.878 33.4644 383.298 cv
32.3916 383.578 31.1094 384.067 30.6895 384.418 cv
30.3863 384.674 29.6402 385.653 30.4561 386.633 cv
31.086 387.379 31.9253 387.333 32.5084 387.402 cv
32.5084 387.775 li
31.7857 387.752 30.9224 387.869 29.5933 387.379 cv
28.0074 386.796 28.2173 385.21 28.3575 384.767 cv
28.5674 384.044 29.1504 383.345 31.5054 382.762 cv
33.1382 382.389 34.7706 382.016 36.5894 381.712 cv
36.5894 381.666 li
28.3809 379.03 li
28.3809 376.605 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
