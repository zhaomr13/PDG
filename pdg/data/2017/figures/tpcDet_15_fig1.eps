%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: tpcDet_15_fig1.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: lippmann
%%CreationDate: 30/07/15
%%BoundingBox: 0 0 408 330
%%HiResBoundingBox: 0 0 407.3467 329.1523
%%CropBox: 0 0 407.3467 329.1523
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2015-07-30T18:53+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-07-30T18:53+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-07-30T18:53+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>208</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqw&#xA;7zrq3mux1nSYtJRza3HwUjSBkkuTNEBHO0zKyRiD1G/d/EaddgrFUjk13zxcaPb3gu5bC/KtH9SK&#xA;2X72W3055JWAKy1U3sYj+B+hPTYhVEeXta87X+sabcK8txoFFjvZOUEhMrm6qWpaWrFV4wVZOPGu&#xA;6sCWCqld3n5pW9vZOwnf15JGuhCIWeOPifTAIspPT+ICq+nJ/r71VQjl1rznPc6JGltfRn15U1P/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F87F11740720681188C6B813005A382A</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F11740720681188C6B813005A382A</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F77F11740720681188C6B813005A382A</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F11740720681188C6B813005A382A</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D27F11740720681191099C3B601C4548</stEvt:instanceID>
                  <stEvt:when>2008-04-17T14:19:15+05:30</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T16:23:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F1174072068118D4ED246B3ADB1C6</stEvt:instanceID>
                  <stEvt:when>2008-05-15T17:10:45-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EF7F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T22:53:33-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F07F117407206811A46CA4519D24356B</stEvt:instanceID>
                  <stEvt:when>2008-05-15T23:07:07-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:35:43-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/pdf to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T10:40:59-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to &lt;unknown&gt;</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:26:55-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:29:20-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FD7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:30:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FE7F117407206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T11:31:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B233668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T12:23:46-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B333668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:27:54-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:B433668C16206811BDDDFD38D0CF24DD</stEvt:instanceID>
                  <stEvt:when>2008-05-16T13:46:13-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:47:57-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:51:06-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681197C1BF14D1759E83</stEvt:instanceID>
                  <stEvt:when>2008-05-16T15:52:22-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T13:28:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FF7F117407206811B628E3BF27C8C41B</stEvt:instanceID>
                  <stEvt:when>2008-05-22T16:23:53-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07C3BD25102DDD1181B594070CEB88D9</stEvt:instanceID>
                  <stEvt:when>2008-05-28T16:45:26-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:params>from application/vnd.adobe.illustrator to application/vnd.adobe.illustrator</stEvt:params>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068119098B097FDA39BEF</stEvt:instanceID>
                  <stEvt:when>2008-06-02T13:25:25-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811BB1DBF8F242B6F84</stEvt:instanceID>
                  <stEvt:when>2008-06-09T14:58:36-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F117407206811ACAFB8DA80854E76</stEvt:instanceID>
                  <stEvt:when>2008-06-11T14:31:27-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811834383CD3A8D2303</stEvt:instanceID>
                  <stEvt:when>2008-06-11T22:37:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01E540664A3DDD11BD33D3EB8D3A1068</stEvt:instanceID>
                  <stEvt:when>2008-06-18T22:24:01+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6B6AE2A5723EDD11A6F1BABF7C5A7A51</stEvt:instanceID>
                  <stEvt:when>2008-06-19T20:30:34-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0B9FED35200A11689FE8CB9EA85C5459</stEvt:instanceID>
                  <stEvt:when>2008-06-26T06:07:42-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>
                     <rdf:Bag>
                        <rdf:li>/</rdf:li>
                     </rdf:Bag>
                  </stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F11740720681188C6B813005A382A</stEvt:instanceID>
                  <stEvt:when>2015-07-30T18:52:44+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681188C6B813005A382A</stEvt:instanceID>
                  <stEvt:when>2015-07-30T18:53+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>144.998557</stDim:w>
            <stDim:h>120.000944</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>89.999405</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>79.998795</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>69.999702</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>59.999104</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999401</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>29.998802</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>19.999701</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>9.999103</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>4.998803</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Brights</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>75.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=60 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>60.000004</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>0.003099</xmpG:yellow>
                           <xmpG:black>0.003099</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -329.152 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 329.152 li
407.347 329.152 li
407.347 0 li
cp
clp
[1 0 0 1 0 0 ]ct
407.212 329.152 mo
0 329.152 li
0 0 li
407.212 0 li
407.212 329.152 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
.24 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
238.919 191.706 mo
238.799 185.946 li
238.224 139.674 218.746 66.1162 178.079 38.8262 cv
175.018 37.0859 li
0 0 0 1 cmyk
@
.12 lw
126.659 52.2656 mo
125.819 53.7061 li
@
124.438 56.166 mo
123.358 58.2061 li
@
116.698 76.2061 mo
115.858 79.626 li
115.018 83.166 li
@
114.538 85.5059 mo
113.878 88.9258 li
113.338 92.4063 li
112.798 96.0059 li
@
.36 lw
349.499 174.485 mo
349.438 168.666 li
349.198 162.786 li
347.817 135.066 342.2 106.412 332.458 80.4063 cv
330.419 75.0059 li
328.198 69.7256 li
319.291 48.7988 305.607 25.4473 286.857 11.8857 cv
283.799 9.78613 li
280.679 7.98633 li
@
348.718 174.065 mo
348.599 168.187 li
348.009 118.856 327.313 40.3564 283.857 11.3457 cv
280.679 9.48633 li
@
.12 lw
344.519 171.906 mo
344.458 166.146 li
344.278 160.326 li
342.883 134.804 337.808 108.948 328.919 84.9658 cv
326.878 79.626 li
324.778 74.4063 li
316.479 55.2236 303.912 33.6592 286.737 21.126 cv
283.737 19.0859 li
280.679 17.2861 li
0 0 0 .887 cmyk
@
232.317 32.4658 mo
231.419 33.9063 li
0 0 0 1 cmyk
@
230.099 36.3662 mo
229.019 38.4063 li
@
222.357 56.4658 mo
221.458 59.8857 li
220.679 63.3662 li
@
220.198 65.7061 mo
219.357 70.2656 li
218.638 75.0059 li
218.038 79.8662 li
217.558 84.8457 li
217.198 89.8857 li
@
.36 lw
94.3784 310.446 mo
97.2583 309.726 li
100.138 308.767 li
102.898 307.506 li
105.598 306.006 li
119.894 297.157 127.896 278.919 132.178 263.347 cv
133.378 258.546 li
134.458 253.565 li
139.312 229.173 138.857 203.019 135.598 178.446 cv
134.698 172.267 li
133.618 166.146 li
132.478 160.026 li
131.159 153.906 li
125.524 129.542 116.715 104.825 103.558 83.4658 cv
100.798 79.0859 li
97.9185 74.9463 li
88.0103 60.959 72.5894 45.1162 54.7778 42.5459 cv
51.7183 42.2461 li
48.7183 42.2461 li
45.7183 42.5459 li
42.7778 43.0859 li
39.8979 43.9258 li
37.0786 45.0059 li
22.4185 51.5586 13.2856 68.4307 8.51807 82.9863 cv
7.07861 87.5459 li
5.81885 92.2256 li
-.578613 117.69 -.574707 145.728 2.57861 171.666 cv
3.41846 177.847 li
4.43799 183.966 li
5.51807 190.146 li
6.77783 196.267 li
12.1401 220.871 20.7896 245.76 33.6587 267.485 cv
36.4185 271.926 li
39.2388 276.187 li
49.0688 290.617 64.3062 306.985 82.2583 310.386 cv
85.3188 310.806 li
88.3784 310.985 li
91.3784 310.866 li
94.3784 310.446 li
cp
@
93.1177 303.847 mo
95.938 303.187 li
98.7583 302.226 li
101.458 301.026 li
104.098 299.526 li
118.122 290.38 125.48 272.938 129.538 257.347 cv
130.678 252.666 li
131.638 247.746 li
136.132 223.875 135.342 198.069 131.758 174.126 cv
130.739 168.187 li
129.659 162.187 li
128.398 156.246 li
127.018 150.366 li
121.29 127.166 112.208 103.477 98.9985 83.4658 cv
96.2388 79.5059 li
93.4185 75.666 li
84.1001 63.6816 70.0825 50.5469 54.2388 48.9658 cv
51.2388 48.7861 li
48.3579 48.9063 li
45.478 49.3262 li
42.5981 49.9863 li
39.8384 50.9463 li
37.1382 52.1455 li
22.7427 59.6953 14.7563 76.374 10.3188 91.2656 cv
9.05811 95.8262 li
7.91846 100.506 li
2.75439 123.966 2.99658 149.307 5.99854 173.046 cv
6.83838 179.046 li
7.79834 184.985 li
8.93799 190.985 li
10.1978 196.926 li
15.5356 220.845 24.0513 244.556 36.8979 265.506 cv
39.5981 269.706 li
42.3579 273.666 li
51.3638 286.407 65.4194 300.687 81.3579 303.786 cv
84.3579 304.206 li
87.2983 304.386 li
90.2388 304.267 li
93.1177 303.847 li
cp
@
76.0181 212.466 mo
77.5181 212.046 li
78.8979 211.326 li
80.2778 210.366 li
88.4478 203.12 88.5317 185.585 86.8784 175.746 cv
86.3384 172.565 li
85.6177 169.446 li
83.5513 160.136 76.7563 143.656 66.478 140.886 cv
64.9185 140.586 li
63.3579 140.586 li
61.7983 140.886 li
60.3579 141.486 li
51.0493 146.353 50.2876 163.636 51.1177 172.626 cv
51.478 175.806 li
51.9575 178.985 li
53.7759 189.8 60.0513 207.681 71.2778 212.046 cv
72.8979 212.466 li
74.4575 212.586 li
76.0181 212.466 li
cp
@
.12 lw
38.0376 58.2656 mo
38.1587 58.2656 li
38.2183 58.1455 li
38.2778 58.0859 li
38.3384 57.9063 li
38.3384 57.7256 li
38.3979 57.5459 li
38.3979 57.3662 li
38.3384 57.1855 li
38.3384 56.9463 li
38.2778 56.7656 li
38.1587 56.5859 li
38.0981 56.4658 li
37.978 56.2861 li
37.9185 56.2256 li
37.7983 56.166 li
37.6177 56.166 li
37.4985 56.2256 li
37.438 56.2861 li
37.3784 56.4063 li
37.3188 56.5859 li
37.3188 57.3662 li
37.3813 57.6221 37.5396 57.9717 37.7388 58.1455 cv
37.8579 58.2656 li
38.0376 58.2656 li
cp
0 0 0 .887 cmyk
@
58.5581 55.5059 mo
58.6782 55.4463 li
58.7388 55.3857 li
58.7983 55.2656 li
58.8579 55.1455 li
58.9185 54.9658 li
58.9185 54.6064 li
58.8579 54.3662 li
58.8579 54.1855 li
58.7671 53.8975 58.5962 53.6543 58.438 53.4063 cv
58.3188 53.3457 li
58.1382 53.3457 li
58.0181 53.4063 li
57.7778 53.916 57.8462 53.583 57.8384 54.1855 cv
57.8384 54.3662 li
57.8979 54.5459 li
57.8979 54.7861 li
57.9575 54.9658 li
58.0786 55.1455 li
58.1382 55.2656 li
58.2583 55.3857 li
58.3784 55.4463 li
58.438 55.5059 li
58.5581 55.5059 li
cp
@
21.2983 75.4863 mo
21.4185 75.4258 li
21.478 75.3662 li
21.8325 74.7842 21.6021 73.6973 21.0581 73.3262 cv
20.8784 73.3262 li
20.3354 73.5684 20.5376 75.251 21.1177 75.4258 cv
21.1782 75.4863 li
21.2983 75.4863 li
cp
@
10.3784 105.006 mo
10.438 104.946 li
10.5581 104.886 li
10.6177 104.766 li
10.6782 104.646 li
10.6782 104.466 li
10.7388 104.286 li
10.7388 104.106 li
10.6782 103.866 li
10.6177 103.686 li
10.5581 103.506 li
10.4985 103.326 li
10.438 103.146 li
10.3188 103.026 li
10.1978 102.966 li
10.1382 102.906 li
10.0181 102.846 li
9.89795 102.846 li
9.46143 103.285 9.59619 104.69 10.1978 104.946 cv
10.2583 105.006 li
10.3784 105.006 li
cp
@
6.59814 143.286 mo
6.65869 143.226 li
6.77783 143.166 li
6.89795 142.926 li
6.89795 142.146 li
6.83838 141.966 li
6.63135 141.443 6.81299 141.548 6.41846 141.186 cv
6.35791 141.126 li
6.11768 141.126 li
5.62744 141.615 5.82275 142.846 6.35791 143.226 cv
6.47803 143.286 li
6.59814 143.286 li
cp
@
10.3784 185.706 mo
10.438 185.646 li
10.5581 185.586 li
10.6177 185.466 li
10.6782 185.347 li
10.6782 185.166 li
10.7388 184.985 li
10.6782 184.806 li
10.6782 184.565 li
10.6177 184.386 li
10.5581 184.206 li
10.4985 184.026 li
10.438 183.847 li
10.3188 183.726 li
10.1978 183.666 li
10.1382 183.606 li
10.0181 183.546 li
9.89795 183.606 li
9.83838 183.606 li
9.77783 183.726 li
9.47803 184.349 9.61377 185.332 10.2583 185.706 cv
10.3784 185.706 li
cp
@
80.3979 67.4463 mo
80.5181 67.3857 li
80.5786 67.3262 li
80.7876 66.9092 80.7612 67.0166 80.7583 66.5459 cv
80.7583 66.3057 li
80.5786 65.7656 li
80.4585 65.5859 li
80.3979 65.4658 li
80.1587 65.3457 li
80.0981 65.2861 li
79.978 65.3457 li
79.9185 65.4063 li
79.7983 65.4658 li
79.7388 65.5859 li
79.7388 65.7656 li
79.6782 65.9463 li
79.6782 66.3057 li
79.7388 66.5459 li
79.8423 66.8516 79.9146 67.2314 80.2183 67.3857 cv
80.3384 67.4463 li
80.3979 67.4463 li
cp
@
117.659 128.166 mo
117.778 128.106 li
118.252 127.684 117.968 126.294 117.418 126.066 cv
117.298 126.006 li
117.239 126.066 li
117.118 126.126 li
116.909 126.327 116.933 126.582 116.938 126.846 cv
116.938 127.026 li
116.999 127.266 li
116.999 127.446 li
117.118 127.626 li
117.178 127.806 li
117.239 127.926 li
117.358 128.046 li
117.598 128.166 li
117.659 128.166 li
cp
@
128.579 169.626 mo
128.698 169.565 li
128.758 169.506 li
129.155 168.961 128.862 167.804 128.338 167.466 cv
128.159 167.466 li
127.577 167.808 127.879 169.29 128.399 169.565 cv
128.458 169.626 li
128.579 169.626 li
cp
@
21.2983 227.166 mo
21.4185 227.166 li
21.478 227.106 li
21.8081 226.483 21.6489 225.463 21.0581 225.065 cv
20.8784 225.065 li
20.7583 225.126 li
20.5864 225.317 20.5581 225.597 20.5786 225.847 cv
20.5786 226.267 li
20.6978 226.626 li
20.8188 226.806 li
20.8784 226.985 li
20.9985 227.046 li
21.1177 227.166 li
21.2983 227.166 li
cp
@
38.0376 262.687 mo
38.0981 262.626 li
38.2183 262.565 li
38.3384 262.326 li
38.3384 262.146 li
38.3989 261.966 li
38.3989 261.786 li
38.3384 261.546 li
38.2183 261.187 li
38.0767 260.685 38.0767 260.776 37.6782 260.526 cv
37.5581 260.586 li
37.4985 260.586 li
37.3784 260.826 li
37.3188 261.006 li
37.3188 261.786 li
37.438 262.146 li
37.5581 262.326 li
37.6177 262.446 li
37.7388 262.565 li
37.8579 262.626 li
37.9185 262.687 li
38.0376 262.687 li
cp
@
58.5581 287.886 mo
58.6782 287.886 li
58.7388 287.826 li
59.0649 287.187 58.9243 286.204 58.3188 285.786 cv
58.1382 285.786 li
58.0181 285.847 li
57.8462 286.038 57.8188 286.317 57.8384 286.565 cv
57.8384 286.985 li
57.9585 287.347 li
58.0786 287.526 li
58.1382 287.706 li
58.2583 287.767 li
58.3784 287.886 li
58.5581 287.886 li
cp
@
80.3989 299.826 mo
80.5181 299.826 li
80.5786 299.767 li
80.9419 299.204 80.7671 298.046 80.1587 297.726 cv
79.978 297.726 li
79.8579 297.786 li
79.6392 298.261 79.6782 297.961 79.6782 298.506 cv
79.6782 298.746 li
79.7388 298.926 li
79.8491 299.188 79.8657 299.511 80.0981 299.706 cv
80.2183 299.826 li
80.3989 299.826 li
cp
@
100.918 297.065 mo
101.039 297.006 li
101.098 296.946 li
101.483 296.422 101.248 295.207 100.678 294.906 cv
100.499 294.906 li
99.8921 295.163 100.292 296.804 100.739 297.006 cv
100.858 297.065 li
100.918 297.065 li
cp
@
117.659 279.847 mo
117.778 279.786 li
117.838 279.726 li
118.223 279.202 117.987 277.987 117.418 277.687 cv
117.239 277.687 li
116.647 277.92 117.012 279.597 117.478 279.786 cv
117.598 279.847 li
117.659 279.847 li
cp
@
128.579 250.326 mo
128.698 250.267 li
128.758 250.206 li
129.13 249.64 128.946 248.496 128.338 248.166 cv
128.159 248.166 li
127.552 248.411 127.961 250.071 128.399 250.267 cv
128.518 250.326 li
128.579 250.326 li
cp
@
132.358 212.046 mo
132.479 211.985 li
132.538 211.926 li
132.747 211.509 132.721 211.617 132.718 211.146 cv
132.718 210.905 li
132.538 210.366 li
132.418 210.187 li
132.358 210.065 li
132.118 209.946 li
132.058 209.886 li
131.938 209.946 li
131.819 209.946 li
131.758 210.065 li
131.506 210.61 131.676 211.813 132.298 212.046 cv
132.358 212.046 li
cp
@
49.3188 166.626 mo
49.3784 166.565 li
49.4985 166.506 li
49.7104 166.149 49.5894 166.17 49.6177 165.726 cv
49.6177 165.485 li
49.3784 164.767 li
49.2583 164.646 li
49.1382 164.586 li
49.0786 164.526 li
48.9585 164.466 li
48.8384 164.526 li
48.2837 164.951 48.6079 166.378 49.1978 166.626 cv
49.3188 166.626 li
cp
@
50.5181 154.326 mo
50.6382 154.326 li
50.6978 154.206 li
50.7583 154.146 li
50.8188 153.966 li
50.8784 153.847 li
50.8784 153.426 li
50.8188 153.246 li
50.8188 153.006 li
50.7583 152.826 li
50.6382 152.646 li
50.5786 152.526 li
50.4585 152.406 li
50.3989 152.286 li
50.2778 152.226 li
50.0981 152.226 li
49.979 152.286 li
49.9185 152.347 li
49.8579 152.526 li
49.7983 152.646 li
49.7983 153.426 li
49.8579 153.606 li
49.9185 153.786 li
50.0386 153.966 li
50.0981 154.146 li
50.2183 154.206 li
50.3384 154.326 li
50.5181 154.326 li
cp
@
54.0581 144.906 mo
54.1177 144.846 li
54.2388 144.786 li
54.5464 144.326 54.3062 142.976 53.7583 142.746 cv
53.5786 142.746 li
53.0122 143.209 53.3062 144.424 53.8188 144.846 cv
53.938 144.906 li
54.0581 144.906 li
cp
@
59.3989 139.386 mo
59.5181 139.326 li
59.9966 138.919 59.6899 137.477 59.1587 137.286 cv
59.0386 137.226 li
58.979 137.286 li
58.8579 137.346 li
58.6489 137.549 58.6733 137.802 58.6782 138.066 cv
58.6782 138.246 li
58.7388 138.486 li
58.7388 138.666 li
58.8579 138.846 li
58.9185 139.026 li
58.979 139.146 li
59.0981 139.266 li
59.2183 139.326 li
59.3384 139.386 li
59.3989 139.386 li
cp
@
65.9985 138.486 mo
66.0581 138.486 li
66.1782 138.366 li
66.2983 138.126 li
66.2983 137.946 li
66.3579 137.766 li
66.3579 137.586 li
66.2983 137.406 li
66.2388 137.166 li
66.0581 136.626 li
65.938 136.506 li
65.8188 136.446 li
65.7583 136.386 li
65.6382 136.326 li
65.5181 136.386 li
65.3989 136.506 li
65.3384 136.626 li
65.2778 136.806 li
65.2778 136.986 li
65.2183 137.166 li
65.2778 137.346 li
65.2778 137.586 li
65.3989 137.946 li
65.5181 138.126 li
65.5786 138.246 li
65.6978 138.366 li
65.8188 138.426 li
65.8784 138.486 li
65.9985 138.486 li
cp
@
73.0181 142.326 mo
73.0786 142.266 li
73.1978 142.206 li
73.3188 141.966 li
73.3188 141.186 li
73.2583 141.006 li
73.0513 140.483 73.2329 140.588 72.8384 140.226 cv
72.7778 140.166 li
72.5386 140.166 li
72.022 140.671 72.27 141.875 72.7778 142.266 cv
72.8989 142.326 li
73.0181 142.326 li
cp
@
79.6177 150.366 mo
79.8579 150.126 li
79.8579 150.006 li
79.9185 149.826 li
79.9185 149.286 li
79.8579 149.046 li
79.7983 148.866 li
79.7388 148.686 li
79.6177 148.506 li
79.5581 148.386 li
79.3188 148.266 li
79.2583 148.206 li
79.1382 148.266 li
79.0786 148.326 li
78.9585 148.386 li
78.8989 148.506 li
78.8989 148.686 li
78.8384 148.866 li
78.8384 149.226 li
78.8989 149.466 li
79.0024 149.772 79.0747 150.151 79.3784 150.306 cv
79.4985 150.366 li
79.6177 150.366 li
cp
@
84.9585 161.767 mo
85.0786 161.706 li
85.1382 161.646 li
85.5239 161.122 85.2876 159.907 84.7183 159.606 cv
84.5386 159.606 li
83.9517 159.851 84.3081 161.511 84.7778 161.706 cv
84.8989 161.767 li
84.9585 161.767 li
cp
@
88.4985 175.086 mo
88.5581 175.026 li
88.6782 174.966 li
89.0464 174.45 88.7368 173.271 88.2583 172.926 cv
88.0181 172.926 li
87.5767 173.36 87.7192 174.774 88.3188 175.026 cv
88.3784 175.086 li
88.4985 175.086 li
cp
@
89.6978 188.706 mo
89.8188 188.646 li
90.2476 188.205 90.0356 186.851 89.4585 186.606 cv
89.3384 186.546 li
89.2778 186.606 li
89.1587 186.666 li
88.9478 186.868 88.9731 187.122 88.979 187.386 cv
88.979 187.806 li
89.0981 188.166 li
89.2183 188.347 li
89.2778 188.466 li
89.3989 188.586 li
89.5181 188.646 li
89.5786 188.706 li
89.6978 188.706 li
cp
@
88.438 200.946 mo
88.5581 200.946 li
88.6177 200.826 li
88.6782 200.767 li
88.7388 200.586 li
88.7983 200.466 li
88.7983 200.046 li
88.7388 199.866 li
88.7388 199.626 li
88.6177 199.267 li
88.3784 199.026 li
88.3188 198.906 li
88.1978 198.847 li
88.0181 198.847 li
87.8989 198.906 li
87.8384 198.966 li
87.7778 199.086 li
87.7183 199.267 li
87.7183 199.866 li
87.7778 200.046 li
87.9771 200.603 87.8267 200.38 88.1382 200.826 cv
88.2583 200.946 li
88.438 200.946 li
cp
@
84.8989 210.366 mo
85.0181 210.306 li
85.0786 210.246 li
85.2876 209.829 85.2612 209.937 85.2583 209.466 cv
85.2583 209.286 li
85.1978 209.046 li
85.0786 208.687 li
84.9585 208.506 li
84.8989 208.386 li
84.6587 208.267 li
84.5981 208.206 li
84.479 208.267 li
84.3579 208.326 li
84.1489 208.528 84.1733 208.782 84.1782 209.046 cv
84.1782 209.226 li
84.2388 209.466 li
84.3423 209.772 84.4146 210.151 84.7183 210.306 cv
84.8384 210.366 li
84.8989 210.366 li
cp
@
79.5581 215.826 mo
79.6177 215.767 li
79.7388 215.706 li
79.7983 215.586 li
79.8579 215.466 li
79.8579 214.687 li
79.7983 214.506 li
79.6177 213.966 li
79.4985 213.847 li
79.3784 213.786 li
79.3188 213.726 li
79.1978 213.666 li
79.0786 213.666 li
78.5688 214.212 78.8052 215.33 79.3188 215.767 cv
79.438 215.826 li
79.5581 215.826 li
cp
@
72.9585 216.666 mo
73.0786 216.666 li
73.1382 216.546 li
73.1978 216.485 li
73.3188 216.126 li
73.3188 215.586 li
73.2583 215.347 li
73.1382 214.985 li
73.0181 214.866 li
72.9585 214.687 li
72.7183 214.565 li
72.5386 214.565 li
72.479 214.626 li
72.3579 214.687 li
72.2983 214.806 li
72.2983 214.985 li
72.2388 215.166 li
72.2388 215.526 li
72.2983 215.767 li
72.4976 216.323 72.3472 216.101 72.6587 216.546 cv
72.7778 216.666 li
72.9585 216.666 li
cp
@
65.9985 212.886 mo
66.1177 212.826 li
66.1782 212.767 li
66.2983 212.526 li
66.3579 212.347 li
66.3579 211.985 li
66.2983 211.746 li
66.2983 211.565 li
66.2075 211.276 66.0356 211.034 65.8784 210.786 cv
65.7583 210.726 li
65.5786 210.726 li
65.0356 210.968 65.2368 212.651 65.8188 212.826 cv
65.8784 212.886 li
65.9985 212.886 li
cp
@
59.4585 204.847 mo
59.5181 204.786 li
59.6382 204.726 li
59.8501 204.37 59.729 204.39 59.7583 203.946 cv
59.7583 203.706 li
59.5786 203.166 li
59.4585 202.985 li
59.3989 202.866 li
59.1587 202.746 li
59.0981 202.687 li
58.979 202.746 li
58.9185 202.806 li
58.7983 202.866 li
58.7388 202.985 li
58.7388 203.166 li
58.6782 203.347 li
58.6782 203.706 li
58.7388 203.946 li
58.9497 204.511 58.772 204.366 59.2183 204.786 cv
59.3384 204.847 li
59.4585 204.847 li
cp
@
54.0581 193.506 mo
54.1782 193.506 li
54.2388 193.386 li
54.2983 193.326 li
54.3579 193.146 li
54.4185 193.026 li
54.4185 192.606 li
54.3579 192.426 li
54.3579 192.187 li
54.2983 192.006 li
54.1782 191.826 li
54.1177 191.706 li
53.9985 191.586 li
53.938 191.466 li
53.8188 191.406 li
53.6382 191.406 li
53.5181 191.466 li
53.4585 191.526 li
53.3989 191.646 li
53.3384 191.826 li
53.3384 192.606 li
53.4009 192.862 53.5601 193.212 53.7583 193.386 cv
53.8784 193.506 li
54.0581 193.506 li
cp
@
50.5181 180.246 mo
50.6382 180.187 li
50.6978 180.126 li
51.0835 179.603 50.8472 178.388 50.2778 178.086 cv
50.0981 178.086 li
49.5122 178.331 49.8677 179.991 50.3384 180.187 cv
50.4585 180.246 li
50.5181 180.246 li
cp
@
232.378 33.7256 mo
229.258 34.3262 li
@
126.659 53.5264 mo
88.4985 60.666 li
@
232.739 35.8262 mo
228.239 36.7256 li
@
127.079 55.6855 mo
90.2983 62.5264 li
@
221.458 63.2461 mo
218.218 63.8457 li
@
115.739 83.0459 mo
106.618 84.7256 li
@
221.817 65.4063 mo
217.857 66.126 li
@
116.159 85.2061 mo
107.819 86.7656 li
@
343.438 170.286 mo
342.538 170.466 li
@
237.778 190.086 mo
235.378 190.506 li
@
290.638 108.605 mo
289.199 108.906 li
@
184.979 128.406 mo
183.598 128.706 li
@
291.058 110.766 mo
290.278 110.886 li
@
185.338 130.565 mo
184.618 130.686 li
@
284.099 100.565 mo
282.479 100.866 li
@
178.378 120.366 mo
176.878 120.666 li
@
284.458 102.666 mo
284.218 102.726 li
@
178.798 122.466 mo
178.558 122.526 li
@
277.078 96.7256 mo
274.919 97.1455 li
@
171.358 116.526 mo
169.258 116.946 li
@
164.758 117.426 mo
161.159 118.086 li
@
295.979 168.606 mo
295.857 168.666 li
@
190.319 188.405 mo
190.258 188.405 li
@
296.397 170.766 mo
294.958 171.006 li
@
190.739 190.565 mo
189.358 190.806 li
@
299.519 159.187 mo
298.799 159.366 li
@
193.798 178.985 mo
193.138 179.166 li
@
299.938 161.346 mo
298.499 161.586 li
@
194.218 181.146 mo
192.899 181.386 li
@
300.778 146.946 mo
299.758 147.126 li
@
195.058 166.745 mo
194.098 166.926 li
@
301.138 149.105 mo
299.817 149.346 li
@
195.479 168.905 mo
194.159 169.146 li
@
299.578 133.326 mo
298.378 133.565 li
@
193.858 153.126 mo
192.718 153.366 li
@
299.938 135.426 mo
298.739 135.666 li
@
194.278 155.286 mo
193.079 155.466 li
@
296.038 120.006 mo
294.718 120.246 li
@
190.378 139.806 mo
189.058 140.046 li
@
296.458 122.105 mo
295.378 122.346 li
@
190.739 141.966 mo
189.718 142.146 li
@
296.038 120.006 mo
294.718 120.246 li
@
190.378 139.806 mo
189.058 140.046 li
@
190.739 141.966 mo
189.718 142.146 li
@
290.999 176.226 mo
289.618 176.466 li
@
185.338 196.026 mo
183.958 196.266 li
@
.36 lw
44.2183 42.7861 mo
255.657 3.18652 li
0 0 0 1 cmyk
@
94.3774 310.446 mo
305.758 270.847 li
@
47.6978 164.106 mo
48.8384 152.226 li
@
49.0786 151.026 mo
52.4985 141.906 li
@
52.978 141.066 mo
58.1382 135.786 li
@
58.7983 135.426 mo
65.1587 134.526 li
@
65.8784 134.706 mo
72.6587 138.366 li
@
73.438 139.086 mo
79.7983 146.826 li
@
80.3979 147.906 mo
85.6177 158.946 li
@
86.0981 160.267 mo
89.4585 173.106 li
@
89.7583 174.546 mo
90.8979 187.687 li
@
90.8979 189.126 mo
89.6978 200.886 li
@
89.5181 202.146 mo
86.0981 211.267 li
@
85.6177 212.106 mo
80.3979 217.386 li
@
79.7983 217.806 mo
73.438 218.646 li
@
72.7183 218.526 mo
65.938 214.806 li
@
65.1587 214.086 mo
58.7983 206.347 li
@
58.1382 205.267 mo
52.978 194.286 li
@
52.4985 192.906 mo
49.0786 180.065 li
@
48.8384 178.626 mo
47.6978 165.485 li
@
39.0581 60.4863 mo
58.3179 57.9063 li
@
59.0376 58.0264 mo
79.4985 69.2461 li
@
80.2778 69.9063 mo
99.5376 93.5459 li
@
100.138 94.5664 mo
115.858 127.866 li
@
116.338 129.187 mo
126.598 168.065 li
@
126.838 169.506 mo
130.377 209.286 li
@
130.377 210.666 mo
126.838 246.546 li
@
126.598 247.746 mo
116.338 275.406 li
@
115.858 276.187 mo
100.138 292.326 li
@
99.478 292.687 mo
80.2778 295.326 li
@
79.5581 295.146 mo
59.0981 283.927 li
@
58.3179 283.326 mo
39.0581 259.687 li
@
38.3979 258.606 mo
22.7388 225.366 li
@
22.2583 223.985 mo
11.9985 185.166 li
@
11.7583 183.666 mo
8.21826 143.946 li
@
8.21826 142.506 mo
11.7583 106.626 li
@
11.9985 105.426 mo
22.2583 77.7656 li
@
22.7388 76.9863 mo
38.3979 60.8457 li
58.1382 135.786 li
@
48.8384 178.626 mo
11.7583 183.666 li
@
79.5581 295.146 mo
72.7183 218.526 li
@
80.2778 295.326 mo
73.438 218.646 li
@
99.1177 291.246 mo
80.1587 293.826 li
@
79.438 293.706 mo
59.2183 282.606 li
@
65.938 214.806 mo
59.0981 283.927 li
@
65.1587 214.086 mo
58.3179 283.326 li
@
58.438 282.006 mo
39.478 258.666 li
@
58.7983 206.347 mo
39.0581 259.687 li
@
58.1382 205.267 mo
38.3979 258.606 li
@
38.8179 257.586 mo
23.3384 224.706 li
@
52.978 194.286 mo
22.7388 225.366 li
@
52.4985 192.906 mo
22.2583 223.985 li
@
22.8579 223.386 mo
12.7183 185.046 li
@
49.0786 180.065 mo
11.9985 185.166 li
@
12.478 183.546 mo
8.93799 144.306 li
@
8.21826 143.946 mo
47.6978 165.485 li
@
8.21826 142.506 mo
47.6978 164.106 li
@
8.93799 142.926 mo
12.478 107.466 li
@
11.7583 106.626 mo
48.8384 152.226 li
@
11.9985 105.426 mo
49.0786 151.026 li
@
12.7183 106.326 mo
22.8579 79.0264 li
@
23.3384 78.1865 mo
38.8179 62.2861 li
@
22.7378 76.9863 mo
52.978 141.066 li
@
22.2583 77.7656 mo
52.4985 141.906 li
@
39.478 61.9258 mo
58.438 59.3457 li
@
39.0581 60.4863 mo
58.7983 135.426 li
@
59.1587 59.5264 mo
79.3774 70.5664 li
@
65.8774 134.706 mo
59.0376 58.0264 li
@
65.1587 134.526 mo
58.3179 57.9063 li
@
79.4985 69.2461 mo
72.6587 138.366 li
@
80.2778 69.9063 mo
73.438 139.086 li
@
80.1587 71.2256 mo
99.1177 94.5664 li
@
79.7983 146.826 mo
99.5376 93.5459 li
@
80.3979 147.906 mo
100.138 94.5664 li
@
99.7778 95.5859 mo
115.258 128.466 li
@
85.6177 158.946 mo
115.858 127.866 li
@
86.0981 160.267 mo
116.338 129.187 li
@
115.739 129.786 mo
125.877 168.126 li
@
126.598 168.065 mo
89.4575 173.106 li
@
126.838 169.506 mo
89.7583 174.546 li
@
126.118 169.565 mo
129.598 208.866 li
@
129.659 210.306 mo
126.118 245.706 li
@
90.8979 189.126 mo
130.377 210.666 li
@
90.8979 187.687 mo
130.377 209.286 li
@
89.6978 200.886 mo
126.838 246.546 li
@
89.5181 202.146 mo
126.598 247.746 li
@
125.877 246.847 mo
115.739 274.146 li
@
115.858 276.187 mo
85.6177 212.106 li
@
116.338 275.406 mo
86.0981 211.267 li
@
115.258 274.985 mo
99.7778 290.886 li
@
80.3979 217.386 mo
100.138 292.326 li
@
79.7983 217.806 mo
99.478 292.687 li
@
95.7583 150.306 mo
101.338 171.485 li
@
74.8774 243.006 mo
63.7183 236.886 li
@
43.3179 120.546 mo
51.8384 111.786 li
@
52.4985 111.486 mo
62.9985 110.046 li
@
53.0981 113.766 mo
63.1782 112.446 li
@
63.7183 110.166 mo
74.8179 116.286 li
@
63.8979 112.566 mo
74.6382 118.386 li
@
75.5981 116.946 mo
86.0981 129.846 li
@
75.4185 119.106 mo
85.438 131.466 li
@
86.6978 130.866 mo
95.2778 148.986 li
@
86.0981 132.486 mo
94.3784 149.946 li
@
94.7983 151.267 mo
100.198 171.666 li
@
101.579 172.926 mo
103.558 194.586 li
@
100.438 173.106 mo
102.298 193.926 li
@
103.499 196.026 mo
101.579 215.526 li
@
102.298 195.366 mo
100.438 214.146 li
@
101.338 216.726 mo
95.7583 231.786 li
@
100.198 215.286 mo
94.8579 229.806 li
@
94.3179 230.586 mo
86.0981 239.046 li
@
95.2778 232.565 mo
86.7583 241.386 li
@
85.438 239.406 mo
75.4185 240.786 li
@
86.0981 241.687 mo
76.0181 243.065 li
@
74.6978 240.606 mo
63.9575 234.786 li
@
63.1782 234.126 mo
53.0981 221.706 li
@
62.9985 236.226 mo
52.4985 223.386 li
@
51.8384 222.306 mo
43.3179 204.187 li
@
52.438 220.626 mo
44.2183 203.226 li
@
42.8384 202.866 mo
37.2583 181.687 li
@
43.7388 201.906 mo
38.3979 181.565 li
@
36.9575 180.246 mo
35.0376 158.586 li
@
38.1587 180.065 mo
36.2983 159.246 li
@
36.2983 157.866 mo
38.1587 139.086 li
@
35.0376 157.206 mo
37.0181 137.646 li
@
38.3979 137.886 mo
43.7388 123.366 li
@
37.2583 136.446 mo
42.8384 121.386 li
@
44.2778 122.586 mo
52.438 114.126 li
@
.54 lw
233.038 36.0059 mo
240.718 28.0859 li
0 0 0 .703 cmyk
@
278.638 21.0059 mo
291.479 28.0264 li
311.817 52.9863 li
@
.06 lw
291.357 29.2256 mo
311.458 53.9463 li
@
291.237 30.4258 mo
311.099 54.8457 li
@
291.118 31.626 mo
310.799 55.7461 li
@
290.999 32.8262 mo
310.438 56.7061 li
@
290.878 34.0264 mo
310.078 57.6064 li
@
290.758 35.2256 mo
309.718 58.5664 li
@
290.638 36.4258 mo
309.419 59.4658 li
@
290.519 37.626 mo
309.058 60.3662 li
@
290.458 38.8262 mo
308.698 61.3262 li
@
290.338 40.0264 mo
308.397 62.2266 li
@
290.218 41.2266 mo
308.038 63.1865 li
@
290.099 42.4258 mo
307.679 64.0859 li
@
289.979 43.626 mo
307.378 64.9863 li
@
289.857 44.8262 mo
307.019 65.9463 li
@
289.737 46.0264 mo
306.658 66.8457 li
@
289.618 47.2266 mo
306.299 67.8066 li
@
289.499 48.4258 mo
305.999 68.7061 li
@
289.378 49.626 mo
305.638 69.6064 li
@
289.258 50.8262 mo
305.278 70.5664 li
@
289.138 52.0264 mo
304.979 71.4658 li
@
289.019 53.2266 mo
304.618 72.4258 li
@
288.897 54.4258 mo
304.258 73.3262 li
@
288.778 55.626 mo
303.958 74.2266 li
@
288.658 56.8262 mo
303.599 75.1865 li
@
288.538 58.0264 mo
303.239 76.0859 li
@
288.419 59.2266 mo
302.878 77.0459 li
@
288.299 60.4268 mo
302.578 77.9463 li
@
288.179 61.626 mo
302.218 78.8467 li
@
288.058 62.8262 mo
301.857 79.8066 li
@
287.938 64.0264 mo
301.558 80.7061 li
@
287.817 65.2266 mo
301.199 81.666 li
@
287.699 66.4268 mo
300.838 82.5664 li
@
287.578 67.626 mo
300.538 83.4668 li
@
287.458 68.8262 mo
300.179 84.4268 li
@
287.338 69.9668 mo
299.817 85.3262 li
@
287.218 71.166 mo
299.458 86.2861 li
@
287.099 72.3662 mo
299.158 87.1865 li
@
286.979 73.5664 mo
298.799 88.1465 li
@
286.857 74.7666 mo
298.438 89.0469 li
@
286.739 75.9668 mo
298.138 89.9463 li
@
286.618 77.166 mo
297.778 90.9063 li
@
.54 lw
311.817 52.9863 mo
328.378 88.0859 li
339.179 129.066 li
342.838 170.406 li
@
219.299 94.626 mo
222.237 65.166 li
233.038 36.0059 li
@
270.179 97.2061 mo
277.019 96.2461 li
284.338 100.266 li
@
270.179 97.2061 mo
269.397 97.9863 li
@
284.338 100.206 mo
291.179 108.666 li
296.758 120.546 li
300.419 134.406 li
@
283.979 177.666 mo
284.338 177.847 li
291.179 176.946 li
296.758 171.187 li
300.419 161.347 li
301.679 148.566 li
300.419 134.406 li
@
297.419 91.8057 mo
306.357 110.706 li
312.179 132.786 li
314.218 155.406 li
312.479 173.046 li
@
263.817 182.166 mo
263.519 181.506 li
@
248.878 101.706 mo
249.179 98.3457 li
@
249.179 98.4063 mo
254.999 82.626 li
263.938 73.4463 li
274.857 72.0059 li
286.499 78.3662 li
297.419 91.8057 li
@
.06 lw
286.378 79.5664 mo
297.058 92.7656 li
@
286.258 80.7656 mo
296.758 93.666 li
@
286.138 81.9658 mo
296.397 94.626 li
@
286.019 83.2256 mo
296.038 95.5859 li
@
285.897 84.4258 mo
295.679 96.4863 li
@
285.778 85.626 mo
295.378 97.4463 li
@
285.657 86.8262 mo
295.019 98.3457 li
@
285.538 88.0859 mo
294.658 99.3057 li
@
285.419 89.2861 mo
294.299 100.206 li
@
285.299 90.4863 mo
293.999 101.166 li
@
285.179 91.6865 mo
293.638 102.126 li
@
285.058 92.9463 mo
293.278 103.026 li
@
284.938 94.1465 mo
292.919 103.986 li
@
284.817 95.3457 mo
292.558 104.886 li
@
284.698 96.5459 mo
292.258 105.847 li
@
284.578 97.7461 mo
291.897 106.807 li
@
284.458 99.0059 mo
291.538 107.706 li
@
.54 lw
251.458 26.1064 mo
270.179 97.2061 li
@
277.019 96.2461 mo
270.419 22.5664 li
@
291.479 28.0264 mo
284.338 100.266 li
@
311.817 52.9863 mo
291.179 108.666 li
@
233.038 36.0059 mo
262.799 99.126 li
@
222.237 65.166 mo
251.519 101.226 li
@
264.299 181.326 mo
263.999 182.106 li
@
276.538 179.046 mo
276.479 179.767 li
@
284.338 177.846 mo
284.397 178.326 li
@
291.179 176.946 mo
291.237 177.006 li
@
296.758 171.187 mo
298.857 175.565 li
@
300.419 161.346 mo
310.258 173.466 li
@
301.679 148.566 mo
337.799 168.306 li
@
300.419 134.406 mo
339.179 129.066 li
@
296.758 120.546 mo
328.378 88.0859 li
@
.12 lw
127.079 55.626 mo
127.138 55.626 li
127.258 55.5664 li
127.378 55.3262 li
127.378 55.1465 li
127.438 54.9658 li
127.438 54.7861 li
127.378 54.6064 li
127.378 54.3662 li
127.258 54.0059 li
127.138 53.8857 li
127.079 53.7061 li
126.958 53.6465 li
126.838 53.5859 li
126.778 53.5264 li
126.659 53.5264 li
0 0 0 .887 cmyk
@
116.159 85.2061 mo
116.218 85.1455 li
116.338 85.0859 li
116.55 84.7305 116.429 84.75 116.458 84.3057 cv
116.458 84.126 li
116.398 83.9463 li
116.398 83.7061 li
116.278 83.5264 li
116.159 83.2861 li
116.038 83.166 li
115.918 83.1064 li
115.858 83.0459 li
115.739 83.0459 li
@
238.438 191.767 mo
238.499 191.586 li
238.499 191.166 li
238.258 190.446 li
238.138 190.326 li
238.078 190.206 li
237.839 190.086 li
237.778 190.086 li
237.657 190.146 li
237.313 190.528 237.372 191.136 237.538 191.586 cv
237.599 191.767 li
237.718 191.886 li
@
172.079 118.026 mo
172.079 117.486 li
172.018 117.246 li
171.958 117.066 li
171.838 116.886 li
171.778 116.766 li
171.659 116.646 li
171.538 116.586 li
171.478 116.526 li
171.358 116.526 li
@
178.798 122.466 mo
178.858 122.466 li
179.383 122.025 178.982 120.375 178.438 120.366 cv
178.377 120.366 li
@
185.338 130.566 mo
185.458 130.506 li
185.518 130.446 li
185.723 130.039 185.702 130.126 185.698 129.666 cv
185.698 129.486 li
185.638 129.306 li
185.534 129 185.462 128.621 185.159 128.466 cv
185.038 128.406 li
184.978 128.406 li
@
190.739 141.966 mo
190.858 141.906 li
191.333 141.444 191.089 140.063 190.438 139.806 cv
190.377 139.806 li
@
194.278 155.226 mo
194.338 155.226 li
194.458 155.166 li
194.67 154.81 194.549 154.83 194.579 154.386 cv
194.579 154.206 li
194.518 153.966 li
194.518 153.786 li
194.398 153.606 li
194.338 153.485 li
194.278 153.306 li
194.159 153.246 li
194.038 153.187 li
193.978 153.126 li
193.858 153.126 li
@
195.478 168.906 mo
195.538 168.847 li
195.659 168.786 li
195.778 168.546 li
195.778 168.366 li
195.838 168.187 li
195.838 168.006 li
195.778 167.826 li
195.778 167.646 li
195.659 167.286 li
195.538 167.106 li
195.478 166.985 li
195.358 166.866 li
195.239 166.806 li
195.178 166.746 li
195.058 166.746 li
@
194.218 181.146 mo
194.338 181.086 li
194.8 180.63 194.512 179.233 193.918 178.985 cv
193.798 178.985 li
@
190.678 190.565 mo
190.798 190.506 li
191.293 190.04 190.985 188.644 190.377 188.406 cv
190.319 188.406 li
@
185.338 196.026 mo
185.398 195.966 li
185.518 195.906 li
185.579 195.786 li
185.638 195.606 li
185.638 194.826 li
185.579 194.646 li
@
.24 lw
39.478 62.1064 mo
58.3784 59.5264 li
62.8784 109.926 li
@
52.4985 111.306 mo
39.478 62.1064 li
@
59.2778 59.7061 mo
79.3188 70.626 li
74.7583 116.106 li
@
63.7778 110.106 mo
59.2778 59.7061 li
@
23.3979 78.2461 mo
43.3188 120.426 li
@
22.8579 79.2061 mo
12.8384 106.326 li
37.1978 136.266 li
@
42.7183 121.386 mo
22.8579 79.2061 li
@
63.1177 112.566 mo
53.2183 113.946 li
58.4985 134.106 li
@
65.8784 133.386 mo
64.0181 112.746 li
@
94.2583 149.886 mo
86.1587 132.786 li
@
75.7183 116.886 mo
80.2183 71.4063 li
@
98.9985 94.5664 mo
86.0386 129.666 li
@
9.05811 142.806 mo
34.979 156.966 li
@
34.978 158.706 mo
9.05811 144.546 li
@
12.8989 182.405 mo
36.3579 179.226 li
@
12.8384 185.166 mo
22.8579 223.206 li
@
39.0581 182.346 mo
48.2983 181.086 li
@
53.2183 221.706 mo
63.1177 233.886 li
@
62.3384 236.586 mo
52.7388 224.826 li
@
79.9185 219.905 mo
84.8384 238.565 li
@
90.1177 203.046 mo
86.6382 212.286 li
@
95.8188 231.786 mo
115.739 273.966 li
125.698 246.847 li
@
115.138 274.926 mo
95.2778 232.746 li
@
98.9985 291.126 mo
86.0376 241.866 li
@
59.8784 60.9658 mo
78.7183 71.2861 li
74.3989 114.966 li
@
64.1978 109.386 mo
59.8784 60.9658 li
@
62.3384 109.026 mo
57.9585 60.5459 li
40.3188 62.9463 li
@
51.7183 111.726 mo
38.7583 62.4658 li
@
51.1177 111.186 mo
38.6382 63.8457 li
@
52.7388 110.286 mo
40.3188 62.9463 li
@
38.7583 62.4658 mo
23.3989 78.2461 li
@
38.6382 63.8457 mo
24.1782 78.666 li
43.3188 119.226 li
@
42.1177 121.206 mo
23.0386 80.7061 li
13.5581 106.206 li
37.0181 135.006 li
@
12.5376 107.706 mo
36.8989 137.646 li
@
12.8989 109.206 mo
36.3579 138.006 li
@
12.5376 107.706 mo
9.05811 142.806 li
@
12.8989 109.206 mo
9.65869 142.206 li
@
9.05811 144.546 mo
12.5376 183.426 li
@
12.8989 182.405 mo
9.65869 145.746 li
34.5581 159.366 li
@
34.5581 155.826 mo
9.65869 142.206 li
@
36.8989 180.126 mo
12.5376 183.426 li
@
37.2583 181.866 mo
12.8384 185.166 li
@
22.978 221.826 mo
13.5581 186.065 li
37.0181 182.826 li
@
22.978 221.826 mo
42.1177 202.206 li
@
23.4575 224.767 mo
43.3188 204.366 li
@
22.8579 223.206 mo
42.7778 202.806 li
@
24.2388 225.246 mo
43.3188 205.565 li
@
23.4575 224.767 mo
38.8188 257.346 li
@
24.2388 225.246 mo
38.6382 255.846 li
@
51.7778 222.306 mo
38.8188 257.346 li
@
52.7388 224.826 mo
40.3188 258.485 li
@
52.5581 223.565 mo
39.5376 258.606 li
@
51.1177 222.126 mo
38.6382 255.846 li
@
40.3188 258.485 mo
58.0181 280.267 li
@
39.5376 258.606 mo
58.3784 281.767 li
@
58.0181 280.267 mo
62.3384 236.586 li
@
58.3784 281.767 mo
62.8784 236.286 li
@
59.2778 282.546 mo
63.7778 237.065 li
@
59.8784 281.946 mo
64.1978 238.206 li
@
59.2778 282.546 mo
79.3188 293.466 li
@
59.8784 281.946 mo
78.7183 292.206 li
74.3979 243.786 li
@
80.5786 292.626 mo
76.2583 244.206 li
@
80.2183 293.706 mo
75.7183 243.246 li
@
79.3188 293.466 mo
74.8188 243.065 li
@
80.2183 293.706 mo
98.9985 291.126 li
@
80.5786 292.626 mo
98.2778 290.226 li
85.7983 242.886 li
@
99.9575 289.386 mo
87.478 242.046 li
@
99.8384 290.706 mo
86.8188 241.446 li
@
99.9575 289.386 mo
114.418 274.506 li
@
99.8384 290.706 mo
115.138 274.926 li
@
114.418 274.506 mo
95.2778 234.006 li
@
96.478 231.966 mo
115.558 272.466 li
125.038 246.966 li
101.579 218.166 li
@
125.698 243.966 mo
102.239 215.166 li
@
126.058 245.466 mo
101.698 215.526 li
@
125.698 246.846 mo
101.338 216.905 li
@
129.538 210.366 mo
126.058 245.466 li
@
128.938 210.966 mo
125.698 243.966 li
@
125.638 170.826 mo
128.938 207.366 li
@
126.058 169.746 mo
129.538 208.687 li
@
128.938 207.366 mo
104.038 193.746 li
@
129.538 208.687 mo
103.558 194.466 li
@
129.538 210.366 mo
103.558 196.206 li
@
128.938 210.966 mo
104.038 197.346 li
@
115.739 129.966 mo
125.758 168.006 li
@
115.618 131.346 mo
125.038 167.106 li
101.579 170.286 li
@
125.758 168.006 mo
101.338 171.366 li
@
126.058 169.746 mo
101.698 173.106 li
@
125.638 170.826 mo
102.239 174.006 li
@
114.358 127.986 mo
99.8989 97.3262 li
@
99.7778 95.7656 mo
115.198 128.346 li
95.2778 148.806 li
@
95.2778 147.546 mo
114.358 127.986 li
@
95.8188 150.426 mo
115.739 129.966 li
@
96.478 150.966 mo
115.618 131.346 li
@
80.2183 71.4063 mo
98.9985 94.5664 li
@
80.5786 72.9063 mo
98.2778 94.626 li
85.7983 128.346 li
@
99.8979 97.3262 mo
87.478 131.046 li
@
99.7778 95.7656 mo
86.8188 130.866 li
@
76.2583 116.586 mo
80.5786 72.9063 li
@
62.3384 109.026 mo
52.7388 110.286 li
@
62.8774 109.926 mo
52.4985 111.306 li
@
62.8179 113.346 mo
53.7583 114.606 li
58.6782 133.326 li
@
43.3179 119.226 mo
51.1177 111.186 li
@
43.3179 120.426 mo
51.7183 111.726 li
@
37.0181 135.006 mo
42.1177 121.206 li
@
37.1978 136.266 mo
42.7183 121.386 li
@
34.5581 155.826 mo
36.3579 138.006 li
@
34.978 156.966 mo
36.8979 137.646 li
@
36.3579 179.226 mo
34.5581 159.366 li
@
36.8979 180.126 mo
34.978 158.706 li
@
42.1177 202.206 mo
37.0181 182.826 li
@
42.7778 202.806 mo
37.2583 181.866 li
@
38.5181 181.626 mo
48.478 180.306 li
@
43.8579 200.646 mo
39.0581 182.347 li
@
43.7974 201.666 mo
38.5181 181.626 li
@
51.7778 222.306 mo
43.3179 204.366 li
@
51.1177 222.126 mo
43.3179 205.565 li
@
62.8774 236.286 mo
52.5581 223.565 li
@
74.8179 243.065 mo
63.7778 237.065 li
@
74.3979 243.786 mo
64.1978 238.206 li
@
86.0376 241.866 mo
75.7183 243.246 li
@
85.7983 242.886 mo
76.2583 244.206 li
@
95.2778 232.746 mo
86.8179 241.446 li
@
95.2778 234.006 mo
87.478 242.046 li
@
94.7983 229.565 mo
100.079 215.286 li
@
94.6782 228.426 mo
99.5376 215.347 li
@
86.6382 212.286 mo
94.7983 229.565 li
@
87.1177 212.347 mo
94.6782 228.426 li
@
101.579 218.166 mo
96.478 231.966 li
@
101.338 216.906 mo
95.8188 231.786 li
@
102.239 215.166 mo
104.038 197.347 li
@
101.698 215.526 mo
103.558 196.206 li
@
104.038 193.746 mo
102.239 174.006 li
@
103.558 194.466 mo
101.698 173.106 li
@
101.579 170.286 mo
96.478 150.966 li
@
101.338 171.366 mo
95.8188 150.427 li
@
86.8188 130.866 mo
95.2778 148.806 li
@
87.478 131.046 mo
95.2778 147.546 li
@
86.0376 129.666 mo
75.7183 116.886 li
@
85.7983 128.346 mo
76.2583 116.586 li
@
74.7583 116.106 mo
63.7778 110.106 li
@
74.3989 114.966 mo
64.1978 109.386 li
@
64.0181 112.746 mo
74.5786 118.506 li
@
64.438 113.706 mo
74.0981 118.986 li
@
63.1177 112.566 mo
64.978 133.206 li
@
62.8188 113.346 mo
64.5581 132.546 li
@
66.1782 132.846 mo
64.438 113.706 li
@
74.0981 118.986 mo
72.4185 136.206 li
@
75.478 119.286 mo
73.6177 137.946 li
@
75.7183 120.366 mo
74.0376 137.706 li
@
74.5786 118.506 mo
72.7183 137.106 li
@
75.478 119.286 mo
85.3784 131.466 li
@
75.7183 120.366 mo
84.8384 131.526 li
@
85.3784 131.466 mo
80.0376 145.806 li
@
84.8384 131.526 mo
79.8579 144.846 li
@
86.1587 132.786 mo
80.8188 147.066 li
@
81.2983 147.186 mo
86.2183 133.866 li
93.6587 149.586 li
86.0981 157.326 li
@
86.0981 158.226 mo
94.2583 149.886 li
@
94.7983 151.506 mo
100.079 171.485 li
@
94.7388 152.466 mo
99.5376 170.826 li
@
86.6382 159.847 mo
94.7983 151.506 li
@
87.1177 160.267 mo
94.7388 152.466 li
@
100.079 171.485 mo
90.1177 172.866 li
@
99.5376 170.826 mo
90.2983 172.086 li
@
90.4185 174.606 mo
100.378 173.226 li
@
90.8384 175.326 mo
100.138 174.006 li
@
100.378 173.226 mo
102.239 193.746 li
@
100.138 174.006 mo
101.819 192.847 li
@
102.239 193.746 mo
91.5581 187.926 li
@
101.819 192.847 mo
91.9185 187.386 li
@
102.178 195.426 mo
91.6177 189.606 li
@
101.758 195.847 mo
91.9185 190.446 li
@
100.378 213.905 mo
102.178 195.426 li
@
100.079 212.826 mo
101.758 195.847 li
@
90.3579 201.606 mo
100.378 213.905 li
@
90.7778 201.366 mo
100.079 212.826 li
@
100.079 215.286 mo
90.1177 203.046 li
@
99.5376 215.347 mo
90.2388 204.006 li
@
86.0981 213.306 mo
94.2583 230.526 li
@
86.0981 214.206 mo
93.6587 230.226 li
@
94.2583 230.526 mo
86.1587 238.866 li
@
93.6587 230.226 mo
86.2778 237.847 li
81.2983 219.006 li
@
86.1587 238.866 mo
80.8188 218.646 li
@
80.0981 219.126 mo
85.3784 239.226 li
75.4185 240.606 li
@
84.8384 238.565 mo
75.7778 239.826 li
@
75.4185 240.606 mo
73.6177 219.966 li
@
75.7778 239.826 mo
74.0376 220.626 li
@
74.5786 240.426 mo
64.0181 234.666 li
@
74.0981 239.526 mo
64.438 234.187 li
@
72.7183 219.786 mo
74.5786 240.426 li
@
72.4185 220.326 mo
74.0981 239.526 li
@
64.0181 234.666 mo
65.8784 216.065 li
@
64.438 234.187 mo
66.1782 216.905 li
@
63.1177 233.886 mo
64.978 215.286 li
@
53.7583 221.646 mo
62.8188 232.806 li
64.5581 215.526 li
@
58.4985 207.366 mo
53.2183 221.706 li
@
58.6782 208.326 mo
53.7583 221.646 li
@
44.3384 203.286 mo
52.438 220.446 li
@
44.938 203.586 mo
52.3188 219.306 li
@
52.438 220.446 mo
57.7778 206.106 li
@
52.3188 219.306 mo
57.2983 205.985 li
@
52.4985 194.946 mo
44.3384 203.286 li
@
52.4985 195.847 mo
44.938 203.586 li
@
51.8979 193.326 mo
43.7983 201.666 li
@
51.4185 192.905 mo
43.8579 200.646 li
@
36.3579 159.426 mo
38.2183 179.946 li
@
36.7778 160.326 mo
38.4585 179.166 li
@
38.2183 179.946 mo
48.1782 178.565 li
@
38.4575 179.166 mo
47.7583 177.905 li
@
46.978 165.187 mo
36.3579 159.426 li
@
46.6782 165.726 mo
36.7778 160.326 li
@
38.2183 139.266 mo
36.3579 157.746 li
@
38.4575 140.346 mo
36.7778 157.326 li
@
36.3579 157.746 mo
47.0376 163.565 li
@
36.7778 157.326 mo
46.6782 162.726 li
@
48.1782 151.565 mo
38.2183 139.266 li
@
47.7583 151.746 mo
38.4585 140.346 li
@
38.5181 137.826 mo
48.478 150.126 li
@
39.0581 137.766 mo
48.2983 149.166 li
@
43.7983 123.605 mo
38.5181 137.826 li
@
43.8579 124.746 mo
39.0581 137.766 li
@
51.8979 140.826 mo
43.7983 123.605 li
@
51.4185 140.766 mo
43.8579 124.746 li
@
52.4985 139.866 mo
44.3384 122.646 li
@
52.4985 138.966 mo
44.938 122.946 li
@
44.3384 122.646 mo
52.438 114.306 li
@
44.938 122.946 mo
52.3188 115.326 li
@
52.438 114.306 mo
57.7183 134.466 li
@
52.3188 115.326 mo
57.2388 134.046 li
@
47.7583 151.746 mo
46.6782 162.726 li
@
48.1782 151.565 mo
47.0376 163.565 li
@
48.478 150.126 mo
51.8989 140.826 li
@
48.2983 149.166 mo
51.4185 140.766 li
@
57.7183 134.466 mo
52.4985 139.866 li
@
57.2388 134.046 mo
52.4985 138.966 li
@
64.978 133.206 mo
58.4985 134.105 li
@
64.5581 132.546 mo
58.6782 133.326 li
@
72.4185 136.206 mo
66.1782 132.846 li
@
72.7183 137.105 mo
65.8784 133.386 li
@
80.0376 145.806 mo
73.6177 137.946 li
@
79.8579 144.846 mo
74.0376 137.706 li
@
80.8188 147.065 mo
86.0981 158.226 li
@
81.2983 147.186 mo
86.0981 157.325 li
@
90.1177 172.866 mo
86.6382 159.846 li
@
90.2983 172.086 mo
87.1177 160.266 li
@
91.5581 187.926 mo
90.4185 174.606 li
@
91.9185 187.386 mo
90.8384 175.325 li
@
91.6177 189.606 mo
90.3579 201.606 li
@
91.9185 190.446 mo
90.7778 201.366 li
@
90.2388 204.006 mo
87.1177 212.346 li
@
80.8188 218.646 mo
86.0981 213.306 li
@
81.2983 219.006 mo
86.0981 214.206 li
@
73.6177 219.966 mo
80.0981 219.126 li
@
74.0376 220.626 mo
79.9185 219.905 li
@
65.8784 216.065 mo
72.7183 219.786 li
@
66.1782 216.905 mo
72.4185 220.325 li
@
64.978 215.286 mo
58.4985 207.366 li
@
64.5581 215.526 mo
58.6782 208.325 li
@
57.7778 206.106 mo
52.4985 194.946 li
@
57.2983 205.985 mo
52.4985 195.846 li
@
48.478 180.306 mo
51.8989 193.325 li
@
48.2983 181.086 mo
51.4185 192.905 li
@
48.1782 178.565 mo
46.978 165.187 li
@
47.7583 177.905 mo
46.6782 165.726 li
@
43.0786 73.5059 mo
58.9185 71.3457 li
@
43.2583 74.2861 mo
59.0376 72.126 li
@
46.3784 86.166 mo
60.1177 84.3057 li
@
46.6177 86.9463 mo
60.1782 85.0859 li
@
49.7388 98.7656 mo
61.2583 97.2061 li
@
49.9185 99.5459 mo
61.3188 97.9863 li
@
56.2183 124.026 mo
63.6587 123.006 li
@
60.8384 71.7656 mo
77.7583 81.0059 li
@
60.8979 72.5459 mo
77.6978 81.7256 li
@
61.978 84.666 mo
76.5581 92.7061 li
@
62.0376 85.4463 mo
76.4985 93.3662 li
@
63.1177 97.626 mo
75.4185 104.346 li
@
63.2388 98.4063 mo
75.3579 105.006 li
@
65.3384 123.366 mo
73.2583 127.686 li
@
65.2778 123.126 mo
73.2583 127.506 li
@
79.6177 82.626 mo
95.5181 102.186 li
@
79.5581 83.2861 mo
95.3384 102.666 li
@
78.478 94.3262 mo
92.1587 111.186 li
@
78.3579 95.0459 mo
91.978 111.726 li
@
77.2778 105.966 mo
88.8579 120.186 li
@
77.2183 106.686 mo
88.6177 120.726 li
@
74.8784 129.065 mo
82.3188 138.246 li
@
74.8784 128.946 mo
82.3784 138.126 li
@
110.098 132.306 mo
97.1382 104.826 li
@
109.798 132.605 mo
96.9575 105.366 li
@
104.999 137.586 mo
93.8384 113.826 li
@
104.698 137.886 mo
93.5981 114.366 li
@
99.8979 142.806 mo
90.478 122.826 li
@
99.5981 143.105 mo
90.2983 123.366 li
@
89.8188 153.485 mo
83.7583 140.586 li
@
89.938 153.426 mo
83.8188 140.466 li
@
111.358 135.726 mo
119.819 167.825 li
@
111.058 136.025 mo
119.398 167.886 li
@
106.258 140.946 mo
113.518 168.666 li
@
105.898 141.306 mo
113.159 168.726 li
@
101.159 146.226 mo
107.278 169.506 li
@
100.858 146.525 mo
106.918 169.565 li
@
90.8979 156.426 mo
94.8579 171.485 li
@
90.9575 156.306 mo
94.978 171.485 li
@
120.418 171.485 mo
123.358 204.366 li
@
120.058 171.546 mo
122.999 204.126 li
@
114.178 172.386 mo
116.698 200.706 li
@
113.819 172.446 mo
116.278 200.466 li
@
107.938 173.226 mo
110.038 197.046 li
@
107.579 173.286 mo
109.678 196.866 li
@
95.3989 174.666 mo
96.7778 190.086 li
@
95.5181 174.666 mo
96.8989 190.146 li
@
123.358 207.905 mo
120.418 237.546 li
@
122.999 207.726 mo
120.058 237.065 li
@
116.698 204.246 mo
114.178 229.806 li
@
116.338 204.065 mo
113.819 229.386 li
@
110.038 200.646 mo
107.938 222.126 li
@
109.678 200.405 mo
107.579 221.706 li
@
96.7778 193.146 mo
95.3989 207.065 li
@
96.8989 193.206 mo
95.5181 207.187 li
@
111.358 263.405 mo
119.819 240.546 li
@
111.058 262.806 mo
119.399 240.065 li
@
106.198 252.546 mo
113.518 232.806 li
@
105.899 251.946 mo
113.159 232.386 li
@
101.159 241.806 mo
107.278 225.187 li
@
100.858 241.146 mo
106.918 224.706 li
@
90.8989 220.386 mo
94.8579 209.646 li
@
90.9585 220.506 mo
94.9185 209.766 li
@
97.1382 278.766 mo
110.159 265.446 li
@
96.9585 278.046 mo
109.858 264.786 li
@
93.8384 266.166 mo
104.999 254.646 li
@
93.5981 265.386 mo
104.698 253.985 li
@
90.479 253.506 mo
99.8989 243.786 li
@
90.2983 252.786 mo
99.5981 243.187 li
@
83.7583 228.366 mo
89.8188 222.187 li
@
83.8188 228.606 mo
89.938 222.306 li
@
79.6177 281.825 mo
95.5181 279.666 li
@
79.5581 281.046 mo
95.2778 278.886 li
@
78.479 268.866 mo
92.1587 267.006 li
@
78.4185 268.086 mo
91.979 266.226 li
@
77.3384 255.966 mo
88.8579 254.405 li
@
77.2778 255.187 mo
88.6782 253.626 li
@
74.8784 230.166 mo
82.3188 229.146 li
@
74.938 230.346 mo
82.3784 229.325 li
@
60.8384 272.166 mo
77.7583 281.405 li
@
60.8989 271.506 mo
77.6978 280.687 li
@
61.979 260.526 mo
76.6177 268.446 li
@
62.0981 259.806 mo
76.4985 267.666 li
@
63.1782 248.825 mo
75.4185 255.546 li
@
63.2388 248.166 mo
75.3579 254.766 li
@
65.3384 225.485 mo
73.2583 229.806 li
@
65.2778 225.666 mo
73.2583 229.985 li
@
43.0786 250.985 mo
58.979 270.546 li
@
43.2583 250.446 mo
59.0386 269.825 li
@
46.3784 241.985 mo
60.1177 258.846 li
@
46.6177 241.446 mo
60.1782 258.126 li
@
49.7388 232.985 mo
61.2583 247.206 li
@
49.9185 232.446 mo
61.3784 246.485 li
@
56.2778 214.926 mo
63.7183 224.106 li
@
56.2183 215.046 mo
63.7183 224.226 li
@
48.7183 199.687 mo
54.8384 212.586 li
@
48.6587 199.745 mo
54.7778 212.706 li
@
38.938 210.065 mo
48.2983 229.806 li
@
38.6382 210.366 mo
48.1177 230.346 li
@
33.8989 215.286 mo
44.9985 238.745 li
@
33.5386 215.586 mo
44.7583 239.346 li
@
28.7983 220.506 mo
41.6382 247.806 li
@
28.4985 220.866 mo
41.4585 248.286 li
@
18.7778 185.346 mo
27.2388 217.446 li
@
19.1382 185.286 mo
27.5386 217.146 li
@
25.0181 184.506 mo
32.3384 212.226 li
@
25.438 184.446 mo
32.6382 211.926 li
@
31.3188 183.606 mo
37.438 207.006 li
@
31.6782 183.606 mo
37.7388 206.646 li
@
43.7388 181.746 mo
47.6978 196.746 li
@
43.6177 181.746 mo
47.6382 196.806 li
@
15.1782 148.806 mo
18.1177 181.687 li
@
15.5981 149.046 mo
18.5386 181.626 li
@
21.8989 152.466 mo
24.4185 180.846 li
@
22.2583 152.706 mo
24.7778 180.786 li
@
28.4985 156.066 mo
30.6587 179.946 li
@
28.9185 156.306 mo
31.0181 179.946 li
@
41.7583 163.086 mo
43.1382 178.506 li
@
41.6978 163.026 mo
43.0786 178.506 li
@
18.1177 115.626 mo
15.1782 145.266 li
@
18.478 116.046 mo
15.5981 145.446 li
@
24.4185 123.306 mo
21.8989 148.926 li
@
24.7778 123.786 mo
22.2583 149.105 li
@
30.6587 130.986 mo
28.4985 152.526 li
@
31.0181 131.466 mo
28.9185 152.706 li
@
43.1382 146.105 mo
41.7583 160.026 li
@
43.0786 145.986 mo
41.6978 159.966 li
@
27.2388 89.7061 mo
18.7778 112.565 li
@
27.5981 90.3662 mo
19.1978 113.046 li
@
32.3979 100.565 mo
25.0786 120.306 li
@
32.6978 101.226 mo
25.438 120.786 li
@
37.438 111.366 mo
31.3188 127.986 li
@
37.7388 112.026 mo
31.6782 128.466 li
@
47.6978 132.786 mo
43.7388 143.526 li
@
47.6382 132.606 mo
43.6177 143.406 li
@
41.4575 74.4063 mo
28.438 87.7256 li
@
41.6382 75.1855 mo
28.7388 88.3857 li
@
44.7583 87.0664 mo
33.5376 98.5264 li
@
44.938 87.8457 mo
33.8979 99.1855 li
@
48.0581 99.666 mo
38.6382 109.326 li
@
48.2983 100.446 mo
38.938 109.986 li
@
54.8384 124.806 mo
48.7778 130.986 li
@
54.7778 124.626 mo
48.6587 130.866 li
@
56.2183 123.846 mo
63.6587 122.826 li
@
.36 lw
71.3384 47.2256 mo
280.679 7.98633 li
0 0 0 1 cmyk
@
73.3179 48.3057 mo
280.679 9.48633 li
@
80.938 53.7061 mo
280.679 16.2656 li
@
81.8979 54.4863 mo
280.679 17.2861 li
@
305.758 270.726 mo
308.698 270.246 li
311.578 269.466 li
314.397 268.446 li
330.522 261.556 339.96 242.592 344.638 226.687 cv
345.958 222.065 li
347.099 217.206 li
352.963 191.321 352.44 163.101 348.838 136.926 cv
347.878 130.746 li
346.799 124.626 li
345.599 118.506 li
344.218 112.446 li
338.237 86.707 328.309 60.25 313.618 38.166 cv
310.737 34.0859 li
307.857 30.2461 li
297.438 16.9756 282.375 2.94824 264.538 2.22559 cv
261.538 2.28613 li
258.538 2.58594 li
255.657 3.24609 li
@
140.098 213.726 mo
140.038 207.905 li
139.858 202.026 li
138.489 174.084 132.814 145.834 123.118 119.586 cv
121.018 114.186 li
118.858 108.906 li
109.868 87.917 96.2759 64.7529 77.5181 51.0664 cv
74.4575 49.0264 li
71.3384 47.2256 li
@
140.098 213.726 mo
349.499 174.485 li
@
140.098 213.126 mo
348.718 174.065 li
@
140.098 210.546 mo
345.058 172.206 li
@
140.098 210.187 mo
344.519 171.905 li
@
.12 lw
206.697 72.8457 mo
206.818 72.8457 li
206.879 72.7861 li
207.234 72.3047 207.039 70.9863 206.459 70.7461 cv
206.277 70.7461 li
206.158 70.8057 li
205.986 70.9971 205.958 71.2773 205.979 71.5264 cv
205.979 71.7656 li
206.038 71.9463 li
206.148 72.209 206.166 72.5313 206.398 72.7256 cv
206.518 72.8457 li
206.697 72.8457 li
cp
0 0 0 .887 cmyk
@
223.438 108.366 mo
223.558 108.306 li
223.618 108.246 li
223.737 108.006 li
223.799 107.826 li
223.799 107.466 li
223.737 107.226 li
223.737 107.046 li
223.647 106.757 223.476 106.514 223.317 106.266 cv
223.198 106.206 li
223.019 106.206 li
222.475 106.448 222.678 108.131 223.258 108.306 cv
223.317 108.366 li
223.438 108.366 li
cp
@
234.357 149.766 mo
234.479 149.766 li
234.538 149.706 li
234.868 149.085 234.71 148.063 234.118 147.666 cv
233.938 147.666 li
233.817 147.726 li
233.599 148.201 233.638 147.902 233.638 148.446 cv
233.638 148.866 li
233.758 149.226 li
233.878 149.406 li
233.938 149.586 li
234.058 149.646 li
234.179 149.766 li
234.357 149.766 li
cp
@
291.897 27.8457 mo
292.019 27.7861 li
292.446 27.3447 292.236 25.9902 291.657 25.7461 cv
291.538 25.6865 li
291.479 25.7461 li
291.357 25.8057 li
291.147 26.0078 291.174 26.2617 291.179 26.5264 cv
291.179 26.9463 li
291.299 27.3057 li
291.419 27.4863 li
291.479 27.6064 li
291.599 27.7256 li
291.718 27.7861 li
291.778 27.8457 li
291.897 27.8457 li
cp
@
312.419 53.1064 mo
312.479 53.0459 li
312.599 52.9863 li
312.966 52.4697 312.657 51.292 312.179 50.9463 cv
311.938 50.9463 li
311.481 51.5166 311.632 52.6553 312.237 53.0459 cv
312.299 53.1064 li
312.419 53.1064 li
cp
@
329.157 88.5664 mo
329.218 88.5059 li
329.338 88.4463 li
329.55 88.0898 329.429 88.1104 329.458 87.666 cv
329.458 87.4258 li
329.218 86.7061 li
329.099 86.5859 li
328.979 86.5264 li
328.919 86.4658 li
328.799 86.4063 li
328.679 86.4658 li
328.141 86.8633 328.421 88.3477 329.038 88.5664 cv
329.157 88.5664 li
cp
@
340.078 130.026 mo
340.138 129.966 li
340.258 129.906 li
340.378 129.666 li
340.378 128.886 li
340.317 128.706 li
340.111 128.183 340.294 128.288 339.897 127.926 cv
339.838 127.866 li
339.599 127.866 li
339.082 128.372 339.329 129.575 339.838 129.966 cv
339.958 130.026 li
340.078 130.026 li
cp
@
344.157 171.966 mo
344.218 171.786 li
344.196 171.254 344.083 170.562 343.558 170.286 cv
343.438 170.286 li
@
277.799 98.2861 mo
277.799 98.1064 li
277.77 97.6182 277.667 96.918 277.138 96.7256 cv
277.078 96.7256 li
@
284.458 102.666 mo
284.578 102.666 li
285.044 102.272 284.78 100.873 284.338 100.687 cv
284.278 100.566 li
284.099 100.566 li
@
291.058 110.766 mo
291.179 110.706 li
291.626 110.215 291.374 108.893 290.758 108.606 cv
290.638 108.606 li
@
296.458 122.106 mo
296.519 122.106 li
296.638 122.046 li
296.758 121.806 li
296.758 121.626 li
296.817 121.446 li
296.817 121.266 li
296.758 121.086 li
296.758 120.846 li
296.663 120.503 296.499 120.21 296.218 120.006 cv
296.038 120.006 li
@
299.938 135.426 mo
300.058 135.426 li
300.583 134.985 300.183 133.335 299.638 133.326 cv
299.578 133.326 li
@
301.198 149.106 mo
301.317 148.986 li
301.526 148.569 301.501 148.677 301.499 148.206 cv
301.499 148.026 li
301.438 147.846 li
301.361 147.536 301.247 147.164 300.958 147.006 cv
300.838 146.946 li
300.778 146.946 li
@
299.938 161.347 mo
299.999 161.286 li
300.118 161.226 li
300.324 160.886 300.21 160.864 300.237 160.446 cv
300.237 160.267 li
300.179 160.086 li
300.179 159.906 li
300.058 159.726 li
299.999 159.546 li
299.938 159.426 li
299.817 159.306 li
299.698 159.246 li
299.638 159.187 li
299.519 159.187 li
@
296.397 170.767 mo
296.458 170.706 li
296.578 170.646 li
296.698 170.406 li
296.698 170.226 li
296.758 170.046 li
296.758 169.866 li
296.698 169.687 li
296.698 169.506 li
296.578 169.146 li
296.458 168.966 li
296.397 168.847 li
296.278 168.726 li
296.157 168.666 li
296.099 168.606 li
295.979 168.606 li
@
290.999 176.166 mo
291.118 176.166 li
291.427 175.836 291.404 175.378 291.299 174.966 cv
291.237 174.786 li
@
161.638 118.026 mo
168.358 117.126 li
175.558 121.086 li
182.338 129.306 li
187.798 140.946 li
191.458 154.746 li
192.718 168.726 li
191.398 181.506 li
187.798 191.106 li
182.278 196.746 li
@
267.237 98.2861 mo
274.019 97.3262 li
281.218 101.286 li
287.999 109.506 li
293.458 121.146 li
297.118 134.946 li
298.317 148.926 li
297.058 161.706 li
293.458 171.366 li
287.938 176.946 li
@
158.579 118.626 mo
165.298 117.726 li
172.499 121.626 li
179.278 129.906 li
184.739 141.486 li
188.398 155.286 li
189.659 169.326 li
188.338 182.106 li
184.739 191.706 li
179.218 197.286 li
@
264.179 98.8262 mo
270.958 97.9258 li
278.158 101.826 li
284.878 110.106 li
290.397 121.687 li
294.058 135.486 li
295.258 149.526 li
293.999 162.306 li
290.397 171.906 li
284.878 177.485 li
@
155.518 119.226 mo
162.239 118.266 li
169.438 122.226 li
176.218 130.446 li
181.678 142.086 li
185.338 155.886 li
186.598 169.866 li
185.278 182.646 li
181.678 192.306 li
176.159 197.886 li
@
261.118 99.4258 mo
267.897 98.4658 li
275.099 102.426 li
281.817 110.646 li
287.338 122.286 li
290.999 136.086 li
292.198 150.065 li
290.938 162.847 li
287.338 172.506 li
281.817 178.086 li
@
152.398 119.766 mo
159.178 118.866 li
166.378 122.766 li
173.159 131.046 li
178.618 142.687 li
182.278 156.426 li
183.538 170.466 li
182.218 183.246 li
178.618 192.847 li
173.098 198.426 li
@
258.058 99.9658 mo
264.838 99.0664 li
272.038 103.026 li
278.758 111.246 li
284.278 122.886 li
287.938 136.687 li
289.138 150.666 li
287.878 163.446 li
284.218 173.046 li
278.758 178.626 li
@
149.338 120.366 mo
156.118 119.406 li
163.319 123.366 li
170.038 131.586 li
175.558 143.226 li
179.218 157.026 li
180.418 171.006 li
179.159 183.786 li
175.558 193.446 li
170.038 199.026 li
@
254.999 100.566 mo
261.718 99.666 li
268.979 103.566 li
275.698 111.786 li
281.218 123.426 li
284.878 137.226 li
286.078 151.206 li
284.817 163.985 li
281.158 173.646 li
275.638 179.226 li
@
146.278 120.906 mo
153.058 120.006 li
160.258 123.966 li
166.978 132.187 li
172.499 143.826 li
176.159 157.626 li
177.358 171.606 li
176.098 184.386 li
172.499 193.985 li
166.978 199.565 li
@
251.938 101.106 mo
258.658 100.206 li
265.919 104.166 li
272.638 112.386 li
278.158 124.026 li
281.817 137.826 li
283.019 151.806 li
281.698 164.586 li
278.099 174.187 li
272.578 179.767 li
@
143.218 121.506 mo
149.999 120.606 li
157.198 124.506 li
163.918 132.786 li
169.438 144.366 li
173.098 158.166 li
174.298 172.146 li
173.038 184.985 li
169.378 194.586 li
163.918 200.166 li
@
248.878 101.706 mo
255.599 100.806 li
262.857 104.706 li
269.578 112.986 li
275.099 124.566 li
278.698 138.366 li
279.958 152.347 li
278.638 165.187 li
275.038 174.786 li
269.519 180.366 li
@
140.159 122.046 mo
146.878 121.146 li
154.138 125.106 li
160.858 133.326 li
166.378 144.966 li
170.038 158.767 li
171.239 172.746 li
169.978 185.526 li
166.319 195.126 li
160.798 200.706 li
@
245.817 102.246 mo
252.538 101.346 li
259.799 105.306 li
266.519 113.526 li
272.038 125.166 li
275.638 138.966 li
276.897 152.946 li
275.578 165.726 li
271.979 175.326 li
266.458 180.966 li
@
137.098 122.646 mo
143.819 121.746 li
151.079 125.646 li
157.798 133.926 li
163.319 145.506 li
166.978 159.306 li
168.178 173.347 li
166.918 186.126 li
163.258 195.726 li
157.739 201.306 li
@
242.758 102.846 mo
249.479 101.946 li
256.737 105.846 li
263.458 114.126 li
268.979 125.706 li
272.578 139.506 li
273.838 153.546 li
272.519 166.326 li
268.919 175.927 li
263.397 181.506 li
@
134.038 123.246 mo
140.758 122.286 li
148.018 126.246 li
154.739 134.466 li
160.258 146.106 li
163.858 159.906 li
165.118 173.886 li
163.798 186.666 li
160.198 196.326 li
154.678 201.906 li
@
239.698 103.446 mo
246.419 102.486 li
253.679 106.446 li
260.397 114.666 li
265.919 126.306 li
269.519 140.106 li
270.778 154.086 li
269.458 166.866 li
265.857 176.526 li
260.338 182.106 li
@
130.978 123.786 mo
137.698 122.886 li
144.958 126.786 li
151.678 135.066 li
157.198 146.646 li
160.798 160.446 li
162.058 174.486 li
160.739 187.267 li
157.138 196.866 li
151.618 202.446 li
@
236.638 103.986 mo
243.357 103.086 li
250.618 106.986 li
257.338 115.267 li
262.857 126.906 li
266.458 140.706 li
267.718 154.686 li
266.397 167.466 li
262.799 177.065 li
257.278 182.646 li
@
127.918 124.386 mo
134.638 123.426 li
141.899 127.386 li
148.618 135.606 li
154.138 147.246 li
157.739 161.046 li
158.999 175.026 li
157.678 187.806 li
154.079 197.466 li
148.558 203.046 li
@
233.578 104.586 mo
240.299 103.626 li
247.558 107.586 li
254.278 115.806 li
259.737 127.446 li
263.397 141.246 li
264.658 155.226 li
263.338 168.006 li
259.737 177.666 li
254.218 183.246 li
@
131.579 124.026 mo
138.838 127.986 li
145.558 136.206 li
151.079 147.846 li
154.678 161.646 li
155.938 175.626 li
154.618 188.406 li
151.018 198.006 li
145.499 203.586 li
@
230.519 105.126 mo
237.237 104.227 li
244.438 108.187 li
251.218 116.406 li
256.679 128.046 li
260.338 141.846 li
261.599 155.826 li
260.278 168.606 li
256.679 178.206 li
251.158 183.786 li
@
125.098 125.046 mo
128.518 124.626 li
135.778 128.526 li
142.499 136.746 li
148.018 148.386 li
151.618 162.187 li
152.878 176.166 li
151.558 188.946 li
147.958 198.606 li
142.438 204.187 li
@
227.458 105.727 mo
234.179 104.826 li
241.378 108.727 li
248.158 117.006 li
253.618 128.586 li
257.278 142.386 li
258.538 156.366 li
257.218 169.206 li
253.618 178.806 li
248.099 184.386 li
@
125.159 125.227 mo
125.458 125.166 li
132.718 129.126 li
139.438 137.346 li
144.899 148.986 li
148.558 162.786 li
149.819 176.767 li
148.499 189.546 li
144.899 199.146 li
139.918 204.187 li
@
224.397 106.267 mo
231.118 105.366 li
238.317 109.326 li
245.099 117.546 li
250.558 129.187 li
254.218 142.986 li
255.479 156.966 li
254.158 169.746 li
250.558 179.347 li
245.038 184.986 li
@
125.999 127.687 mo
129.598 129.666 li
136.378 137.946 li
141.838 149.526 li
145.499 163.326 li
146.758 177.306 li
145.438 190.146 li
141.838 199.746 li
139.858 201.786 li
@
223.919 106.506 mo
228.058 105.966 li
235.258 109.866 li
242.038 118.146 li
247.499 129.727 li
251.158 143.526 li
252.419 157.566 li
251.099 170.347 li
247.499 179.946 li
241.979 185.526 li
@
126.958 130.746 mo
133.319 138.486 li
138.778 150.126 li
142.438 163.927 li
143.698 177.906 li
142.378 190.687 li
139.618 198.007 li
@
223.979 106.687 mo
224.999 106.506 li
232.198 110.466 li
238.919 118.687 li
244.438 130.326 li
248.099 144.126 li
249.299 158.106 li
248.038 170.886 li
244.438 180.546 li
238.919 186.126 li
@
129.058 137.646 mo
130.258 139.086 li
135.718 150.666 li
139.378 164.466 li
140.638 178.507 li
139.319 191.286 li
139.138 191.706 li
@
224.698 108.606 mo
229.138 111.006 li
235.857 119.286 li
241.378 130.926 li
245.038 144.727 li
246.237 158.706 li
244.979 171.486 li
241.378 181.086 li
238.737 183.726 li
@
132.659 151.267 mo
136.319 165.065 li
137.159 174.847 li
@
225.599 111.366 mo
226.078 111.606 li
232.799 119.826 li
238.317 131.466 li
241.979 145.267 li
243.179 159.246 li
241.919 172.026 li
238.618 180.726 li
@
227.758 117.966 mo
229.737 120.426 li
235.258 132.066 li
238.919 145.866 li
240.118 159.847 li
238.857 172.626 li
238.258 174.187 li
@
231.237 130.566 mo
232.199 132.606 li
235.857 146.406 li
237.058 160.386 li
236.938 161.406 li
@
165.118 117.606 mo
164.999 117.486 li
164.938 117.426 li
164.758 117.426 li
@
.24 lw
176.098 197.886 mo
177.298 198.366 li
0 0 0 1 cmyk
@
187.918 196.386 mo
189.239 195.065 li
190.499 193.506 li
199.254 181.134 197.235 157.78 193.018 144.066 cv
191.999 140.886 li
190.858 137.826 li
187.499 128.502 176.327 109.345 163.918 115.926 cv
162.418 116.886 li
161.098 118.146 li
@
237.237 190.206 mo
237.118 184.506 li
236.878 178.806 li
235.466 151.781 229.512 124.366 219.419 99.2461 cv
217.258 94.2061 li
214.979 89.2256 li
206.789 71.6494 193.485 51.0674 176.458 40.9258 cv
173.458 39.3057 li
170.458 37.9258 li
@
132.418 48.3662 mo
130.378 51.0664 li
121.706 63.084 117.059 79.3516 114.898 93.8457 cv
114.178 98.7061 li
@
.12 lw
131.579 124.026 mo
125.038 124.926 li
163.138 117.786 li
0 0 0 .887 cmyk
@
183.778 196.446 mo
139.978 204.666 li
@
289.438 176.646 mo
238.799 186.126 li
@
268.799 97.9863 mo
223.919 106.386 li
@
232.799 35.8262 mo
232.857 35.8262 li
233.383 35.3848 232.982 33.7354 232.438 33.7256 cv
232.378 33.7256 li
@
221.817 65.3457 mo
221.938 65.3457 li
221.999 65.2861 li
222.207 64.8691 222.181 64.9766 222.179 64.5059 cv
222.179 64.3262 li
222.118 64.0859 li
222.026 63.8281 221.937 63.4043 221.638 63.3057 cv
221.519 63.2461 li
221.458 63.2461 li
@
168.598 38.2861 mo
173.159 40.7461 li
@
235.078 187.506 mo
235.499 192.006 li
235.438 192.306 li
@
111.478 93.3662 mo
112.198 85.9258 li
@
112.558 83.6455 mo
122.579 56.4658 li
@
123.598 54.0664 mo
128.398 49.1455 li
@
274.258 18.4863 mo
278.817 20.9463 li
@
340.737 167.767 mo
341.158 172.206 li
341.099 172.506 li
@
215.817 86.8857 mo
217.857 66.126 li
@
218.218 63.8457 mo
228.237 36.7256 li
@
229.258 34.3262 mo
234.058 29.3457 li
@
108.958 88.7461 mo
109.138 86.4658 li
@
109.499 84.2461 mo
119.518 57.0664 li
@
120.538 54.666 mo
125.338 49.6855 li
@
213.299 81.8457 mo
214.799 66.666 li
@
215.157 64.4463 mo
225.179 37.2656 li
@
226.198 34.8662 mo
230.999 29.9463 li
@
106.499 84.5459 mo
116.458 57.666 li
@
117.478 55.2656 mo
122.278 50.2861 li
@
210.778 77.0459 mo
211.737 67.2656 li
@
212.038 64.9863 mo
222.118 37.8662 li
@
223.138 35.4658 mo
227.938 30.4863 li
@
104.698 81.666 mo
113.399 58.2061 li
@
114.418 55.8057 mo
119.218 50.8857 li
@
208.197 72.6064 mo
208.678 67.8662 li
@
208.979 65.5859 mo
219.058 38.4063 li
@
220.078 36.0059 mo
224.878 31.0859 li
@
102.898 78.8457 mo
110.338 58.8057 li
@
111.358 56.4063 mo
116.159 51.4258 li
@
205.918 66.126 mo
215.999 39.0059 li
@
217.019 36.6064 mo
221.817 31.626 li
@
101.098 76.1465 mo
107.278 59.3457 li
@
108.298 56.9463 mo
113.098 52.0264 li
@
203.458 65.1064 mo
212.938 39.5459 li
@
213.958 37.1465 mo
218.758 32.2256 li
@
99.1782 73.5059 mo
104.218 59.9463 li
@
105.239 57.5459 mo
110.038 52.5664 li
@
201.598 62.4063 mo
209.879 40.1465 li
@
210.897 37.7461 mo
215.698 32.7656 li
@
97.3188 70.9258 mo
101.159 60.4863 li
@
102.178 58.0859 mo
106.978 53.166 li
@
199.738 59.8262 mo
206.818 40.7461 li
@
207.777 38.3457 mo
212.638 33.3662 li
@
95.3384 68.4658 mo
98.0981 61.0859 li
@
99.1177 58.6855 mo
103.918 53.7061 li
@
197.818 57.3662 mo
203.759 41.2861 li
@
204.719 38.8857 mo
209.578 33.9658 li
@
93.4185 66.0664 mo
95.0376 61.6855 li
@
95.9985 59.2861 mo
100.858 54.3057 li
@
195.838 54.9658 mo
200.638 41.8857 li
@
201.658 39.4863 mo
206.518 34.5059 li
@
89.8784 60.4258 mo
94.7388 55.4463 li
@
191.819 50.4063 mo
194.518 43.0264 li
@
195.538 40.626 mo
200.398 35.6455 li
@
91.3784 63.7861 mo
91.978 62.2256 li
@
92.938 59.8262 mo
97.7983 54.9063 li
@
87.8384 59.9463 mo
91.6782 56.0459 li
@
86.5181 58.6855 mo
88.6177 56.5859 li
@
85.2583 57.4863 mo
85.5581 57.1855 li
@
193.858 52.626 mo
197.578 42.4258 li
@
198.598 40.0264 mo
203.458 35.1064 li
@
189.718 48.3057 mo
191.458 43.5664 li
@
192.478 41.166 mo
197.278 36.2461 li
@
187.618 46.2656 mo
188.399 44.166 li
@
189.418 41.7656 mo
194.218 36.7861 li
@
186.358 42.3662 mo
191.159 37.3857 li
@
183.478 42.7256 mo
188.098 37.9863 li
@
182.038 41.5859 mo
185.038 38.5264 li
@
180.598 40.5664 mo
181.978 39.126 li
@
232.378 33.7256 mo
183.659 42.8457 li
@
232.799 35.8262 mo
185.819 44.6455 li
@
221.458 63.2461 mo
204.358 66.4258 li
@
221.817 65.3457 mo
205.618 68.4063 li
@
165.538 38.8262 mo
170.098 41.3457 li
@
271.198 19.0264 mo
275.758 21.5459 li
@
162.478 39.4258 mo
167.038 41.8857 li
@
268.138 19.626 mo
272.698 22.0859 li
@
159.418 39.9658 mo
163.978 42.4863 li
@
265.078 20.166 mo
269.638 22.6865 li
@
156.358 40.5664 mo
160.918 43.0264 li
@
262.019 20.7656 mo
266.578 23.2861 li
@
153.298 41.1064 mo
157.858 43.626 li
@
258.958 21.3662 mo
263.519 23.8262 li
@
150.239 41.7061 mo
154.798 44.2256 li
@
255.897 21.9063 mo
260.458 24.4258 li
@
147.178 42.3057 mo
151.739 44.7656 li
@
252.838 22.5059 mo
257.397 24.9658 li
@
144.118 42.8457 mo
148.678 45.3662 li
@
249.718 23.0459 mo
254.338 25.5664 li
@
141.058 43.4463 mo
145.618 45.9063 li
@
246.658 23.6465 mo
251.218 26.1064 li
@
137.999 43.9863 mo
142.558 46.5059 li
@
243.599 24.1865 mo
248.158 26.7061 li
@
134.878 44.5859 mo
139.499 47.0459 li
@
240.538 24.7861 mo
245.099 27.3057 li
@
237.479 25.3857 mo
242.038 27.8457 li
@
234.419 25.9258 mo
238.979 28.4463 li
@
231.357 26.5264 mo
235.919 28.9863 li
@
228.299 27.0664 mo
232.857 29.5859 li
@
225.237 27.666 mo
229.799 30.126 li
@
222.179 28.2061 mo
226.737 30.7266 li
@
219.118 28.8057 mo
223.679 31.3262 li
@
216.058 29.3457 mo
220.618 31.8662 li
@
212.999 29.9463 mo
217.558 32.4658 li
@
209.938 30.5459 mo
214.499 33.0059 li
@
206.879 31.0859 mo
211.438 33.6064 li
@
203.759 31.6865 mo
208.379 34.1465 li
@
200.698 32.2266 mo
205.258 34.7461 li
@
197.638 32.8262 mo
202.198 35.2861 li
@
194.579 33.3662 mo
199.138 35.8857 li
@
191.518 33.9658 mo
196.079 36.4863 li
@
188.458 34.5664 mo
193.018 37.0264 li
@
185.399 35.1064 mo
189.958 37.626 li
@
182.338 35.7061 mo
186.899 38.166 li
@
179.278 36.2461 mo
183.838 38.7666 li
@
176.218 36.8467 mo
180.778 39.3066 li
@
280.378 20.7061 mo
179.278 39.6064 li
@
131.819 45.126 mo
136.378 47.6465 li
@
128.758 45.7266 mo
133.319 48.2461 li
@
125.698 46.2666 mo
130.258 48.7861 li
@
122.638 46.8662 mo
127.198 49.3867 li
@
119.579 47.4658 mo
124.138 49.9268 li
@
116.518 48.0059 mo
121.079 50.5264 li
@
113.458 48.6064 mo
118.018 51.0664 li
@
110.399 49.1465 mo
114.958 51.666 li
@
107.338 49.7461 mo
111.899 52.2061 li
@
104.278 50.2861 mo
108.838 52.8066 li
@
101.218 50.8867 mo
105.778 53.4063 li
@
98.1587 51.4863 mo
102.718 53.9463 li
@
95.0981 52.0264 mo
99.6587 54.5459 li
@
92.0376 52.626 mo
96.5981 55.0859 li
@
88.9185 53.166 mo
93.5386 55.6865 li
@
85.8579 53.7666 mo
90.4185 56.2266 li
@
82.7983 54.3066 mo
87.3579 56.8262 li
@
174.718 40.4463 mo
85.0181 57.2461 li
@
342.299 167.466 mo
238.857 186.847 li
@
235.078 187.507 mo
139.979 205.326 li
@
232.019 188.106 mo
232.438 192.546 li
232.378 192.906 li
@
337.679 168.307 mo
338.099 172.807 li
338.038 173.106 li
@
228.958 188.706 mo
229.378 193.146 li
229.317 193.446 li
@
334.618 168.906 mo
335.038 173.347 li
334.979 173.706 li
@
225.897 189.247 mo
226.317 193.747 li
226.258 194.046 li
@
331.558 169.446 mo
331.979 173.946 li
331.919 174.247 li
@
222.839 189.847 mo
223.258 194.286 li
223.199 194.646 li
@
328.499 170.046 mo
328.919 174.486 li
328.857 174.847 li
@
219.778 190.386 mo
220.199 194.886 li
220.138 195.187 li
@
325.438 170.587 mo
325.799 175.087 li
325.799 175.386 li
@
216.718 190.986 mo
217.138 195.427 li
217.078 195.786 li
@
322.378 171.187 mo
322.739 175.626 li
322.739 175.986 li
@
213.658 191.526 mo
214.078 196.026 li
214.019 196.327 li
@
319.317 171.786 mo
319.679 176.227 li
319.679 176.526 li
@
210.599 192.126 mo
211.019 196.566 li
210.958 196.927 li
@
316.258 172.327 mo
316.618 176.827 li
316.618 177.126 li
@
207.539 192.727 mo
207.898 197.167 li
207.898 197.466 li
@
313.199 172.927 mo
313.558 177.366 li
313.558 177.727 li
@
204.479 193.267 mo
204.838 197.706 li
204.838 198.066 li
@
310.138 173.466 mo
310.499 177.966 li
310.499 178.267 li
@
201.418 193.866 mo
201.778 198.307 li
201.778 198.667 li
@
307.019 174.066 mo
307.438 178.507 li
307.438 178.866 li
@
198.358 194.406 mo
198.718 198.906 li
198.718 199.206 li
@
195.298 195.007 mo
195.659 199.446 li
195.659 199.807 li
@
192.178 195.546 mo
192.598 200.046 li
192.598 200.347 li
@
189.118 196.146 mo
189.539 200.587 li
189.479 200.946 li
@
186.058 196.687 mo
186.479 201.187 li
186.418 201.486 li
@
182.999 197.286 mo
183.418 201.727 li
183.358 202.087 li
@
179.938 197.887 mo
180.358 202.327 li
180.298 202.626 li
@
176.878 198.427 mo
177.298 202.927 li
177.239 203.227 li
@
173.819 199.026 mo
174.239 203.466 li
174.178 203.827 li
@
170.758 199.566 mo
171.178 204.066 li
171.118 204.366 li
@
167.698 200.167 mo
168.118 204.606 li
168.058 204.966 li
@
164.638 200.706 mo
165.058 205.206 li
164.999 205.507 li
@
161.579 201.307 mo
161.938 205.747 li
161.938 206.106 li
@
158.518 201.906 mo
158.878 206.347 li
158.878 206.646 li
@
155.458 202.446 mo
155.819 206.946 li
155.819 207.247 li
@
152.399 203.046 mo
152.758 207.486 li
152.758 207.847 li
@
149.338 203.587 mo
149.698 208.087 li
149.698 208.387 li
@
146.218 204.187 mo
146.638 208.626 li
146.638 208.986 li
@
143.159 204.727 mo
143.579 209.227 li
143.518 209.526 li
@
140.098 205.327 mo
140.518 209.767 li
140.458 210.126 li
@
303.958 174.606 mo
304.378 179.106 li
304.319 179.406 li
@
300.897 175.206 mo
301.319 179.646 li
301.258 180.007 li
@
297.838 175.807 mo
298.258 180.247 li
298.199 180.546 li
@
294.778 176.347 mo
295.199 180.786 li
295.138 181.146 li
@
291.718 176.946 mo
292.138 181.387 li
292.078 181.747 li
@
288.658 177.486 mo
289.078 181.986 li
289.019 182.286 li
@
285.599 178.087 mo
286.019 182.526 li
285.958 182.887 li
@
282.538 178.626 mo
282.958 183.126 li
282.897 183.427 li
@
279.479 179.227 mo
279.838 183.667 li
279.838 184.026 li
@
276.419 179.767 mo
276.778 184.267 li
276.778 184.566 li
@
273.357 180.366 mo
273.718 184.807 li
273.718 185.167 li
@
270.299 180.967 mo
270.658 185.407 li
270.658 185.767 li
@
267.239 181.507 mo
267.599 186.007 li
267.599 186.307 li
@
264.179 182.106 mo
264.538 186.546 li
264.538 186.907 li
@
261.058 182.646 mo
261.479 187.146 li
261.479 187.446 li
@
257.999 183.247 mo
258.419 187.687 li
258.358 188.046 li
@
254.938 183.786 mo
255.358 188.286 li
255.299 188.587 li
@
251.878 184.387 mo
252.299 188.827 li
252.239 189.187 li
@
248.819 184.987 mo
249.239 189.427 li
249.179 189.727 li
@
245.758 185.526 mo
246.179 190.026 li
246.118 190.327 li
@
242.699 186.126 mo
243.118 190.566 li
243.058 190.927 li
@
239.638 186.667 mo
240.058 191.167 li
239.999 191.467 li
@
280.679 16.2666 mo
280.679 17.2871 li
@
345.058 174.786 mo
345.058 169.086 li
344.878 163.326 li
343.67 132.252 336.733 100.818 324.419 72.2461 cv
322.138 67.2656 li
319.737 62.4658 li
310.474 43.8447 294.674 20.9248 274.317 13.3857 cv
271.317 12.4863 li
268.317 11.7656 li
0 0 0 1 cmyk
@
280.679 7.98633 mo
280.679 9.48633 li
0 0 0 .887 cmyk
@
344.519 171.906 mo
345.058 172.206 li
@
348.718 174.065 mo
349.499 174.485 li
@
169.858 116.826 mo
177.118 120.786 li
183.838 129.006 li
189.358 140.646 li
193.018 154.446 li
194.218 168.426 li
192.958 181.206 li
189.298 190.866 li
183.778 196.446 li
@
163.138 117.786 mo
169.858 116.826 li
@
189.958 155.046 mo
191.159 169.026 li
189.898 181.806 li
186.239 191.406 li
180.718 196.985 li
@
186.838 155.586 mo
188.098 169.565 li
186.778 182.347 li
183.178 192.006 li
177.659 197.586 li
@
183.778 156.186 mo
185.038 170.166 li
183.718 182.946 li
180.118 192.546 li
174.598 198.126 li
@
180.718 156.726 mo
181.978 170.706 li
180.659 183.546 li
177.058 193.146 li
171.538 198.726 li
@
177.659 157.326 mo
178.918 171.306 li
177.598 184.086 li
173.999 193.687 li
168.478 199.326 li
@
174.598 157.866 mo
175.858 171.906 li
174.538 184.687 li
170.938 194.286 li
165.418 199.866 li
@
171.538 158.466 mo
172.798 172.446 li
171.478 185.226 li
167.878 194.886 li
162.358 200.466 li
@
168.478 159.065 mo
169.739 173.046 li
168.418 185.826 li
164.819 195.427 li
159.298 201.006 li
@
165.418 159.606 mo
166.678 173.586 li
165.358 186.366 li
161.758 196.026 li
156.239 201.606 li
@
162.358 160.206 mo
163.618 174.187 li
162.298 186.966 li
158.698 196.565 li
153.178 202.146 li
@
159.298 160.746 mo
160.558 174.726 li
159.239 187.565 li
155.638 197.166 li
150.118 202.746 li
@
156.239 161.347 mo
157.438 175.326 li
156.178 188.106 li
152.579 197.706 li
147.058 203.347 li
@
153.178 161.886 mo
154.378 175.927 li
153.118 188.706 li
149.518 198.306 li
143.999 203.886 li
@
150.118 162.486 mo
151.319 176.466 li
150.058 189.246 li
146.399 198.906 li
140.938 204.486 li
@
147.058 163.026 mo
148.258 177.065 li
146.999 189.847 li
143.338 199.446 li
139.858 202.986 li
@
143.999 163.626 mo
145.198 177.606 li
143.938 190.386 li
140.278 200.046 li
139.798 200.586 li
@
140.938 190.806 mo
139.378 194.826 li
@
140.999 164.046 mo
142.198 178.026 li
140.938 190.806 li
@
137.819 164.767 mo
139.079 178.746 li
138.478 184.806 li
@
136.319 165.065 mo
137.159 174.847 li
@
166.798 117.426 mo
174.058 121.386 li
180.778 129.606 li
186.298 141.246 li
189.958 155.046 li
@
165.298 117.726 mo
172.499 121.626 li
@
163.739 118.026 mo
170.999 121.926 li
177.718 130.146 li
183.239 141.786 li
186.838 155.586 li
@
160.678 118.566 mo
167.938 122.526 li
174.659 130.746 li
180.178 142.386 li
183.778 156.186 li
@
157.618 119.166 mo
164.878 123.066 li
171.598 131.346 li
177.118 142.926 li
180.718 156.726 li
@
154.558 119.706 mo
161.819 123.666 li
168.538 131.886 li
174.058 143.526 li
177.659 157.326 li
@
151.499 120.306 mo
158.758 124.206 li
165.478 132.486 li
170.999 144.066 li
174.598 157.866 li
@
148.438 120.846 mo
155.698 124.806 li
162.418 133.026 li
167.878 144.666 li
171.538 158.466 li
@
145.378 121.446 mo
152.579 125.346 li
159.358 133.626 li
164.819 145.267 li
168.478 159.065 li
@
142.319 121.986 mo
149.518 125.946 li
156.298 134.166 li
161.758 145.806 li
165.418 159.606 li
@
139.258 122.586 mo
146.458 126.546 li
153.239 134.767 li
158.698 146.406 li
162.358 160.206 li
@
136.198 123.187 mo
143.399 127.086 li
150.178 135.366 li
155.638 146.946 li
159.298 160.746 li
@
133.138 123.727 mo
140.338 127.687 li
147.058 135.906 li
152.579 147.546 li
156.239 161.347 li
@
130.079 124.326 mo
137.278 128.227 li
143.999 136.506 li
149.518 148.086 li
153.178 161.886 li
@
127.018 124.866 mo
134.218 128.826 li
140.938 137.046 li
146.458 148.687 li
150.118 162.486 li
@
125.518 126.306 mo
131.159 129.366 li
137.878 137.646 li
143.399 149.286 li
147.058 163.026 li
@
126.418 129.066 mo
128.098 129.966 li
134.819 138.187 li
140.338 149.826 li
143.999 163.626 li
@
128.038 134.227 mo
131.758 138.786 li
137.278 150.427 li
140.938 164.226 li
@
137.819 164.767 mo
134.218 150.966 li
130.739 143.706 li
@
275.519 97.0264 mo
282.778 100.986 li
289.499 109.206 li
295.019 120.847 li
298.618 134.646 li
299.878 148.626 li
298.558 161.406 li
294.958 171.066 li
289.438 176.646 li
@
272.458 97.626 mo
279.718 101.586 li
286.438 109.807 li
291.958 121.446 li
295.558 135.246 li
296.817 149.227 li
295.499 162.007 li
291.897 171.606 li
286.378 177.187 li
@
268.799 97.9863 mo
275.519 97.0264 li
@
269.397 98.2266 mo
276.658 102.126 li
283.378 110.406 li
288.897 121.986 li
292.499 135.786 li
293.758 149.767 li
292.438 162.606 li
288.838 172.206 li
283.317 177.786 li
@
266.338 98.7666 mo
273.599 102.727 li
280.317 110.946 li
285.838 122.586 li
289.438 136.386 li
290.699 150.366 li
289.378 163.146 li
285.778 172.746 li
280.258 178.386 li
@
263.278 99.3662 mo
270.538 103.267 li
277.258 111.546 li
282.718 123.126 li
286.378 136.926 li
287.638 150.966 li
286.317 163.746 li
282.718 173.347 li
277.199 178.927 li
@
260.218 99.9063 mo
267.419 103.866 li
274.199 112.086 li
279.658 123.727 li
283.317 137.526 li
284.578 151.507 li
283.258 164.286 li
279.658 173.946 li
274.138 179.526 li
@
257.158 100.506 mo
264.357 104.406 li
271.138 112.687 li
276.599 124.326 li
280.258 138.066 li
281.519 152.106 li
280.199 164.886 li
276.599 174.486 li
271.078 180.066 li
@
254.099 101.046 mo
261.299 105.006 li
268.078 113.227 li
273.538 124.866 li
277.199 138.666 li
278.458 152.646 li
277.138 165.427 li
273.538 175.087 li
268.019 180.666 li
@
251.038 101.646 mo
258.239 105.606 li
265.019 113.826 li
270.479 125.466 li
274.138 139.267 li
275.397 153.246 li
274.078 166.026 li
270.479 175.626 li
264.958 181.206 li
@
247.979 102.246 mo
255.179 106.146 li
261.897 114.426 li
267.419 126.006 li
271.078 139.807 li
272.278 153.786 li
271.019 166.626 li
267.419 176.226 li
261.897 181.806 li
@
244.919 102.786 mo
252.118 106.746 li
258.838 114.966 li
264.357 126.606 li
268.019 140.406 li
269.218 154.386 li
267.958 167.166 li
264.357 176.767 li
258.838 182.347 li
@
241.857 103.386 mo
249.058 107.286 li
255.778 115.566 li
261.299 127.146 li
264.958 140.946 li
266.158 154.986 li
264.897 167.767 li
261.239 177.366 li
255.778 182.946 li
@
238.739 103.926 mo
245.999 107.887 li
252.718 116.106 li
258.239 127.746 li
261.897 141.546 li
263.099 155.526 li
261.838 168.306 li
258.179 177.966 li
252.658 183.546 li
@
235.679 104.526 mo
242.938 108.427 li
249.658 116.706 li
255.179 128.286 li
258.838 142.086 li
260.038 156.126 li
258.778 168.906 li
255.118 178.507 li
249.599 184.087 li
@
232.618 105.066 mo
239.878 109.026 li
246.599 117.246 li
252.118 128.887 li
255.718 142.687 li
256.979 156.666 li
255.658 169.446 li
252.058 179.106 li
246.538 184.687 li
@
229.558 105.666 mo
236.817 109.626 li
243.538 117.847 li
249.058 129.486 li
252.658 143.286 li
253.919 157.267 li
252.599 170.046 li
248.999 179.646 li
243.479 185.226 li
@
226.499 106.267 mo
233.758 110.166 li
240.479 118.387 li
245.999 130.026 li
249.599 143.826 li
250.857 157.806 li
249.538 170.587 li
245.938 180.246 li
240.419 185.826 li
@
224.218 107.227 mo
230.699 110.767 li
237.419 118.986 li
242.938 130.626 li
246.538 144.427 li
247.799 158.406 li
246.479 171.187 li
242.878 180.786 li
238.799 184.927 li
@
225.179 109.986 mo
227.638 111.307 li
234.357 119.586 li
239.878 131.166 li
243.479 144.966 li
244.739 158.946 li
243.419 171.786 li
239.817 181.386 li
238.739 182.526 li
@
226.618 114.427 mo
231.299 120.126 li
236.758 131.767 li
240.419 145.566 li
241.679 159.546 li
240.357 172.326 li
238.438 177.427 li
@
229.078 122.526 mo
233.699 132.307 li
237.357 146.106 li
238.618 160.146 li
237.778 168.486 li
@
241.199 186.366 mo
241.558 190.866 li
241.558 191.167 li
@
244.258 185.826 mo
244.618 190.267 li
244.618 190.626 li
@
247.317 185.226 mo
247.679 189.726 li
247.679 190.026 li
@
250.378 184.687 mo
250.739 189.126 li
250.739 189.486 li
@
253.438 184.087 mo
253.799 188.587 li
253.799 188.886 li
@
256.499 183.546 mo
256.857 187.986 li
256.857 188.347 li
@
259.558 182.946 mo
259.979 187.386 li
259.919 187.746 li
@
262.618 182.406 mo
263.038 186.847 li
262.979 187.146 li
@
265.679 181.806 mo
266.099 186.246 li
266.038 186.606 li
@
268.737 181.206 mo
269.158 185.706 li
269.099 186.007 li
@
271.799 180.666 mo
272.218 185.106 li
272.158 185.466 li
@
274.857 180.066 mo
275.278 184.566 li
275.218 184.866 li
@
277.979 179.526 mo
278.397 183.966 li
278.338 184.267 li
@
280.979 178.927 mo
281.397 183.427 li
281.338 183.726 li
@
284.038 178.386 mo
284.458 182.826 li
284.458 183.126 li
@
287.158 177.786 mo
287.519 182.226 li
287.519 182.586 li
@
290.218 177.187 mo
290.578 181.687 li
290.578 181.986 li
@
293.278 176.646 mo
293.638 181.086 li
293.638 181.446 li
@
296.338 176.046 mo
296.698 180.546 li
296.698 180.847 li
@
299.397 175.507 mo
299.758 179.946 li
299.758 180.306 li
@
302.458 174.906 mo
302.817 179.406 li
302.817 179.706 li
@
305.519 174.366 mo
305.938 178.806 li
305.878 179.106 li
@
308.578 173.767 mo
308.999 178.206 li
308.938 178.565 li
@
311.638 173.166 mo
312.058 177.666 li
311.999 177.966 li
@
313.198 172.927 mo
313.558 177.366 li
313.558 177.726 li
@
314.698 172.626 mo
315.118 177.065 li
315.058 177.427 li
@
317.758 172.026 mo
318.179 176.526 li
318.118 176.826 li
@
320.817 171.486 mo
321.237 175.927 li
321.179 176.286 li
@
323.878 170.886 mo
324.299 175.386 li
324.237 175.687 li
@
326.938 170.347 mo
327.357 174.786 li
327.299 175.146 li
@
329.999 169.746 mo
330.419 174.187 li
330.419 174.546 li
@
333.118 169.206 mo
333.479 173.646 li
333.479 173.946 li
@
336.179 168.606 mo
336.538 173.046 li
336.538 173.406 li
@
339.357 168.006 mo
339.718 172.446 li
339.718 172.806 li
@
342.299 167.466 mo
342.658 171.906 li
342.658 172.267 li
@
236.638 187.267 mo
237.058 191.706 li
236.999 192.065 li
@
233.578 187.806 mo
233.999 192.306 li
233.938 192.606 li
@
230.519 188.406 mo
230.878 192.847 li
230.878 193.206 li
@
227.458 188.946 mo
227.817 193.446 li
227.817 193.746 li
@
224.397 189.546 mo
224.758 193.986 li
224.758 194.347 li
@
221.339 190.086 mo
221.698 194.586 li
221.698 194.886 li
@
218.278 190.687 mo
218.638 195.126 li
218.638 195.486 li
@
215.158 191.286 mo
215.578 195.726 li
215.578 196.026 li
@
212.099 191.826 mo
212.519 196.326 li
212.458 196.626 li
@
209.039 192.427 mo
209.459 196.866 li
209.398 197.226 li
@
205.979 192.966 mo
206.398 197.466 li
206.338 197.767 li
@
202.918 193.565 mo
203.339 198.007 li
203.278 198.366 li
@
199.858 194.106 mo
200.278 198.606 li
200.218 198.906 li
@
196.798 194.706 mo
197.218 199.146 li
197.159 199.507 li
@
193.739 195.306 mo
194.159 199.746 li
194.098 200.046 li
@
190.678 195.847 mo
191.098 200.347 li
191.038 200.646 li
@
187.618 196.446 mo
188.038 200.886 li
187.978 201.246 li
@
184.558 196.986 mo
184.918 201.486 li
184.918 201.786 li
@
181.499 197.586 mo
181.858 202.026 li
181.858 202.386 li
@
178.438 198.126 mo
178.798 202.626 li
178.798 202.927 li
@
175.378 198.726 mo
175.739 203.166 li
175.739 203.526 li
@
172.319 199.326 mo
172.678 203.767 li
172.678 204.065 li
@
169.198 199.866 mo
169.618 204.306 li
169.618 204.666 li
@
166.138 200.466 mo
166.558 204.906 li
166.499 205.267 li
@
163.079 201.007 mo
163.499 205.507 li
163.438 205.806 li
@
160.018 201.606 mo
160.438 206.046 li
160.378 206.406 li
@
156.958 202.146 mo
157.378 206.646 li
157.319 206.946 li
@
153.899 202.746 mo
154.319 207.187 li
154.258 207.546 li
@
150.838 203.286 mo
151.258 207.786 li
151.198 208.086 li
@
147.778 203.886 mo
148.198 208.326 li
148.138 208.687 li
@
144.718 204.486 mo
145.138 208.927 li
145.079 209.286 li
@
141.659 205.026 mo
142.079 209.526 li
142.018 209.826 li
@
272.698 18.7861 mo
277.317 21.2461 li
@
269.638 19.3262 mo
274.199 21.8457 li
@
266.578 19.9258 mo
271.138 22.3857 li
@
263.519 20.4658 mo
268.078 22.9863 li
@
260.458 21.0664 mo
265.019 23.5264 li
@
257.397 21.6064 mo
261.958 24.126 li
@
254.338 22.2061 mo
258.897 24.7266 li
@
251.278 22.7461 mo
255.838 25.2666 li
@
248.218 23.3467 mo
252.778 25.8662 li
@
245.158 23.9463 mo
249.718 26.4063 li
@
242.099 24.4863 mo
246.658 27.0059 li
@
239.038 25.0859 mo
243.599 27.5459 li
@
235.979 25.626 mo
240.538 28.1465 li
@
232.919 26.2266 mo
237.479 28.6865 li
@
229.857 26.7666 mo
234.419 29.2861 li
@
226.739 27.3662 mo
231.357 29.8867 li
@
223.679 27.9658 mo
228.239 30.4268 li
@
220.618 28.5059 mo
225.179 31.0264 li
@
217.558 29.1064 mo
222.118 31.5664 li
@
214.499 29.6465 mo
219.058 32.166 li
@
211.438 30.2461 mo
215.999 32.7061 li
@
208.379 30.7861 mo
212.938 33.3066 li
@
205.318 31.3867 mo
209.879 33.9063 li
@
202.258 31.9863 mo
206.818 34.4463 li
@
199.198 32.5264 mo
203.759 35.0459 li
@
196.138 33.126 mo
200.698 35.5859 li
@
193.079 33.666 mo
197.638 36.1865 li
@
190.018 34.2666 mo
194.579 36.7266 li
@
186.958 34.8066 mo
191.518 37.3262 li
@
183.899 35.4063 mo
188.458 37.9268 li
@
180.778 35.9463 mo
185.399 38.4668 li
@
177.718 36.5459 mo
182.278 39.0664 li
@
275.817 18.1865 mo
280.378 20.7061 li
@
170.159 37.9863 mo
174.718 40.4463 li
@
167.098 38.5264 mo
171.659 41.0459 li
@
164.039 39.126 mo
168.598 41.6465 li
@
160.979 39.666 mo
165.539 42.1865 li
@
157.858 40.2666 mo
162.479 42.7861 li
@
154.798 40.8662 mo
159.358 43.3262 li
@
151.739 41.4063 mo
156.298 43.9268 li
@
148.678 42.0068 mo
153.239 44.4668 li
@
145.618 42.5459 mo
150.178 45.0664 li
@
142.558 43.1465 mo
147.118 45.6064 li
@
139.499 43.6865 mo
144.059 46.2061 li
@
136.438 44.2861 mo
140.999 46.8066 li
@
133.378 44.8867 mo
137.938 47.3467 li
@
130.319 45.4268 mo
134.878 47.9463 li
@
127.258 46.0264 mo
131.819 48.4863 li
@
124.198 46.5664 mo
128.758 49.0869 li
@
121.138 47.166 mo
125.698 49.626 li
@
118.079 47.7061 mo
122.638 50.2266 li
@
115.018 48.3066 mo
119.579 50.8262 li
@
111.899 48.9063 mo
116.518 51.3662 li
@
108.838 49.4463 mo
113.399 51.9668 li
@
105.778 50.0469 mo
110.338 52.5068 li
@
102.718 50.5869 mo
107.278 53.1064 li
@
99.6587 51.1865 mo
104.218 53.6465 li
@
96.5981 51.7266 mo
101.159 54.2461 li
@
93.5386 52.3262 mo
98.0981 54.8467 li
@
90.479 52.8662 mo
95.0386 55.3867 li
@
87.4185 53.4668 mo
91.979 55.9863 li
@
84.3579 54.0664 mo
88.9185 56.5264 li
@
83.3384 55.7461 mo
85.8579 57.127 li
@
112.739 95.8262 mo
113.758 85.627 li
@
114.059 83.3467 mo
124.138 56.2266 li
@
125.159 53.8262 mo
129.958 48.8467 li
@
110.218 91.0264 mo
110.699 86.2266 li
@
110.999 83.9463 mo
121.079 56.7666 li
@
122.098 54.3662 mo
126.899 49.4463 li
@
107.938 84.4863 mo
118.018 57.3662 li
@
118.979 54.9668 mo
123.838 49.9863 li
@
105.598 83.1064 mo
114.958 57.9063 li
@
115.918 55.5068 mo
120.778 50.5869 li
@
103.798 80.2266 mo
111.899 58.5068 li
@
112.858 56.1064 mo
117.719 51.127 li
@
101.938 77.4063 mo
108.779 59.1064 li
@
109.739 56.7061 mo
114.598 51.7266 li
@
100.079 74.7666 mo
105.719 59.6465 li
@
106.678 57.2461 mo
111.539 52.3262 li
@
98.2183 72.127 mo
102.598 60.2471 li
@
103.619 57.8467 mo
108.479 52.8662 li
@
96.2983 69.6064 mo
99.5386 60.7861 li
@
100.559 58.3867 mo
105.418 53.4668 li
@
94.3188 67.207 mo
96.479 61.3867 li
@
97.4985 58.9863 mo
102.358 54.0068 li
@
92.3384 64.8662 mo
93.4185 61.9268 li
@
94.438 59.5264 mo
99.2388 54.6064 li
@
91.3784 60.127 mo
96.1782 55.1465 li
@
88.4985 60.6064 mo
93.2388 55.7471 li
@
87.2388 59.3467 mo
90.1782 56.2861 li
@
85.9185 58.0869 mo
87.1187 56.8867 li
@
217.019 89.5869 mo
219.419 65.8262 li
@
219.718 63.5469 mo
229.799 36.4268 li
@
230.758 34.0264 mo
235.618 29.0469 li
@
214.558 84.3066 mo
216.358 66.4268 li
@
216.658 64.1465 mo
226.739 36.9668 li
@
227.699 34.5664 mo
232.558 29.6465 li
@
212.038 79.4463 mo
213.299 66.9668 li
@
213.599 64.6865 mo
223.618 37.5664 li
@
224.638 35.167 mo
229.499 30.1865 li
@
209.518 74.8262 mo
210.238 67.5664 li
@
210.538 65.2861 mo
220.558 38.1064 li
@
221.578 35.707 mo
226.438 30.7861 li
@
206.939 70.4463 mo
207.119 68.1064 li
@
207.479 65.8262 mo
217.499 38.707 li
@
218.519 36.3066 mo
223.378 31.3867 li
@
204.418 66.4268 mo
214.438 39.3066 li
@
215.458 36.9063 mo
220.258 31.9268 li
@
202.559 63.7861 mo
211.378 39.8467 li
@
212.399 37.4463 mo
217.199 32.5264 li
@
200.699 61.1465 mo
208.318 40.4463 li
@
209.338 38.0469 mo
214.138 33.0664 li
@
198.779 58.5664 mo
205.259 40.9863 li
@
206.279 38.5869 mo
211.078 33.667 li
@
196.798 56.1064 mo
202.199 41.5869 li
@
203.219 39.1865 mo
208.02 34.207 li
@
194.819 53.7666 mo
199.139 42.127 li
@
200.159 39.7266 mo
204.959 34.8066 li
@
192.838 51.4863 mo
196.079 42.7266 li
@
197.098 40.3262 mo
201.898 35.3467 li
@
190.798 49.3262 mo
193.018 43.3262 li
@
194.039 40.9268 mo
198.838 35.9463 li
@
188.699 47.2861 mo
189.958 43.8662 li
@
190.979 41.4668 mo
195.779 36.5469 li
@
186.539 45.3066 mo
186.899 44.4668 li
@
187.918 42.0664 mo
192.719 37.0869 li
@
184.798 42.6064 mo
189.659 37.6865 li
@
182.758 42.1865 mo
186.598 38.2266 li
@
181.319 41.0469 mo
183.539 38.8262 li
@
69.2983 147.786 mo
68.5786 151.506 li
70.0181 151.506 li
0 0 0 .703 cmyk
ef
68.5786 151.506 mo
70.0181 151.506 li
70.1382 152.406 li
ef
82.438 182.466 mo
82.438 184.565 li
84.2983 184.565 li
ef
82.438 184.565 mo
84.2983 184.565 li
84.6587 184.926 li
ef
.42 lw
68.5786 151.506 mo
70.1382 152.406 li
69.2983 147.786 li
68.5786 151.506 li
cp
@
69.2983 151.926 mo
69.2983 176.586 li
@
82.438 182.466 mo
84.6587 184.926 li
82.438 184.565 li
@
82.438 183.726 mo
69.2983 176.526 li
@
82.438 182.466 mo
82.438 184.565 li
@
62.3384 183.906 mo
59.5181 183.906 li
59.3384 183.966 li
58.3784 184.565 li
62.3384 184.565 li
0 0 0 1 cmyk
ef
62.2183 180.546 mo
61.2583 180.666 li
58.3784 183.966 li
58.3784 184.565 li
59.3384 183.966 li
59.7583 183.426 li
ef
62.2183 180.065 mo
58.5581 180.065 li
58.5581 180.666 li
60.3579 180.666 li
60.6587 180.666 60.9575 180.666 61.2583 180.666 cv
62.2183 180.546 li
ef
70.7388 158.767 mo
70.7983 159.485 li
70.978 159.546 li
71.2427 159.579 71.5034 159.61 71.7583 159.485 cv
71.938 159.426 li
71.938 159.366 li
72.0581 159.306 li
72.1782 159.187 li
72.2983 159.006 li
72.3579 158.826 li
70.9185 158.826 li
ef
71.2183 153.246 mo
70.3784 153.246 li
72.1177 157.746 li
72.478 156.906 li
72.478 156.846 li
72.4185 156.666 li
72.3579 156.486 li
72.2983 156.306 li
72.2983 156.186 li
72.1782 155.826 li
ef
74.5181 153.246 mo
73.7388 153.246 li
72.7778 155.886 li
72.7183 156.066 li
72.5786 156.686 72.4146 157.135 72.1177 157.746 cv
72.1177 157.806 li
71.9985 158.046 li
71.938 158.286 li
71.8188 158.526 li
71.5786 158.767 li
71.5181 158.767 li
71.3384 158.826 li
71.1587 158.826 li
72.4185 158.826 li
72.478 158.706 li
72.5376 158.586 li
72.7183 158.046 li
72.8384 157.806 li
ef
77.8179 185.466 mo
76.1382 187.806 li
77.0376 187.806 li
78.2388 186.006 li
ef
77.2183 183.306 mo
76.2583 183.306 li
77.8188 185.466 li
78.2388 186.006 li
78.478 186.426 li
79.438 187.806 li
80.3384 187.806 li
78.6587 185.406 li
78.2388 184.866 li
78.1782 184.806 li
78.1177 184.687 li
77.9985 184.506 li
77.938 184.326 li
ef
80.2183 183.306 mo
79.3188 183.306 li
78.5981 184.386 li
78.4185 184.565 li
78.3579 184.687 li
78.2388 184.866 li
78.6587 185.406 li
ef
.06 lw
276.897 21.3057 mo
291.357 29.2256 li
0 0 0 .703 cmyk
@
275.157 21.666 mo
291.237 30.4258 li
@
273.479 21.9658 mo
291.118 31.626 li
@
271.737 22.2656 mo
290.999 32.8262 li
@
270.479 22.8662 mo
290.878 34.0264 li
@
270.599 24.1855 mo
290.758 35.2256 li
@
270.718 25.5059 mo
290.638 36.4258 li
@
270.838 26.8857 mo
290.519 37.626 li
@
270.958 28.2061 mo
290.458 38.8262 li
@
271.078 29.5264 mo
290.338 40.0264 li
@
271.198 30.8457 mo
290.218 41.2256 li
@
271.317 32.166 mo
290.099 42.4258 li
@
271.438 33.4863 mo
289.979 43.626 li
@
271.558 34.8057 mo
289.857 44.8262 li
@
271.679 36.1865 mo
289.737 46.0264 li
@
271.799 37.5059 mo
289.618 47.2256 li
@
271.919 38.8262 mo
289.499 48.4258 li
@
272.037 40.1465 mo
289.378 49.626 li
@
272.157 41.4658 mo
289.258 50.8262 li
@
272.278 42.7861 mo
289.138 52.0264 li
@
272.397 44.1064 mo
289.019 53.2266 li
@
272.519 45.4258 mo
288.897 54.4258 li
@
272.638 46.8057 mo
288.778 55.626 li
@
272.758 48.126 mo
288.657 56.8262 li
@
272.817 49.4463 mo
288.537 58.0264 li
@
272.938 50.7666 mo
288.419 59.2266 li
@
273.058 52.0859 mo
288.299 60.4258 li
@
273.179 53.4063 mo
288.179 61.626 li
@
273.299 54.7266 mo
288.058 62.8262 li
@
273.419 56.1064 mo
287.938 64.0264 li
@
273.537 57.4258 mo
287.817 65.2266 li
@
273.657 58.7461 mo
287.698 66.4258 li
@
273.778 60.0664 mo
287.578 67.626 li
@
273.897 61.3857 mo
287.458 68.8262 li
@
274.019 62.7061 mo
287.338 69.9658 li
@
274.138 64.0264 mo
287.218 71.166 li
@
274.258 65.4063 mo
287.099 72.3662 li
@
274.378 66.7266 mo
286.979 73.5664 li
@
274.497 68.0459 mo
286.857 74.7666 li
@
274.618 69.3662 mo
286.737 75.9658 li
@
274.737 70.6865 mo
286.618 77.166 li
@
274.979 73.3262 mo
286.378 79.5664 li
@
275.099 74.6465 mo
286.258 80.7666 li
@
275.218 76.0264 mo
286.138 81.9658 li
@
275.338 77.3467 mo
286.019 83.2266 li
@
275.457 78.7266 mo
285.897 84.4268 li
@
275.578 80.0459 mo
285.778 85.626 li
@
275.698 81.4268 mo
285.657 86.8262 li
@
275.817 82.7461 mo
285.537 88.0859 li
@
275.938 84.0664 mo
285.417 89.2861 li
@
276.058 85.4463 mo
285.299 90.4863 li
@
276.179 86.7666 mo
285.179 91.6865 li
@
276.299 88.1465 mo
285.058 92.9463 li
@
276.417 89.4658 mo
284.938 94.1465 li
@
276.537 90.8467 mo
284.817 95.3467 li
@
276.657 92.166 mo
284.698 96.5459 li
@
276.778 93.4863 mo
284.578 97.7461 li
@
276.897 94.8662 mo
284.457 99.0068 li
@
.12 lw
101.038 92.7656 mo
101.098 92.7061 li
101.218 92.6455 li
101.547 92.124 101.299 90.9775 100.798 90.6064 cv
100.558 90.6064 li
100.088 91.1553 100.259 92.249 100.798 92.7061 cv
100.918 92.7656 li
101.038 92.7656 li
cp
0 0 0 .887 cmyk
@
56.9985 178.806 mo
55.1382 180.006 li
57.2388 180.006 li
0 0 0 .703 cmyk
ef
55.1382 180.006 mo
57.2388 180.006 li
57.2983 180.187 li
ef
.42 lw
56.9985 178.806 mo
55.1382 180.006 li
57.2983 180.187 li
@
57.1177 179.526 mo
69.2983 176.586 li
@
56.9985 178.806 mo
57.2983 180.187 li
@
.12 lw
186.178 47.7061 mo
186.239 47.7061 li
186.418 47.5264 li
186.478 47.3457 li
186.478 47.166 li
186.538 46.9863 li
186.538 46.8057 li
186.478 46.626 li
186.418 46.3857 li
186.298 46.0264 li
186.239 45.9063 li
186.118 45.7256 li
185.999 45.666 li
185.938 45.6064 li
185.698 45.6064 li
185.2 46.0391 185.422 47.2959 185.999 47.7061 cv
186.178 47.7061 li
cp
0 0 0 .887 cmyk
@
.06 lw
274.979 73.3262 mo
264.299 74.7656 li
255.538 83.7656 li
249.838 99.1855 li
0 0 0 .703 cmyk
@
249.599 101.586 mo
249.838 99.126 li
@
274.737 70.6855 mo
263.578 72.1855 li
254.519 81.5459 li
248.578 97.626 li
@
248.157 101.826 mo
248.578 97.5664 li
@
264.599 76.0859 mo
275.099 74.6465 li
@
264.958 77.4063 mo
275.218 76.0264 li
@
265.317 78.7256 mo
275.338 77.3457 li
@
265.679 80.0459 mo
275.458 78.7256 li
@
265.979 81.3662 mo
275.578 80.0459 li
@
266.338 82.6865 mo
275.698 81.4258 li
@
266.698 84.0059 mo
275.817 82.7461 li
@
267.058 85.3262 mo
275.938 84.0664 li
@
267.419 86.6465 mo
276.058 85.4463 li
@
267.718 87.9063 mo
276.179 86.7656 li
@
268.078 89.2256 mo
276.299 88.1465 li
@
268.438 90.5459 mo
276.419 89.4658 li
@
268.799 91.8662 mo
276.537 90.8457 li
@
269.099 93.1865 mo
276.657 92.166 li
@
269.457 94.5059 mo
276.778 93.4863 li
@
269.817 95.8262 mo
276.897 94.8662 li
@
256.078 84.9063 mo
264.599 76.0859 li
@
256.618 85.9863 mo
264.957 77.4063 li
@
257.157 87.126 mo
265.317 78.7266 li
@
257.638 88.2666 mo
265.679 80.0459 li
@
258.179 89.4063 mo
265.979 81.3662 li
@
258.718 90.4863 mo
266.338 82.6865 li
@
259.258 91.626 mo
266.698 84.0059 li
@
259.799 92.7666 mo
267.058 85.3262 li
@
260.338 93.9063 mo
267.419 86.6465 li
@
260.878 94.9863 mo
267.718 87.9063 li
@
261.357 96.126 mo
268.078 89.2266 li
@
261.897 97.2666 mo
268.438 90.5459 li
@
262.438 98.4063 mo
268.799 91.8662 li
@
263.519 98.9463 mo
269.099 93.1865 li
@
265.499 98.5859 mo
269.458 94.5059 li
@
267.479 98.2266 mo
269.817 95.8262 li
@
250.499 99.9658 mo
256.078 84.9063 li
@
251.157 100.746 mo
256.618 85.9863 li
@
251.938 101.106 mo
257.157 87.126 li
@
252.958 100.926 mo
257.638 88.2666 li
@
253.979 100.746 mo
258.179 89.4063 li
@
254.999 100.566 mo
258.718 90.4863 li
@
256.019 100.386 mo
259.258 91.626 li
@
257.037 100.146 mo
259.799 92.7666 li
@
258.058 99.9658 mo
260.338 93.9063 li
@
259.078 99.7861 mo
260.878 94.9863 li
@
260.099 99.6064 mo
261.357 96.126 li
@
261.118 99.4268 mo
261.897 97.2666 li
@
262.138 99.2461 mo
262.438 98.4063 li
@
250.378 101.406 mo
250.497 99.9658 li
@
251.099 101.286 mo
251.157 100.746 li
@
263.278 70.9268 mo
274.618 69.3662 li
@
262.919 69.6064 mo
274.497 68.0459 li
@
262.558 68.3467 mo
274.378 66.7266 li
@
262.198 67.0264 mo
274.258 65.4063 li
@
261.897 65.7061 mo
274.138 64.0264 li
@
261.537 64.4463 mo
274.019 62.7061 li
@
261.179 63.126 mo
273.897 61.3857 li
@
260.878 61.8066 mo
273.778 60.0664 li
@
260.519 60.5459 mo
273.657 58.7461 li
@
260.157 59.2266 mo
273.537 57.4258 li
@
259.857 57.9063 mo
273.419 56.1064 li
@
259.499 56.6465 mo
273.299 54.7266 li
@
259.138 55.3262 mo
273.179 53.4063 li
@
258.778 54.0664 mo
273.058 52.0859 li
@
258.479 52.7461 mo
272.938 50.7666 li
@
258.118 51.4258 mo
272.817 49.4463 li
@
257.758 50.166 mo
272.758 48.126 li
@
257.458 48.8457 mo
272.638 46.8057 li
@
257.099 47.5264 mo
272.519 45.4258 li
@
256.737 46.2666 mo
272.397 44.1064 li
@
256.438 44.9463 mo
272.278 42.7861 li
@
256.078 43.626 mo
272.158 41.4658 li
@
255.718 42.3662 mo
272.038 40.1465 li
@
255.357 41.0459 mo
271.919 38.8262 li
@
255.058 39.7861 mo
271.799 37.5059 li
@
254.699 38.4658 mo
271.679 36.1865 li
@
254.338 37.1465 mo
271.558 34.8057 li
@
254.038 35.8857 mo
271.438 33.4863 li
@
253.679 34.5664 mo
271.319 32.166 li
@
253.319 33.2461 mo
271.199 30.8457 li
@
253.019 31.9863 mo
271.078 29.5264 li
@
252.658 30.666 mo
270.958 28.2061 li
@
252.299 29.3457 mo
270.838 26.8857 li
@
251.938 28.0859 mo
270.718 25.5059 li
@
251.638 26.7656 mo
270.599 24.1855 li
@
263.878 23.7656 mo
270.479 22.8662 li
@
253.979 80.4658 mo
263.278 70.9258 li
@
253.438 79.3262 mo
262.919 69.6064 li
@
252.958 78.2461 mo
262.558 68.3457 li
@
252.419 77.1064 mo
262.199 67.0264 li
@
251.878 76.0264 mo
261.897 65.7061 li
@
251.338 74.8857 mo
261.538 64.4463 li
@
250.857 73.7461 mo
261.179 63.126 li
@
250.319 72.666 mo
260.878 61.8057 li
@
249.778 71.5264 mo
260.519 60.5459 li
@
249.239 70.4463 mo
260.158 59.2256 li
@
248.758 69.3057 mo
259.857 57.9063 li
@
248.218 68.2256 mo
259.499 56.6455 li
@
247.679 67.0859 mo
259.138 55.3262 li
@
247.138 66.0059 mo
258.778 54.0664 li
@
246.658 64.8662 mo
258.479 52.7461 li
@
246.118 63.7861 mo
258.118 51.4258 li
@
245.578 62.6455 mo
257.758 50.166 li
@
245.099 61.5664 mo
257.458 48.8457 li
@
244.558 60.4258 mo
257.099 47.5264 li
@
244.019 59.3457 mo
256.737 46.2656 li
@
243.479 58.2061 mo
256.438 44.9463 li
@
242.999 57.126 mo
256.078 43.626 li
@
242.458 55.9863 mo
255.718 42.3662 li
@
241.919 54.9063 mo
255.357 41.0459 li
@
241.378 53.7656 mo
255.058 39.7861 li
@
240.897 52.6855 mo
254.698 38.4658 li
@
240.357 51.5459 mo
254.338 37.1455 li
@
239.817 50.4658 mo
254.038 35.8857 li
@
239.278 49.3262 mo
253.679 34.5664 li
@
238.799 48.2461 mo
253.317 33.2461 li
@
238.258 47.1064 mo
253.019 31.9863 li
@
237.718 45.9658 mo
252.657 30.666 li
@
237.237 44.8857 mo
252.299 29.3457 li
@
236.698 43.7461 mo
251.938 28.0859 li
@
236.157 42.666 mo
251.638 26.7656 li
@
235.618 41.5264 mo
250.499 26.2861 li
@
235.138 40.4463 mo
248.578 26.6455 li
@
234.599 39.3057 mo
246.599 27.0059 li
@
234.058 38.2256 mo
244.618 27.3662 li
@
233.519 37.0859 mo
242.638 27.7256 li
@
247.919 96.7861 mo
253.979 80.4658 li
@
247.258 96.0059 mo
253.438 79.3262 li
@
246.657 95.2256 mo
252.958 78.2461 li
@
245.999 94.4463 mo
252.419 77.1064 li
@
245.338 93.666 mo
251.878 76.0264 li
@
244.737 92.8857 mo
251.338 74.8857 li
@
244.078 92.0459 mo
250.857 73.8057 li
@
243.419 91.2656 mo
250.317 72.666 li
@
242.758 90.4863 mo
249.778 71.5859 li
@
242.157 89.7061 mo
249.237 70.4463 li
@
241.497 88.9258 mo
248.758 69.3662 li
@
240.838 88.1455 mo
248.218 68.2256 li
@
240.237 87.3057 mo
247.679 67.1455 li
@
239.578 86.5264 mo
247.198 66.0059 li
@
238.919 85.7461 mo
246.657 64.8662 li
@
238.258 84.9658 mo
246.118 63.7861 li
@
237.657 84.1855 mo
245.578 62.6455 li
@
236.997 83.4063 mo
245.099 61.5664 li
@
236.339 82.5664 mo
244.558 60.4258 li
@
235.737 81.7861 mo
244.019 59.3457 li
@
235.078 81.0059 mo
243.479 58.2061 li
@
234.419 80.2256 mo
242.997 57.126 li
@
233.758 79.4463 mo
242.457 55.9863 li
@
233.157 78.6064 mo
241.919 54.9063 li
@
232.497 77.8262 mo
241.378 53.7656 li
@
231.839 77.0459 mo
240.897 52.6855 li
@
231.237 76.2656 mo
240.357 51.5459 li
@
230.578 75.4863 mo
239.817 50.4658 li
@
229.917 74.7061 mo
239.338 49.3262 li
@
229.258 73.8662 mo
238.799 48.2461 li
@
228.657 73.0859 mo
238.258 47.1064 li
@
227.997 72.3057 mo
237.718 46.0264 li
@
227.339 71.5264 mo
237.237 44.8857 li
@
226.737 70.7461 mo
236.698 43.8057 li
@
226.078 69.9658 mo
236.157 42.666 li
@
225.417 69.126 mo
235.618 41.5859 li
@
224.758 68.3457 mo
235.138 40.4463 li
@
224.157 67.5664 mo
234.599 39.3662 li
@
223.497 66.7861 mo
234.058 38.2256 li
@
233.519 37.0859 mo
222.839 66.0059 li
219.897 96.0059 li
@
220.438 97.4463 mo
223.497 66.7861 li
@
221.037 98.8857 mo
224.157 67.5664 li
@
221.638 100.326 mo
224.758 68.3457 li
@
222.179 101.826 mo
225.417 69.126 li
@
222.778 103.326 mo
226.078 69.9658 li
@
223.317 104.826 mo
226.737 70.7461 li
@
223.917 106.386 mo
227.339 71.5264 li
@
224.638 106.266 mo
227.997 72.3057 li
@
225.357 106.086 mo
228.657 73.0859 li
@
226.078 105.966 mo
229.258 73.8662 li
@
226.857 105.846 mo
229.919 74.7061 li
@
227.578 105.666 mo
230.578 75.4863 li
@
228.299 105.546 mo
231.237 76.2656 li
@
229.019 105.426 mo
231.839 77.0459 li
@
229.799 105.306 mo
232.497 77.8262 li
@
230.519 105.126 mo
233.157 78.6064 li
@
231.237 105.006 mo
233.758 79.4463 li
@
231.957 104.886 mo
234.419 80.2256 li
@
232.737 104.706 mo
235.078 81.0059 li
@
233.457 104.586 mo
235.737 81.7861 li
@
234.179 104.466 mo
236.339 82.5664 li
@
234.897 104.346 mo
236.997 83.3457 li
@
235.679 104.166 mo
237.657 84.1865 li
@
236.397 104.046 mo
238.258 84.9658 li
@
237.118 103.926 mo
238.919 85.7461 li
@
237.839 103.746 mo
239.578 86.5264 li
@
238.618 103.626 mo
240.237 87.3057 li
@
239.338 103.506 mo
240.838 88.0859 li
@
240.058 103.326 mo
241.497 88.9258 li
@
240.778 103.206 mo
242.157 89.7061 li
@
241.558 103.086 mo
242.758 90.4863 li
@
242.278 102.966 mo
243.419 91.2666 li
@
242.997 102.786 mo
244.078 92.0459 li
@
243.718 102.666 mo
244.737 92.8262 li
@
244.497 102.546 mo
245.338 93.666 li
@
245.218 102.366 mo
245.997 94.4463 li
@
245.938 102.246 mo
246.657 95.2266 li
@
246.657 102.126 mo
247.258 96.0059 li
@
247.438 102.006 mo
247.919 96.7861 li
@
297.058 92.7666 mo
305.817 111.246 li
311.519 132.847 li
313.497 154.986 li
311.698 173.166 li
@
296.758 93.666 mo
305.278 111.786 li
@
296.397 94.626 mo
304.799 112.326 li
@
296.037 95.5859 mo
304.258 112.866 li
@
295.679 96.4863 mo
303.718 113.406 li
@
295.378 97.4463 mo
303.179 113.946 li
@
295.019 98.3457 mo
302.638 114.486 li
@
294.657 99.3057 mo
302.099 115.026 li
@
294.299 100.206 mo
301.558 115.626 li
@
293.999 101.166 mo
301.078 116.166 li
@
293.638 102.126 mo
300.538 116.706 li
@
293.278 103.026 mo
299.999 117.246 li
@
292.919 103.986 mo
299.458 117.786 li
@
292.558 104.886 mo
298.919 118.326 li
@
292.258 105.846 mo
298.378 118.866 li
@
291.897 106.806 mo
297.838 119.406 li
@
291.538 107.706 mo
297.357 119.946 li
@
305.278 111.786 mo
310.857 132.966 li
@
304.799 112.326 mo
310.198 133.026 li
@
304.258 112.866 mo
309.599 133.146 li
@
303.718 113.406 mo
308.938 133.206 li
@
303.179 113.946 mo
308.278 133.326 li
@
302.638 114.486 mo
307.618 133.386 li
@
302.099 115.026 mo
306.958 133.506 li
@
301.558 115.626 mo
306.299 133.566 li
@
301.078 116.166 mo
305.638 133.687 li
@
300.537 116.706 mo
305.037 133.746 li
@
299.999 117.246 mo
304.378 133.866 li
@
299.458 117.786 mo
303.718 133.926 li
@
298.919 118.326 mo
303.058 134.046 li
@
298.378 118.866 mo
302.397 134.106 li
@
297.838 119.406 mo
301.737 134.227 li
@
297.357 119.946 mo
301.138 134.286 li
@
310.857 132.966 mo
312.838 154.626 li
@
310.198 133.026 mo
312.118 154.267 li
@
309.599 133.146 mo
311.458 153.906 li
@
308.938 133.206 mo
310.737 153.486 li
@
308.278 133.326 mo
310.019 153.126 li
@
307.618 133.386 mo
309.357 152.767 li
@
306.957 133.506 mo
308.638 152.347 li
@
306.299 133.566 mo
307.979 151.986 li
@
305.638 133.687 mo
307.258 151.626 li
@
305.037 133.746 mo
306.599 151.206 li
@
304.378 133.866 mo
305.878 150.847 li
@
303.718 133.926 mo
305.218 150.486 li
@
303.058 134.046 mo
304.497 150.065 li
@
302.397 134.106 mo
303.778 149.706 li
@
301.737 134.227 mo
303.118 149.346 li
@
301.138 134.286 mo
302.397 148.926 li
@
312.838 154.626 mo
310.979 173.347 li
@
312.118 154.267 mo
310.258 173.406 li
@
311.457 153.906 mo
309.599 172.565 li
@
310.737 153.486 mo
308.938 171.666 li
@
310.019 153.126 mo
308.278 171.007 li
@
309.357 152.767 mo
307.618 170.166 li
@
308.638 152.347 mo
306.957 169.386 li
@
307.979 151.986 mo
306.299 168.606 li
@
307.258 151.626 mo
305.698 167.767 li
@
306.599 151.206 mo
305.037 166.986 li
@
305.878 150.847 mo
304.378 166.206 li
@
305.218 150.486 mo
303.718 165.366 li
@
304.497 150.066 mo
303.058 164.586 li
@
303.778 149.706 mo
302.397 163.806 li
@
303.118 149.347 mo
301.737 162.966 li
@
302.397 148.926 mo
301.138 162.187 li
297.299 172.326 li
@
297.838 173.466 mo
301.737 162.966 li
@
298.378 174.606 mo
302.397 163.806 li
@
298.979 175.566 mo
303.058 164.587 li
@
300.058 175.206 mo
303.718 165.366 li
@
301.019 175.206 mo
304.378 166.206 li
@
302.037 174.966 mo
305.037 166.986 li
@
303.058 174.786 mo
305.698 167.767 li
@
304.078 174.606 mo
306.299 168.606 li
@
305.099 174.427 mo
306.957 169.386 li
@
306.118 174.246 mo
307.618 170.166 li
@
307.138 174.066 mo
308.278 171.007 li
@
308.099 173.826 mo
308.938 171.667 li
@
309.179 173.646 mo
309.599 172.566 li
@
293.157 176.646 mo
297.299 172.326 li
@
295.138 176.286 mo
297.838 173.466 li
@
297.118 175.927 mo
298.378 174.606 li
@
297.778 90.9063 mo
306.897 110.166 li
312.838 132.666 li
314.878 155.766 li
313.198 172.927 li
@
298.138 89.9463 mo
307.438 109.626 li
@
298.438 89.0459 mo
307.917 109.086 li
@
298.798 88.1465 mo
308.457 108.546 li
@
299.157 87.1865 mo
308.997 108.007 li
@
299.457 86.2861 mo
309.479 107.467 li
@
299.817 85.3262 mo
310.019 106.927 li
@
300.179 84.4268 mo
310.558 106.387 li
@
300.537 83.4668 mo
311.099 105.847 li
@
300.837 82.5664 mo
311.578 105.307 li
@
301.198 81.666 mo
312.118 104.767 li
@
301.558 80.7061 mo
312.657 104.227 li
@
301.857 79.8066 mo
313.198 103.687 li
@
302.217 78.8467 mo
313.679 103.146 li
@
302.578 77.9463 mo
314.217 102.606 li
@
302.878 77.0469 mo
314.758 102.066 li
@
303.237 76.0869 mo
315.298 101.526 li
@
303.599 75.1865 mo
315.778 100.986 li
@
303.957 74.2266 mo
316.317 100.446 li
@
304.258 73.3262 mo
316.857 99.9063 li
@
304.618 72.4268 mo
317.397 99.3662 li
@
304.979 71.4668 mo
317.878 98.8262 li
@
305.278 70.5664 mo
318.417 98.2861 li
@
305.637 69.6064 mo
318.957 97.7461 li
@
305.997 68.7061 mo
319.497 97.2061 li
@
306.298 67.8066 mo
319.979 96.667 li
@
306.657 66.8467 mo
320.517 96.127 li
@
307.017 65.9463 mo
321.058 95.5869 li
@
307.378 64.9863 mo
321.537 95.0469 li
@
307.678 64.0869 mo
322.078 94.5068 li
@
308.037 63.1865 mo
322.618 93.9668 li
@
308.397 62.2266 mo
323.157 93.4268 li
@
308.698 61.3262 mo
323.637 92.8867 li
@
309.058 60.3662 mo
324.178 92.3467 li
@
309.417 59.4668 mo
324.717 91.8066 li
@
309.717 58.5664 mo
325.258 91.2666 li
@
310.078 57.6064 mo
325.737 90.7266 li
@
310.437 56.707 mo
326.278 90.2471 li
@
310.798 55.7471 mo
326.816 89.707 li
@
311.097 54.8467 mo
327.357 89.167 li
@
311.457 53.9463 mo
327.837 88.627 li
@
307.437 109.627 mo
313.437 132.606 li
@
307.917 109.087 mo
314.097 132.486 li
@
308.457 108.547 mo
314.758 132.427 li
@
308.997 108.007 mo
315.417 132.366 li
@
309.478 107.467 mo
316.017 132.247 li
@
310.017 106.927 mo
316.678 132.187 li
@
310.558 106.387 mo
317.337 132.066 li
@
311.097 105.847 mo
317.937 132.007 li
@
311.578 105.307 mo
318.597 131.887 li
@
312.118 104.767 mo
319.258 131.826 li
@
312.657 104.227 mo
319.917 131.706 li
@
313.198 103.687 mo
320.517 131.646 li
@
313.678 103.146 mo
321.178 131.526 li
@
314.217 102.606 mo
321.837 131.467 li
@
314.758 102.066 mo
322.497 131.347 li
@
315.298 101.526 mo
323.097 131.286 li
@
315.778 100.986 mo
323.758 131.166 li
@
316.317 100.446 mo
324.417 131.106 li
@
316.857 99.9063 mo
325.017 131.047 li
@
317.397 99.3662 mo
325.678 130.927 li
@
317.878 98.8262 mo
326.337 130.866 li
@
318.417 98.2861 mo
326.997 130.746 li
@
318.957 97.7461 mo
327.597 130.687 li
@
319.497 97.2061 mo
328.258 130.566 li
@
319.979 96.666 mo
328.917 130.507 li
@
320.519 96.126 mo
329.519 130.387 li
@
321.058 95.5859 mo
330.177 130.326 li
@
321.537 95.0459 mo
330.837 130.206 li
@
322.078 94.5068 mo
331.497 130.146 li
@
322.618 93.9668 mo
332.097 130.026 li
@
323.157 93.4268 mo
332.758 129.967 li
@
323.637 92.8867 mo
333.417 129.906 li
@
324.178 92.3467 mo
334.019 129.786 li
@
324.717 91.8066 mo
334.677 129.727 li
@
325.258 91.2666 mo
335.337 129.606 li
@
325.737 90.7266 mo
335.997 129.546 li
@
326.278 90.2461 mo
336.599 129.427 li
@
326.817 89.7061 mo
337.258 129.366 li
@
327.357 89.166 mo
337.917 129.246 li
@
327.837 88.626 mo
338.578 129.187 li
@
313.438 132.606 mo
315.599 156.126 li
@
314.099 132.486 mo
316.258 156.486 li
@
314.758 132.427 mo
316.917 156.906 li
@
315.417 132.366 mo
317.638 157.267 li
@
316.019 132.246 mo
318.298 157.626 li
@
316.679 132.187 mo
319.019 157.986 li
@
317.337 132.066 mo
319.679 158.406 li
@
317.938 132.006 mo
320.337 158.767 li
@
318.599 131.887 mo
321.058 159.126 li
@
319.258 131.826 mo
321.717 159.486 li
@
319.917 131.706 mo
322.438 159.906 li
@
320.519 131.646 mo
323.099 160.267 li
@
321.179 131.526 mo
323.758 160.626 li
@
321.837 131.466 mo
324.479 160.986 li
@
322.497 131.347 mo
325.138 161.406 li
@
323.099 131.286 mo
325.857 161.767 li
@
323.758 131.166 mo
326.519 162.126 li
@
324.417 131.106 mo
327.179 162.486 li
@
325.019 131.046 mo
327.897 162.847 li
@
325.679 130.927 mo
328.558 163.267 li
@
326.337 130.866 mo
329.278 163.626 li
@
326.997 130.746 mo
329.938 163.986 li
@
327.599 130.687 mo
330.657 164.347 li
@
328.258 130.566 mo
331.317 164.767 li
@
328.917 130.507 mo
331.979 165.126 li
@
329.519 130.387 mo
332.698 165.486 li
@
330.179 130.326 mo
333.357 165.847 li
@
330.837 130.206 mo
334.078 166.267 li
@
331.497 130.146 mo
334.737 166.626 li
@
332.099 130.026 mo
335.397 166.986 li
@
332.758 129.967 mo
336.118 167.347 li
@
333.417 129.906 mo
336.778 167.767 li
@
334.019 129.786 mo
337.497 168.126 li
@
334.679 129.727 mo
338.157 168.247 li
@
335.337 129.606 mo
338.758 168.126 li
@
335.997 129.546 mo
339.417 168.007 li
@
336.599 129.427 mo
340.078 167.886 li
@
337.258 129.366 mo
340.679 167.767 li
@
337.917 129.246 mo
341.338 167.646 li
@
338.578 129.187 mo
341.997 167.526 li
@
315.599 156.126 mo
313.917 172.747 li
@
316.258 156.486 mo
314.638 172.626 li
@
316.917 156.906 mo
315.417 172.507 li
@
317.638 157.267 mo
316.138 172.326 li
@
318.299 157.626 mo
316.857 172.206 li
@
319.019 157.986 mo
317.578 172.087 li
@
319.679 158.406 mo
318.357 171.966 li
@
320.338 158.767 mo
319.078 171.786 li
@
321.058 159.126 mo
319.799 171.667 li
@
321.718 159.486 mo
320.519 171.546 li
@
322.438 159.906 mo
321.299 171.366 li
@
323.099 160.267 mo
322.019 171.246 li
@
323.758 160.626 mo
322.737 171.126 li
@
324.479 160.986 mo
323.457 171.007 li
@
325.138 161.406 mo
324.237 170.826 li
@
325.857 161.767 mo
324.957 170.706 li
@
326.519 162.126 mo
325.679 170.587 li
@
327.179 162.486 mo
326.397 170.406 li
@
327.897 162.847 mo
327.179 170.286 li
@
328.558 163.267 mo
327.897 170.167 li
@
329.278 163.626 mo
328.618 169.986 li
@
329.938 163.986 mo
329.338 169.866 li
@
330.657 164.347 mo
330.118 169.746 li
@
331.317 164.767 mo
330.838 169.626 li
@
331.979 165.126 mo
331.558 169.446 li
@
332.698 165.486 mo
332.278 169.326 li
@
333.357 165.847 mo
333.058 169.206 li
@
334.078 166.267 mo
333.778 169.026 li
@
334.737 166.626 mo
334.497 168.906 li
@
335.397 166.986 mo
335.218 168.786 li
@
336.118 167.347 mo
335.997 168.606 li
@
336.778 167.767 mo
336.718 168.486 li
@
337.497 168.126 mo
337.438 168.366 li
@
210.238 142.146 mo
217.618 146.526 li
214.679 149.466 li
0 0 0 1 cmyk
ef
.24 lw
216.118 148.026 mo
266.938 198.847 li
@
266.038 143.766 mo
273.357 148.146 li
270.419 151.086 li
ef
271.919 149.646 mo
352.138 229.926 li
@
280.919 49.3857 mo
289.499 49.5059 li
288.419 53.5264 li
ef
288.958 51.5459 mo
333.237 63.4258 li
288.299 82.1455 li
@
289.078 84.0664 mo
280.618 85.3262 li
287.458 80.2256 li
ef
333.237 63.4258 mo
336.058 63.4258 li
@
339.718 58.9863 mo
338.278 59.0459 li
338.758 59.0459 li
338.817 59.1064 li
338.938 59.166 li
339.118 59.2256 li
339.179 59.2861 li
339.299 59.3457 li
339.419 59.4658 li
339.554 59.6621 339.86 60.166 340.019 60.3057 cv
340.138 60.4863 li
340.979 61.8057 li
341.999 61.8057 li
340.919 60.126 li
340.857 60.0664 li
340.799 59.9463 li
340.679 59.7656 li
340.198 59.2861 li
340.198 59.2256 li
340.078 59.166 li
339.897 59.0459 li
ef
341.099 56.1064 mo
339.299 56.2861 li
339.357 56.2861 li
341.078 56.1348 341.118 58.4717 339.118 58.3262 cv
337.317 58.3262 li
341.099 58.3857 li
341.157 58.2656 li
341.565 57.8008 341.559 56.8115 341.218 56.3457 cv
341.157 56.2861 li
ef
339.237 55.5664 mo
336.479 55.5664 li
336.479 61.8057 li
337.317 61.8057 li
337.317 59.0459 li
338.278 59.0459 li
339.17 58.9893 340.347 59.1123 341.038 58.3857 cv
341.099 58.3857 li
337.317 58.3262 li
337.317 56.2861 li
339.299 56.2861 li
341.099 56.1064 li
340.979 55.9863 li
340.799 55.9258 li
340.679 55.8057 li
340.558 55.7461 li
340.499 55.7461 li
340.378 55.6865 li
340.198 55.626 li
339.897 55.626 li
339.657 55.5664 li
339.479 55.5664 li
ef
347.338 55.5664 mo
342.778 55.5664 li
342.778 61.8057 li
347.458 61.8057 li
347.458 61.0859 li
343.618 61.0859 li
343.618 58.9258 li
347.099 58.9258 li
347.099 58.2061 li
343.618 58.2061 li
343.618 56.2861 li
347.338 56.2861 li
ef
351.179 55.5664 mo
350.338 55.5664 li
347.938 61.8057 li
348.778 61.8057 li
349.499 59.9463 li
352.078 59.9463 li
349.737 59.2256 li
350.397 57.4258 li
350.552 56.959 350.604 56.8857 350.698 56.4063 cv
350.758 56.2256 li
ef
351.179 55.5664 mo
350.758 56.2256 li
350.779 56.5215 351.134 57.1641 351.179 57.5459 cv
351.838 59.2256 li
349.737 59.2256 li
352.078 59.9463 li
352.799 61.8057 li
353.758 61.8057 li
ef
358.737 56.2256 mo
356.578 56.2861 li
356.638 56.2861 li
356.817 56.3457 li
357.357 56.3457 li
357.538 56.4063 li
357.599 56.4658 li
357.657 56.4658 li
357.778 56.5264 li
357.958 56.5859 li
358.198 56.8262 li
358.317 57.0059 li
358.438 57.126 li
358.499 57.2461 li
358.558 57.4258 li
358.558 57.5459 li
358.618 57.7256 li
358.679 57.8457 li
358.679 58.0264 li
358.737 58.2061 li
358.737 58.8662 li
358.637 60.124 358.236 61.0381 356.817 61.0859 cv
355.258 61.0859 li
358.737 61.0859 li
359.796 60.1436 359.874 57.5283 358.919 56.4658 cv
358.857 56.3457 li
ef
356.578 55.5664 mo
354.419 55.5664 li
354.419 61.8057 li
356.698 61.8057 li
357.378 61.8066 358.126 61.7051 358.618 61.2061 cv
358.737 61.0859 li
355.258 61.0859 li
355.258 56.2861 li
356.578 56.2861 li
358.737 56.2256 li
358.618 56.1064 li
357.667 55.5186 357.995 55.7676 356.999 55.5664 cv
356.817 55.5664 li
ef
361.558 56.1064 mo
361.258 56.4063 li
360.946 56.6592 360.538 57.6396 360.538 58.0264 cv
360.538 58.2061 li
360.479 58.3857 li
360.449 59.1641 360.509 59.5898 360.838 60.3057 cv
360.838 60.3662 li
360.958 60.5459 li
361.019 60.666 li
361.258 60.9063 li
361.317 61.0859 li
361.499 61.2061 li
361.618 61.2656 li
361.857 61.5059 li
362.099 61.626 li
362.278 61.6855 li
362.458 61.7461 li
362.578 61.8057 li
362.758 61.8662 li
363.118 61.8662 li
363.299 61.9258 li
363.657 61.9258 li
363.838 61.8662 li
364.019 61.8662 li
364.198 61.8057 li
364.317 61.8057 li
364.499 61.7461 li
364.679 61.6855 li
364.799 61.626 li
365.157 61.3857 li
365.278 61.3262 li
365.397 61.2061 li
363.419 61.2061 li
362.177 61.1836 361.354 60.1846 361.317 58.9863 cv
361.317 58.626 li
361.346 57.4473 361.832 56.3887 363.118 56.2256 cv
363.299 56.166 li
363.479 56.166 li
ef
363.479 55.4463 mo
363.419 55.4463 li
362.809 55.502 362.2 55.623 361.679 55.9863 cv
361.558 56.1064 li
363.479 56.166 li
363.599 56.166 li
363.778 56.2256 li
364.153 56.2168 364.508 56.4404 364.799 56.6455 cv
364.919 56.7656 li
365.038 56.9463 li
365.278 57.1855 li
365.338 57.3662 li
365.397 57.4863 li
365.458 57.666 li
365.458 57.7861 li
365.519 57.9658 li
365.519 58.1455 li
365.578 58.3262 li
365.578 58.6855 li
365.611 59.9688 365.087 60.8887 363.778 61.2061 cv
363.479 61.2061 li
365.397 61.2061 li
367.254 59.5879 366.563 55.6377 363.838 55.5059 cv
363.657 55.4463 li
ef
372.419 55.5664 mo
371.578 55.5664 li
371.578 59.166 li
371.597 59.6865 371.562 60.2139 371.278 60.666 cv
371.218 60.7861 li
371.157 60.7861 li
370.979 60.9658 li
370.799 61.0264 li
370.679 61.0859 li
370.499 61.0859 li
370.317 61.1465 li
369.897 61.1465 li
368.038 61.2061 li
368.278 61.4463 li
368.999 61.9082 370.044 62.0527 370.857 61.8057 cv
371.038 61.7461 li
371.157 61.6865 li
372.069 61.3721 372.364 60.457 372.419 59.5859 cv
372.419 59.166 li
ef
368.338 55.5664 mo
367.499 55.5664 li
367.499 59.166 li
367.55 59.8047 367.565 60.4766 367.919 61.0264 cv
368.038 61.2061 li
369.897 61.1465 li
369.838 61.1465 li
368.637 61.1357 368.388 60.4443 368.338 59.4063 cv
368.338 59.166 li
ef
378.299 55.5664 mo
373.317 55.5664 li
373.317 56.2861 li
375.419 56.2861 li
375.419 61.8057 li
376.198 61.8057 li
376.198 56.2861 li
378.299 56.2861 li
ef
340.919 67.9063 mo
340.857 68.0859 li
340.707 68.4727 340.706 68.7314 340.378 68.9863 cv
340.258 69.0459 li
340.258 69.1064 li
340.078 69.2256 li
339.683 69.3828 339.562 69.5078 339.118 69.4658 cv
337.258 69.5859 li
337.378 69.6465 li
337.558 69.7656 li
337.679 69.8262 li
337.931 69.9434 338.191 70.041 338.458 70.126 cv
338.817 70.126 li
338.999 70.1865 li
339.419 70.1865 li
339.599 70.126 li
339.778 70.126 li
339.958 70.0664 li
340.078 70.0059 li
340.258 69.9463 li
340.731 69.8164 340.472 69.7676 340.919 69.5859 cv
341.157 69.3457 li
341.218 69.2256 li
341.338 69.0459 li
341.397 68.9258 li
341.519 68.8057 li
341.758 68.0859 li
ef
341.038 64.4258 mo
339.179 64.4258 li
339.237 64.4258 li
340.11 64.5166 340.421 64.8164 340.799 65.5664 cv
340.857 65.7461 li
341.638 65.5664 li
341.638 65.4463 li
341.519 65.0859 li
341.397 64.9658 li
341.338 64.7861 li
341.099 64.5459 li
ef
339.179 63.7061 mo
338.999 63.7656 li
338.817 63.7656 li
337.649 63.8184 336.621 64.7314 336.357 65.8662 cv
336.357 65.9863 li
336.299 66.166 li
336.299 66.3457 li
336.165 66.7979 336.245 67.3408 336.357 67.7861 cv
336.357 67.9063 li
336.538 68.4463 li
336.599 68.5664 li
336.718 68.9258 li
336.958 69.166 li
337.019 69.3457 li
337.258 69.5859 li
339.118 69.4658 li
338.878 69.4658 li
337.486 69.2588 337.196 68.2832 337.078 67.0664 cv
337.078 66.7061 li
337.138 66.5264 li
337.138 66.2256 li
337.317 65.6855 li
337.317 65.5664 li
337.438 65.3857 li
337.499 65.2656 li
338.038 64.7256 li
338.157 64.666 li
338.338 64.6064 li
338.458 64.5459 li
338.638 64.4863 li
338.817 64.4863 li
338.999 64.4258 li
341.038 64.4258 li
340.919 64.3057 li
340.737 64.1855 li
340.679 64.126 li
340.499 64.0664 li
340.378 64.0059 li
340.258 63.8857 li
340.078 63.8857 li
339.897 63.8262 li
339.718 63.7656 li
339.357 63.7656 li
ef
347.698 63.8262 mo
346.857 63.8262 li
346.857 66.4063 li
343.618 66.4063 li
346.857 67.126 li
346.857 70.0664 li
347.698 70.0664 li
ef
343.618 63.8262 mo
342.838 63.8262 li
342.838 70.0664 li
343.618 70.0664 li
343.618 67.126 li
346.857 67.126 li
343.618 66.4063 li
ef
351.657 63.8262 mo
350.817 63.8262 li
348.419 70.0664 li
349.258 70.0664 li
349.979 68.2061 li
352.558 68.2061 li
350.218 67.4863 li
350.878 65.6855 li
351.032 65.2188 351.085 65.1455 351.179 64.666 cv
351.237 64.4863 li
ef
351.657 63.8262 mo
351.237 64.4863 li
351.261 64.7813 351.612 65.4238 351.657 65.8057 cv
352.317 67.4863 li
350.218 67.4863 li
352.558 68.2061 li
353.278 70.0664 li
354.237 70.0664 li
ef
360.838 63.8262 mo
359.698 63.8262 li
358.198 68.1455 li
358.198 68.2061 li
357.958 68.9258 li
357.958 69.0459 li
357.897 69.166 li
357.479 70.0664 li
358.198 70.0664 li
360.058 64.8457 li
ef
360.838 63.8262 mo
360.058 64.8457 li
360.058 70.0664 li
360.838 70.0664 li
ef
356.099 63.8262 mo
354.897 63.8262 li
354.897 70.0664 li
355.679 70.0664 li
355.679 64.7861 li
ef
356.099 63.8262 mo
355.679 64.7861 li
357.479 70.0664 li
357.897 69.166 li
357.882 69.0332 357.694 68.6143 357.657 68.4463 cv
357.599 68.2656 li
ef
366.419 67.1855 mo
364.378 67.1855 li
364.679 67.1855 li
365.361 67.2363 365.776 67.3584 365.999 68.0859 cv
365.999 68.2656 li
365.938 68.4463 li
365.938 68.626 li
365.878 68.8057 li
365.817 68.9258 li
365.698 69.0459 li
365.519 69.1064 li
365.397 69.2256 li
365.278 69.2861 li
365.038 69.2861 li
364.919 69.3457 li
362.938 69.3457 li
366.479 69.4063 li
366.538 69.2256 li
366.911 68.792 366.912 67.9756 366.657 67.4863 cv
366.538 67.3057 li
ef
366.299 64.5459 mo
364.198 64.5459 li
364.317 64.5459 li
364.558 64.6064 li
365.038 64.6064 li
365.157 64.666 li
365.338 64.7256 li
365.578 64.9658 li
365.578 65.0264 li
365.698 65.2061 li
365.698 65.7461 li
365.638 65.9258 li
365.578 66.0459 li
365.519 66.1064 li
365.278 66.3457 li
365.099 66.4063 li
364.919 66.4063 li
364.737 66.4658 li
362.938 66.4658 li
365.999 66.5264 li
366.118 66.4658 li
366.237 66.3457 li
366.299 66.166 li
366.357 66.1064 li
366.479 65.7461 li
366.538 65.626 li
366.538 65.2656 li
366.419 64.9063 li
366.357 64.7861 li
366.299 64.6064 li
ef
364.499 63.8262 mo
362.157 63.8262 li
362.157 70.0664 li
364.499 70.0664 li
365.145 70.0811 365.886 69.9775 366.357 69.5264 cv
366.479 69.4063 li
362.938 69.3457 li
362.938 67.1855 li
366.419 67.1855 li
366.179 66.9463 li
365.638 66.7656 li
365.698 66.7656 li
365.817 66.6455 li
365.999 66.5264 li
362.938 66.4658 li
362.938 64.5459 li
366.299 64.5459 li
366.179 64.4258 li
365.839 64.0234 365.353 63.9229 364.857 63.8262 cv
364.679 63.8262 li
ef
372.538 63.8262 mo
367.979 63.8262 li
367.979 70.0664 li
372.657 70.0664 li
372.657 69.3457 li
368.817 69.3457 li
368.817 67.1855 li
372.299 67.1855 li
372.299 66.4658 li
368.817 66.4658 li
368.817 64.5459 li
372.538 64.5459 li
ef
376.979 67.2461 mo
375.538 67.3057 li
376.019 67.3057 li
376.078 67.3662 li
376.198 67.4258 li
376.378 67.4863 li
376.438 67.5459 li
376.558 67.6064 li
376.679 67.7256 li
376.813 67.9219 377.12 68.4268 377.278 68.5664 cv
377.397 68.7461 li
378.237 70.0664 li
379.258 70.0664 li
378.179 68.3857 li
378.118 68.3262 li
378.058 68.2061 li
377.938 68.0264 li
377.458 67.5459 li
377.458 67.4863 li
377.338 67.4258 li
377.157 67.3057 li
ef
378.357 64.3662 mo
376.558 64.5459 li
376.618 64.5459 li
378.338 64.3955 378.378 66.7324 376.378 66.5859 cv
374.578 66.5859 li
378.357 66.6465 li
378.419 66.5264 li
378.825 66.0605 378.819 65.0723 378.479 64.6064 cv
378.419 64.5459 li
ef
376.499 63.8262 mo
373.737 63.8262 li
373.737 70.0664 li
374.578 70.0664 li
374.578 67.3057 li
375.538 67.3057 li
376.43 67.249 377.607 67.3721 378.299 66.6455 cv
378.357 66.6455 li
374.578 66.5859 li
374.578 64.5459 li
376.558 64.5459 li
378.357 64.3662 li
378.237 64.2461 li
378.058 64.1855 li
377.938 64.0664 li
377.817 64.0059 li
377.758 64.0059 li
377.638 63.9463 li
377.458 63.8857 li
377.157 63.8857 li
376.919 63.8262 li
376.737 63.8262 li
ef
380.458 68.0264 mo
379.737 68.0859 li
379.737 68.2061 li
379.736 68.6074 379.891 68.9873 380.157 69.2861 cv
380.218 69.4063 li
382.317 69.4063 li
381.838 69.4063 li
381.657 69.3457 li
381.538 69.2861 li
381.357 69.2256 li
381.118 69.1064 li
380.938 68.9863 li
380.817 68.8662 li
380.758 68.7461 li
380.698 68.6855 li
380.638 68.5059 li
380.578 68.3857 li
380.519 68.2061 li
ef
384.058 64.4258 mo
382.198 64.4863 li
382.317 64.4863 li
382.88 64.3926 383.663 64.8438 383.638 65.4463 cv
383.698 65.626 li
384.479 65.5664 li
384.479 65.3857 li
384.419 65.2061 li
384.419 65.0859 li
384.357 64.9063 li
384.237 64.7861 li
384.179 64.6064 li
ef
382.138 63.7061 mo
382.019 63.7061 li
381.838 63.7656 li
381.657 63.7656 li
381.479 63.8262 li
381.299 63.8262 li
381.179 63.8857 li
380.817 64.0059 li
380.698 64.126 li
380.578 64.1855 li
380.397 64.3057 li
380.338 64.4258 li
380.157 64.6064 li
380.038 64.9658 li
379.979 65.0859 li
379.979 65.2656 li
379.919 65.4463 li
379.979 65.5664 li
379.979 65.7461 li
380.038 65.9258 li
380.099 66.0459 li
380.157 66.2256 li
380.638 66.7061 li
380.817 66.8262 li
380.878 66.8262 li
380.938 66.8857 li
381.118 66.9463 li
381.237 66.9463 li
381.778 67.126 li
382.019 67.1855 li
382.198 67.2461 li
382.438 67.3057 li
382.618 67.3662 li
382.799 67.3662 li
382.919 67.4258 li
383.338 67.5869 383.1 67.373 383.578 67.7256 cv
383.698 67.8457 li
383.698 67.9063 li
383.817 68.0264 li
384.103 68.7314 383.349 69.4121 382.679 69.4063 cv
380.218 69.4063 li
380.338 69.5264 li
380.519 69.6455 li
380.638 69.7656 li
380.758 69.8262 li
381.034 70.0537 381.4 70.0342 381.599 70.126 cv
381.778 70.126 li
381.958 70.1855 li
382.357 70.2031 382.717 70.1768 383.099 70.0664 cv
383.278 70.0664 li
383.397 70.0059 li
383.578 69.9463 li
383.638 69.8857 li
383.758 69.8262 li
383.938 69.7061 li
384.058 69.6455 li
384.299 69.4063 li
384.357 69.2256 li
384.479 69.1064 li
384.538 68.9863 li
384.725 68.5137 384.642 68.5059 384.657 68.0264 cv
384.599 67.9063 li
384.479 67.5459 li
384.419 67.4258 li
384.299 67.3057 li
383.629 66.5107 382.517 66.5371 381.599 66.2256 cv
381.419 66.166 li
381.179 66.0459 li
380.871 65.874 380.745 65.8164 380.758 65.3857 cv
380.758 65.1455 li
381.041 64.6582 381.056 64.7021 381.599 64.4863 cv
382.198 64.4863 li
384.058 64.4258 li
383.938 64.3057 li
383.817 64.2461 li
383.698 64.126 li
383.519 64.0059 li
383.157 63.8857 li
383.038 63.8262 li
382.857 63.8262 li
382.679 63.7656 li
382.317 63.7656 li
ef
355.258 231.187 mo
355.258 224.946 li
354.479 224.946 li
354.479 231.187 li
355.258 231.187 li
cp
f
361.679 224.946 mo
360.897 224.946 li
360.897 229.866 li
360.838 231.187 li
361.679 231.187 li
ef
357.599 224.946 mo
356.758 224.946 li
356.758 231.187 li
357.538 231.187 li
357.538 226.267 li
ef
357.599 224.946 mo
357.538 226.267 li
360.838 231.187 li
360.897 229.866 li
ef
367.979 224.946 mo
367.198 224.946 li
367.198 229.866 li
367.138 231.187 li
367.979 231.187 li
ef
363.897 224.946 mo
363.058 224.946 li
363.058 231.187 li
363.838 231.187 li
363.838 226.267 li
ef
363.897 224.946 mo
363.838 226.267 li
367.138 231.187 li
367.198 229.866 li
ef
373.919 224.946 mo
369.357 224.946 li
369.357 231.187 li
374.038 231.187 li
374.038 230.466 li
370.198 230.466 li
370.198 228.306 li
373.679 228.306 li
373.679 227.586 li
370.198 227.586 li
370.198 225.666 li
373.919 225.666 li
ef
378.419 228.366 mo
376.979 228.426 li
377.458 228.426 li
377.519 228.485 li
377.638 228.546 li
377.817 228.606 li
377.878 228.666 li
377.999 228.726 li
378.118 228.847 li
378.254 229.042 378.562 229.547 378.718 229.687 cv
378.838 229.866 li
379.679 231.187 li
380.698 231.187 li
379.618 229.506 li
379.558 229.446 li
379.499 229.326 li
379.378 229.146 li
378.897 228.666 li
378.897 228.606 li
378.778 228.546 li
378.599 228.426 li
ef
379.799 225.485 mo
377.999 225.666 li
378.058 225.666 li
379.778 225.515 379.817 227.853 377.817 227.706 cv
376.019 227.706 li
379.799 227.767 li
379.857 227.646 li
380.266 227.181 380.259 226.192 379.919 225.726 cv
379.857 225.666 li
ef
377.938 224.946 mo
375.179 224.946 li
375.179 231.187 li
376.019 231.187 li
376.019 228.426 li
376.979 228.426 li
377.87 228.368 379.048 228.492 379.737 227.767 cv
379.799 227.767 li
376.019 227.706 li
376.019 225.666 li
377.999 225.666 li
379.799 225.485 li
379.679 225.366 li
379.499 225.306 li
379.378 225.187 li
379.258 225.126 li
379.198 225.126 li
379.078 225.065 li
378.897 225.006 li
378.599 225.006 li
378.357 224.946 li
378.179 224.946 li
ef
388.198 224.946 mo
383.999 224.946 li
383.999 231.187 li
384.838 231.187 li
384.838 228.366 li
387.718 228.366 li
387.718 227.646 li
384.838 227.646 li
384.838 225.666 li
388.198 225.666 li
ef
390.179 231.187 mo
390.179 224.946 li
389.397 224.946 li
389.397 231.187 li
390.179 231.187 li
cp
f
396.179 224.946 mo
391.618 224.946 li
391.618 231.187 li
396.299 231.187 li
396.299 230.466 li
392.458 230.466 li
392.458 228.306 li
395.938 228.306 li
395.938 227.586 li
392.458 227.586 li
392.458 225.666 li
396.179 225.666 li
ef
398.157 224.946 mo
397.378 224.946 li
397.378 231.187 li
401.218 231.187 li
401.218 230.466 li
398.157 230.466 li
ef
406.499 225.606 mo
404.338 225.666 li
404.397 225.666 li
404.578 225.726 li
405.118 225.726 li
405.299 225.786 li
405.357 225.847 li
405.419 225.847 li
405.538 225.906 li
405.718 225.966 li
405.958 226.206 li
406.078 226.386 li
406.198 226.506 li
406.258 226.626 li
406.317 226.806 li
406.317 226.926 li
406.378 227.106 li
406.438 227.226 li
406.438 227.406 li
406.499 227.586 li
406.499 228.246 li
406.397 229.504 405.997 230.418 404.578 230.466 cv
403.019 230.466 li
406.499 230.466 li
407.556 229.524 407.634 226.908 406.679 225.847 cv
406.618 225.726 li
ef
404.338 224.946 mo
402.179 224.946 li
402.179 231.187 li
404.458 231.187 li
405.138 231.187 405.887 231.085 406.378 230.586 cv
406.499 230.466 li
403.019 230.466 li
403.019 225.666 li
404.338 225.666 li
406.499 225.606 li
406.378 225.485 li
405.427 224.899 405.755 225.147 404.758 224.946 cv
404.578 224.946 li
ef
358.737 237.946 mo
358.679 238.126 li
358.526 238.513 358.524 238.771 358.198 239.026 cv
358.078 239.086 li
358.078 239.146 li
357.897 239.267 li
357.503 239.423 357.382 239.548 356.938 239.506 cv
355.078 239.626 li
355.198 239.687 li
355.378 239.806 li
355.499 239.866 li
355.751 239.983 356.012 240.081 356.278 240.166 cv
356.638 240.166 li
356.817 240.226 li
357.237 240.226 li
357.419 240.166 li
357.599 240.166 li
357.778 240.106 li
357.897 240.046 li
358.078 239.985 li
358.552 239.856 358.292 239.808 358.737 239.626 cv
358.979 239.386 li
359.038 239.267 li
359.157 239.086 li
359.218 238.966 li
359.338 238.847 li
359.578 238.126 li
ef
358.857 234.466 mo
356.999 234.466 li
357.058 234.466 li
357.931 234.558 358.241 234.856 358.618 235.606 cv
358.679 235.786 li
359.458 235.606 li
359.458 235.485 li
359.338 235.126 li
359.218 235.006 li
359.157 234.826 li
358.919 234.586 li
ef
356.999 233.746 mo
356.817 233.806 li
356.638 233.806 li
355.47 233.858 354.44 234.771 354.179 235.906 cv
354.179 236.026 li
354.118 236.206 li
354.118 236.386 li
353.983 236.838 354.063 237.381 354.179 237.826 cv
354.179 237.946 li
354.357 238.485 li
354.419 238.606 li
354.538 238.966 li
354.778 239.206 li
354.838 239.386 li
355.078 239.626 li
356.938 239.506 li
356.698 239.506 li
355.308 239.299 355.017 238.323 354.897 237.106 cv
354.897 236.746 li
354.958 236.565 li
354.958 236.267 li
355.138 235.726 li
355.138 235.606 li
355.258 235.426 li
355.317 235.306 li
355.857 234.767 li
355.979 234.706 li
356.157 234.646 li
356.278 234.586 li
356.458 234.526 li
356.638 234.526 li
356.817 234.466 li
358.857 234.466 li
358.737 234.347 li
358.558 234.226 li
358.499 234.166 li
358.317 234.106 li
358.198 234.046 li
358.078 233.926 li
357.897 233.926 li
357.718 233.866 li
357.538 233.806 li
357.179 233.806 li
ef
363.179 233.866 mo
362.338 233.866 li
359.938 240.106 li
360.778 240.106 li
361.499 238.246 li
364.078 238.246 li
361.737 237.526 li
362.397 235.726 li
362.552 235.259 362.604 235.187 362.698 234.706 cv
362.758 234.526 li
ef
363.179 233.866 mo
362.758 234.526 li
362.779 234.821 363.134 235.464 363.179 235.847 cv
363.838 237.526 li
361.737 237.526 li
364.078 238.246 li
364.799 240.106 li
365.758 240.106 li
ef
371.999 236.926 mo
369.357 236.926 li
369.357 237.646 li
371.157 237.646 li
371.157 238.847 li
371.038 238.906 li
370.637 239.246 369.905 239.506 369.357 239.446 cv
367.317 239.506 li
367.558 239.746 li
368.258 240.056 368.72 240.247 369.538 240.226 cv
369.718 240.226 li
369.897 240.166 li
370.078 240.166 li
370.198 240.106 li
370.378 240.046 li
370.558 240.046 li
370.737 239.985 li
370.799 239.926 li
370.919 239.866 li
371.099 239.806 li
371.218 239.746 li
371.397 239.626 li
371.519 239.565 li
371.698 239.446 li
371.817 239.326 li
371.999 239.267 li
ef
371.278 234.466 mo
369.357 234.466 li
369.538 234.466 li
370.441 234.657 370.666 234.75 371.099 235.606 cv
371.157 235.847 li
371.878 235.606 li
371.878 235.546 li
371.722 234.953 371.673 235.09 371.519 234.706 cv
371.397 234.586 li
ef
369.357 233.746 mo
369.179 233.746 li
368.999 233.806 li
368.638 233.806 li
368.458 233.866 li
368.338 233.926 li
368.157 233.985 li
367.979 233.985 li
367.857 234.106 li
367.679 234.166 li
367.618 234.166 li
367.499 234.286 li
367.317 234.406 li
367.198 234.466 li
366.958 234.706 li
366.897 234.886 li
366.778 235.006 li
366.657 235.187 li
366.599 235.306 li
366.599 235.366 li
366.538 235.485 li
366.419 235.847 li
366.357 235.966 li
366.059 237.153 366.235 238.588 367.198 239.446 cv
367.317 239.506 li
369.357 239.446 li
369.179 239.446 li
366.286 239.457 366.349 234.31 369.357 234.466 cv
371.278 234.466 li
371.157 234.347 li
370.838 234.004 370.171 233.829 369.718 233.806 cv
369.538 233.806 li
ef
377.698 233.866 mo
373.138 233.866 li
373.138 240.106 li
377.817 240.106 li
377.817 239.386 li
373.979 239.386 li
373.979 237.226 li
377.458 237.226 li
377.458 236.506 li
373.979 236.506 li
373.979 234.586 li
377.698 234.586 li
ef
247.138 204.847 mo
247.078 205.026 li
246.928 205.413 246.925 205.671 246.599 205.926 cv
246.479 205.985 li
246.479 206.046 li
246.299 206.166 li
245.903 206.323 245.78 206.448 245.338 206.406 cv
243.479 206.526 li
243.599 206.586 li
243.778 206.706 li
243.897 206.767 li
244.15 206.883 244.412 206.981 244.679 207.065 cv
245.038 207.065 li
245.218 207.126 li
245.638 207.126 li
245.817 207.065 li
245.999 207.065 li
246.179 207.006 li
246.299 206.946 li
246.479 206.886 li
246.952 206.756 246.691 206.708 247.138 206.526 cv
247.378 206.286 li
247.438 206.166 li
247.558 205.985 li
247.618 205.866 li
247.737 205.746 li
247.979 205.026 li
ef
247.258 201.366 mo
245.397 201.366 li
245.458 201.366 li
246.331 201.457 246.641 201.756 247.019 202.506 cv
247.078 202.687 li
247.857 202.506 li
247.857 202.386 li
247.737 202.026 li
247.618 201.906 li
247.558 201.726 li
247.317 201.485 li
ef
245.397 200.646 mo
245.218 200.706 li
245.038 200.706 li
243.87 200.758 242.841 201.671 242.578 202.806 cv
242.578 202.926 li
242.519 203.106 li
242.519 203.286 li
242.384 203.737 242.464 204.281 242.578 204.726 cv
242.578 204.847 li
242.758 205.386 li
242.817 205.506 li
242.938 205.866 li
243.179 206.106 li
243.237 206.286 li
243.479 206.526 li
245.338 206.406 li
245.099 206.406 li
243.707 206.199 243.417 205.224 243.299 204.006 cv
243.299 203.646 li
243.357 203.466 li
243.357 203.166 li
243.538 202.626 li
243.538 202.506 li
243.657 202.326 li
243.718 202.206 li
244.258 201.666 li
244.378 201.606 li
244.558 201.546 li
244.679 201.485 li
244.857 201.426 li
245.038 201.426 li
245.218 201.366 li
247.258 201.366 li
247.138 201.246 li
246.958 201.126 li
246.897 201.065 li
246.718 201.006 li
246.599 200.946 li
246.479 200.826 li
246.299 200.826 li
245.938 200.706 li
245.578 200.706 li
ef
253.558 200.767 mo
248.999 200.767 li
248.999 207.006 li
253.679 207.006 li
253.679 206.286 li
249.838 206.286 li
249.838 204.126 li
253.317 204.126 li
253.317 203.406 li
249.838 203.406 li
249.838 201.485 li
253.558 201.485 li
ef
259.737 200.767 mo
258.958 200.767 li
258.958 205.687 li
258.897 207.006 li
259.737 207.006 li
ef
255.657 200.767 mo
254.817 200.767 li
254.817 207.006 li
255.599 207.006 li
255.599 202.086 li
ef
255.657 200.767 mo
255.599 202.086 li
258.897 207.006 li
258.958 205.687 li
ef
265.618 200.767 mo
260.638 200.767 li
260.638 201.485 li
262.737 201.485 li
262.737 207.006 li
263.519 207.006 li
263.519 201.485 li
265.618 201.485 li
ef
269.698 204.187 mo
268.258 204.246 li
268.737 204.246 li
268.799 204.306 li
268.919 204.366 li
269.099 204.426 li
269.157 204.485 li
269.278 204.546 li
269.397 204.666 li
269.534 204.862 269.841 205.367 269.999 205.506 cv
270.118 205.687 li
270.958 207.006 li
271.979 207.006 li
270.897 205.326 li
270.838 205.267 li
270.778 205.146 li
270.657 204.966 li
270.179 204.485 li
270.179 204.426 li
270.058 204.366 li
269.878 204.246 li
ef
271.078 201.306 mo
269.278 201.485 li
269.338 201.485 li
271.058 201.335 271.099 203.672 269.099 203.526 cv
267.299 203.526 li
271.078 203.586 li
271.138 203.466 li
271.545 203.001 271.54 202.013 271.198 201.546 cv
271.138 201.485 li
ef
269.218 200.767 mo
266.458 200.767 li
266.458 207.006 li
267.299 207.006 li
267.299 204.246 li
268.258 204.246 li
269.149 204.188 270.327 204.312 271.019 203.586 cv
271.078 203.586 li
267.299 203.526 li
267.299 201.485 li
269.278 201.485 li
271.078 201.306 li
270.958 201.187 li
270.778 201.126 li
270.657 201.006 li
270.538 200.946 li
270.479 200.946 li
270.357 200.886 li
270.179 200.826 li
269.878 200.826 li
269.638 200.767 li
269.458 200.767 li
ef
275.338 200.767 mo
274.499 200.767 li
272.099 207.006 li
272.938 207.006 li
273.657 205.146 li
276.237 205.146 li
273.897 204.426 li
274.558 202.626 li
274.712 202.159 274.765 202.086 274.857 201.606 cv
274.919 201.426 li
ef
275.338 200.767 mo
274.919 201.426 li
274.94 201.722 275.295 202.364 275.338 202.746 cv
275.999 204.426 li
273.897 204.426 li
276.237 205.146 li
276.958 207.006 li
277.919 207.006 li
ef
279.357 200.767 mo
278.578 200.767 li
278.578 207.006 li
282.419 207.006 li
282.419 206.286 li
279.357 206.286 li
ef
290.698 200.767 mo
289.857 200.767 li
289.857 203.347 li
286.618 203.347 li
289.857 204.065 li
289.857 207.006 li
290.698 207.006 li
ef
286.618 200.767 mo
285.838 200.767 li
285.838 207.006 li
286.618 207.006 li
286.618 204.065 li
289.857 204.065 li
286.618 203.347 li
ef
297.118 200.767 mo
296.278 200.767 li
294.599 205.326 li
294.538 205.326 li
294.479 205.506 li
294.335 205.776 294.372 206.069 294.237 206.347 cv
293.817 207.006 li
294.657 207.006 li
ef
292.317 200.767 mo
291.419 200.767 li
293.817 207.006 li
294.237 206.347 li
294.237 206.286 li
294.179 206.166 li
293.999 205.626 li
293.999 205.506 li
293.878 205.326 li
ef
247.499 209.506 mo
242.938 209.506 li
242.938 215.746 li
247.618 215.746 li
247.618 215.026 li
243.778 215.026 li
243.778 212.866 li
247.258 212.866 li
247.258 212.146 li
243.778 212.146 li
243.778 210.226 li
247.499 210.226 li
ef
249.538 209.506 mo
248.758 209.506 li
248.758 215.746 li
252.599 215.746 li
252.599 215.026 li
249.538 215.026 li
ef
258.179 209.506 mo
253.618 209.506 li
253.618 215.746 li
258.299 215.746 li
258.299 215.026 li
254.458 215.026 li
254.458 212.866 li
257.938 212.866 li
257.938 212.146 li
254.458 212.146 li
254.458 210.226 li
258.179 210.226 li
ef
263.878 213.586 mo
263.817 213.767 li
263.667 214.153 263.666 214.411 263.338 214.666 cv
263.218 214.726 li
263.218 214.786 li
263.038 214.906 li
262.644 215.063 262.521 215.188 262.078 215.146 cv
260.218 215.267 li
260.338 215.326 li
260.519 215.446 li
260.638 215.506 li
260.891 215.623 261.151 215.722 261.419 215.806 cv
261.778 215.806 li
261.958 215.866 li
262.378 215.866 li
262.558 215.806 li
262.737 215.806 li
262.919 215.746 li
263.038 215.687 li
263.218 215.626 li
263.69 215.496 263.431 215.448 263.878 215.267 cv
264.118 215.026 li
264.179 214.906 li
264.299 214.726 li
264.357 214.606 li
264.479 214.485 li
264.718 213.767 li
ef
263.999 210.106 mo
262.138 210.106 li
262.198 210.106 li
263.07 210.196 263.382 210.496 263.758 211.246 cv
263.817 211.426 li
264.599 211.246 li
264.599 211.126 li
264.479 210.767 li
264.357 210.646 li
264.299 210.466 li
264.058 210.226 li
ef
262.138 209.386 mo
261.958 209.446 li
261.778 209.446 li
260.61 209.498 259.582 210.411 259.317 211.546 cv
259.317 211.666 li
259.258 211.847 li
259.258 212.026 li
259.124 212.478 259.204 213.021 259.317 213.466 cv
259.317 213.586 li
259.499 214.126 li
259.558 214.246 li
259.679 214.606 li
259.919 214.847 li
259.979 215.026 li
260.218 215.267 li
262.078 215.146 li
261.838 215.146 li
260.445 214.938 260.157 213.963 260.038 212.746 cv
260.038 212.386 li
260.099 212.206 li
260.099 211.906 li
260.278 211.366 li
260.278 211.246 li
260.397 211.065 li
260.458 210.946 li
260.999 210.406 li
261.118 210.347 li
261.299 210.286 li
261.419 210.226 li
261.599 210.166 li
261.778 210.166 li
261.958 210.106 li
263.999 210.106 li
263.878 209.985 li
263.698 209.866 li
263.638 209.806 li
263.458 209.746 li
263.338 209.687 li
263.218 209.565 li
263.038 209.565 li
262.679 209.446 li
262.317 209.446 li
ef
270.237 209.506 mo
265.258 209.506 li
265.258 210.226 li
267.357 210.226 li
267.357 215.746 li
268.138 215.746 li
268.138 210.226 li
270.237 210.226 li
ef
274.317 212.926 mo
272.878 212.985 li
273.357 212.985 li
273.419 213.046 li
273.538 213.106 li
273.718 213.166 li
273.778 213.226 li
273.897 213.286 li
274.019 213.406 li
274.153 213.603 274.46 214.106 274.618 214.246 cv
274.737 214.426 li
275.578 215.746 li
276.599 215.746 li
275.519 214.065 li
275.458 214.006 li
275.397 213.886 li
275.278 213.706 li
274.799 213.226 li
274.799 213.166 li
274.679 213.106 li
274.499 212.985 li
ef
275.698 210.046 mo
273.897 210.226 li
273.958 210.226 li
275.679 210.075 275.718 212.412 273.718 212.267 cv
271.919 212.267 li
275.698 212.326 li
275.758 212.206 li
276.166 211.741 276.158 210.752 275.817 210.286 cv
275.758 210.226 li
ef
273.838 209.506 mo
271.078 209.506 li
271.078 215.746 li
271.919 215.746 li
271.919 212.985 li
272.878 212.985 li
273.77 212.929 274.946 213.052 275.638 212.326 cv
275.698 212.326 li
271.919 212.267 li
271.919 210.226 li
273.897 210.226 li
275.698 210.046 li
275.578 209.926 li
275.397 209.866 li
275.278 209.746 li
275.157 209.687 li
275.099 209.687 li
274.979 209.626 li
274.799 209.565 li
274.499 209.565 li
274.258 209.506 li
274.078 209.506 li
ef
278.218 210.046 mo
277.919 210.347 li
277.607 210.599 277.198 211.58 277.198 211.966 cv
277.198 212.146 li
277.138 212.326 li
277.108 213.104 277.17 213.53 277.499 214.246 cv
277.499 214.306 li
277.618 214.485 li
277.679 214.606 li
277.919 214.847 li
277.979 215.026 li
278.157 215.146 li
278.278 215.206 li
278.519 215.446 li
278.638 215.506 li
278.758 215.565 li
279.118 215.687 li
279.237 215.746 li
279.419 215.806 li
279.778 215.806 li
279.958 215.866 li
280.317 215.866 li
280.499 215.806 li
280.679 215.806 li
280.857 215.746 li
280.979 215.746 li
281.157 215.687 li
281.338 215.626 li
281.458 215.565 li
281.817 215.326 li
281.938 215.267 li
282.058 215.146 li
280.078 215.146 li
278.837 215.124 278.013 214.125 277.979 212.926 cv
277.979 212.565 li
278.007 211.388 278.491 210.329 279.778 210.166 cv
279.958 210.106 li
280.138 210.106 li
ef
280.138 209.386 mo
280.078 209.386 li
279.47 209.442 278.86 209.563 278.338 209.926 cv
278.218 210.046 li
280.138 210.106 li
280.258 210.106 li
280.438 210.166 li
280.813 210.157 281.167 210.38 281.458 210.586 cv
281.578 210.706 li
281.698 210.886 li
281.938 211.126 li
281.999 211.306 li
282.058 211.426 li
282.118 211.606 li
282.118 211.726 li
282.179 211.906 li
282.179 212.086 li
282.237 212.267 li
282.237 212.626 li
282.272 213.909 281.746 214.829 280.438 215.146 cv
280.138 215.146 li
282.058 215.146 li
283.915 213.528 283.224 209.578 280.499 209.446 cv
280.317 209.386 li
ef
288.419 210.166 mo
286.258 210.226 li
286.317 210.226 li
286.499 210.286 li
287.038 210.286 li
287.218 210.347 li
287.278 210.406 li
287.338 210.406 li
287.458 210.466 li
287.638 210.526 li
287.878 210.767 li
287.999 210.946 li
288.118 211.065 li
288.179 211.187 li
288.237 211.366 li
288.237 211.485 li
288.299 211.666 li
288.357 211.786 li
288.357 211.966 li
288.419 212.146 li
288.419 212.806 li
288.316 214.063 287.917 214.978 286.499 215.026 cv
284.938 215.026 li
288.419 215.026 li
289.476 214.084 289.554 211.468 288.599 210.406 cv
288.538 210.286 li
ef
286.258 209.506 mo
284.099 209.506 li
284.099 215.746 li
286.378 215.746 li
287.058 215.747 287.806 215.646 288.299 215.146 cv
288.419 215.026 li
284.938 215.026 li
284.938 210.226 li
286.258 210.226 li
288.419 210.166 li
288.299 210.046 li
287.347 209.458 287.675 209.708 286.679 209.506 cv
286.499 209.506 li
ef
294.897 209.506 mo
290.338 209.506 li
290.338 215.746 li
295.019 215.746 li
295.019 215.026 li
291.179 215.026 li
291.179 212.866 li
294.657 212.866 li
294.657 212.146 li
291.179 212.146 li
291.179 210.226 li
294.897 210.226 li
ef
109.079 64.8057 mo
107.038 56.4658 li
111.178 56.4658 li
ef
109.079 56.4658 mo
109.079 20.8857 li
@
95.9985 4.38574 mo
95.7583 4.62598 li
95.6978 4.68555 li
95.3872 4.93945 94.978 5.91992 94.978 6.30566 cv
94.978 6.48633 li
94.9185 6.66602 li
94.8892 7.44434 94.9497 7.87012 95.2778 8.58594 cv
95.2778 8.64551 li
95.3979 8.82617 li
95.4575 8.94629 li
95.6978 9.18555 li
95.7583 9.36621 li
95.938 9.48633 li
96.0581 9.5459 li
96.1782 9.66602 li
96.2983 9.78613 li
96.5376 9.90625 li
96.8979 10.0264 li
97.0181 10.0859 li
97.1978 10.1455 li
97.5581 10.1455 li
97.7388 10.2061 li
98.0981 10.2061 li
98.2778 10.1455 li
98.4575 10.1455 li
98.6382 10.0859 li
98.7583 10.0859 li
99.1177 9.96582 li
99.2388 9.90625 li
99.4185 9.78613 li
99.5981 9.66602 li
99.7183 9.60645 li
99.8384 9.48633 li
97.8579 9.48633 li
96.6177 9.46387 95.7935 8.46484 95.7583 7.26563 cv
95.7583 6.90625 li
95.7856 5.72656 96.272 4.66895 97.5581 4.50586 cv
97.7388 4.44629 li
97.9185 4.44629 li
ef
97.9185 3.72559 mo
97.8579 3.72559 li
97.2485 3.78223 96.6401 3.90332 96.1177 4.26563 cv
95.9985 4.38574 li
97.9185 4.44629 li
98.0376 4.44629 li
98.2183 4.50586 li
98.5933 4.49707 98.9478 4.71973 99.2388 4.92578 cv
99.3579 5.0459 li
99.478 5.22559 li
99.7183 5.46582 li
99.7778 5.64551 li
99.8384 5.76563 li
99.8979 5.94629 li
99.8979 6.06641 li
99.9575 6.24609 li
99.9575 6.42578 li
100.018 6.60645 li
100.018 6.96582 li
100.052 8.24902 99.5259 9.16895 98.2183 9.48633 cv
97.9185 9.48633 li
99.8384 9.48633 li
101.694 7.86816 101.003 3.91797 98.2778 3.78613 cv
98.0981 3.72559 li
ef
106.858 3.8457 mo
106.018 3.8457 li
106.018 7.44629 li
106.038 7.9668 106.002 8.49414 105.718 8.94629 cv
105.659 9.06641 li
105.598 9.06641 li
105.418 9.24609 li
105.239 9.30566 li
105.118 9.36621 li
104.938 9.36621 li
104.758 9.42578 li
104.338 9.42578 li
102.478 9.48633 li
102.718 9.72559 li
103.439 10.1885 104.483 10.333 105.298 10.0859 cv
105.478 10.0264 li
105.598 9.96582 li
106.509 9.65332 106.805 8.73633 106.858 7.86621 cv
106.858 7.44629 li
ef
102.778 3.8457 mo
101.938 3.8457 li
101.938 7.44629 li
101.991 8.08496 102.006 8.75684 102.358 9.30566 cv
102.478 9.48633 li
104.338 9.42578 li
104.278 9.42578 li
103.077 9.41602 102.829 8.72363 102.778 7.68652 cv
102.778 7.44629 li
ef
112.739 3.8457 mo
107.758 3.8457 li
107.758 4.56641 li
109.858 4.56641 li
109.858 10.0859 li
110.638 10.0859 li
110.638 4.56641 li
112.739 4.56641 li
ef
118.138 3.8457 mo
113.579 3.8457 li
113.579 10.0859 li
118.258 10.0859 li
118.258 9.36621 li
114.418 9.36621 li
114.418 7.20605 li
117.898 7.20605 li
117.898 6.48633 li
114.418 6.48633 li
114.418 4.56641 li
118.138 4.56641 li
ef
122.638 7.26563 mo
121.198 7.32617 li
121.678 7.32617 li
121.739 7.38574 li
121.858 7.44629 li
122.038 7.50586 li
122.098 7.56641 li
122.218 7.62598 li
122.338 7.74609 li
122.474 7.94238 122.78 8.44727 122.938 8.58594 cv
123.058 8.76563 li
123.898 10.0859 li
124.918 10.0859 li
123.838 8.40625 li
123.778 8.3457 li
123.718 8.22559 li
123.598 8.0459 li
123.118 7.56641 li
123.118 7.50586 li
122.999 7.44629 li
122.819 7.32617 li
ef
124.018 4.38574 mo
122.218 4.56641 li
122.278 4.56641 li
123.999 4.41504 124.038 6.75195 122.038 6.60645 cv
120.239 6.60645 li
124.018 6.66602 li
124.079 6.5459 li
124.485 6.08105 124.479 5.0918 124.138 4.62598 cv
124.079 4.56641 li
ef
122.159 3.8457 mo
119.398 3.8457 li
119.398 10.0859 li
120.239 10.0859 li
120.239 7.32617 li
121.198 7.32617 li
122.09 7.26758 123.267 7.3916 123.958 6.66602 cv
124.018 6.66602 li
120.239 6.60645 li
120.239 4.56641 li
122.218 4.56641 li
124.018 4.38574 li
123.898 4.26563 li
123.718 4.20605 li
123.598 4.08594 li
123.478 4.02637 li
123.418 4.02637 li
123.298 3.96582 li
123.118 3.90625 li
122.819 3.90625 li
122.579 3.8457 li
122.398 3.8457 li
ef
132.418 3.8457 mo
128.218 3.8457 li
128.218 10.0859 li
129.058 10.0859 li
129.058 7.26563 li
131.938 7.26563 li
131.938 6.5459 li
129.058 6.5459 li
129.058 4.56641 li
132.418 4.56641 li
ef
134.398 10.0859 mo
134.398 3.8457 li
133.618 3.8457 li
133.618 10.0859 li
134.398 10.0859 li
cp
f
140.398 3.8457 mo
135.838 3.8457 li
135.838 10.0859 li
140.518 10.0859 li
140.518 9.36621 li
136.678 9.36621 li
136.678 7.20605 li
140.159 7.20605 li
140.159 6.48633 li
136.678 6.48633 li
136.678 4.56641 li
140.398 4.56641 li
ef
142.377 3.8457 mo
141.598 3.8457 li
141.598 10.0859 li
145.438 10.0859 li
145.438 9.36621 li
142.377 9.36621 li
ef
150.718 4.50586 mo
148.558 4.56641 li
148.618 4.56641 li
148.798 4.62598 li
149.338 4.62598 li
149.518 4.68555 li
149.579 4.74609 li
149.638 4.74609 li
149.758 4.80566 li
149.938 4.86621 li
150.178 5.10645 li
150.298 5.28613 li
150.418 5.40625 li
150.478 5.52637 li
150.538 5.70605 li
150.538 5.82617 li
150.598 6.00586 li
150.659 6.12598 li
150.659 6.30566 li
150.718 6.48633 li
150.718 7.14551 li
150.618 8.4043 150.217 9.31836 148.798 9.36621 cv
147.239 9.36621 li
150.718 9.36621 li
151.776 8.42285 151.854 5.80762 150.898 4.74609 cv
150.838 4.62598 li
ef
148.558 3.8457 mo
146.398 3.8457 li
146.398 10.0859 li
148.678 10.0859 li
149.358 10.0869 150.106 9.98535 150.598 9.48633 cv
150.718 9.36621 li
147.239 9.36621 li
147.239 4.56641 li
148.558 4.56641 li
150.718 4.50586 li
150.598 4.38574 li
149.647 3.79785 149.975 4.04785 148.978 3.8457 cv
148.798 3.8457 li
ef
99.5376 16.2461 mo
99.478 16.4258 li
99.3267 16.8135 99.3247 17.0713 98.9985 17.3262 cv
98.8784 17.3857 li
98.8784 17.4463 li
98.6978 17.5664 li
98.3032 17.7227 98.1812 17.8477 97.7388 17.8057 cv
95.8784 17.9258 li
95.9985 17.9863 li
96.1782 18.1064 li
96.2983 18.166 li
96.5513 18.2832 96.812 18.3809 97.0786 18.4658 cv
97.438 18.4658 li
97.6177 18.5264 li
98.0376 18.5264 li
98.2183 18.4658 li
98.3979 18.4658 li
98.5786 18.4063 li
98.6978 18.3457 li
98.8784 18.2861 li
99.3511 18.1563 99.0923 18.1084 99.5376 17.9258 cv
99.7778 17.6855 li
99.8384 17.5664 li
99.9575 17.3857 li
100.018 17.2656 li
100.138 17.1465 li
100.378 16.4258 li
ef
99.6587 12.7656 mo
97.7983 12.7656 li
97.8579 12.7656 li
98.73 12.8574 99.0415 13.1563 99.4185 13.9063 cv
99.478 14.0859 li
100.258 13.9063 li
100.258 13.7861 li
100.138 13.4258 li
100.018 13.3057 li
99.9575 13.126 li
99.7183 12.8857 li
ef
97.7983 12.0459 mo
97.6177 12.1064 li
97.438 12.1064 li
96.269 12.1582 95.2407 13.0713 94.978 14.2061 cv
94.978 14.3262 li
94.9185 14.5059 li
94.9185 14.6855 li
94.7837 15.1377 94.8638 15.6807 94.978 16.126 cv
94.978 16.2461 li
95.1587 16.7861 li
95.2183 16.9063 li
95.3384 17.2656 li
95.5786 17.5059 li
95.6382 17.6855 li
95.8784 17.9258 li
97.7388 17.8057 li
97.4985 17.8057 li
96.1069 17.5986 95.8169 16.623 95.6978 15.4063 cv
95.6978 15.0459 li
95.7583 14.8662 li
95.7583 14.5664 li
95.938 14.0264 li
95.938 13.9063 li
96.0581 13.7256 li
96.1177 13.6064 li
96.3579 13.3662 li
96.478 13.2461 li
96.6587 13.0664 li
96.7778 13.0059 li
96.9575 12.9463 li
97.0786 12.8857 li
97.2583 12.8262 li
97.438 12.8262 li
97.6177 12.7656 li
99.6587 12.7656 li
99.5376 12.6455 li
99.3579 12.5264 li
99.2983 12.4658 li
99.1177 12.4063 li
98.9985 12.3457 li
98.8784 12.2256 li
98.6978 12.2256 li
98.3384 12.1064 li
97.978 12.1064 li
ef
103.978 12.166 mo
103.138 12.166 li
100.739 18.4063 li
101.579 18.4063 li
102.298 16.5459 li
104.878 16.5459 li
102.538 15.8262 li
103.198 14.0264 li
103.352 13.5586 103.405 13.4863 103.499 13.0059 cv
103.558 12.8262 li
ef
103.978 12.166 mo
103.558 12.8262 li
103.579 13.1211 103.934 13.7637 103.978 14.1455 cv
104.638 15.8262 li
102.538 15.8262 li
104.878 16.5459 li
105.598 18.4063 li
106.558 18.4063 li
ef
112.798 15.2256 mo
110.159 15.2256 li
110.159 15.9463 li
111.958 15.9463 li
111.958 17.1455 li
111.838 17.2061 li
111.437 17.5459 110.706 17.8057 110.159 17.7461 cv
108.118 17.8057 li
108.358 18.0459 li
109.058 18.3564 109.519 18.5469 110.338 18.5264 cv
110.518 18.5264 li
110.698 18.4658 li
110.878 18.4658 li
110.999 18.4063 li
111.178 18.3457 li
111.358 18.3457 li
111.538 18.2861 li
111.598 18.2256 li
111.718 18.166 li
111.898 18.1064 li
112.018 18.0459 li
112.198 17.9258 li
112.319 17.8662 li
112.499 17.7461 li
112.618 17.626 li
112.798 17.5664 li
ef
112.079 12.7656 mo
110.159 12.7656 li
110.338 12.7656 li
111.243 12.957 111.465 13.0498 111.898 13.9063 cv
111.958 14.1455 li
112.678 13.9063 li
112.678 13.8457 li
112.522 13.2529 112.472 13.3896 112.319 13.0059 cv
112.198 12.8857 li
ef
110.159 12.0459 mo
109.978 12.0459 li
109.798 12.1064 li
109.438 12.1064 li
109.258 12.166 li
109.138 12.2256 li
108.958 12.2861 li
108.778 12.2861 li
108.659 12.4063 li
108.478 12.4658 li
108.418 12.4658 li
108.298 12.5859 li
108.118 12.7061 li
107.999 12.7656 li
107.758 13.0059 li
107.698 13.1855 li
107.579 13.3057 li
107.458 13.4863 li
107.398 13.6064 li
107.398 13.666 li
107.338 13.7861 li
107.218 14.1455 li
107.159 14.2656 li
106.86 15.4541 107.036 16.8877 107.999 17.7461 cv
108.118 17.8057 li
110.159 17.7461 li
109.978 17.7461 li
107.084 17.7568 107.148 12.6104 110.159 12.7656 cv
112.079 12.7656 li
111.958 12.6455 li
111.64 12.3047 110.97 12.1279 110.518 12.1064 cv
110.338 12.1064 li
ef
118.499 12.166 mo
113.938 12.166 li
113.938 18.4063 li
118.618 18.4063 li
118.618 17.6855 li
114.778 17.6855 li
114.778 15.5264 li
118.258 15.5264 li
118.258 14.8057 li
114.778 14.8057 li
114.778 12.8857 li
118.499 12.8857 li
ef
246.058 18.9658 mo
253.919 15.5459 li
254.578 19.626 li
ef
254.218 17.5859 mo
299.038 10.2061 li
@
304.679 9.60645 mo
304.618 9.78613 li
304.467 10.1729 304.466 10.4307 304.138 10.6855 cv
304.019 10.7461 li
304.019 10.8057 li
303.838 10.9258 li
303.442 11.083 303.32 11.208 302.878 11.166 cv
301.019 11.2861 li
301.138 11.3457 li
301.317 11.4658 li
301.438 11.5264 li
301.69 11.6426 301.952 11.7412 302.218 11.8262 cv
302.578 11.8262 li
302.758 11.8857 li
303.179 11.8857 li
303.357 11.8262 li
303.538 11.8262 li
303.718 11.7656 li
303.838 11.7061 li
304.019 11.6455 li
304.491 11.5156 304.232 11.4678 304.679 11.2861 cv
304.919 11.0459 li
304.979 10.9258 li
305.099 10.7461 li
305.157 10.626 li
305.278 10.5059 li
305.519 9.78613 li
ef
304.799 6.12598 mo
302.938 6.12598 li
302.999 6.12598 li
303.87 6.2168 304.181 6.51563 304.558 7.26563 cv
304.618 7.44629 li
305.397 7.26563 li
305.397 7.14648 li
305.278 6.78613 li
305.157 6.66602 li
305.099 6.48633 li
304.857 6.24609 li
ef
302.938 5.40625 mo
302.758 5.46582 li
302.578 5.46582 li
301.411 5.51758 300.382 6.43066 300.118 7.56641 cv
300.118 7.68652 li
300.058 7.86621 li
300.058 8.0459 li
299.924 8.49805 300.004 9.04102 300.118 9.48633 cv
300.118 9.60645 li
300.299 10.1465 li
300.357 10.2656 li
300.479 10.626 li
300.599 10.7461 li
300.718 10.8662 li
300.778 11.0459 li
301.019 11.2861 li
302.878 11.166 li
302.638 11.166 li
301.247 10.959 300.957 9.9834 300.838 8.76563 cv
300.838 8.40625 li
300.897 8.22559 li
300.897 7.92578 li
301.078 7.38574 li
301.078 7.26563 li
301.198 7.08594 li
301.258 6.96582 li
301.799 6.42578 li
301.919 6.36621 li
302.099 6.30566 li
302.218 6.24609 li
302.397 6.18652 li
302.578 6.18652 li
302.758 6.12598 li
304.799 6.12598 li
304.679 6.00586 li
304.499 5.88574 li
304.438 5.82617 li
304.258 5.76563 li
304.138 5.70605 li
304.019 5.58594 li
303.838 5.58594 li
303.657 5.52637 li
303.479 5.46582 li
303.118 5.46582 li
ef
307.378 6.06641 mo
307.258 6.18652 li
307.078 6.36621 li
306.767 6.61914 306.357 7.59961 306.357 7.98633 cv
306.357 8.16602 li
306.299 8.3457 li
306.27 9.12402 306.329 9.5498 306.657 10.2656 cv
306.657 10.3262 li
306.778 10.5059 li
306.838 10.626 li
307.078 10.8662 li
307.138 11.0459 li
307.317 11.166 li
307.438 11.2256 li
307.679 11.4658 li
307.919 11.5859 li
308.099 11.6465 li
308.278 11.7061 li
308.397 11.7656 li
308.578 11.8262 li
308.938 11.8262 li
309.118 11.8857 li
309.479 11.8857 li
309.657 11.8262 li
309.838 11.8262 li
310.019 11.7656 li
310.138 11.7656 li
310.317 11.7061 li
310.499 11.6465 li
310.618 11.5859 li
310.979 11.3457 li
311.099 11.2861 li
311.218 11.166 li
309.237 11.166 li
307.996 11.1436 307.174 10.1455 307.138 8.94629 cv
307.138 8.58594 li
307.166 7.40723 307.65 6.34863 308.938 6.18652 cv
309.118 6.12598 li
309.299 6.12598 li
ef
309.299 5.40625 mo
309.237 5.40625 li
308.629 5.46191 308.02 5.58301 307.499 5.94629 cv
307.378 6.06641 li
309.299 6.12598 li
309.419 6.12598 li
309.599 6.18652 li
309.974 6.17676 310.328 6.40039 310.618 6.60645 cv
310.737 6.72559 li
310.857 6.90625 li
311.099 7.14648 li
311.157 7.32617 li
311.218 7.44629 li
311.278 7.62598 li
311.278 7.74609 li
311.338 7.92578 li
311.338 8.10645 li
311.397 8.28613 li
311.397 8.64648 li
311.433 9.92871 310.905 10.8486 309.599 11.166 cv
309.299 11.166 li
311.218 11.166 li
313.074 9.54785 312.383 5.59766 309.657 5.46582 cv
309.479 5.40625 li
ef
326.218 8.58594 mo
323.578 8.58594 li
323.578 9.30566 li
325.378 9.30566 li
325.378 10.5059 li
325.258 10.5664 li
324.857 10.9063 324.126 11.166 323.578 11.1064 cv
321.538 11.166 li
321.778 11.4063 li
322.479 11.7158 322.94 11.9072 323.758 11.8857 cv
323.938 11.8857 li
324.118 11.8262 li
324.299 11.8262 li
324.419 11.7656 li
324.599 11.7061 li
324.778 11.7061 li
324.958 11.6465 li
325.019 11.5859 li
325.138 11.5264 li
325.317 11.4658 li
325.438 11.4063 li
325.618 11.2861 li
325.737 11.2256 li
325.919 11.1064 li
326.038 10.9863 li
326.218 10.9258 li
ef
325.499 6.12598 mo
323.578 6.12598 li
323.758 6.12598 li
324.663 6.31738 324.886 6.41016 325.317 7.26563 cv
325.378 7.50586 li
326.099 7.26563 li
326.099 7.20605 li
325.941 6.61328 325.892 6.75 325.737 6.36621 cv
325.618 6.24609 li
ef
323.578 5.40625 mo
323.397 5.40625 li
323.218 5.46582 li
322.857 5.46582 li
322.679 5.52637 li
322.558 5.58594 li
322.378 5.64648 li
322.198 5.64648 li
322.078 5.76563 li
321.897 5.82617 li
321.838 5.82617 li
321.718 5.94629 li
321.538 6.06641 li
321.419 6.12598 li
321.179 6.36621 li
321.118 6.5459 li
320.999 6.66602 li
320.878 6.8457 li
320.817 6.96582 li
320.817 7.02637 li
320.758 7.14648 li
320.638 7.50586 li
320.578 7.62598 li
320.278 8.81445 320.456 10.248 321.419 11.1064 cv
321.538 11.166 li
323.578 11.1064 li
323.397 11.1064 li
320.507 11.1172 320.567 5.9707 323.578 6.12598 cv
325.499 6.12598 li
325.378 6.00586 li
325.058 5.66406 324.391 5.48926 323.938 5.46582 cv
323.758 5.46582 li
ef
329.938 5.52637 mo
329.099 5.52637 li
326.698 11.7656 li
327.538 11.7656 li
328.258 9.90625 li
330.838 9.90625 li
328.499 9.18555 li
329.157 7.38574 li
329.312 6.91895 329.364 6.8457 329.458 6.36621 cv
329.519 6.18555 li
ef
329.938 5.52637 mo
329.519 6.18555 li
329.541 6.48145 329.895 7.12402 329.938 7.50586 cv
330.599 9.18555 li
328.499 9.18555 li
330.838 9.90625 li
331.558 11.7656 li
332.519 11.7656 li
ef
337.558 6.24609 mo
335.519 6.24609 li
335.638 6.24609 li
335.878 6.30566 li
336.299 6.30566 li
336.419 6.36621 li
336.599 6.42578 li
336.838 6.66602 li
336.838 6.72559 li
336.958 6.8457 li
336.958 7.02637 li
337.019 7.20605 li
337.019 7.44629 li
337.001 8.22949 336.472 8.49902 335.758 8.46582 cv
335.578 8.52637 li
333.958 8.52637 li
337.438 8.58594 li
337.956 8.12109 337.976 7.07715 337.679 6.48633 cv
337.618 6.36621 li
ef
335.458 5.52637 mo
333.118 5.52637 li
333.118 11.7656 li
333.958 11.7656 li
333.958 9.24609 li
335.878 9.24609 li
336.118 9.18555 li
336.299 9.18555 li
336.479 9.12598 li
336.657 9.12598 li
336.778 9.06641 li
336.958 9.00586 li
337.078 8.94629 li
337.198 8.88574 li
337.258 8.76563 li
337.378 8.70605 li
337.438 8.58594 li
333.958 8.52637 li
333.958 6.24609 li
337.558 6.24609 li
337.438 6.12598 li
337.019 5.61914 336.421 5.62109 335.878 5.52637 cv
335.698 5.52637 li
ef
315.179 9.78613 mo
314.157 9.78613 li
314.338 9.78613 li
314.397 9.8457 li
314.519 9.8457 li
314.638 9.90625 li
314.698 9.96582 li
314.758 10.0859 li
314.817 10.1465 li
314.878 10.2656 li
314.878 10.3857 li
314.938 10.5059 li
314.878 10.5664 li
314.878 10.8057 li
314.712 10.9463 314.813 11.0332 314.578 11.2256 cv
314.458 11.3457 li
314.397 11.4658 li
314.278 11.5264 li
314.099 11.7061 li
313.979 11.7656 li
313.679 12.0664 li
313.558 12.126 li
313.499 12.2461 li
313.378 12.3057 li
313.317 12.3662 li
313.258 12.4863 li
313.138 12.5459 li
313.078 12.6064 li
313.078 12.666 li
312.761 12.96 312.917 12.8633 312.778 13.1465 cv
312.718 13.2656 li
312.718 13.5059 li
315.419 13.5059 li
315.419 13.0264 li
313.438 13.0264 li
313.499 12.9063 li
313.558 12.8457 li
313.618 12.7256 li
313.679 12.7256 li
313.817 12.5859 313.958 12.4463 314.099 12.3057 cv
314.218 12.2461 li
314.218 12.1865 li
314.338 12.126 li
314.458 12.0059 li
314.578 11.9463 li
314.638 11.8262 li
314.758 11.7656 li
314.999 11.5264 li
314.999 11.4658 li
315.179 11.2861 li
315.237 11.166 li
315.299 11.1064 li
315.357 10.9863 li
315.357 10.8662 li
315.419 10.7461 li
315.419 10.2656 li
315.357 10.1465 li
315.357 10.0859 li
315.237 9.8457 li
ef
314.157 9.36621 mo
314.038 9.36621 li
313.371 9.44922 312.899 9.7168 312.838 10.4463 cv
312.778 10.5664 li
313.317 10.626 li
313.317 10.5059 li
313.378 10.3857 li
313.378 10.2656 li
313.438 10.1465 li
313.679 9.90625 li
313.919 9.78613 li
315.179 9.78613 li
314.938 9.5459 li
314.817 9.48633 li
314.698 9.48633 li
314.638 9.42578 li
314.519 9.42578 li
314.397 9.36621 li
314.278 9.36621 li
ef
130.739 225.606 mo
138.118 229.985 li
135.178 232.926 li
ef
136.618 231.485 mo
152.398 247.206 li
@
159.298 244.626 mo
154.739 244.626 li
154.739 250.866 li
159.418 250.866 li
159.418 250.146 li
155.579 250.146 li
155.579 247.985 li
159.058 247.985 li
159.058 247.267 li
155.579 247.267 li
155.579 245.347 li
159.298 245.347 li
ef
165.478 244.626 mo
164.698 244.626 li
164.698 249.546 li
164.638 250.866 li
165.478 250.866 li
ef
161.398 244.626 mo
160.558 244.626 li
160.558 250.866 li
161.338 250.866 li
161.338 245.946 li
ef
161.398 244.626 mo
161.338 245.946 li
164.638 250.866 li
164.698 249.546 li
ef
171.178 245.286 mo
169.018 245.347 li
169.079 245.347 li
169.258 245.406 li
169.798 245.406 li
169.978 245.466 li
170.038 245.526 li
170.098 245.526 li
170.218 245.586 li
170.398 245.646 li
170.638 245.886 li
170.758 246.065 li
170.877 246.187 li
170.938 246.306 li
170.999 246.485 li
170.999 246.606 li
171.058 246.786 li
171.118 246.906 li
171.118 247.086 li
171.178 247.267 li
171.178 247.926 li
171.077 249.185 170.677 250.099 169.258 250.146 cv
167.698 250.146 li
171.178 250.146 li
172.237 249.204 172.314 246.588 171.358 245.526 cv
171.298 245.406 li
ef
169.018 244.626 mo
166.858 244.626 li
166.858 250.866 li
169.138 250.866 li
169.819 250.867 170.566 250.765 171.058 250.267 cv
171.178 250.146 li
167.698 250.146 li
167.698 245.347 li
169.018 245.347 li
171.178 245.286 li
171.058 245.166 li
170.106 244.578 170.435 244.828 169.438 244.626 cv
169.258 244.626 li
ef
177.598 245.347 mo
175.558 245.347 li
175.678 245.347 li
175.918 245.406 li
176.338 245.406 li
176.458 245.466 li
176.638 245.526 li
176.878 245.767 li
176.878 245.826 li
176.999 245.946 li
176.999 246.126 li
177.058 246.306 li
177.058 246.546 li
177.042 247.329 176.512 247.599 175.798 247.565 cv
175.618 247.626 li
173.999 247.626 li
177.478 247.687 li
177.995 247.222 178.016 246.177 177.718 245.586 cv
177.659 245.466 li
ef
175.499 244.626 mo
173.159 244.626 li
173.159 250.866 li
173.999 250.866 li
173.999 248.347 li
175.918 248.347 li
176.159 248.286 li
176.338 248.286 li
176.518 248.226 li
176.698 248.226 li
176.819 248.166 li
176.999 248.106 li
177.118 248.046 li
177.239 247.985 li
177.298 247.866 li
177.418 247.806 li
177.478 247.687 li
173.999 247.626 li
173.999 245.347 li
177.598 245.347 li
177.478 245.226 li
177.058 244.719 176.461 244.722 175.918 244.626 cv
175.739 244.626 li
ef
179.758 244.626 mo
178.978 244.626 li
178.978 250.866 li
182.819 250.866 li
182.819 250.146 li
179.758 250.146 li
ef
186.418 244.626 mo
185.579 244.626 li
183.178 250.866 li
184.018 250.866 li
184.739 249.006 li
187.319 249.006 li
184.978 248.286 li
185.638 246.485 li
185.792 246.019 185.844 245.946 185.938 245.466 cv
185.999 245.286 li
ef
186.418 244.626 mo
185.999 245.286 li
186.02 245.581 186.374 246.224 186.418 246.606 cv
187.079 248.286 li
184.978 248.286 li
187.319 249.006 li
188.038 250.866 li
188.999 250.866 li
ef
194.098 244.626 mo
189.118 244.626 li
189.118 245.347 li
191.218 245.347 li
191.218 250.866 li
191.999 250.866 li
191.999 245.347 li
194.098 245.347 li
ef
199.438 244.626 mo
194.877 244.626 li
194.877 250.866 li
199.558 250.866 li
199.558 250.146 li
195.718 250.146 li
195.718 247.985 li
199.198 247.985 li
199.198 247.267 li
195.718 247.267 li
195.718 245.347 li
199.438 245.347 li
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
