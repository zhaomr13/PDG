%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 5.0%%AI8_CreatorVersion: 10.0%%For: (Don Groom) ()%%Title: (table_encrit_99.eps)%%CreationDate: 11/6/13 11:49 AM%%BoundingBox: 143 104 433 326%%HiResBoundingBox: 143.8564 104.874 432.042 325.5801%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentFonts: NewCenturySchlbk-Roman%%+ Times-Roman%%+ Times-Italic%%DocumentNeededFonts: NewCenturySchlbk-Roman%%+ Times-Roman%%+ Times-Italic%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 0%%+ procset Adobe_blend_AI5 1.0 0%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 1.1%AI3_ColorUsage: Color%AI3_TemplateBox: 228 391.5 228 391.5%AI3_TileBox: 0 0 552 728%AI3_DocumentPreview: Header%AI5_ArtSize: 612 792%AI5_RulerUnits: 0%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI5_OpenToView: 116 342.1665 2 1018 725 18 0 1 975 517 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -33 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 54 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	pop pop	findfont _wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 2 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{	/Tx	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		dup currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{	/Tx	{		dup currentpoint 4 2 roll gsave		tr _psf		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll gsave		trj _pjsf		grestore 3 1 roll moveto tr jsp	} ddef} def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{	/Tx	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		tr _ctm _pss		grestore 3 1 roll moveto tr sp	} ddef	/Tj	{		dup currentpoint 4 2 roll currentpoint gsave newpath moveto		trj _ctm _pjss		grestore 3 1 roll moveto tr jsp	} ddef} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	dup 1000 div /_fScl exch ddef%	selectfont} def/Tl{	pop	0 exch _leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	/_rise exch ddef	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	100 div /_hs exch ddef	iTm} def/TA{	pop} def/Tq{	pop} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	exch pop _fScl mul neg 0 rmoveto} def/TK{	2 npop} def/T*{	_leading aload pop neg Td} def/T*-{	_leading aload pop Td} def/T-{	_ax neg 0 rmoveto	_hyphen Tx} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ _fScl 1000 mul selectfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%%EndResource%%BeginResource: procset Adobe_blend_AI5 1.4 0%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)%%Version: 1.4 0%%CreationDate: (11/19/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_blend_AI5 70 dict dup beginput/bd{	bind def} bind def/xs{	exch store} bd/nullProc{	{	}} def/initialize{	pop pop	Adobe_blend_AI5 begin		Adobe_blend_AI5_vars begin			/_contoneDevice where			{				pop			}			{				/_contoneDevice false def				} ifelse								/_dpiThreshold where			{				pop			}			{					/_dpiThreshold 600 def			} ifelse						/_screenFreqThreshold where			{				pop			}			{					/_screenFreqThreshold 150 def			} ifelse						/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def	/invertXfer	{		[		{			1 exch sub				} /exec load systemdict/currenttransfer get exec /exec load				] cvx systemdict/settransfer get exec			} bd			/spotDict 3 dict dup begin				/nSpots 2 def				/spot1 7 dict def				/spot2 7 dict def		 end			def			composite?			{				/_setgray_ /setgray load def				/_fill_ /fill load def				/_image_ /image load def			}			{				/_setgray_ systemdict/setgray get def				/_fill_ systemdict/fill get def				/_image_ systemdict/image get def			} ifelse		} bd		/terminate		{			currentdict Adobe_blend_AI5_vars eq			{		 end			currentdict Adobe_blend_AI5 eq			{		 end		} if	} if} bd/_compositeSpotDevice where{ begin		_compositeSpotDevice 0 ne {userdict /composite? true put} if end}{	/_compositeSpotDevice 0 def	} ifelse	/nullString () def/d255 256 array def0 1 255{	d255 exch dup 255 div put} bind for/d255- 256 array def0 1 255{	d255- exch 1 d255 2 index get sub put} bind for/dUserSpace matrix defaultmatrix defcurrentdict /Adobe_blend_AI5_vars 89 dict dup beginput{	/f /F /s /S /b /B}{	null def} bind forall/byte 1 string def/sSave null def/setSSave{	save /sSave exch store} bind def/Bm null def/doBlend null def/startC? false def/endC? false def/fCMYK? null def/startTint 0 def/endTint 0 def/bSMatrix matrix def/bUMatrix matrix def/dMatrix matrix def/inLine? true def/pTState? false def/bHi? false def/yHi 0 def/xHi 0 def/noImg /lv1Fix where{	pop lv1Fix}{	false} ifelsedef/ccAry1 5 array def/ccTint 0 def/spotColor? false def/colorimage? true def[/tint1Data/tint2Data/spotDict/bAxis/ubAxis/pChange/optimize?/nSamples/sInc/blendProc/_bn/xBCInc/yBCInc/bInc/bRender/cBName/cBType/nColors/color?/blend?/colorType/cData/cDataLen/bDataLen/rampPoint/midPoint/endPoint/blendLength/blackData/yeData/mgData/cyData/cnt1/ndx/_fill/tmpcounttomark{	null def} bindrepeatpopcurrentdictendcurrentdictendexchbeginbegin/unitSq{	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath} bd/gMark{	counttomark 2 add -1 roll} bd/setCustomColor{	dup /ccTint exch store	1 exch sub 6 1 roll	ccAry1 astore	exch setcustomcolor} bd/currentCustomColor{	ccAry1 aload pop ccTint} bd/nsetcustomcolor where {	pop}{	/nsetcustomcolor	{		pop setcmykcolor		} bd} ifelse/nsetcustomcolorend where {	pop}{	/nsetcustomcolorend	{	} bd} ifelse/setBSpace{	newpath bUMatrix astore concat unitSq} bd/setCStop{	dup 0 eq	{		pop				spotColor?			{			dup 1 exch sub /ccTint exch def			ccAry1 4 /Black put			} if		setgray	}	{		1 eq		{			setcmykcolor		}		{			composite? not colorType 2 lt and			{				forceCMYK			}			{				setCustomColor			} ifelse		} ifelse	} ifelse} bd/makeByte{	/tmp 0 store	255 mul cvi	8 string 8	{		dup tmp 3 index put /tmp tmp 1 add store	} repeat	exch pop} bd/setImgSpace{	cDataLen 1 8	2 index 0 0 1 0 0 dMatrix astore} bd/bwImage{	setImgSpace cData /_image_ load	{		exec	} stopped	{		$error /errorname get /undefinedresult ne		{			stop		}		{			pop pop pop pop pop		} ifelse	} if} bdlevel2?{	/bFill	{		_fill	} def	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		expandCMYK		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd} if/expandOne{			dup type /stringtype ne			{				cDataLen string				exch				dup 0 ne				{					255 mul cvi					0 1 cDataLen 1 sub					{						3 copy						exch put pop					} for				} if				pop			} if} bd/expandSpot{	spotColor?	{		spotDict begin			spot1 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end			spot2 begin				tintImage type /nulltype ne				{					tintImage expandOne /tintImage exch def				} if		  end	 end	} if} bd/expandCMYK{	4	{		expandOne 4 1 roll	} repeat} bd/colorimage where dup{	exch pop		/ncolorimage where	{		pop	}	{		/ncolorimage {pop colorimage} bd	} ifelse} ifnot{	/ncolorimage where 	{		pop	}	{		/colorimage? false store		/ncolorimage		{			pop pop pop			setSSave		/blackData xs		/yeData xs		/mgData xs		/cyData xs		/cnt1 0 store		[		byte dup 0		cyData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx		}		{			.3 mul		} ifelse		mgData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx		}		{			.59 mul		} ifelse		yeData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx		}		{			.11 mul		} ifelse		blackData dup type /stringtype eq		{			/cnt1 cvx /get cvx d255 /exch cvx /get cvx		} if		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/dup cvx 1 /gt cvx		{			pop 1		} /if cvx		255 /mul cvx /cvi cvx		256 /mod cvx		/dup cvx 0 /lt cvx		{			pop 0		} /if cvx		/put cvx		/cnt1 dup cvx 1 /add cvx /store cvx		] cvx		bind			_image_ 		sSave restore	} bd	} ifelse} iflevel2? not{	/bCImg	{		/cDataLen bDataLen store		setImgSpace		setSSave		expandSpot		cyData mgData yeData cData		colorimage? 		{			expandCMYK		} if		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bwFill	{		setSSave		/cDataLen 8 store		/cData currentgray makeByte store		bwImage		sSave restore	} bd	/c1ImgFill	{		setSSave		/cDataLen 8 store		setImgSpace		spotColor?		{			spotDict begin				spot1 begin					currentCustomColor makeByte /tintImage exch def					/name exch def					/spot_K exch def					/spot_Y exch def					/spot_M exch def					/spot_C exch def			 end				spot2 initSpotData		 end		} if		currentcmykcolor		4		{			makeByte 4 1 roll		} repeat		true 4 spotDict		{			ncolorimage		} stopped		{			$error /errorname get /undefinedresult ne			{				stop			}			{				10				{					pop				} repeat			} ifelse		} if		sSave restore	} bd	/bFill	noImg	{		{			_fill		}	}	{		{			color?			{				c1ImgFill			}			{				bwFill			} ifelse		}	} ifelse	bd} ifcomposite?{	/bCFun	{		color?		{			cyData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			mgData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			yeData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			cData dup type /stringtype eq			{				/ndx cvx /get cvx d255 /exch cvx /get cvx			} if			spotColor?			{				spotDict begin					/spotDict cvx /begin cvx					spot1 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx					spot2 begin						tintImage dup type /stringtype eq						{							/ndx cvx /get cvx d255- /exch cvx /get cvx						}						{							dup type /nulltype ne 							{								name type /nametype ne {1 exch sub} if							} if						} ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/spotDict cvx				/nsetcustomcolor cvx			}			{				/setcmykcolor cvx			} ifelse		}		{			cData /ndx cvx /get cvx			d255 /exch cvx /get cvx			/setgray cvx		} ifelse	} bd	/Bc	{		newpath		gsave		setBSpace		nColors 1 eq		{			pop pop			setCStop		} if		bFill		grestore	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			linImg		}		{			bFill		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/rdBm	{		/nColors dup load 1 sub store		_fill		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			_fill			blend? bHi? or			{				rdBlend			} if			nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/cGetRData	{		setCStop		/blend?		cData type /stringtype eq		dup not color? and		{			pop			cyData type /stringtype eq			mgData type /stringtype eq			yeData type /stringtype eq			or or		} if		store	} def	/cGetRData} if/eCStop{	mark	1 index 3 mul 3 add dup 8 gt	{		pop 8	} if	1 roll	cleartomark} bdcomposite? not{	/knockOut	level2?	{		{			0 0 0 0 setcmykcolor _fill		}	}	{		/bFill noImg		{			{				_fill			}		}		{			{				_of true eq				{					currentgray 1 ne					{						bwFill					} if				}				{					bwFill				} ifelse			}		} ifelse		def		/whiteByte 1 makeByte def		noImg		{			{				0 0 0 0 setcmykcolor _fill			}		}		{			{				cBType 0 eq				{					setSSave					/cData whiteByte store					/cDataLen 8 store					bwImage					sSave restore				}				{					_fill				} ifelse			}		} ifelse	} ifelse	bd	/bCFun	{		cData dup type /stringtype ne		{			color?			{				1 exch sub			} if		}		{			/ndx cvx /get cvx			color? customColor? not and			{				d255-			}			{				d255			} ifelse			/exch cvx /get cvx		} ifelse		/_setgray_ cvx	} bd	/eCCBlend	{		dup 3 eq		{			pop			mark 7 1 roll			6 copy ccThrough? dup /blend? xs			{				/startC? true store				setCustomColor				customColor?				{					/cData tint1Data store					setCDataLen				} if				/endC?				3 index 3 eq				{					4 index 1 ne				}				{					false				} ifelse				store			} if			cleartomark			stop		} if		1 eq		{			pop pop pop		} if		pop		/startC? false store		6		{			8 index		} repeat		ccThrough? dup /blend? xs		{			/endC? true store			blend? not			{				stop			} if			customColor?			{				/cData tint1Data store				setCDataLen			} if		} if	} bd	/handleOP	{		_of not		{			knockOut		} if	} bd	/handleROP	{		_of not		{			0 0 0 0 setcmykcolor _fill		}		{			newpath			} ifelse	} bd	/rdBm	{		/nColors dup load 1 sub store		blend? 		{			_fill		}		{			handleROP		} ifelse		gsave		bUMatrix astore concat		bHi?		{			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store			rampPoint 1 lt			{				1 rampPoint sub dup xHi mul exch yHi mul translate			} if		} if		nColors		{			0 0 rampPoint 0 360 arc			blend?			{				cData type /stringtype ne bHi? not and				{					cData color?					{						1 exch sub					} if					_setgray_ 					_fill_ 				}				{					cData type /stringtype ne					{						/cDataLen 1 store						/bDataLen 1 store					} if					rdBlend				} ifelse			}			{								handleROP								pTState?				{					/bAxis rampPoint endPoint sub store					xHi bAxis mul yHi bAxis mul translate				} if			} ifelse							nColors 1 gt			{				getRData			} if			/nColors dup load 1 sub store		} repeat		/nColors 1 store		grestore	} bd	/ccThrough?	{		gsave		pop 0 setCustomColor		currentcmykcolor		grestore		anyColor?	} bd	/forceCMYK	{		exch pop		1 exch sub 5 1 roll		4		{			4 index mul 4 1 roll		} repeat		0		cCMYKData dup /cData ne		{			dup /yeData eq			{				pop 1 add			}			{				/mgData eq				{					2				}				{					3				} ifelse				add			} ifelse			0		} if		pop		index		0 eq		{			pop pop pop pop 0 0 0 0		} if		setcmykcolor		pop		/fCMYK? true store	} bd	/endCapSepBc	{		pop pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				colorType 1 eq				{					forceCMYK				}				{					fCMYK?					{						forceCMYK					}					{						setCustomColor					} ifelse				} ifelse			} ifelse		} ifelse		currentcmykcolor anyColor? 		blend? and		{			bFill		}		{			handleOP		} ifelse			} bd} if/cCMYKData 0 defcomposite? dup not{	pop customColor?} ifnot{	/cCMYKData	/cyData /mgData /yeData /cData	black? not	{		yellow?		{			exch		}		{			magenta?			{				3			}			{				4			} ifelse			-1 roll		} ifelse	} if	4 1 roll pop pop pop	store	/Bc	{		gsave		setBSpace		nColors 1 gt		{						blend? currentcmykcolor anyColor? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cCMYKData load dup type /stringtype eq			{				dup length /cDataLen xs				/cData xs				gsave				colorType 0 ne noImg not and				{					invertXfer				} if				linImg				grestore			}			{				pop bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/cmykGetRData	{		/fCMYK? false store		blend?		{			{				cmykDataProcs colorType get exec			} stopped			pop			blend?			{				/cData cCMYKData load store				setCDataLen			} if		} if	} def	/cmykDataProcs	[	{		pop		black? dup /blend? xs		{			setgray			0		} if		pop	}	{		cCMYKData load dup type /stringtype ne		{			0 0 0			cyan? not			{				4 magenta?				{					1				}				{					yellow?					{						2					}					{						3					} ifelse				} ifelse				roll			} if			4 copy add add add 0 eq			{				/blend? false store			} if						setcmykcolor			/startC? true store			/endC? true store			eCStop			stop		} if		pop		dup 0 eq		{			pop			setgray		}		{			1 eq			{				setcmykcolor			}			{				forceCMYK			} ifelse		} ifelse	} bind	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			black?			{				setgray			}			{				0 0 0 4 -1 roll 1 exch sub setcmykcolor			} ifelse			black?			{				/blend? true store			} if			6			{				8 index			} repeat			ccThrough?			{				/blend? true store			}			{				black?				{					/cData tint1Data store					setCDataLen				}				{					/blend? false store				} ifelse			} ifelse		}		{			mark 7 1 roll			6 copy ccThrough?			{				forceCMYK				pop				stop			} if			9 index 0 eq			{				black? dup /blend? xs				{					pop 1 setgray					/cData tint2Data store					setCDataLen					0				} if				pop			}			{				/blend?				6				{					16 index				} repeat				ccThrough?				store				blend?				{					forceCMYK				} if			} ifelse			cleartomark		} ifelse	} bind	] def	/cmykGetRData} ifcomposite? dup not{	pop isCMYKSep?} ifnot{	/endCapSepBc	{		/white? false store		pop pop		dup 0 eq		{			pop			/white? 1 index 1 eq store			setgray		}		{			1 eq			{				setcmykcolor			}			{				setCustomColor			} ifelse		} ifelse%		currentcmykcolor anyColor?		endC? or		blend? and		{			bFill		}		{			handleOP		} ifelse	} bd	/Bc	{		gsave		setBSpace		nColors 1 gt		{			blend? startC? and			{				bFill			}			{				handleOP			} ifelse		}		{			endCapSepBc		} ifelse		grestore		newpath	} bd	/linealBm	{		/nColors dup load 1 sub store		newpath		gsave		setBSpace		blend?		{			cData type /stringtype eq			{				linImg			}			{				bFill			} ifelse		}		{			handleOP		} ifelse		grestore		nColors 1 gt		{			getRData		} if	} bd	/discardCMY	{		counttomark 4 add -3 roll pop pop pop	} bd	/testTopCC	{		6 copy ccThrough?	} bd	/getCRamp	{		{			ccDataProcs colorType 2 sub get exec		} stopped pop		blend? cDataLen 0 eq and		{			/cDataLen bDataLen store		} if	} bd	/ccGetRData	{		/fCMYK? false store		/startC? false store		/endC? false store		colorType 2 lt		{			/blend? false def		} if		blend?		{			getCRamp		}		{			setCStop		} ifelse		blend?		{			/blend? cData 1 ne store			blend?			{				cData dup type /stringtype ne				{					1 exch sub /cData xs 0				} if				pop			} if		} if	} def	/ccDataProcs	[	/eCCBlend load	{		cBType 1 eq		{			tint1Data tint2Data			/tint1Data xs			/tint2Data xs		} if		0 eq		{			/blend? false store			pop		}		{			mark 7 1 roll			testTopCC			{				/blend? 1 index 1 ne store				/startC? blend? store				/endC? false store				blend? not				{					cleartomark stop				} if				/cData tint1Data store				setCDataLen				setCustomColor				pop				stop			} if			cleartomark		} ifelse		2 index 0 eq		{			/blend? false store		}		{			mark 6			{				9 index			} repeat			testTopCC dup /blend? xs			{				/blend? 1 index 1 ne store				/endC? blend? store				/startC? false store				blend? not				{					cleartomark stop				} if				/cData tint2Data store				setCDataLen			} if			cleartomark		} ifelse	} bind	] def	/ccGetRData} ifload Adobe_blend_AI5_vars /getData 3 -1 roll put/setCDataLen{	/cDataLen 0 cData dup type /stringtype eq	{		length exch	} if	pop store} bd/initSpotData{ begin		/name null def		/tintImage null def		/tintValue null def		/spot_C  null def		/spot_M  null def		/spot_Y  null def		/spot_K  null def end} bd/getRData{	/colorType gMark store	_compositeSpotDevice 0 ne	{		spotDict begin			spot1 initSpotData			spot2 initSpotData	 end		/spotColor? colorType 2 eq colorType 3 eq or def	} 	{		/spotColor? false store	} ifelse	/blend? true store	0 0 0 0 setcmykcolor	100 div /rampPoint xs% (between 13 and 87%) 	100 div /midPoint xs	dup 0 eq	{		2	}	{		dup 1 eq		{			5		}		{			_compositeSpotDevice 0 ne			{				spotDict begin					spot1 begin						/name 3 index def						/spot_K 4 index def						/spot_Y 5 index def						/spot_M 6 index def						/spot_C 7 index def				 end			 end			} if			7		} ifelse	} ifelse	/tmp exch def	tmp index 100 div /endPoint xs	_compositeSpotDevice 0 ne	{		tmp 2 add index 3 eq		{			/tmp tmp 4 add def			tmp index dup 			spotDict begin				spot1/name get ne				{					spot2 begin						/name exch def						/spot_K tmp 2 add index def						/spot_Y tmp 3 add index def						/spot_M tmp 4 add index def						/spot_C tmp 5 add index def				 end				}				{					pop				} ifelse		 end		} if	} if	/color? colorType 0 gt store		colorType 3 eq	{		/tint2Data gMark store	} if		colorType 2 ge	{		/tint1Data gMark store	} if	_compositeSpotDevice 0 ne	{		spotDict begin					colorType 2 ge			{				colorType 3 eq				{					spot2 begin						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def						name null eq {/name /Black def} if				 end				} if				spot1 begin					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def					colorType 2 eq 					{						name null eq 						{							/name spot2/name get def							spot2/name null put						} if					}					{						name null eq {/name /Black def} if					} ifelse			 end			} if	 end	} if		/cData gMark store	setCDataLen	colorType 0 gt	{		counttomark 4 add -3 roll		/yeData xs		/mgData xs		/cyData xs	} if	blend?	{		/bDataLen		cDataLen dup 0 eq color? and		{			[			cyData mgData yeData			]			{				dup type /stringtype eq				{					length exch pop exit				} if				pop			} forall		} if		store		bDataLen 0 eq		{			/bDataLen 1 store		} if		getData		blend?		{			composite? cDataLen 0 eq and			{				/cDataLen bDataLen store			} if		} if	}	{		setCStop	} ifelse} bd/Bg{	0 0 0 0 setcmykcolor	6	{		pop	} repeat	/blendLength xs	pop pop pop	/cBName xs	/bRender xs	bRender 2 ne	{		composite? not		{			_of setoverprint		} if		_eo {eoclip} {clip} ifelse		_bn cBName 2 copy known		{			get			mark exch aload pop			/cBType xs			/nColors xs			mark exch aload pop			0 0		} if		pop pop		getRData		cBType 0 eq		{			/linealBm		}		{			bHi?			{				/pTState? nColors 2 gt store			} if			/doBlend /rdBlend load store			/rdBm		} ifelse	}	{		inLine? not		{			mark mark		} if		/Bc dup		{			cleartomark mark		} bd		/nullProc	} ifelse	load /Bm xs} bd/linImgnoImg{	{		newpath doRctBlend	}}{	{		/doBlend		color? composite? and		{			/bCImg		}		{			/bwImage		} ifelse		load		store			0 0 moveto		tRectOK? composite? and		{			{				mark				0 1 dtransform atan cvi 90 mod 0 eq				1 0 dtransform atan cvi 90 mod 0 eq			} stopped			{				cleartomark			}			{				and exch pop				{					newpath					doRctBlend				}				{					doBlend				} ifelse			} ifelse		}		{			doBlend		} ifelse	} } ifelsebd/doRctBlend{	gsave	/sInc 1 store	/nSamples bDataLen store	/bInc 1 bDataLen div store	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store	/pChange ubAxis 0 eq	{		0	}	{		bDataLen ubAxis div	} ifelse	store	pChange .5 gt noImg not and dup /optimize? xs	{		/nSamples ubAxis 2 div round cvi dup 1 le		{			pop 2		} if		store		/bInc 1 nSamples div store		/sInc bDataLen 1 sub nSamples 1 sub div store	} if	0	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	/rectfill where dup	{		exch pop _compositeSpotDevice 1 ne and	} if	{		0 0 bInc 1 /rectfill cvx		}	{		0 0 /moveto cvx		bInc 0 /lineto cvx		bInc 1 /lineto cvx		0 1 /lineto cvx		/closepath cvx		/_fill_ cvx	} ifelse	bInc 0 /translate cvx	sInc /add cvx	] cvx	bind	repeat	pop	spotColor? {nsetcustomcolorend} if		grestore} bd/rdPrep{	/nSamples bDataLen dup 0 eq	{		pop 1	} if	store	/sInc -1 store	/bAxis rampPoint endPoint sub store	/bInc bAxis bDataLen div neg store	/optimize? false store	tRectOK?	{		/ubAxis		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt		2 copy lt		{			exch		} if		pop store		/pChange ubAxis 0 eq		{			0		}		{			bDataLen ubAxis div		} ifelse		store		pChange .5 gt noImg not and dup /optimize? xs		{			/nSamples ubAxis 2 div round cvi dup 1 le			{				pop 2			} if			store			/bInc bAxis nSamples div neg store			/sInc bDataLen 1 sub nSamples 1 sub div neg store		} if	} if	bHi?	{		/xBCInc xHi bAxis mul nSamples div store		/yBCInc yHi bAxis mul nSamples div store	} if} bd/rdBlend{	newpath	gsave	rdPrep	rampPoint	bDataLen 1 sub	nSamples	[	/dup cvx	optimize?	{		/round cvx /cvi cvx	} if	/ndx /exch cvx /store cvx	bCFun	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx	/exch cvx bInc /add cvx /exch cvx	sInc /add cvx	bHi?	{		xBCInc yBCInc /translate cvx	} if	] cvx	bind	repeat	pop pop	spotColor? {nsetcustomcolorend} if	grestore	pTState?	{		xHi bAxis mul yHi bAxis mul translate	} if} bd/Bh{	pop pop	/pTState? false store	2 copy 0 ne exch 0 ne or dup /bHi? xs	{		/yHi xs		/xHi xs		0 0	} if	pop pop} bd/BD{	inLine? not	{		] nColors cBType		] _bn cBName 3 -1 roll put end} if} bd/Bn{1 add dictdup nullString null put/_bn xs} bd/Bd{Adobe_blend_AI5_vars begin	3 -1 roll dup nullString eq dup	{		setSSave	} if	/inLine? exch def	/cBName exch def	/nColors exch def	/cBType exch def} bd/Bb{	sSave null eq	{		Adobe_blend_AI5_vars begin		setSSave	} if	composite?	{		/_fill /fill load store	}	{		/__fill /fill load store			/_fill			{				_of true eq				{					currentgray 1 ne					{						__fill					} if				}				{					__fill				} ifelse			} def	} ifelse	/fill	{	} def	} bd	/BB	{	/cBType xs	cleartomark cleartomark	cBType dup	bRender	sSave dup type /savetype eq	{		restore 0	} if	pop	currentdict Adobe_blend_AI5_vars eq	{	 end	} if	2 ne exch 0 gt and	{		2 eq		{			s		}		{			S		} ifelse	}	{		pop newpath	} ifelse} bdcurrentdict readonly popendenddefaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/sw{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss{	4 1 roll	{		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def/sp{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp{	{		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 3 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: NewCenturySchlbk-Roman%%IncludeFont: Times-Roman%%IncludeFont: Times-ItalicAdobe_level2_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _NewCenturySchlbk-Roman NewCenturySchlbk-Roman[/_NewCenturySchlbk-Roman/NewCenturySchlbk-Roman 0 0 1 TZ%AI3_EndEncoding AdobeType%AI3_BeginEncoding: _Times-Roman Times-Roman[/_Times-Roman/Times-Roman 0 0 0 TZ%AI3_EndEncoding TrueType%AI3_BeginEncoding: _Times-Italic Times-Italic[/_Times-Italic/Times-Italic 0 0 0 TZ%AI3_EndEncoding TrueType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[000<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>1 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 kPc0 gPc1 gPc1 0.37 0 0 kPc0 1 1 0 kPc1 0 0.61 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Layer 1) Ln0 A0 To1 0 0 1 231.75 296.2798 0 TpTP3 Tr0 J 0 j 1 w 4 M []0 d/_NewCenturySchlbk-Roman 12.86 Tf0 Ts100 Tz0 Tt0 TA%_ 0 XL36 0 XbXB0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 1 2 2 99 Th0 Tq12.86 0 Tl0 Tc0 Tw(Ec from Fasso's elements.table) Tx (\r) TX TO0 To0 1 -1 0 153.8564 229.9199 0 TpTP-19.9278 0 Td0 Tr0 O0 g/_Times-Roman 10.0001 Tf1 Ta9.9729 0 Tl(E) Tx /_Times-Italic 9.091 Tf-2.7273 Ts(c) Tx /_Times-Roman 10.0001 Tf0 Ts( \(MeV\)) Tx (\r) TX TO0 To1 0 0 1 299.79 109 0 TpTP-2.7808 0 Td0 Tr/_Times-Italic 10 Tf9.84 0 Tl(Z) Tx (\r) TX TOu0 To1 0 0 1 179.5 120.7402 0 TpTP0 Tr/_Times-Roman 10 Tf0 Ta(1) Tx (\r) TX TO0 To1 0 0 1 215.02 120.7402 0 TpTP0 Tr(2) Tx (\r) TX TO0 To1 0 0 1 262.0601 120.7402 0 TpTP0 Tr(5) Tx (\r) TX TO0 To1 0 0 1 294.46 120.7402 0 TpTP0 Tr(10) Tx (\r) TX TO0 To1 0 0 1 329.98 120.7402 0 TpTP0 Tr(20) Tx (\r) TX TO0 To1 0 0 1 377.02 120.7402 0 TpTP0 Tr(50) Tx (\r) TX TO0 To1 0 0 1 409.4199 120.7402 0 TpTP0 Tr(100) Tx (\r) TX TOUu0 R0 G0.5 w176.8799 319.2002 m176.8799 131.2798 lS176.8799 131.2798 m418.5601 131.2798 lS418.5601 131.2798 m418.5601 319.2002 lS418.5601 319.2002 m176.8799 319.2002 lS176.8799 131.2798 m176.8799 134.1602 lS182.1602 139.4399 m182.1602 131.2798 lS217.6802 131.2798 m217.6802 139.4399 lS238.5601 134.1602 m238.5601 131.2798 lS253.4399 131.2798 m253.4399 134.1602 lS264.7202 139.4399 m264.7202 131.2798 lS274.0801 131.2798 m274.0801 134.1602 lS282 134.1602 m282 131.2798 lS288.96 131.2798 m288.96 134.1602 lS294.96 134.1602 m294.96 131.2798 lS300.2402 131.2798 m300.2402 139.4399 lS336 139.4399 m336 131.2798 lS356.6401 131.2798 m356.6401 134.1602 lS371.52 134.1602 m371.52 131.2798 lS382.7998 131.2798 m382.7998 139.4399 lS392.1602 134.1602 m392.1602 131.2798 lS400.0801 131.2798 m400.0801 134.1602 lS407.04 134.1602 m407.04 131.2798 lS413.04 131.2798 m413.04 134.1602 lS418.5601 139.4399 m418.5601 131.2798 lS176.8799 316.5601 m176.8799 319.2002 lS182.1602 319.2002 m182.1602 311.2798 lS217.6802 311.2798 m217.6802 319.2002 lS238.5601 319.2002 m238.5601 316.5601 lS253.4399 316.5601 m253.4399 319.2002 lS264.7202 319.2002 m264.7202 311.2798 lS274.0801 316.5601 m274.0801 319.2002 lS282 319.2002 m282 316.5601 lS288.96 316.5601 m288.96 319.2002 lS294.96 319.2002 m294.96 316.5601 lS300.2402 311.2798 m300.2402 319.2002 lS336 319.2002 m336 311.2798 lS356.6401 316.5601 m356.6401 319.2002 lS371.52 319.2002 m371.52 316.5601 lS382.7998 311.2798 m382.7998 319.2002 lS392.1602 319.2002 m392.1602 316.5601 lS400.0801 316.5601 m400.0801 319.2002 lS407.04 319.2002 m407.04 316.5601 lS413.04 316.5601 m413.04 319.2002 lS418.5601 319.2002 m418.5601 311.2798 lS176.8799 131.2798 m184.7998 131.2798 lS179.52 139.2002 m176.8799 139.2002 lS176.8799 145.9199 m179.52 145.9199 lS179.52 151.4399 m176.8799 151.4399 lS176.8799 156.48 m179.52 156.48 lS184.7998 161.04 m176.8799 161.04 lS176.8799 190.7998 m184.7998 190.7998 lS179.52 208.3198 m176.8799 208.3198 lS176.8799 220.5601 m179.52 220.5601 lS184.7998 230.1602 m176.8799 230.1602 lS176.8799 237.8398 m179.52 237.8398 lS179.52 244.5601 m176.8799 244.5601 lS176.8799 250.3198 m179.52 250.3198 lS179.52 255.3599 m176.8799 255.3599 lS176.8799 259.9199 m184.7998 259.9199 lS184.7998 289.6802 m176.8799 289.6802 lS176.8799 306.96 m179.52 306.96 lS179.52 319.2002 m176.8799 319.2002 lS410.3999 131.2798 m418.5601 131.2798 lS418.5601 139.2002 m415.6802 139.2002 lS415.6802 145.9199 m418.5601 145.9199 lS418.5601 151.4399 m415.6802 151.4399 lS415.6802 156.48 m418.5601 156.48 lS418.5601 161.04 m410.3999 161.04 lS410.3999 190.7998 m418.5601 190.7998 lS418.5601 208.3198 m415.6802 208.3198 lS415.6802 220.5601 m418.5601 220.5601 lS418.5601 230.1602 m410.3999 230.1602 lS415.6802 237.8398 m418.5601 237.8398 lS418.5601 244.5601 m415.6802 244.5601 lS415.6802 250.3198 m418.5601 250.3198 lS418.5601 255.3599 m415.6802 255.3599 lS410.3999 259.9199 m418.5601 259.9199 lS418.5601 289.6802 m410.3999 289.6802 lS415.6802 306.96 m418.5601 306.96 lS418.5601 319.2002 m415.6802 319.2002 lSUu1 0.37 0 0 K0.6 w180.48 303.8398 m184.0801 303.8398 lS182.1602 305.7598 m182.1602 302.1602 lSUuu236.8799 276.96 m240.48 276.96 lS238.5601 278.6401 m238.5601 275.2798 lS251.52 265.4399 m255.1201 265.4399 lS253.4399 267.1201 m253.4399 263.52 lS263.04 257.04 m266.6401 257.04 lS264.7202 258.96 m264.7202 255.3599 lSUu272.3999 251.04 m276 251.04 lS274.0801 252.96 m274.0801 249.3599 lS272.3999 251.2798 m276 251.2798 lS274.0801 253.2002 m274.0801 249.6001 lS272.3999 251.7598 m276 251.7598 lS274.0801 253.4399 m274.0801 249.8398 lSUu303.3599 231.3599 m306.96 231.3599 lS305.2798 233.04 m305.2798 229.4399 lS307.9199 227.04 m311.52 227.04 lS309.6001 228.7202 m309.6001 225.3599 lS312 223.4399 m315.6001 223.4399 lS313.9199 225.1201 m313.9199 221.52 lS315.8398 220.7998 m319.4399 220.7998 lS317.52 222.48 m317.52 218.8799 lS319.4399 218.1602 m323.04 218.1602 lS321.1201 220.0801 m321.1201 216.48 lS322.5601 215.7598 m326.1602 215.7598 lS324.48 217.6802 m324.48 214.0801 lS331.4399 210.48 m335.04 210.48 lS333.3599 212.1602 m333.3599 208.5601 lS334.0801 207.6001 m337.6802 207.6001 lS336 209.2798 m336 205.6802 lSUu336.7202 204.7202 m340.0801 204.7202 lS338.3999 206.3999 m338.3999 202.7998 lS338.8799 202.0801 m342.48 202.0801 lS340.7998 204 m340.7998 200.3999 lS341.2798 199.9199 m344.8799 199.9199 lS342.96 201.6001 m342.96 198 lS343.4399 197.7598 m347.04 197.7598 lS345.3599 199.6802 m345.3599 196.0801 lS345.6001 196.0801 m349.2002 196.0801 lS347.2798 197.7598 m347.2798 194.1602 lS347.52 194.3999 m351.1201 194.3999 lS349.4399 196.0801 m349.4399 192.48 lS349.4399 192.48 m353.04 192.48 lS351.3599 194.3999 m351.3599 190.7998 lS351.3599 191.04 m354.96 191.04 lS353.04 192.7202 m353.04 189.1201 lS353.2798 189.6001 m356.6401 189.6001 lS354.96 191.2798 m354.96 187.6802 lS354.96 188.3999 m358.5601 188.3999 lS356.6401 190.3198 m356.6401 186.7202 lS356.6401 187.6802 m360.2402 187.6802 lS358.3198 189.3599 m358.3198 185.7598 lS358.3198 186.7202 m361.6802 186.7202 lS360 188.3999 m360 184.7998 lS359.7598 185.52 m363.3599 185.52 lS361.6802 187.2002 m361.6802 183.6001 lS361.2002 184.7998 m364.7998 184.7998 lS363.1201 186.48 m363.1201 182.8799 lSUu365.7598 182.8799 m369.1201 182.8799 lS367.4399 184.5601 m367.4399 180.96 lS366.96 181.2002 m370.5601 181.2002 lS368.8799 182.8799 m368.8799 179.2798 lS368.3999 179.2798 m372 179.2798 lS370.0801 181.2002 m370.0801 177.6001 lS369.6001 177.8398 m373.2002 177.8398 lS371.52 179.52 m371.52 175.9199 lS371.04 176.1602 m374.3999 176.1602 lS372.7202 178.0801 m372.7202 174.48 lS372.2402 174.96 m375.8398 174.96 lS373.9199 176.8799 m373.9199 173.2798 lS373.4399 173.7598 m377.04 173.7598 lS375.1201 175.6802 m375.1201 172.0801 lS374.6401 172.7998 m378.2402 172.7998 lS376.3198 174.48 m376.3198 170.8799 lS375.6001 171.8398 m379.2002 171.8398 lS377.52 173.52 m377.52 169.9199 lS376.7998 170.8799 m380.3999 170.8799 lS378.7202 172.7998 m378.7202 169.2002 lS378 170.1602 m381.6001 170.1602 lS379.6802 172.0801 m379.6802 168.48 lSUu408.2402 150.2402 m408.2402 146.6401 lS408.96 150 m408.96 146.3999 lSu378.96 169.6802 m382.5601 169.6802 lS380.8799 171.3599 m380.8799 167.7598 lS380.1602 169.2002 m383.7598 169.2002 lS381.8398 170.8799 m381.8398 167.2798 lS381.1201 168.48 m384.7202 168.48 lS382.7998 170.1602 m382.7998 166.5601 lS382.0801 167.7598 m385.6802 167.7598 lS384 169.6802 m384 166.0801 lS383.04 167.2798 m386.6401 167.2798 lS384.96 168.96 m384.96 165.3599 lS384 166.7998 m387.6001 166.7998 lS385.9199 168.48 m385.9199 165.1201 lS385.9199 166.5601 m389.52 166.5601 lS387.8398 168.2402 m387.8398 164.6401 lS386.8799 165.1201 m390.48 165.1201 lS388.7998 166.7998 m388.7998 163.4399 lS387.8398 163.6802 m391.4399 163.6802 lS389.52 165.6001 m389.52 162 lS388.7998 162.7202 m392.3999 162.7202 lS390.48 164.6401 m390.48 161.04 lS389.52 162 m393.1201 162 lS391.4399 163.6802 m391.4399 160.3198 lS390.48 161.2798 m394.0801 161.2798 lS392.1602 162.96 m392.1602 159.3599 lS391.2002 160.3198 m394.7998 160.3198 lS393.1201 162.2402 m393.1201 158.6401 lS392.1602 159.6001 m395.7598 159.6001 lS393.8398 161.52 m393.8398 157.9199 lS392.8799 159.3599 m396.48 159.3599 lS394.7998 161.04 m394.7998 157.4399 lS393.8398 158.1602 m397.4399 158.1602 lS395.52 159.8398 m395.52 156.48 lS394.5601 157.4399 m398.1602 157.4399 lS396.2402 159.1201 m396.2402 155.52 lS395.2798 156.7202 m398.8799 156.7202 lS397.2002 158.3999 m397.2002 154.7998 lS396 156 m399.6001 156 lS397.9199 157.6802 m397.9199 154.0801 lS396.96 155.2798 m400.5601 155.2798 lS398.6401 156.96 m398.6401 153.3599 lS397.6802 154.5601 m401.2798 154.5601 lS399.3599 156.48 m399.3599 152.8799 lS398.3999 154.3198 m402 154.3198 lS400.0801 156 m400.0801 152.3999 lS399.1201 153.3599 m402.7202 153.3599 lS400.7998 155.2798 m400.7998 151.6802 lS399.8398 152.6401 m403.4399 152.6401 lS401.52 154.5601 m401.52 150.96 lS400.5601 151.9199 m404.1602 151.9199 lS402.2402 153.8398 m402.2402 150.2402 lS401.2798 151.4399 m404.8799 151.4399 lS402.96 153.1201 m402.96 149.52 lS402 150.7202 m405.3599 150.7202 lS403.6802 152.3999 m403.6802 148.7998 lS402.48 150.2402 m406.0801 150.2402 lS404.3999 151.9199 m404.3999 148.3198 lS403.2002 149.7598 m406.7998 149.7598 lS405.1201 151.4399 m405.1201 147.8398 lS403.9199 149.2798 m407.52 149.2798 lS405.6001 150.96 m405.6001 147.3599 lS404.6401 149.04 m408.2402 149.04 lS406.3198 150.7202 m406.3198 147.1201 lS405.1201 149.04 m408.7202 149.04 lS407.04 150.7202 m407.04 147.1201 lS405.8398 148.7998 m409.4399 148.7998 lS407.52 150.48 m407.52 146.8799 lS406.5601 148.3198 m410.1602 148.3198 lS407.04 148.0801 m410.6401 148.0801 lS407.7598 147.8398 m411.3599 147.8398 lS409.4399 149.52 m409.4399 145.9199 lSUUu410.1602 146.8799 m413.7598 146.8799 lS411.8398 148.7998 m411.8398 145.2002 lS410.6401 145.9199 m414.2402 145.9199 lS412.5601 147.6001 m412.5601 144 lS411.3599 145.2002 m414.7202 145.2002 lS413.04 147.1201 m413.04 143.52 lS411.8398 144.48 m415.4399 144.48 lS413.52 146.1602 m413.52 142.5601 lS412.3198 143.52 m415.9199 143.52 lS414.2402 145.4399 m414.2402 141.8398 lS413.04 143.04 m416.3999 143.04 lS414.7202 144.96 m414.7202 141.3599 lS413.52 142.5601 m417.1201 142.5601 lS415.2002 144.48 m415.2002 140.8799 lS414 142.5601 m417.6001 142.5601 lS415.9199 144.48 m415.9199 140.8799 lS414.48 142.3198 m418.0801 142.3198 lS416.3999 144 m416.3999 140.3999 lS415.2002 141.8398 m418.5601 141.8398 lS416.8799 143.52 m416.8799 139.9199 lSUUu1 0 0.61 0 K182.1602 302.8799 m217.6802 287.04 l238.5601 275.52 l253.4399 266.3999 l264.7202 258.96 l274.0801 252.48 l282 246.96 l288.96 241.9199 l294.96 237.6001 l300.2402 233.52 l305.2798 229.9199 l309.6001 226.5601 l313.9199 223.4399 l317.52 220.5601 l321.1201 217.9199 l324.48 215.2798 l327.6001 212.8799 l330.48 210.48 l333.3599 208.3198 l336 206.3999 l338.3999 204.48 l340.7998 202.5601 l342.96 200.6401 l345.3599 198.96 l347.2798 197.2798 l349.4399 195.6001 l351.3599 194.1602 l353.04 192.7202 l354.96 191.2798 l356.6401 189.8398 l358.3198 188.3999 l360 187.2002 l361.6802 185.7598 l363.1201 184.5601 l364.5601 183.3599 l366 182.1602 l367.4399 181.2002 l368.8799 180 l370.0801 179.04 l371.52 177.8398 l372.7202 176.8799 l373.9199 175.9199 l375.1201 174.96 l376.3198 174 l377.52 173.04 l378.7202 172.0801 l379.6802 171.1201 l380.8799 170.3999 l381.8398 169.4399 l382.7998 168.48 l384 167.7598 l384.96 167.04 l385.9199 166.0801 l386.8799 165.3599 l387.8398 164.6401 l388.7998 163.9199 l389.52 163.2002 l390.48 162.2402 l391.4399 161.52 l392.1602 161.04 l393.1201 160.3198 l393.8398 159.6001 l394.7998 158.8799 l395.52 158.1602 l396.2402 157.6802 l397.2002 156.96 l397.9199 156.2402 l398.6401 155.7598 l399.3599 155.04 l400.0801 154.5601 l400.7998 153.8398 l401.52 153.3599 l402.2402 152.6401 l402.96 152.1602 l403.6802 151.4399 l404.3999 150.96 l405.1201 150.48 l405.6001 150 l406.3198 149.2798 l407.04 148.7998 l407.52 148.3198 l408.2402 147.8398 l408.96 147.3599 l409.4399 146.6401 l410.1602 146.1602 l411.3599 145.2002 l411.8398 144.7202 l412.5601 144.2402 l413.04 143.7598 l413.52 143.2798 l414.2402 142.7998 l414.7202 142.5601 l415.2002 142.0801 l415.9199 141.6001 l416.3999 141.1201 l416.8799 140.6401 l417.3599 140.1602 l417.8398 139.9199 l418.5601 139.4399 lSUu0 To1 0 0 1 173 128.1802 0 TpTP-10 0 Td0 Tr0 O0 g1 w2 Ta(  5) Tx (\r) TX TO0 To1 0 0 1 173 157.9399 0 TpTP-12.5 0 Td0 Tr( 10) Tx (\r) TX TO0 To1 0 0 1 173 187.7002 0 TpTP-12.5 0 Td0 Tr( 20) Tx (\r) TX TO0 To1 0 0 1 173 227.0601 0 TpTP-12.5 0 Td0 Tr( 50) Tx (\r) TX TO0 To1 0 0 1 173 256.8198 0 TpTP-15 0 Td0 Tr(100) Tx (\r) TX TO0 To1 0 0 1 173 286.5801 0 TpTP-15 0 Td0 Tr(200) Tx (\r) TX TO0 To1 0 0 1 173 315.5801 0 TpTP-15 0 Td0 Tr(400) Tx (\r) TX TOUu0 R0 G0.5 w176.9102 319.21 m176.9102 131.29 lS418.5898 319.21 m176.9102 319.21 lSUu0 1 1 0 K0.6 w [5 3 ]0 d182.1899 315.8501 m217.71 297.8501 l238.5898 285.3701 l253.4702 275.5298 l264.75 267.6099 l274.1099 260.8901 l282.0298 255.1299 l288.9902 250.0898 l294.9902 245.5298 l300.27 241.4502 l305.3101 237.6099 l309.6299 234.25 l313.9502 230.8901 l317.5498 228.0098 l321.1499 225.1299 l324.5098 222.4902 l327.6299 220.0898 l330.5098 217.9302 l333.3901 215.5298 l336.0298 213.6099 l338.4302 211.4502 l340.8301 209.5298 l342.9902 207.8501 l345.3901 205.9302 l347.3101 204.25 l349.4702 202.8101 l351.3901 201.1299 l353.0698 199.6899 l354.9902 198.25 l356.6699 196.8101 l358.3501 195.3701 l360.0298 194.1699 l361.71 192.73 l363.1499 191.5298 l364.5898 190.3301 l366.0298 189.1299 l367.4702 187.9302 l368.9102 186.9702 l370.1099 185.77 l371.5498 184.8101 l372.75 183.6099 l373.9502 182.6499 l375.1499 181.6899 l376.3501 180.73 l377.5498 179.77 l378.75 178.8101 l379.71 177.8501 l380.9102 177.1299 l381.8701 176.1699 l382.8301 175.4502 l384.0298 174.4902 l384.9902 173.77 l385.9502 172.8101 l386.9102 172.0898 l387.8701 171.3701 l388.8301 170.6499 l389.5498 169.9302 l390.5098 169.21 l391.4702 168.4902 l392.1899 167.77 l393.1499 167.0498 l393.8701 166.3301 l394.8301 165.6099 l395.5498 164.8901 l396.27 164.4102 l397.23 163.6899 l397.9502 162.9702 l398.6699 162.4902 l399.3901 161.77 l400.1099 161.0498 l400.8301 160.5698 l401.5498 159.8501 l402.27 159.3701 l402.9902 158.8901 l403.71 158.1699 l404.4302 157.6899 l405.1499 157.21 l405.6299 156.4902 l406.3501 156.0098 l407.0698 155.5298 l407.5498 155.0498 l408.27 154.5698 l408.9902 153.8501 l409.4702 153.3701 l410.1899 152.8901 l410.6699 152.4102 l411.3901 151.9302 l411.8701 151.4502 l412.5898 150.9702 l413.0698 150.4902 l413.5498 150.0098 l414.27 149.5298 l414.75 149.0498 l415.23 148.5698 l415.9502 148.0898 l416.4302 147.8501 l416.9102 147.3701 l417.3901 146.8901 l417.8701 146.4102 l418.5898 145.9302 lSUu0 To1 0 0 1 236.9375 232.8125 0 TpTP-19.0259 0 Td0 Tr0 O0 g1 w []0 d1 Ta(610 MeV) Tx (\r) TX TO0 To1 0 0 1 236.9375 232.4375 0 TpTP-20 0 Td0 Tr(________) Tx(\r) TX 2.3994 -9.84 Td-100 Tt-1 Tc( ) Tx /_Times-Italic 10 Tf0 Tt0 Tc(Z) Tx /_Times-Roman 10 Tf( ) Tx (+) Tx ( 1.24) Tx (\r) TX TOUu0 To1 0 0 1 362.9375 244.5625 0 TpTP-19.0259 0 Td0 Tr(710 MeV) Tx (\r) TX TO0 To1 0 0 1 362.9375 243.8125 0 TpTP-20 0 Td0 Tr(________) Tx(\r) TX 3.1494 -9.84 Td/_Times-Italic 10 Tf(Z) Tx /_Times-Roman 10 Tf( ) Tx (+) Tx ( 0.92) Tx (\r) TX TOUuu0 R0 G0.5 w337.3877 242.7144 m320.0479 232.7661 lSUu0 O0 g1 w324.0171 232.5977 m317.0693 230.8535 l323.9868 237.2681 l322.8306 233.9551 l324.0171 232.5977 lfUUuu274.7534 242.5811 m281.7012 244.3252 l274.7837 237.9106 l275.9399 241.2236 l274.7534 242.5811 lfUu0 R0 G0.5 w278.0537 242.0894 m260.7144 232.1411 lSUUu1 0.37 0 0 K0.7 w246.6699 193.0601 m250.27 193.0601 lS248.3501 194.7402 m248.3501 191.3799 lSU0 To1 0 0 1 254.5 189.5 0 TpTP0 Tr0 O0 g1 w0 Ta10.97 0 Tl(Solids) Tx (\r) TX TO0 To1 0 0 1 254.5 179 0 TpTP0 Tr(Gases) Tx (\r) TX TOuu246.3101 181.4302 m246.3101 183.3501 l247.27 184.3101 l248.9502 184.3101 l249.9102 183.3501 l249.9102 181.4302 l248.9502 180.71 l247.27 180.71 l246.3101 181.4302 lNUuu180.48 312 m180.48 313.9199 l181.4399 314.6401 l183.1201 314.6401 l184.0801 313.9199 l184.0801 312 l183.1201 311.04 l181.4399 311.04 l180.48 312 lNUu216 299.52 m216 301.2002 l216.96 302.1602 l218.6401 302.1602 l219.6001 301.2002 l219.6001 299.52 l218.6401 298.5601 l216.96 298.5601 l216 299.52 lNUu280.3198 255.1201 m280.3198 257.04 l281.04 258 l282.96 258 l283.9199 257.04 l283.9199 255.1201 l282.96 254.3999 l281.04 254.3999 l280.3198 255.1201 lN287.04 250.0801 m287.04 252 l288 252.7202 l289.6802 252.7202 l290.6401 252 l290.6401 250.0801 l289.6802 249.3599 l288 249.3599 l287.04 250.0801 lN293.04 245.52 m293.04 247.4399 l294 248.1602 l295.9199 248.1602 l296.6401 247.4399 l296.6401 245.52 l295.9199 244.5601 l294 244.5601 l293.04 245.52 lN298.5601 241.6802 m298.5601 243.6001 l299.52 244.5601 l301.2002 244.5601 l302.1602 243.6001 l302.1602 241.6802 l301.2002 240.96 l299.52 240.96 l298.5601 241.6802 lNUu325.6802 219.6001 m325.6802 221.52 l326.6401 222.48 l328.5601 222.48 l329.2798 221.52 l329.2798 219.6001 l328.5601 218.8799 l326.6401 218.8799 l325.6802 219.6001 lNUu328.7998 217.4399 m328.7998 219.3599 l329.52 220.0801 l331.4399 220.0801 l332.3999 219.3599 l332.3999 217.4399 l331.4399 216.48 l329.52 216.48 l328.7998 217.4399 lNUu364.3198 186.7202 m364.3198 188.6401 l365.04 189.6001 l366.96 189.6001 l367.9199 188.6401 l367.9199 186.7202 l366.96 186 l365.04 186 l364.3198 186.7202 lNUu384.96 168.96 m384.96 170.8799 l385.9199 171.8398 l387.8398 171.8398 l388.5601 170.8799 l388.5601 168.96 l387.8398 168.2402 l385.9199 168.2402 l384.96 168.96 lNUu408.9502 149.0527 m408.9502 150.7324 l409.9102 151.6924 l411.5898 151.6924 l412.5498 150.7324 l412.5498 149.0527 l411.5898 148.0923 l409.9102 148.0923 l408.9502 149.0527 lNUUU0 R0 1 1 0 K0.6 w248.125 180.5996 m249.1743 180.5996 250.0254 181.4507 250.0254 182.5 c250.0254 183.5493 249.1743 184.4004 248.125 184.4004 c247.0757 184.4004 246.2246 183.5493 246.2246 182.5 c246.2246 181.4507 247.0757 180.5996 248.125 180.5996 csu0 O1 g282.0625 254.2246 m283.1118 254.2246 283.9629 255.0757 283.9629 256.125 c283.9629 257.1743 283.1118 258.0254 282.0625 258.0254 c281.0132 258.0254 280.1621 257.1743 280.1621 256.125 c280.1621 255.0757 281.0132 254.2246 282.0625 254.2246 cb288.8125 249.1621 m289.8618 249.1621 290.7129 250.0132 290.7129 251.0625 c290.7129 252.1118 289.8618 252.9629 288.8125 252.9629 c287.7632 252.9629 286.9121 252.1118 286.9121 251.0625 c286.9121 250.0132 287.7632 249.1621 288.8125 249.1621 cb294.8125 244.4121 m295.8618 244.4121 296.7129 245.2632 296.7129 246.3125 c296.7129 247.3618 295.8618 248.2129 294.8125 248.2129 c293.7632 248.2129 292.9121 247.3618 292.9121 246.3125 c292.9121 245.2632 293.7632 244.4121 294.8125 244.4121 cb300.3125 240.7871 m301.3618 240.7871 302.2129 241.6382 302.2129 242.6875 c302.2129 243.7368 301.3618 244.5879 300.3125 244.5879 c299.2632 244.5879 298.4121 243.7368 298.4121 242.6875 c298.4121 241.6382 299.2632 240.7871 300.3125 240.7871 cb327.4375 218.7871 m328.4868 218.7871 329.3379 219.6382 329.3379 220.6875 c329.3379 221.7368 328.4868 222.5879 327.4375 222.5879 c326.3882 222.5879 325.5371 221.7368 325.5371 220.6875 c325.5371 219.6382 326.3882 218.7871 327.4375 218.7871 cb217.75 298.4746 m218.7993 298.4746 219.6504 299.3257 219.6504 300.375 c219.6504 301.4243 218.7993 302.2754 217.75 302.2754 c216.7007 302.2754 215.8496 301.4243 215.8496 300.375 c215.8496 299.3257 216.7007 298.4746 217.75 298.4746 cb182.25 310.9746 m183.2993 310.9746 184.1504 311.8257 184.1504 312.875 c184.1504 313.9243 183.2993 314.7754 182.25 314.7754 c181.2007 314.7754 180.3496 313.9243 180.3496 312.875 c180.3496 311.8257 181.2007 310.9746 182.25 310.9746 cb366.125 185.8496 m367.1743 185.8496 368.0254 186.7007 368.0254 187.75 c368.0254 188.7993 367.1743 189.6504 366.125 189.6504 c365.0757 189.6504 364.2246 188.7993 364.2246 187.75 c364.2246 186.7007 365.0757 185.8496 366.125 185.8496 cb386.75 168.0996 m387.7993 168.0996 388.6504 168.9507 388.6504 170 c388.6504 171.0493 387.7993 171.9004 386.75 171.9004 c385.7007 171.9004 384.8496 171.0493 384.8496 170 c384.8496 168.9507 385.7007 168.0996 386.75 168.0996 cb410.75 147.9121 m411.7993 147.9121 412.6504 148.7632 412.6504 149.8125 c412.6504 150.8618 411.7993 151.7129 410.75 151.7129 c409.7007 151.7129 408.8496 150.8618 408.8496 149.8125 c408.8496 148.7632 409.7007 147.9121 410.75 147.9121 cbUu0 To1 0 0 1 182.4155 141.0576 0 TpTP-3.2498 0 Td0 Tr0 0 0 1 k1 w/_Times-Roman 9 Tf1 Ta12 0 Tl(H) Tx (\r) TX TO0 To1 0 0 1 217.9155 141.0576 0 TpTP-5.2471 0 Td0 Tr(He) Tx (\r) TX TO0 To1 0 0 1 238.4155 141.0576 0 TpTP-3.999 0 Td0 Tr(Li) Tx (\r) TX TO0 To1 0 0 1 253.4155 141.0576 0 TpTP-4.9988 0 Td0 Tr(Be) Tx (\r) TX TO0 To1 0 0 1 264.4155 141.0576 0 TpTP-3.0015 0 Td0 Tr(B) Tx (\r) TX TO0 To1 0 0 1 273.9155 141.0576 0 TpTP-3.0015 0 Td0 Tr(C) Tx (\r) TX TO0 To1 0 0 1 281.9155 141.0576 0 TpTP-3.2498 0 Td0 Tr(N) Tx (\r) TX TO0 To1 0 0 1 289.3335 141.0576 0 TpTP-3.2498 0 Td0 Tr(O) Tx (\r) TX TO0 To1 0 0 1 300.4155 141.0576 0 TpTP-5.2471 0 Td0 Tr(Ne) Tx (\r) TX TO0 To1 0 0 1 383.4155 141.0576 0 TpTP-4.7527 0 Td0 Tr(Sn) Tx (\r) TX TO0 To1 0 0 1 348.9155 141.0576 0 TpTP-4.5 0 Td0 Tr(Fe) Tx (\r) TX TOU0 To1 0 0 1 284.6665 154.8335 0 TpTP0 Tr/_NewCenturySchlbk-Roman 7 Tf-3 Ts0 Ta9.973 0 Tl(\r) Tx TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_blend_AI5 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF