%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: charmedbaryon_s833-web-fig2.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/12/12
%%BoundingBox: 0 0 323 189
%%HiResBoundingBox: 0 0 322.9595 188.4741
%%CropBox: 0 0 322.9595 188.4741
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-12T18:06:41-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-12T18:06:41-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-12T18:06:41-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>152</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUFrdzeWuj&#xA;X9zZR+teQW00ltFQnnKkZZFoOtWAGKvPbbzXdS3mm6D68r6Pe2Ecs+s8ZxKsk9tJc/WBcqzJtJHv&#xA;0Va0HQgFWc+Ub7UdQ8q6Nf6mnp6jd2NvPeJTjSaSJWcce3xE7dsCptirsVdirsVdirsVdirsVdir&#xA;yXVNb80w3n6W06ZpNTiuddtnspo7ie3drSdFsLUQwugjee3RWRqE/GzUNcKs48p3F819r9pM7va2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:0C7056DAC9206811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0C7056DAC9206811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>4293e923-c5b6-11ec-0000-c48623582011</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:d06ffc7d-4530-f24e-a04b-bc2487bd2533</stRef:instanceID>
            <stRef:documentID>xmp.did:F87F117407206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>4293e923-c5b6-11ec-0000-c48623582011</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-11T17:06:52-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-11T17:07:12-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0C7056DAC9206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T18:06:41-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">charmedbaryon_s833-web-fig2</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.576389</stDim:w>
            <stDim:h>2.756944</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=11 Y=42 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>11.000002</xmpG:magenta>
                           <xmpG:yellow>41.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -188.474 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 188.474 li
322.959 188.474 li
322.959 0 li
cp
clp
[1 0 0 1 0 0 ]ct
191.083 88.3301 mo
212.085 103.555 li
265.208 105.556 li
297.213 92.3311 li
276.209 77.1055 li
223.087 75.105 li
191.083 88.3301 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .11 .42 0 cmyk
f
.5475 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
191.083 88.3301 mo
212.085 103.555 li
265.208 105.556 li
297.213 92.3311 li
276.209 77.1055 li
223.087 75.105 li
191.083 88.3301 li
cp
0 0 0 1 cmyk
@
236.757 70.6592 mo
215.753 55.4341 li
194.75 40.2095 li
247.871 42.21 li
300.88 44.21 li
268.875 57.4351 li
236.757 70.6592 li
0 .11 .42 0 cmyk
f
236.757 70.6592 mo
215.753 55.4341 li
194.75 40.2095 li
247.871 42.21 li
300.88 44.21 li
268.875 57.4351 li
236.757 70.6592 li
cp
0 0 0 1 cmyk
@
272.542 9.31396 mo
240.425 22.5396 li
219.421 7.31494 li
272.542 9.31396 li
0 .11 .42 0 cmyk
f
272.542 9.31396 mo
240.425 22.5396 li
219.421 7.31494 li
272.542 9.31396 li
cp
0 0 0 1 cmyk
@
276.209 77.1055 mo
297.213 92.3311 li
@
.82125 lw
297.213 92.3311 mo
265.208 105.556 li
@
1.095 lw
265.208 105.556 mo
212.085 103.555 li
@
.82125 lw
212.085 103.555 mo
191.083 88.3301 li
@
.5475 lw
191.083 88.3301 mo
223.087 75.105 li
@
.27375 lw
194.75 40.2095 mo
223.087 75.105 li
@
194.75 40.2095 mo
191.083 88.3301 li
@
300.88 44.21 mo
297.213 92.3311 li
@
300.88 44.21 mo
276.209 77.1055 li
@
.5475 lw
236.757 70.6592 mo
212.085 103.555 li
@
236.757 70.6592 mo
265.208 105.556 li
@
1.095 lw
194.75 40.2095 mo
215.753 55.4341 li
236.757 70.6592 li
268.875 57.4351 li
300.88 44.21 li
@
.27375 lw
194.75 40.2095 mo
219.421 7.31494 li
@
300.88 44.21 mo
272.542 9.31396 li
@
.5475 lw
236.757 70.6592 mo
240.425 22.5396 li
@
1.095 lw
272.542 9.31396 mo
240.425 22.5396 li
219.421 7.31494 li
@
269.251 62.4629 mo
269.453 62.4629 li
269.343 62.9956 269.475 63.085 269.865 63.085 cv
272.142 63.085 li
272.532 63.085 272.711 62.9956 272.887 62.4629 cv
273.087 62.4629 li
272.472 64.7627 li
272.272 64.7627 li
272.382 64.2295 272.25 64.1411 271.861 64.1411 cv
269.583 64.1411 li
269.193 64.1411 269.015 64.2295 268.837 64.7627 cv
268.638 64.7627 li
269.251 62.4629 li
cp
268.949 60.0625 mo
274.673 60.0625 li
274.224 61.7402 li
274.048 61.7402 li
274.068 61.541 274.216 61.0625 273.483 61.0625 cv
269.603 61.0625 li
268.87 61.0625 268.765 61.541 268.678 61.7402 cv
268.5 61.7402 li
268.949 60.0625 li
cp
267.283 65.3843 mo
267.483 65.3843 li
267.381 66.1411 267.35 66.5068 268.151 66.5068 cv
272.03 66.5068 li
272.83 66.5068 272.994 66.1411 273.296 65.3843 cv
273.497 65.3843 li
272.921 67.5405 li
266.708 67.5405 li
267.283 65.3843 li
cp
f
276.245 60.6079 mo
276.245 60.1196 li
278.087 60.1196 li
278.087 58.2759 li
278.577 58.2759 li
278.577 60.1196 li
280.419 60.1196 li
280.419 60.6079 li
278.577 60.6079 li
278.577 62.4478 li
278.087 62.4478 li
278.087 60.6079 li
276.245 60.6079 li
cp
f
277.918 66.4038 mo
278.065 66.5527 278.138 66.6973 278.138 66.8379 cv
278.138 66.9648 278.1 67.064 278.025 67.1343 cv
277.949 67.2041 277.858 67.2393 277.754 67.2393 cv
277.655 67.2393 277.571 67.208 277.504 67.1455 cv
277.436 67.0835 277.401 67.0059 277.401 66.9136 cv
277.401 66.8433 277.423 66.7671 277.468 66.686 cv
277.514 66.6045 277.536 66.5513 277.536 66.5269 cv
277.536 66.478 277.508 66.4365 277.453 66.4028 cv
277.397 66.3691 277.307 66.3521 277.186 66.3521 cv
276.75 66.3521 276.371 66.6006 276.049 67.0981 cv
275.727 67.5952 275.566 68.1167 275.566 68.6626 cv
275.566 68.9697 275.631 69.21 275.761 69.3838 cv
275.892 69.5576 276.087 69.645 276.347 69.645 cv
276.556 69.645 276.758 69.5845 276.956 69.4634 cv
277.152 69.3428 277.333 69.1895 277.499 69.0015 cv
277.527 68.9688 li
277.646 69.0586 li
277.457 69.3003 277.273 69.4858 277.096 69.6162 cv
276.785 69.8418 276.439 69.9541 276.058 69.9541 cv
275.696 69.9541 275.401 69.8379 275.176 69.6055 cv
274.949 69.374 274.837 69.0571 274.837 68.6558 cv
274.837 68.04 275.088 67.4727 275.591 66.9541 cv
276.087 66.439 276.625 66.1812 277.203 66.1812 cv
277.533 66.1812 277.773 66.2559 277.918 66.4038 cv
cp
f
306.29 40.7051 mo
312.047 40.7051 li
311.71 42.3833 li
311.5 42.3833 li
311.501 41.9604 311.51 41.2163 310.41 41.2163 cv
307.965 41.2163 li
309.434 44.083 li
305.995 47.1387 li
309.25 47.1387 li
309.962 47.1387 310.417 46.9829 311.036 45.9058 cv
311.258 45.9058 li
310.24 48.1836 li
304.16 48.1836 li
308.253 44.5498 li
306.29 40.7051 li
cp
f
313.16 41.2505 mo
313.16 40.7617 li
315.002 40.7617 li
315.002 38.918 li
315.492 38.918 li
315.492 40.7617 li
317.335 40.7617 li
317.335 41.2505 li
315.492 41.2505 li
315.492 43.0898 li
315.002 43.0898 li
315.002 41.2505 li
313.16 41.2505 li
cp
f
318.783 41.2505 mo
318.783 40.7617 li
320.627 40.7617 li
320.627 38.918 li
321.116 38.918 li
321.116 40.7617 li
322.959 40.7617 li
322.959 41.2505 li
321.116 41.2505 li
321.116 43.0898 li
320.627 43.0898 li
320.627 41.2505 li
318.783 41.2505 li
cp
f
313.908 47.0464 mo
314.055 47.1953 314.126 47.3398 314.126 47.48 cv
314.126 47.6074 314.088 47.7061 314.014 47.7764 cv
313.937 47.8467 313.848 47.8813 313.745 47.8813 cv
313.645 47.8813 313.56 47.8506 313.493 47.7876 cv
313.424 47.7256 313.391 47.6484 313.391 47.5562 cv
313.391 47.4854 313.414 47.4097 313.458 47.3281 cv
313.502 47.2466 313.524 47.1938 313.524 47.1694 cv
313.524 47.1206 313.498 47.0791 313.441 47.0449 cv
313.386 47.0112 313.296 46.9941 313.174 46.9941 cv
312.738 46.9941 312.359 47.2432 312.038 47.7397 cv
311.716 48.2373 311.555 48.7583 311.555 49.3047 cv
311.555 49.6118 311.621 49.8521 311.75 50.0269 cv
311.88 50.2002 312.077 50.2866 312.336 50.2866 cv
312.545 50.2866 312.749 50.2261 312.945 50.106 cv
313.142 49.9849 313.323 49.8311 313.489 49.644 cv
313.516 49.6113 li
313.634 49.7007 li
313.445 49.9424 313.261 50.1279 313.085 50.2583 cv
312.773 50.4839 312.428 50.5962 312.048 50.5962 cv
311.684 50.5962 311.39 50.48 311.165 50.248 cv
310.939 50.0161 310.827 49.6997 310.827 49.2979 cv
310.827 48.6821 311.078 48.1147 311.58 47.5967 cv
312.077 47.0815 312.614 46.8237 313.191 46.8237 cv
313.521 46.8237 313.761 46.8975 313.908 47.0464 cv
cp
f
262.678 112.037 mo
262.877 112.037 li
262.769 112.57 262.901 112.659 263.29 112.659 cv
265.569 112.659 li
265.958 112.659 266.137 112.57 266.313 112.037 cv
266.512 112.037 li
265.898 114.337 li
265.699 114.337 li
265.807 113.803 265.675 113.715 265.288 113.715 cv
263.008 113.715 li
262.619 113.715 262.44 113.803 262.264 114.337 cv
262.064 114.337 li
262.678 112.037 li
cp
262.375 109.636 mo
268.098 109.636 li
267.65 111.314 li
267.473 111.314 li
267.493 111.114 267.643 110.636 266.909 110.636 cv
263.03 110.636 li
262.296 110.636 262.191 111.114 262.105 111.314 cv
261.927 111.314 li
262.375 109.636 li
cp
260.708 114.959 mo
260.909 114.959 li
260.806 115.714 260.776 116.081 261.577 116.081 cv
265.456 116.081 li
266.254 116.081 266.42 115.714 266.722 114.959 cv
266.921 114.959 li
266.346 117.114 li
260.132 117.114 li
260.708 114.959 li
cp
f
271.272 109.945 mo
271.528 109.259 271.656 108.603 271.656 107.976 cv
271.656 107.758 271.631 107.583 271.586 107.45 cv
271.501 107.197 271.342 107.07 271.107 107.07 cv
270.674 107.07 270.308 107.537 270.006 108.469 cv
269.779 109.183 269.665 109.777 269.665 110.251 cv
269.665 110.453 269.687 110.62 269.734 110.755 cv
269.823 111.017 269.985 111.148 270.223 111.148 cv
270.626 111.148 270.975 110.747 271.272 109.945 cv
cp
271.995 107.492 mo
272.11 107.755 272.168 108.063 272.168 108.413 cv
272.168 109.185 271.964 109.864 271.557 110.451 cv
271.157 111.025 270.705 111.312 270.199 111.312 cv
269.907 111.312 269.659 111.187 269.456 110.937 cv
269.252 110.687 269.151 110.341 269.151 109.9 cv
269.151 109.165 269.352 108.48 269.75 107.853 cv
270.16 107.208 270.615 106.887 271.118 106.887 cv
271.523 106.887 271.815 107.088 271.995 107.492 cv
cp
f
212.666 76.4292 mo
213.625 72.958 li
213.708 72.6641 213.755 72.4863 213.77 72.4243 cv
213.784 72.3623 213.789 72.2959 213.789 72.2241 cv
213.789 72.1147 213.757 72.0293 213.696 71.9673 cv
213.634 71.9053 213.514 71.874 213.333 71.874 cv
213.289 71.874 213.245 71.8774 213.203 71.8823 cv
213.16 71.8887 213.112 71.895 213.059 71.9019 cv
213.059 71.7168 li
213.301 71.6797 213.472 71.6519 213.575 71.6323 cv
213.677 71.6138 213.789 71.5918 213.907 71.5654 cv
214.905 71.3462 li
214.927 71.3613 214.942 71.3784 214.95 71.397 cv
214.206 73.8115 li
214.665 73.1113 215.05 72.5908 215.359 72.2505 cv
215.902 71.6475 216.389 71.3462 216.818 71.3462 cv
216.984 71.3462 217.127 71.3784 217.248 71.4419 cv
217.477 71.5654 217.592 71.7881 217.592 72.1104 cv
217.592 72.2002 217.583 72.2939 217.564 72.3911 cv
217.544 72.4878 217.521 72.5933 217.492 72.7056 cv
216.751 75.3955 li
216.737 75.4517 216.72 75.5205 216.702 75.6011 cv
216.683 75.6812 216.674 75.7383 216.674 75.772 cv
216.674 75.8286 216.686 75.8789 216.712 75.9238 cv
216.74 75.9683 216.78 75.9912 216.838 75.9912 cv
216.931 75.9912 217.038 75.9341 217.161 75.8198 cv
217.284 75.7056 217.482 75.4614 217.76 75.0869 cv
217.922 75.2329 li
217.621 75.6484 217.383 75.9404 217.206 76.1089 cv
216.906 76.4043 216.617 76.5527 216.341 76.5527 cv
216.216 76.5527 216.096 76.5107 215.98 76.4263 cv
215.864 76.3418 215.807 76.1895 215.807 75.9683 cv
215.807 75.9053 215.81 75.8374 215.82 75.7666 cv
215.829 75.6958 215.842 75.6338 215.856 75.5811 cv
216.574 72.8516 li
216.611 72.7021 216.636 72.5791 216.649 72.4839 cv
216.662 72.3882 216.668 72.3198 216.668 72.2788 cv
216.668 72.189 216.647 72.1108 216.604 72.0459 cv
216.56 71.98 216.485 71.9473 216.374 71.9473 cv
216.09 71.9473 215.731 72.2017 215.299 72.7104 cv
215.044 73.0132 214.788 73.3745 214.525 73.7935 cv
214.331 74.1187 214.175 74.436 214.064 74.7441 cv
213.951 75.0532 213.772 75.6143 213.527 76.4292 cv
212.666 76.4292 li
cp
f
286.883 72.7251 mo
286.772 72.4521 286.567 72.3149 286.265 72.3149 cv
286.006 72.3149 285.724 72.4438 285.419 72.7026 cv
285.115 72.9609 284.86 73.3887 284.657 73.9849 cv
284.494 74.4536 284.34 74.9438 284.198 75.4556 cv
284.054 75.9668 283.983 76.2671 283.983 76.3564 cv
283.983 76.4995 284.042 76.605 284.158 76.6729 cv
284.274 76.7402 284.414 76.7744 284.577 76.7744 cv
285.23 76.7744 285.803 76.3564 286.3 75.522 cv
286.745 74.7769 286.967 74.0376 286.967 73.3037 cv
286.967 73.0596 286.94 72.8677 286.883 72.7251 cv
cp
281.705 79.0771 mo
281.93 79.0771 282.099 79.0347 282.213 78.9512 cv
282.329 78.8667 282.411 78.7231 282.462 78.5215 cv
284.017 73.0396 li
284.054 72.9038 284.077 72.8057 284.086 72.7451 cv
284.096 72.6851 284.1 72.6382 284.1 72.604 cv
284.1 72.4795 284.054 72.3877 283.963 72.3271 cv
283.871 72.2666 283.738 72.2363 283.561 72.2363 cv
283.524 72.2363 283.489 72.2373 283.455 72.2393 cv
283.42 72.2412 283.385 72.2461 283.348 72.2529 cv
283.336 72.0684 li
285.157 71.8037 li
285.178 71.8003 285.197 71.8154 285.208 71.8491 cv
285.191 71.9165 285.177 71.9673 285.166 72.0015 cv
284.856 73.0361 li
285.101 72.7061 285.327 72.4551 285.532 72.2822 cv
285.904 71.9673 286.29 71.8091 286.692 71.8091 cv
287.098 71.8091 287.419 71.9341 287.651 72.1836 cv
287.884 72.4321 288 72.813 288 73.3262 cv
288 74.2065 287.631 75.0444 286.889 75.8423 cv
286.156 76.6323 285.395 77.0273 284.606 77.0273 cv
284.45 77.0273 284.318 77.0112 284.21 76.9795 cv
284.102 76.9482 283.97 76.8955 283.813 76.8203 cv
283.723 77.166 li
283.625 77.5488 283.557 77.8228 283.52 77.9873 cv
283.422 78.418 283.374 78.6616 283.374 78.7178 cv
283.374 78.8716 283.422 78.9688 283.52 79.0098 cv
283.618 79.0508 283.81 79.0791 284.098 79.0942 cv
284.098 79.2627 li
281.705 79.2627 li
281.705 79.0771 li
cp
f
206.322 56.7495 mo
208.289 55.2446 li
212.919 61.0327 li
210.373 62.0752 li
206.322 56.7495 li
0 0 0 0 cmyk
f
202.48 60.7021 mo
202.68 60.7021 li
202.572 61.2349 202.704 61.3232 203.092 61.3232 cv
205.372 61.3232 li
205.76 61.3232 205.94 61.2349 206.116 60.7021 cv
206.315 60.7021 li
205.701 63.002 li
205.501 63.002 li
205.611 62.4683 205.478 62.3789 205.089 62.3789 cv
202.811 62.3789 li
202.421 62.3789 202.243 62.4683 202.066 63.002 cv
201.867 63.002 li
202.48 60.7021 li
cp
202.177 58.3013 mo
207.902 58.3013 li
207.454 59.979 li
207.276 59.979 li
207.295 59.7793 207.446 59.3008 206.712 59.3008 cv
202.832 59.3008 li
202.098 59.3008 201.994 59.7793 201.906 59.979 cv
201.729 59.979 li
202.177 58.3013 li
cp
200.511 63.6235 mo
200.711 63.6235 li
200.609 64.3794 200.579 64.7461 201.378 64.7461 cv
205.258 64.7461 li
206.058 64.7461 206.222 64.3794 206.524 63.6235 cv
206.725 63.6235 li
206.149 65.7793 li
199.936 65.7793 li
200.511 63.6235 li
cp
0 0 0 1 cmyk
f
211.147 64.6421 mo
211.294 64.791 211.367 64.9355 211.367 65.0757 cv
211.367 65.2031 211.33 65.3018 211.253 65.3721 cv
211.176 65.4424 211.086 65.4771 210.983 65.4771 cv
210.884 65.4771 210.799 65.4463 210.732 65.3833 cv
210.665 65.3213 210.63 65.2437 210.63 65.1519 cv
210.63 65.0811 210.652 65.0049 210.697 64.9233 cv
210.742 64.8428 210.764 64.7896 210.764 64.7646 cv
210.764 64.7158 210.736 64.6748 210.681 64.6406 cv
210.626 64.6064 210.536 64.5898 210.415 64.5898 cv
209.978 64.5898 209.598 64.8389 209.278 65.3359 cv
208.955 65.8325 208.794 66.3545 208.794 66.9004 cv
208.794 67.2075 208.86 67.4478 208.989 67.6216 cv
209.121 67.7954 209.317 67.8828 209.576 67.8828 cv
209.785 67.8828 209.988 67.8218 210.185 67.7017 cv
210.38 67.5806 210.563 67.4268 210.728 67.2397 cv
210.756 67.207 li
210.875 67.2959 li
210.684 67.5376 210.502 67.7236 210.325 67.854 cv
210.013 68.0791 209.667 68.1914 209.287 68.1914 cv
208.923 68.1914 208.628 68.0757 208.404 67.8438 cv
208.178 67.6118 208.067 67.2949 208.067 66.8936 cv
208.067 66.2773 208.317 65.7104 208.819 65.1924 cv
209.317 64.6768 209.853 64.4189 210.431 64.4189 cv
210.761 64.4189 211.001 64.4932 211.147 64.6421 cv
cp
f
211.075 59.3555 mo
211.331 58.6699 211.458 58.0132 211.458 57.3872 cv
211.458 57.1699 211.436 56.9941 211.389 56.8613 cv
211.303 56.6084 211.144 56.4814 210.91 56.4814 cv
210.476 56.4814 210.11 56.9478 209.809 57.8809 cv
209.581 58.5942 209.467 59.188 209.467 59.6631 cv
209.467 59.8633 209.49 60.0313 209.538 60.166 cv
209.625 60.4277 209.79 60.5586 210.026 60.5586 cv
210.429 60.5586 210.779 60.1577 211.075 59.3555 cv
cp
211.796 56.9023 mo
211.913 57.166 211.97 57.4731 211.97 57.8237 cv
211.97 58.5962 211.768 59.2754 211.36 59.8618 cv
210.959 60.436 210.506 60.7231 210.002 60.7231 cv
209.708 60.7231 209.461 60.5986 209.258 60.3486 cv
209.055 60.0981 208.955 59.7524 208.955 59.3115 cv
208.955 58.5752 209.154 57.8926 209.552 57.2632 cv
209.963 56.6196 210.417 56.2979 210.919 56.2979 cv
211.325 56.2979 211.619 56.4995 211.796 56.9023 cv
cp
f
225.101 28.4053 mo
221.821 28.4053 li
222.301 26.6055 li
222.469 26.6055 li
222.458 27.1499 222.555 27.2832 223.022 27.2832 cv
224.778 27.2832 li
224.838 26.9722 li
224.051 26.7168 223.584 26.4277 223.305 25.7607 cv
222.833 24.6167 223.313 23.3164 224.003 22.4834 cv
224.665 21.6724 225.251 21.4277 225.6 21.2505 cv
226.19 20.9502 226.974 20.7607 227.765 20.7607 cv
228.553 20.7607 229.236 20.9502 229.667 21.2505 cv
229.92 21.4277 230.377 21.6724 230.605 22.4834 cv
230.85 23.3164 230.635 24.6167 229.551 25.7607 cv
228.918 26.4277 228.297 26.7168 227.373 26.9722 cv
227.268 27.2832 li
229.024 27.2832 li
229.49 27.2832 229.659 27.1499 229.938 26.6055 cv
230.105 26.6055 li
229.625 28.4053 li
226.345 28.4053 li
226.974 26.7168 li
227.372 26.561 227.924 26.4497 228.624 25.4502 cv
229.216 24.606 229.852 22.6831 229.126 21.6943 cv
228.792 21.2388 228.237 21.1172 227.669 21.1172 cv
227.102 21.1172 226.48 21.2388 225.903 21.6943 cv
224.649 22.6831 224.259 24.606 224.4 25.4502 cv
224.567 26.4497 225.06 26.561 225.374 26.7168 cv
225.101 28.4053 li
cp
f
233.221 18.8696 mo
233.221 20.8291 li
235.198 20.8291 li
235.198 21.2871 li
233.221 21.2871 li
233.221 23.313 li
232.764 23.313 li
232.764 21.2871 li
230.788 21.2871 li
230.788 20.8291 li
232.764 20.8291 li
232.764 18.8696 li
233.221 18.8696 li
cp
f
233.099 27.2695 mo
233.247 27.418 233.319 27.5625 233.319 27.7031 cv
233.319 27.8301 233.281 27.9287 233.206 27.9995 cv
233.129 28.0693 233.04 28.1045 232.937 28.1045 cv
232.836 28.1045 232.752 28.0737 232.684 28.0107 cv
232.616 27.9487 232.583 27.8711 232.583 27.7793 cv
232.583 27.7085 232.606 27.6323 232.65 27.5508 cv
232.694 27.4697 232.716 27.417 232.716 27.3926 cv
232.716 27.3433 232.689 27.3022 232.632 27.2681 cv
232.579 27.2344 232.489 27.2173 232.366 27.2173 cv
231.929 27.2173 231.551 27.4658 231.23 27.9629 cv
230.908 28.4604 230.747 28.9814 230.747 29.5278 cv
230.747 29.835 230.812 30.0752 230.943 30.249 cv
231.073 30.4233 231.268 30.5098 231.528 30.5098 cv
231.738 30.5098 231.941 30.4492 232.137 30.3291 cv
232.333 30.208 232.514 30.0542 232.68 29.8672 cv
232.708 29.8345 li
232.827 29.9238 li
232.637 30.1655 232.454 30.3511 232.277 30.4814 cv
231.965 30.7065 231.62 30.8193 231.24 30.8193 cv
230.876 30.8193 230.582 30.7031 230.356 30.4712 cv
230.131 30.2393 230.019 29.9224 230.019 29.521 cv
230.019 28.9053 230.27 28.3379 230.772 27.8198 cv
231.268 27.3047 231.806 27.0469 232.383 27.0469 cv
232.713 27.0469 232.953 27.1206 233.099 27.2695 cv
cp
f
236.798 27.2695 mo
236.945 27.418 237.018 27.5625 237.018 27.7031 cv
237.018 27.8301 236.98 27.9287 236.905 27.9995 cv
236.829 28.0693 236.739 28.1045 236.636 28.1045 cv
236.536 28.1045 236.452 28.0737 236.383 28.0107 cv
236.315 27.9487 236.282 27.8711 236.282 27.7793 cv
236.282 27.7085 236.305 27.6323 236.349 27.5508 cv
236.394 27.4697 236.416 27.417 236.416 27.3926 cv
236.416 27.3433 236.388 27.3022 236.333 27.2681 cv
236.277 27.2344 236.188 27.2173 236.066 27.2173 cv
235.629 27.2173 235.25 27.4658 234.929 27.9629 cv
234.607 28.4604 234.446 28.9814 234.446 29.5278 cv
234.446 29.835 234.511 30.0752 234.642 30.249 cv
234.773 30.4233 234.967 30.5098 235.228 30.5098 cv
235.438 30.5098 235.639 30.4492 235.836 30.3291 cv
236.033 30.208 236.213 30.0542 236.379 29.8672 cv
236.409 29.8345 li
236.527 29.9238 li
236.336 30.1655 236.153 30.3511 235.977 30.4814 cv
235.666 30.7065 235.318 30.8193 234.938 30.8193 cv
234.576 30.8193 234.281 30.7031 234.055 30.4712 cv
233.831 30.2393 233.718 29.9224 233.718 29.521 cv
233.718 28.9053 233.969 28.3379 234.471 27.8198 cv
234.967 27.3047 235.505 27.0469 236.083 27.0469 cv
236.414 27.0469 236.653 27.1206 236.798 27.2695 cv
cp
f
279.819 6.54248 mo
280.02 6.54248 li
279.911 7.07617 280.042 7.16455 280.432 7.16455 cv
282.71 7.16455 li
283.098 7.16455 283.28 7.07617 283.455 6.54248 cv
283.655 6.54248 li
283.041 8.84229 li
282.841 8.84229 li
282.95 8.30908 282.817 8.21973 282.428 8.21973 cv
280.15 8.21973 li
279.761 8.21973 279.582 8.30908 279.406 8.84229 cv
279.207 8.84229 li
279.819 6.54248 li
cp
279.516 4.14258 mo
285.241 4.14258 li
284.792 5.82031 li
284.616 5.82031 li
284.635 5.62061 284.784 5.14209 284.051 5.14209 cv
280.17 5.14209 li
279.437 5.14209 279.333 5.62061 279.246 5.82031 cv
279.068 5.82031 li
279.516 4.14258 li
cp
277.85 9.46533 mo
278.05 9.46533 li
277.949 10.2202 277.917 10.5874 278.717 10.5874 cv
282.597 10.5874 li
283.398 10.5874 283.561 10.2202 283.863 9.46533 cv
284.064 9.46533 li
283.489 11.6201 li
277.275 11.6201 li
277.85 9.46533 li
cp
f
288.378 2.08301 mo
288.378 4.04199 li
290.354 4.04199 li
290.354 4.50049 li
288.378 4.50049 li
288.378 6.52637 li
287.919 6.52637 li
287.919 4.50049 li
285.944 4.50049 li
285.944 4.04199 li
287.919 4.04199 li
287.919 2.08301 li
288.378 2.08301 li
cp
f
292.955 2.08301 mo
292.955 4.04199 li
294.93 4.04199 li
294.93 4.50049 li
292.955 4.50049 li
292.955 6.52637 li
292.495 6.52637 li
292.495 4.50049 li
290.519 4.50049 li
290.519 4.04199 li
292.495 4.04199 li
292.495 2.08301 li
292.955 2.08301 li
cp
f
288.024 10.4839 mo
288.17 10.6318 288.244 10.7769 288.244 10.917 cv
288.244 11.0444 288.206 11.1426 288.129 11.2139 cv
288.053 11.2837 287.964 11.3184 287.86 11.3184 cv
287.76 11.3184 287.676 11.2876 287.609 11.2246 cv
287.541 11.1626 287.507 11.0854 287.507 10.9937 cv
287.507 10.9229 287.528 10.8467 287.574 10.7651 cv
287.619 10.6841 287.641 10.6309 287.641 10.6064 cv
287.641 10.5576 287.614 10.5166 287.557 10.4824 cv
287.502 10.4482 287.413 10.4316 287.292 10.4316 cv
286.854 10.4316 286.474 10.6802 286.154 11.1772 cv
285.833 11.6743 285.671 12.1958 285.671 12.7422 cv
285.671 13.0493 285.737 13.2891 285.867 13.4634 cv
285.997 13.6372 286.192 13.7241 286.452 13.7241 cv
286.662 13.7241 286.864 13.6636 287.061 13.543 cv
287.257 13.4219 287.439 13.2681 287.605 13.0811 cv
287.632 13.0488 li
287.75 13.1377 li
287.56 13.3794 287.377 13.5649 287.202 13.6958 cv
286.889 13.9204 286.543 14.0332 286.164 14.0332 cv
285.801 14.0332 285.506 13.917 285.282 13.6855 cv
285.054 13.4531 284.943 13.1362 284.943 12.7349 cv
284.943 12.1191 285.194 11.5522 285.696 11.0337 cv
286.192 10.5186 286.729 10.2607 287.306 10.2607 cv
287.638 10.2607 287.877 10.335 288.024 10.4839 cv
cp
f
291.724 10.4839 mo
291.87 10.6318 291.943 10.7769 291.943 10.917 cv
291.943 11.0444 291.905 11.1426 291.829 11.2139 cv
291.753 11.2837 291.664 11.3184 291.561 11.3184 cv
291.459 11.3184 291.375 11.2876 291.309 11.2246 cv
291.241 11.1626 291.207 11.0854 291.207 10.9937 cv
291.207 10.9229 291.228 10.8467 291.273 10.7651 cv
291.318 10.6841 291.34 10.6309 291.34 10.6064 cv
291.34 10.5576 291.313 10.5166 291.256 10.4824 cv
291.202 10.4482 291.113 10.4316 290.991 10.4316 cv
290.553 10.4316 290.174 10.6802 289.853 11.1772 cv
289.531 11.6743 289.372 12.1958 289.372 12.7422 cv
289.372 13.0493 289.436 13.2891 289.565 13.4634 cv
289.696 13.6372 289.891 13.7241 290.152 13.7241 cv
290.36 13.7241 290.564 13.6636 290.761 13.543 cv
290.958 13.4219 291.138 13.2681 291.304 13.0811 cv
291.333 13.0488 li
291.45 13.1377 li
291.26 13.3794 291.078 13.5649 290.901 13.6958 cv
290.588 13.9204 290.243 14.0332 289.863 14.0332 cv
289.5 14.0332 289.206 13.917 288.981 13.6855 cv
288.754 13.4531 288.641 13.1362 288.641 12.7349 cv
288.641 12.1191 288.893 11.5522 289.396 11.0337 cv
289.891 10.5186 290.428 10.2607 291.006 10.2607 cv
291.337 10.2607 291.577 10.335 291.724 10.4839 cv
cp
f
202.386 4.4585 mo
202.585 4.4585 li
202.477 4.99219 202.608 5.08105 202.998 5.08105 cv
205.277 5.08105 li
205.665 5.08105 205.846 4.99219 206.02 4.4585 cv
206.22 4.4585 li
205.606 6.75879 li
205.408 6.75879 li
205.515 6.2251 205.383 6.13672 204.995 6.13672 cv
202.715 6.13672 li
202.327 6.13672 202.147 6.2251 201.971 6.75879 cv
201.772 6.75879 li
202.386 4.4585 li
cp
202.083 2.05859 mo
207.805 2.05859 li
207.358 3.73633 li
207.18 3.73633 li
207.2 3.53662 207.35 3.05859 206.617 3.05859 cv
202.738 3.05859 li
202.003 3.05859 201.899 3.53662 201.812 3.73633 cv
201.634 3.73633 li
202.083 2.05859 li
cp
200.416 7.38086 mo
200.617 7.38086 li
200.514 8.13623 200.483 8.50342 201.285 8.50342 cv
205.164 8.50342 li
205.963 8.50342 206.128 8.13623 206.428 7.38086 cv
206.629 7.38086 li
206.055 9.53662 li
199.839 9.53662 li
200.416 7.38086 li
cp
f
211.636 -.000488281 mo
211.636 1.95898 li
213.613 1.95898 li
213.613 2.41699 li
211.636 2.41699 li
211.636 4.44336 li
211.178 4.44336 li
211.178 2.41699 li
209.203 2.41699 li
209.203 1.95898 li
211.178 1.95898 li
211.178 -.000488281 li
211.636 -.000488281 li
cp
f
210.588 8.39941 mo
210.734 8.54834 210.808 8.69287 210.808 8.83301 cv
210.808 8.96045 210.77 9.05957 210.694 9.12988 cv
210.619 9.19971 210.528 9.23486 210.425 9.23486 cv
210.325 9.23486 210.242 9.20361 210.173 9.14111 cv
210.106 9.0791 210.071 9.00146 210.071 8.90918 cv
210.071 8.83887 210.093 8.7627 210.138 8.68115 cv
210.184 8.6001 210.207 8.54688 210.207 8.52295 cv
210.207 8.47363 210.178 8.43262 210.122 8.39844 cv
210.067 8.36475 209.978 8.34766 209.856 8.34766 cv
209.419 8.34766 209.04 8.59619 208.718 9.09326 cv
208.397 9.59082 208.236 10.1118 208.236 10.6582 cv
208.236 10.9648 208.301 11.2051 208.432 11.3794 cv
208.562 11.5537 208.757 11.6401 209.017 11.6401 cv
209.227 11.6401 209.429 11.5796 209.626 11.459 cv
209.822 11.3379 210.003 11.1846 210.169 10.9966 cv
210.198 10.9648 li
210.316 11.0542 li
210.125 11.2959 209.943 11.4814 209.767 11.6118 cv
209.455 11.8374 209.108 11.9497 208.728 11.9497 cv
208.365 11.9497 208.071 11.8335 207.845 11.6016 cv
207.62 11.3691 207.508 11.0527 207.508 10.6514 cv
207.508 10.0356 207.759 9.46777 208.26 8.94971 cv
208.757 8.43457 209.294 8.17676 209.872 8.17676 cv
210.204 8.17676 210.442 8.25098 210.588 8.39941 cv
cp
f
214.289 8.39941 mo
214.434 8.54834 214.507 8.69287 214.507 8.83301 cv
214.507 8.96045 214.469 9.05957 214.393 9.12988 cv
214.318 9.19971 214.228 9.23486 214.125 9.23486 cv
214.024 9.23486 213.941 9.20361 213.874 9.14111 cv
213.805 9.0791 213.77 9.00146 213.77 8.90918 cv
213.77 8.83887 213.792 8.7627 213.838 8.68115 cv
213.882 8.6001 213.906 8.54688 213.906 8.52295 cv
213.906 8.47363 213.877 8.43262 213.821 8.39844 cv
213.766 8.36475 213.678 8.34766 213.555 8.34766 cv
213.118 8.34766 212.74 8.59619 212.417 9.09326 cv
212.096 9.59082 211.936 10.1118 211.936 10.6582 cv
211.936 10.9648 212 11.2051 212.13 11.3794 cv
212.261 11.5537 212.457 11.6401 212.717 11.6401 cv
212.925 11.6401 213.128 11.5796 213.326 11.459 cv
213.522 11.3379 213.703 11.1846 213.869 10.9966 cv
213.897 10.9648 li
214.015 11.0542 li
213.826 11.2959 213.643 11.4814 213.466 11.6118 cv
213.154 11.8374 212.808 11.9497 212.428 11.9497 cv
212.065 11.9497 211.77 11.8335 211.545 11.6016 cv
211.32 11.3691 211.207 11.0527 211.207 10.6514 cv
211.207 10.0356 211.458 9.46777 211.96 8.94971 cv
212.457 8.43457 212.994 8.17676 213.572 8.17676 cv
213.903 8.17676 214.141 8.25098 214.289 8.39941 cv
cp
f
182.989 35.5591 mo
188.747 35.5591 li
188.409 37.2373 li
188.199 37.2373 li
188.2 36.8145 188.209 36.0703 187.109 36.0703 cv
184.664 36.0703 li
186.133 38.9375 li
182.695 41.9927 li
185.949 41.9927 li
186.661 41.9927 187.115 41.8369 187.734 40.7603 cv
187.958 40.7603 li
186.939 43.0376 li
180.858 43.0376 li
184.952 39.4038 li
182.989 35.5591 li
cp
f
191.46 36.6138 mo
191.715 35.9277 191.844 35.2715 191.844 34.6445 cv
191.844 34.4277 191.821 34.2524 191.774 34.1191 cv
191.69 33.8662 191.53 33.7393 191.296 33.7393 cv
190.862 33.7393 190.496 34.2056 190.195 35.1387 cv
189.967 35.8521 189.854 36.4463 189.854 36.9209 cv
189.854 37.1216 189.876 37.2891 189.922 37.4243 cv
190.012 37.6865 190.174 37.8164 190.412 37.8164 cv
190.815 37.8164 191.166 37.4155 191.46 36.6138 cv
cp
192.184 34.1606 mo
192.299 34.4248 192.357 34.731 192.357 35.0815 cv
192.357 35.8545 192.154 36.5332 191.747 37.1201 cv
191.345 37.6943 190.892 37.981 190.388 37.981 cv
190.094 37.981 189.846 37.8564 189.644 37.6064 cv
189.441 37.356 189.34 37.0103 189.34 36.5698 cv
189.34 35.833 189.541 35.1504 189.938 34.5215 cv
190.348 33.8779 190.804 33.5562 191.306 33.5562 cv
191.711 33.5562 192.002 33.7573 192.184 34.1606 cv
cp
f
191.533 41.8999 mo
191.68 42.0488 191.752 42.1934 191.752 42.3335 cv
191.752 42.4609 191.713 42.5601 191.638 42.6299 cv
191.562 42.7002 191.473 42.7354 191.371 42.7354 cv
191.269 42.7354 191.186 42.7046 191.118 42.6416 cv
191.049 42.5791 191.016 42.5015 191.016 42.4097 cv
191.016 42.3389 191.04 42.2627 191.083 42.1812 cv
191.127 42.1001 191.15 42.0474 191.15 42.0229 cv
191.15 41.9736 191.124 41.9326 191.067 41.8984 cv
191.01 41.8647 190.922 41.8477 190.8 41.8477 cv
190.364 41.8477 189.984 42.0967 189.663 42.5938 cv
189.341 43.0908 189.18 43.6123 189.18 44.1582 cv
189.18 44.4653 189.246 44.7056 189.376 44.8799 cv
189.506 45.0537 189.702 45.1406 189.961 45.1406 cv
190.17 45.1406 190.374 45.0796 190.57 44.9595 cv
190.767 44.8384 190.948 44.6846 191.113 44.4976 cv
191.143 44.4648 li
191.26 44.5542 li
191.071 44.7959 190.886 44.9819 190.71 45.1118 cv
190.399 45.3374 190.053 45.4497 189.672 45.4497 cv
189.31 45.4497 189.015 45.3335 188.791 45.1016 cv
188.565 44.8696 188.452 44.5527 188.452 44.1519 cv
188.452 43.5356 188.703 42.9683 189.205 42.4502 cv
189.702 41.9351 190.239 41.6772 190.816 41.6772 cv
191.147 41.6772 191.387 41.751 191.533 41.8999 cv
cp
f
207.878 109.855 mo
208.079 109.855 li
207.97 110.389 208.102 110.477 208.491 110.477 cv
210.769 110.477 li
211.159 110.477 211.337 110.389 211.514 109.855 cv
211.714 109.855 li
211.1 112.155 li
210.899 112.155 li
211.009 111.622 210.877 111.533 210.488 111.533 cv
208.209 111.533 li
207.821 111.533 207.641 111.622 207.464 112.155 cv
207.264 112.155 li
207.878 109.855 li
cp
207.575 107.455 mo
213.299 107.455 li
212.852 109.132 li
212.673 109.132 li
212.694 108.933 212.843 108.455 212.109 108.455 cv
208.231 108.455 li
207.497 108.455 207.391 108.933 207.305 109.132 cv
207.127 109.132 li
207.575 107.455 li
cp
205.91 112.777 mo
206.109 112.777 li
206.009 113.533 205.977 113.899 206.778 113.899 cv
210.657 113.899 li
211.458 113.899 211.621 113.533 211.923 112.777 cv
212.124 112.777 li
211.547 114.932 li
205.334 114.932 li
205.91 112.777 li
cp
f
214.473 107.439 mo
218.841 107.439 li
218.841 107.898 li
214.473 107.898 li
214.473 107.439 li
cp
f
178.314 83.6904 mo
184.071 83.6904 li
183.735 85.3682 li
183.524 85.3682 li
183.525 84.9458 183.535 84.2017 182.433 84.2017 cv
179.989 84.2017 li
181.457 87.0684 li
178.018 90.124 li
181.275 90.124 li
181.987 90.124 182.44 89.9683 183.06 88.8906 cv
183.284 88.8906 li
182.264 91.1689 li
176.183 91.1689 li
180.276 87.5352 li
178.314 83.6904 li
cp
f
185.017 83.6738 mo
189.385 83.6738 li
189.385 84.1323 li
185.017 84.1323 li
185.017 83.6738 li
cp
f
302.38 89.3442 mo
308.138 89.3442 li
307.803 91.022 li
307.591 91.022 li
307.592 90.5996 307.602 89.855 306.501 89.855 cv
304.057 89.855 li
305.525 92.7217 li
302.086 95.7773 li
305.343 95.7773 li
306.055 95.7773 306.508 95.6216 307.128 94.5449 cv
307.35 94.5449 li
306.331 96.8223 li
300.251 96.8223 li
304.344 93.1885 li
302.38 89.3442 li
cp
f
311.511 87.5176 mo
311.511 89.4766 li
313.487 89.4766 li
313.487 89.9346 li
311.511 89.9346 li
311.511 91.9604 li
311.053 91.9604 li
311.053 89.9346 li
309.078 89.9346 li
309.078 89.4766 li
311.053 89.4766 li
311.053 87.5176 li
311.511 87.5176 li
cp
f
269.332 85.9097 mo
269.526 86.2852 269.558 86.5718 269.558 86.9863 cv
269.558 87.2974 269.512 87.6216 269.427 87.9199 cv
269.304 88.4126 269.083 88.8857 268.76 89.2744 cv
268.449 89.644 267.982 89.981 267.477 89.981 cv
267.075 89.981 266.75 89.7549 266.562 89.4038 cv
266.394 89.106 266.329 88.7104 266.329 88.3672 cv
266.329 88.0752 266.361 87.8291 266.419 87.5435 cv
266.614 86.6299 267.315 85.314 268.39 85.314 cv
268.832 85.314 269.136 85.5273 269.332 85.9097 cv
cp
267.651 86.1182 mo
267.489 86.3833 267.374 86.6426 267.282 86.9341 cv
267.1 87.498 266.932 88.2627 266.932 88.8467 cv
266.932 89.229 267.016 89.728 267.509 89.728 cv
268.384 89.728 268.871 87.5435 268.922 86.8755 cv
268.935 86.7202 268.948 86.5645 268.948 86.4087 cv
268.948 86.0332 268.851 85.5469 268.384 85.5469 cv
268.034 85.5469 267.814 85.8452 267.651 86.1182 cv
0 0 0 0 cmyk
f
2.19 lw
0 lc
0 lj
269.332 85.9097 mo
269.526 86.2852 269.558 86.5718 269.558 86.9863 cv
269.558 87.2974 269.512 87.6216 269.427 87.9199 cv
269.304 88.4126 269.083 88.8857 268.76 89.2744 cv
268.449 89.644 267.982 89.981 267.477 89.981 cv
267.075 89.981 266.75 89.7549 266.562 89.4038 cv
266.394 89.106 266.329 88.7104 266.329 88.3672 cv
266.329 88.0752 266.361 87.8291 266.419 87.5435 cv
266.614 86.6299 267.315 85.314 268.39 85.314 cv
268.832 85.314 269.136 85.5273 269.332 85.9097 cv
cp
267.651 86.1182 mo
267.489 86.3833 267.374 86.6426 267.282 86.9341 cv
267.1 87.498 266.932 88.2627 266.932 88.8467 cv
266.932 89.229 267.016 89.728 267.509 89.728 cv
268.384 89.728 268.871 87.5435 268.922 86.8755 cv
268.935 86.7202 268.948 86.5645 268.948 86.4087 cv
268.948 86.0332 268.851 85.5469 268.384 85.5469 cv
268.034 85.5469 267.814 85.8452 267.651 86.1182 cv
cp
@
259.992 87.498 mo
265.75 87.498 li
265.413 89.1763 li
265.202 89.1763 li
265.203 88.7534 265.212 88.0093 264.112 88.0093 cv
261.667 88.0093 li
263.135 90.877 li
259.697 93.9336 li
262.953 93.9336 li
263.665 93.9336 264.116 93.7778 264.738 92.6987 cv
264.961 92.6987 li
263.941 94.9771 li
257.862 94.9771 li
261.954 91.3433 li
259.992 87.498 li
f
259.992 87.498 mo
265.75 87.498 li
265.413 89.1763 li
265.202 89.1763 li
265.203 88.7534 265.212 88.0093 264.112 88.0093 cv
261.667 88.0093 li
263.135 90.877 li
259.697 93.9336 li
262.953 93.9336 li
263.665 93.9336 264.116 93.7778 264.738 92.6987 cv
264.961 92.6987 li
263.941 94.9771 li
257.862 94.9771 li
261.954 91.3433 li
259.992 87.498 li
cp
@
254.174 96.5303 mo
254.773 96.2319 255.509 95.8398 255.67 94.9893 cv
255.474 95.0122 255.278 95.0005 255.095 94.9199 cv
254.818 94.7476 254.76 94.3564 254.911 94.0806 cv
255.026 93.8394 255.324 93.7236 255.577 93.7236 cv
256.095 93.7236 256.36 94.1836 256.36 94.6553 cv
256.36 95.7363 255.22 96.5068 254.334 96.8755 cv
254.174 96.5303 li
f
254.174 96.5303 mo
254.773 96.2319 255.509 95.8398 255.67 94.9893 cv
255.474 95.0122 255.278 95.0005 255.095 94.9199 cv
254.818 94.7476 254.76 94.3564 254.911 94.0806 cv
255.026 93.8394 255.324 93.7236 255.577 93.7236 cv
256.095 93.7236 256.36 94.1836 256.36 94.6553 cv
256.36 95.7363 255.22 96.5068 254.334 96.8755 cv
254.174 96.5303 li
cp
@
253.25 93.8281 mo
253.371 94.6284 253.951 94.6621 254.072 94.6621 cv
254.019 94.8623 li
250.996 94.8623 li
251.05 94.6621 li
251.282 94.6621 252.116 94.6172 252 93.7622 cv
251.378 89.3496 li
248.583 93.7393 li
247.994 94.6621 248.537 94.6621 248.971 94.6621 cv
248.918 94.8623 li
246.529 94.8623 li
246.582 94.6621 li
246.782 94.6621 247.577 94.4727 247.976 93.8506 cv
252.237 87.2158 li
253.25 93.8281 li
f
253.25 93.8281 mo
253.371 94.6284 253.951 94.6621 254.072 94.6621 cv
254.019 94.8623 li
250.996 94.8623 li
251.05 94.6621 li
251.282 94.6621 252.116 94.6172 252 93.7622 cv
251.378 89.3496 li
248.583 93.7393 li
247.994 94.6621 248.537 94.6621 248.971 94.6621 cv
248.918 94.8623 li
246.529 94.8623 li
246.582 94.6621 li
246.782 94.6621 247.577 94.4727 247.976 93.8506 cv
252.237 87.2158 li
253.25 93.8281 li
cp
@
253.306 93.8281 mo
253.426 94.6284 254.007 94.6616 254.129 94.6616 cv
254.076 94.8618 li
251.052 94.8618 li
251.105 94.6616 li
251.338 94.6616 252.173 94.6172 252.056 93.7622 cv
251.434 89.3506 li
248.64 93.7393 li
248.048 94.6616 248.593 94.6616 249.027 94.6616 cv
248.974 94.8618 li
246.583 94.8618 li
246.636 94.6616 li
246.836 94.6616 247.632 94.4731 248.031 93.8511 cv
252.292 87.2173 li
253.306 93.8281 li
cp
0 0 0 1 cmyk
f
254.861 96.4033 mo
255.115 95.7129 255.424 94.4824 255.551 93.6431 cv
256.678 93.5283 li
256.403 94.5059 255.897 95.7822 255.575 96.3228 cv
254.861 96.4033 li
cp
f
260.046 87.499 mo
265.804 87.499 li
265.468 89.1768 li
265.257 89.1768 li
265.257 88.7544 265.267 88.0098 264.167 88.0098 cv
261.722 88.0098 li
263.191 90.877 li
259.751 93.9326 li
263.009 93.9326 li
263.72 93.9326 264.174 93.7769 264.794 92.6992 cv
265.016 92.6992 li
263.998 94.9766 li
257.917 94.9766 li
262.01 91.3438 li
260.046 87.499 li
cp
f
267.007 87.7959 mo
267.007 88.8916 267.344 89.5142 267.864 89.5142 cv
268.44 89.5142 268.719 88.833 268.719 87.7573 cv
268.719 86.7192 268.459 86.0391 267.864 86.0391 cv
267.371 86.0391 267.007 86.6479 267.007 87.7959 cv
cp
269.296 87.7305 mo
269.296 89.1636 268.758 89.9551 267.832 89.9551 cv
267.007 89.9551 266.443 89.1831 266.43 87.79 cv
266.43 86.3696 267.045 85.5977 267.902 85.5977 cv
268.784 85.5977 269.296 86.3887 269.296 87.7305 cv
cp
f
256.499 30.6865 mo
262.256 30.6865 li
261.919 32.3643 li
261.708 32.3643 li
261.709 31.9419 261.719 31.1978 260.619 31.1978 cv
258.173 31.1978 li
259.642 34.0645 li
256.204 37.1201 li
259.46 37.1201 li
260.171 37.1201 260.625 36.9644 261.245 35.8867 cv
261.468 35.8867 li
260.449 38.1646 li
254.368 38.1646 li
258.461 34.5313 li
256.499 30.6865 li
cp
f
265.629 28.627 mo
265.629 30.5859 li
267.605 30.5859 li
267.605 31.0444 li
265.629 31.0444 li
265.629 33.0703 li
265.169 33.0703 li
265.169 31.0444 li
263.194 31.0444 li
263.194 30.5859 li
265.169 30.5859 li
265.169 28.627 li
265.629 28.627 li
cp
f
264.695 36.3325 mo
264.842 36.481 264.916 36.6255 264.916 36.7661 cv
264.916 36.8936 264.877 36.9917 264.801 37.0625 cv
264.725 37.1323 264.635 37.1675 264.532 37.1675 cv
264.432 37.1675 264.347 37.1362 264.28 37.0737 cv
264.212 37.0117 264.178 36.9346 264.178 36.8423 cv
264.178 36.7715 264.201 36.6958 264.246 36.6147 cv
264.291 36.5327 264.312 36.48 264.312 36.4556 cv
264.312 36.4063 264.285 36.3652 264.229 36.3315 cv
264.175 36.2974 264.084 36.2803 263.962 36.2803 cv
263.526 36.2803 263.147 36.5293 262.825 37.0264 cv
262.504 37.5234 262.343 38.0449 262.343 38.5908 cv
262.343 38.8984 262.408 39.1387 262.538 39.3125 cv
262.668 39.4863 262.865 39.5732 263.125 39.5732 cv
263.333 39.5732 263.536 39.5127 263.733 39.3916 cv
263.929 39.271 264.112 39.1172 264.276 38.9307 cv
264.304 38.8975 li
264.423 38.9868 li
264.233 39.2285 264.049 39.4141 263.874 39.5449 cv
263.561 39.7695 263.216 39.8823 262.836 39.8823 cv
262.472 39.8823 262.178 39.7661 261.952 39.5342 cv
261.726 39.3022 261.615 38.9854 261.615 38.584 cv
261.615 37.9683 261.866 37.4014 262.367 36.8828 cv
262.865 36.3672 263.402 36.1099 263.979 36.1099 cv
264.309 36.1099 264.549 36.1836 264.695 36.3325 cv
cp
f
246.285 36.8984 mo
246.405 37.6982 246.984 37.7324 247.106 37.7324 cv
247.054 37.9321 li
244.03 37.9321 li
244.083 37.7324 li
244.317 37.7324 245.151 37.6875 245.035 36.8325 cv
244.412 32.4209 li
241.618 36.8101 li
241.027 37.7324 241.572 37.7324 242.005 37.7324 cv
241.951 37.9321 li
239.561 37.9321 li
239.616 37.7324 li
239.814 37.7324 240.611 37.5439 241.01 36.9214 cv
245.271 30.2871 li
246.285 36.8984 li
cp
f
249.653 28.396 mo
249.653 30.3555 li
251.628 30.3555 li
251.628 30.813 li
249.653 30.813 li
249.653 32.8398 li
249.195 32.8398 li
249.195 30.813 li
247.219 30.813 li
247.219 30.3555 li
249.195 30.3555 li
249.195 28.396 li
249.653 28.396 li
cp
f
250.804 36.1016 mo
250.951 36.25 251.023 36.395 251.023 36.5352 cv
251.023 36.6626 250.986 36.7607 250.909 36.8311 cv
250.833 36.9014 250.743 36.937 250.64 36.937 cv
250.541 36.937 250.456 36.9058 250.389 36.8428 cv
250.321 36.7803 250.287 36.7031 250.287 36.6113 cv
250.287 36.541 250.309 36.4644 250.353 36.3838 cv
250.399 36.3018 250.42 36.249 250.42 36.2246 cv
250.42 36.1758 250.393 36.1343 250.337 36.1001 cv
250.283 36.0659 250.193 36.0493 250.071 36.0493 cv
249.634 36.0493 249.255 36.2983 248.933 36.7949 cv
248.612 37.292 248.452 37.814 248.452 38.3599 cv
248.452 38.667 248.517 38.9072 248.646 39.0811 cv
248.777 39.2554 248.972 39.3423 249.233 39.3423 cv
249.441 39.3423 249.644 39.2813 249.842 39.1606 cv
250.037 39.04 250.219 38.8857 250.384 38.6987 cv
250.413 38.666 li
250.531 38.7559 li
250.341 38.9971 250.159 39.1836 249.982 39.3135 cv
249.669 39.5381 249.324 39.6509 248.944 39.6509 cv
248.58 39.6509 248.286 39.5352 248.06 39.3032 cv
247.834 39.0713 247.722 38.7549 247.722 38.353 cv
247.722 37.7373 247.974 37.1699 248.475 36.6514 cv
248.972 36.1362 249.51 35.8779 250.087 35.8779 cv
250.417 35.8779 250.658 35.9521 250.804 36.1016 cv
cp
f
252.194 37.1152 mo
252.291 37.0049 252.436 36.9492 252.631 36.9492 cv
252.83 36.9492 252.991 37.0264 253.114 37.1797 cv
253.238 37.3335 253.3 37.5283 253.3 37.7642 cv
253.3 38.1421 253.155 38.4858 252.864 38.7969 cv
252.574 39.1079 252.281 39.3438 251.986 39.5049 cv
251.811 39.6006 li
251.704 39.415 li
251.937 39.25 252.114 39.1094 252.238 38.9941 cv
252.458 38.7759 252.57 38.5815 252.57 38.4097 cv
252.57 38.3608 252.559 38.314 252.541 38.269 cv
252.522 38.2246 252.496 38.1846 252.462 38.1514 cv
252.356 38.0449 li
252.217 37.9063 252.131 37.7998 252.097 37.7271 cv
252.064 37.6543 252.046 37.5464 252.046 37.4038 cv
252.046 37.3223 252.095 37.2256 252.194 37.1152 cv
cp
f
214.231 56.5874 mo
215.384 56.5874 216.318 55.6523 216.318 54.4995 cv
216.318 53.3467 215.384 52.4121 214.231 52.4121 cv
213.079 52.4121 212.145 53.3467 212.145 54.4995 cv
212.145 55.6523 213.079 56.5874 214.231 56.5874 cv
f
217.966 59.0767 mo
219.118 59.0767 220.052 58.1421 220.052 56.9897 cv
220.052 55.8369 219.118 54.9019 217.966 54.9019 cv
216.812 54.9019 215.878 55.8369 215.878 56.9897 cv
215.878 58.1421 216.812 59.0767 217.966 59.0767 cv
f
195.023 42.4126 mo
196.175 42.4126 197.11 41.4775 197.11 40.3252 cv
197.11 39.1719 196.175 38.2378 195.023 38.2378 cv
193.87 38.2378 192.935 39.1719 192.935 40.3252 cv
192.935 41.4775 193.87 42.4126 195.023 42.4126 cv
f
191.318 90.4536 mo
192.471 90.4536 193.406 89.52 193.406 88.3667 cv
193.406 87.2144 192.471 86.2793 191.318 86.2793 cv
190.166 86.2793 189.231 87.2144 189.231 88.3667 cv
189.231 89.52 190.166 90.4536 191.318 90.4536 cv
f
212.386 105.619 mo
213.54 105.619 214.475 104.685 214.475 103.531 cv
214.475 102.379 213.54 101.444 212.386 101.444 cv
211.235 101.444 210.299 102.379 210.299 103.531 cv
210.299 104.685 211.235 105.619 212.386 105.619 cv
f
265.174 107.587 mo
266.328 107.587 267.262 106.653 267.262 105.5 cv
267.262 104.347 266.328 103.413 265.174 103.413 cv
264.022 103.413 263.088 104.347 263.088 105.5 cv
263.088 106.653 264.022 107.587 265.174 107.587 cv
f
297.125 94.2749 mo
298.279 94.2749 299.213 93.3398 299.213 92.1875 cv
299.213 91.0342 298.279 90.1001 297.125 90.1001 cv
295.972 90.1001 295.039 91.0342 295.039 92.1875 cv
295.039 93.3398 295.972 94.2749 297.125 94.2749 cv
f
276.404 79.2251 mo
277.556 79.2251 278.492 78.2905 278.492 77.1377 cv
278.492 75.9849 277.556 75.0508 276.404 75.0508 cv
275.251 75.0508 274.317 75.9849 274.317 77.1377 cv
274.317 78.2905 275.251 79.2251 276.404 79.2251 cv
f
300.831 46.5796 mo
301.983 46.5796 302.917 45.645 302.917 44.4927 cv
302.917 43.3403 301.983 42.4048 300.831 42.4048 cv
299.677 42.4048 298.743 43.3403 298.743 44.4927 cv
298.743 45.645 299.677 46.5796 300.831 46.5796 cv
f
270.745 59.0767 mo
271.896 59.0767 272.831 58.1421 272.831 56.9897 cv
272.831 55.8369 271.896 54.9019 270.745 54.9019 cv
269.59 54.9019 268.657 55.8369 268.657 56.9897 cv
268.657 58.1421 269.59 59.0767 270.745 59.0767 cv
f
266.373 60.6792 mo
267.524 60.6792 268.458 59.7456 268.458 58.5918 cv
268.458 57.439 267.524 56.5044 266.373 56.5044 cv
265.218 56.5044 264.284 57.439 264.284 58.5918 cv
264.284 59.7456 265.218 60.6792 266.373 60.6792 cv
f
240.402 24.585 mo
241.554 24.585 242.488 23.6504 242.488 22.4976 cv
242.488 21.3447 241.554 20.4097 240.402 20.4097 cv
239.249 20.4097 238.314 21.3447 238.314 22.4976 cv
238.314 23.6504 239.249 24.585 240.402 24.585 cv
f
272.468 11.5039 mo
273.621 11.5039 274.555 10.5693 274.555 9.4165 cv
274.555 8.26318 273.621 7.32959 272.468 7.32959 cv
271.315 7.32959 270.38 8.26318 270.38 9.4165 cv
270.38 10.5693 271.315 11.5039 272.468 11.5039 cv
f
247.685 42.478 mo
247.73 41.3252 246.833 40.3555 245.681 40.311 cv
244.528 40.2661 243.558 41.1631 243.514 42.3154 cv
f
243.514 42.3154 mo
243.492 42.9028 244.407 43.4155 245.558 43.46 cv
246.709 43.5044 247.663 43.0649 247.685 42.478 cv
f
252.073 42.645 mo
252.116 41.4932 251.219 40.5234 250.067 40.4785 cv
248.917 40.4346 247.945 41.332 247.9 42.4839 cv
f
247.9 42.4839 mo
247.877 43.0713 248.792 43.583 249.945 43.6279 cv
251.096 43.6729 252.05 43.2329 252.073 42.645 cv
f
219.449 9.47803 mo
220.602 9.47803 221.535 8.54297 221.535 7.39014 cv
221.535 6.23779 220.602 5.30273 219.449 5.30273 cv
218.295 5.30273 217.361 6.23779 217.361 7.39014 cv
217.361 8.54297 218.295 9.47803 219.449 9.47803 cv
f
248.506 90.5327 mo
248.551 89.3809 247.654 88.4106 246.501 88.3657 cv
245.35 88.3208 244.379 89.2188 244.335 90.3716 cv
f
244.335 90.3716 mo
244.314 90.958 245.228 91.4702 246.379 91.5151 cv
247.532 91.5605 248.484 91.1201 248.506 90.5327 cv
f
236.813 72.7422 mo
237.965 72.7422 238.9 71.8081 238.9 70.6553 cv
238.9 69.502 237.965 68.5674 236.813 68.5674 cv
235.661 68.5674 234.726 69.502 234.726 70.6553 cv
234.726 71.8081 235.661 72.7422 236.813 72.7422 cv
f
244.281 90.3584 mo
244.327 89.207 243.429 88.2373 242.277 88.1919 cv
241.125 88.1475 240.155 89.0454 240.111 90.1973 cv
f
240.111 90.1973 mo
240.088 90.7847 241.003 91.2964 242.155 91.3413 cv
243.307 91.3862 244.259 90.9458 244.281 90.3584 cv
f
222.98 77.1992 mo
224.132 77.1992 225.066 76.2646 225.066 75.1123 cv
225.066 73.9595 224.132 73.0254 222.98 73.0254 cv
221.827 73.0254 220.892 73.9595 220.892 75.1123 cv
220.892 76.2646 221.827 77.1992 222.98 77.1992 cv
f
249.301 63.1123 mo
249.092 63.3784 248.609 64.0044 247.734 64.0044 cv
247.192 64.0044 246.5 63.7959 246.5 62.688 cv
246.5 61.5127 247.65 60.2368 248.884 60.2368 cv
249.584 60.2368 249.792 60.6533 249.792 60.9121 cv
249.792 61.1455 249.61 61.2954 249.401 61.2954 cv
249.193 61.2954 249.068 61.1787 249.068 60.9868 cv
249.068 60.77 249.193 60.7202 249.193 60.5786 cv
249.193 60.4531 249.026 60.4116 248.875 60.4116 cv
247.792 60.4116 247.217 61.8872 247.217 62.688 cv
247.217 63.3291 247.467 63.7041 247.976 63.7041 cv
248.475 63.7041 248.868 63.3623 249.167 63.0293 cv
249.301 63.1123 li
0 0 0 0 cmyk
f
249.301 63.1123 mo
249.092 63.3784 248.609 64.0044 247.734 64.0044 cv
247.192 64.0044 246.5 63.7959 246.5 62.688 cv
246.5 61.5127 247.65 60.2368 248.884 60.2368 cv
249.584 60.2368 249.792 60.6533 249.792 60.9121 cv
249.792 61.1455 249.61 61.2954 249.401 61.2954 cv
249.193 61.2954 249.068 61.1787 249.068 60.9868 cv
249.068 60.77 249.193 60.7202 249.193 60.5786 cv
249.193 60.4531 249.026 60.4116 248.875 60.4116 cv
247.792 60.4116 247.217 61.8872 247.217 62.688 cv
247.217 63.3291 247.467 63.7041 247.976 63.7041 cv
248.475 63.7041 248.868 63.3623 249.167 63.0293 cv
249.301 63.1123 li
cp
@
248.891 56.5488 mo
248.217 56.5488 247.847 55.8818 247.847 55.207 cv
247.847 53.457 248.923 52.1211 249.825 52.1211 cv
250.686 52.1211 250.862 53.1064 250.862 53.7422 cv
250.862 55.0264 249.979 56.5488 248.891 56.5488 cv
cp
248.923 56.3677 mo
249.791 56.3677 250.349 54.2935 250.349 53.1587 cv
250.349 52.9644 250.349 52.3032 249.791 52.3032 cv
248.826 52.3032 248.359 54.8633 248.359 55.4927 cv
248.359 56.2441 248.715 56.3677 248.923 56.3677 cv
f
248.891 56.5488 mo
248.217 56.5488 247.847 55.8818 247.847 55.207 cv
247.847 53.457 248.923 52.1211 249.825 52.1211 cv
250.686 52.1211 250.862 53.1064 250.862 53.7422 cv
250.862 55.0264 249.979 56.5488 248.891 56.5488 cv
cp
248.923 56.3677 mo
249.791 56.3677 250.349 54.2935 250.349 53.1587 cv
250.349 52.9644 250.349 52.3032 249.791 52.3032 cv
248.826 52.3032 248.359 54.8633 248.359 55.4927 cv
248.359 56.2441 248.715 56.3677 248.923 56.3677 cv
cp
@
241.572 61.5977 mo
238.293 61.5977 li
238.774 59.7974 li
238.941 59.7974 li
238.928 60.3418 239.026 60.4751 239.493 60.4751 cv
241.249 60.4751 li
241.309 60.1641 li
240.522 59.9077 240.055 59.6196 239.777 58.9521 cv
239.304 57.8076 239.785 56.5078 240.475 55.6743 cv
241.136 54.8633 241.723 54.6187 242.071 54.4404 cv
242.663 54.1411 243.446 53.9521 244.236 53.9521 cv
245.025 53.9521 245.708 54.1411 246.139 54.4404 cv
246.391 54.6187 246.848 54.8633 247.076 55.6743 cv
247.32 56.5078 247.106 57.8076 246.022 58.9521 cv
245.388 59.6196 244.768 59.9077 243.843 60.1641 cv
243.738 60.4751 li
245.494 60.4751 li
245.959 60.4751 246.129 60.3418 246.407 59.7974 cv
246.575 59.7974 li
246.093 61.5977 li
242.816 61.5977 li
243.444 59.9077 li
243.841 59.7524 244.394 59.6411 245.094 58.6416 cv
245.687 57.7969 246.322 55.8745 245.598 54.8853 cv
245.263 54.4297 244.707 54.3076 244.141 54.3076 cv
243.574 54.3076 242.952 54.4297 242.375 54.8853 cv
241.122 55.8745 240.731 57.7969 240.871 58.6416 cv
241.038 59.6411 241.53 59.7524 241.845 59.9077 cv
241.572 61.5977 li
f
241.572 61.5977 mo
238.293 61.5977 li
238.774 59.7974 li
238.941 59.7974 li
238.928 60.3418 239.026 60.4751 239.493 60.4751 cv
241.249 60.4751 li
241.309 60.1641 li
240.522 59.9077 240.055 59.6196 239.777 58.9521 cv
239.304 57.8076 239.785 56.5078 240.475 55.6743 cv
241.136 54.8633 241.723 54.6187 242.071 54.4404 cv
242.663 54.1411 243.446 53.9521 244.236 53.9521 cv
245.025 53.9521 245.708 54.1411 246.139 54.4404 cv
246.391 54.6187 246.848 54.8633 247.076 55.6743 cv
247.32 56.5078 247.106 57.8076 246.022 58.9521 cv
245.388 59.6196 244.768 59.9077 243.843 60.1641 cv
243.738 60.4751 li
245.494 60.4751 li
245.959 60.4751 246.129 60.3418 246.407 59.7974 cv
246.575 59.7974 li
246.093 61.5977 li
242.816 61.5977 li
243.444 59.9077 li
243.841 59.7524 244.394 59.6411 245.094 58.6416 cv
245.687 57.7969 246.322 55.8745 245.598 54.8853 cv
245.263 54.4297 244.707 54.3076 244.141 54.3076 cv
243.574 54.3076 242.952 54.4297 242.375 54.8853 cv
241.122 55.8745 240.731 57.7969 240.871 58.6416 cv
241.038 59.6411 241.53 59.7524 241.845 59.9077 cv
241.572 61.5977 li
cp
@
241.63 61.5396 mo
238.351 61.5396 li
238.831 59.7393 li
238.999 59.7393 li
238.987 60.2842 239.084 60.417 239.552 60.417 cv
241.307 60.417 li
241.368 60.106 li
240.581 59.8511 240.114 59.5615 239.836 58.8955 cv
239.363 57.7505 239.843 56.4502 240.532 55.6167 cv
241.194 54.8062 241.781 54.561 242.129 54.3833 cv
242.72 54.084 243.504 53.8945 244.294 53.8945 cv
245.083 53.8945 245.766 54.084 246.197 54.3833 cv
246.45 54.561 246.907 54.8062 247.135 55.6167 cv
247.379 56.4502 247.167 57.7505 246.083 58.8955 cv
245.448 59.5615 244.827 59.8511 243.902 60.106 cv
243.797 60.417 li
245.553 60.417 li
246.021 60.417 246.188 60.2842 246.467 59.7393 cv
246.634 59.7393 li
246.154 61.5396 li
242.875 61.5396 li
243.504 59.8511 li
243.901 59.6953 244.454 59.5835 245.154 58.584 cv
245.747 57.7393 246.381 55.8169 245.656 54.8286 cv
245.321 54.373 244.766 54.2505 244.199 54.2505 cv
243.631 54.2505 243.009 54.373 242.432 54.8286 cv
241.178 55.8169 240.789 57.7393 240.929 58.584 cv
241.096 59.5835 241.589 59.6953 241.904 59.8511 cv
241.63 61.5396 li
cp
0 0 0 1 cmyk
f
250.02 55.1162 mo
250.277 54.4302 250.405 53.7739 250.405 53.147 cv
250.405 52.9297 250.381 52.7549 250.334 52.6216 cv
250.25 52.3687 250.09 52.2422 249.856 52.2422 cv
249.422 52.2422 249.056 52.7085 248.755 53.6411 cv
248.527 54.3545 248.413 54.9482 248.413 55.4229 cv
248.413 55.6235 248.436 55.7915 248.483 55.9263 cv
248.572 56.1885 248.734 56.3193 248.972 56.3193 cv
249.375 56.3193 249.724 55.9185 250.02 55.1162 cv
cp
250.743 52.6631 mo
250.86 52.9272 250.917 53.2334 250.917 53.584 cv
250.917 54.3564 250.713 55.0361 250.306 55.6226 cv
249.906 56.1963 249.453 56.4834 248.949 56.4834 cv
248.655 56.4834 248.408 56.3589 248.205 56.1089 cv
248 55.8589 247.9 55.5127 247.9 55.0718 cv
247.9 54.3354 248.1 53.6528 248.499 53.0239 cv
248.909 52.3804 249.364 52.0586 249.867 52.0586 cv
250.271 52.0586 250.563 52.2603 250.743 52.6631 cv
cp
f
249.629 60.4028 mo
249.777 60.5508 249.848 60.6953 249.848 60.8364 cv
249.848 60.9634 249.811 61.062 249.736 61.1318 cv
249.66 61.2026 249.57 61.2373 249.466 61.2373 cv
249.366 61.2373 249.282 61.2065 249.214 61.144 cv
249.146 61.0815 249.112 61.0049 249.112 60.9121 cv
249.112 60.8413 249.135 60.7656 249.18 60.6846 cv
249.224 60.6025 249.246 60.5493 249.246 60.5259 cv
249.246 60.4766 249.219 60.4351 249.163 60.4014 cv
249.108 60.3672 249.018 60.3506 248.896 60.3506 cv
248.459 60.3506 248.081 60.5991 247.759 61.0967 cv
247.438 61.5928 247.277 62.1147 247.277 62.6611 cv
247.277 62.9678 247.342 63.208 247.472 63.3823 cv
247.602 63.5557 247.797 63.6431 248.059 63.6431 cv
248.267 63.6431 248.47 63.5825 248.667 63.4614 cv
248.863 63.3413 249.044 63.187 249.209 63 cv
249.238 62.9673 li
249.356 63.0571 li
249.167 63.2983 248.983 63.4844 248.808 63.6147 cv
248.496 63.8394 248.15 63.9517 247.77 63.9517 cv
247.406 63.9517 247.111 63.8359 246.886 63.604 cv
246.661 63.3726 246.548 63.0557 246.548 62.6538 cv
246.548 62.0381 246.799 61.4707 247.301 60.9531 cv
247.797 60.437 248.335 60.1792 248.913 60.1792 cv
249.244 60.1792 249.483 60.2539 249.629 60.4028 cv
cp
f
112.39 57.1274 mo
80.1733 70.3936 li
59.103 55.1206 li
112.39 57.1274 li
0 .11 .42 0 cmyk
f
.5475 lw
1 lc
1 lj
112.39 57.1274 mo
80.1733 70.3936 li
59.103 55.1206 li
112.39 57.1274 li
cp
0 0 0 1 cmyk
@
30.6753 136.539 mo
51.7446 151.812 li
105.032 153.818 li
137.138 140.551 li
116.069 125.278 li
62.7817 123.273 li
30.6753 136.539 li
0 0 0 .099609 cmyk
f
62.855 123.17 mo
9.67773 121.275 li
30.748 136.547 li
51.8184 151.82 li
72.8872 167.094 li
105.105 153.827 li
137.212 140.45 li
169.319 127.184 li
116.143 125.176 li
62.855 123.17 li
0 .11 .42 0 cmyk
f
0 lc
62.855 123.17 mo
9.67773 121.275 li
30.748 136.547 li
51.8184 151.82 li
72.8872 167.094 li
105.105 153.827 li
137.212 140.45 li
169.319 127.184 li
116.143 125.176 li
62.855 123.17 li
cp
0 0 0 1 cmyk
@
87.7144 90.1719 mo
34.4263 88.1655 li
55.4966 103.438 li
76.5669 118.823 li
108.785 105.444 li
140.891 92.1782 li
87.7144 90.1719 li
0 .11 .42 0 cmyk
f
87.7144 90.1719 mo
34.4263 88.1655 li
55.4966 103.438 li
76.5669 118.823 li
108.785 105.444 li
140.891 92.1782 li
87.7144 90.1719 li
cp
0 0 0 1 cmyk
@
1.095 lw
9.67773 121.275 mo
30.748 136.547 li
51.8184 151.82 li
72.8872 167.094 li
105.105 153.827 li
137.212 140.45 li
169.319 127.184 li
@
34.4263 88.1655 mo
55.4966 103.438 li
76.5669 118.823 li
108.785 105.444 li
140.891 92.1782 li
@
.27375 lw
84.0024 22.2041 mo
9.646 121.309 li
@
84.0356 22.1685 mo
169.319 127.184 li
@
92.0967 24.9312 mo
88.8066 24.9312 li
89.2886 23.126 li
89.4561 23.126 li
89.4443 23.6719 89.5425 23.8057 90.0107 23.8057 cv
91.7729 23.8057 li
91.833 23.4932 li
91.0435 23.2378 90.5747 22.9473 90.2954 22.2788 cv
89.8223 21.1299 90.3042 19.8267 90.9951 18.9897 cv
91.6577 18.1768 92.2476 17.9316 92.5972 17.7534 cv
93.1899 17.4526 93.9766 17.2627 94.7686 17.2627 cv
95.5591 17.2627 96.2451 17.4526 96.6782 17.7534 cv
96.9312 17.9316 97.3892 18.1768 97.6182 18.9897 cv
97.8638 19.8267 97.6489 21.1299 96.5625 22.2788 cv
95.9258 22.9473 95.3027 23.2378 94.3755 23.4932 cv
94.2705 23.8057 li
96.0322 23.8057 li
96.5005 23.8057 96.6699 23.6719 96.9492 23.126 cv
97.1162 23.126 li
96.6343 24.9312 li
93.3452 24.9312 li
93.9761 23.2378 li
94.374 23.0811 94.9282 22.9697 95.6309 21.9668 cv
96.2251 21.1191 96.8628 19.1909 96.1348 18.1992 cv
95.7993 17.7422 95.2417 17.6196 94.6733 17.6196 cv
94.104 17.6196 93.48 17.7422 92.9004 18.1992 cv
91.644 19.1909 91.2515 21.1191 91.3936 21.9668 cv
91.561 22.9697 92.0547 23.0811 92.3701 23.2378 cv
92.0967 24.9312 li
cp
f
100.244 15.3647 mo
100.244 17.3301 li
102.226 17.3301 li
102.226 17.79 li
100.244 17.79 li
100.244 19.8218 li
99.7837 19.8218 li
99.7837 17.79 li
97.8018 17.79 li
97.8018 17.3301 li
99.7837 17.3301 li
99.7837 15.3647 li
100.244 15.3647 li
cp
f
105.462 15.3647 mo
105.462 17.3301 li
107.443 17.3301 li
107.443 17.79 li
105.462 17.79 li
105.462 19.8218 li
105.001 19.8218 li
105.001 17.79 li
103.02 17.79 li
103.02 17.3301 li
105.001 17.3301 li
105.001 15.3647 li
105.462 15.3647 li
cp
f
101.05 23.7915 mo
101.197 23.9399 101.27 24.0854 101.27 24.2256 cv
101.27 24.354 101.232 24.4531 101.156 24.5234 cv
101.08 24.5933 100.99 24.6294 100.886 24.6294 cv
100.786 24.6294 100.701 24.5981 100.633 24.5347 cv
100.565 24.4722 100.531 24.395 100.531 24.3027 cv
100.531 24.231 100.553 24.1558 100.599 24.0737 cv
100.644 23.9922 100.665 23.939 100.665 23.9146 cv
100.665 23.8647 100.638 23.8242 100.583 23.79 cv
100.526 23.7559 100.438 23.7388 100.315 23.7388 cv
99.8765 23.7388 99.4966 23.9883 99.1733 24.4873 cv
98.8516 24.9854 98.6899 25.5093 98.6899 26.0571 cv
98.6899 26.3647 98.7549 26.606 98.8857 26.7808 cv
99.0161 26.9546 99.2119 27.0415 99.4736 27.0415 cv
99.6836 27.0415 99.8867 26.9814 100.084 26.8599 cv
100.281 26.7388 100.463 26.5845 100.629 26.397 cv
100.657 26.3643 li
100.776 26.4541 li
100.585 26.6958 100.402 26.8828 100.226 27.0132 cv
99.9121 27.2388 99.5649 27.3516 99.1846 27.3516 cv
98.8193 27.3516 98.5244 27.2358 98.2979 27.0029 cv
98.0723 26.7705 97.959 26.4526 97.959 26.0493 cv
97.959 25.4321 98.2104 24.8623 98.7144 24.3433 cv
99.2119 23.8262 99.7515 23.5669 100.331 23.5669 cv
100.663 23.5669 100.903 23.6421 101.05 23.7915 cv
cp
f
104.76 23.7915 mo
104.908 23.9399 104.981 24.0854 104.981 24.2256 cv
104.981 24.354 104.943 24.4531 104.867 24.5234 cv
104.791 24.5933 104.7 24.6294 104.597 24.6294 cv
104.497 24.6294 104.412 24.5981 104.345 24.5347 cv
104.276 24.4722 104.242 24.395 104.242 24.3027 cv
104.242 24.231 104.264 24.1558 104.31 24.0737 cv
104.354 23.9922 104.376 23.939 104.376 23.9146 cv
104.376 23.8647 104.35 23.8242 104.293 23.79 cv
104.237 23.7559 104.148 23.7388 104.026 23.7388 cv
103.587 23.7388 103.207 23.9883 102.885 24.4873 cv
102.562 24.9854 102.401 25.5093 102.401 26.0571 cv
102.401 26.3647 102.466 26.606 102.597 26.7808 cv
102.728 26.9546 102.923 27.0415 103.184 27.0415 cv
103.394 27.0415 103.598 26.9814 103.795 26.8599 cv
103.992 26.7388 104.174 26.5845 104.341 26.397 cv
104.369 26.3643 li
104.486 26.4541 li
104.296 26.6958 104.112 26.8828 103.936 27.0132 cv
103.623 27.2388 103.276 27.3516 102.895 27.3516 cv
102.53 27.3516 102.235 27.2358 102.009 27.0029 cv
101.783 26.7705 101.669 26.4526 101.669 26.0493 cv
101.669 25.4321 101.922 24.8623 102.425 24.3433 cv
102.923 23.8262 103.462 23.5669 104.042 23.5669 cv
104.374 23.5669 104.614 23.6421 104.76 23.7915 cv
cp
f
108.472 23.7915 mo
108.619 23.9399 108.692 24.0854 108.692 24.2256 cv
108.692 24.354 108.654 24.4531 108.578 24.5234 cv
108.502 24.5933 108.412 24.6294 108.308 24.6294 cv
108.208 24.6294 108.123 24.5981 108.056 24.5347 cv
107.987 24.4722 107.954 24.395 107.954 24.3027 cv
107.954 24.231 107.975 24.1558 108.021 24.0737 cv
108.065 23.9922 108.087 23.939 108.087 23.9146 cv
108.087 23.8647 108.06 23.8242 108.004 23.79 cv
107.948 23.7559 107.859 23.7388 107.737 23.7388 cv
107.298 23.7388 106.918 23.9883 106.596 24.4873 cv
106.273 24.9854 106.112 25.5093 106.112 26.0571 cv
106.112 26.3647 106.177 26.606 106.307 26.7808 cv
106.439 26.9546 106.634 27.0415 106.896 27.0415 cv
107.105 27.0415 107.308 26.9814 107.506 26.8599 cv
107.703 26.7388 107.885 26.5845 108.052 26.397 cv
108.08 26.3643 li
108.198 26.4541 li
108.007 26.6958 107.823 26.8828 107.647 27.0132 cv
107.333 27.2388 106.987 27.3516 106.606 27.3516 cv
106.242 27.3516 105.946 27.2358 105.72 27.0029 cv
105.494 26.7705 105.381 26.4526 105.381 26.0493 cv
105.381 25.4321 105.633 24.8623 106.137 24.3433 cv
106.634 23.8262 107.173 23.5669 107.753 23.5669 cv
108.085 23.5669 108.325 23.6421 108.472 23.7915 cv
cp
f
120.582 54.3003 mo
120.783 54.3003 li
120.672 54.8354 120.806 54.9238 121.195 54.9238 cv
123.481 54.9238 li
123.872 54.9238 124.052 54.8354 124.228 54.3003 cv
124.428 54.3003 li
123.813 56.6079 li
123.612 56.6079 li
123.722 56.0723 123.589 55.9829 123.198 55.9829 cv
120.913 55.9829 li
120.523 55.9829 120.342 56.0723 120.166 56.6079 cv
119.966 56.6079 li
120.582 54.3003 li
cp
120.277 51.8921 mo
126.019 51.8921 li
125.57 53.5752 li
125.392 53.5752 li
125.412 53.3755 125.561 52.8965 124.826 52.8965 cv
120.935 52.8965 li
120.198 52.8965 120.093 53.3755 120.006 53.5752 cv
119.828 53.5752 li
120.277 51.8921 li
cp
118.606 57.231 mo
118.807 57.231 li
118.705 57.9897 118.673 58.3574 119.476 58.3574 cv
123.368 58.3574 li
124.171 58.3574 124.336 57.9897 124.638 57.231 cv
124.839 57.231 li
124.262 59.3945 li
118.029 59.3945 li
118.606 57.231 li
cp
f
129.167 49.8271 mo
129.167 51.7925 li
131.148 51.7925 li
131.148 52.252 li
129.167 52.252 li
129.167 54.2842 li
128.707 54.2842 li
128.707 52.252 li
126.725 52.252 li
126.725 51.7925 li
128.707 51.7925 li
128.707 49.8271 li
129.167 49.8271 li
cp
f
134.383 49.8271 mo
134.383 51.7925 li
136.366 51.7925 li
136.366 52.252 li
134.383 52.252 li
134.383 54.2842 li
133.923 54.2842 li
133.923 52.252 li
131.942 52.252 li
131.942 51.7925 li
133.923 51.7925 li
133.923 49.8271 li
134.383 49.8271 li
cp
f
128.812 58.2539 mo
128.958 58.4028 129.032 58.5483 129.032 58.689 cv
129.032 58.8169 128.994 58.9155 128.918 58.9858 cv
128.842 59.0566 128.751 59.0918 128.648 59.0918 cv
128.547 59.0918 128.463 59.0605 128.395 58.998 cv
128.326 58.9351 128.293 58.8574 128.293 58.7651 cv
128.293 58.6943 128.314 58.6182 128.36 58.5356 cv
128.405 58.4551 128.428 58.4019 128.428 58.3774 cv
128.428 58.3281 128.4 58.2871 128.344 58.252 cv
128.288 58.2183 128.199 58.2012 128.076 58.2012 cv
127.638 58.2012 127.258 58.4512 126.936 58.9497 cv
126.613 59.4487 126.452 59.9712 126.452 60.519 cv
126.452 60.8276 126.517 61.0679 126.647 61.2432 cv
126.778 61.418 126.974 61.5044 127.234 61.5044 cv
127.445 61.5044 127.648 61.4438 127.846 61.3228 cv
128.043 61.2012 128.225 61.0469 128.392 60.8594 cv
128.419 60.8267 li
128.538 60.917 li
128.347 61.1587 128.164 61.3452 127.987 61.4756 cv
127.673 61.7017 127.327 61.8149 126.945 61.8149 cv
126.581 61.8149 126.286 61.6987 126.06 61.4658 cv
125.833 61.2329 125.721 60.9155 125.721 60.5127 cv
125.721 59.8945 125.973 59.3257 126.477 58.8062 cv
126.974 58.2886 127.514 58.0303 128.093 58.0303 cv
128.425 58.0303 128.665 58.105 128.812 58.2539 cv
cp
f
132.522 58.2539 mo
132.669 58.4028 132.743 58.5483 132.743 58.689 cv
132.743 58.8169 132.705 58.9155 132.628 58.9858 cv
132.553 59.0566 132.462 59.0918 132.359 59.0918 cv
132.258 59.0918 132.174 59.0605 132.106 58.998 cv
132.038 58.9351 132.004 58.8574 132.004 58.7651 cv
132.004 58.6943 132.026 58.6182 132.072 58.5356 cv
132.116 58.4551 132.138 58.4019 132.138 58.3774 cv
132.138 58.3281 132.111 58.2871 132.054 58.252 cv
132 58.2183 131.91 58.2012 131.787 58.2012 cv
131.349 58.2012 130.969 58.4512 130.646 58.9497 cv
130.324 59.4487 130.162 59.9712 130.162 60.519 cv
130.162 60.8276 130.228 61.0679 130.358 61.2432 cv
130.489 61.418 130.685 61.5044 130.946 61.5044 cv
131.157 61.5044 131.359 61.4438 131.557 61.3228 cv
131.754 61.2012 131.936 61.0469 132.102 60.8594 cv
132.13 60.8267 li
132.249 60.917 li
132.059 61.1587 131.875 61.3452 131.698 61.4756 cv
131.384 61.7017 131.038 61.8149 130.656 61.8149 cv
130.292 61.8149 129.997 61.6987 129.771 61.4658 cv
129.545 61.2329 129.431 60.9155 129.431 60.5127 cv
129.431 59.8945 129.683 59.3257 130.188 58.8062 cv
130.685 58.2886 131.224 58.0303 131.803 58.0303 cv
132.135 58.0303 132.375 58.105 132.522 58.2539 cv
cp
f
42.2988 52.1733 mo
42.499 52.1733 li
42.3901 52.707 42.522 52.7964 42.9126 52.7964 cv
45.1982 52.7964 li
45.5884 52.7964 45.7681 52.707 45.9448 52.1733 cv
46.1455 52.1733 li
45.5288 54.481 li
45.3286 54.481 li
45.438 53.9458 45.3057 53.856 44.9155 53.856 cv
42.6299 53.856 li
42.2397 53.856 42.0601 53.9458 41.8828 54.481 cv
41.6821 54.481 li
42.2988 52.1733 li
cp
41.9941 49.7651 mo
47.7363 49.7651 li
47.2866 51.4487 li
47.1084 51.4487 li
47.1284 51.248 47.2788 50.7686 46.543 50.7686 cv
42.6514 50.7686 li
41.915 50.7686 41.8101 51.248 41.7236 51.4487 cv
41.5444 51.4487 li
41.9941 49.7651 li
cp
40.3237 55.104 mo
40.5239 55.104 li
40.4214 55.8623 40.3906 56.2295 41.1934 56.2295 cv
45.085 56.2295 li
45.8872 56.2295 46.0527 55.8623 46.3555 55.104 cv
46.5562 55.104 li
45.9785 57.2676 li
39.7461 57.2676 li
40.3237 55.104 li
cp
f
51.5791 47.6997 mo
51.5791 49.6655 li
53.5615 49.6655 li
53.5615 50.125 li
51.5791 50.125 li
51.5791 52.1567 li
51.1196 52.1567 li
51.1196 50.125 li
49.1372 50.125 li
49.1372 49.6655 li
51.1196 49.6655 li
51.1196 47.6997 li
51.5791 47.6997 li
cp
f
50.9912 56.1265 mo
51.1387 56.2754 51.2124 56.4204 51.2124 56.561 cv
51.2124 56.6895 51.1733 56.7881 51.0977 56.8584 cv
51.0215 56.9287 50.9312 56.9644 50.8286 56.9644 cv
50.728 56.9644 50.6436 56.9331 50.5757 56.8701 cv
50.5068 56.8081 50.4731 56.7305 50.4731 56.6377 cv
50.4731 56.5669 50.4956 56.4907 50.541 56.4082 cv
50.5854 56.3276 50.6079 56.2744 50.6079 56.2495 cv
50.6079 56.2012 50.5801 56.1592 50.5239 56.125 cv
50.4683 56.0913 50.3794 56.0737 50.2563 56.0737 cv
49.8188 56.0737 49.438 56.3237 49.1162 56.8228 cv
48.793 57.3208 48.6323 57.8442 48.6323 58.3921 cv
48.6323 58.6997 48.6973 58.9409 48.8281 59.1157 cv
48.9585 59.29 49.1543 59.377 49.4155 59.377 cv
49.625 59.377 49.8286 59.3164 50.0269 59.1953 cv
50.2231 59.0737 50.4048 58.9199 50.5713 58.7319 cv
50.5996 58.6992 li
50.7178 58.7891 li
50.5273 59.0313 50.3438 59.2178 50.1665 59.3481 cv
49.854 59.5742 49.5068 59.6865 49.126 59.6865 cv
48.7612 59.6865 48.4658 59.5713 48.2397 59.3379 cv
48.0142 59.1055 47.9014 58.7876 47.9014 58.3853 cv
47.9014 57.7671 48.1528 57.1978 48.6567 56.6782 cv
49.1543 56.1611 49.6934 55.9033 50.2734 55.9033 cv
50.605 55.9033 50.8452 55.9771 50.9912 56.1265 cv
cp
f
54.7026 56.1265 mo
54.8501 56.2754 54.9233 56.4204 54.9233 56.561 cv
54.9233 56.6895 54.8848 56.7881 54.8081 56.8584 cv
54.7329 56.9287 54.6431 56.9644 54.5391 56.9644 cv
54.4385 56.9644 54.354 56.9331 54.2866 56.8701 cv
54.2183 56.8081 54.1846 56.7305 54.1846 56.6377 cv
54.1846 56.5669 54.2065 56.4907 54.2515 56.4082 cv
54.2964 56.3276 54.3188 56.2744 54.3188 56.2495 cv
54.3188 56.2012 54.291 56.1592 54.2349 56.125 cv
54.1797 56.0913 54.0908 56.0737 53.9683 56.0737 cv
53.5293 56.0737 53.1494 56.3237 52.8271 56.8228 cv
52.5039 57.3208 52.3428 57.8442 52.3428 58.3921 cv
52.3428 58.6997 52.4082 58.9409 52.5386 59.1157 cv
52.6699 59.29 52.8657 59.377 53.127 59.377 cv
53.3364 59.377 53.5396 59.3164 53.7373 59.1953 cv
53.9341 59.0737 54.1157 58.9199 54.2822 58.7319 cv
54.311 58.6992 li
54.4292 58.7891 li
54.2383 59.0313 54.0547 59.2178 53.8779 59.3481 cv
53.5649 59.5742 53.2183 59.6865 52.8369 59.6865 cv
52.4722 59.6865 52.1763 59.5713 51.9507 59.3379 cv
51.7256 59.1055 51.6118 58.7876 51.6118 58.3853 cv
51.6118 57.7671 51.8638 57.1978 52.3682 56.6782 cv
52.8657 56.1611 53.4043 55.9033 53.9839 55.9033 cv
54.3164 55.9033 54.5562 55.9771 54.7026 56.1265 cv
cp
f
65.0317 77.5889 mo
61.7427 77.5889 li
62.2246 75.7827 li
62.3921 75.7827 li
62.3804 76.3291 62.4775 76.4634 62.9463 76.4634 cv
64.7085 76.4634 li
64.769 76.1509 li
63.979 75.894 63.5103 75.605 63.2314 74.936 cv
62.7568 73.7871 63.2397 72.4834 63.9307 71.6479 cv
64.5942 70.834 65.1826 70.5884 65.5317 70.4106 cv
66.1245 70.1099 66.9111 69.9199 67.7031 69.9199 cv
68.4956 69.9199 69.1802 70.1099 69.6123 70.4106 cv
69.8667 70.5884 70.3247 70.834 70.5532 71.6479 cv
70.7993 72.4834 70.585 73.7871 69.498 74.936 cv
68.8623 75.605 68.2383 75.894 67.3115 76.1509 cv
67.2061 76.4634 li
68.9668 76.4634 li
69.4355 76.4634 69.605 76.3291 69.8848 75.7827 cv
70.0522 75.7827 li
69.5703 77.5889 li
66.2813 77.5889 li
66.9111 75.894 li
67.3096 75.7388 67.8638 75.6265 68.5664 74.623 cv
69.1602 73.7764 69.7983 71.8486 69.0703 70.8564 cv
68.7349 70.3999 68.1768 70.2773 67.6079 70.2773 cv
67.04 70.2773 66.416 70.3999 65.8369 70.8564 cv
64.5801 71.8486 64.1875 73.7764 64.3291 74.623 cv
64.4966 75.6265 64.9902 75.7388 65.3057 75.894 cv
65.0317 77.5889 li
cp
f
73.1787 68.0215 mo
73.1787 69.9868 li
75.1611 69.9868 li
75.1611 70.4463 li
73.1787 70.4463 li
73.1787 72.479 li
72.7192 72.479 li
72.7192 70.4463 li
70.7373 70.4463 li
70.7373 69.9868 li
72.7192 69.9868 li
72.7192 68.0215 li
73.1787 68.0215 li
cp
f
73.0557 76.4478 mo
73.2031 76.5972 73.2764 76.7427 73.2764 76.8833 cv
73.2764 77.0107 73.2378 77.1099 73.1616 77.1797 cv
73.0854 77.251 72.9956 77.2861 72.8926 77.2861 cv
72.7915 77.2861 72.7075 77.2544 72.6392 77.1924 cv
72.5713 77.1294 72.5371 77.0518 72.5371 76.9595 cv
72.5371 76.8887 72.5605 76.812 72.6045 76.73 cv
72.6494 76.6489 72.6724 76.5957 72.6724 76.5713 cv
72.6724 76.5225 72.6436 76.481 72.5884 76.4468 cv
72.5327 76.4126 72.4434 76.3955 72.3213 76.3955 cv
71.8828 76.3955 71.5029 76.6455 71.1797 77.144 cv
70.8579 77.6431 70.6958 78.1655 70.6958 78.7134 cv
70.6958 79.022 70.7617 79.2622 70.8921 79.437 cv
71.0229 79.6108 71.2188 79.6987 71.48 79.6987 cv
71.6895 79.6987 71.8931 79.6372 72.0903 79.5171 cv
72.2876 79.3955 72.4697 79.2412 72.6348 79.0537 cv
72.6646 79.021 li
72.7822 79.1108 li
72.5923 79.353 72.4082 79.5391 72.2314 79.6699 cv
71.9175 79.8955 71.5713 80.0093 71.1899 80.0093 cv
70.8247 80.0093 70.5298 79.8926 70.3042 79.6597 cv
70.0781 79.4268 69.9653 79.1099 69.9653 78.7065 cv
69.9653 78.0884 70.2168 77.5195 70.7207 76.9995 cv
71.2188 76.4829 71.7573 76.2241 72.3374 76.2241 cv
72.6694 76.2241 72.9087 76.2988 73.0557 76.4478 cv
cp
f
76.7666 76.4478 mo
76.9136 76.5972 76.9873 76.7427 76.9873 76.8833 cv
76.9873 77.0107 76.9487 77.1099 76.873 77.1797 cv
76.7964 77.251 76.7065 77.2861 76.6035 77.2861 cv
76.5029 77.2861 76.4189 77.2544 76.3506 77.1924 cv
76.2817 77.1294 76.248 77.0518 76.248 76.9595 cv
76.248 76.8887 76.2705 76.812 76.3154 76.73 cv
76.3604 76.6489 76.3833 76.5957 76.3833 76.5713 cv
76.3833 76.5225 76.355 76.481 76.2993 76.4468 cv
76.2432 76.4126 76.1543 76.3955 76.0322 76.3955 cv
75.5938 76.3955 75.2134 76.6455 74.8911 77.144 cv
74.5684 77.6431 74.4072 78.1655 74.4072 78.7134 cv
74.4072 79.022 74.4727 79.2622 74.603 79.437 cv
74.7334 79.6108 74.9302 79.6987 75.1904 79.6987 cv
75.4004 79.6987 75.604 79.6372 75.8013 79.5171 cv
75.9985 79.3955 76.1802 79.2412 76.3462 79.0537 cv
76.3745 79.021 li
76.4937 79.1108 li
76.3032 79.353 76.1191 79.5391 75.9424 79.6699 cv
75.6294 79.8955 75.2817 80.0093 74.9014 80.0093 cv
74.5361 80.0093 74.2407 79.8926 74.0156 79.6597 cv
73.7891 79.4268 73.6758 79.1099 73.6758 78.7065 cv
73.6758 78.0884 73.9282 77.5195 74.4316 76.9995 cv
74.9302 76.4829 75.4688 76.2241 76.0483 76.2241 cv
76.3809 76.2241 76.6201 76.2988 76.7666 76.4478 cv
cp
f
148.128 87.2402 mo
153.904 87.2402 li
153.567 88.9238 li
153.355 88.9238 li
153.357 88.5005 153.368 87.7529 152.263 87.7529 cv
149.809 87.7529 li
151.284 90.6289 li
147.834 93.6938 li
151.1 93.6938 li
151.814 93.6938 152.269 93.5381 152.892 92.457 cv
153.114 92.457 li
152.092 94.7417 li
145.993 94.7417 li
150.099 91.0967 li
148.128 87.2402 li
cp
f
156.823 85.1743 mo
156.823 87.1401 li
158.805 87.1401 li
158.805 87.5996 li
156.823 87.5996 li
156.823 89.6318 li
156.363 89.6318 li
156.363 87.5996 li
154.381 87.5996 li
154.381 87.1401 li
156.363 87.1401 li
156.363 85.1743 li
156.823 85.1743 li
cp
f
162.04 85.1743 mo
162.04 87.1401 li
164.02 87.1401 li
164.02 87.5996 li
162.04 87.5996 li
162.04 89.6318 li
161.58 89.6318 li
161.58 87.5996 li
159.598 87.5996 li
159.598 87.1401 li
161.58 87.1401 li
161.58 85.1743 li
162.04 85.1743 li
cp
f
156.7 93.6011 mo
156.847 93.7505 156.92 93.895 156.92 94.0366 cv
156.92 94.1636 156.882 94.2627 156.807 94.3335 cv
156.73 94.4038 156.639 94.4385 156.537 94.4385 cv
156.436 94.4385 156.351 94.4077 156.285 94.3447 cv
156.216 94.2822 156.181 94.2056 156.181 94.1128 cv
156.181 94.042 156.204 93.9653 156.249 93.8838 cv
156.294 93.8018 156.316 93.7495 156.316 93.7246 cv
156.316 93.6753 156.288 93.6338 156.232 93.6001 cv
156.177 93.5659 156.087 93.5488 155.964 93.5488 cv
155.526 93.5488 155.147 93.7983 154.824 94.2974 cv
154.501 94.7954 154.339 95.3184 154.339 95.8672 cv
154.339 96.1748 154.405 96.4155 154.537 96.5903 cv
154.667 96.7646 154.861 96.8521 155.124 96.8521 cv
155.333 96.8521 155.538 96.791 155.735 96.6704 cv
155.932 96.5488 156.113 96.3945 156.28 96.207 cv
156.308 96.1743 li
156.425 96.2642 li
156.236 96.5063 156.051 96.6929 155.875 96.8228 cv
155.563 97.0488 155.215 97.1616 154.834 97.1616 cv
154.47 97.1616 154.174 97.0454 153.948 96.813 cv
153.722 96.5806 153.608 96.2627 153.608 95.8594 cv
153.608 95.2422 153.86 94.6733 154.365 94.1533 cv
154.861 93.6357 155.401 93.3774 155.98 93.3774 cv
156.313 93.3774 156.552 93.4517 156.7 93.6011 cv
cp
f
116.361 106.856 mo
116.562 106.856 li
116.453 107.39 116.584 107.48 116.975 107.48 cv
119.261 107.48 li
119.65 107.48 119.83 107.39 120.007 106.856 cv
120.207 106.856 li
119.591 109.164 li
119.391 109.164 li
119.5 108.628 119.368 108.54 118.978 108.54 cv
116.692 108.54 li
116.301 108.54 116.122 108.628 115.945 109.164 cv
115.745 109.164 li
116.361 106.856 li
cp
116.057 104.448 mo
121.798 104.448 li
121.349 106.132 li
121.171 106.132 li
121.19 105.931 121.341 105.452 120.605 105.452 cv
116.714 105.452 li
115.977 105.452 115.872 105.931 115.786 106.132 cv
115.606 106.132 li
116.057 104.448 li
cp
114.386 109.788 mo
114.585 109.788 li
114.483 110.545 114.453 110.913 115.255 110.913 cv
119.147 110.913 li
119.949 110.913 120.115 110.545 120.417 109.788 cv
120.619 109.788 li
120.041 111.95 li
113.809 111.95 li
114.386 109.788 li
cp
f
122.909 104.764 mo
122.909 104.273 li
124.758 104.273 li
124.758 102.424 li
125.25 102.424 li
125.25 104.273 li
127.099 104.273 li
127.099 104.764 li
125.25 104.764 li
125.25 106.609 li
124.758 106.609 li
124.758 104.764 li
122.909 104.764 li
cp
f
124.822 110.114 mo
124.969 110.262 125.042 110.408 125.042 110.548 cv
125.042 110.677 125.004 110.775 124.927 110.845 cv
124.852 110.917 124.762 110.951 124.657 110.951 cv
124.558 110.951 124.473 110.92 124.405 110.858 cv
124.337 110.795 124.303 110.717 124.303 110.625 cv
124.303 110.554 124.325 110.477 124.371 110.396 cv
124.416 110.314 124.438 110.261 124.438 110.237 cv
124.438 110.188 124.41 110.146 124.354 110.112 cv
124.298 110.078 124.209 110.062 124.087 110.062 cv
123.648 110.062 123.268 110.311 122.945 110.809 cv
122.623 111.309 122.462 111.831 122.462 112.379 cv
122.462 112.688 122.527 112.928 122.658 113.103 cv
122.789 113.277 122.984 113.364 123.246 113.364 cv
123.455 113.364 123.659 113.303 123.856 113.182 cv
124.054 113.061 124.235 112.907 124.401 112.719 cv
124.43 112.687 li
124.548 112.776 li
124.357 113.019 124.174 113.205 123.998 113.336 cv
123.684 113.562 123.337 113.675 122.956 113.675 cv
122.591 113.675 122.296 113.558 122.07 113.325 cv
121.844 113.092 121.731 112.775 121.731 112.372 cv
121.731 111.754 121.983 111.186 122.487 110.666 cv
122.984 110.148 123.523 109.89 124.103 109.89 cv
124.435 109.89 124.674 109.964 124.822 110.114 cv
cp
f
40.3242 105.823 mo
40.5244 105.823 li
40.4155 106.357 40.5479 106.446 40.938 106.446 cv
43.2236 106.446 li
43.6138 106.446 43.7939 106.357 43.9702 105.823 cv
44.1709 105.823 li
43.5547 108.131 li
43.3545 108.131 li
43.4639 107.595 43.3311 107.505 42.9409 107.505 cv
40.6553 107.505 li
40.2651 107.505 40.0859 107.595 39.9087 108.131 cv
39.708 108.131 li
40.3242 105.823 li
cp
40.0195 103.415 mo
45.7617 103.415 li
45.3115 105.098 li
45.1333 105.098 li
45.1538 104.897 45.3037 104.418 44.5684 104.418 cv
40.6768 104.418 li
39.9409 104.418 39.8354 104.897 39.7485 105.098 cv
39.5698 105.098 li
40.0195 103.415 li
cp
38.3496 108.753 mo
38.5498 108.753 li
38.4478 109.513 38.416 109.88 39.2188 109.88 cv
43.1108 109.88 li
43.9131 109.88 44.0776 109.513 44.3804 108.753 cv
44.5815 108.753 li
44.0044 110.917 li
37.772 110.917 li
38.3496 108.753 li
cp
f
48.9458 104.473 mo
49.2017 103.785 49.3301 103.127 49.3301 102.498 cv
49.3301 102.28 49.3071 102.104 49.2598 101.971 cv
49.1758 101.717 49.0151 101.59 48.7793 101.59 cv
48.3447 101.59 47.9771 102.058 47.6763 102.994 cv
47.4473 103.709 47.333 104.305 47.333 104.781 cv
47.333 104.982 47.3564 105.151 47.4028 105.286 cv
47.4922 105.549 47.6553 105.68 47.8926 105.68 cv
48.2983 105.68 48.6489 105.278 48.9458 104.473 cv
cp
49.6699 102.012 mo
49.7861 102.277 49.8452 102.585 49.8452 102.937 cv
49.8452 103.711 49.6406 104.394 49.2319 104.981 cv
48.8296 105.557 48.376 105.845 47.8691 105.845 cv
47.5757 105.845 47.3267 105.72 47.1235 105.469 cv
46.9204 105.218 46.8188 104.871 46.8188 104.43 cv
46.8188 103.69 47.0186 103.005 47.4189 102.375 cv
47.8296 101.729 48.2866 101.406 48.7905 101.406 cv
49.1968 101.406 49.4902 101.608 49.6699 102.012 cv
cp
f
48.3208 109.776 mo
48.4683 109.926 48.542 110.07 48.542 110.211 cv
48.542 110.338 48.5029 110.437 48.4268 110.508 cv
48.3506 110.579 48.2603 110.614 48.1577 110.614 cv
48.0571 110.614 47.9727 110.583 47.9053 110.521 cv
47.8364 110.458 47.8022 110.38 47.8022 110.288 cv
47.8022 110.217 47.8252 110.141 47.8701 110.059 cv
47.915 109.977 47.937 109.924 47.937 109.899 cv
47.937 109.852 47.9097 109.809 47.8535 109.774 cv
47.7974 109.741 47.7085 109.724 47.5864 109.724 cv
47.1475 109.724 46.7676 109.974 46.4453 110.472 cv
46.1226 110.971 45.9614 111.494 45.9614 112.042 cv
45.9614 112.35 46.0269 112.591 46.1572 112.766 cv
46.2881 112.939 46.4839 113.026 46.7451 113.026 cv
46.9546 113.026 47.1582 112.966 47.3564 112.845 cv
47.5527 112.724 47.7344 112.569 47.9004 112.382 cv
47.9287 112.349 li
48.0474 112.438 li
47.8569 112.681 47.6733 112.868 47.4961 112.998 cv
47.1836 113.225 46.8364 113.338 46.4556 113.338 cv
46.0908 113.338 45.7949 113.221 45.5693 112.988 cv
45.3433 112.755 45.2305 112.438 45.2305 112.035 cv
45.2305 111.417 45.4824 110.849 45.9858 110.328 cv
46.4839 109.811 47.0229 109.553 47.6025 109.553 cv
47.9346 109.553 48.1748 109.626 48.3208 109.776 cv
cp
f
78.2002 174.516 mo
74.9097 174.516 li
75.3921 172.71 li
75.5605 172.71 li
75.5479 173.256 75.645 173.389 76.1143 173.389 cv
77.876 173.389 li
77.9365 173.078 li
77.1465 172.822 76.6777 172.532 76.3994 171.863 cv
75.9248 170.714 76.4072 169.412 77.0977 168.575 cv
77.7617 167.762 78.3511 167.517 78.6997 167.337 cv
79.293 167.038 80.0796 166.848 80.8716 166.848 cv
81.6636 166.848 82.3477 167.038 82.7803 167.337 cv
83.0342 167.517 83.4927 167.762 83.7212 168.575 cv
83.9673 169.412 83.7529 170.714 82.6655 171.863 cv
82.0303 172.532 81.4058 172.822 80.479 173.078 cv
80.373 173.389 li
82.1343 173.389 li
82.603 173.389 82.7725 173.256 83.0527 172.71 cv
83.2197 172.71 li
82.7378 174.516 li
79.4478 174.516 li
80.0791 172.822 li
80.478 172.666 81.0313 172.554 81.7334 171.55 cv
82.3276 170.704 82.9663 168.775 82.2378 167.785 cv
81.9028 167.327 81.3442 167.204 80.7764 167.204 cv
80.2075 167.204 79.583 167.327 79.0039 167.785 cv
77.748 168.775 77.355 170.704 77.4971 171.55 cv
77.6641 172.554 78.1582 172.666 78.4736 172.822 cv
78.2002 174.516 li
cp
f
84.6099 166.765 mo
88.9912 166.765 li
88.9912 167.226 li
84.6099 167.226 li
84.6099 166.765 li
cp
f
112.135 155.487 mo
112.335 155.487 li
112.228 156.022 112.359 156.111 112.749 156.111 cv
115.034 156.111 li
115.425 156.111 115.605 156.022 115.782 155.487 cv
115.981 155.487 li
115.366 157.794 li
115.166 157.794 li
115.275 157.259 115.142 157.17 114.751 157.17 cv
112.466 157.17 li
112.076 157.17 111.897 157.259 111.72 157.794 cv
111.519 157.794 li
112.135 155.487 li
cp
111.83 153.08 mo
117.572 153.08 li
117.123 154.762 li
116.945 154.762 li
116.965 154.562 117.115 154.083 116.38 154.083 cv
112.488 154.083 li
111.751 154.083 111.646 154.562 111.56 154.762 cv
111.381 154.762 li
111.83 153.08 li
cp
110.161 158.418 mo
110.36 158.418 li
110.258 159.176 110.228 159.543 111.03 159.543 cv
114.921 159.543 li
115.724 159.543 115.888 159.176 116.191 158.418 cv
116.393 158.418 li
115.815 160.58 li
109.583 160.58 li
110.161 158.418 li
cp
f
120.756 154.137 mo
121.012 153.449 121.141 152.791 121.141 152.163 cv
121.141 151.945 121.117 151.769 121.071 151.635 cv
120.986 151.381 120.826 151.254 120.59 151.254 cv
120.156 151.254 119.789 151.722 119.487 152.658 cv
119.258 153.373 119.144 153.969 119.144 154.445 cv
119.144 154.646 119.167 154.814 119.214 154.951 cv
119.302 155.213 119.465 155.345 119.704 155.345 cv
120.108 155.345 120.459 154.941 120.756 154.137 cv
cp
121.481 151.676 mo
121.598 151.941 121.655 152.25 121.655 152.601 cv
121.655 153.375 121.451 154.057 121.042 154.646 cv
120.641 155.221 120.186 155.509 119.68 155.509 cv
119.386 155.509 119.138 155.383 118.934 155.133 cv
118.73 154.881 118.629 154.535 118.629 154.094 cv
118.629 153.354 118.829 152.67 119.229 152.039 cv
119.64 151.393 120.097 151.07 120.601 151.07 cv
121.008 151.07 121.301 151.272 121.481 151.676 cv
cp
f
142.914 140.073 mo
148.69 140.073 li
148.352 141.756 li
148.14 141.756 li
148.142 141.333 148.151 140.586 147.047 140.586 cv
144.595 140.586 li
146.068 143.462 li
142.619 146.527 li
145.884 146.527 li
146.599 146.527 147.054 146.371 147.675 145.29 cv
147.898 145.29 li
146.877 147.575 li
140.777 147.575 li
144.883 143.93 li
142.914 140.073 li
cp
f
152.073 138.24 mo
152.073 140.205 li
154.055 140.205 li
154.055 140.665 li
152.073 140.665 li
152.073 142.698 li
151.612 142.698 li
151.612 140.665 li
149.63 140.665 li
149.63 140.205 li
151.612 140.205 li
151.612 138.24 li
152.073 138.24 li
cp
f
107.425 122.156 mo
112.019 122.156 li
111.248 116.939 li
107.425 122.156 li
cp
113.255 122.702 mo
106.542 122.702 li
112.158 115.034 li
113.255 122.702 li
cp
f
115.505 113.135 mo
115.505 115.099 li
117.486 115.099 li
117.486 115.56 li
115.505 115.56 li
115.505 117.592 li
115.044 117.592 li
115.044 115.56 li
113.063 115.56 li
113.063 115.099 li
115.044 115.099 li
115.044 113.135 li
115.505 113.135 li
cp
f
53.7905 120.162 mo
58.3838 120.162 li
57.6128 114.946 li
53.7905 120.162 li
cp
59.6206 120.708 mo
52.9092 120.708 li
58.5229 113.041 li
59.6206 120.708 li
cp
f
61.6748 114.265 mo
61.9307 113.577 62.0586 112.919 62.0586 112.29 cv
62.0586 112.072 62.0361 111.896 61.9888 111.763 cv
61.9038 111.509 61.7446 111.382 61.5088 111.382 cv
61.0737 111.382 60.7061 111.85 60.4053 112.785 cv
60.1763 113.501 60.0615 114.097 60.0615 114.573 cv
60.0615 114.774 60.085 114.943 60.1318 115.079 cv
60.2212 115.341 60.3843 115.472 60.6216 115.472 cv
61.0269 115.472 61.3779 115.07 61.6748 114.265 cv
cp
62.3989 111.804 mo
62.5146 112.069 62.5737 112.377 62.5737 112.728 cv
62.5737 113.503 62.3691 114.185 61.9609 114.773 cv
61.5586 115.349 61.105 115.637 60.5981 115.637 cv
60.3042 115.637 60.0552 115.511 59.8525 115.261 cv
59.6494 115.01 59.5479 114.663 59.5479 114.221 cv
59.5479 113.481 59.7476 112.797 60.1475 112.167 cv
60.5586 111.521 61.0156 111.197 61.5195 111.197 cv
61.9258 111.197 62.2192 111.4 62.3989 111.804 cv
cp
f
.882324 117.885 mo
5.47607 117.885 li
4.70459 112.668 li
.882324 117.885 li
cp
6.7124 118.431 mo
0 118.431 li
5.61523 110.763 li
6.7124 118.431 li
cp
f
6.52832 110.913 mo
10.9106 110.913 li
10.9106 111.374 li
6.52832 111.374 li
6.52832 110.913 li
cp
f
21.8145 140.253 mo
27.5898 140.253 li
27.2529 141.936 li
27.0405 141.936 li
27.042 141.513 27.0513 140.766 25.9478 140.766 cv
23.4951 140.766 li
24.9678 143.642 li
21.5186 146.707 li
24.7847 146.707 li
25.499 146.707 25.9541 146.551 26.5762 145.47 cv
26.7998 145.47 li
25.7773 147.754 li
19.6777 147.754 li
23.7842 144.109 li
21.8145 140.253 li
cp
f
28.5396 140.236 mo
32.9224 140.236 li
32.9224 140.697 li
28.5396 140.697 li
28.5396 140.236 li
cp
f
43.3442 157.847 mo
43.5449 157.847 li
43.4355 158.381 43.5684 158.469 43.9585 158.469 cv
46.2441 158.469 li
46.6343 158.469 46.8145 158.381 46.9897 157.847 cv
47.1909 157.847 li
46.5752 160.155 li
46.3745 160.155 li
46.4839 159.62 46.3511 159.53 45.9614 159.53 cv
43.6753 159.53 li
43.2852 159.53 43.1055 159.62 42.9287 160.155 cv
42.7285 160.155 li
43.3442 157.847 li
cp
43.0396 155.439 mo
48.7822 155.439 li
48.3325 157.122 li
48.1538 157.122 li
48.1748 156.921 48.3237 156.442 47.5884 156.442 cv
43.6968 156.442 li
42.9609 156.442 42.8555 156.921 42.7686 157.122 cv
42.5903 157.122 li
43.0396 155.439 li
cp
41.3691 160.777 mo
41.5698 160.777 li
41.4673 161.536 41.4355 161.903 42.2393 161.903 cv
46.1309 161.903 li
46.9336 161.903 47.0981 161.536 47.4009 160.777 cv
47.6021 160.777 li
47.0244 162.941 li
40.792 162.941 li
41.3691 160.777 li
cp
f
49.9595 155.422 mo
54.3413 155.422 li
54.3413 155.882 li
49.9595 155.882 li
49.9595 155.422 li
cp
f
171.045 122.485 mo
175.64 122.485 li
174.87 117.269 li
171.045 122.485 li
cp
176.876 123.031 mo
170.165 123.031 li
175.78 115.362 li
176.876 123.031 li
cp
f
179.125 113.464 mo
179.125 115.43 li
181.107 115.43 li
181.107 115.89 li
179.125 115.89 li
179.125 117.921 li
178.666 117.921 li
178.666 115.89 li
176.684 115.89 li
176.684 115.43 li
178.666 115.43 li
178.666 113.464 li
179.125 113.464 li
cp
f
184.343 113.464 mo
184.343 115.43 li
186.326 115.43 li
186.326 115.89 li
184.343 115.89 li
184.343 117.921 li
183.883 117.921 li
183.883 115.89 li
181.902 115.89 li
181.902 115.43 li
183.883 115.43 li
183.883 113.464 li
184.343 113.464 li
cp
f
98.2314 133.186 mo
98.4268 133.563 98.4595 133.849 98.4595 134.265 cv
98.4595 134.578 98.4141 134.903 98.3296 135.202 cv
98.2051 135.696 97.9849 136.17 97.6592 136.561 cv
97.3472 136.932 96.8794 137.27 96.3721 137.27 cv
95.9692 137.27 95.6426 137.042 95.4551 136.691 cv
95.2861 136.392 95.2217 135.996 95.2217 135.65 cv
95.2217 135.358 95.2534 135.111 95.3125 134.825 cv
95.5073 133.908 96.2085 132.587 97.2886 132.587 cv
97.731 132.587 98.0366 132.802 98.2314 133.186 cv
cp
96.5469 133.394 mo
96.3843 133.66 96.2676 133.92 96.1768 134.212 cv
95.9951 134.779 95.8262 135.546 95.8262 136.131 cv
95.8262 136.516 95.9102 137.016 96.4043 137.016 cv
97.2827 137.016 97.7705 134.825 97.8228 134.155 cv
97.8345 133.999 97.8481 133.842 97.8481 133.687 cv
97.8481 133.309 97.75 132.821 97.2827 132.821 cv
96.9312 132.821 96.71 133.121 96.5469 133.394 cv
0 0 0 0 cmyk
f
2.19 lw
0 lj
98.2314 133.186 mo
98.4268 133.563 98.4595 133.849 98.4595 134.265 cv
98.4595 134.578 98.4141 134.903 98.3296 135.202 cv
98.2051 135.696 97.9849 136.17 97.6592 136.561 cv
97.3472 136.932 96.8794 137.27 96.3721 137.27 cv
95.9692 137.27 95.6426 137.042 95.4551 136.691 cv
95.2861 136.392 95.2217 135.996 95.2217 135.65 cv
95.2217 135.358 95.2534 135.111 95.3125 134.825 cv
95.5073 133.908 96.2085 132.587 97.2886 132.587 cv
97.731 132.587 98.0366 132.802 98.2314 133.186 cv
cp
96.5469 133.394 mo
96.3843 133.66 96.2676 133.92 96.1768 134.212 cv
95.9951 134.779 95.8262 135.546 95.8262 136.131 cv
95.8262 136.516 95.9102 137.016 96.4043 137.016 cv
97.2827 137.016 97.7705 134.825 97.8228 134.155 cv
97.8345 133.999 97.8481 133.842 97.8481 133.687 cv
97.8481 133.309 97.75 132.821 97.2827 132.821 cv
96.9312 132.821 96.71 133.121 96.5469 133.394 cv
cp
@
88.3994 134.778 mo
94.1748 134.778 li
93.8364 136.462 li
93.6245 136.462 li
93.627 136.037 93.6367 135.291 92.5327 135.291 cv
90.0796 135.291 li
91.5532 138.167 li
88.103 141.234 li
91.3701 141.234 li
92.083 141.234 92.5381 141.077 93.1606 139.996 cv
93.3833 139.996 li
92.3613 142.282 li
86.2617 142.282 li
90.3682 138.635 li
88.3994 134.778 li
f
88.3994 134.778 mo
94.1748 134.778 li
93.8364 136.462 li
93.6245 136.462 li
93.627 136.037 93.6367 135.291 92.5327 135.291 cv
90.0796 135.291 li
91.5532 138.167 li
88.103 141.234 li
91.3701 141.234 li
92.083 141.234 92.5381 141.077 93.1606 139.996 cv
93.3833 139.996 li
92.3613 142.282 li
86.2617 142.282 li
90.3682 138.635 li
88.3994 134.778 li
cp
@
88.4541 134.78 mo
94.2295 134.78 li
93.8921 136.463 li
93.6807 136.463 li
93.6821 136.04 93.6914 135.292 92.5874 135.292 cv
90.1348 135.292 li
91.6079 138.169 li
88.1587 141.234 li
91.4253 141.234 li
92.1392 141.234 92.5938 141.077 93.2163 139.998 cv
93.4395 139.998 li
92.416 142.282 li
86.3174 142.282 li
90.4248 138.637 li
88.4541 134.78 li
cp
0 0 0 1 cmyk
f
95.9014 135.078 mo
95.9014 136.177 96.2393 136.801 96.7607 136.801 cv
97.3389 136.801 97.6187 136.118 97.6187 135.039 cv
97.6187 133.998 97.3579 133.315 96.7607 133.315 cv
96.2656 133.315 95.9014 133.926 95.9014 135.078 cv
cp
98.1973 135.012 mo
98.1973 136.45 97.6567 137.244 96.7275 137.244 cv
95.9014 137.244 95.3359 136.47 95.3223 135.071 cv
95.3223 133.646 95.9404 132.874 96.7988 132.874 cv
97.6836 132.874 98.1973 133.666 98.1973 135.012 cv
cp
f
95.3506 84.7378 mo
95.4976 84.8872 95.5703 85.0322 95.5703 85.1733 cv
95.5703 85.3013 95.5322 85.3999 95.4565 85.4707 cv
95.3799 85.5405 95.29 85.5757 95.1865 85.5757 cv
95.0859 85.5757 95.0015 85.5444 94.9336 85.4819 cv
94.8662 85.4199 94.8315 85.3418 94.8315 85.249 cv
94.8315 85.1787 94.854 85.1021 94.8989 85.021 cv
94.9443 84.939 94.9658 84.8857 94.9658 84.8618 cv
94.9658 84.8125 94.9385 84.7715 94.8828 84.7368 cv
94.8271 84.7026 94.7378 84.686 94.6152 84.686 cv
94.1768 84.686 93.7969 84.936 93.4741 85.4341 cv
93.1523 85.9331 92.9902 86.4556 92.9902 87.0034 cv
92.9902 87.312 93.0557 87.5527 93.186 87.7271 cv
93.3169 87.9019 93.5132 87.9893 93.7744 87.9893 cv
93.9839 87.9893 94.187 87.9282 94.3843 87.8071 cv
94.5825 87.6865 94.7642 87.5317 94.9297 87.3438 cv
94.958 87.311 li
95.0762 87.4009 li
94.8857 87.6431 94.7026 87.8296 94.5259 87.9604 cv
94.2129 88.186 93.8657 88.2993 93.4854 88.2993 cv
93.1201 88.2993 92.8247 88.1826 92.5986 87.9497 cv
92.3726 87.7173 92.2593 87.3999 92.2593 86.9966 cv
92.2593 86.3794 92.5112 85.8101 93.0146 85.2905 cv
93.5132 84.7729 94.0522 84.5146 94.6309 84.5146 cv
94.9634 84.5146 95.2031 84.5894 95.3506 84.7378 cv
cp
f
86.9683 78.9756 mo
92.7437 78.9756 li
92.4067 80.6592 li
92.1943 80.6592 li
92.1958 80.2354 92.2056 79.4883 91.1021 79.4883 cv
88.6484 79.4883 li
90.1226 82.3643 li
86.6729 85.4292 li
89.9399 85.4292 li
90.6528 85.4292 91.1069 85.2729 91.73 84.1934 cv
91.9536 84.1934 li
90.9297 86.4775 li
84.8311 86.4775 li
88.939 82.833 li
86.9683 78.9756 li
cp
f
96.1274 77.1436 mo
96.1274 79.1089 li
98.1089 79.1089 li
98.1089 79.5684 li
96.1274 79.5684 li
96.1274 81.6006 li
95.667 81.6006 li
95.667 79.5684 li
93.6855 79.5684 li
93.6855 79.1089 li
95.667 79.1089 li
95.667 77.1436 li
96.1274 77.1436 li
cp
f
31.144 138.786 mo
32.3003 138.786 33.2378 137.848 33.2378 136.691 cv
33.2378 135.536 32.3003 134.598 31.144 134.598 cv
29.9883 134.598 29.0503 135.536 29.0503 136.691 cv
29.0503 137.848 29.9883 138.786 31.144 138.786 cv
f
9.83496 123.341 mo
10.9912 123.341 11.9287 122.403 11.9287 121.247 cv
11.9287 120.09 10.9912 119.153 9.83496 119.153 cv
8.67822 119.153 7.74072 120.09 7.74072 121.247 cv
7.74072 122.403 8.67822 123.341 9.83496 123.341 cv
f
52.1626 153.881 mo
53.3193 153.881 54.2568 152.944 54.2568 151.788 cv
54.2568 150.631 53.3193 149.694 52.1626 149.694 cv
51.0068 149.694 50.0693 150.631 50.0693 151.788 cv
50.0693 152.944 51.0068 153.881 52.1626 153.881 cv
f
72.9502 169.095 mo
74.1064 169.095 75.0439 168.157 75.0439 167 cv
75.0439 165.843 74.1064 164.906 72.9502 164.906 cv
71.7925 164.906 70.8555 165.843 70.8555 167 cv
70.8555 168.157 71.7925 169.095 72.9502 169.095 cv
f
105.233 155.972 mo
106.388 155.972 107.326 155.035 107.326 153.878 cv
107.326 152.723 106.388 151.784 105.233 151.784 cv
104.076 151.784 103.138 152.723 103.138 153.878 cv
103.138 155.035 104.076 155.972 105.233 155.972 cv
f
137.283 142.617 mo
138.439 142.617 139.377 141.68 139.377 140.524 cv
139.377 139.367 138.439 138.43 137.283 138.43 cv
136.125 138.43 135.189 139.367 135.189 140.524 cv
135.189 141.68 136.125 142.617 137.283 142.617 cv
f
76.665 120.786 mo
77.8213 120.786 78.7593 119.849 78.7593 118.692 cv
78.7593 117.536 77.8213 116.598 76.665 116.598 cv
75.5093 116.598 74.5718 117.536 74.5718 118.692 cv
74.5718 119.849 75.5093 120.786 76.665 120.786 cv
f
55.7627 105.574 mo
56.9199 105.574 57.8569 104.636 57.8569 103.48 cv
57.8569 102.324 56.9199 101.385 55.7627 101.385 cv
54.6064 101.385 53.6689 102.324 53.6689 103.48 cv
53.6689 104.636 54.6064 105.574 55.7627 105.574 cv
f
34.7441 90.3608 mo
35.9009 90.3608 36.8384 89.4233 36.8384 88.2676 cv
36.8384 87.1113 35.9009 86.1733 34.7441 86.1733 cv
33.5874 86.1733 32.6504 87.1113 32.6504 88.2676 cv
32.6504 89.4233 33.5874 90.3608 34.7441 90.3608 cv
f
140.884 94.4263 mo
142.039 94.4263 142.977 93.4883 142.977 92.3315 cv
142.977 91.1753 142.039 90.2383 140.884 90.2383 cv
139.727 90.2383 138.789 91.1753 138.789 92.3315 cv
138.789 93.4883 139.727 94.4263 140.884 94.4263 cv
f
108.832 107.547 mo
109.988 107.547 110.926 106.61 110.926 105.455 cv
110.926 104.298 109.988 103.359 108.832 103.359 cv
107.676 103.359 106.739 104.298 106.739 105.455 cv
106.739 106.61 107.676 107.547 108.832 107.547 cv
f
169.1 129.263 mo
170.257 129.263 171.195 128.327 171.195 127.169 cv
171.195 126.013 170.257 125.076 169.1 125.076 cv
167.945 125.076 167.006 126.013 167.006 127.169 cv
167.006 128.327 167.945 129.263 169.1 129.263 cv
f
59.479 57.2656 mo
60.6348 57.2656 61.5728 56.3281 61.5728 55.1729 cv
61.5728 54.0156 60.6348 53.0781 59.479 53.0781 cv
58.3218 53.0781 57.3848 54.0156 57.3848 55.1729 cv
57.3848 56.3281 58.3218 57.2656 59.479 57.2656 cv
f
84.0967 24.5186 mo
85.2534 24.5186 86.1909 23.5811 86.1909 22.4248 cv
86.1909 21.2681 85.2534 20.3306 84.0967 20.3306 cv
82.9414 20.3306 82.0029 21.2681 82.0029 22.4248 cv
82.0029 23.5811 82.9414 24.5186 84.0967 24.5186 cv
f
112.431 59.2393 mo
113.588 59.2393 114.526 58.3022 114.526 57.146 cv
114.526 55.9897 113.588 55.0518 112.431 55.0518 cv
111.275 55.0518 110.338 55.9897 110.338 57.146 cv
110.338 58.3022 111.275 59.2393 112.431 59.2393 cv
f
80.3818 72.478 mo
81.5376 72.478 82.4756 71.54 82.4756 70.3838 cv
82.4756 69.2275 81.5376 68.29 80.3818 68.29 cv
79.2246 68.29 78.2881 69.2275 78.2881 70.3838 cv
78.2881 71.54 79.2246 72.478 80.3818 72.478 cv
f
118.24 125.335 mo
118.285 124.18 117.384 123.207 116.229 123.163 cv
115.074 123.117 114.101 124.018 114.055 125.173 cv
f
114.055 125.173 mo
114.033 125.762 114.951 126.276 116.106 126.321 cv
117.262 126.366 118.217 125.925 118.24 125.335 cv
f
64.5898 123.361 mo
64.6348 122.206 63.7354 121.233 62.5796 121.188 cv
61.4229 121.144 60.4502 122.044 60.4058 123.199 cv
f
60.4058 123.199 mo
60.3828 123.789 61.3013 124.302 62.4561 124.347 cv
63.6123 124.392 64.5674 123.951 64.5898 123.361 cv
f
86.3062 138.69 mo
86.3496 137.535 85.4497 136.561 84.2939 136.517 cv
83.1387 136.472 82.166 137.372 82.1216 138.528 cv
f
82.1216 138.528 mo
82.0977 139.117 83.0161 139.631 84.1719 139.676 cv
85.3281 139.721 86.2822 139.28 86.3062 138.69 cv
f
90.1372 90.2661 mo
90.1826 89.1108 89.2817 88.1367 88.127 88.0918 cv
86.9707 88.0474 85.998 88.9473 85.9531 90.103 cv
f
85.9531 90.103 mo
85.9307 90.6924 86.8491 91.207 88.0044 91.251 cv
89.1597 91.2964 90.1152 90.855 90.1372 90.2661 cv
f
21.5366 81.7451 mo
27.3125 81.7451 li
26.9741 83.4277 li
26.7627 83.4277 li
26.7646 83.0039 26.7734 82.2573 25.6699 82.2573 cv
23.2173 82.2573 li
24.6904 85.1338 li
21.2407 88.1987 li
24.5078 88.1987 li
25.2217 88.1987 25.6763 88.042 26.2988 86.9614 cv
26.5225 86.9614 li
25.4995 89.2461 li
19.3999 89.2461 li
23.5059 85.6016 li
21.5366 81.7451 li
cp
f
30.0361 82.8027 mo
30.2925 82.1152 30.4204 81.4561 30.4204 80.8281 cv
30.4204 80.6094 30.3975 80.4341 30.3511 80.3003 cv
30.2661 80.0469 30.1064 79.9199 29.8706 79.9199 cv
29.4365 79.9199 29.0684 80.3872 28.7671 81.3232 cv
28.5386 82.0391 28.4233 82.6343 28.4233 83.1113 cv
28.4233 83.3115 28.4473 83.4805 28.4937 83.6157 cv
28.583 83.8779 28.7461 84.0093 28.9839 84.0093 cv
29.3887 84.0093 29.7397 83.6069 30.0361 82.8027 cv
cp
30.7603 80.3418 mo
30.877 80.606 30.9351 80.9146 30.9351 81.2656 cv
30.9351 82.041 30.731 82.7222 30.3228 83.3105 cv
29.9204 83.8862 29.4668 84.1743 28.96 84.1743 cv
28.666 84.1743 28.417 84.0493 28.2139 83.7988 cv
28.0112 83.5469 27.9092 83.2007 27.9092 82.7583 cv
27.9092 82.0195 28.1094 81.3345 28.5098 80.7036 cv
28.9204 80.0581 29.3774 79.7358 29.8809 79.7358 cv
30.2876 79.7358 30.5811 79.9375 30.7603 80.3418 cv
cp
f
30.1084 88.1055 mo
30.2559 88.2539 30.3291 88.3994 30.3291 88.54 cv
30.3291 88.668 30.2905 88.7666 30.2144 88.8379 cv
30.1382 88.9072 30.0488 88.9429 29.9448 88.9429 cv
29.8442 88.9429 29.7598 88.9116 29.6919 88.8491 cv
29.624 88.7866 29.5903 88.7085 29.5903 88.6162 cv
29.5903 88.5454 29.6118 88.4697 29.6572 88.3882 cv
29.7021 88.3062 29.7251 88.2529 29.7251 88.229 cv
29.7251 88.1792 29.6963 88.1382 29.6406 88.104 cv
29.5854 88.0693 29.4961 88.0532 29.374 88.0532 cv
28.9355 88.0532 28.5557 88.3022 28.2324 88.8008 cv
27.9102 89.2998 27.7485 89.8223 27.7485 90.3701 cv
27.7485 90.6782 27.8145 90.9189 27.9443 91.0942 cv
28.0757 91.2686 28.2715 91.356 28.5327 91.356 cv
28.7427 91.356 28.9453 91.2954 29.1431 91.1738 cv
29.3394 91.0532 29.5215 90.8984 29.6875 90.7104 cv
29.7173 90.6782 li
29.835 90.7681 li
29.645 91.0098 29.4604 91.1968 29.2837 91.3271 cv
28.9702 91.5527 28.624 91.666 28.2422 91.666 cv
27.8774 91.666 27.5825 91.5493 27.3569 91.3169 cv
27.1309 91.0845 27.0181 90.7666 27.0181 90.3633 cv
27.0181 89.7466 27.2695 89.1768 27.7734 88.6577 cv
28.2715 88.1401 28.8105 87.8813 29.3901 87.8813 cv
29.7222 87.8813 29.9614 87.9561 30.1084 88.1055 cv
cp
f
1.095 lw
1 lj
59.1758 55.1665 mo
80.2451 70.4399 li
112.463 57.1743 li
@
.5475 lw
84.0356 22.1685 mo
72.8872 167.094 li
@
2 lw
0 lj
10 ml
83.4292 108.358 mo
80.1401 108.358 li
80.6216 106.552 li
80.79 106.552 li
80.7778 107.099 80.8755 107.232 81.3438 107.232 cv
83.1055 107.232 li
83.1655 106.92 li
82.376 106.664 81.9067 106.374 81.6289 105.706 cv
81.1548 104.557 81.6367 103.252 82.3281 102.417 cv
82.9907 101.603 83.5801 101.358 83.9297 101.18 cv
84.522 100.879 85.3096 100.688 86.1011 100.688 cv
86.8926 100.688 87.5781 100.879 88.0103 101.18 cv
88.2637 101.358 88.7227 101.603 88.9512 102.417 cv
89.1963 103.252 88.9819 104.557 87.895 105.706 cv
87.2588 106.374 86.6357 106.664 85.709 106.92 cv
85.6035 107.232 li
87.3647 107.232 li
87.833 107.232 88.0024 107.099 88.2827 106.552 cv
88.4497 106.552 li
87.9678 108.358 li
84.6782 108.358 li
85.3086 106.664 li
85.7065 106.507 86.2603 106.396 86.9644 105.394 cv
87.5576 104.545 88.1948 102.617 87.4673 101.625 cv
87.1323 101.168 86.5747 101.046 86.0059 101.046 cv
85.4365 101.046 84.813 101.168 84.2339 101.625 cv
82.9771 102.617 82.5845 104.545 82.7261 105.394 cv
82.894 106.396 83.3882 106.507 83.7031 106.664 cv
83.4292 108.358 li
cp
0 0 0 0 cmyk
@
91.8457 101.915 mo
92.1025 101.227 92.231 100.568 92.231 99.9399 cv
92.231 99.7222 92.2075 99.5459 92.1611 99.4121 cv
92.0767 99.1587 91.916 99.0322 91.6812 99.0322 cv
91.2461 99.0322 90.8789 99.4995 90.5776 100.435 cv
90.3481 101.151 90.2339 101.747 90.2339 102.223 cv
90.2339 102.424 90.2568 102.592 90.3042 102.728 cv
90.3931 102.99 90.5557 103.122 90.7939 103.122 cv
91.1982 103.122 91.5493 102.719 91.8457 101.915 cv
cp
92.5703 99.4541 mo
92.6875 99.7188 92.7451 100.027 92.7451 100.378 cv
92.7451 101.153 92.5405 101.834 92.1328 102.423 cv
91.7305 102.999 91.2759 103.287 90.7705 103.287 cv
90.4761 103.287 90.228 103.161 90.0239 102.91 cv
89.8208 102.659 89.7192 102.313 89.7192 101.871 cv
89.7192 101.132 89.9194 100.447 90.3193 99.8164 cv
90.73 99.1699 91.187 98.8477 91.6909 98.8477 cv
92.0981 98.8477 92.3906 99.0498 92.5703 99.4541 cv
cp
@
91.4541 107.218 mo
91.6011 107.367 91.6743 107.513 91.6743 107.653 cv
91.6743 107.78 91.6367 107.88 91.5601 107.95 cv
91.4844 108.021 91.394 108.056 91.29 108.056 cv
91.1895 108.056 91.105 108.024 91.0376 107.962 cv
90.9697 107.899 90.9355 107.822 90.9355 107.729 cv
90.9355 107.658 90.9575 107.582 91.0029 107.5 cv
91.0479 107.418 91.0693 107.366 91.0693 107.341 cv
91.0693 107.292 91.0425 107.251 90.9863 107.217 cv
90.9302 107.183 90.8408 107.165 90.7183 107.165 cv
90.2803 107.165 89.8999 107.415 89.5781 107.914 cv
89.2554 108.412 89.0942 108.935 89.0942 109.483 cv
89.0942 109.792 89.1592 110.033 89.2896 110.207 cv
89.4209 110.381 89.6162 110.468 89.8779 110.468 cv
90.0874 110.468 90.29 110.408 90.4888 110.286 cv
90.6855 110.166 90.8672 110.011 91.0342 109.823 cv
91.0615 109.791 li
91.1802 109.88 li
90.9893 110.123 90.8057 110.309 90.6294 110.44 cv
90.3159 110.666 89.9697 110.779 89.5884 110.779 cv
89.2236 110.779 88.9282 110.663 88.7026 110.429 cv
88.4756 110.197 88.3628 109.879 88.3628 109.476 cv
88.3628 108.858 88.6147 108.29 89.1187 107.77 cv
89.6162 107.253 90.1558 106.994 90.7349 106.994 cv
91.0669 106.994 91.3071 107.068 91.4541 107.218 cv
cp
@
83.4292 108.358 mo
80.1401 108.358 li
80.6216 106.552 li
80.79 106.552 li
80.7778 107.099 80.8755 107.232 81.3438 107.232 cv
83.1055 107.232 li
83.1655 106.92 li
82.376 106.664 81.9067 106.374 81.6289 105.706 cv
81.1548 104.557 81.6367 103.252 82.3281 102.417 cv
82.9907 101.603 83.5801 101.358 83.9297 101.18 cv
84.522 100.879 85.3096 100.688 86.1011 100.688 cv
86.8926 100.688 87.5781 100.879 88.0103 101.18 cv
88.2637 101.358 88.7227 101.603 88.9512 102.417 cv
89.1963 103.252 88.9819 104.557 87.895 105.706 cv
87.2588 106.374 86.6357 106.664 85.709 106.92 cv
85.6035 107.232 li
87.3647 107.232 li
87.833 107.232 88.0024 107.099 88.2827 106.552 cv
88.4497 106.552 li
87.9678 108.358 li
84.6782 108.358 li
85.3086 106.664 li
85.7065 106.507 86.2603 106.396 86.9644 105.394 cv
87.5576 104.545 88.1948 102.617 87.4673 101.625 cv
87.1323 101.168 86.5747 101.046 86.0059 101.046 cv
85.4365 101.046 84.813 101.168 84.2339 101.625 cv
82.9771 102.617 82.5845 104.545 82.7261 105.394 cv
82.894 106.396 83.3882 106.507 83.7031 106.664 cv
83.4292 108.358 li
cp
0 0 0 1 cmyk
f
91.8457 101.915 mo
92.1025 101.227 92.231 100.568 92.231 99.9399 cv
92.231 99.7222 92.2075 99.5459 92.1611 99.4121 cv
92.0767 99.1587 91.916 99.0322 91.6812 99.0322 cv
91.2461 99.0322 90.8789 99.4995 90.5776 100.435 cv
90.3481 101.151 90.2339 101.747 90.2339 102.223 cv
90.2339 102.424 90.2568 102.592 90.3042 102.728 cv
90.3931 102.99 90.5557 103.122 90.7939 103.122 cv
91.1982 103.122 91.5493 102.719 91.8457 101.915 cv
cp
92.5703 99.4541 mo
92.6875 99.7188 92.7451 100.027 92.7451 100.378 cv
92.7451 101.153 92.5405 101.834 92.1328 102.423 cv
91.7305 102.999 91.2759 103.287 90.7705 103.287 cv
90.4761 103.287 90.228 103.161 90.0239 102.91 cv
89.8208 102.659 89.7192 102.313 89.7192 101.871 cv
89.7192 101.132 89.9194 100.447 90.3193 99.8164 cv
90.73 99.1699 91.187 98.8477 91.6909 98.8477 cv
92.0981 98.8477 92.3906 99.0498 92.5703 99.4541 cv
cp
f
91.4541 107.218 mo
91.6011 107.367 91.6743 107.513 91.6743 107.653 cv
91.6743 107.78 91.6367 107.88 91.5601 107.95 cv
91.4844 108.021 91.394 108.056 91.29 108.056 cv
91.1895 108.056 91.105 108.024 91.0376 107.962 cv
90.9697 107.899 90.9355 107.822 90.9355 107.729 cv
90.9355 107.658 90.9575 107.582 91.0029 107.5 cv
91.0479 107.418 91.0693 107.366 91.0693 107.341 cv
91.0693 107.292 91.0425 107.251 90.9863 107.217 cv
90.9302 107.183 90.8408 107.165 90.7183 107.165 cv
90.2803 107.165 89.8999 107.415 89.5781 107.914 cv
89.2554 108.412 89.0942 108.935 89.0942 109.483 cv
89.0942 109.792 89.1592 110.033 89.2896 110.207 cv
89.4209 110.381 89.6162 110.468 89.8779 110.468 cv
90.0874 110.468 90.29 110.408 90.4888 110.286 cv
90.6855 110.166 90.8672 110.011 91.0342 109.823 cv
91.0615 109.791 li
91.1802 109.88 li
90.9893 110.123 90.8057 110.309 90.6294 110.44 cv
90.3159 110.666 89.9697 110.779 89.5884 110.779 cv
89.2236 110.779 88.9282 110.663 88.7026 110.429 cv
88.4756 110.197 88.3628 109.879 88.3628 109.476 cv
88.3628 108.858 88.6147 108.29 89.1187 107.77 cv
89.6162 107.253 90.1558 106.994 90.7349 106.994 cv
91.0669 106.994 91.3071 107.068 91.4541 107.218 cv
cp
f
163.977 2.61182 mo
164.477 1.98291 165.067 1.47705 165.747 1.09424 cv
165.858 1.2876 li
165.229 1.7876 164.78 2.27393 164.51 2.74658 cv
164.038 3.5708 163.801 4.66846 163.801 6.03955 cv
163.801 7.05518 163.891 7.89307 164.071 8.55322 cv
164.387 9.70947 164.983 10.5747 165.858 11.1489 cv
165.706 11.3423 li
165.225 11.1118 164.706 10.6606 164.147 9.98877 cv
163.221 8.87549 162.758 7.60986 162.758 6.19189 cv
162.758 4.83252 163.165 3.63916 163.977 2.61182 cv
cp
f
168.475 8.77881 mo
168.744 8.8667 168.979 8.91064 169.181 8.91064 cv
169.726 8.91064 170.129 8.70605 170.392 8.29639 cv
170.655 7.88672 170.786 7.39111 170.786 6.81006 cv
170.786 6.22852 170.663 5.69141 170.418 5.19775 cv
170.173 4.70459 169.776 4.45752 169.228 4.45752 cv
168.952 4.45752 168.681 4.54248 168.417 4.71191 cv
168.152 4.88184 168.02 5.09717 168.02 5.35889 cv
168.02 8.34326 li
168.055 8.5459 168.207 8.69141 168.475 8.77881 cv
cp
166.245 1.75049 mo
166.245 1.55127 li
166.692 1.44971 167.093 1.33643 167.45 1.21143 cv
167.806 1.08643 167.999 1.02393 168.026 1.02393 cv
168.034 1.04736 168.038 1.0708 168.038 1.09424 cv
168.038 4.66211 li
168.139 4.4751 168.292 4.29736 168.494 4.12939 cv
168.853 3.83643 169.266 3.68994 169.734 3.68994 cv
170.307 3.68994 170.797 3.93213 171.203 4.4165 cv
171.608 4.90088 171.811 5.52979 171.811 6.30322 cv
171.811 7.13135 171.547 7.84033 171.02 8.43018 cv
170.493 9.02002 169.799 9.31494 168.94 9.31494 cv
168.506 9.31494 168.081 9.229 167.663 9.05713 cv
167.245 8.88525 167.036 8.71338 167.036 8.5415 cv
167.036 2.34814 li
167.036 2.12158 167.004 1.96045 166.942 1.86475 cv
166.879 1.76904 166.735 1.72119 166.508 1.72119 cv
166.245 1.75049 li
cp
f
175.391 7.90283 mo
175.239 8.42236 175.016 8.9126 174.723 9.37354 cv
174.415 9.86572 174.002 10.3247 173.487 10.7505 cv
173.147 11.0317 172.862 11.229 172.631 11.3423 cv
172.52 11.1489 li
173.122 10.6919 173.561 10.2251 173.838 9.74854 cv
174.331 8.90479 174.577 7.78955 174.577 6.40283 cv
174.577 5.28174 174.463 4.36572 174.237 3.65479 cv
173.92 2.65088 173.348 1.86182 172.52 1.2876 cv
172.672 1.09424 li
173.29 1.43799 173.864 1.95752 174.395 2.65283 cv
175.211 3.72314 175.62 4.92236 175.62 6.25049 cv
175.62 6.83252 175.543 7.3833 175.391 7.90283 cv
cp
f
243.665 181.511 mo
242.506 181.511 241.569 182.451 241.569 183.607 cv
241.569 184.765 242.506 185.705 243.665 185.705 cv
244.823 185.705 245.76 184.765 245.76 183.607 cv
245.76 182.451 244.823 181.511 243.665 181.511 cv
f
.4 lw
1 lj
4 ml
243.632 183.583 mo
247.28 136.169 li
@
.6 lw
243.725 183.863 mo
215.106 148.622 li
@
243.758 183.83 mo
268.362 151.036 li
@
215.299 146.753 mo
214.141 146.753 213.204 147.691 213.204 148.849 cv
213.204 150.007 214.141 150.945 215.299 150.945 cv
216.458 150.945 217.395 150.007 217.395 148.849 cv
217.395 147.691 216.458 146.753 215.299 146.753 cv
f
274.854 151.305 mo
275.055 151.305 li
274.946 151.84 275.078 151.93 275.468 151.93 cv
277.754 151.93 li
278.145 151.93 278.325 151.84 278.5 151.305 cv
278.702 151.305 li
278.085 153.615 li
277.884 153.615 li
277.995 153.079 277.862 152.99 277.471 152.99 cv
275.185 152.99 li
274.794 152.99 274.615 153.079 274.438 153.615 cv
274.237 153.615 li
274.854 151.305 li
cp
274.549 148.895 mo
280.293 148.895 li
279.843 150.58 li
279.666 150.58 li
279.685 150.379 279.835 149.898 279.099 149.898 cv
275.207 149.898 li
274.47 149.898 274.365 150.379 274.278 150.58 cv
274.099 150.58 li
274.549 148.895 li
cp
272.877 154.24 mo
273.077 154.24 li
272.975 154.999 272.944 155.367 273.747 155.367 cv
277.639 155.367 li
278.444 155.367 278.608 154.999 278.911 154.24 cv
279.112 154.24 li
278.535 156.405 li
272.299 156.405 li
272.877 154.24 li
cp
f
284.295 147.323 mo
284.295 149.292 li
286.281 149.292 li
286.281 149.752 li
284.295 149.752 li
284.295 151.788 li
283.834 151.788 li
283.834 149.752 li
281.849 149.752 li
281.849 149.292 li
283.834 149.292 li
283.834 147.323 li
284.295 147.323 li
cp
f
282.637 155.314 mo
282.785 155.463 282.858 155.609 282.858 155.75 cv
282.858 155.877 282.82 155.977 282.744 156.046 cv
282.667 156.118 282.578 156.153 282.474 156.153 cv
282.373 156.153 282.289 156.122 282.22 156.059 cv
282.152 155.996 282.118 155.918 282.118 155.826 cv
282.118 155.755 282.14 155.679 282.185 155.597 cv
282.231 155.515 282.253 155.462 282.253 155.438 cv
282.253 155.389 282.225 155.347 282.169 155.313 cv
282.114 155.279 282.024 155.262 281.902 155.262 cv
281.462 155.262 281.083 155.512 280.759 156.011 cv
280.436 156.51 280.275 157.034 280.275 157.583 cv
280.275 157.89 280.34 158.131 280.471 158.306 cv
280.602 158.481 280.798 158.568 281.06 158.568 cv
281.269 158.568 281.473 158.507 281.67 158.386 cv
281.868 158.265 282.05 158.111 282.216 157.922 cv
282.245 157.89 li
282.364 157.98 li
282.172 158.222 281.989 158.409 281.812 158.54 cv
281.499 158.766 281.151 158.878 280.769 158.878 cv
280.404 158.878 280.109 158.762 279.882 158.53 cv
279.657 158.296 279.543 157.978 279.543 157.575 cv
279.543 156.957 279.795 156.387 280.299 155.867 cv
280.798 155.349 281.337 155.09 281.917 155.09 cv
282.25 155.09 282.49 155.165 282.637 155.314 cv
cp
f
258.89 133.354 mo
259.01 134.158 259.592 134.19 259.715 134.19 cv
259.663 134.392 li
256.627 134.392 li
256.682 134.19 li
256.917 134.19 257.752 134.146 257.637 133.287 cv
257.012 128.856 li
254.208 133.264 li
253.614 134.19 254.161 134.19 254.596 134.19 cv
254.542 134.392 li
252.145 134.392 li
252.198 134.19 li
252.399 134.19 253.196 134.001 253.597 133.376 cv
257.875 126.713 li
258.89 133.354 li
cp
f
262.253 124.841 mo
262.253 126.81 li
264.239 126.81 li
264.239 127.271 li
262.253 127.271 li
262.253 129.306 li
261.792 129.306 li
261.792 127.271 li
259.807 127.271 li
259.807 126.81 li
261.792 126.81 li
261.792 124.841 li
262.253 124.841 li
cp
f
263.767 132.582 mo
263.915 132.731 263.988 132.876 263.988 133.018 cv
263.988 133.145 263.95 133.244 263.874 133.314 cv
263.797 133.385 263.708 133.42 263.604 133.42 cv
263.502 133.42 263.418 133.389 263.35 133.327 cv
263.282 133.264 263.248 133.186 263.248 133.094 cv
263.248 133.023 263.27 132.946 263.315 132.865 cv
263.361 132.783 263.383 132.73 263.383 132.705 cv
263.383 132.656 263.355 132.615 263.299 132.581 cv
263.244 132.546 263.154 132.53 263.032 132.53 cv
262.592 132.53 262.212 132.779 261.889 133.278 cv
261.566 133.778 261.405 134.301 261.405 134.85 cv
261.405 135.158 261.47 135.399 261.601 135.574 cv
261.732 135.749 261.928 135.836 262.19 135.836 cv
262.399 135.836 262.603 135.775 262.8 135.654 cv
262.998 135.533 263.18 135.378 263.346 135.19 cv
263.375 135.157 li
263.494 135.247 li
263.302 135.49 263.119 135.676 262.942 135.807 cv
262.628 136.033 262.281 136.146 261.899 136.146 cv
261.534 136.146 261.239 136.03 261.012 135.797 cv
260.787 135.564 260.673 135.246 260.673 134.843 cv
260.673 134.224 260.925 133.655 261.429 133.134 cv
261.928 132.617 262.467 132.358 263.047 132.358 cv
263.38 132.358 263.62 132.433 263.767 132.582 cv
cp
f
212.051 142.32 mo
212.248 142.697 212.28 142.984 212.28 143.4 cv
212.28 143.713 212.234 144.038 212.149 144.338 cv
212.026 144.832 211.804 145.307 211.478 145.698 cv
211.167 146.069 210.698 146.408 210.189 146.408 cv
209.787 146.408 209.46 146.18 209.271 145.828 cv
209.102 145.529 209.038 145.132 209.038 144.787 cv
209.038 144.494 209.071 144.247 209.128 143.96 cv
209.324 143.042 210.027 141.72 211.108 141.72 cv
211.55 141.72 211.856 141.936 212.051 142.32 cv
cp
210.366 142.528 mo
210.203 142.795 210.085 143.055 209.995 143.348 cv
209.812 143.915 209.642 144.682 209.642 145.268 cv
209.642 145.652 209.727 146.154 210.222 146.154 cv
211.1 146.154 211.589 143.96 211.641 143.29 cv
211.655 143.133 211.667 142.977 211.667 142.821 cv
211.667 142.443 211.57 141.955 211.1 141.955 cv
210.75 141.955 210.529 142.254 210.366 142.528 cv
0 0 0 0 cmyk
f
2 lw
0 lj
212.051 142.32 mo
212.248 142.697 212.28 142.984 212.28 143.4 cv
212.28 143.713 212.234 144.038 212.149 144.338 cv
212.026 144.832 211.804 145.307 211.478 145.698 cv
211.167 146.069 210.698 146.408 210.189 146.408 cv
209.787 146.408 209.46 146.18 209.271 145.828 cv
209.102 145.529 209.038 145.132 209.038 144.787 cv
209.038 144.494 209.071 144.247 209.128 143.96 cv
209.324 143.042 210.027 141.72 211.108 141.72 cv
211.55 141.72 211.856 141.936 212.051 142.32 cv
cp
210.366 142.528 mo
210.203 142.795 210.085 143.055 209.995 143.348 cv
209.812 143.915 209.642 144.682 209.642 145.268 cv
209.642 145.652 209.727 146.154 210.222 146.154 cv
211.1 146.154 211.589 143.96 211.641 143.29 cv
211.655 143.133 211.667 142.977 211.667 142.821 cv
211.667 142.443 211.57 141.955 211.1 141.955 cv
210.75 141.955 210.529 142.254 210.366 142.528 cv
cp
@
211.238 144.975 mo
211.494 144.286 211.623 143.627 211.623 142.998 cv
211.623 142.78 211.599 142.604 211.552 142.47 cv
211.467 142.216 211.307 142.089 211.072 142.089 cv
210.636 142.089 210.268 142.557 209.967 143.494 cv
209.738 144.21 209.624 144.807 209.624 145.283 cv
209.624 145.485 209.647 145.653 209.693 145.789 cv
209.783 146.052 209.946 146.183 210.183 146.183 cv
210.589 146.183 210.94 145.78 211.238 144.975 cv
cp
211.962 142.512 mo
212.08 142.776 212.137 143.085 212.137 143.437 cv
212.137 144.212 211.933 144.895 211.524 145.483 cv
211.122 146.06 210.667 146.348 210.161 146.348 cv
209.866 146.348 209.617 146.223 209.414 145.972 cv
209.209 145.72 209.108 145.374 209.108 144.931 cv
209.108 144.191 209.308 143.505 209.709 142.874 cv
210.12 142.228 210.578 141.904 211.083 141.904 cv
211.489 141.904 211.783 142.107 211.962 142.512 cv
cp
0 0 0 1 cmyk
f
210.089 150.285 mo
210.237 150.434 210.31 150.579 210.31 150.72 cv
210.31 150.848 210.272 150.947 210.196 151.017 cv
210.12 151.088 210.03 151.123 209.926 151.123 cv
209.825 151.123 209.741 151.092 209.672 151.029 cv
209.604 150.966 209.57 150.889 209.57 150.796 cv
209.57 150.726 209.592 150.649 209.637 150.567 cv
209.683 150.485 209.706 150.433 209.706 150.408 cv
209.706 150.359 209.677 150.317 209.622 150.283 cv
209.566 150.249 209.476 150.232 209.354 150.232 cv
208.915 150.232 208.535 150.482 208.211 150.981 cv
207.888 151.48 207.727 152.004 207.727 152.552 cv
207.727 152.861 207.792 153.102 207.923 153.276 cv
208.054 153.451 208.25 153.539 208.512 153.539 cv
208.721 153.539 208.925 153.478 209.123 153.356 cv
209.32 153.235 209.502 153.081 209.668 152.893 cv
209.697 152.86 li
209.816 152.95 li
209.625 153.192 209.441 153.379 209.264 153.51 cv
208.951 153.736 208.603 153.849 208.221 153.849 cv
207.856 153.849 207.561 153.732 207.334 153.5 cv
207.109 153.267 206.996 152.949 206.996 152.545 cv
206.996 151.927 207.248 151.357 207.751 150.837 cv
208.25 150.319 208.79 150.061 209.37 150.061 cv
209.703 150.061 209.942 150.135 210.089 150.285 cv
cp
f
202.186 146.639 mo
202.387 146.639 li
202.278 147.173 202.411 147.263 202.801 147.263 cv
205.086 147.263 li
205.477 147.263 205.658 147.173 205.833 146.639 cv
206.035 146.639 li
205.418 148.948 li
205.217 148.948 li
205.327 148.413 205.194 148.324 204.803 148.324 cv
202.518 148.324 li
202.127 148.324 201.947 148.413 201.771 148.948 cv
201.57 148.948 li
202.186 146.639 li
cp
201.881 144.228 mo
207.625 144.228 li
207.176 145.913 li
206.999 145.913 li
207.018 145.712 207.168 145.232 206.432 145.232 cv
202.54 145.232 li
201.803 145.232 201.698 145.712 201.61 145.913 cv
201.432 145.913 li
201.881 144.228 li
cp
200.209 149.573 mo
200.41 149.573 li
200.307 150.333 200.277 150.7 201.08 150.7 cv
204.972 150.7 li
205.776 150.7 205.94 150.333 206.244 149.573 cv
206.445 149.573 li
205.867 151.738 li
199.631 151.738 li
200.209 149.573 li
cp
f
201.811 176.112 mo
202.311 175.483 202.901 174.977 203.581 174.594 cv
203.692 174.788 li
203.063 175.288 202.614 175.774 202.344 176.247 cv
201.872 177.071 201.635 178.168 201.635 179.54 cv
201.635 180.555 201.725 181.393 201.905 182.053 cv
202.221 183.209 202.817 184.075 203.692 184.649 cv
203.54 184.842 li
203.059 184.612 202.54 184.161 201.981 183.489 cv
201.055 182.375 200.592 181.11 200.592 179.692 cv
200.592 178.333 200.999 177.139 201.811 176.112 cv
cp
f
208.283 177.555 mo
208.636 177.806 208.813 178.082 208.813 178.381 cv
208.813 178.509 208.768 178.629 208.678 178.741 cv
208.588 178.851 208.45 178.907 208.262 178.907 cv
208.125 178.907 208.005 178.86 207.902 178.766 cv
207.798 178.672 207.723 178.536 207.676 178.356 cv
207.606 178.075 li
207.555 177.868 207.467 177.721 207.342 177.635 cv
207.213 177.553 207.043 177.512 206.833 177.512 cv
206.387 177.512 206.011 177.707 205.705 178.096 cv
205.398 178.485 205.245 179.002 205.245 179.648 cv
205.245 180.239 205.414 180.768 205.751 181.238 cv
206.089 181.708 206.545 181.942 207.12 181.942 cv
207.526 181.942 207.887 181.809 208.204 181.542 cv
208.383 181.39 208.586 181.147 208.813 180.815 cv
208.977 180.915 li
208.754 181.383 208.52 181.755 208.274 182.029 cv
207.801 182.553 207.254 182.815 206.633 182.815 cv
206.024 182.815 205.485 182.575 205.016 182.094 cv
204.547 181.614 204.313 180.961 204.313 180.137 cv
204.313 179.329 204.569 178.633 205.081 178.051 cv
205.592 177.469 206.239 177.178 207.02 177.178 cv
207.508 177.178 207.929 177.304 208.283 177.555 cv
cp
f
212.551 181.403 mo
212.399 181.922 212.176 182.413 211.883 182.874 cv
211.575 183.366 211.163 183.825 210.647 184.25 cv
210.307 184.532 210.022 184.729 209.792 184.842 cv
209.68 184.649 li
210.282 184.192 210.721 183.725 210.999 183.249 cv
211.491 182.405 211.737 181.29 211.737 179.903 cv
211.737 178.782 211.624 177.866 211.397 177.155 cv
211.081 176.151 210.508 175.362 209.68 174.788 cv
209.833 174.594 li
210.45 174.938 211.024 175.458 211.555 176.153 cv
212.372 177.223 212.78 178.422 212.78 179.75 cv
212.78 180.333 212.704 180.883 212.551 181.403 cv
cp
f
252.724 187.437 mo
252.844 188.241 253.426 188.274 253.549 188.274 cv
253.496 188.474 li
250.461 188.474 li
250.515 188.274 li
250.75 188.274 251.586 188.229 251.47 187.37 cv
250.846 182.939 li
248.042 187.347 li
247.448 188.274 247.995 188.274 248.429 188.274 cv
248.375 188.474 li
245.978 188.474 li
246.032 188.274 li
246.232 188.274 247.03 188.083 247.431 187.459 cv
251.708 180.796 li
252.724 187.437 li
cp
f
215.321 148.847 mo
247.573 135.566 li
268.665 150.856 li
215.321 148.847 li
0 0 0 0 cmyk
f
215.321 148.847 mo
247.573 135.566 li
268.665 150.856 li
215.321 148.847 li
cp
0 .11 .42 0 cmyk
f
.5 lw
215.321 148.847 mo
247.573 135.566 li
268.665 150.856 li
215.321 148.847 li
cp
0 0 0 1 cmyk
@
1 lw
1 lj
215.563 148.813 mo
268.665 150.856 li
@
268.309 148.729 mo
267.152 148.729 266.213 149.668 266.213 150.825 cv
266.213 151.983 267.152 152.922 268.309 152.922 cv
269.466 152.922 270.406 151.983 270.406 150.825 cv
270.406 149.668 269.466 148.729 268.309 148.729 cv
f
247.384 133.5 mo
246.226 133.5 245.289 134.439 245.289 135.597 cv
245.289 136.754 246.226 137.693 247.384 137.693 cv
248.542 137.693 249.48 136.754 249.48 135.597 cv
249.48 134.439 248.542 133.5 247.384 133.5 cv
f
50.874 2.61133 mo
51.374 1.98242 51.9639 1.47656 52.6436 1.09375 cv
52.7549 1.28711 li
52.126 1.78711 51.6768 2.27344 51.4072 2.74609 cv
50.9346 3.57031 50.6982 4.66797 50.6982 6.03906 cv
50.6982 7.05469 50.7881 7.89258 50.9678 8.55273 cv
51.2842 9.70898 51.8799 10.5742 52.7549 11.1484 cv
52.6025 11.3418 li
52.1221 11.1113 51.6025 10.6602 51.0439 9.98828 cv
50.1182 8.875 49.6553 7.60938 49.6553 6.19141 cv
49.6553 4.83203 50.0615 3.63867 50.874 2.61133 cv
cp
f
56.54 5.95703 mo
56.0908 6.10547 55.7197 6.26953 55.4268 6.44922 cv
54.8643 6.79688 54.583 7.19141 54.583 7.63281 cv
54.583 7.98828 54.7002 8.25 54.9346 8.41797 cv
55.0869 8.52734 55.2568 8.58203 55.4443 8.58203 cv
55.7021 8.58203 55.9492 8.50977 56.1855 8.36523 cv
56.4219 8.2207 56.54 8.03711 56.54 7.81445 cv
56.54 5.95703 li
cp
54.3896 6.61914 mo
54.749 6.38477 55.4658 6.06641 56.54 5.66406 cv
56.54 5.16602 li
56.54 4.76758 56.501 4.49023 56.4229 4.33398 cv
56.29 4.07227 56.0146 3.94141 55.5967 3.94141 cv
55.3975 3.94141 55.208 3.99219 55.0283 4.09375 cv
54.8486 4.19922 54.7588 4.34375 54.7588 4.52734 cv
54.7588 4.57422 54.7686 4.65332 54.7881 4.76465 cv
54.8076 4.87598 54.8174 4.94727 54.8174 4.97852 cv
54.8174 5.19727 54.7451 5.34961 54.6006 5.43555 cv
54.5186 5.48633 54.4209 5.51172 54.3076 5.51172 cv
54.1318 5.51172 53.9971 5.4541 53.9033 5.33887 cv
53.8096 5.22363 53.7627 5.0957 53.7627 4.95508 cv
53.7627 4.68164 53.9316 4.39551 54.2695 4.09668 cv
54.6074 3.79785 55.1025 3.64844 55.7549 3.64844 cv
56.5127 3.64844 57.0264 3.89453 57.2959 4.38672 cv
57.4404 4.65625 57.5127 5.04883 57.5127 5.56445 cv
57.5127 7.91406 li
57.5127 8.14063 57.5283 8.29688 57.5596 8.38281 cv
57.6104 8.53516 57.7158 8.61133 57.876 8.61133 cv
57.9658 8.61133 58.04 8.59766 58.0986 8.57031 cv
58.1572 8.54297 58.2588 8.47656 58.4033 8.37109 cv
58.4033 8.67578 li
58.2783 8.82813 58.1436 8.95313 57.999 9.05078 cv
57.7803 9.19922 57.5576 9.27344 57.3311 9.27344 cv
57.0654 9.27344 56.873 9.1875 56.7539 9.01563 cv
56.6348 8.84375 56.5693 8.63867 56.5576 8.40039 cv
56.2607 8.6582 56.0068 8.84961 55.7959 8.97461 cv
55.4404 9.18555 55.1025 9.29102 54.7822 9.29102 cv
54.4463 9.29102 54.1553 9.17285 53.9092 8.93652 cv
53.6631 8.7002 53.54 8.40039 53.54 8.03711 cv
53.54 7.4707 53.8232 6.99805 54.3896 6.61914 cv
cp
f
61.6143 7.90234 mo
61.4619 8.42188 61.2393 8.91211 60.9463 9.37305 cv
60.6377 9.86523 60.2256 10.3242 59.71 10.75 cv
59.3701 11.0313 59.085 11.2285 58.8545 11.3418 cv
58.7432 11.1484 li
59.3447 10.6914 59.7842 10.2246 60.0615 9.74805 cv
60.5537 8.9043 60.7998 7.78906 60.7998 6.40234 cv
60.7998 5.28125 60.6865 4.36523 60.46 3.6543 cv
60.1436 2.65039 59.5713 1.86133 58.7432 1.28711 cv
58.8955 1.09375 li
59.5127 1.4375 60.0869 1.95703 60.6182 2.65234 cv
61.4346 3.72266 61.8428 4.92188 61.8428 6.25 cv
61.8428 6.83203 61.7666 7.38281 61.6143 7.90234 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
