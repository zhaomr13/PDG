%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: radio-web-30.2.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/13/12
%%BoundingBox: 0 -10 326 339
%%HiResBoundingBox: 0 -10 325.4072 338.4502
%%CropBox: 0 -10 325.4072 338.4502
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.70</pdf:Producer>
         <pdf:CreationDate--Text>Thu Aug 20 16:01:10 2009</pdf:CreationDate--Text>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-13T17:50:20-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-13T17:50:20-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-13T17:50:20-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>248</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qw/yP59l80XV7btaJ&#xA;Zi0jUxyiVnFzV3T6xa8kT1LVuHwSdzUU6Eqsbm87+aUsrJ47tXm4Xs0KmOItfy22pi0W2AC9PScV&#xA;9OjciprQEEqjfMHlfUru28z2h0FryHV9VW4tWWS2Uxwtp9vbS3MQeRQswkgfgTQqWD9ajAr0SHn6&#xA;KeovCTiOacudDTccjSvzxVfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;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&#xA;v//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:A87957289E216811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A87957289E216811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>3308f7c6-89e8-11ec-0000-1a8b3c7c45d5</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:A77957289E216811808399C81683386A</stRef:instanceID>
            <stRef:documentID>xmp.did:A77957289E216811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>3308f7c6-89e8-11ec-0000-1a8b3c7c45d5</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A77957289E216811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-13T17:38:30-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A87957289E216811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-13T17:50:20-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">flxCNFe.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Stefan Roesler</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">gnuplot plot</rdf:li>
               <rdf:li xml:lang="x-repair">gnuplot plot</rdf:li>
            </rdf:Alt>
         </dc:description>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.736111</stDim:w>
            <stDim:h>4.930556</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=99 Y=64 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>99.197372</xmpG:magenta>
                           <xmpG:yellow>63.619434</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=66 M=0 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>66.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=78 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>78.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=55 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>84.594490</xmpG:cyan>
                           <xmpG:magenta>55.342941</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=99 Y=100 K=27 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>99.197372</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>26.999998</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=50 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=100 K=43 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>43.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=33 M=100 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>33.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=52 Y=0 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>52.144653</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -338.45 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 338.45 li
325.407 338.45 li
325.407 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.6 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
58.6982 304.577 mo
72.8833 292.223 75.8706 274.135 83.3354 254.282 cv
90.8013 234.429 101.253 196.046 116.932 181.928 cv
132.61 167.81 155.008 155.898 183.376 151.045 cv
211.746 146.192 245.343 141.78 319.253 140.456 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .991974 1 .27 cmyk
@
219.914 148.187 mo
226.183 148.187 231.265 147.209 231.265 146.004 cv
231.265 144.797 226.183 143.82 219.914 143.82 cv
213.646 143.82 208.564 144.797 208.564 146.004 cv
208.564 147.209 213.646 148.187 219.914 148.187 cv
0 0 0 0 cmyk
f
120.896 175.69 mo
132.445 165.19 150.602 152.728 187.358 146.045 cv
229.184 138.439 239.705 138.989 321.244 136.339 cv
0 .35 1 0 cmyk
@
55.7124 304.577 mo
64.6714 299.723 65.4185 286.488 67.6572 275.017 cv
69.8975 263.547 90.8013 106.927 113.945 76.4849 cv
137.089 46.043 153.141 21.5571 321.866 18.9102 cv
1 0 0 0 cmyk
@
[4.8 2.4 ] 0 dsh
60.5654 304.136 mo
74.0034 292.223 73.9863 284.031 78.4834 265.311 cv
82.1943 249.861 95.2456 188.59 116.695 163.09 cv
0 .521447 0 0 cmyk
@
[] 0 dsh
117.401 162.194 mo
120.002 159 119.929 158.207 125.518 153.251 cv
149.096 132.34 165.832 113.985 321.866 111.338 cv
@
57.9526 303.694 mo
68.4043 293.547 67.6572 294.429 73.6304 275.459 cv
79.6035 256.488 88.9355 219.207 103.121 193.178 cv
117.304 167.148 144.182 147.295 180.391 140.898 cv
216.476 134.522 255.049 132.074 320 130.75 cv
.845945 .553429 0 0 cmyk
@
[4.8 2.4 ] 0 dsh
56.9565 304.577 mo
65.9155 298.694 72.0605 281.849 81.3452 254.282 cv
91.5483 223.987 101.545 196.99 113.696 183.104 cv
115.666 180.854 114.688 180.865 120.238 176.065 cv
0 .35 1 0 cmyk
@
[] 0 dsh
58.9473 304.871 mo
67.9063 300.165 71.3906 298.106 76.3672 286.635 cv
81.3452 275.165 98.7656 220.752 109.217 206.634 cv
119.669 192.516 140.573 172.516 168.943 163.986 cv
196.96 155.563 238.623 150.163 321.244 148.398 cv
1 0 .5 0 cmyk
@
70.2705 302.812 mo
70.2705 302.812 56.6875 307.827 69.8975 303.694 cv
72.7476 302.803 78.8687 297.6 83.3354 287.37 cv
89.3086 273.694 108.719 226.487 127.383 211.928 cv
146.049 197.369 177.404 184.575 205.774 181.045 cv
234.145 177.516 261.021 172.222 320.747 170.898 cv
0 0 1 .43 cmyk
@
73.2563 305.238 mo
83.7095 300.165 88.1885 293.768 98.6406 282.738 cv
109.092 271.708 126.264 251.855 147.541 243.914 cv
168.819 235.973 199.802 220.163 320.747 215.457 cv
.33 1 0 0 cmyk
@
75.8706 305.165 mo
87.3174 300.165 96.2764 290.165 106.23 283.694 cv
116.186 277.223 131.614 265.459 176.408 256.047 cv
221.203 246.634 275.952 243.399 320.747 242.223 cv
0 0 0 1 cmyk
@
78.8564 305.165 mo
96.7744 298.4 102.25 291.929 116.684 286.047 cv
131.116 280.165 150.527 269.282 192.335 263.4 cv
234.145 257.517 260.523 254.87 320.249 251.929 cv
.5 0 0 0 cmyk
@
90.8013 305.459 mo
114.692 298.106 134.601 290.459 156.997 284.576 cv
179.396 278.694 223.194 269.576 320.747 263.106 cv
.66 0 1 0 cmyk
@
99.2622 305.165 mo
129.624 301.047 136.591 299.577 161.976 295.165 cv
187.358 290.753 239.619 282.811 320.747 278.988 cv
0 .991974 .636194 0 cmyk
@
144.677 312.657 mo
141.801 316.721 li
144.677 316.721 li
144.677 312.657 li
cp
145.063 311.447 mo
145.62 311.447 li
145.62 316.721 li
146.845 316.721 li
146.845 317.5 li
145.62 317.5 li
145.62 319.498 li
144.688 319.498 li
144.688 317.5 li
141.313 317.5 li
141.313 316.721 li
145.063 311.447 li
cp
0 0 0 1 cmyk
f
151.232 318.333 mo
151.447 317.704 151.555 316.795 151.555 315.604 cv
151.555 314.656 151.49 313.899 151.361 313.333 cv
151.119 312.279 150.666 311.752 150.002 311.752 cv
149.338 311.752 148.883 312.294 148.637 313.379 cv
148.508 313.957 148.443 314.718 148.443 315.663 cv
148.443 316.549 148.51 317.257 148.643 317.788 cv
148.893 318.78 149.361 319.275 150.049 319.275 cv
150.623 319.275 151.018 318.961 151.232 318.333 cv
cp
152.123 312.848 mo
152.518 313.609 152.715 314.484 152.715 315.473 cv
152.715 316.25 152.594 316.982 152.352 317.67 cv
151.895 318.963 151.104 319.609 149.979 319.609 cv
149.209 319.609 148.576 319.26 148.08 318.561 cv
147.549 317.814 147.284 316.801 147.284 315.52 cv
147.284 314.512 147.461 313.645 147.816 312.918 cv
148.297 311.93 149.035 311.436 150.031 311.436 cv
150.93 311.436 151.627 311.906 152.123 312.848 cv
cp
f
203.673 315.9 mo
203.399 315.229 202.935 314.893 202.278 314.893 cv
201.673 314.893 201.271 315.072 201.071 315.432 cv
200.954 315.643 200.896 315.994 200.896 316.486 cv
200.896 317.123 201.031 317.746 201.303 318.355 cv
201.574 318.965 202.003 319.27 202.589 319.27 cv
203.054 319.27 203.392 319.071 203.603 318.675 cv
203.813 318.278 203.919 317.814 203.919 317.283 cv
203.919 316.764 203.837 316.303 203.673 315.9 cv
cp
204.303 318.766 mo
203.844 319.34 203.247 319.627 202.513 319.627 cv
201.825 319.627 201.199 319.305 200.635 318.66 cv
200.07 318.016 199.788 317.158 199.788 316.088 cv
199.788 314.709 200.335 313.525 201.429 312.537 cv
202.405 311.709 203.503 311.295 204.722 311.295 cv
204.751 311.488 li
204.263 311.578 203.842 311.7 203.488 311.854 cv
203.135 312.009 202.819 312.225 202.542 312.502 cv
202.257 312.783 201.989 313.141 201.739 313.574 cv
201.489 314.008 201.317 314.438 201.224 314.863 cv
201.466 314.715 201.675 314.605 201.851 314.535 cv
202.163 314.41 202.478 314.348 202.794 314.348 cv
203.415 314.348 203.937 314.563 204.358 314.992 cv
204.78 315.422 204.991 316.035 204.991 316.832 cv
204.991 317.547 204.762 318.191 204.303 318.766 cv
cp
f
209.433 318.333 mo
209.647 317.704 209.755 316.795 209.755 315.604 cv
209.755 314.656 209.69 313.899 209.562 313.333 cv
209.319 312.279 208.866 311.752 208.202 311.752 cv
207.538 311.752 207.083 312.294 206.837 313.379 cv
206.708 313.957 206.644 314.718 206.644 315.663 cv
206.644 316.549 206.71 317.257 206.843 317.788 cv
207.093 318.78 207.562 319.275 208.249 319.275 cv
208.823 319.275 209.218 318.961 209.433 318.333 cv
cp
210.323 312.848 mo
210.718 313.609 210.915 314.484 210.915 315.473 cv
210.915 316.25 210.794 316.982 210.552 317.67 cv
210.095 318.963 209.304 319.609 208.179 319.609 cv
207.409 319.609 206.776 319.26 206.28 318.561 cv
205.749 317.814 205.483 316.801 205.483 315.52 cv
205.483 314.512 205.661 313.645 206.017 312.918 cv
206.497 311.93 207.235 311.436 208.231 311.436 cv
209.13 311.436 209.827 311.906 210.323 312.848 cv
cp
f
259.384 312.657 mo
256.509 316.721 li
259.384 316.721 li
259.384 312.657 li
cp
259.771 311.447 mo
260.327 311.447 li
260.327 316.721 li
261.552 316.721 li
261.552 317.5 li
260.327 317.5 li
260.327 319.498 li
259.396 319.498 li
259.396 317.5 li
256.021 317.5 li
256.021 316.721 li
259.771 311.447 li
cp
f
265.94 318.333 mo
266.155 317.704 266.263 316.795 266.263 315.604 cv
266.263 314.656 266.198 313.899 266.069 313.333 cv
265.827 312.279 265.374 311.752 264.71 311.752 cv
264.046 311.752 263.591 312.294 263.345 313.379 cv
263.216 313.957 263.151 314.718 263.151 315.663 cv
263.151 316.549 263.218 317.257 263.351 317.788 cv
263.601 318.78 264.069 319.275 264.757 319.275 cv
265.331 319.275 265.726 318.961 265.94 318.333 cv
cp
266.831 312.848 mo
267.226 313.609 267.423 314.484 267.423 315.473 cv
267.423 316.25 267.302 316.982 267.06 317.67 cv
266.603 318.963 265.812 319.609 264.687 319.609 cv
263.917 319.609 263.284 319.26 262.788 318.561 cv
262.257 317.814 261.991 316.801 261.991 315.52 cv
261.991 314.512 262.169 313.645 262.524 312.918 cv
263.005 311.93 263.743 311.436 264.739 311.436 cv
265.638 311.436 266.335 311.906 266.831 312.848 cv
cp
f
311.447 311.491 mo
311.449 311.501 311.45 311.523 311.45 311.559 cv
311.45 318.613 li
311.45 318.914 311.53 319.105 311.691 319.188 cv
311.853 319.27 312.153 319.318 312.593 319.334 cv
312.593 319.498 li
309.282 319.498 li
309.282 319.322 li
309.755 319.299 310.063 319.234 310.208 319.129 cv
310.353 319.023 310.425 318.795 310.425 318.443 cv
310.425 313.018 li
310.425 312.83 310.401 312.688 310.354 312.59 cv
310.308 312.492 310.206 312.443 310.05 312.443 cv
309.948 312.443 309.816 312.472 309.654 312.528 cv
309.492 312.585 309.341 312.645 309.2 312.707 cv
309.2 312.543 li
311.351 311.447 li
311.421 311.447 li
311.437 311.467 311.445 311.481 311.447 311.491 cv
cp
f
317.925 318.333 mo
318.14 317.704 318.247 316.795 318.247 315.604 cv
318.247 314.656 318.183 313.899 318.054 313.333 cv
317.812 312.279 317.358 311.752 316.694 311.752 cv
316.03 311.752 315.575 312.294 315.329 313.379 cv
315.2 313.957 315.136 314.718 315.136 315.663 cv
315.136 316.549 315.202 317.257 315.335 317.788 cv
315.585 318.78 316.054 319.275 316.741 319.275 cv
317.315 319.275 317.71 318.961 317.925 318.333 cv
cp
318.815 312.848 mo
319.21 313.609 319.407 314.484 319.407 315.473 cv
319.407 316.25 319.286 316.982 319.044 317.67 cv
318.587 318.963 317.796 319.609 316.671 319.609 cv
315.901 319.609 315.269 319.26 314.772 318.561 cv
314.241 317.814 313.976 316.801 313.976 315.52 cv
313.976 314.512 314.153 313.645 314.509 312.918 cv
314.989 311.93 315.728 311.436 316.724 311.436 cv
317.622 311.436 318.319 311.906 318.815 312.848 cv
cp
f
323.925 318.333 mo
324.14 317.704 324.247 316.795 324.247 315.604 cv
324.247 314.656 324.183 313.899 324.054 313.333 cv
323.812 312.279 323.358 311.752 322.694 311.752 cv
322.03 311.752 321.575 312.294 321.329 313.379 cv
321.2 313.957 321.136 314.718 321.136 315.663 cv
321.136 316.549 321.202 317.257 321.335 317.788 cv
321.585 318.78 322.054 319.275 322.741 319.275 cv
323.315 319.275 323.71 318.961 323.925 318.333 cv
cp
324.815 312.848 mo
325.21 313.609 325.407 314.484 325.407 315.473 cv
325.407 316.25 325.286 316.982 325.044 317.67 cv
324.587 318.963 323.796 319.609 322.671 319.609 cv
321.901 319.609 321.269 319.26 320.772 318.561 cv
320.241 317.814 319.976 316.801 319.976 315.52 cv
319.976 314.512 320.153 313.645 320.509 312.918 cv
320.989 311.93 321.728 311.436 322.724 311.436 cv
323.622 311.436 324.319 311.906 324.815 312.848 cv
cp
f
16.4312 10.1338 mo
15.8452 10.7197 li
13.5513 8.42578 li
11.2573 10.7197 li
10.6714 10.1338 li
12.9653 7.83984 li
10.6714 5.5459 li
11.2573 4.95996 li
13.5513 7.25391 li
15.8452 4.95996 li
16.4312 5.5459 li
14.1372 7.83984 li
16.4312 10.1338 li
cp
f
23.3384 2.86523 mo
23.3403 2.875 23.3413 2.89746 23.3413 2.93262 cv
23.3413 9.9873 li
23.3413 10.2881 23.4219 10.4795 23.5825 10.5615 cv
23.7437 10.6436 24.0439 10.6924 24.4839 10.708 cv
24.4839 10.8721 li
21.1733 10.8721 li
21.1733 10.6963 li
21.646 10.6729 21.9546 10.6084 22.0991 10.5029 cv
22.2437 10.3975 22.3159 10.1689 22.3159 9.81738 cv
22.3159 4.3916 li
22.3159 4.2041 22.2925 4.06152 22.2456 3.96387 cv
22.1987 3.86621 22.0972 3.81738 21.9409 3.81738 cv
21.8394 3.81738 21.7075 3.8457 21.5454 3.90234 cv
21.3833 3.95898 21.2319 4.01855 21.0913 4.08105 cv
21.0913 3.91699 li
23.2417 2.82129 li
23.312 2.82129 li
23.3276 2.84082 23.3364 2.85547 23.3384 2.86523 cv
cp
f
29.8159 9.70703 mo
30.0308 9.07813 30.1382 8.16895 30.1382 6.97852 cv
30.1382 6.02979 30.0737 5.27295 29.9448 4.70703 cv
29.7026 3.65283 29.2495 3.12598 28.5854 3.12598 cv
27.9214 3.12598 27.4663 3.66846 27.2202 4.75342 cv
27.0913 5.33105 27.0269 6.09229 27.0269 7.03711 cv
27.0269 7.92285 27.0933 8.63135 27.2261 9.16211 cv
27.4761 10.1538 27.9448 10.6494 28.6323 10.6494 cv
29.2065 10.6494 29.6011 10.335 29.8159 9.70703 cv
cp
30.7065 4.22168 mo
31.1011 4.9834 31.2983 5.8584 31.2983 6.84668 cv
31.2983 7.62402 31.1772 8.35645 30.9351 9.04395 cv
30.478 10.3369 29.687 10.9834 28.562 10.9834 cv
27.7925 10.9834 27.1597 10.6338 26.6636 9.93457 cv
26.1323 9.18848 25.8667 8.1748 25.8667 6.89355 cv
25.8667 5.88574 26.0444 5.01855 26.3999 4.29199 cv
26.8804 3.30371 27.6187 2.80957 28.6147 2.80957 cv
29.5132 2.80957 30.2104 3.28027 30.7065 4.22168 cv
cp
f
35.5806 .065918 mo
35.5825 .074707 35.5835 .0947266 35.5835 .126465 cv
35.5835 6.47559 li
35.5835 6.74658 35.6558 6.91846 35.8008 6.99268 cv
35.9453 7.06641 36.2158 7.11035 36.6118 7.12451 cv
36.6118 7.27197 li
33.6323 7.27197 li
33.6323 7.11377 li
34.0576 7.09277 34.3354 7.03467 34.4653 6.93994 cv
34.5952 6.84473 34.6606 6.63916 34.6606 6.32275 cv
34.6606 1.43945 li
34.6606 1.271 34.6396 1.14258 34.5972 1.05469 cv
34.5552 .966797 34.4634 .922852 34.3232 .922852 cv
34.2314 .922852 34.1128 .948242 33.9673 .999023 cv
33.8213 1.05029 33.6851 1.104 33.5586 1.16016 cv
33.5586 1.01221 li
35.4937 .0263672 li
35.5571 .0263672 li
35.5708 .0439453 35.5791 .0571289 35.5806 .065918 cv
cp
f
38.083 7.15088 mo
39.3696 5.81543 40.2432 4.83545 40.7036 4.21045 cv
41.1646 3.58496 41.3945 2.97559 41.3945 2.38184 cv
41.3945 1.8623 41.2539 1.46631 40.9727 1.19385 cv
40.6914 .921875 40.356 .785645 39.9653 .785645 cv
39.4839 .785645 39.0938 .961426 38.7949 1.3125 cv
38.6294 1.50586 38.4712 1.80273 38.3203 2.20264 cv
38.0933 2.15527 li
38.269 1.34717 38.5674 .786133 38.9873 .47168 cv
39.4072 .157227 39.8584 0 40.3398 0 cv
40.9341 0 41.415 .187012 41.7822 .561035 cv
42.1494 .935059 42.3335 1.39258 42.3335 1.93359 cv
42.3335 2.50977 42.1348 3.06494 41.7373 3.59863 cv
41.3398 4.13281 40.4766 5.08301 39.147 6.44922 cv
41.5684 6.44922 li
41.9058 6.44922 42.1431 6.40918 42.2803 6.32813 cv
42.4175 6.24756 42.5723 6.05078 42.7446 5.73828 cv
42.8818 5.80127 li
42.2964 7.27197 li
38.083 7.27197 li
38.083 7.15088 li
cp
f
23.0015 306.818 mo
23.2163 306.189 23.3237 305.28 23.3237 304.089 cv
23.3237 303.141 23.2593 302.384 23.1304 301.818 cv
22.8882 300.764 22.4351 300.237 21.771 300.237 cv
21.1069 300.237 20.6519 300.779 20.4058 301.864 cv
20.2769 302.442 20.2124 303.203 20.2124 304.148 cv
20.2124 305.034 20.2788 305.742 20.4116 306.273 cv
20.6616 307.265 21.1304 307.76 21.8179 307.76 cv
22.3921 307.76 22.7866 307.446 23.0015 306.818 cv
cp
23.8921 301.333 mo
24.2866 302.094 24.4839 302.969 24.4839 303.958 cv
24.4839 304.735 24.3628 305.467 24.1206 306.155 cv
23.6636 307.448 22.8726 308.094 21.7476 308.094 cv
20.978 308.094 20.3452 307.745 19.8491 307.045 cv
19.3179 306.299 19.0522 305.286 19.0522 304.004 cv
19.0522 302.997 19.23 302.129 19.5854 301.403 cv
20.0659 300.415 20.8042 299.92 21.8003 299.92 cv
22.6987 299.92 23.396 300.391 23.8921 301.333 cv
cp
f
22.5239 218.357 mo
22.5259 218.367 22.5269 218.39 22.5269 218.425 cv
22.5269 225.479 li
22.5269 225.78 22.6074 225.972 22.7681 226.054 cv
22.9292 226.136 23.2295 226.185 23.6694 226.2 cv
23.6694 226.364 li
20.3589 226.364 li
20.3589 226.188 li
20.8315 226.165 21.1401 226.101 21.2847 225.995 cv
21.4292 225.89 21.5015 225.661 21.5015 225.31 cv
21.5015 219.884 li
21.5015 219.696 21.478 219.554 21.4312 219.456 cv
21.3843 219.358 21.2827 219.31 21.1265 219.31 cv
21.0249 219.31 20.8931 219.338 20.731 219.395 cv
20.5688 219.451 20.4175 219.511 20.2769 219.573 cv
20.2769 219.409 li
22.4272 218.313 li
22.4976 218.313 li
22.5132 218.333 22.522 218.348 22.5239 218.357 cv
cp
f
19.3042 143.14 mo
20.7339 141.656 21.7046 140.567 22.2163 139.873 cv
22.728 139.178 22.9839 138.5 22.9839 137.841 cv
22.9839 137.264 22.8276 136.824 22.5151 136.521 cv
22.2026 136.219 21.8296 136.067 21.396 136.067 cv
20.8608 136.067 20.4272 136.263 20.0952 136.653 cv
19.9116 136.868 19.7358 137.197 19.5679 137.642 cv
19.3159 137.589 li
19.5112 136.691 19.8423 136.068 20.3091 135.718 cv
20.7759 135.369 21.2769 135.194 21.812 135.194 cv
22.4722 135.194 23.0063 135.402 23.4146 135.818 cv
23.8228 136.233 24.0269 136.742 24.0269 137.343 cv
24.0269 137.983 23.8062 138.6 23.3643 139.193 cv
22.9229 139.786 21.9634 140.842 20.4863 142.36 cv
23.1768 142.36 li
23.5518 142.36 23.8154 142.315 23.9683 142.226 cv
24.1206 142.136 24.2925 141.917 24.4839 141.57 cv
24.6362 141.64 li
23.9858 143.274 li
19.3042 143.274 li
19.3042 143.14 li
cp
f
20.731 60.0903 mo
21.0845 60.3149 21.3843 60.4272 21.6304 60.4272 cv
22.1772 60.4272 22.5835 60.2422 22.8491 59.8726 cv
23.1147 59.5029 23.2476 59.1011 23.2476 58.6665 cv
23.2476 58.248 23.1401 57.8804 22.9253 57.5635 cv
22.562 57.0273 21.9487 56.7593 21.0854 56.7593 cv
21.0347 56.7593 20.9858 56.7603 20.939 56.7622 cv
20.8921 56.7642 20.8374 56.769 20.7749 56.7769 cv
20.7632 56.6245 li
21.3882 56.3979 21.8804 56.1382 22.2397 55.8452 cv
22.5991 55.5522 22.7788 55.1655 22.7788 54.6851 cv
22.7788 54.2593 22.6372 53.9351 22.354 53.7124 cv
22.0708 53.4897 21.7476 53.3784 21.3843 53.3784 cv
20.9546 53.3784 20.5757 53.5366 20.2476 53.853 cv
20.0679 54.0249 19.8745 54.2905 19.6675 54.6499 cv
19.4858 54.6089 li
19.6421 54.0151 19.9331 53.5405 20.3589 53.1851 cv
20.7847 52.8296 21.2769 52.6519 21.8354 52.6519 cv
22.4331 52.6519 22.895 52.8159 23.2212 53.144 cv
23.5474 53.4722 23.7104 53.8511 23.7104 54.2808 cv
23.7104 54.6597 23.5757 55.0073 23.3062 55.3237 cv
23.1538 55.5034 22.9175 55.7046 22.5972 55.9272 cv
22.9722 56.0874 23.2729 56.2749 23.4995 56.4897 cv
23.9253 56.8999 24.1382 57.4194 24.1382 58.0483 cv
24.1382 58.7905 23.8462 59.4448 23.2622 60.0112 cv
22.6782 60.5776 21.8472 60.8608 20.769 60.8608 cv
20.2886 60.8608 19.9517 60.7896 19.7583 60.647 cv
19.5649 60.5044 19.4683 60.3511 19.4683 60.187 cv
19.4683 60.0854 19.5005 59.9878 19.5649 59.894 cv
19.6294 59.8003 19.7339 59.7534 19.8784 59.7534 cv
20.0933 59.7534 20.3774 59.8657 20.731 60.0903 cv
cp
f
40.6226 271.188 mo
39.3848 268.214 li
38.1416 271.188 li
40.6226 271.188 li
cp
35.9712 273.962 mo
35.9712 273.762 li
36.249 273.73 36.457 273.626 36.5962 273.448 cv
36.7349 273.271 36.9731 272.784 37.3101 271.99 cv
39.5601 266.69 li
39.7754 266.69 li
42.4658 272.813 li
42.6455 273.218 42.7886 273.469 42.896 273.565 cv
43.0029 273.661 43.1831 273.727 43.4365 273.762 cv
43.4365 273.962 li
40.6899 273.962 li
40.6899 273.762 li
41.0054 273.733 41.209 273.699 41.3003 273.659 cv
41.3916 273.619 41.4375 273.52 41.4375 273.363 cv
41.4375 273.31 41.4199 273.218 41.3848 273.084 cv
41.3496 272.952 41.3003 272.812 41.2368 272.665 cv
40.8047 271.626 li
37.9585 271.626 li
37.6777 272.333 37.5103 272.764 37.4561 272.919 cv
37.4014 273.075 37.374 273.198 37.374 273.289 cv
37.374 273.471 37.4478 273.597 37.5957 273.667 cv
37.6865 273.709 37.8584 273.741 38.1113 273.762 cv
38.1113 273.962 li
35.9712 273.962 li
cp
0 0 1 .43 cmyk
f
46.3145 271.926 mo
46.5254 271.758 46.6309 271.464 46.6309 271.046 cv
46.6309 270.712 46.5459 270.335 46.3755 269.917 cv
46.2046 269.499 45.9209 269.29 45.5234 269.29 cv
45.1792 269.29 44.9419 269.453 44.8115 269.78 cv
44.7451 269.952 44.7114 270.165 44.7114 270.418 cv
44.7114 270.847 44.8149 271.232 45.0225 271.573 cv
45.23 271.914 45.499 272.084 45.8296 272.084 cv
46.0229 272.084 46.1846 272.032 46.3145 271.926 cv
cp
44.6401 275.549 mo
44.9727 275.662 45.353 275.718 45.7822 275.718 cv
46.3657 275.718 46.8403 275.617 47.2061 275.415 cv
47.5713 275.212 47.7544 274.964 47.7544 274.668 cv
47.7544 274.433 47.6064 274.276 47.3105 274.199 cv
47.127 274.153 46.7803 274.127 46.2695 274.12 cv
46.1392 274.117 46.0015 274.112 45.8574 274.107 cv
45.7129 274.102 45.5806 274.096 45.4609 274.088 cv
45.3833 274.085 45.2583 274.071 45.0859 274.046 cv
44.9131 274.021 44.7847 274 44.7002 273.983 cv
44.6577 273.983 44.5552 274.094 44.3921 274.315 cv
44.2251 274.54 44.1421 274.748 44.1421 274.938 cv
44.1421 275.233 44.3081 275.437 44.6401 275.549 cv
cp
44.0815 271.626 mo
43.9038 271.355 43.8149 271.051 43.8149 270.713 cv
43.8149 270.302 43.9785 269.912 44.3057 269.543 cv
44.6323 269.174 45.0947 268.989 45.6924 268.989 cv
45.9487 268.989 46.2319 269.05 46.5415 269.171 cv
46.8506 269.292 47.1479 269.353 47.4326 269.353 cv
47.5063 269.353 47.6182 269.35 47.7676 269.345 cv
47.917 269.34 48.0249 269.337 48.0918 269.337 cv
48.1553 269.337 li
48.1553 269.764 li
47.2427 269.764 li
47.3062 269.912 47.3555 270.041 47.3906 270.149 cv
47.4502 270.353 47.48 270.546 47.48 270.729 cv
47.48 271.13 47.314 271.499 46.9819 271.834 cv
46.6494 272.17 46.2021 272.338 45.6396 272.338 cv
45.5518 272.338 45.3936 272.322 45.165 272.29 cv
45.063 272.29 44.9277 272.376 44.7588 272.549 cv
44.5903 272.721 44.5059 272.862 44.5059 272.971 cv
44.5059 273.083 44.6289 273.166 44.8755 273.218 cv
45.0376 273.253 45.2168 273.271 45.4141 273.271 cv
46.3193 273.271 46.9336 273.322 47.2573 273.424 cv
47.7891 273.589 48.0547 273.944 48.0547 274.489 cv
48.0547 275.045 47.7446 275.488 47.124 275.818 cv
46.5034 276.148 45.877 276.314 45.2441 276.314 cv
44.6675 276.314 44.2104 276.197 43.873 275.963 cv
43.5356 275.729 43.3667 275.484 43.3667 275.228 cv
43.3667 275.101 43.4111 274.977 43.5005 274.856 cv
43.5898 274.734 43.7661 274.554 44.0288 274.315 cv
44.3755 274.004 li
44.4385 273.941 li
44.2778 273.877 44.1572 273.816 44.0771 273.756 cv
43.9375 273.647 43.8677 273.522 43.8677 273.382 cv
43.8677 273.252 43.9282 273.108 44.0498 272.952 cv
44.1709 272.796 44.4302 272.542 44.8276 272.19 cv
44.5078 272.084 44.2588 271.896 44.0815 271.626 cv
cp
f
45.4995 257.158 mo
45.9106 257.274 46.1411 257.332 46.1904 257.332 cv
46.292 257.332 46.3887 257.304 46.4805 257.248 cv
46.5718 257.191 46.6348 257.104 46.6699 256.984 cv
46.897 256.984 li
46.9971 259.41 li
46.749 259.41 li
46.605 258.928 46.417 258.54 46.1851 258.244 cv
45.7422 257.688 45.146 257.411 44.3975 257.411 cv
43.6411 257.411 43.0234 257.71 42.5435 258.308 cv
42.064 258.905 41.8237 259.728 41.8237 260.775 cv
41.8237 261.739 42.0762 262.508 42.5806 263.083 cv
43.085 263.657 43.7241 263.945 44.4976 263.945 cv
45.0566 263.945 45.5713 263.811 46.0425 263.544 cv
46.3135 263.393 46.6104 263.164 46.9336 262.858 cv
47.1343 263.059 li
46.895 263.361 46.5981 263.626 46.2432 263.855 cv
45.6382 264.242 44.9824 264.435 44.2759 264.435 cv
43.1157 264.435 42.1948 264.064 41.5127 263.322 cv
40.8833 262.637 40.5688 261.781 40.5688 260.754 cv
40.5688 259.703 40.9009 258.821 41.5654 258.107 cv
42.2651 257.358 43.1758 256.984 44.2969 256.984 cv
44.6875 256.984 45.0879 257.042 45.4995 257.158 cv
cp
.33 1 0 0 cmyk
f
48.646 259.373 mo
48.646 262.748 li
48.646 262.987 48.6792 263.178 48.7461 263.322 cv
48.876 263.59 49.1152 263.723 49.4634 263.723 cv
49.7021 263.723 49.936 263.644 50.1646 263.486 cv
50.2944 263.398 50.4263 263.277 50.5601 263.122 cv
50.5601 260.232 li
50.5601 259.961 50.5073 259.784 50.4019 259.7 cv
50.2964 259.615 50.0854 259.564 49.769 259.547 cv
49.769 259.373 li
51.4722 259.373 li
51.4722 263.085 li
51.4722 263.324 51.5151 263.489 51.6016 263.578 cv
51.6875 263.668 51.8696 263.708 52.1475 263.697 cv
52.1475 263.845 li
51.9541 263.897 51.8115 263.937 51.7202 263.963 cv
51.6289 263.99 51.4756 264.038 51.2612 264.108 cv
51.1699 264.14 50.9697 264.215 50.6602 264.335 cv
50.6426 264.335 50.6318 264.327 50.6284 264.311 cv
50.625 264.295 50.6235 264.277 50.6235 264.256 cv
50.6235 263.407 li
50.3843 263.691 50.1665 263.902 49.9692 264.04 cv
49.6704 264.25 49.354 264.356 49.02 264.356 cv
48.7144 264.356 48.4263 264.247 48.1553 264.029 cv
47.8813 263.814 47.7441 263.453 47.7441 262.946 cv
47.7441 260.206 li
47.7441 259.927 47.6841 259.74 47.5649 259.646 cv
47.4873 259.586 47.3223 259.545 47.0688 259.521 cv
47.0688 259.373 li
48.646 259.373 li
cp
f
51.6191 255.012 mo
52.0444 254.966 52.3091 254.888 52.4131 254.778 cv
52.5166 254.668 52.5684 254.38 52.5684 253.915 cv
52.5684 249.237 li
52.5684 248.854 52.5107 248.604 52.3945 248.486 cv
52.2783 248.368 52.02 248.295 51.6191 248.267 cv
51.6191 248.066 li
57.3726 248.066 li
57.4097 249.611 li
57.1089 249.611 li
57.0352 249.118 56.896 248.806 56.6924 248.675 cv
56.4883 248.543 56.0859 248.478 55.4849 248.478 cv
54.0039 248.478 li
53.8594 248.478 53.7666 248.502 53.7261 248.552 cv
53.6855 248.601 53.6655 248.697 53.6655 248.842 cv
53.6655 251.251 li
55.2314 251.251 li
55.6924 251.251 55.9858 251.184 56.1123 251.047 cv
56.2388 250.911 56.3408 250.634 56.418 250.218 cv
56.6714 250.218 li
56.6714 252.712 li
56.418 252.712 li
56.3374 252.294 56.2334 252.017 56.1069 251.882 cv
55.9805 251.747 55.6885 251.679 55.2314 251.679 cv
53.6655 251.679 li
53.6655 254.041 li
53.6655 254.437 53.7261 254.689 53.8472 254.799 cv
53.9688 254.909 54.2329 254.98 54.6411 255.012 cv
54.6411 255.212 li
51.6191 255.212 li
51.6191 255.012 li
cp
0 0 0 1 cmyk
f
58.2251 251.183 mo
58.1123 251.373 58.0317 251.612 57.9824 251.9 cv
60.2075 251.9 li
60.1689 251.549 60.1021 251.287 60.0073 251.114 cv
59.835 250.805 59.5469 250.65 59.1426 250.65 cv
58.7417 250.65 58.436 250.828 58.2251 251.183 cv
cp
60.751 250.78 mo
61.1235 251.123 61.3101 251.608 61.3101 252.238 cv
57.9614 252.238 li
57.9961 253.052 58.1807 253.645 58.5151 254.016 cv
58.8491 254.388 59.2446 254.574 59.7017 254.574 cv
60.0708 254.574 60.3818 254.478 60.6348 254.285 cv
60.8882 254.092 61.1216 253.818 61.3364 253.463 cv
61.521 253.527 li
61.3765 253.974 61.1069 254.388 60.7114 254.768 cv
60.3159 255.148 59.8315 255.338 59.2583 255.338 cv
58.5977 255.338 58.0869 255.089 57.7266 254.59 cv
57.3662 254.09 57.186 253.516 57.186 252.865 cv
57.186 252.159 57.395 251.549 57.8135 251.035 cv
58.2319 250.522 58.7769 250.266 59.4482 250.266 cv
59.9438 250.266 60.3784 250.437 60.751 250.78 cv
cp
f
160.079 333.526 mo
160.521 333.479 160.807 333.401 160.938 333.29 cv
161.068 333.18 161.134 332.899 161.134 332.448 cv
161.134 327.11 li
161.134 326.685 161.069 326.406 160.94 326.275 cv
160.812 326.145 160.524 326.063 160.079 326.032 cv
160.079 325.81 li
166.454 325.81 li
166.495 327.526 li
166.19 327.526 li
166.089 326.998 165.937 326.655 165.733 326.5 cv
165.53 326.344 165.077 326.267 164.374 326.267 cv
162.74 326.267 li
162.564 326.267 162.455 326.295 162.414 326.352 cv
162.373 326.408 162.353 326.515 162.353 326.671 cv
162.353 329.349 li
164.204 329.349 li
164.716 329.349 165.042 329.272 165.183 329.121 cv
165.323 328.97 165.437 328.662 165.522 328.2 cv
165.804 328.2 li
165.804 330.972 li
165.522 330.972 li
165.433 330.507 165.317 330.199 165.177 330.049 cv
165.036 329.898 164.712 329.823 164.204 329.823 cv
162.353 329.823 li
162.353 332.794 li
162.353 333.032 162.428 333.173 162.578 333.216 cv
162.729 333.259 163.18 333.28 163.931 333.28 cv
164.745 333.28 165.345 333.191 165.732 333.014 cv
166.12 332.836 166.468 332.405 166.776 331.722 cv
167.11 331.722 li
166.565 333.749 li
160.079 333.749 li
160.079 333.526 li
cp
f
167.521 333.585 mo
167.884 333.55 168.13 333.477 168.259 333.365 cv
168.388 333.254 168.452 333.036 168.452 332.712 cv
168.452 326.987 li
168.452 326.729 168.431 326.552 168.388 326.454 cv
168.31 326.29 168.151 326.208 167.913 326.208 cv
167.858 326.208 167.799 326.214 167.734 326.226 cv
167.67 326.237 167.589 326.255 167.491 326.278 cv
167.491 326.085 li
168.019 325.944 168.653 325.757 169.396 325.522 cv
169.423 325.522 169.439 325.534 169.445 325.558 cv
169.451 325.581 169.454 325.632 169.454 325.71 cv
169.454 332.735 li
169.454 333.075 169.513 333.295 169.63 333.395 cv
169.747 333.494 169.989 333.558 170.356 333.585 cv
170.356 333.749 li
167.521 333.749 li
167.521 333.585 li
cp
f
171.997 329.272 mo
171.872 329.483 171.782 329.749 171.728 330.069 cv
174.2 330.069 li
174.157 329.679 174.083 329.388 173.978 329.196 cv
173.786 328.853 173.466 328.681 173.017 328.681 cv
172.571 328.681 172.231 328.878 171.997 329.272 cv
cp
174.804 328.824 mo
175.218 329.205 175.425 329.745 175.425 330.444 cv
171.704 330.444 li
171.743 331.349 171.948 332.007 172.319 332.421 cv
172.69 332.833 173.13 333.04 173.638 333.04 cv
174.048 333.04 174.394 332.933 174.675 332.719 cv
174.956 332.504 175.216 332.2 175.454 331.807 cv
175.659 331.877 li
175.499 332.374 175.199 332.833 174.76 333.256 cv
174.32 333.679 173.782 333.89 173.146 333.89 cv
172.411 333.89 171.844 333.612 171.443 333.058 cv
171.043 332.503 170.843 331.864 170.843 331.142 cv
170.843 330.356 171.075 329.679 171.54 329.108 cv
172.005 328.538 172.61 328.253 173.356 328.253 cv
173.907 328.253 174.39 328.443 174.804 328.824 cv
cp
f
180.18 328.6 mo
180.533 328.852 180.71 329.127 180.71 329.427 cv
180.71 329.555 180.665 329.675 180.575 329.786 cv
180.485 329.896 180.347 329.952 180.159 329.952 cv
180.022 329.952 179.902 329.905 179.799 329.812 cv
179.695 329.718 179.62 329.581 179.573 329.401 cv
179.503 329.12 li
179.452 328.913 179.364 328.767 179.239 328.681 cv
179.11 328.599 178.94 328.558 178.729 328.558 cv
178.284 328.558 177.908 328.752 177.602 329.142 cv
177.295 329.53 177.142 330.048 177.142 330.693 cv
177.142 331.284 177.311 331.813 177.648 332.283 cv
177.986 332.753 178.442 332.987 179.017 332.987 cv
179.423 332.987 179.784 332.854 180.101 332.588 cv
180.28 332.436 180.483 332.192 180.71 331.86 cv
180.874 331.96 li
180.651 332.429 180.417 332.801 180.171 333.074 cv
179.698 333.599 179.151 333.86 178.53 333.86 cv
177.921 333.86 177.382 333.62 176.913 333.14 cv
176.444 332.659 176.21 332.007 176.21 331.183 cv
176.21 330.374 176.466 329.679 176.978 329.097 cv
177.489 328.515 178.136 328.224 178.917 328.224 cv
179.405 328.224 179.826 328.349 180.18 328.6 cv
cp
f
184.313 328.347 mo
184.313 328.769 li
183.118 328.769 li
183.106 332.144 li
183.106 332.44 183.132 332.665 183.183 332.817 cv
183.276 333.087 183.46 333.222 183.733 333.222 cv
183.874 333.222 183.996 333.188 184.1 333.122 cv
184.203 333.056 184.321 332.95 184.454 332.806 cv
184.606 332.935 li
184.478 333.11 li
184.274 333.384 184.06 333.577 183.833 333.69 cv
183.606 333.804 183.388 333.86 183.177 333.86 cv
182.716 333.86 182.403 333.655 182.239 333.245 cv
182.149 333.022 182.104 332.714 182.104 332.319 cv
182.104 328.769 li
181.466 328.769 li
181.446 328.757 181.432 328.745 181.422 328.733 cv
181.412 328.722 181.407 328.706 181.407 328.687 cv
181.407 328.647 181.416 328.617 181.434 328.596 cv
181.451 328.574 181.507 328.524 181.601 328.446 cv
181.87 328.224 182.064 328.043 182.184 327.904 cv
182.303 327.766 182.583 327.399 183.024 326.806 cv
183.075 326.806 183.105 326.81 183.115 326.817 cv
183.125 326.825 183.13 326.854 183.13 326.905 cv
183.13 328.347 li
184.313 328.347 li
cp
f
184.647 333.556 mo
185.007 333.524 185.245 333.461 185.362 333.365 cv
185.479 333.27 185.538 333.065 185.538 332.753 cv
185.538 330.11 li
185.538 329.724 185.502 329.447 185.43 329.281 cv
185.357 329.115 185.226 329.032 185.034 329.032 cv
184.995 329.032 184.943 329.037 184.879 329.047 cv
184.814 329.057 184.747 329.069 184.677 329.085 cv
184.677 328.892 li
184.898 328.813 185.126 328.733 185.36 328.651 cv
185.594 328.569 185.755 328.511 185.845 328.476 cv
186.039 328.401 186.24 328.317 186.446 328.224 cv
186.474 328.224 186.49 328.233 186.496 328.253 cv
186.502 328.272 186.505 328.313 186.505 328.376 cv
186.505 329.337 li
186.756 328.989 186.997 328.718 187.23 328.522 cv
187.464 328.327 187.705 328.229 187.956 328.229 cv
188.156 328.229 188.318 328.289 188.443 328.408 cv
188.569 328.527 188.632 328.677 188.632 328.856 cv
188.632 329.017 188.584 329.151 188.488 329.261 cv
188.393 329.37 188.272 329.425 188.128 329.425 cv
187.979 329.425 187.83 329.356 187.68 329.22 cv
187.529 329.083 187.411 329.015 187.325 329.015 cv
187.188 329.015 187.021 329.125 186.821 329.346 cv
186.622 329.566 186.522 329.794 186.522 330.028 cv
186.522 332.671 li
186.522 333.007 186.601 333.24 186.757 333.371 cv
186.913 333.502 187.173 333.563 187.536 333.556 cv
187.536 333.749 li
184.647 333.749 li
184.647 333.556 li
cp
f
190.572 328.909 mo
190.181 329.265 189.985 329.878 189.985 330.749 cv
189.985 331.444 190.143 332.093 190.458 332.694 cv
190.772 333.296 191.21 333.597 191.77 333.597 cv
192.208 333.597 192.546 333.396 192.782 332.993 cv
193.02 332.591 193.138 332.063 193.138 331.411 cv
193.138 330.735 192.987 330.099 192.686 329.501 cv
192.385 328.903 191.948 328.604 191.377 328.604 cv
191.067 328.604 190.8 328.706 190.572 328.909 cv
cp
189.637 329.059 mo
190.131 328.521 190.767 328.253 191.544 328.253 cv
192.317 328.253 192.958 328.507 193.466 329.015 cv
193.974 329.522 194.228 330.198 194.228 331.042 cv
194.228 331.819 193.981 332.495 193.489 333.069 cv
192.997 333.644 192.36 333.931 191.579 333.931 cv
190.829 333.931 190.194 333.655 189.675 333.104 cv
189.155 332.554 188.896 331.862 188.896 331.03 cv
188.896 330.253 189.143 329.596 189.637 329.059 cv
cp
f
194.808 333.585 mo
195.085 333.55 195.279 333.48 195.391 333.377 cv
195.502 333.273 195.558 333.042 195.558 332.683 cv
195.558 329.706 li
195.558 329.458 195.534 329.284 195.487 329.183 cv
195.413 329.035 195.261 328.962 195.03 328.962 cv
194.995 328.962 194.959 328.964 194.922 328.968 cv
194.885 328.972 194.839 328.978 194.784 328.985 cv
194.784 328.78 li
194.944 328.733 195.323 328.612 195.921 328.417 cv
196.472 328.235 li
196.499 328.235 196.516 328.245 196.521 328.265 cv
196.527 328.284 196.53 328.312 196.53 328.347 cv
196.53 329.208 li
196.889 328.872 197.17 328.642 197.372 328.517 cv
197.677 328.325 197.992 328.229 198.32 328.229 cv
198.585 328.229 198.827 328.306 199.045 328.458 cv
199.466 328.755 199.677 329.284 199.677 330.046 cv
199.677 332.782 li
199.677 333.063 199.732 333.267 199.846 333.392 cv
199.958 333.517 200.146 333.581 200.409 333.585 cv
200.409 333.749 li
197.907 333.749 li
197.907 333.585 li
198.192 333.546 198.392 333.467 198.505 333.348 cv
198.618 333.229 198.675 332.97 198.675 332.571 cv
198.675 330.069 li
198.675 329.733 198.612 329.455 198.488 329.234 cv
198.364 329.014 198.135 328.903 197.801 328.903 cv
197.571 328.903 197.339 328.981 197.102 329.138 cv
196.97 329.228 196.799 329.376 196.589 329.583 cv
196.589 332.864 li
196.589 333.146 196.651 333.334 196.776 333.43 cv
196.901 333.525 197.099 333.577 197.368 333.585 cv
197.368 333.749 li
194.808 333.749 li
194.808 333.585 li
cp
f
203.726 333.526 mo
204.167 333.479 204.453 333.401 204.584 333.29 cv
204.715 333.18 204.78 332.899 204.78 332.448 cv
204.78 327.11 li
204.78 326.685 204.716 326.406 204.587 326.275 cv
204.458 326.145 204.171 326.063 203.726 326.032 cv
203.726 325.81 li
210.101 325.81 li
210.142 327.526 li
209.837 327.526 li
209.735 326.998 209.583 326.655 209.38 326.5 cv
209.177 326.344 208.724 326.267 208.021 326.267 cv
206.387 326.267 li
206.211 326.267 206.102 326.295 206.061 326.352 cv
206.02 326.408 205.999 326.515 205.999 326.671 cv
205.999 329.349 li
207.851 329.349 li
208.362 329.349 208.688 329.272 208.829 329.121 cv
208.97 328.97 209.083 328.662 209.169 328.2 cv
209.45 328.2 li
209.45 330.972 li
209.169 330.972 li
209.079 330.507 208.964 330.199 208.823 330.049 cv
208.683 329.898 208.358 329.823 207.851 329.823 cv
205.999 329.823 li
205.999 332.794 li
205.999 333.032 206.074 333.173 206.225 333.216 cv
206.376 333.259 206.826 333.28 207.577 333.28 cv
208.392 333.28 208.991 333.191 209.379 333.014 cv
209.767 332.836 210.114 332.405 210.423 331.722 cv
210.757 331.722 li
210.212 333.749 li
203.726 333.749 li
203.726 333.526 li
cp
f
211.138 333.585 mo
211.415 333.55 211.609 333.48 211.721 333.377 cv
211.832 333.273 211.888 333.042 211.888 332.683 cv
211.888 329.706 li
211.888 329.458 211.864 329.284 211.817 329.183 cv
211.743 329.035 211.591 328.962 211.36 328.962 cv
211.325 328.962 211.289 328.964 211.252 328.968 cv
211.215 328.972 211.169 328.978 211.114 328.985 cv
211.114 328.78 li
211.274 328.733 211.653 328.612 212.251 328.417 cv
212.802 328.235 li
212.829 328.235 212.846 328.245 212.852 328.265 cv
212.857 328.284 212.86 328.312 212.86 328.347 cv
212.86 329.208 li
213.219 328.872 213.5 328.642 213.702 328.517 cv
214.007 328.325 214.322 328.229 214.65 328.229 cv
214.915 328.229 215.157 328.306 215.375 328.458 cv
215.796 328.755 216.007 329.284 216.007 330.046 cv
216.007 332.782 li
216.007 333.063 216.063 333.267 216.176 333.392 cv
216.288 333.517 216.476 333.581 216.739 333.585 cv
216.739 333.749 li
214.237 333.749 li
214.237 333.585 li
214.522 333.546 214.722 333.467 214.835 333.348 cv
214.948 333.229 215.005 332.97 215.005 332.571 cv
215.005 330.069 li
215.005 329.733 214.942 329.455 214.818 329.234 cv
214.694 329.014 214.465 328.903 214.131 328.903 cv
213.901 328.903 213.669 328.981 213.432 329.138 cv
213.3 329.228 213.129 329.376 212.919 329.583 cv
212.919 332.864 li
212.919 333.146 212.981 333.334 213.106 333.43 cv
213.231 333.525 213.429 333.577 213.698 333.585 cv
213.698 333.749 li
211.138 333.749 li
211.138 333.585 li
cp
f
218.31 329.272 mo
218.185 329.483 218.095 329.749 218.04 330.069 cv
220.513 330.069 li
220.47 329.679 220.396 329.388 220.29 329.196 cv
220.099 328.853 219.778 328.681 219.329 328.681 cv
218.884 328.681 218.544 328.878 218.31 329.272 cv
cp
221.116 328.824 mo
221.53 329.205 221.737 329.745 221.737 330.444 cv
218.017 330.444 li
218.056 331.349 218.261 332.007 218.632 332.421 cv
219.003 332.833 219.442 333.04 219.95 333.04 cv
220.36 333.04 220.706 332.933 220.987 332.719 cv
221.269 332.504 221.528 332.2 221.767 331.807 cv
221.972 331.877 li
221.812 332.374 221.512 332.833 221.072 333.256 cv
220.633 333.679 220.095 333.89 219.458 333.89 cv
218.724 333.89 218.156 333.612 217.756 333.058 cv
217.355 332.503 217.155 331.864 217.155 331.142 cv
217.155 330.356 217.388 329.679 217.853 329.108 cv
218.317 328.538 218.923 328.253 219.669 328.253 cv
220.22 328.253 220.702 328.443 221.116 328.824 cv
cp
f
222.3 333.556 mo
222.659 333.524 222.897 333.461 223.015 333.365 cv
223.132 333.27 223.19 333.065 223.19 332.753 cv
223.19 330.11 li
223.19 329.724 223.154 329.447 223.082 329.281 cv
223.01 329.115 222.878 329.032 222.687 329.032 cv
222.647 329.032 222.596 329.037 222.531 329.047 cv
222.467 329.057 222.399 329.069 222.329 329.085 cv
222.329 328.892 li
222.551 328.813 222.778 328.733 223.013 328.651 cv
223.246 328.569 223.407 328.511 223.497 328.476 cv
223.691 328.401 223.893 328.317 224.099 328.224 cv
224.126 328.224 224.143 328.233 224.148 328.253 cv
224.154 328.272 224.157 328.313 224.157 328.376 cv
224.157 329.337 li
224.408 328.989 224.649 328.718 224.883 328.522 cv
225.116 328.327 225.357 328.229 225.608 328.229 cv
225.809 328.229 225.971 328.289 226.096 328.408 cv
226.222 328.527 226.284 328.677 226.284 328.856 cv
226.284 329.017 226.236 329.151 226.141 329.261 cv
226.045 329.37 225.925 329.425 225.78 329.425 cv
225.632 329.425 225.482 329.356 225.332 329.22 cv
225.182 329.083 225.063 329.015 224.978 329.015 cv
224.841 329.015 224.673 329.125 224.474 329.346 cv
224.274 329.566 224.175 329.794 224.175 330.028 cv
224.175 332.671 li
224.175 333.007 224.253 333.24 224.409 333.371 cv
224.565 333.502 224.825 333.563 225.188 333.556 cv
225.188 333.749 li
222.3 333.749 li
222.3 333.556 li
cp
f
229.835 331.487 mo
230.069 331.3 230.187 330.974 230.187 330.509 cv
230.187 330.138 230.092 329.72 229.902 329.255 cv
229.713 328.79 229.397 328.558 228.956 328.558 cv
228.573 328.558 228.31 328.739 228.165 329.103 cv
228.091 329.294 228.054 329.53 228.054 329.812 cv
228.054 330.288 228.169 330.716 228.399 331.095 cv
228.63 331.474 228.929 331.663 229.296 331.663 cv
229.511 331.663 229.69 331.604 229.835 331.487 cv
cp
227.975 335.513 mo
228.344 335.638 228.767 335.7 229.243 335.7 cv
229.892 335.7 230.419 335.588 230.825 335.363 cv
231.231 335.139 231.435 334.862 231.435 334.534 cv
231.435 334.272 231.271 334.099 230.941 334.013 cv
230.737 333.962 230.353 333.933 229.785 333.925 cv
229.64 333.921 229.487 333.916 229.327 333.91 cv
229.166 333.904 229.02 333.897 228.887 333.89 cv
228.801 333.886 228.661 333.87 228.47 333.843 cv
228.278 333.815 228.135 333.792 228.041 333.772 cv
227.994 333.772 227.88 333.896 227.698 334.142 cv
227.514 334.392 227.421 334.622 227.421 334.833 cv
227.421 335.161 227.605 335.388 227.975 335.513 cv
cp
227.354 331.153 mo
227.156 330.853 227.058 330.515 227.058 330.14 cv
227.058 329.683 227.239 329.249 227.603 328.839 cv
227.966 328.429 228.479 328.224 229.144 328.224 cv
229.429 328.224 229.743 328.291 230.087 328.426 cv
230.431 328.561 230.761 328.628 231.077 328.628 cv
231.159 328.628 231.283 328.625 231.449 328.619 cv
231.615 328.613 231.735 328.61 231.81 328.61 cv
231.88 328.61 li
231.88 329.085 li
230.866 329.085 li
230.937 329.249 230.991 329.392 231.03 329.513 cv
231.097 329.739 231.13 329.954 231.13 330.157 cv
231.13 330.603 230.945 331.012 230.576 331.385 cv
230.207 331.758 229.71 331.944 229.085 331.944 cv
228.987 331.944 228.812 331.927 228.558 331.892 cv
228.444 331.892 228.294 331.987 228.106 332.179 cv
227.919 332.37 227.825 332.526 227.825 332.647 cv
227.825 332.772 227.962 332.864 228.236 332.923 cv
228.416 332.962 228.615 332.981 228.835 332.981 cv
229.84 332.981 230.522 333.038 230.883 333.151 cv
231.474 333.335 231.769 333.729 231.769 334.335 cv
231.769 334.952 231.424 335.444 230.734 335.812 cv
230.045 336.179 229.349 336.362 228.646 336.362 cv
228.005 336.362 227.497 336.232 227.122 335.973 cv
226.747 335.713 226.56 335.44 226.56 335.155 cv
226.56 335.015 226.609 334.877 226.708 334.742 cv
226.808 334.607 227.003 334.407 227.295 334.142 cv
227.68 333.796 li
227.75 333.726 li
227.571 333.655 227.438 333.587 227.349 333.521 cv
227.193 333.399 227.116 333.261 227.116 333.104 cv
227.116 332.96 227.184 332.801 227.318 332.627 cv
227.453 332.453 227.741 332.171 228.183 331.78 cv
227.827 331.663 227.551 331.454 227.354 331.153 cv
cp
f
232.407 328.364 mo
234.88 328.364 li
234.88 328.528 li
234.685 328.532 234.54 328.551 234.446 328.582 cv
234.267 328.635 234.177 328.736 234.177 328.888 cv
234.177 328.944 234.187 329.001 234.206 329.059 cv
234.226 329.116 234.261 329.203 234.312 329.319 cv
235.668 332.252 li
236.784 329.296 li
236.796 329.264 236.814 329.192 236.84 329.08 cv
236.865 328.968 236.878 328.893 236.878 328.853 cv
236.878 328.748 236.843 328.672 236.772 328.624 cv
236.702 328.576 236.612 328.549 236.503 328.541 cv
236.321 328.528 li
236.321 328.364 li
237.933 328.364 li
237.933 328.528 li
237.772 328.549 237.652 328.605 237.572 328.697 cv
237.492 328.79 237.423 328.92 237.364 329.085 cv
235.519 333.972 li
235.198 334.815 234.892 335.427 234.599 335.806 cv
234.306 336.185 233.935 336.374 233.485 336.374 cv
233.267 336.374 233.062 336.319 232.87 336.21 cv
232.679 336.101 232.583 335.927 232.583 335.688 cv
232.583 335.532 232.64 335.404 232.754 335.305 cv
232.867 335.205 233.012 335.155 233.185 335.155 cv
233.285 335.155 233.435 335.192 233.634 335.267 cv
233.832 335.341 233.974 335.378 234.059 335.378 cv
234.274 335.378 234.502 335.112 234.741 334.582 cv
234.98 334.052 235.101 333.702 235.101 333.532 cv
235.101 333.497 235.095 333.454 235.084 333.404 cv
235.072 333.354 235.06 333.31 235.045 333.271 cv
233.198 329.278 li
233.065 328.989 232.949 328.799 232.85 328.707 cv
232.75 328.615 232.603 328.556 232.407 328.528 cv
232.407 328.364 li
cp
f
257.234 333.556 mo
257.516 333.532 257.709 333.481 257.814 333.403 cv
257.979 333.286 258.113 333.042 258.219 332.671 cv
259.688 327.362 li
259.735 327.187 259.771 327.041 259.797 326.926 cv
259.822 326.811 259.835 326.712 259.835 326.63 cv
259.835 326.442 259.764 326.312 259.621 326.237 cv
259.479 326.163 259.237 326.122 258.897 326.114 cv
258.897 325.921 li
264.869 325.921 li
264.494 327.749 li
264.248 327.731 li
264.26 327.614 264.268 327.502 264.271 327.395 cv
264.275 327.287 264.277 327.247 264.277 327.274 cv
264.285 326.88 264.146 326.621 263.858 326.498 cv
263.571 326.375 262.98 326.313 262.085 326.313 cv
261.675 326.313 261.417 326.333 261.312 326.371 cv
261.206 326.409 261.134 326.494 261.095 326.624 cv
260.314 329.419 li
261.369 329.384 262.003 329.317 262.218 329.22 cv
262.432 329.122 262.659 328.8 262.9 328.253 cv
263.123 328.306 li
262.303 331.083 li
262.068 331.03 li
262.107 330.796 262.131 330.653 262.139 330.603 cv
262.146 330.552 262.15 330.495 262.15 330.433 cv
262.15 330.179 262.06 330.014 261.879 329.938 cv
261.698 329.861 261.366 329.823 260.885 329.823 cv
260.202 329.823 li
259.455 332.501 li
259.432 332.583 259.413 332.659 259.399 332.729 cv
259.386 332.8 259.379 332.872 259.379 332.946 cv
259.379 333.071 259.412 333.165 259.479 333.228 cv
259.6 333.337 259.838 333.392 260.193 333.392 cv
261.268 333.392 262.036 333.276 262.499 333.046 cv
262.962 332.815 263.424 332.37 263.885 331.71 cv
264.078 331.81 li
263.328 333.749 li
257.234 333.749 li
257.234 333.556 li
cp
f
269.577 336.301 mo
269.771 335.735 269.867 334.917 269.867 333.846 cv
269.867 332.991 269.809 332.311 269.693 331.801 cv
269.475 330.853 269.067 330.378 268.47 330.378 cv
267.872 330.378 267.462 330.866 267.241 331.843 cv
267.125 332.363 267.066 333.048 267.066 333.898 cv
267.066 334.695 267.127 335.333 267.246 335.811 cv
267.471 336.703 267.893 337.149 268.512 337.149 cv
269.028 337.149 269.384 336.866 269.577 336.301 cv
cp
270.379 331.364 mo
270.733 332.05 270.911 332.837 270.911 333.727 cv
270.911 334.427 270.802 335.086 270.584 335.704 cv
270.173 336.868 269.461 337.45 268.448 337.45 cv
267.756 337.45 267.187 337.135 266.74 336.506 cv
266.262 335.834 266.022 334.922 266.022 333.769 cv
266.022 332.862 266.183 332.081 266.503 331.428 cv
266.935 330.538 267.6 330.094 268.496 330.094 cv
269.305 330.094 269.932 330.517 270.379 331.364 cv
cp
f
275.982 327.157 mo
276.482 326.528 277.072 326.022 277.752 325.64 cv
277.863 325.833 li
277.234 326.333 276.785 326.819 276.516 327.292 cv
276.043 328.116 275.807 329.214 275.807 330.585 cv
275.807 331.601 275.896 332.438 276.076 333.099 cv
276.393 334.255 276.988 335.12 277.863 335.694 cv
277.711 335.888 li
277.23 335.657 276.711 335.206 276.152 334.534 cv
275.227 333.421 274.764 332.155 274.764 330.737 cv
274.764 329.378 275.17 328.185 275.982 327.157 cv
cp
f
278.344 333.526 mo
278.84 333.476 279.158 333.363 279.299 333.189 cv
279.439 333.016 279.51 332.613 279.51 331.98 cv
279.51 327.109 li
279.51 326.676 279.441 326.394 279.305 326.264 cv
279.168 326.133 278.857 326.056 278.373 326.032 cv
278.373 325.81 li
280.739 325.81 li
283.495 331.787 li
286.184 325.81 li
288.568 325.81 li
288.568 326.032 li
288.123 326.063 287.836 326.145 287.707 326.275 cv
287.578 326.406 287.514 326.684 287.514 327.109 cv
287.514 332.443 li
287.514 332.881 287.578 333.16 287.707 333.283 cv
287.836 333.406 288.123 333.487 288.568 333.526 cv
288.568 333.749 li
285.211 333.749 li
285.211 333.526 li
285.695 333.487 285.997 333.4 286.116 333.266 cv
286.235 333.131 286.295 332.811 286.295 332.303 cv
286.295 326.916 li
283.222 333.749 li
283.058 333.749 li
280.037 327.197 li
280.037 331.98 li
280.037 332.637 280.133 333.063 280.324 333.263 cv
280.449 333.392 280.729 333.479 281.162 333.526 cv
281.162 333.749 li
278.344 333.749 li
278.344 333.526 li
cp
f
290.268 329.272 mo
290.143 329.483 290.053 329.749 289.998 330.069 cv
292.471 330.069 li
292.428 329.679 292.354 329.388 292.248 329.196 cv
292.057 328.853 291.736 328.681 291.287 328.681 cv
290.842 328.681 290.502 328.878 290.268 329.272 cv
cp
293.074 328.824 mo
293.488 329.205 293.695 329.745 293.695 330.444 cv
289.975 330.444 li
290.014 331.349 290.219 332.007 290.59 332.421 cv
290.961 332.833 291.4 333.04 291.908 333.04 cv
292.318 333.04 292.664 332.933 292.945 332.719 cv
293.227 332.504 293.486 332.2 293.725 331.807 cv
293.93 331.877 li
293.77 332.374 293.47 332.833 293.03 333.256 cv
292.591 333.679 292.053 333.89 291.416 333.89 cv
290.682 333.89 290.114 333.612 289.714 333.058 cv
289.313 332.503 289.113 331.864 289.113 331.142 cv
289.113 330.356 289.346 329.679 289.811 329.108 cv
290.275 328.538 290.881 328.253 291.627 328.253 cv
292.178 328.253 292.66 328.443 293.074 328.824 cv
cp
f
297.592 325.81 mo
297.592 326.015 li
297.292 326.019 297.087 326.039 296.978 326.074 cv
296.786 326.138 296.691 326.267 296.691 326.461 cv
296.691 326.561 296.726 326.699 296.794 326.878 cv
296.862 327.056 296.989 327.353 297.176 327.767 cv
299.054 331.944 li
300.759 327.422 li
300.834 327.222 300.892 327.053 300.931 326.914 cv
300.97 326.775 300.989 326.662 300.989 326.574 cv
300.989 326.34 300.89 326.181 300.69 326.098 cv
300.573 326.05 300.38 326.022 300.111 326.015 cv
300.111 325.81 li
302.566 325.81 li
302.566 326.015 li
302.313 326.05 302.125 326.118 302.004 326.22 cv
301.82 326.372 301.639 326.679 301.459 327.14 cv
298.801 333.89 li
298.62 333.89 li
295.655 327.294 li
295.404 326.734 295.204 326.386 295.055 326.25 cv
294.904 326.112 294.684 326.034 294.396 326.015 cv
294.396 325.81 li
297.592 325.81 li
cp
f
306.059 332.448 mo
305.906 332.968 305.684 333.458 305.391 333.919 cv
305.082 334.411 304.67 334.87 304.154 335.296 cv
303.814 335.577 303.529 335.774 303.299 335.888 cv
303.188 335.694 li
303.789 335.237 304.229 334.771 304.506 334.294 cv
304.998 333.45 305.244 332.335 305.244 330.948 cv
305.244 329.827 305.131 328.911 304.904 328.2 cv
304.588 327.196 304.016 326.407 303.188 325.833 cv
303.34 325.64 li
303.957 325.983 304.531 326.503 305.063 327.198 cv
305.879 328.269 306.287 329.468 306.287 330.796 cv
306.287 331.378 306.211 331.929 306.059 332.448 cv
cp
f
50.9023 303.899 mo
46.1685 300.875 li
48.6245 301.013 li
49.8774 299.853 li
50.9023 303.899 li
f
50.9023 303.899 mo
46.1685 300.875 li
48.6245 301.013 li
49.8774 299.853 li
50.9023 303.899 li
.845945 .553429 0 0 cmyk
f
.12 lw
50.9023 303.899 mo
46.1685 300.875 li
48.6245 301.013 li
49.8774 299.853 li
50.9023 303.899 li
@
.84 lw
49.1035 301.677 mo
44.8374 296.076 li
@
54.0625 303.246 mo
50.2886 299.782 li
52.6675 300.169 li
54.2412 299.156 li
54.0625 303.246 li
0 0 0 1 cmyk
f
54.0625 303.246 mo
50.2886 299.782 li
52.6675 300.169 li
54.2412 299.156 li
54.0625 303.246 li
0 .991974 1 .27 cmyk
f
.12 lw
54.0625 303.246 mo
50.2886 299.782 li
52.6675 300.169 li
54.2412 299.156 li
54.0625 303.246 li
0 0 0 1 cmyk
@
.84 lw
52.9434 300.873 mo
46.6514 286.602 li
0 .991974 1 .27 cmyk
@
48.8745 307.399 mo
47.3975 311.425 li
46.1782 310.158 li
43.8535 310.216 li
48.8745 307.399 li
0 0 0 1 cmyk
f
48.8745 307.399 mo
47.3975 311.425 li
46.1782 310.157 li
43.8535 310.216 li
48.8745 307.399 li
0 .521447 0 0 cmyk
f
.12 lw
48.8745 307.399 mo
47.3975 311.425 li
46.1782 310.157 li
43.8535 310.216 li
48.8745 307.399 li
@
54.8696 307.502 mo
54.5977 311.618 li
53.0254 310.495 li
50.7524 310.791 li
54.8696 307.502 li
0 0 0 1 cmyk
f
54.8696 307.502 mo
54.5977 311.618 li
53.0254 310.495 li
50.7524 310.791 li
54.8696 307.502 li
1 0 .5 0 cmyk
f
54.8696 307.502 mo
54.5977 311.618 li
53.0254 310.495 li
50.7524 310.791 li
54.8696 307.502 li
@
59.4634 306.848 mo
63.2363 310.311 li
60.8584 309.924 li
59.2842 310.938 li
59.4634 306.848 li
0 0 0 1 cmyk
f
59.4634 306.848 mo
63.2363 310.311 li
60.8584 309.924 li
59.2842 310.938 li
59.4634 306.848 li
0 .35 1 0 cmyk
f
59.4634 306.848 mo
63.2363 310.311 li
60.8584 309.924 li
59.2842 310.938 li
59.4634 306.848 li
@
43.8604 306.425 mo
40.1436 309.91 li
39.7314 308.473 li
37.5137 308.058 li
43.8604 306.425 li
0 0 0 1 cmyk
f
43.8604 306.425 mo
40.1436 309.91 li
39.7314 308.473 li
37.5137 308.058 li
43.8604 306.425 li
1 0 0 0 cmyk
f
43.8604 306.425 mo
40.1436 309.91 li
39.7314 308.473 li
37.5137 308.058 li
43.8604 306.425 li
@
.84 lw
46.8267 309.545 mo
28.2266 329.103 li
0 .521447 0 0 cmyk
@
57.6016 301.981 mo
54.3535 298.335 li
56.6655 298.843 li
58.3823 297.915 li
57.6016 301.981 li
0 0 1 .43 cmyk
f
.12 lw
57.6016 301.981 mo
54.3535 298.335 li
56.6655 298.843 li
58.3823 297.915 li
57.6016 301.981 li
0 0 0 1 cmyk
@
.84 lw
56.8364 299.559 mo
50.1855 276.489 li
0 0 1 .43 cmyk
@
60.1626 301.484 mo
57.4644 297.686 li
59.6934 298.311 li
61.5405 297.475 li
60.1626 301.484 li
0 0 0 1 cmyk
f
60.1626 301.484 mo
57.4644 297.686 li
59.6934 298.311 li
61.5405 297.475 li
60.1626 301.484 li
.33 1 0 0 cmyk
f
.12 lw
60.1626 301.484 mo
57.4644 297.686 li
59.6934 298.311 li
61.5405 297.475 li
60.1626 301.484 li
@
.84 lw
59.7573 299.033 mo
55.0405 265.855 li
@
.6 lw
322.24 14.2778 mo
322.24 305.459 li
31.0752 305.459 li
31.0752 14.2778 li
322.24 14.2778 li
0 0 0 1 cmyk
@
38.2026 264.745 mo
31.7905 264.745 li
@
176.861 301.648 mo
176.861 305.437 li
@
147.467 299.585 mo
147.467 305.437 li
@
118.628 301.648 mo
118.628 305.437 li
@
89.6064 299.585 mo
89.6064 305.437 li
@
234.348 301.648 mo
234.348 305.437 li
@
205.326 299.585 mo
205.326 305.437 li
@
291.088 301.648 mo
291.088 305.437 li
@
262.065 299.585 mo
262.065 305.437 li
@
176.861 14.8789 mo
176.861 18.668 li
@
147.467 14.5811 mo
147.467 20.4331 li
@
118.628 14.8789 mo
118.628 18.668 li
@
89.9805 14.5811 mo
89.9805 20.4331 li
@
61.1426 14.8789 mo
61.1426 18.668 li
@
234.348 14.8789 mo
234.348 18.668 li
@
205.326 14.5811 mo
205.326 20.4331 li
@
291.088 14.8789 mo
291.088 18.668 li
@
262.065 14.5811 mo
262.065 20.4331 li
@
62.6353 301.648 mo
62.6353 305.437 li
@
41.6943 223.691 mo
31.7905 223.691 li
@
38.2026 181.802 mo
31.7905 181.802 li
@
41.6943 140.748 mo
31.7905 140.748 li
@
38.2026 98.8589 mo
31.7905 98.8589 li
@
41.6943 57.8057 mo
31.7905 57.8057 li
@
321.528 264.745 mo
315.116 264.745 li
@
322.406 223.691 mo
312.503 223.691 li
@
321.901 181.802 mo
315.489 181.802 li
@
322.406 140.748 mo
312.503 140.748 li
@
321.901 98.8589 mo
315.489 98.8589 li
@
322.406 57.8057 mo
312.503 57.8057 li
@
62.3496 303.868 mo
60.2227 299.945 li
62.3496 300.682 li
64.3135 299.945 li
62.3496 303.868 li
@
.12 lw
62.3496 303.868 mo
60.2227 299.945 li
62.3496 300.682 li
64.3135 299.945 li
62.3496 303.868 li
@
.84 lw
62.3086 301.405 mo
62.4937 256.779 li
@
40.8887 308.205 mo
21.8374 316.164 li
1 0 0 0 cmyk
@
52.9634 310.339 mo
48.1216 319.657 li
1 0 .5 0 cmyk
@
65.5376 306.811 mo
67.0137 310.837 li
68.2324 309.569 li
70.5576 309.628 li
65.5376 306.811 li
0 0 0 1 cmyk
f
65.5376 306.811 mo
67.0137 310.837 li
68.2324 309.569 li
70.5576 309.628 li
65.5376 306.811 li
.5 0 0 0 cmyk
f
.12 lw
65.5376 306.811 mo
67.0137 310.837 li
68.2324 309.569 li
70.5576 309.628 li
65.5376 306.811 li
@
74.3574 306.859 mo
77.5464 310.522 li
78.1685 309.111 li
80.4404 308.812 li
74.3574 306.859 li
0 0 0 1 cmyk
f
74.3574 306.859 mo
77.5464 310.522 li
78.1685 309.111 li
80.4404 308.812 li
74.3574 306.859 li
.66 0 1 0 cmyk
f
88.5273 306.583 mo
92.2456 310.068 li
92.6563 308.631 li
94.8755 308.216 li
88.5273 306.583 li
0 .991974 .636194 0 cmyk
f
88.5273 306.583 mo
92.2456 310.068 li
92.6563 308.631 li
94.8755 308.216 li
88.5273 306.583 li
@
.84 lw
67.5854 308.956 mo
77.9727 319.765 li
.5 0 0 0 cmyk
@
92.4365 308.793 mo
108.5 315.649 li
0 .991974 .636194 0 cmyk
@
77.9424 309.231 mo
99.4604 321.899 li
.66 0 1 0 cmyk
@
60.7393 309.689 mo
70.6646 329.014 li
0 .35 1 0 cmyk
@
217.256 147.566 mo
216.018 144.592 li
214.774 147.566 li
217.256 147.566 li
cp
212.604 150.34 mo
212.604 150.14 li
212.882 150.108 213.091 150.004 213.229 149.826 cv
213.368 149.648 213.606 149.162 213.943 148.368 cv
216.193 143.068 li
216.408 143.068 li
219.1 149.19 li
219.278 149.596 219.422 149.847 219.529 149.943 cv
219.637 150.039 219.816 150.104 220.069 150.14 cv
220.069 150.34 li
217.323 150.34 li
217.323 150.14 li
217.639 150.111 217.842 150.077 217.934 150.037 cv
218.025 149.997 218.07 149.898 218.07 149.741 cv
218.07 149.688 218.053 149.596 218.018 149.462 cv
217.982 149.33 217.934 149.189 217.87 149.042 cv
217.438 148.004 li
214.592 148.004 li
214.312 148.71 214.144 149.142 214.089 149.297 cv
214.035 149.453 214.008 149.576 214.008 149.667 cv
214.008 149.849 214.081 149.975 214.229 150.045 cv
214.32 150.087 214.492 150.119 214.744 150.14 cv
214.744 150.34 li
212.604 150.34 li
cp
0 .991974 1 .27 cmyk
f
221.917 145.457 mo
221.917 148.832 li
221.917 149.071 221.95 149.262 222.017 149.406 cv
222.147 149.674 222.386 149.807 222.734 149.807 cv
222.974 149.807 223.207 149.728 223.436 149.57 cv
223.565 149.482 223.697 149.361 223.831 149.206 cv
223.831 146.316 li
223.831 146.045 223.778 145.868 223.673 145.784 cv
223.567 145.699 223.356 145.648 223.04 145.631 cv
223.04 145.457 li
224.743 145.457 li
224.743 149.169 li
224.743 149.408 224.786 149.573 224.872 149.662 cv
224.959 149.752 225.141 149.792 225.418 149.781 cv
225.418 149.929 li
225.225 149.981 225.083 150.021 224.991 150.047 cv
224.899 150.074 224.747 150.122 224.532 150.192 cv
224.441 150.224 224.24 150.299 223.932 150.419 cv
223.914 150.419 223.903 150.411 223.899 150.395 cv
223.896 150.379 223.895 150.361 223.895 150.34 cv
223.895 149.491 li
223.655 149.775 223.438 149.986 223.24 150.124 cv
222.941 150.334 222.625 150.44 222.291 150.44 cv
221.985 150.44 221.697 150.331 221.427 150.113 cv
221.152 149.898 221.015 149.537 221.015 149.03 cv
221.015 146.29 li
221.015 146.011 220.955 145.824 220.836 145.73 cv
220.759 145.67 220.593 145.629 220.34 145.604 cv
220.34 145.457 li
221.917 145.457 li
cp
f
38.7559 282.437 mo
37.5181 279.463 li
36.2749 282.437 li
38.7559 282.437 li
cp
34.1045 285.211 mo
34.1045 285.011 li
34.3823 284.979 34.5903 284.875 34.7295 284.697 cv
34.8682 284.52 35.1064 284.033 35.4434 283.239 cv
37.6934 277.939 li
37.9087 277.939 li
40.5991 284.062 li
40.7788 284.467 40.9219 284.718 41.0293 284.814 cv
41.1362 284.91 41.3164 284.976 41.5698 285.011 cv
41.5698 285.211 li
38.8232 285.211 li
38.8232 285.011 li
39.1387 284.982 39.3423 284.948 39.4336 284.908 cv
39.5249 284.868 39.5708 284.769 39.5708 284.612 cv
39.5708 284.559 39.5532 284.467 39.5181 284.333 cv
39.4829 284.201 39.4336 284.061 39.3701 283.914 cv
38.938 282.875 li
36.0918 282.875 li
35.811 283.582 35.6436 284.013 35.5894 284.168 cv
35.5347 284.324 35.5073 284.447 35.5073 284.538 cv
35.5073 284.72 35.5811 284.846 35.729 284.916 cv
35.8198 284.958 35.9917 284.99 36.2446 285.011 cv
36.2446 285.211 li
34.1045 285.211 li
cp
f
42.8872 280.328 mo
42.8872 283.703 li
42.8872 283.942 42.9204 284.133 42.9873 284.277 cv
43.1172 284.545 43.3564 284.678 43.7046 284.678 cv
43.9434 284.678 44.1772 284.599 44.4058 284.441 cv
44.5356 284.353 44.6675 284.232 44.8013 284.077 cv
44.8013 281.188 li
44.8013 280.917 44.7485 280.739 44.6431 280.655 cv
44.5376 280.57 44.3267 280.52 44.0103 280.502 cv
44.0103 280.328 li
45.7134 280.328 li
45.7134 284.04 li
45.7134 284.279 45.7563 284.444 45.8428 284.533 cv
45.9287 284.623 46.1108 284.663 46.3887 284.652 cv
46.3887 284.8 li
46.1953 284.853 46.0527 284.892 45.9614 284.918 cv
45.8701 284.945 45.7168 284.993 45.5024 285.063 cv
45.4111 285.095 45.2109 285.17 44.9014 285.29 cv
44.8838 285.29 44.873 285.282 44.8696 285.266 cv
44.8662 285.25 44.8647 285.232 44.8647 285.211 cv
44.8647 284.362 li
44.6255 284.646 44.4077 284.857 44.2104 284.995 cv
43.9116 285.206 43.5952 285.311 43.2612 285.311 cv
42.9556 285.311 42.6675 285.202 42.3965 284.984 cv
42.1226 284.769 41.9854 284.408 41.9854 283.901 cv
41.9854 281.161 li
41.9854 280.882 41.9253 280.695 41.8062 280.601 cv
41.7285 280.542 41.5635 280.5 41.3101 280.476 cv
41.3101 280.328 li
42.8872 280.328 li
cp
f
36.5186 288.52 mo
36.2129 288.386 35.8262 288.319 35.3584 288.319 cv
35.1372 288.319 35.0005 288.341 34.9497 288.385 cv
34.8989 288.429 34.8735 288.527 34.8735 288.678 cv
34.8735 291.494 li
35.0664 291.512 35.1934 291.522 35.2529 291.525 cv
35.313 291.529 35.3706 291.531 35.4272 291.531 cv
35.9229 291.531 36.313 291.46 36.5977 291.32 cv
37.1147 291.063 37.373 290.583 37.373 289.88 cv
37.373 289.219 37.0884 288.766 36.5186 288.52 cv
cp
32.8745 294.864 mo
33.2861 294.825 33.5425 294.744 33.6445 294.62 cv
33.7466 294.495 33.7974 294.211 33.7974 293.767 cv
33.7974 289.089 li
33.7974 288.713 33.7402 288.465 33.626 288.346 cv
33.5117 288.226 33.2612 288.15 32.8745 288.119 cv
32.8745 287.918 li
35.7222 287.918 li
36.6362 287.918 37.3359 288.096 37.8213 288.451 cv
38.3062 288.806 38.5488 289.274 38.5488 289.854 cv
38.5488 290.589 38.2798 291.121 37.7422 291.452 cv
37.2041 291.782 36.5308 291.947 35.7222 291.947 cv
35.6064 291.947 35.458 291.945 35.2769 291.939 cv
35.0957 291.934 34.9609 291.932 34.8735 291.932 cv
34.8735 293.893 li
34.8735 294.299 34.9355 294.554 35.0605 294.659 cv
35.1851 294.764 35.4639 294.832 35.8965 294.864 cv
35.8965 295.064 li
32.8745 295.064 li
32.8745 294.864 li
cp
.845945 .553429 0 0 cmyk
f
40.2222 294.682 mo
40.4634 294.761 40.6753 294.8 40.8574 294.8 cv
41.3477 294.8 41.7109 294.616 41.9473 294.248 cv
42.1836 293.879 42.3018 293.433 42.3018 292.91 cv
42.3018 292.387 42.1914 291.903 41.9707 291.459 cv
41.75 291.015 41.3931 290.792 40.8994 290.792 cv
40.6509 290.792 40.4077 290.869 40.1694 291.021 cv
39.9316 291.174 39.8125 291.368 39.8125 291.604 cv
39.8125 294.29 li
39.8438 294.472 39.9805 294.603 40.2222 294.682 cv
cp
38.2148 288.356 mo
38.2148 288.177 li
38.6167 288.085 38.978 287.983 39.2993 287.871 cv
39.6201 287.758 39.793 287.702 39.8179 287.702 cv
39.8247 287.723 39.8281 287.745 39.8281 287.766 cv
39.8281 290.977 li
39.9194 290.808 40.0566 290.648 40.2388 290.497 cv
40.562 290.233 40.9341 290.102 41.3555 290.102 cv
41.8711 290.102 42.312 290.32 42.6768 290.755 cv
43.042 291.191 43.2246 291.757 43.2246 292.454 cv
43.2246 293.199 42.9873 293.837 42.5127 294.368 cv
42.0381 294.899 41.4136 295.164 40.6406 295.164 cv
40.25 295.164 39.8672 295.087 39.4907 294.932 cv
39.1147 294.777 38.9268 294.623 38.9268 294.468 cv
38.9268 288.894 li
38.9268 288.69 38.8984 288.545 38.8423 288.459 cv
38.7861 288.373 38.6558 288.33 38.4521 288.33 cv
38.2148 288.356 li
cp
f
103.655 328.727 mo
102.417 325.752 li
101.174 328.727 li
103.655 328.727 li
cp
99.0034 331.5 mo
99.0034 331.3 li
99.2813 331.269 99.4893 331.164 99.6284 330.986 cv
99.7671 330.809 100.005 330.322 100.342 329.528 cv
102.592 324.228 li
102.808 324.228 li
105.498 330.351 li
105.678 330.756 105.821 331.007 105.928 331.103 cv
106.035 331.199 106.215 331.265 106.469 331.3 cv
106.469 331.5 li
103.722 331.5 li
103.722 331.3 li
104.038 331.271 104.241 331.237 104.333 331.197 cv
104.424 331.157 104.47 331.059 104.47 330.9 cv
104.47 330.849 104.452 330.756 104.417 330.623 cv
104.382 330.489 104.333 330.35 104.269 330.203 cv
103.837 329.164 li
100.991 329.164 li
100.71 329.87 100.542 330.302 100.488 330.457 cv
100.434 330.613 100.406 330.736 100.406 330.827 cv
100.406 331.009 100.48 331.135 100.628 331.205 cv
100.719 331.247 100.891 331.278 101.144 331.3 cv
101.144 331.5 li
99.0034 331.5 li
cp
.66 0 1 0 cmyk
f
106.865 331.353 mo
107.192 331.32 107.414 331.255 107.529 331.154 cv
107.646 331.055 107.704 330.858 107.704 330.566 cv
107.704 325.415 li
107.704 325.183 107.684 325.022 107.646 324.935 cv
107.575 324.787 107.433 324.713 107.218 324.713 cv
107.169 324.713 107.116 324.718 107.058 324.729 cv
107 324.739 106.926 324.755 106.839 324.776 cv
106.839 324.603 li
107.313 324.476 107.885 324.307 108.553 324.096 cv
108.577 324.096 108.592 324.106 108.597 324.128 cv
108.603 324.149 108.605 324.194 108.605 324.265 cv
108.605 330.588 li
108.605 330.894 108.658 331.092 108.764 331.181 cv
108.869 331.271 109.087 331.328 109.417 331.353 cv
109.417 331.5 li
106.865 331.5 li
106.865 331.353 li
cp
f
71.2085 330.578 mo
77.3149 330.578 li
77.373 332.413 li
77.1147 332.413 li
76.9883 331.837 76.8271 331.462 76.6323 331.287 cv
76.437 331.113 76.0264 331.026 75.4009 331.026 cv
74.7998 331.026 li
74.7998 336.553 li
74.7998 336.969 74.8647 337.227 74.9946 337.326 cv
75.125 337.426 75.4097 337.492 75.8491 337.523 cv
75.8491 337.724 li
72.7007 337.724 li
72.7007 337.523 li
73.1577 337.488 73.4424 337.413 73.5552 337.298 cv
73.6675 337.182 73.7241 336.892 73.7241 336.427 cv
73.7241 331.026 li
73.1177 331.026 li
72.5195 331.026 72.1128 331.112 71.8965 331.285 cv
71.6807 331.457 71.5176 331.833 71.4087 332.413 cv
71.145 332.413 li
71.2085 330.578 li
cp
0 .35 1 0 cmyk
f
80.6904 334.802 mo
80.2861 334.936 79.9521 335.083 79.6885 335.245 cv
79.1821 335.558 78.9287 335.913 78.9287 336.311 cv
78.9287 336.63 79.0342 336.866 79.2451 337.017 cv
79.3823 337.115 79.5352 337.165 79.7041 337.165 cv
79.936 337.165 80.1582 337.1 80.3711 336.97 cv
80.584 336.84 80.6904 336.674 80.6904 336.474 cv
80.6904 334.802 li
cp
78.7549 335.398 mo
79.0781 335.188 79.7231 334.9 80.6904 334.538 cv
80.6904 334.09 li
80.6904 333.731 80.6553 333.482 80.585 333.342 cv
80.4653 333.105 80.2173 332.988 79.8413 332.988 cv
79.6621 332.988 79.4912 333.034 79.3296 333.125 cv
79.168 333.22 79.0869 333.351 79.0869 333.516 cv
79.0869 333.558 79.0957 333.629 79.1133 333.729 cv
79.1309 333.829 79.1396 333.894 79.1396 333.922 cv
79.1396 334.118 79.0747 334.256 78.9448 334.333 cv
78.8711 334.379 78.7832 334.401 78.6812 334.401 cv
78.5229 334.401 78.4014 334.35 78.3174 334.246 cv
78.2329 334.143 78.1904 334.027 78.1904 333.9 cv
78.1904 333.654 78.3428 333.396 78.647 333.128 cv
78.9507 332.858 79.3965 332.725 79.9834 332.725 cv
80.6655 332.725 81.1279 332.946 81.3706 333.389 cv
81.5005 333.632 81.5654 333.984 81.5654 334.449 cv
81.5654 336.563 li
81.5654 336.768 81.5796 336.908 81.6079 336.985 cv
81.6533 337.122 81.7485 337.191 81.8926 337.191 cv
81.9736 337.191 82.04 337.179 82.0928 337.154 cv
82.1455 337.13 82.2373 337.069 82.3672 336.975 cv
82.3672 337.249 li
82.2544 337.386 82.1333 337.499 82.0034 337.587 cv
81.8062 337.72 81.606 337.787 81.4023 337.787 cv
81.1631 337.787 80.9897 337.71 80.8828 337.555 cv
80.7754 337.4 80.7168 337.216 80.7061 337.001 cv
80.439 337.233 80.2104 337.405 80.0205 337.518 cv
79.7007 337.708 79.3965 337.803 79.1084 337.803 cv
78.8057 337.803 78.5439 337.696 78.3223 337.483 cv
78.1011 337.271 77.9902 337.001 77.9902 336.674 cv
77.9902 336.164 78.2451 335.739 78.7549 335.398 cv
cp
f
20.522 331.178 mo
20.522 331.378 li
20.3076 331.385 20.1543 331.404 20.063 331.437 cv
19.9014 331.496 19.8203 331.604 19.8203 331.763 cv
19.8203 331.833 19.8301 331.902 19.8496 331.969 cv
19.8687 332.035 19.8979 332.122 19.9365 332.228 cv
21.4985 336.288 li
22.6401 333.262 li
22.1348 331.938 li
22.0396 331.698 21.8975 331.538 21.7075 331.457 cv
21.5947 331.408 21.4243 331.382 21.1958 331.378 cv
21.1958 331.178 li
24.0879 331.178 li
24.0879 331.378 li
23.8169 331.382 23.6309 331.401 23.5288 331.437 cv
23.3672 331.496 23.2861 331.619 23.2861 331.806 cv
23.2861 331.868 23.2935 331.924 23.3076 331.972 cv
23.3213 332.019 23.3564 332.116 23.4131 332.264 cv
24.9736 336.314 li
26.3252 332.649 li
26.4023 332.441 26.4551 332.257 26.4834 332.096 cv
26.501 332.004 26.5098 331.93 26.5098 331.874 cv
26.5098 331.674 26.4146 331.534 26.2251 331.457 cv
26.1196 331.411 25.9614 331.385 25.7505 331.378 cv
25.7505 331.178 li
27.8945 331.178 li
27.8945 331.378 li
27.7012 331.406 27.5532 331.45 27.4512 331.51 cv
27.2686 331.612 27.1313 331.788 27.04 332.038 cv
25.9092 335.258 li
25.4731 336.5 li
24.7886 338.45 li
24.6216 338.45 li
24.1494 337.214 li
22.8994 333.887 li
21.2402 338.45 li
21.0771 338.45 li
20.2725 336.213 li
19.3618 333.681 li
18.9863 332.638 18.7236 331.997 18.5742 331.76 cv
18.4248 331.523 18.1919 331.396 17.8755 331.378 cv
17.8755 331.178 li
20.522 331.178 li
cp
0 .521447 0 0 cmyk
f
12.981 316.007 mo
12.981 316.208 li
12.5664 316.236 12.2974 316.305 12.1743 316.416 cv
12.0513 316.527 11.9897 316.781 11.9897 317.178 cv
11.9897 320.632 li
11.9897 321.198 12.0669 321.639 12.2217 321.956 cv
12.5098 322.532 13.0566 322.821 13.8618 322.821 cv
14.7441 322.821 15.3364 322.525 15.6387 321.935 cv
15.8076 321.604 15.8921 321.094 15.8921 320.405 cv
15.8921 317.595 li
15.8921 317.007 15.8218 316.639 15.6812 316.49 cv
15.5405 316.34 15.2729 316.247 14.8794 316.208 cv
14.8794 316.007 li
17.3789 316.007 li
17.3789 316.208 li
16.9604 316.253 16.6875 316.354 16.5591 316.511 cv
16.4307 316.667 16.3667 317.029 16.3667 317.595 cv
16.3667 320.405 li
16.3667 321.151 16.2524 321.732 16.0239 322.151 cv
15.6021 322.921 14.8003 323.306 13.6191 323.306 cv
12.4517 323.306 11.6572 322.926 11.2354 322.167 cv
11.0068 321.759 10.8926 321.221 10.8926 320.553 cv
10.8926 317.178 li
10.8926 316.784 10.832 316.532 10.7109 316.421 cv
10.5894 316.311 10.3252 316.239 9.91699 316.208 cv
9.91699 316.007 li
12.981 316.007 li
cp
1 0 0 0 cmyk
f
44.5913 326.265 mo
44.9639 326.05 45.1499 325.639 45.1499 325.031 cv
45.1499 324.426 44.9321 324.013 44.4961 323.792 cv
44.0601 323.57 43.5049 323.459 42.8296 323.459 cv
42.6646 323.459 42.5601 323.459 42.5161 323.459 cv
42.4722 323.459 42.4043 323.458 42.313 323.454 cv
42.313 326.144 li
42.313 326.33 42.3657 326.45 42.4712 326.504 cv
42.5767 326.559 42.8208 326.586 43.2041 326.586 cv
43.7559 326.586 44.2183 326.479 44.5913 326.265 cv
cp
44.2432 322.858 mo
44.7002 322.646 44.9287 322.268 44.9287 321.722 cv
44.9287 321.077 44.665 320.642 44.1377 320.417 cv
43.8457 320.293 43.4028 320.232 42.8086 320.232 cv
42.5835 320.232 42.4448 320.251 42.3921 320.29 cv
42.3394 320.329 42.313 320.435 42.313 320.607 cv
42.313 323.048 li
43.3413 323.032 li
43.7031 323.025 44.0039 322.967 44.2432 322.858 cv
cp
40.1826 326.776 mo
40.6162 326.751 40.897 326.685 41.0244 326.574 cv
41.1523 326.464 41.2163 326.208 41.2163 325.806 cv
41.2163 321.002 li
41.2163 320.604 41.1523 320.349 41.0244 320.234 cv
40.897 320.12 40.6162 320.053 40.1826 320.031 cv
40.1826 319.831 li
43.2065 319.831 li
44.0708 319.831 44.7563 319.97 45.2642 320.248 cv
45.7715 320.526 46.0254 321.004 46.0254 321.684 cv
46.0254 322.194 45.8481 322.581 45.4927 322.845 cv
45.2925 322.996 44.9917 323.121 44.5913 323.22 cv
45.0869 323.339 45.5103 323.539 45.8618 323.818 cv
46.2134 324.097 46.3892 324.488 46.3892 324.99 cv
46.3892 325.833 45.9995 326.413 45.2197 326.729 cv
44.8086 326.894 44.3027 326.977 43.7021 326.977 cv
40.1826 326.977 li
40.1826 326.776 li
cp
1 0 .5 0 cmyk
f
50.292 324.055 mo
49.8877 324.189 49.5537 324.336 49.29 324.498 cv
48.7837 324.811 48.5303 325.166 48.5303 325.563 cv
48.5303 325.883 48.6357 326.119 48.8467 326.27 cv
48.9839 326.368 49.1367 326.417 49.3057 326.417 cv
49.5376 326.417 49.7598 326.353 49.9727 326.223 cv
50.1855 326.092 50.292 325.927 50.292 325.727 cv
50.292 324.055 li
cp
48.3564 324.651 mo
48.6797 324.44 49.3247 324.153 50.292 323.792 cv
50.292 323.343 li
50.292 322.984 50.2568 322.735 50.1865 322.594 cv
50.0669 322.359 49.8188 322.241 49.4429 322.241 cv
49.2637 322.241 49.0928 322.287 48.9312 322.378 cv
48.7695 322.473 48.6885 322.603 48.6885 322.769 cv
48.6885 322.811 48.6973 322.882 48.7148 322.982 cv
48.7324 323.082 48.7412 323.146 48.7412 323.174 cv
48.7412 323.372 48.6763 323.508 48.5464 323.586 cv
48.4727 323.631 48.3848 323.654 48.2827 323.654 cv
48.1245 323.654 48.0029 323.603 47.9189 323.499 cv
47.8345 323.395 47.792 323.28 47.792 323.153 cv
47.792 322.907 47.9443 322.65 48.2485 322.381 cv
48.5522 322.112 48.998 321.978 49.585 321.978 cv
50.2671 321.978 50.7295 322.199 50.9722 322.642 cv
51.1021 322.884 51.167 323.238 51.167 323.702 cv
51.167 325.816 li
51.167 326.021 51.1812 326.161 51.2095 326.238 cv
51.2549 326.375 51.3501 326.444 51.4941 326.444 cv
51.5752 326.444 51.6416 326.432 51.6943 326.407 cv
51.7471 326.382 51.8389 326.323 51.9688 326.228 cv
51.9688 326.502 li
51.856 326.639 51.7349 326.751 51.605 326.839 cv
51.4077 326.973 51.2075 327.04 51.0039 327.04 cv
50.7646 327.04 50.5913 326.962 50.4844 326.808 cv
50.377 326.653 50.3184 326.469 50.3076 326.254 cv
50.0405 326.486 49.812 326.658 49.6221 326.771 cv
49.3022 326.961 48.998 327.056 48.71 327.056 cv
48.4072 327.056 48.1455 326.949 47.9238 326.737 cv
47.7026 326.524 47.5918 326.254 47.5918 325.927 cv
47.5918 325.417 47.8467 324.992 48.3564 324.651 cv
cp
f
79.8599 327.376 mo
80.3066 327.331 80.5933 327.229 80.7197 327.073 cv
80.8462 326.917 80.9097 326.554 80.9097 325.985 cv
80.9097 321.227 li
80.7617 321.053 li
80.6035 320.867 80.4692 320.752 80.3584 320.708 cv
80.2476 320.664 80.0815 320.639 79.8599 320.631 cv
79.8599 320.431 li
81.7026 320.431 li
85.8716 325.599 li
85.8716 322.009 li
85.8716 321.419 85.7837 321.035 85.6079 320.857 cv
85.4922 320.742 85.2354 320.667 84.8384 320.631 cv
84.8384 320.431 li
87.3745 320.431 li
87.3745 320.631 li
86.9634 320.674 86.689 320.774 86.5522 320.932 cv
86.415 321.09 86.3462 321.453 86.3462 322.019 cv
86.3462 327.703 li
86.1616 327.703 li
81.3843 321.781 li
81.3843 325.985 li
81.3843 326.576 81.4702 326.96 81.6426 327.139 cv
81.7549 327.255 82.0063 327.334 82.3965 327.376 cv
82.3965 327.577 li
79.8599 327.577 li
79.8599 327.376 li
cp
.5 0 0 0 cmyk
f
88.5874 320.377 mo
88.6929 320.269 88.8228 320.215 88.9775 320.215 cv
89.1289 320.215 89.2578 320.269 89.3652 320.375 cv
89.4727 320.482 89.5264 320.612 89.5264 320.766 cv
89.5264 320.917 89.4727 321.045 89.3652 321.152 cv
89.2578 321.258 89.1289 321.312 88.9775 321.312 cv
88.8228 321.312 88.6929 321.258 88.5874 321.152 cv
88.4819 321.045 88.4292 320.917 88.4292 320.766 cv
88.4292 320.616 88.4819 320.486 88.5874 320.377 cv
cp
87.749 327.429 mo
88.125 327.394 88.3623 327.33 88.4609 327.236 cv
88.5591 327.144 88.6084 326.891 88.6084 326.48 cv
88.6084 323.964 li
88.6084 323.736 88.5928 323.578 88.561 323.49 cv
88.5083 323.346 88.3975 323.273 88.229 323.273 cv
88.1899 323.273 88.1523 323.277 88.1157 323.284 cv
88.0786 323.291 87.9722 323.319 87.7964 323.369 cv
87.7964 323.205 li
88.0234 323.131 li
88.6382 322.931 89.0674 322.78 89.3101 322.678 cv
89.4082 322.635 89.4717 322.614 89.5 322.614 cv
89.5068 322.639 89.5103 322.666 89.5103 322.693 cv
89.5103 326.48 li
89.5103 326.88 89.5586 327.132 89.6553 327.234 cv
89.752 327.336 89.9707 327.401 90.312 327.429 cv
90.312 327.577 li
87.749 327.577 li
87.749 327.429 li
cp
f
115.397 315.014 mo
115.809 315.13 116.039 315.188 116.088 315.188 cv
116.19 315.188 116.287 315.16 116.378 315.104 cv
116.47 315.047 116.533 314.959 116.568 314.84 cv
116.795 314.84 li
116.895 317.266 li
116.647 317.266 li
116.503 316.784 116.315 316.396 116.083 316.1 cv
115.64 315.544 115.044 315.267 114.295 315.267 cv
113.539 315.267 112.921 315.566 112.441 316.164 cv
111.962 316.761 111.722 317.584 111.722 318.631 cv
111.722 319.595 111.974 320.364 112.479 320.938 cv
112.983 321.513 113.622 321.801 114.396 321.801 cv
114.955 321.801 115.469 321.667 115.94 321.4 cv
116.211 321.249 116.508 321.02 116.832 320.714 cv
117.032 320.915 li
116.793 321.217 116.496 321.482 116.141 321.711 cv
115.536 322.098 114.88 322.291 114.174 322.291 cv
113.014 322.291 112.093 321.92 111.411 321.178 cv
110.781 320.493 110.467 319.637 110.467 318.61 cv
110.467 317.559 110.799 316.677 111.463 315.963 cv
112.163 315.214 113.074 314.84 114.195 314.84 cv
114.585 314.84 114.986 314.898 115.397 315.014 cv
cp
0 .991974 .636194 0 cmyk
f
51.4814 306.915 mo
52.8423 306.915 53.9453 306.263 53.9453 305.459 cv
53.9453 304.655 52.8423 304.003 51.4814 304.003 cv
50.1216 304.003 49.0186 304.655 49.0186 305.459 cv
49.0186 306.263 50.1216 306.915 51.4814 306.915 cv
0 0 0 1 cmyk
f
47.2515 306.915 mo
48.6113 306.915 49.7153 306.263 49.7153 305.459 cv
49.7153 304.655 48.6113 304.003 47.2515 304.003 cv
45.8906 304.003 44.7876 304.655 44.7876 305.459 cv
44.7876 306.263 45.8906 306.915 47.2515 306.915 cv
f
59.1963 306.915 mo
60.5576 306.915 61.6606 306.263 61.6606 305.459 cv
61.6606 304.655 60.5576 304.003 59.1963 304.003 cv
57.8354 304.003 56.7334 304.655 56.7334 305.459 cv
56.7334 306.263 57.8354 306.915 59.1963 306.915 cv
f
64.6714 306.915 mo
66.0313 306.915 67.1353 306.263 67.1353 305.459 cv
67.1353 304.655 66.0313 304.003 64.6714 304.003 cv
63.3105 304.003 62.2085 304.655 62.2085 305.459 cv
62.2085 306.263 63.3105 306.915 64.6714 306.915 cv
f
54.9653 306.915 mo
56.3267 306.915 57.4292 306.263 57.4292 305.459 cv
57.4292 304.655 56.3267 304.003 54.9653 304.003 cv
53.6055 304.003 52.5024 304.655 52.5024 305.459 cv
52.5024 306.263 53.6055 306.915 54.9653 306.915 cv
f
78.6074 306.915 mo
79.9683 306.915 81.0713 306.263 81.0713 305.459 cv
81.0713 304.655 79.9683 304.003 78.6074 304.003 cv
77.2476 304.003 76.1445 304.655 76.1445 305.459 cv
76.1445 306.263 77.2476 306.915 78.6074 306.915 cv
f
86.5703 306.915 mo
87.9316 306.915 89.0342 306.263 89.0342 305.459 cv
89.0342 304.655 87.9316 304.003 86.5703 304.003 cv
85.2104 304.003 84.1074 304.655 84.1074 305.459 cv
84.1074 306.263 85.2104 306.915 86.5703 306.915 cv
.742031 .683345 .662623 .894285 cmyk
f
74.3765 306.915 mo
75.7373 306.915 76.8403 306.263 76.8403 305.459 cv
76.8403 304.655 75.7373 304.003 74.3765 304.003 cv
73.0166 304.003 71.9136 304.655 71.9136 305.459 cv
71.9136 306.263 73.0166 306.915 74.3765 306.915 cv
0 0 0 1 cmyk
f
264.64 246.837 mo
270.907 246.837 275.989 245.859 275.989 244.654 cv
275.989 243.447 270.907 242.47 264.64 242.47 cv
258.37 242.47 253.289 243.447 253.289 244.654 cv
253.289 245.859 258.37 246.837 264.64 246.837 cv
0 0 0 0 cmyk
f
269.046 257.14 mo
275.313 257.14 280.396 256.162 280.396 254.956 cv
280.396 253.75 275.313 252.772 269.046 252.772 cv
262.777 252.772 257.695 253.75 257.695 254.956 cv
257.695 256.162 262.777 257.14 269.046 257.14 cv
f
274.445 268.74 mo
280.714 268.74 285.796 267.762 285.796 266.556 cv
285.796 265.35 280.714 264.372 274.445 264.372 cv
268.178 264.372 263.096 265.35 263.096 266.556 cv
263.096 267.762 268.178 268.74 274.445 268.74 cv
f
281.445 283.74 mo
287.714 283.74 292.796 282.762 292.796 281.556 cv
292.796 280.35 287.714 279.372 281.445 279.372 cv
275.178 279.372 270.096 280.35 270.096 281.556 cv
270.096 282.762 275.178 283.74 281.445 283.74 cv
f
251.265 221.837 mo
257.532 221.837 262.614 220.859 262.614 219.654 cv
262.614 218.447 257.532 217.47 251.265 217.47 cv
244.995 217.47 239.914 218.447 239.914 219.654 cv
239.914 220.859 244.995 221.837 251.265 221.837 cv
f
251.761 215.468 mo
252.173 215.584 252.402 215.642 252.452 215.642 cv
252.554 215.642 252.65 215.614 252.742 215.558 cv
252.833 215.501 252.896 215.414 252.932 215.294 cv
253.158 215.294 li
253.259 217.72 li
253.011 217.72 li
252.867 217.238 252.679 216.85 252.446 216.554 cv
252.004 215.999 251.408 215.721 250.659 215.721 cv
249.903 215.721 249.285 216.02 248.806 216.618 cv
248.325 217.215 248.086 218.038 248.086 219.085 cv
248.086 220.049 248.338 220.818 248.843 221.393 cv
249.347 221.967 249.985 222.255 250.759 222.255 cv
251.318 222.255 251.833 222.121 252.305 221.854 cv
252.575 221.703 252.872 221.474 253.195 221.168 cv
253.396 221.369 li
253.157 221.671 252.859 221.937 252.505 222.165 cv
251.9 222.552 251.244 222.745 250.538 222.745 cv
249.378 222.745 248.456 222.375 247.774 221.632 cv
247.146 220.947 246.83 220.091 246.83 219.064 cv
246.83 218.013 247.163 217.131 247.827 216.417 cv
248.526 215.668 249.438 215.294 250.559 215.294 cv
250.949 215.294 251.35 215.352 251.761 215.468 cv
cp
.33 1 0 0 cmyk
f
255.437 217.683 mo
255.437 221.058 li
255.437 221.297 255.47 221.488 255.536 221.632 cv
255.667 221.9 255.905 222.033 256.254 222.033 cv
256.493 222.033 256.727 221.954 256.955 221.796 cv
257.085 221.708 257.217 221.587 257.351 221.432 cv
257.351 218.542 li
257.351 218.271 257.298 218.094 257.192 218.01 cv
257.087 217.925 256.876 217.875 256.56 217.857 cv
256.56 217.683 li
258.263 217.683 li
258.263 221.395 li
258.263 221.634 258.306 221.799 258.392 221.888 cv
258.479 221.978 258.66 222.018 258.938 222.007 cv
258.938 222.155 li
258.744 222.208 258.603 222.247 258.511 222.273 cv
258.419 222.3 258.267 222.348 258.052 222.418 cv
257.961 222.45 257.76 222.525 257.451 222.645 cv
257.434 222.645 257.423 222.637 257.419 222.621 cv
257.416 222.605 257.414 222.587 257.414 222.566 cv
257.414 221.717 li
257.175 222.001 256.957 222.212 256.76 222.35 cv
256.461 222.561 256.145 222.666 255.811 222.666 cv
255.505 222.666 255.217 222.557 254.946 222.339 cv
254.672 222.124 254.534 221.763 254.534 221.256 cv
254.534 218.516 li
254.534 218.237 254.475 218.05 254.355 217.956 cv
254.278 217.896 254.112 217.855 253.859 217.831 cv
253.859 217.683 li
255.437 217.683 li
cp
f
258.602 248.016 mo
259.027 247.97 259.292 247.893 259.396 247.782 cv
259.499 247.672 259.551 247.384 259.551 246.919 cv
259.551 242.242 li
259.551 241.858 259.493 241.608 259.377 241.49 cv
259.261 241.372 259.003 241.299 258.602 241.271 cv
258.602 241.071 li
264.355 241.071 li
264.392 242.616 li
264.092 242.616 li
264.018 242.123 263.879 241.81 263.675 241.679 cv
263.471 241.548 263.068 241.482 262.467 241.482 cv
260.986 241.482 li
260.842 241.482 260.749 241.507 260.709 241.556 cv
260.668 241.605 260.647 241.702 260.647 241.846 cv
260.647 244.256 li
262.214 244.256 li
262.675 244.256 262.968 244.188 263.095 244.051 cv
263.222 243.915 263.323 243.639 263.4 243.222 cv
263.653 243.222 li
263.653 245.717 li
263.4 245.717 li
263.319 245.298 263.216 245.021 263.09 244.886 cv
262.963 244.751 262.671 244.683 262.214 244.683 cv
260.647 244.683 li
260.647 247.045 li
260.647 247.441 260.709 247.693 260.83 247.804 cv
260.951 247.914 261.216 247.984 261.623 248.016 cv
261.623 248.216 li
258.602 248.216 li
258.602 248.016 li
cp
0 0 0 1 cmyk
f
265.737 244.188 mo
265.625 244.377 265.544 244.616 265.494 244.905 cv
267.72 244.905 li
267.682 244.553 267.614 244.291 267.52 244.119 cv
267.348 243.81 267.059 243.655 266.654 243.655 cv
266.254 243.655 265.948 243.833 265.737 244.188 cv
cp
268.263 243.784 mo
268.636 244.127 268.822 244.613 268.822 245.242 cv
265.474 245.242 li
265.509 246.056 265.693 246.649 266.027 247.021 cv
266.361 247.392 266.757 247.578 267.214 247.578 cv
267.583 247.578 267.894 247.482 268.147 247.289 cv
268.4 247.096 268.634 246.822 268.849 246.468 cv
269.033 246.531 li
268.889 246.979 268.619 247.392 268.224 247.772 cv
267.828 248.153 267.344 248.343 266.771 248.343 cv
266.109 248.343 265.599 248.093 265.239 247.594 cv
264.878 247.095 264.698 246.52 264.698 245.87 cv
264.698 245.163 264.907 244.553 265.326 244.04 cv
265.744 243.526 266.289 243.27 266.961 243.27 cv
267.456 243.27 267.891 243.441 268.263 243.784 cv
cp
f
263.023 258.184 mo
263.47 258.138 263.757 258.037 263.883 257.88 cv
264.01 257.724 264.073 257.361 264.073 256.792 cv
264.073 252.034 li
263.926 251.86 li
263.768 251.674 263.633 251.559 263.521 251.515 cv
263.411 251.471 263.245 251.446 263.023 251.438 cv
263.023 251.238 li
264.866 251.238 li
269.035 256.406 li
269.035 252.816 li
269.035 252.226 268.947 251.842 268.771 251.664 cv
268.655 251.549 268.399 251.474 268.002 251.438 cv
268.002 251.238 li
270.538 251.238 li
270.538 251.438 li
270.127 251.481 269.853 251.581 269.716 251.739 cv
269.578 251.897 269.51 252.26 269.51 252.826 cv
269.51 258.51 li
269.325 258.51 li
264.548 252.588 li
264.548 256.792 li
264.548 257.383 264.634 257.767 264.806 257.946 cv
264.919 258.063 265.17 258.141 265.561 258.184 cv
265.561 258.384 li
263.023 258.384 li
263.023 258.184 li
cp
.5 0 0 0 cmyk
f
271.752 251.185 mo
271.857 251.076 271.987 251.022 272.142 251.022 cv
272.293 251.022 272.422 251.076 272.529 251.182 cv
272.637 251.289 272.69 251.419 272.69 251.573 cv
272.69 251.724 272.637 251.852 272.529 251.959 cv
272.422 252.065 272.293 252.119 272.142 252.119 cv
271.987 252.119 271.857 252.065 271.752 251.959 cv
271.646 251.852 271.594 251.724 271.594 251.573 cv
271.594 251.423 271.646 251.293 271.752 251.185 cv
cp
270.913 258.236 mo
271.289 258.201 271.526 258.137 271.625 258.043 cv
271.724 257.951 271.772 257.698 271.772 257.287 cv
271.772 254.771 li
271.772 254.543 271.757 254.385 271.726 254.297 cv
271.673 254.153 271.562 254.081 271.393 254.081 cv
271.354 254.081 271.316 254.084 271.279 254.091 cv
271.243 254.098 271.137 254.126 270.961 254.176 cv
270.961 254.012 li
271.188 253.938 li
271.803 253.738 272.231 253.587 272.474 253.485 cv
272.572 253.442 272.636 253.421 272.664 253.421 cv
272.671 253.446 272.675 253.473 272.675 253.5 cv
272.675 257.287 li
272.675 257.688 272.723 257.939 272.819 258.041 cv
272.916 258.143 273.135 258.208 273.476 258.236 cv
273.476 258.384 li
270.913 258.384 li
270.913 258.236 li
cp
f
282.646 278.042 mo
283.058 278.158 283.287 278.216 283.337 278.216 cv
283.438 278.216 283.535 278.188 283.627 278.131 cv
283.718 278.075 283.781 277.987 283.816 277.868 cv
284.043 277.868 li
284.144 280.293 li
283.896 280.293 li
283.752 279.812 283.563 279.423 283.331 279.128 cv
282.889 278.572 282.293 278.295 281.544 278.295 cv
280.788 278.295 280.17 278.594 279.69 279.191 cv
279.21 279.789 278.971 280.612 278.971 281.659 cv
278.971 282.623 279.223 283.392 279.728 283.966 cv
280.231 284.541 280.87 284.829 281.644 284.829 cv
282.203 284.829 282.718 284.695 283.189 284.428 cv
283.46 284.277 283.757 284.048 284.08 283.742 cv
284.28 283.942 li
284.042 284.245 283.744 284.51 283.39 284.739 cv
282.785 285.125 282.129 285.319 281.423 285.319 cv
280.263 285.319 279.341 284.948 278.659 284.206 cv
278.03 283.521 277.715 282.665 277.715 281.638 cv
277.715 280.587 278.048 279.705 278.712 278.991 cv
279.411 278.242 280.322 277.868 281.443 277.868 cv
281.834 277.868 282.234 277.926 282.646 278.042 cv
cp
0 .991974 .636194 0 cmyk
f
272.54 266.722 mo
271.302 263.748 li
270.059 266.722 li
272.54 266.722 li
cp
267.889 269.496 mo
267.889 269.296 li
268.166 269.264 268.375 269.16 268.514 268.982 cv
268.652 268.805 268.891 268.318 269.228 267.524 cv
271.478 262.224 li
271.692 262.224 li
274.384 268.347 li
274.563 268.752 274.706 269.003 274.813 269.099 cv
274.921 269.195 275.101 269.261 275.354 269.296 cv
275.354 269.496 li
272.607 269.496 li
272.607 269.296 li
272.923 269.268 273.126 269.233 273.218 269.193 cv
273.31 269.153 273.354 269.054 273.354 268.897 cv
273.354 268.844 273.337 268.752 273.302 268.619 cv
273.267 268.486 273.218 268.346 273.154 268.199 cv
272.722 267.16 li
269.876 267.16 li
269.596 267.867 269.428 268.298 269.373 268.454 cv
269.319 268.609 269.292 268.732 269.292 268.823 cv
269.292 269.005 269.365 269.131 269.513 269.201 cv
269.604 269.243 269.776 269.275 270.028 269.296 cv
270.028 269.496 li
267.889 269.496 li
cp
.66 0 1 0 cmyk
f
275.751 269.349 mo
276.078 269.317 276.299 269.251 276.415 269.151 cv
276.531 269.05 276.589 268.854 276.589 268.563 cv
276.589 263.411 li
276.589 263.179 276.57 263.019 276.531 262.931 cv
276.461 262.783 276.318 262.709 276.104 262.709 cv
276.055 262.709 276.001 262.714 275.943 262.725 cv
275.885 262.735 275.813 262.751 275.725 262.772 cv
275.725 262.599 li
276.199 262.472 276.771 262.303 277.438 262.092 cv
277.463 262.092 277.478 262.103 277.483 262.124 cv
277.488 262.145 277.491 262.19 277.491 262.261 cv
277.491 268.584 li
277.491 268.89 277.544 269.087 277.649 269.177 cv
277.755 269.267 277.973 269.324 278.303 269.349 cv
278.303 269.496 li
275.751 269.496 li
275.751 269.349 li
cp
f
170.164 37.7871 mo
176.433 37.7871 181.515 36.8091 181.515 35.604 cv
181.515 34.397 176.433 33.4199 170.164 33.4199 cv
163.896 33.4199 158.814 34.397 158.814 35.604 cv
158.814 36.8091 163.896 37.7871 170.164 37.7871 cv
0 0 0 0 cmyk
f
207.814 121.037 mo
214.082 121.037 219.164 120.059 219.164 118.854 cv
219.164 117.647 214.082 116.67 207.814 116.67 cv
201.546 116.67 196.465 117.647 196.465 118.854 cv
196.465 120.059 201.546 121.037 207.814 121.037 cv
f
215.064 137.812 mo
221.332 137.812 226.414 136.834 226.414 135.629 cv
226.414 134.422 221.332 133.445 215.064 133.445 cv
208.796 133.445 203.715 134.422 203.715 135.629 cv
203.715 136.834 208.796 137.812 215.064 137.812 cv
f
243.511 154.488 mo
249.779 154.488 254.86 153.511 254.86 152.305 cv
254.86 151.099 249.779 150.121 243.511 150.121 cv
237.242 150.121 232.16 151.099 232.16 152.305 cv
232.16 153.511 237.242 154.488 243.511 154.488 cv
f
238.265 141.512 mo
244.532 141.512 249.614 140.534 249.614 139.329 cv
249.614 138.122 244.532 137.145 238.265 137.145 cv
231.995 137.145 226.914 138.122 226.914 139.329 cv
226.914 140.534 231.995 141.512 238.265 141.512 cv
f
234.965 179.987 mo
241.232 179.987 246.314 179.009 246.314 177.804 cv
246.314 176.597 241.232 175.62 234.965 175.62 cv
228.695 175.62 223.614 176.597 223.614 177.804 cv
223.614 179.009 228.695 179.987 234.965 179.987 cv
f
241.844 154.828 mo
242.216 154.614 242.402 154.203 242.402 153.594 cv
242.402 152.99 242.185 152.576 241.749 152.355 cv
241.313 152.133 240.757 152.022 240.082 152.022 cv
239.917 152.022 239.813 152.022 239.769 152.022 cv
239.725 152.022 239.657 152.021 239.565 152.018 cv
239.565 154.707 li
239.565 154.893 239.618 155.014 239.724 155.068 cv
239.829 155.123 240.073 155.15 240.457 155.15 cv
241.009 155.15 241.471 155.042 241.844 154.828 cv
cp
241.495 151.421 mo
241.952 151.21 242.181 150.831 242.181 150.285 cv
242.181 149.641 241.917 149.206 241.39 148.98 cv
241.099 148.857 240.655 148.795 240.062 148.795 cv
239.836 148.795 239.697 148.815 239.645 148.854 cv
239.592 148.892 239.565 148.998 239.565 149.17 cv
239.565 151.611 li
240.594 151.596 li
240.956 151.588 241.257 151.53 241.495 151.421 cv
cp
237.435 155.34 mo
237.869 155.315 238.149 155.248 238.277 155.138 cv
238.404 155.028 238.469 154.771 238.469 154.369 cv
238.469 149.565 li
238.469 149.168 238.404 148.912 238.277 148.798 cv
238.149 148.684 237.869 148.616 237.435 148.595 cv
237.435 148.395 li
240.459 148.395 li
241.323 148.395 242.009 148.534 242.517 148.812 cv
243.024 149.089 243.278 149.568 243.278 150.247 cv
243.278 150.757 243.101 151.145 242.745 151.408 cv
242.545 151.56 242.244 151.685 241.844 151.783 cv
242.339 151.903 242.763 152.102 243.114 152.381 cv
243.466 152.661 243.642 153.051 243.642 153.554 cv
243.642 154.396 243.252 154.976 242.472 155.292 cv
242.062 155.458 241.556 155.54 240.955 155.54 cv
237.435 155.54 li
237.435 155.34 li
cp
1 0 .5 0 cmyk
f
247.544 152.619 mo
247.14 152.752 246.806 152.9 246.542 153.062 cv
246.035 153.375 245.782 153.729 245.782 154.127 cv
245.782 154.447 245.888 154.682 246.099 154.833 cv
246.236 154.932 246.389 154.981 246.558 154.981 cv
246.79 154.981 247.012 154.916 247.225 154.786 cv
247.438 154.656 247.544 154.491 247.544 154.29 cv
247.544 152.619 li
cp
245.608 153.214 mo
245.932 153.003 246.577 152.717 247.544 152.355 cv
247.544 151.907 li
247.544 151.548 247.509 151.298 247.438 151.158 cv
247.318 150.922 247.071 150.805 246.694 150.805 cv
246.516 150.805 246.345 150.85 246.184 150.941 cv
246.021 151.037 245.94 151.167 245.94 151.332 cv
245.94 151.374 245.949 151.445 245.967 151.545 cv
245.984 151.646 245.993 151.71 245.993 151.738 cv
245.993 151.935 245.929 152.072 245.798 152.149 cv
245.725 152.195 245.637 152.218 245.534 152.218 cv
245.376 152.218 245.255 152.166 245.171 152.062 cv
245.086 151.958 245.044 151.843 245.044 151.717 cv
245.044 151.471 245.196 151.213 245.5 150.944 cv
245.805 150.675 246.25 150.541 246.837 150.541 cv
247.52 150.541 247.981 150.762 248.224 151.205 cv
248.354 151.448 248.419 151.801 248.419 152.265 cv
248.419 154.38 li
248.419 154.584 248.434 154.725 248.461 154.802 cv
248.507 154.939 248.602 155.007 248.746 155.007 cv
248.827 155.007 248.894 154.995 248.946 154.971 cv
248.999 154.946 249.091 154.886 249.221 154.791 cv
249.221 155.065 li
249.108 155.203 248.987 155.315 248.856 155.403 cv
248.66 155.537 248.46 155.604 248.256 155.604 cv
248.017 155.604 247.844 155.526 247.736 155.371 cv
247.629 155.217 247.57 155.032 247.56 154.817 cv
247.292 155.05 247.063 155.222 246.874 155.334 cv
246.554 155.524 246.25 155.619 245.962 155.619 cv
245.659 155.619 245.397 155.513 245.176 155.3 cv
244.954 155.087 244.844 154.817 244.844 154.491 cv
244.844 153.981 245.099 153.556 245.608 153.214 cv
cp
f
233.256 177.566 mo
232.018 174.592 li
230.774 177.566 li
233.256 177.566 li
cp
228.604 180.34 mo
228.604 180.14 li
228.882 180.108 229.091 180.004 229.229 179.826 cv
229.368 179.648 229.606 179.162 229.943 178.368 cv
232.193 173.068 li
232.408 173.068 li
235.1 179.19 li
235.278 179.596 235.422 179.847 235.529 179.943 cv
235.637 180.039 235.816 180.104 236.069 180.14 cv
236.069 180.34 li
233.323 180.34 li
233.323 180.14 li
233.639 180.111 233.842 180.077 233.934 180.037 cv
234.025 179.997 234.07 179.898 234.07 179.741 cv
234.07 179.688 234.053 179.596 234.018 179.462 cv
233.982 179.33 233.934 179.189 233.87 179.042 cv
233.438 178.004 li
230.592 178.004 li
230.312 178.71 230.144 179.142 230.089 179.297 cv
230.035 179.453 230.008 179.576 230.008 179.667 cv
230.008 179.849 230.081 179.975 230.229 180.045 cv
230.32 180.087 230.492 180.119 230.744 180.14 cv
230.744 180.34 li
228.604 180.34 li
cp
0 0 1 .43 cmyk
f
239.478 178.304 mo
239.688 178.136 239.794 177.842 239.794 177.424 cv
239.794 177.09 239.709 176.713 239.538 176.295 cv
239.368 175.877 239.084 175.667 238.687 175.667 cv
238.342 175.667 238.104 175.831 237.975 176.158 cv
237.908 176.33 237.875 176.543 237.875 176.796 cv
237.875 177.225 237.979 177.61 238.186 177.951 cv
238.394 178.292 238.662 178.462 238.992 178.462 cv
239.186 178.462 239.348 178.41 239.478 178.304 cv
cp
237.804 181.927 mo
238.136 182.04 238.517 182.096 238.945 182.096 cv
239.528 182.096 240.003 181.995 240.369 181.792 cv
240.734 181.59 240.917 181.342 240.917 181.046 cv
240.917 180.811 240.77 180.654 240.474 180.577 cv
240.29 180.531 239.943 180.505 239.433 180.498 cv
239.302 180.495 239.165 180.49 239.021 180.485 cv
238.876 180.479 238.744 180.474 238.624 180.466 cv
238.547 180.463 238.422 180.449 238.249 180.424 cv
238.076 180.399 237.948 180.378 237.863 180.361 cv
237.821 180.361 237.718 180.472 237.555 180.693 cv
237.389 180.918 237.305 181.125 237.305 181.315 cv
237.305 181.611 237.472 181.814 237.804 181.927 cv
cp
237.244 178.004 mo
237.066 177.733 236.979 177.429 236.979 177.091 cv
236.979 176.68 237.142 176.29 237.469 175.921 cv
237.796 175.552 238.258 175.367 238.855 175.367 cv
239.112 175.367 239.396 175.428 239.704 175.549 cv
240.014 175.67 240.311 175.731 240.596 175.731 cv
240.67 175.731 240.781 175.728 240.931 175.723 cv
241.08 175.718 241.188 175.715 241.255 175.715 cv
241.318 175.715 li
241.318 176.142 li
240.406 176.142 li
240.469 176.29 240.519 176.418 240.554 176.527 cv
240.613 176.731 240.644 176.924 240.644 177.107 cv
240.644 177.508 240.478 177.876 240.145 178.212 cv
239.813 178.548 239.365 178.716 238.803 178.716 cv
238.715 178.716 238.557 178.7 238.328 178.668 cv
238.227 178.668 238.091 178.754 237.922 178.927 cv
237.753 179.099 237.669 179.24 237.669 179.349 cv
237.669 179.461 237.792 179.543 238.039 179.596 cv
238.2 179.631 238.38 179.649 238.577 179.649 cv
239.482 179.649 240.097 179.7 240.421 179.802 cv
240.952 179.967 241.218 180.322 241.218 180.867 cv
241.218 181.423 240.907 181.866 240.287 182.196 cv
239.667 182.526 239.04 182.692 238.407 182.692 cv
237.831 182.692 237.374 182.575 237.036 182.341 cv
236.698 182.107 236.53 181.862 236.53 181.605 cv
236.53 181.479 236.574 181.355 236.664 181.234 cv
236.753 181.112 236.929 180.932 237.191 180.693 cv
237.538 180.382 li
237.602 180.319 li
237.44 180.255 237.32 180.194 237.24 180.134 cv
237.101 180.025 237.031 179.9 237.031 179.76 cv
237.031 179.63 237.092 179.486 237.213 179.33 cv
237.334 179.174 237.594 178.919 237.99 178.568 cv
237.671 178.462 237.422 178.274 237.244 178.004 cv
cp
f
212.264 132.595 mo
211.957 132.462 211.57 132.395 211.104 132.395 cv
210.882 132.395 210.745 132.417 210.694 132.461 cv
210.644 132.505 210.618 132.603 210.618 132.753 cv
210.618 135.569 li
210.812 135.587 210.938 135.598 210.998 135.601 cv
211.058 135.604 211.115 135.606 211.172 135.606 cv
211.667 135.606 212.058 135.536 212.343 135.396 cv
212.859 135.139 213.117 134.659 213.117 133.956 cv
213.117 133.295 212.833 132.841 212.264 132.595 cv
cp
208.619 138.939 mo
209.03 138.901 209.287 138.819 209.39 138.695 cv
209.491 138.571 209.542 138.287 209.542 137.842 cv
209.542 133.165 li
209.542 132.789 209.485 132.541 209.371 132.421 cv
209.257 132.302 209.006 132.226 208.619 132.194 cv
208.619 131.994 li
211.467 131.994 li
212.381 131.994 213.081 132.172 213.565 132.527 cv
214.051 132.882 214.294 133.35 214.294 133.93 cv
214.294 134.665 214.024 135.197 213.486 135.527 cv
212.949 135.858 212.275 136.023 211.467 136.023 cv
211.351 136.023 211.202 136.021 211.021 136.015 cv
210.84 136.01 210.706 136.007 210.618 136.007 cv
210.618 137.969 li
210.618 138.375 210.681 138.63 210.805 138.735 cv
210.93 138.84 211.209 138.908 211.641 138.939 cv
211.641 139.14 li
208.619 139.14 li
208.619 138.939 li
cp
.845945 .553429 0 0 cmyk
f
216.496 138.757 mo
216.738 138.836 216.95 138.876 217.132 138.876 cv
217.622 138.876 217.985 138.692 218.222 138.323 cv
218.458 137.955 218.576 137.508 218.576 136.985 cv
218.576 136.462 218.466 135.979 218.245 135.535 cv
218.024 135.09 217.667 134.868 217.174 134.868 cv
216.926 134.868 216.682 134.944 216.444 135.097 cv
216.206 135.25 216.087 135.444 216.087 135.679 cv
216.087 138.365 li
216.118 138.548 216.255 138.679 216.496 138.757 cv
cp
214.489 132.432 mo
214.489 132.252 li
214.892 132.161 215.253 132.059 215.573 131.947 cv
215.895 131.834 216.067 131.778 216.092 131.778 cv
216.1 131.799 216.103 131.82 216.103 131.841 cv
216.103 135.052 li
216.194 134.884 216.331 134.724 216.514 134.573 cv
216.836 134.309 217.208 134.177 217.63 134.177 cv
218.146 134.177 218.586 134.396 218.951 134.831 cv
219.316 135.267 219.499 135.833 219.499 136.529 cv
219.499 137.275 219.262 137.913 218.787 138.443 cv
218.313 138.975 217.688 139.24 216.915 139.24 cv
216.524 139.24 216.142 139.163 215.766 139.008 cv
215.389 138.853 215.201 138.699 215.201 138.544 cv
215.201 132.97 li
215.201 132.766 215.173 132.621 215.116 132.535 cv
215.061 132.449 214.931 132.405 214.727 132.405 cv
214.489 132.432 li
cp
f
205.375 116.198 mo
205.375 116.398 li
205.16 116.405 205.008 116.424 204.916 116.456 cv
204.754 116.516 204.674 116.625 204.674 116.783 cv
204.674 116.854 204.684 116.922 204.702 116.989 cv
204.722 117.056 204.751 117.142 204.79 117.247 cv
206.352 121.308 li
207.493 118.282 li
206.987 116.958 li
206.893 116.719 206.75 116.559 206.561 116.478 cv
206.448 116.428 206.277 116.402 206.049 116.398 cv
206.049 116.198 li
208.94 116.198 li
208.94 116.398 li
208.67 116.402 208.483 116.421 208.382 116.456 cv
208.22 116.516 208.14 116.639 208.14 116.825 cv
208.14 116.889 208.146 116.944 208.16 116.991 cv
208.175 117.039 208.21 117.136 208.266 117.284 cv
209.827 121.334 li
211.178 117.669 li
211.256 117.461 211.309 117.277 211.336 117.115 cv
211.354 117.024 211.362 116.95 211.362 116.894 cv
211.362 116.693 211.268 116.555 211.078 116.477 cv
210.973 116.432 210.814 116.405 210.604 116.398 cv
210.604 116.198 li
212.747 116.198 li
212.747 116.398 li
212.554 116.426 212.406 116.47 212.305 116.53 cv
212.121 116.632 211.984 116.808 211.893 117.058 cv
210.763 120.278 li
210.326 121.521 li
209.642 123.47 li
209.475 123.47 li
209.003 122.234 li
207.752 118.907 li
206.093 123.47 li
205.931 123.47 li
205.126 121.233 li
204.215 118.701 li
203.839 117.657 203.577 117.017 203.428 116.78 cv
203.278 116.543 203.045 116.416 202.729 116.398 cv
202.729 116.198 li
205.375 116.198 li
cp
0 .521447 0 0 cmyk
f
168.058 31.9941 mo
168.058 32.1943 li
167.643 32.2227 167.373 32.292 167.25 32.4028 cv
167.127 32.5137 167.065 32.7676 167.065 33.165 cv
167.065 36.6191 li
167.065 37.1851 167.144 37.626 167.298 37.9424 cv
167.586 38.519 168.133 38.8076 168.938 38.8076 cv
169.82 38.8076 170.413 38.5122 170.715 37.9214 cv
170.884 37.5913 170.968 37.0811 170.968 36.3921 cv
170.968 33.5815 li
170.968 32.9941 170.897 32.626 170.757 32.4766 cv
170.616 32.3271 170.35 32.2334 169.956 32.1943 cv
169.956 31.9941 li
172.455 31.9941 li
172.455 32.1943 li
172.037 32.2402 171.764 32.3413 171.635 32.4976 cv
171.507 32.6543 171.442 33.0156 171.442 33.5815 cv
171.442 36.3921 li
171.442 37.1377 171.328 37.7192 171.1 38.1377 cv
170.678 38.9077 169.877 39.2925 168.695 39.2925 cv
167.528 39.2925 166.733 38.9131 166.312 38.1533 cv
166.083 37.7456 165.969 37.208 165.969 36.54 cv
165.969 33.165 li
165.969 32.771 165.908 32.519 165.787 32.4082 cv
165.666 32.2974 165.401 32.2261 164.993 32.1943 cv
164.993 31.9941 li
168.058 31.9941 li
cp
1 0 0 0 cmyk
f
232.257 135.994 mo
238.363 135.994 li
238.422 137.829 li
238.163 137.829 li
238.036 137.253 237.876 136.877 237.681 136.704 cv
237.485 136.529 237.075 136.442 236.449 136.442 cv
235.848 136.442 li
235.848 141.969 li
235.848 142.385 235.913 142.643 236.043 142.743 cv
236.173 142.842 236.458 142.908 236.897 142.939 cv
236.897 143.14 li
233.749 143.14 li
233.749 142.939 li
234.206 142.904 234.491 142.829 234.604 142.713 cv
234.716 142.598 234.772 142.308 234.772 141.842 cv
234.772 136.442 li
234.166 136.442 li
233.568 136.442 233.161 136.529 232.945 136.701 cv
232.729 136.873 232.566 137.249 232.457 137.829 cv
232.193 137.829 li
232.257 135.994 li
cp
0 .35 1 0 cmyk
f
241.738 140.218 mo
241.334 140.352 241 140.5 240.736 140.661 cv
240.229 140.974 239.977 141.329 239.977 141.727 cv
239.977 142.046 240.082 142.282 240.293 142.433 cv
240.431 142.531 240.583 142.581 240.752 142.581 cv
240.984 142.581 241.206 142.516 241.419 142.386 cv
241.632 142.255 241.738 142.09 241.738 141.89 cv
241.738 140.218 li
cp
239.803 140.814 mo
240.126 140.603 240.771 140.316 241.738 139.955 cv
241.738 139.506 li
241.738 139.147 241.703 138.898 241.633 138.757 cv
241.513 138.522 241.266 138.404 240.889 138.404 cv
240.71 138.404 240.539 138.45 240.378 138.541 cv
240.216 138.636 240.135 138.766 240.135 138.932 cv
240.135 138.974 240.144 139.045 240.161 139.145 cv
240.179 139.245 240.188 139.31 240.188 139.337 cv
240.188 139.535 240.123 139.671 239.992 139.749 cv
239.919 139.794 239.831 139.817 239.729 139.817 cv
239.57 139.817 239.449 139.766 239.365 139.662 cv
239.28 139.558 239.238 139.443 239.238 139.316 cv
239.238 139.07 239.391 138.813 239.694 138.544 cv
239.999 138.275 240.444 138.141 241.031 138.141 cv
241.714 138.141 242.176 138.362 242.418 138.805 cv
242.549 139.047 242.613 139.401 242.613 139.865 cv
242.613 141.979 li
242.613 142.184 242.628 142.324 242.655 142.401 cv
242.701 142.539 242.796 142.607 242.94 142.607 cv
243.021 142.607 243.088 142.595 243.141 142.57 cv
243.193 142.545 243.285 142.486 243.415 142.391 cv
243.415 142.665 li
243.303 142.802 243.182 142.915 243.051 143.002 cv
242.854 143.136 242.654 143.203 242.45 143.203 cv
242.211 143.203 242.038 143.125 241.931 142.971 cv
241.823 142.816 241.765 142.632 241.754 142.417 cv
241.486 142.649 241.258 142.821 241.068 142.934 cv
240.748 143.124 240.444 143.219 240.156 143.219 cv
239.854 143.219 239.592 143.112 239.37 142.9 cv
239.148 142.687 239.038 142.417 239.038 142.09 cv
239.038 141.581 239.293 141.155 239.803 140.814 cv
cp
f
10.6519 213.117 mo
10.6245 212.762 10.5737 212.51 10.4995 212.361 cv
10.3745 212.127 10.1304 211.957 9.76709 211.852 cv
7.22412 211.147 li
4.00146 212.061 li
3.66162 212.157 3.45361 212.253 3.37744 212.349 cv
3.30127 212.445 3.24561 212.644 3.21045 212.947 cv
3.01709 212.947 li
3.01709 210.104 li
3.21045 210.104 li
3.22607 210.394 3.25342 210.593 3.29248 210.702 cv
3.35889 210.881 3.48193 210.971 3.66162 210.971 cv
3.72021 210.971 3.80225 210.959 3.90771 210.936 cv
4.01318 210.913 4.08154 210.895 4.11279 210.883 cv
6.66797 210.177 li
5.09717 208.851 li
4.7417 208.556 4.47217 208.347 4.28857 208.221 cv
3.97998 208.005 3.74756 207.897 3.59131 207.897 cv
3.43506 207.897 3.32959 207.978 3.2749 208.139 cv
3.24365 208.237 3.22217 208.431 3.21045 208.721 cv
3.01709 208.721 li
3.01709 206.226 li
3.21045 206.226 li
3.23779 206.459 3.29639 206.642 3.38623 206.774 cv
3.47607 206.906 3.65771 207.083 3.93115 207.304 cv
7.18311 209.957 li
9.40381 210.572 li
9.5874 210.626 9.73584 210.664 9.84912 210.683 cv
9.9624 210.703 10.0542 210.712 10.1245 210.712 cv
10.3511 210.712 10.4927 210.637 10.5493 210.487 cv
10.606 210.336 10.6401 210.054 10.6519 209.64 cv
10.8452 209.64 li
10.8452 213.117 li
10.6519 213.117 li
cp
0 0 0 1 cmyk
f
4.25391 201.773 mo
3.625 201.273 3.11914 200.683 2.73633 200.003 cv
2.92969 199.892 li
3.42969 200.521 3.91602 200.97 4.38867 201.24 cv
5.21289 201.712 6.31055 201.949 7.68164 201.949 cv
8.69727 201.949 9.53516 201.859 10.1953 201.679 cv
11.3516 201.363 12.2168 200.767 12.791 199.892 cv
12.9844 200.044 li
12.7539 200.525 12.3027 201.044 11.6309 201.603 cv
10.5176 202.529 9.25195 202.992 7.83398 202.992 cv
6.47461 202.992 5.28125 202.585 4.25391 201.773 cv
cp
f
10.6816 199.33 mo
10.6465 199.052 10.5771 198.858 10.4736 198.747 cv
10.3701 198.635 10.1387 198.58 9.7793 198.58 cv
6.80273 198.58 li
6.55469 198.58 6.38037 198.603 6.27979 198.65 cv
6.13232 198.724 6.05859 198.876 6.05859 199.107 cv
6.05859 199.142 6.06055 199.178 6.06445 199.215 cv
6.06836 199.252 6.07422 199.298 6.08203 199.353 cv
5.87695 199.353 li
5.83008 199.193 5.70898 198.814 5.51367 198.216 cv
5.33203 197.666 li
5.33203 197.638 5.3418 197.622 5.36133 197.616 cv
5.38086 197.61 5.4082 197.607 5.44336 197.607 cv
6.30469 197.607 li
5.96875 197.248 5.73828 196.967 5.61328 196.765 cv
5.42188 196.46 5.32617 196.145 5.32617 195.817 cv
5.32617 195.552 5.40234 195.311 5.55469 195.092 cv
5.85156 194.671 6.38086 194.46 7.14258 194.46 cv
9.87891 194.46 li
10.1602 194.46 10.3633 194.404 10.4883 194.292 cv
10.6133 194.18 10.6777 193.992 10.6816 193.728 cv
10.8457 193.728 li
10.8457 196.23 li
10.6816 196.23 li
10.6426 195.945 10.5635 195.746 10.4443 195.632 cv
10.3252 195.519 10.0664 195.462 9.66797 195.462 cv
7.16602 195.462 li
6.83008 195.462 6.55176 195.524 6.33105 195.649 cv
6.11035 195.773 6 196.002 6 196.336 cv
6 196.565 6.07813 196.799 6.23438 197.036 cv
6.32422 197.167 6.47266 197.338 6.67969 197.548 cv
9.96094 197.548 li
10.2422 197.548 10.4307 197.486 10.5264 197.361 cv
10.6221 197.236 10.6738 197.039 10.6816 196.769 cv
10.8457 196.769 li
10.8457 199.33 li
10.6816 199.33 li
cp
f
6.36914 192.158 mo
6.58008 192.283 6.8457 192.373 7.16602 192.427 cv
7.16602 189.955 li
6.77539 189.998 6.48438 190.072 6.29297 190.177 cv
5.94922 190.369 5.77734 190.689 5.77734 191.138 cv
5.77734 191.583 5.97461 191.923 6.36914 192.158 cv
cp
5.9209 189.351 mo
6.30176 188.937 6.8418 188.73 7.54102 188.73 cv
7.54102 192.451 li
8.44531 192.412 9.104 192.207 9.51709 191.835 cv
9.93018 191.464 10.1367 191.025 10.1367 190.517 cv
10.1367 190.107 10.0298 189.761 9.81543 189.48 cv
9.60107 189.199 9.29688 188.939 8.90332 188.701 cv
8.97314 188.496 li
9.47021 188.656 9.93018 188.956 10.3525 189.395 cv
10.7749 189.834 10.9863 190.373 10.9863 191.009 cv
10.9863 191.744 10.709 192.311 10.1543 192.711 cv
9.59961 193.112 8.96094 193.312 8.23828 193.312 cv
7.45313 193.312 6.77539 193.08 6.20508 192.615 cv
5.63477 192.15 5.34961 191.544 5.34961 190.798 cv
5.34961 190.248 5.54004 189.765 5.9209 189.351 cv
cp
f
5.41992 186.363 mo
9.16992 186.363 li
9.43555 186.363 9.64844 186.326 9.80859 186.251 cv
10.1055 186.107 10.2539 185.841 10.2539 185.455 cv
10.2539 185.189 10.166 184.929 9.99023 184.675 cv
9.89258 184.531 9.75781 184.384 9.58594 184.236 cv
6.375 184.236 li
6.07422 184.236 5.87695 184.294 5.7832 184.412 cv
5.68945 184.529 5.63281 184.763 5.61328 185.115 cv
5.41992 185.115 li
5.41992 183.222 li
9.54492 183.222 li
9.81055 183.222 9.99316 183.174 10.0928 183.079 cv
10.1924 182.983 10.2363 182.781 10.2246 182.472 cv
10.3887 182.472 li
10.4473 182.687 10.4912 182.845 10.5205 182.947 cv
10.5498 183.048 10.6035 183.218 10.6816 183.457 cv
10.7168 183.558 10.8008 183.781 10.9336 184.125 cv
10.9336 184.144 10.9248 184.156 10.9072 184.16 cv
10.8896 184.164 10.8691 184.166 10.8457 184.166 cv
9.90234 184.166 li
10.2188 184.431 10.4531 184.673 10.6055 184.892 cv
10.8398 185.224 10.957 185.576 10.957 185.947 cv
10.957 186.287 10.8359 186.607 10.5933 186.908 cv
10.3545 187.212 9.95361 187.365 9.39063 187.365 cv
6.3457 187.365 li
6.03564 187.365 5.82813 187.431 5.72363 187.564 cv
5.65771 187.65 5.61133 187.833 5.58398 188.115 cv
5.41992 188.115 li
5.41992 186.363 li
cp
f
5.44336 179.167 mo
5.86523 179.167 li
5.86523 180.363 li
9.24023 180.375 li
9.53711 180.375 9.76172 180.349 9.91406 180.298 cv
10.1836 180.205 10.3184 180.021 10.3184 179.748 cv
10.3184 179.607 10.2852 179.485 10.2188 179.381 cv
10.1523 179.278 10.0469 179.16 9.90234 179.027 cv
10.0313 178.875 li
10.207 179.003 li
10.4805 179.207 10.6738 179.421 10.7871 179.648 cv
10.9004 179.875 10.957 180.093 10.957 180.304 cv
10.957 180.765 10.752 181.078 10.3418 181.242 cv
10.1191 181.332 9.81055 181.376 9.41602 181.376 cv
5.86523 181.376 li
5.86523 182.015 li
5.85352 182.035 5.8418 182.049 5.83008 182.059 cv
5.81836 182.069 5.80273 182.074 5.7832 182.074 cv
5.74414 182.074 5.71387 182.065 5.69238 182.047 cv
5.6709 182.03 5.62109 181.974 5.54297 181.88 cv
5.32031 181.611 5.13965 181.417 5.00098 181.297 cv
4.8623 181.178 4.49609 180.898 3.90234 180.457 cv
3.90234 180.406 3.90625 180.375 3.91406 180.366 cv
3.92188 180.356 3.95117 180.351 4.00195 180.351 cv
5.44336 180.351 li
5.44336 179.167 li
cp
f
10.6523 178.833 mo
10.6211 178.474 10.5576 178.236 10.4619 178.119 cv
10.3662 178.001 10.1621 177.943 9.84961 177.943 cv
7.20703 177.943 li
6.82031 177.943 6.54395 177.979 6.37793 178.051 cv
6.21191 178.124 6.12891 178.255 6.12891 178.447 cv
6.12891 178.486 6.13379 178.538 6.14355 178.602 cv
6.15332 178.667 6.16602 178.734 6.18164 178.804 cv
5.98828 178.804 li
5.91016 178.583 5.83008 178.354 5.74805 178.121 cv
5.66602 177.887 5.60742 177.726 5.57227 177.636 cv
5.49805 177.441 5.41406 177.241 5.32031 177.035 cv
5.32031 177.007 5.33008 176.991 5.34961 176.985 cv
5.36914 176.979 5.41016 176.976 5.47266 176.976 cv
6.43359 176.976 li
6.08594 176.726 5.81445 176.483 5.61914 176.25 cv
5.42383 176.018 5.32617 175.775 5.32617 175.525 cv
5.32617 175.325 5.38574 175.163 5.50488 175.037 cv
5.62402 174.912 5.77344 174.849 5.95313 174.849 cv
6.11328 174.849 6.24805 174.897 6.35742 174.993 cv
6.4668 175.088 6.52148 175.208 6.52148 175.353 cv
6.52148 175.501 6.45313 175.651 6.31641 175.801 cv
6.17969 175.952 6.11133 176.07 6.11133 176.156 cv
6.11133 176.292 6.22168 176.46 6.44238 176.66 cv
6.66309 176.859 6.89063 176.958 7.125 176.958 cv
9.76758 176.958 li
10.1035 176.958 10.3369 176.88 10.4678 176.724 cv
10.5986 176.568 10.6602 176.308 10.6523 175.945 cv
10.8457 175.945 li
10.8457 178.833 li
10.6523 178.833 li
cp
f
6.00586 172.909 mo
6.36133 173.3 6.97461 173.496 7.8457 173.496 cv
8.54102 173.496 9.18945 173.338 9.79102 173.023 cv
10.3926 172.708 10.6934 172.271 10.6934 171.711 cv
10.6934 171.273 10.4922 170.935 10.0898 170.698 cv
9.6875 170.461 9.16016 170.343 8.50781 170.343 cv
7.83203 170.343 7.19531 170.494 6.59766 170.795 cv
6 171.097 5.70117 171.533 5.70117 172.104 cv
5.70117 172.414 5.80273 172.682 6.00586 172.909 cv
cp
6.15527 173.844 mo
5.61816 173.35 5.34961 172.714 5.34961 171.937 cv
5.34961 171.164 5.60352 170.523 6.11133 170.015 cv
6.61914 169.507 7.29492 169.253 8.13867 169.253 cv
8.91602 169.253 9.5918 169.5 10.166 169.992 cv
10.7402 170.484 11.0273 171.121 11.0273 171.902 cv
11.0273 172.652 10.752 173.287 10.2012 173.806 cv
9.65039 174.326 8.95898 174.585 8.12695 174.585 cv
7.34961 174.585 6.69238 174.338 6.15527 173.844 cv
cp
f
10.6816 168.673 mo
10.6465 168.396 10.5771 168.202 10.4736 168.09 cv
10.3701 167.979 10.1387 167.923 9.7793 167.923 cv
6.80273 167.923 li
6.55469 167.923 6.38037 167.947 6.27979 167.994 cv
6.13232 168.068 6.05859 168.22 6.05859 168.451 cv
6.05859 168.486 6.06055 168.522 6.06445 168.559 cv
6.06836 168.596 6.07422 168.642 6.08203 168.697 cv
5.87695 168.697 li
5.83008 168.537 5.70898 168.158 5.51367 167.56 cv
5.33203 167.009 li
5.33203 166.982 5.3418 166.965 5.36133 166.959 cv
5.38086 166.954 5.4082 166.951 5.44336 166.951 cv
6.30469 166.951 li
5.96875 166.592 5.73828 166.311 5.61328 166.108 cv
5.42188 165.804 5.32617 165.489 5.32617 165.161 cv
5.32617 164.896 5.40234 164.654 5.55469 164.436 cv
5.85156 164.015 6.38086 163.804 7.14258 163.804 cv
9.87891 163.804 li
10.1602 163.804 10.3633 163.748 10.4883 163.636 cv
10.6133 163.523 10.6777 163.335 10.6816 163.072 cv
10.8457 163.072 li
10.8457 165.574 li
10.6816 165.574 li
10.6426 165.289 10.5635 165.089 10.4443 164.976 cv
10.3252 164.863 10.0664 164.806 9.66797 164.806 cv
7.16602 164.806 li
6.83008 164.806 6.55176 164.868 6.33105 164.993 cv
6.11035 165.117 6 165.346 6 165.68 cv
6 165.909 6.07813 166.143 6.23438 166.379 cv
6.32422 166.511 6.47266 166.682 6.67969 166.892 cv
9.96094 166.892 li
10.2422 166.892 10.4307 166.83 10.5264 166.705 cv
10.6221 166.58 10.6738 166.382 10.6816 166.113 cv
10.8457 166.113 li
10.8457 168.673 li
10.6816 168.673 li
cp
f
9 162.263 mo
9 162.07 li
9.44531 161.98 9.78711 161.859 10.0254 161.708 cv
10.4629 161.435 10.6816 161.035 10.6816 160.509 cv
10.6816 160.217 10.6006 159.986 10.4385 159.816 cv
10.2764 159.647 10.0664 159.562 9.80859 159.562 cv
9.64453 159.562 9.48633 159.611 9.33398 159.708 cv
9.18164 159.806 9.0332 159.978 8.88867 160.224 cv
8.51367 160.88 li
8.25586 161.36 7.99609 161.714 7.73438 161.941 cv
7.47266 162.167 7.16406 162.281 6.80859 162.281 cv
6.37109 162.281 6.01172 162.125 5.73047 161.812 cv
5.44922 161.5 5.30859 161.107 5.30859 160.634 cv
5.30859 160.427 5.34766 160.2 5.42578 159.952 cv
5.50391 159.704 5.54297 159.564 5.54297 159.533 cv
5.54297 159.462 5.5332 159.412 5.51367 159.38 cv
5.49414 159.349 5.46289 159.322 5.41992 159.298 cv
5.41992 159.158 li
7.05469 159.117 li
7.05469 159.298 li
6.67578 159.376 6.38086 159.482 6.16992 159.615 cv
5.7793 159.857 5.58398 160.207 5.58398 160.664 cv
5.58398 160.937 5.66797 161.152 5.83594 161.308 cv
6.00391 161.464 6.20117 161.542 6.42773 161.542 cv
6.78711 161.542 7.10742 161.273 7.38867 160.734 cv
7.80469 159.96 li
8.25781 159.128 8.78516 158.712 9.38672 158.712 cv
9.84766 158.712 10.2246 158.885 10.5176 159.23 cv
10.8105 159.575 10.957 160.027 10.957 160.584 cv
10.957 160.818 10.918 161.083 10.8398 161.38 cv
10.7617 161.676 10.7227 161.852 10.7227 161.906 cv
10.7227 161.953 10.7393 161.994 10.7725 162.029 cv
10.8057 162.064 10.8457 162.091 10.8926 162.111 cv
10.8926 162.263 li
9 162.263 li
cp
f
9 151.593 mo
9 151.4 li
9.44531 151.31 9.78711 151.189 10.0254 151.038 cv
10.4629 150.765 10.6816 150.365 10.6816 149.839 cv
10.6816 149.547 10.6006 149.316 10.4385 149.146 cv
10.2764 148.977 10.0664 148.892 9.80859 148.892 cv
9.64453 148.892 9.48633 148.941 9.33398 149.039 cv
9.18164 149.136 9.0332 149.308 8.88867 149.554 cv
8.51367 150.21 li
8.25586 150.69 7.99609 151.044 7.73438 151.271 cv
7.47266 151.498 7.16406 151.611 6.80859 151.611 cv
6.37109 151.611 6.01172 151.455 5.73047 151.142 cv
5.44922 150.83 5.30859 150.437 5.30859 149.964 cv
5.30859 149.757 5.34766 149.53 5.42578 149.282 cv
5.50391 149.034 5.54297 148.894 5.54297 148.863 cv
5.54297 148.792 5.5332 148.742 5.51367 148.71 cv
5.49414 148.679 5.46289 148.652 5.41992 148.628 cv
5.41992 148.488 li
7.05469 148.447 li
7.05469 148.628 li
6.67578 148.707 6.38086 148.812 6.16992 148.945 cv
5.7793 149.187 5.58398 149.537 5.58398 149.994 cv
5.58398 150.267 5.66797 150.482 5.83594 150.638 cv
6.00391 150.794 6.20117 150.873 6.42773 150.873 cv
6.78711 150.873 7.10742 150.603 7.38867 150.064 cv
7.80469 149.291 li
8.25781 148.458 8.78516 148.042 9.38672 148.042 cv
9.84766 148.042 10.2246 148.215 10.5176 148.56 cv
10.8105 148.905 10.957 149.357 10.957 149.914 cv
10.957 150.148 10.918 150.414 10.8398 150.71 cv
10.7617 151.006 10.7227 151.182 10.7227 151.236 cv
10.7227 151.283 10.7393 151.324 10.7725 151.359 cv
10.8057 151.394 10.8457 151.421 10.8926 151.441 cv
10.8926 151.593 li
9 151.593 li
cp
f
4.1499 146.215 mo
4.1499 140.762 li
4.88818 140.762 li
4.88818 146.215 li
4.1499 146.215 li
cp
f
.0395508 137.388 mo
.0483398 137.386 .0683594 137.385 .100098 137.385 cv
6.44922 137.385 li
6.72021 137.385 6.89209 137.313 6.96631 137.167 cv
7.04004 137.023 7.08398 136.752 7.09814 136.356 cv
7.24561 136.356 li
7.24561 139.336 li
7.0874 139.336 li
7.06641 138.911 7.0083 138.633 6.91357 138.503 cv
6.81836 138.373 6.61279 138.308 6.29639 138.308 cv
1.41309 138.308 li
1.24463 138.308 1.11621 138.329 1.02832 138.371 cv
.94043 138.413 .896484 138.505 .896484 138.645 cv
.896484 138.737 .921875 138.855 .972656 139.001 cv
1.02393 139.147 1.07764 139.283 1.13379 139.41 cv
.98584 139.41 li
0 137.475 li
0 137.411 li
.0175781 137.397 .0307617 137.389 .0395508 137.388 cv
cp
f
10.6929 131.58 mo
10.6655 131.205 10.603 130.958 10.5049 130.838 cv
10.4072 130.719 10.1958 130.66 9.87109 130.66 cv
3.98975 130.66 li
3.7124 130.66 3.53662 130.707 3.4624 130.8 cv
3.38818 130.894 3.35107 131.029 3.35107 131.205 cv
3.35107 131.279 3.35303 131.343 3.35693 131.398 cv
3.36084 131.453 3.3667 131.513 3.37451 131.58 cv
3.21045 131.58 li
3.06982 131.052 li
2.96436 130.65 2.86475 130.308 2.771 130.027 cv
2.7124 129.855 2.68311 129.755 2.68311 129.728 cv
2.68311 129.705 2.68799 129.69 2.69775 129.684 cv
2.70752 129.678 2.72998 129.675 2.76514 129.675 cv
7.69287 129.675 li
6.26318 128.052 li
6.15771 127.935 6.07373 127.856 6.01123 127.815 cv
5.94873 127.774 5.89404 127.753 5.84717 127.753 cv
5.75732 127.753 5.70068 127.797 5.67725 127.885 cv
5.65381 127.973 5.63623 128.13 5.62451 128.357 cv
5.46045 128.357 li
5.46045 125.914 li
5.62451 125.914 li
5.65186 126.35 5.73926 126.701 5.88623 126.966 cv
6.03369 127.231 6.45459 127.74 7.14893 128.492 cv
7.4585 128.843 li
8.87305 127.769 li
9.58838 127.211 10.064 126.792 10.2993 126.509 cv
10.5347 126.227 10.6655 125.927 10.6929 125.609 cv
10.8452 125.609 li
10.8452 128.216 li
10.6929 128.216 li
10.6807 128.011 li
10.6768 127.945 10.6626 127.884 10.6387 127.83 cv
10.6147 127.775 10.5742 127.748 10.5181 127.748 cv
10.4741 127.748 10.4331 127.757 10.3945 127.777 cv
10.3564 127.796 10.3135 127.824 10.2651 127.859 cv
7.87451 129.675 li
10.0605 129.675 li
10.3325 129.675 10.5137 129.576 10.604 129.376 cv
10.6592 129.259 10.689 129.058 10.6929 128.773 cv
10.8452 128.773 li
10.8452 131.58 li
10.6929 131.58 li
cp
f
2.90576 122.607 mo
3.12842 122.607 li
3.13623 122.846 3.15771 123.016 3.19287 123.117 cv
3.25928 123.297 3.38037 123.387 3.55615 123.387 cv
3.63428 123.387 3.71045 123.376 3.78467 123.354 cv
3.85889 123.333 3.95459 123.301 4.07178 123.258 cv
8.5835 121.522 li
5.22119 120.254 li
3.75049 120.815 li
3.48438 120.921 3.30664 121.079 3.21631 121.29 cv
3.16162 121.415 3.13232 121.604 3.12842 121.858 cv
2.90576 121.858 li
2.90576 118.645 li
3.12842 118.645 li
3.13232 118.946 3.15381 119.153 3.19287 119.266 cv
3.25928 119.446 3.396 119.536 3.60303 119.536 cv
3.67334 119.536 3.73486 119.528 3.7876 119.512 cv
3.84033 119.497 3.94873 119.458 4.11279 119.395 cv
8.61279 117.661 li
4.54053 116.159 li
4.31006 116.073 4.10498 116.015 3.92529 115.983 cv
3.82373 115.964 3.7417 115.954 3.6792 115.954 cv
3.45654 115.954 3.30225 116.06 3.21631 116.271 cv
3.16553 116.388 3.13623 116.563 3.12842 116.798 cv
2.90576 116.798 li
2.90576 114.416 li
3.12842 114.416 li
3.15967 114.63 3.2085 114.794 3.2749 114.908 cv
3.38867 115.111 3.58398 115.263 3.86182 115.365 cv
7.43945 116.622 li
8.81982 117.106 li
10.9858 117.867 li
10.9858 118.052 li
9.6123 118.577 li
5.91602 119.966 li
10.9858 121.809 li
10.9858 121.99 li
8.50049 122.884 li
5.68701 123.896 li
4.52734 124.313 3.81641 124.605 3.55273 124.771 cv
3.28955 124.937 3.14795 125.196 3.12842 125.547 cv
2.90576 125.547 li
2.90576 122.607 li
cp
f
4.1499 112.057 mo
4.1499 106.604 li
4.88818 106.604 li
4.88818 112.057 li
4.1499 112.057 li
cp
f
.0395508 103.229 mo
.0483398 103.228 .0683594 103.227 .100098 103.227 cv
6.44922 103.227 li
6.72021 103.227 6.89209 103.154 6.96631 103.009 cv
7.04004 102.865 7.08398 102.594 7.09814 102.198 cv
7.24561 102.198 li
7.24561 105.178 li
7.0874 105.178 li
7.06641 104.752 7.0083 104.475 6.91357 104.345 cv
6.81836 104.215 6.61279 104.149 6.29639 104.149 cv
1.41309 104.149 li
1.24463 104.149 1.11621 104.17 1.02832 104.213 cv
.94043 104.255 .896484 104.347 .896484 104.487 cv
.896484 104.579 .921875 104.697 .972656 104.843 cv
1.02393 104.989 1.07764 105.125 1.13379 105.251 cv
.98584 105.251 li
0 103.316 li
0 103.253 li
.0175781 103.239 .0307617 103.231 .0395508 103.229 cv
cp
f
9.54443 97.2573 mo
10.064 97.4097 10.5542 97.6323 11.0151 97.9253 cv
11.5073 98.2339 11.9663 98.646 12.3921 99.1616 cv
12.6733 99.5015 12.8706 99.7866 12.9839 100.017 cv
12.7905 100.128 li
12.3335 99.5269 11.8667 99.0874 11.3901 98.8101 cv
10.5464 98.3179 9.43115 98.0718 8.04443 98.0718 cv
6.92334 98.0718 6.00732 98.1851 5.29639 98.4116 cv
4.29248 98.728 3.50342 99.3003 2.9292 100.128 cv
2.73584 99.9761 li
3.07959 99.3589 3.59912 98.7847 4.29443 98.2534 cv
5.36475 97.437 6.56396 97.0288 7.89209 97.0288 cv
8.47412 97.0288 9.0249 97.105 9.54443 97.2573 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
