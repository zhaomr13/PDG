%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: gasDet_sauli_spacecharge.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 8/22/16
%%BoundingBox: 0 -5 351 254
%%HiResBoundingBox: 0 -5 350.2998 253.1694
%%CropBox: 0 -5 350.2998 253.1694
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-22T15:35-07:00</xmp:CreateDate>
         <xmp:MetadataDate>2016-08-22T15:35-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-08-22T15:35-07:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>188</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAvAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8vsfy/8AMtj5M816&#xA;BBbwifX5NWvre7+vXHOO5nk9OwiduHqMq26RmR/U/Z48SDirLJUbyf8Al9HBYpHI2iafFb26vURn&#xA;0I1jWtKGm2Kqnp+f/wDlo0r/AJEXP/VbFXen5/8A+WjSv+RFz/1WxV3p+f8A/lo0r/kRc/8AVbFX&#xA;en5//wCWjSv+RFz/ANVsVd6fn/8A5aNK/wCRFz/1WxV3p+f/APlo0r/kRc/9VsVWTj8wY4JJEm0q&#xA;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&#xA;Vf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5.038133</stDim:w>
            <stDim:h>3.659268</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:02801174072068118083C3E7DED362AB</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:02801174072068118083C3E7DED362AB</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:02801174072068118083C3E7DED362AB</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083C3E7DED362AB</stEvt:instanceID>
                  <stEvt:when>2016-08-22T15:35-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -253.169 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 253.169 li
350.3 253.169 li
350.3 0 li
cp
clp
[1 0 0 1 0 0 ]ct
109.261 5.2163 mo
109.261 227.63 li
109.761 227.63 li
109.761 5.2163 li
109.261 5.2163 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.8 .8 .8 rgb
f
186.629 5.21631 mo
186.629 227.63 li
187.129 227.63 li
187.129 5.21631 li
f
264.385 5.21631 mo
264.385 227.63 li
264.885 227.63 li
264.885 5.21631 li
f
109.011 223.927 mo
109.011 227.63 li
110.011 227.63 li
110.011 223.927 li
0 0 0 rgb
f
186.379 223.927 mo
186.379 227.63 li
187.379 227.63 li
187.379 223.927 li
f
264.135 223.927 mo
264.135 227.63 li
265.135 227.63 li
265.135 223.927 li
f
109.011 5.21631 mo
109.011 8.91943 li
110.011 8.91943 li
110.011 5.21631 li
f
186.379 5.21631 mo
186.379 8.91943 li
187.379 8.91943 li
187.379 5.21631 li
f
264.135 5.21631 mo
264.135 8.91943 li
265.135 8.91943 li
265.135 5.21631 li
f
31.5107 50.3994 mo
342.753 50.3994 li
342.753 49.8994 li
31.5107 49.8994 li
.8 .8 .8 rgb
f
342.753 93.9965 mo
31.5108 93.9965 li
31.5108 94.4966 li
342.753 94.4966 li
342.753 93.9965 li
f
31.5108 139.391 mo
342.753 139.391 li
342.753 138.891 li
31.5108 138.891 li
31.5108 139.391 li
f
342.753 183.283 mo
31.5107 183.283 li
31.5107 183.783 li
342.753 183.783 li
f
107.116 151.652 mo
60.3623 151.652 li
60.3623 139.391 li
107.116 139.391 li
107.116 151.652 li
107.116 138.891 mo
60.3623 138.891 li
60.3623 94.4966 li
107.116 94.4966 li
107.116 138.891 li
107.116 93.9965 mo
60.3623 93.9965 li
60.3623 92.6655 li
107.116 92.6655 li
107.116 93.9965 li
1 1 1 rgb
f
107.116 94.4966 mo
60.3623 94.4966 li
60.3623 93.9965 li
107.116 93.9965 li
107.116 94.4966 li
.980392 .980392 .980392 rgb
f
107.116 139.391 mo
60.3623 139.391 li
60.3623 138.891 li
107.116 138.891 li
107.116 139.391 li
f
108.116 152.652 mo
59.3623 152.652 li
59.3623 139.391 li
60.3623 139.391 li
60.3623 151.652 li
107.116 151.652 li
107.116 139.391 li
108.116 139.391 li
108.116 152.152 li
108.116 152.652 li
107.616 152.152 mo
107.616 152.152 li
107.616 151.652 li
107.616 152.152 li
108.116 138.891 mo
107.116 138.891 li
107.116 94.4966 li
108.116 94.4966 li
108.116 138.891 li
60.3623 138.891 mo
59.3623 138.891 li
59.3623 94.4966 li
60.3623 94.4966 li
60.3623 138.891 li
108.116 93.9965 mo
107.116 93.9965 li
107.116 92.6655 li
60.3623 92.6655 li
60.3623 93.9965 li
59.3623 93.9965 li
59.3623 91.6656 li
108.116 91.6656 li
108.116 93.9965 li
1 1 1 rgb
f
108.116 94.4966 mo
107.116 94.4966 li
107.116 93.9965 li
108.116 93.9965 li
108.116 94.4966 li
60.3623 94.4966 mo
59.3623 94.4966 li
59.3623 93.9965 li
60.3623 93.9965 li
60.3623 94.4966 li
.980392 .980392 .980392 rgb
f
108.116 139.391 mo
107.116 139.391 li
107.116 138.891 li
108.116 138.891 li
108.116 139.391 li
60.3623 139.391 mo
59.3623 139.391 li
59.3623 138.891 li
60.3623 138.891 li
60.3623 139.391 li
f
117.224 88.9116 mo
109.761 88.9116 li
109.761 74.5029 li
117.224 74.5029 li
117.224 88.9116 li
109.261 88.9116 mo
41.1796 88.9116 li
41.1796 74.5029 li
109.261 74.5029 li
109.261 88.9116 li
1 1 1 rgb
f
109.761 88.9116 mo
109.261 88.9116 li
109.261 74.5029 li
109.761 74.5029 li
109.761 88.9116 li
.980392 .980392 .980392 rgb
f
118.224 89.9116 mo
109.761 89.9116 li
109.761 88.9116 li
117.224 88.9116 li
117.224 74.5029 li
109.761 74.5029 li
109.761 73.5029 li
118.224 73.5029 li
118.224 89.4116 li
118.224 89.9116 li
117.724 89.4116 mo
117.724 89.4116 li
117.724 88.9116 li
117.724 89.4116 li
109.261 89.9116 mo
40.1797 89.9116 li
40.1797 73.5029 li
109.261 73.5029 li
109.261 74.5029 li
41.1796 74.5029 li
41.1796 88.9116 li
109.261 88.9116 li
109.261 89.9116 li
1 1 1 rgb
f
109.761 89.9116 mo
109.261 89.9116 li
109.261 88.9116 li
109.761 88.9116 li
109.761 89.9116 li
109.761 74.5029 mo
109.261 74.5029 li
109.261 73.5029 li
109.761 73.5029 li
109.761 74.5029 li
.980392 .980392 .980392 rgb
f
342.717 227.63 mo
342.717 227.13 li
32.0473 227.13 li
32.0474 5.71628 li
342.217 5.71631 li
342.217 227.63 li
342.717 227.63 li
342.717 227.13 li
342.717 227.63 li
343.217 227.63 li
343.217 4.71631 li
31.0474 4.71631 li
31.0474 228.13 li
343.217 228.13 li
343.217 227.63 li
342.717 227.63 li
cp
0 0 0 rgb
f
45.6084 82.7295 mo
47.4346 82.7295 li
47.1367 79.8975 li
45.6084 82.7295 li
cp
46.6533 78.252 mo
48.3525 78.252 li
49.373 85.4492 li
47.7422 85.4492 li
47.5908 83.9697 li
44.9395 83.9697 li
44.1289 85.4492 li
42.5566 85.4492 li
46.6533 78.252 li
cp
f
54.2173 80.127 mo
55.7114 80.127 li
52.6641 85.4492 li
51.1943 85.4492 li
50.4131 80.127 li
51.9756 80.127 li
52.249 84.0527 li
54.2173 80.127 li
cp
f
58.8501 82.8613 mo
58.7524 82.9165 58.6548 82.9614 58.5571 82.9956 cv
58.4595 83.0298 58.3296 83.0615 58.1665 83.0908 cv
57.8442 83.1494 li
57.5386 83.2017 57.314 83.2651 57.1704 83.3398 cv
56.9292 83.4668 56.7817 83.6636 56.7261 83.9307 cv
56.6743 84.1685 56.7026 84.3398 56.811 84.4458 cv
56.9204 84.5518 57.0698 84.6045 57.2583 84.6045 cv
57.5581 84.6045 57.8521 84.5166 58.1421 84.3408 cv
58.4321 84.165 58.6323 83.8442 58.7427 83.3789 cv
58.8501 82.8613 li
cp
58.1421 82.2119 mo
58.4087 82.1792 58.603 82.1387 58.7231 82.0898 cv
58.938 82.0054 59.0649 81.8735 59.104 81.6943 cv
59.1499 81.4761 59.106 81.3257 58.9722 81.2427 cv
58.8384 81.1597 58.6255 81.1182 58.3325 81.1182 cv
58.0034 81.1182 57.7534 81.1997 57.5806 81.3623 cv
57.4604 81.4829 57.3608 81.6455 57.2827 81.8506 cv
55.9399 81.8506 li
56.0698 81.3853 56.2817 81.0024 56.5747 80.7031 cv
57.0435 80.2344 57.7251 80 58.6206 80 cv
59.2036 80 59.6968 80.1157 60.1001 80.3467 cv
60.5034 80.5776 60.6372 81.0142 60.5005 81.6553 cv
59.978 84.0967 li
59.9419 84.2661 59.9028 84.4712 59.8608 84.7119 cv
59.8315 84.894 59.8325 85.0181 59.8638 85.083 cv
60.0317 85.2441 li
59.9927 85.4492 li
58.479 85.4492 li
58.4595 85.3418 58.4517 85.2407 58.4546 85.1465 cv
58.4575 85.0522 58.4673 84.9448 58.4839 84.8242 cv
58.2466 85.0327 57.9878 85.21 57.7075 85.3564 cv
57.3687 85.5288 57.0112 85.6152 56.6333 85.6152 cv
56.1519 85.6152 55.7827 85.4775 55.5278 85.2026 cv
55.272 84.9277 55.1978 84.5376 55.3052 84.0332 cv
55.4448 83.3789 55.7983 82.9053 56.3647 82.6123 cv
56.6743 82.4526 57.105 82.3389 57.6587 82.2705 cv
58.1421 82.2119 li
cp
f
62.3521 85.4492 mo
60.9604 85.4492 li
62.4888 78.252 li
63.8804 78.252 li
62.3521 85.4492 li
cp
f
67.1899 82.8613 mo
67.0923 82.9165 66.9946 82.9614 66.897 82.9956 cv
66.7993 83.0298 66.6694 83.0615 66.5063 83.0908 cv
66.1841 83.1494 li
65.8784 83.2017 65.6538 83.2651 65.5103 83.3398 cv
65.269 83.4668 65.1216 83.6636 65.0659 83.9307 cv
65.0142 84.1685 65.0425 84.3398 65.1509 84.4458 cv
65.2603 84.5518 65.4097 84.6045 65.5981 84.6045 cv
65.8979 84.6045 66.1919 84.5166 66.4819 84.3408 cv
66.772 84.165 66.9722 83.8442 67.0825 83.3789 cv
67.1899 82.8613 li
cp
66.4819 82.2119 mo
66.7485 82.1792 66.9429 82.1387 67.063 82.0898 cv
67.2778 82.0054 67.4048 81.8735 67.4438 81.6943 cv
67.4897 81.4761 67.4458 81.3257 67.312 81.2427 cv
67.1782 81.1597 66.9653 81.1182 66.6724 81.1182 cv
66.3433 81.1182 66.0933 81.1997 65.9204 81.3623 cv
65.8003 81.4829 65.7007 81.6455 65.6226 81.8506 cv
64.2798 81.8506 li
64.4097 81.3853 64.6216 81.0024 64.9146 80.7031 cv
65.3833 80.2344 66.0649 80 66.9604 80 cv
67.5435 80 68.0366 80.1157 68.4399 80.3467 cv
68.8433 80.5776 68.9771 81.0142 68.8403 81.6553 cv
68.3179 84.0967 li
68.2817 84.2661 68.2427 84.4712 68.2007 84.7119 cv
68.1714 84.894 68.1724 85.0181 68.2036 85.083 cv
68.3716 85.2441 li
68.3325 85.4492 li
66.8188 85.4492 li
66.7993 85.3418 66.7915 85.2407 66.7944 85.1465 cv
66.7974 85.0522 66.8071 84.9448 66.8237 84.8242 cv
66.5864 85.0327 66.3276 85.21 66.0474 85.3564 cv
65.7085 85.5288 65.3511 85.6152 64.9731 85.6152 cv
64.4917 85.6152 64.1226 85.4775 63.8677 85.2026 cv
63.6118 84.9277 63.5376 84.5376 63.645 84.0332 cv
63.7847 83.3789 64.1382 82.9053 64.7046 82.6123 cv
65.0142 82.4526 65.4448 82.3389 65.9985 82.2705 cv
66.4819 82.2119 li
cp
f
74.8569 81.8652 mo
74.0952 85.4492 li
72.6694 85.4492 li
73.353 82.2119 li
73.4146 81.9321 73.4233 81.7173 73.3774 81.5674 cv
73.2993 81.2939 73.0679 81.1572 72.6841 81.1572 cv
72.2124 81.1572 71.8462 81.3574 71.5854 81.7578 cv
71.4487 81.9692 71.3462 82.2397 71.2778 82.5684 cv
70.6675 85.4492 li
69.2808 85.4492 li
70.4087 80.1367 li
71.7515 80.1367 li
71.5854 80.9131 li
71.8228 80.6396 72.0347 80.4429 72.2202 80.3223 cv
72.5522 80.1074 72.938 80 73.3774 80 cv
73.9272 80 74.3462 80.144 74.6353 80.4321 cv
74.9224 80.7202 74.9966 81.1978 74.8569 81.8652 cv
cp
f
79.2798 82.0361 mo
79.2964 81.8374 79.2671 81.6587 79.1919 81.499 cv
79.0815 81.2842 78.8618 81.1768 78.5327 81.1768 cv
78.064 81.1768 77.6948 81.4097 77.4243 81.875 cv
77.2808 82.1226 77.1655 82.4512 77.0776 82.8613 cv
76.9966 83.252 76.9751 83.5659 77.0142 83.8037 cv
77.0854 84.2466 77.3511 84.4678 77.8101 84.4678 cv
78.1353 84.4678 78.3853 84.3799 78.5591 84.2041 cv
78.7339 84.0283 78.8647 83.8003 78.9526 83.5205 cv
80.3735 83.5205 li
80.2534 83.9438 80.0151 84.3442 79.6606 84.7217 cv
79.0942 85.3306 78.3833 85.6348 77.5269 85.6348 cv
76.6704 85.6348 76.0952 85.3809 75.8013 84.873 cv
75.5063 84.3652 75.4448 83.7061 75.6177 82.8955 cv
75.8101 81.981 76.1831 81.2695 76.7388 80.7617 cv
77.2935 80.2539 77.9634 80 78.7476 80 cv
79.4146 80 79.9292 80.1499 80.2905 80.4492 cv
80.6519 80.7485 80.7905 81.2778 80.7056 82.0361 cv
79.2798 82.0361 li
cp
f
86.4438 80.6836 mo
86.5483 80.8823 86.5942 81.0864 86.5825 81.2964 cv
86.5718 81.5063 86.5151 81.8491 86.4146 82.3242 cv
85.7505 85.4492 li
84.3296 85.4492 li
85.0132 82.2119 li
85.0747 81.9253 85.0767 81.6943 85.0181 81.5186 cv
84.9429 81.271 84.728 81.1475 84.3735 81.1475 cv
84.0054 81.1475 83.7007 81.2705 83.4575 81.5161 cv
83.2153 81.7617 83.0454 82.1128 82.9478 82.5684 cv
82.3374 85.4492 li
80.9507 85.4492 li
82.4741 78.2764 li
83.8608 78.2764 li
83.3188 80.8203 li
83.5854 80.5112 83.8647 80.2954 84.1567 80.1733 cv
84.4478 80.0513 84.7397 79.9902 85.0327 79.9902 cv
85.3618 79.9902 85.6479 80.0474 85.8921 80.1611 cv
86.1362 80.2749 86.3198 80.4492 86.4438 80.6836 cv
cp
f
88.7427 82.2559 mo
90.9058 82.2559 li
90.9614 81.8882 90.9087 81.6089 90.7466 81.4185 cv
90.5864 81.228 90.3569 81.1328 90.061 81.1328 cv
89.7388 81.1328 89.4673 81.2339 89.2485 81.4355 cv
89.0278 81.6372 88.8599 81.9106 88.7427 82.2559 cv
cp
92.1606 81.0205 mo
92.3042 81.3364 92.3608 81.7026 92.3315 82.1191 cv
92.3188 82.3633 92.2603 82.7148 92.1558 83.1738 cv
88.5132 83.1738 li
88.4185 83.7075 88.5063 84.082 88.7769 84.2969 cv
88.9399 84.4302 89.1558 84.4971 89.4263 84.4971 cv
89.7124 84.4971 89.9634 84.4155 90.1782 84.2529 cv
90.2925 84.165 90.4048 84.043 90.5151 83.8867 cv
91.936 83.8867 li
91.8315 84.2026 91.5991 84.5229 91.2378 84.8486 cv
90.6714 85.3662 89.978 85.625 89.1577 85.625 cv
88.481 85.625 87.9302 85.4067 87.5044 84.9707 cv
87.0806 84.5347 86.9722 83.8247 87.1802 82.8418 cv
87.3755 81.9204 87.7583 81.2144 88.3306 80.7227 cv
88.9009 80.231 89.5601 79.9854 90.3052 79.9854 cv
90.7476 79.9854 91.1294 80.0684 91.4497 80.2344 cv
91.771 80.4004 92.0073 80.6626 92.1606 81.0205 cv
cp
f
96.8286 83.75 mo
96.8062 83.9976 96.8335 84.1733 96.9116 84.2773 cv
97.0415 84.4629 97.3394 84.5557 97.8052 84.5557 cv
98.0786 84.5557 98.3052 84.5151 98.4839 84.4336 cv
98.6626 84.3521 98.77 84.23 98.8062 84.0674 cv
98.8384 83.9111 98.7983 83.7925 98.6841 83.7109 cv
98.5698 83.6294 98.1157 83.4897 97.3218 83.291 cv
96.7524 83.1411 96.3677 82.9541 96.1694 82.7295 cv
95.9673 82.5083 95.9126 82.189 96.0034 81.7725 cv
96.1079 81.2808 96.3901 80.8584 96.8501 80.5054 cv
97.311 80.1523 97.8911 79.9756 98.5913 79.9756 cv
99.2554 79.9756 99.7681 80.1084 100.129 80.3735 cv
100.491 80.6387 100.634 81.0972 100.559 81.748 cv
99.1675 81.748 li
99.1841 81.5688 99.1626 81.4272 99.104 81.3232 cv
98.9897 81.1343 98.7495 81.04 98.3813 81.04 cv
98.0786 81.04 97.853 81.0874 97.7056 81.1816 cv
97.5571 81.2759 97.4702 81.3867 97.4438 81.5137 cv
97.4077 81.6733 97.4517 81.7886 97.5757 81.8604 cv
97.6958 81.9351 98.1519 82.064 98.9429 82.2461 cv
99.4673 82.3765 99.8394 82.5732 100.061 82.8369 cv
100.279 83.104 100.346 83.4375 100.261 83.8379 cv
100.147 84.3652 99.8589 84.7959 99.397 85.1294 cv
98.9351 85.4629 98.2935 85.6299 97.4731 85.6299 cv
96.6362 85.6299 96.0562 85.4531 95.7329 85.1001 cv
95.4087 84.7471 95.3032 84.2969 95.4175 83.75 cv
96.8286 83.75 li
cp
f
103.646 79.4922 mo
102.235 79.4922 li
102.508 78.208 li
103.919 78.208 li
103.646 79.4922 li
cp
102.098 80.127 mo
103.509 80.127 li
102.381 85.4492 li
100.97 85.4492 li
102.098 80.127 li
cp
f
104.314 81.2598 mo
104.553 80.127 li
108.87 80.127 li
108.625 81.2842 li
105.281 84.3066 li
108.074 84.3066 li
107.834 85.4492 li
103.24 85.4492 li
103.469 84.3652 li
106.858 81.2598 li
104.314 81.2598 li
cp
f
110.422 82.2559 mo
112.585 82.2559 li
112.641 81.8882 112.588 81.6089 112.426 81.4185 cv
112.266 81.228 112.037 81.1328 111.741 81.1328 cv
111.418 81.1328 111.147 81.2339 110.928 81.4355 cv
110.708 81.6372 110.54 81.9106 110.422 82.2559 cv
cp
113.84 81.0205 mo
113.984 81.3364 114.041 81.7026 114.011 82.1191 cv
113.999 82.3633 113.94 82.7148 113.835 83.1738 cv
110.193 83.1738 li
110.098 83.7075 110.186 84.082 110.457 84.2969 cv
110.62 84.4302 110.835 84.4971 111.106 84.4971 cv
111.392 84.4971 111.643 84.4155 111.858 84.2529 cv
111.972 84.165 112.084 84.043 112.195 83.8867 cv
113.616 83.8867 li
113.511 84.2026 113.279 84.5229 112.917 84.8486 cv
112.351 85.3662 111.658 85.625 110.837 85.625 cv
110.161 85.625 109.61 85.4067 109.184 84.9707 cv
108.76 84.5347 108.652 83.8247 108.86 82.8418 cv
109.055 81.9204 109.438 81.2144 110.01 80.7227 cv
110.581 80.231 111.24 79.9854 111.985 79.9854 cv
112.427 79.9854 112.809 80.0684 113.129 80.2344 cv
113.451 80.4004 113.687 80.6626 113.84 81.0205 cv
cp
f
5.60986 24.8677 mo
5.6001 24.376 5.39502 24.0327 4.99463 23.8374 cv
4.77002 23.73 4.50635 23.6763 4.20361 23.6763 cv
3.62402 23.6763 3.10156 23.895 2.63623 24.333 cv
2.1709 24.771 1.84375 25.4292 1.65479 26.3081 cv
1.46924 27.1934 1.53857 27.8203 1.8623 28.188 cv
2.18604 28.5557 2.60547 28.7397 3.11963 28.7397 cv
3.62402 28.7397 4.06934 28.5942 4.45508 28.3027 cv
4.84082 28.0112 5.12012 27.6299 5.29248 27.1577 cv
3.62744 27.1577 li
3.88623 25.9565 li
6.88428 25.9565 li
6.06396 29.8188 li
5.06787 29.8188 li
5.10693 28.9204 li
4.74219 29.2622 4.42969 29.5029 4.16943 29.6431 cv
3.72021 29.8872 3.20605 30.0093 2.62646 30.0093 cv
1.67285 30.0093 .961426 29.6787 .492676 29.0181 cv
.000976563 28.354 -.122559 27.4458 .121582 26.2935 cv
.369141 25.1279 .888184 24.1938 1.6792 23.4907 cv
2.47021 22.7876 3.39307 22.436 4.44775 22.436 cv
5.3623 22.436 6.04785 22.668 6.50342 23.1318 cv
6.95898 23.5957 7.1543 24.1743 7.08936 24.8677 cv
5.60986 24.8677 li
cp
f
10.5513 22.4019 mo
11.708 22.4019 li
7.33838 29.8188 li
6.19092 29.8188 li
10.5513 22.4019 li
cp
f
16.167 24.8677 mo
16.1572 24.376 15.9521 24.0327 15.5518 23.8374 cv
15.3271 23.73 15.0635 23.6763 14.7607 23.6763 cv
14.1807 23.6763 13.6592 23.895 13.1924 24.333 cv
12.7275 24.771 12.3994 25.4292 12.2119 26.3081 cv
12.0264 27.1934 12.0947 27.8203 12.4189 28.188 cv
12.7432 28.5557 13.1611 28.7397 13.6768 28.7397 cv
14.1807 28.7397 14.626 28.5942 15.0127 28.3027 cv
15.3975 28.0112 15.6768 27.6299 15.8486 27.1577 cv
14.1846 27.1577 li
14.4424 25.9565 li
17.4404 25.9565 li
16.6201 29.8188 li
15.624 29.8188 li
15.6631 28.9204 li
15.2998 29.2622 14.9873 29.5029 14.7256 29.6431 cv
14.2764 29.8872 13.7627 30.0093 13.1826 30.0093 cv
12.2295 30.0093 11.5186 29.6787 11.0498 29.0181 cv
10.5576 28.354 10.4341 27.4458 10.6787 26.2935 cv
10.9258 25.1279 11.4443 24.1938 12.2354 23.4907 cv
13.0264 22.7876 13.9502 22.436 15.0049 22.436 cv
15.9189 22.436 16.6045 22.668 17.0596 23.1318 cv
17.5166 23.5957 17.7119 24.1743 17.6455 24.8677 cv
16.167 24.8677 li
cp
f
20.2607 34.1455 mo
20.5498 34.1455 20.7715 33.9946 20.9258 33.6929 cv
21.0791 33.3911 21.2178 32.9556 21.3408 32.3862 cv
21.4658 31.7896 21.5137 31.3477 21.4854 31.0605 cv
21.457 30.7739 21.2979 30.6304 21.0088 30.6304 cv
20.7197 30.6304 20.498 30.7739 20.3428 31.0605 cv
20.1885 31.3477 20.0479 31.7896 19.9229 32.3862 cv
19.7998 32.9556 19.7529 33.3911 19.7832 33.6929 cv
19.8125 33.9946 19.9717 34.1455 20.2607 34.1455 cv
cp
22.3447 32.3862 mo
22.1689 33.2036 21.9082 33.8335 21.5605 34.2754 cv
21.2139 34.7173 20.7246 34.938 20.0938 34.938 cv
19.4629 34.938 19.0674 34.7173 18.9063 34.2754 cv
18.7461 33.8335 18.7529 33.2036 18.9287 32.3862 cv
19.1016 31.5688 19.3623 30.938 19.7109 30.4937 cv
20.0596 30.0498 20.5488 29.8276 21.1797 29.8276 cv
21.8105 29.8276 22.2061 30.0498 22.3652 30.4937 cv
22.5244 30.938 22.5176 31.5688 22.3447 32.3862 cv
cp
f
11.3643 2.19727 mo
11.5645 1.25 li
12.0107 1.23047 12.3242 1.20117 12.5068 1.16211 cv
12.7998 1.10059 13.0537 .976563 13.2686 .791016 cv
13.418 .664063 13.5449 .495117 13.6494 .283203 cv
13.7148 .15625 13.7539 .0615234 13.7666 0 cv
14.9238 0 li
13.4199 7.08008 li
11.9941 7.08008 li
13.0293 2.19727 li
11.3643 2.19727 li
cp
f
16.1299 5.625 mo
17.6094 5.625 li
17.3018 7.08008 li
15.8223 7.08008 li
16.1299 5.625 li
cp
f
19.7041 2.19727 mo
19.9043 1.25 li
20.3506 1.23047 20.6641 1.20117 20.8467 1.16211 cv
21.1396 1.10059 21.3936 .976563 21.6084 .791016 cv
21.7578 .664063 21.8848 .495117 21.9893 .283203 cv
22.0547 .15625 22.0938 .0615234 22.1064 0 cv
23.2637 0 li
21.7598 7.08008 li
20.334 7.08008 li
21.3691 2.19727 li
19.7041 2.19727 li
cp
f
19.6978 46.8643 mo
19.8979 45.917 li
20.3442 45.8975 20.6577 45.8682 20.8403 45.8291 cv
21.1333 45.7676 21.3872 45.6436 21.6021 45.458 cv
21.7515 45.3311 21.8784 45.1621 21.9829 44.9502 cv
22.0483 44.8232 22.0874 44.7285 22.1001 44.667 cv
23.2573 44.667 li
21.7534 51.7471 li
20.3276 51.7471 li
21.3628 46.8643 li
19.6978 46.8643 li
cp
f
12.2568 95.123 mo
12.6699 95.123 12.9863 94.9072 13.207 94.4766 cv
13.4258 94.0449 13.624 93.4219 13.7998 92.6084 cv
13.9785 91.7559 14.0479 91.124 14.0078 90.7139 cv
13.9668 90.3037 13.7393 90.0986 13.3262 90.0986 cv
12.9131 90.0986 12.5957 90.3037 12.374 90.7139 cv
12.1523 91.124 11.9521 91.7559 11.7734 92.6084 cv
11.5977 93.4219 11.5313 94.0449 11.5732 94.4766 cv
11.6152 94.9072 11.8438 95.123 12.2568 95.123 cv
cp
15.2354 92.6084 mo
14.9844 93.7773 14.6113 94.6768 14.1152 95.3086 cv
13.6182 95.9404 12.9189 96.2559 12.0176 96.2559 cv
11.1162 96.2559 10.5508 95.9404 10.3203 95.3086 cv
10.0918 94.6768 10.1016 93.7773 10.3525 92.6084 cv
10.5996 91.4395 10.9727 90.5381 11.4707 89.9033 cv
11.9688 89.2686 12.6689 88.9512 13.5703 88.9512 cv
14.4717 88.9512 15.0371 89.2686 15.2646 89.9033 cv
15.4922 90.5381 15.4824 91.4395 15.2354 92.6084 cv
cp
f
15.7969 94.625 mo
17.2764 94.625 li
16.9688 96.0801 li
15.4893 96.0801 li
15.7969 94.625 li
cp
f
21.7051 92.457 mo
22.0635 92.2549 22.2959 91.9053 22.4033 91.4072 cv
22.4883 91.0068 22.4619 90.6895 22.3252 90.4551 cv
22.1885 90.2207 21.957 90.1035 21.6318 90.1035 cv
21.3945 90.1035 21.1758 90.1699 20.9775 90.3037 cv
20.665 90.5117 20.457 90.8652 20.3525 91.3633 cv
20.2617 91.7832 20.2793 92.0977 20.4063 92.3086 cv
20.5332 92.5176 20.7744 92.623 21.1289 92.623 cv
21.3213 92.623 21.5127 92.5674 21.7051 92.457 cv
cp
21.8174 88.9414 mo
22.8945 88.9414 23.5332 89.418 23.7314 90.3721 cv
23.8457 90.9121 23.8076 91.624 23.6191 92.5059 cv
23.4365 93.3623 23.1768 94.0762 22.8379 94.6494 cv
22.1904 95.7402 21.3096 96.2852 20.1963 96.2852 cv
19.666 96.2852 19.2227 96.1279 18.8652 95.8145 cv
18.5098 95.5 18.3633 95.042 18.4287 94.4395 cv
19.8154 94.4395 li
19.8027 94.6475 19.8535 94.8174 19.9688 94.9473 cv
20.085 95.0771 20.2617 95.1426 20.499 95.1426 cv
20.958 95.1426 21.334 94.8887 21.627 94.3809 cv
21.79 94.1006 21.9414 93.6924 22.0811 93.1553 cv
21.918 93.3145 21.7568 93.4365 21.5977 93.5215 cv
21.3047 93.6777 20.9678 93.7559 20.5869 93.7559 cv
20.0234 93.7559 19.5645 93.5615 19.21 93.1719 cv
18.8555 92.7832 18.7559 92.2227 18.9121 91.4902 cv
19.0752 90.7314 19.4248 90.1172 19.9619 89.6465 cv
20.499 89.1768 21.1172 88.9414 21.8174 88.9414 cv
cp
f
12.5903 139.458 mo
13.0034 139.458 13.3198 139.242 13.5405 138.811 cv
13.7593 138.379 13.9575 137.756 14.1333 136.943 cv
14.312 136.09 14.3813 135.458 14.3413 135.048 cv
14.3003 134.638 14.0728 134.433 13.6597 134.433 cv
13.2466 134.433 12.9292 134.638 12.7075 135.048 cv
12.4858 135.458 12.2856 136.09 12.1069 136.943 cv
11.9312 137.756 11.8647 138.379 11.9067 138.811 cv
11.9487 139.242 12.1772 139.458 12.5903 139.458 cv
cp
15.5688 136.943 mo
15.3179 138.112 14.9448 139.011 14.4487 139.643 cv
13.9517 140.275 13.2524 140.59 12.3511 140.59 cv
11.4497 140.59 10.8843 140.275 10.6538 139.643 cv
10.4253 139.011 10.4351 138.112 10.686 136.943 cv
10.9331 135.774 11.3062 134.873 11.8042 134.238 cv
12.3022 133.603 13.0024 133.286 13.9038 133.286 cv
14.8052 133.286 15.3706 133.603 15.5981 134.238 cv
15.8257 134.873 15.8159 135.774 15.5688 136.943 cv
cp
f
16.1304 138.959 mo
17.6099 138.959 li
17.3022 140.415 li
15.8228 140.415 li
16.1304 138.959 li
cp
f
21.5991 136.191 mo
21.8823 136.191 22.1187 136.11 22.3101 135.947 cv
22.4995 135.784 22.6216 135.574 22.6733 135.317 cv
22.7349 135.037 22.7046 134.818 22.5835 134.661 cv
22.4604 134.502 22.2583 134.423 21.9751 134.423 cv
21.6948 134.423 21.4604 134.502 21.269 134.661 cv
21.0796 134.818 20.9526 135.037 20.8911 135.317 cv
20.8394 135.574 20.8745 135.784 20.9956 135.947 cv
21.1187 136.11 21.3188 136.191 21.5991 136.191 cv
cp
20.9058 139.458 mo
21.2251 139.458 21.4946 139.362 21.7163 139.169 cv
21.938 138.977 22.0854 138.708 22.1606 138.359 cv
22.2388 137.998 22.2056 137.723 22.0601 137.536 cv
21.9155 137.349 21.687 137.255 21.3745 137.255 cv
21.062 137.255 20.7944 137.349 20.5718 137.536 cv
20.3481 137.723 20.1978 137.998 20.1196 138.359 cv
20.0444 138.708 20.0776 138.977 20.2173 139.169 cv
20.3569 139.362 20.5864 139.458 20.9058 139.458 cv
cp
20.105 136.645 mo
19.8091 136.417 19.6382 136.17 19.5923 135.905 cv
19.5464 135.64 19.5483 135.392 19.5972 135.161 cv
19.7075 134.646 19.9956 134.208 20.4585 133.844 cv
20.9233 133.482 21.5083 133.3 22.2144 133.3 cv
22.9204 133.3 23.4292 133.482 23.7397 133.844 cv
24.0513 134.208 24.1509 134.646 24.0405 135.161 cv
23.9917 135.392 23.8872 135.64 23.728 135.905 cv
23.5688 136.17 23.2983 136.401 22.9175 136.596 cv
23.2231 136.792 23.4302 137.05 23.5376 137.373 cv
23.645 137.695 23.6567 138.054 23.5718 138.452 cv
23.4448 139.047 23.1157 139.554 22.5854 139.973 cv
22.0552 140.391 21.394 140.6 20.603 140.6 cv
19.812 140.6 19.2573 140.391 18.9409 139.973 cv
18.6226 139.554 18.5278 139.047 18.6548 138.452 cv
18.7397 138.054 18.9058 137.695 19.1558 137.373 cv
19.4038 137.05 19.7212 136.808 20.105 136.645 cv
cp
f
12.2568 183.494 mo
12.6699 183.494 12.9863 183.278 13.207 182.847 cv
13.4258 182.416 13.624 181.792 13.7998 180.979 cv
13.9785 180.126 14.0479 179.495 14.0078 179.084 cv
13.9668 178.674 13.7393 178.469 13.3262 178.469 cv
12.9131 178.469 12.5957 178.674 12.374 179.084 cv
12.1523 179.495 11.9521 180.126 11.7734 180.979 cv
11.5977 181.792 11.5313 182.416 11.5732 182.847 cv
11.6152 183.278 11.8438 183.494 12.2568 183.494 cv
cp
15.2354 180.979 mo
14.9844 182.148 14.6113 183.047 14.1152 183.679 cv
13.6182 184.311 12.9189 184.626 12.0176 184.626 cv
11.1162 184.626 10.5508 184.311 10.3203 183.679 cv
10.0918 183.047 10.1016 182.148 10.3525 180.979 cv
10.5996 179.81 10.9727 178.909 11.4707 178.274 cv
11.9688 177.639 12.6689 177.322 13.5703 177.322 cv
14.4717 177.322 15.0371 177.639 15.2646 178.274 cv
15.4922 178.909 15.4824 179.81 15.2354 180.979 cv
cp
f
15.7969 182.996 mo
17.2764 182.996 li
16.9688 184.451 li
15.4893 184.451 li
15.7969 182.996 li
cp
f
24.166 178.552 mo
23.915 178.757 23.5488 179.123 23.0645 179.648 cv
22.582 180.174 22.1563 180.717 21.7881 181.277 cv
21.4951 181.716 21.2012 182.253 20.9063 182.888 cv
20.6123 183.523 20.4229 184.043 20.3379 184.451 cv
18.8926 184.451 li
19.2021 183.181 19.8984 181.861 20.9824 180.491 cv
21.6729 179.641 22.2256 179.048 22.6426 178.713 cv
19.1123 178.713 li
19.4004 177.463 li
24.4004 177.463 li
24.166 178.552 li
cp
f
12.5903 228.125 mo
13.0034 228.125 13.3198 227.909 13.5405 227.478 cv
13.7593 227.046 13.9575 226.423 14.1333 225.61 cv
14.312 224.757 14.3813 224.125 14.3413 223.715 cv
14.3003 223.305 14.0728 223.1 13.6597 223.1 cv
13.2466 223.1 12.9292 223.305 12.7075 223.715 cv
12.4858 224.125 12.2856 224.757 12.1069 225.61 cv
11.9312 226.423 11.8647 227.046 11.9067 227.478 cv
11.9487 227.909 12.1772 228.125 12.5903 228.125 cv
cp
15.5688 225.61 mo
15.3179 226.779 14.9448 227.678 14.4487 228.31 cv
13.9517 228.942 13.2524 229.257 12.3511 229.257 cv
11.4497 229.257 10.8843 228.942 10.6538 228.31 cv
10.4253 227.678 10.4351 226.779 10.686 225.61 cv
10.9331 224.441 11.3062 223.54 11.8042 222.905 cv
12.3022 222.27 13.0024 221.953 13.9038 221.953 cv
14.8052 221.953 15.3706 222.27 15.5981 222.905 cv
15.8257 223.54 15.8159 224.441 15.5688 225.61 cv
cp
f
16.1304 227.626 mo
17.6099 227.626 li
17.3022 229.082 li
15.8228 229.082 li
16.1304 227.626 li
cp
f
20.9741 228.134 mo
21.2837 228.134 21.5513 228.018 21.7769 227.785 cv
22.0034 227.552 22.1558 227.25 22.2339 226.879 cv
22.3218 226.466 22.2886 226.15 22.1343 225.929 cv
21.979 225.71 21.7554 225.6 21.4624 225.6 cv
21.2251 225.6 21.0005 225.671 20.7886 225.815 cv
20.4692 226.027 20.2593 226.369 20.1587 226.84 cv
20.0776 227.221 20.1138 227.532 20.269 227.773 cv
20.4233 228.014 20.6587 228.134 20.9741 228.134 cv
cp
22.7661 223.784 mo
22.7925 223.669 22.7739 223.544 22.7124 223.408 cv
22.6118 223.186 22.4097 223.076 22.1069 223.076 cv
21.6548 223.076 21.2788 223.33 20.979 223.837 cv
20.8159 224.118 20.6567 224.531 20.5005 225.078 cv
20.7153 224.873 20.9468 224.723 21.1968 224.628 cv
21.4448 224.534 21.7163 224.487 22.0093 224.487 cv
22.6372 224.487 23.1069 224.7 23.4175 225.126 cv
23.729 225.553 23.813 226.098 23.6694 226.762 cv
23.5298 227.423 23.2085 228.005 22.7075 228.51 cv
22.2065 229.015 21.5405 229.267 20.7104 229.267 cv
19.8188 229.267 19.2407 228.894 18.9771 228.149 cv
18.772 227.566 18.7671 226.814 18.9624 225.893 cv
19.0796 225.353 19.1968 224.914 19.314 224.575 cv
19.522 223.972 19.7856 223.471 20.105 223.071 cv
20.3784 222.729 20.7017 222.454 21.0737 222.246 cv
21.4468 222.038 21.8608 221.933 22.3169 221.933 cv
22.9741 221.933 23.4624 222.101 23.7817 222.439 cv
24.1011 222.775 24.2241 223.224 24.1528 223.784 cv
22.7661 223.784 li
cp
f
25.0317 236.199 mo
25.2319 235.251 li
25.6782 235.232 25.9917 235.203 26.1743 235.164 cv
26.4673 235.102 26.7212 234.978 26.936 234.792 cv
27.0854 234.666 27.2124 234.497 27.3169 234.285 cv
27.3823 234.158 27.4214 234.063 27.4341 234.001 cv
28.5913 234.001 li
27.0874 241.082 li
25.6616 241.082 li
26.6968 236.199 li
25.0317 236.199 li
cp
f
31.8188 240.125 mo
32.2319 240.125 32.5483 239.909 32.769 239.478 cv
32.9878 239.046 33.186 238.423 33.3618 237.61 cv
33.5405 236.757 33.6099 236.125 33.5698 235.715 cv
33.5288 235.305 33.3013 235.1 32.8882 235.1 cv
32.4751 235.1 32.1577 235.305 31.936 235.715 cv
31.7144 236.125 31.5142 236.757 31.3354 237.61 cv
31.1597 238.423 31.0933 239.046 31.1353 239.478 cv
31.1772 239.909 31.4058 240.125 31.8188 240.125 cv
cp
34.7974 237.61 mo
34.5464 238.779 34.1733 239.678 33.6772 240.31 cv
33.1802 240.942 32.481 241.257 31.5796 241.257 cv
30.6782 241.257 30.1128 240.942 29.8823 240.31 cv
29.6538 239.678 29.6636 238.779 29.9146 237.61 cv
30.1616 236.441 30.5347 235.54 31.0327 234.905 cv
31.5308 234.27 32.231 233.953 33.1323 233.953 cv
34.0337 233.953 34.5991 234.27 34.8267 234.905 cv
35.0542 235.54 35.0444 236.441 34.7974 237.61 cv
cp
f
38.9897 230.958 mo
38.8149 231.102 38.5581 231.358 38.2202 231.726 cv
37.8813 232.093 37.5835 232.473 37.3267 232.865 cv
37.1216 233.172 36.9155 233.548 36.7095 233.993 cv
36.5034 234.436 36.3716 234.801 36.312 235.085 cv
35.3003 235.085 li
35.5171 234.198 36.0044 233.274 36.7632 232.315 cv
37.2456 231.72 37.6323 231.306 37.9243 231.072 cv
35.4546 231.072 li
35.6558 230.197 li
39.1538 230.197 li
38.9897 230.958 li
cp
f
102.699 236.532 mo
102.899 235.584 li
103.345 235.565 103.659 235.536 103.841 235.497 cv
104.134 235.435 104.388 235.311 104.603 235.125 cv
104.752 234.999 104.879 234.83 104.984 234.618 cv
105.049 234.491 105.088 234.396 105.101 234.334 cv
106.258 234.334 li
104.754 241.415 li
103.329 241.415 li
104.364 236.532 li
102.699 236.532 li
cp
f
109.486 240.458 mo
109.899 240.458 110.215 240.242 110.436 239.811 cv
110.655 239.379 110.853 238.756 111.029 237.943 cv
111.208 237.09 111.277 236.458 111.237 236.048 cv
111.196 235.638 110.968 235.433 110.555 235.433 cv
110.142 235.433 109.825 235.638 109.603 236.048 cv
109.381 236.458 109.181 237.09 109.002 237.943 cv
108.827 238.756 108.76 239.379 108.802 239.811 cv
108.844 240.242 109.073 240.458 109.486 240.458 cv
cp
112.464 237.943 mo
112.213 239.112 111.84 240.011 111.344 240.643 cv
110.847 241.275 110.148 241.59 109.247 241.59 cv
108.345 241.59 107.78 241.275 107.549 240.643 cv
107.321 240.011 107.331 239.112 107.582 237.943 cv
107.829 236.774 108.202 235.873 108.7 235.238 cv
109.198 234.603 109.898 234.286 110.799 234.286 cv
111.701 234.286 112.266 234.603 112.494 235.238 cv
112.721 235.873 112.711 236.774 112.464 237.943 cv
cp
f
114.628 232.463 mo
114.826 232.463 114.992 232.407 115.125 232.292 cv
115.258 232.179 115.343 232.032 115.379 231.852 cv
115.422 231.657 115.402 231.503 115.316 231.393 cv
115.231 231.283 115.089 231.227 114.891 231.227 cv
114.695 231.227 114.531 231.283 114.397 231.393 cv
114.264 231.503 114.176 231.657 114.132 231.852 cv
114.096 232.032 114.121 232.179 114.207 232.292 cv
114.292 232.407 114.432 232.463 114.628 232.463 cv
cp
114.143 234.749 mo
114.366 234.749 114.555 234.682 114.709 234.547 cv
114.865 234.413 114.968 234.224 115.021 233.98 cv
115.076 233.727 115.052 233.536 114.951 233.405 cv
114.849 233.274 114.689 233.208 114.471 233.208 cv
114.252 233.208 114.065 233.274 113.909 233.405 cv
113.752 233.536 113.648 233.727 113.593 233.98 cv
113.541 234.224 113.563 234.413 113.662 234.547 cv
113.759 234.682 113.919 234.749 114.143 234.749 cv
cp
113.583 232.782 mo
113.375 232.622 113.255 232.45 113.224 232.264 cv
113.192 232.079 113.193 231.905 113.227 231.743 cv
113.305 231.383 113.505 231.076 113.831 230.822 cv
114.155 230.568 114.564 230.441 115.058 230.441 cv
115.552 230.441 115.909 230.568 116.125 230.822 cv
116.343 231.076 116.414 231.383 116.336 231.743 cv
116.302 231.905 116.229 232.079 116.118 232.264 cv
116.005 232.45 115.817 232.611 115.55 232.748 cv
115.764 232.883 115.909 233.065 115.984 233.291 cv
116.059 233.516 116.067 233.767 116.008 234.045 cv
115.919 234.462 115.689 234.817 115.318 235.109 cv
114.947 235.402 114.485 235.548 113.931 235.548 cv
113.377 235.548 112.99 235.402 112.768 235.109 cv
112.545 234.817 112.479 234.462 112.568 234.045 cv
112.627 233.767 112.744 233.516 112.918 233.291 cv
113.092 233.065 113.314 232.895 113.583 232.782 cv
cp
f
180.366 236.532 mo
180.565 235.584 li
181.013 235.565 181.325 235.536 181.509 235.497 cv
181.802 235.435 182.056 235.311 182.271 235.125 cv
182.419 234.999 182.546 234.83 182.651 234.618 cv
182.716 234.491 182.755 234.396 182.769 234.334 cv
183.925 234.334 li
182.421 241.415 li
180.995 241.415 li
182.03 236.532 li
180.366 236.532 li
cp
f
187.153 240.458 mo
187.565 240.458 187.882 240.242 188.103 239.811 cv
188.321 239.379 188.521 238.756 188.696 237.943 cv
188.874 237.09 188.944 236.458 188.903 236.048 cv
188.862 235.638 188.636 235.433 188.222 235.433 cv
187.81 235.433 187.491 235.638 187.271 236.048 cv
187.048 236.458 186.849 237.09 186.669 237.943 cv
186.493 238.756 186.427 239.379 186.47 239.811 cv
186.511 240.242 186.739 240.458 187.153 240.458 cv
cp
190.132 237.943 mo
189.88 239.112 189.507 240.011 189.011 240.643 cv
188.515 241.275 187.815 241.59 186.913 241.59 cv
186.013 241.59 185.446 241.275 185.216 240.643 cv
184.987 240.011 184.997 239.112 185.249 237.943 cv
185.495 236.774 185.868 235.873 186.366 235.238 cv
186.864 234.603 187.565 234.286 188.466 234.286 cv
189.368 234.286 189.933 234.603 190.161 235.238 cv
190.388 235.873 190.378 236.774 190.132 237.943 cv
cp
f
192.603 232.883 mo
192.853 232.743 193.017 232.498 193.091 232.149 cv
193.149 231.87 193.132 231.647 193.036 231.483 cv
192.94 231.319 192.778 231.237 192.552 231.237 cv
192.386 231.237 192.231 231.284 192.093 231.377 cv
191.874 231.523 191.729 231.77 191.655 232.119 cv
191.593 232.413 191.604 232.632 191.694 232.78 cv
191.782 232.926 191.95 233 192.2 233 cv
192.333 233 192.468 232.961 192.603 232.883 cv
cp
192.681 230.424 mo
193.435 230.424 193.882 230.758 194.021 231.425 cv
194.101 231.803 194.073 232.301 193.942 232.917 cv
193.813 233.517 193.632 234.017 193.396 234.417 cv
192.942 235.18 192.325 235.562 191.546 235.562 cv
191.175 235.562 190.866 235.452 190.616 235.232 cv
190.366 235.012 190.265 234.692 190.31 234.271 cv
191.28 234.271 li
191.271 234.417 191.308 234.535 191.388 234.625 cv
191.47 234.717 191.593 234.762 191.759 234.762 cv
192.079 234.762 192.343 234.584 192.548 234.23 cv
192.661 234.034 192.767 233.748 192.866 233.373 cv
192.751 233.484 192.64 233.569 192.526 233.628 cv
192.323 233.738 192.087 233.792 191.819 233.792 cv
191.427 233.792 191.104 233.657 190.856 233.384 cv
190.608 233.112 190.54 232.72 190.647 232.208 cv
190.763 231.677 191.007 231.247 191.384 230.917 cv
191.759 230.588 192.19 230.424 192.681 230.424 cv
cp
f
256.366 236.532 mo
256.565 235.584 li
257.013 235.565 257.325 235.536 257.509 235.497 cv
257.802 235.435 258.056 235.311 258.271 235.125 cv
258.419 234.999 258.546 234.83 258.651 234.618 cv
258.716 234.491 258.755 234.396 258.769 234.334 cv
259.925 234.334 li
258.421 241.415 li
256.995 241.415 li
258.03 236.532 li
256.366 236.532 li
cp
f
263.153 240.458 mo
263.565 240.458 263.882 240.242 264.103 239.811 cv
264.321 239.379 264.521 238.756 264.696 237.943 cv
264.874 237.09 264.944 236.458 264.903 236.048 cv
264.862 235.638 264.636 235.433 264.222 235.433 cv
263.81 235.433 263.491 235.638 263.271 236.048 cv
263.048 236.458 262.849 237.09 262.669 237.943 cv
262.493 238.756 262.427 239.379 262.47 239.811 cv
262.511 240.242 262.739 240.458 263.153 240.458 cv
cp
266.132 237.943 mo
265.88 239.112 265.507 240.011 265.011 240.643 cv
264.515 241.275 263.815 241.59 262.913 241.59 cv
262.013 241.59 261.446 241.275 261.216 240.643 cv
260.987 240.011 260.997 239.112 261.249 237.943 cv
261.495 236.774 261.868 235.873 262.366 235.238 cv
262.864 234.603 263.565 234.286 264.466 234.286 cv
265.368 234.286 265.933 234.603 266.161 235.238 cv
266.388 235.873 266.378 236.774 266.132 237.943 cv
cp
f
266.97 232.002 mo
267.11 231.339 li
267.421 231.326 267.642 231.305 267.769 231.278 cv
267.974 231.235 268.151 231.149 268.302 231.019 cv
268.407 230.93 268.495 230.811 268.567 230.664 cv
268.649 230.465 li
269.46 230.465 li
268.407 235.418 li
267.411 235.418 li
268.134 232.002 li
266.97 232.002 li
cp
f
271.718 234.749 mo
272.007 234.749 272.228 234.598 272.382 234.296 cv
272.536 233.995 272.675 233.559 272.798 232.99 cv
272.923 232.393 272.97 231.952 272.942 231.665 cv
272.913 231.377 272.755 231.234 272.466 231.234 cv
272.177 231.234 271.954 231.377 271.8 231.665 cv
271.646 231.952 271.505 232.393 271.38 232.99 cv
271.257 233.559 271.21 233.995 271.239 234.296 cv
271.269 234.598 271.429 234.749 271.718 234.749 cv
cp
273.802 232.99 mo
273.626 233.807 273.364 234.437 273.017 234.878 cv
272.671 235.321 272.181 235.542 271.55 235.542 cv
270.919 235.542 270.524 235.321 270.362 234.878 cv
270.202 234.437 270.21 233.807 270.386 232.99 cv
270.558 232.172 270.819 231.542 271.167 231.097 cv
271.517 230.653 272.005 230.431 272.636 230.431 cv
273.267 230.431 273.663 230.653 273.821 231.097 cv
273.981 231.542 273.974 232.172 273.802 232.99 cv
cp
f
333.698 236.532 mo
333.899 235.584 li
334.345 235.565 334.659 235.536 334.841 235.497 cv
335.134 235.435 335.388 235.311 335.603 235.125 cv
335.753 234.999 335.88 234.83 335.983 234.618 cv
336.05 234.491 336.089 234.396 336.101 234.334 cv
337.259 234.334 li
335.755 241.415 li
334.329 241.415 li
335.364 236.532 li
333.698 236.532 li
cp
f
340.485 240.458 mo
340.899 240.458 341.216 240.242 341.437 239.811 cv
341.655 239.379 341.853 238.756 342.028 237.943 cv
342.208 237.09 342.276 236.458 342.237 236.048 cv
342.196 235.638 341.968 235.433 341.556 235.433 cv
341.142 235.433 340.825 235.638 340.603 236.048 cv
340.382 236.458 340.181 237.09 340.003 237.943 cv
339.827 238.756 339.761 239.379 339.802 239.811 cv
339.845 240.242 340.073 240.458 340.485 240.458 cv
cp
343.464 237.943 mo
343.214 239.112 342.841 240.011 342.345 240.643 cv
341.847 241.275 341.147 241.59 340.247 241.59 cv
339.345 241.59 338.78 241.275 338.55 240.643 cv
338.321 240.011 338.331 239.112 338.581 237.943 cv
338.829 236.774 339.202 235.873 339.7 235.238 cv
340.198 234.603 340.897 234.286 341.8 234.286 cv
342.7 234.286 343.267 234.603 343.493 235.238 cv
343.722 235.873 343.712 236.774 343.464 237.943 cv
cp
f
344.302 232.002 mo
344.442 231.339 li
344.755 231.326 344.974 231.305 345.103 231.278 cv
345.308 231.235 345.485 231.149 345.636 231.019 cv
345.739 230.93 345.829 230.811 345.901 230.664 cv
345.983 230.465 li
346.792 230.465 li
345.741 235.418 li
344.743 235.418 li
345.468 232.002 li
344.302 232.002 li
cp
f
347.81 232.002 mo
347.95 231.339 li
348.263 231.326 348.481 231.305 348.61 231.278 cv
348.815 231.235 348.993 231.149 349.144 231.019 cv
349.247 230.93 349.337 230.811 349.409 230.664 cv
349.491 230.465 li
350.3 230.465 li
349.249 235.418 li
348.251 235.418 li
348.976 232.002 li
347.81 232.002 li
cp
f
149.293 250.015 mo
149.388 249.992 149.508 249.952 149.655 249.893 cv
149.079 249.2 li
150.026 248.389 li
150.607 249.083 li
150.77 248.848 150.892 248.643 150.973 248.467 cv
151.104 248.204 151.206 247.896 151.281 247.544 cv
151.45 246.737 151.417 246.113 151.181 245.671 cv
150.945 245.231 150.509 245.01 149.875 245.01 cv
149.279 245.01 148.759 245.221 148.314 245.645 cv
147.87 246.068 147.559 246.701 147.379 247.544 cv
147.168 248.531 147.271 249.237 147.687 249.664 cv
147.957 249.94 148.322 250.079 148.781 250.079 cv
148.953 250.079 149.124 250.057 149.293 250.015 cv
cp
152.228 249.048 mo
152.013 249.461 151.753 249.805 151.447 250.079 cv
152.111 250.855 li
151.154 251.675 li
150.456 250.855 li
150.159 251.014 149.909 251.126 149.704 251.192 cv
149.358 251.299 148.961 251.353 148.512 251.353 cv
147.575 251.353 146.858 251.073 146.364 250.513 cv
145.765 249.839 145.605 248.849 145.885 247.544 cv
146.162 246.229 146.753 245.235 147.658 244.561 cv
148.396 244.01 149.229 243.736 150.153 243.736 cv
151.084 243.736 151.803 244.027 152.311 244.61 cv
152.897 245.284 153.062 246.226 152.804 247.437 cv
152.667 248.078 152.476 248.615 152.228 249.048 cv
cp
f
157.448 243.956 mo
159.024 243.956 li
160.821 248.98 li
161.892 243.956 li
163.292 243.956 li
161.765 251.153 li
160.261 251.153 li
158.405 246.041 li
157.321 251.153 li
155.919 251.153 li
157.448 243.956 li
cp
f
167.243 245.772 mo
167.631 245.172 168.145 244.528 168.786 243.838 cv
169.836 243.838 li
169.421 244.385 li
168.852 245.137 168.398 245.924 168.063 246.749 cv
167.846 247.289 167.668 247.877 167.531 248.516 cv
167.319 249.512 167.27 250.428 167.38 251.265 cv
167.445 251.759 167.609 252.394 167.873 253.169 cv
166.843 253.169 li
166.599 252.696 li
166.436 252.409 166.288 251.983 166.154 251.417 cv
165.917 250.404 165.902 249.408 166.11 248.428 cv
166.299 247.536 166.677 246.651 167.243 245.772 cv
cp
f
173.634 247.959 mo
175.797 247.959 li
175.853 247.591 175.8 247.312 175.638 247.122 cv
175.478 246.931 175.248 246.836 174.952 246.836 cv
174.63 246.836 174.358 246.937 174.14 247.139 cv
173.919 247.34 173.751 247.614 173.634 247.959 cv
cp
177.052 246.724 mo
177.195 247.04 177.252 247.406 177.223 247.823 cv
177.21 248.067 177.151 248.418 177.047 248.877 cv
173.404 248.877 li
173.31 249.411 173.397 249.786 173.668 250 cv
173.831 250.133 174.047 250.201 174.317 250.201 cv
174.604 250.201 174.854 250.119 175.069 249.957 cv
175.184 249.869 175.296 249.747 175.406 249.59 cv
176.827 249.59 li
176.723 249.906 176.49 250.226 176.129 250.552 cv
175.563 251.07 174.869 251.329 174.049 251.329 cv
173.372 251.329 172.821 251.11 172.396 250.674 cv
171.972 250.238 171.863 249.528 172.071 248.545 cv
172.267 247.624 172.649 246.917 173.222 246.426 cv
173.792 245.934 174.451 245.689 175.196 245.689 cv
175.639 245.689 176.021 245.772 176.341 245.938 cv
176.662 246.104 176.898 246.366 177.052 246.724 cv
cp
f
183.443 243.736 mo
184.601 243.736 li
180.23 251.153 li
179.083 251.153 li
183.443 243.736 li
cp
f
187.276 249.454 mo
187.254 249.701 187.281 249.876 187.359 249.981 cv
187.489 250.167 187.787 250.259 188.253 250.259 cv
188.526 250.259 188.753 250.218 188.932 250.137 cv
189.11 250.055 189.218 249.933 189.254 249.771 cv
189.286 249.615 189.246 249.496 189.132 249.415 cv
189.018 249.333 188.563 249.193 187.77 248.995 cv
187.2 248.844 186.815 248.658 186.617 248.433 cv
186.415 248.211 186.36 247.892 186.451 247.476 cv
186.556 246.984 186.838 246.562 187.298 246.208 cv
187.759 245.856 188.339 245.679 189.039 245.679 cv
189.703 245.679 190.216 245.812 190.577 246.077 cv
190.938 246.342 191.082 246.8 191.007 247.452 cv
189.615 247.452 li
189.632 247.272 189.61 247.13 189.552 247.027 cv
189.438 246.837 189.197 246.744 188.829 246.744 cv
188.526 246.744 188.301 246.791 188.153 246.885 cv
188.005 246.979 187.918 247.09 187.892 247.217 cv
187.855 247.376 187.899 247.492 188.023 247.564 cv
188.144 247.638 188.6 247.767 189.391 247.95 cv
189.915 248.08 190.287 248.277 190.509 248.541 cv
190.727 248.807 190.794 249.141 190.709 249.542 cv
190.595 250.069 190.307 250.5 189.845 250.833 cv
189.383 251.167 188.741 251.333 187.921 251.333 cv
187.084 251.333 186.504 251.157 186.181 250.803 cv
185.856 250.451 185.751 250 185.865 249.454 cv
187.276 249.454 li
cp
f
193.093 247.959 mo
195.256 247.959 li
195.312 247.591 195.259 247.312 195.097 247.122 cv
194.937 246.931 194.707 246.836 194.411 246.836 cv
194.089 246.836 193.817 246.937 193.599 247.139 cv
193.378 247.34 193.21 247.614 193.093 247.959 cv
cp
196.511 246.724 mo
196.654 247.04 196.711 247.406 196.682 247.823 cv
196.669 248.067 196.61 248.418 196.506 248.877 cv
192.863 248.877 li
192.769 249.411 192.856 249.786 193.127 250 cv
193.29 250.133 193.506 250.201 193.776 250.201 cv
194.063 250.201 194.313 250.119 194.528 249.957 cv
194.643 249.869 194.755 249.747 194.865 249.59 cv
196.286 249.59 li
196.182 249.906 195.949 250.226 195.588 250.552 cv
195.021 251.07 194.328 251.329 193.508 251.329 cv
192.831 251.329 192.28 251.11 191.854 250.674 cv
191.431 250.238 191.322 249.528 191.53 248.545 cv
191.726 247.624 192.108 246.917 192.681 246.426 cv
193.251 245.934 193.91 245.689 194.655 245.689 cv
195.098 245.689 195.479 245.772 195.8 245.938 cv
196.121 246.104 196.357 246.366 196.511 246.724 cv
cp
f
200.86 247.74 mo
200.877 247.541 200.848 247.362 200.772 247.203 cv
200.662 246.988 200.442 246.88 200.113 246.88 cv
199.645 246.88 199.275 247.113 199.005 247.579 cv
198.861 247.826 198.746 248.155 198.658 248.565 cv
198.577 248.956 198.556 249.269 198.595 249.507 cv
198.666 249.95 198.932 250.171 199.391 250.171 cv
199.716 250.171 199.966 250.083 200.14 249.908 cv
200.314 249.732 200.445 249.503 200.533 249.224 cv
201.954 249.224 li
201.834 249.647 201.596 250.047 201.241 250.425 cv
200.675 251.034 199.964 251.338 199.107 251.338 cv
198.251 251.338 197.676 251.084 197.382 250.577 cv
197.087 250.069 197.025 249.41 197.198 248.599 cv
197.391 247.684 197.764 246.973 198.319 246.465 cv
198.874 245.958 199.544 245.704 200.328 245.704 cv
200.995 245.704 201.51 245.853 201.871 246.153 cv
202.232 246.452 202.371 246.981 202.286 247.74 cv
200.86 247.74 li
cp
f
213.585 246.329 mo
213.692 246.514 213.744 246.742 213.741 247.012 cv
213.734 247.191 213.695 247.453 213.624 247.798 cv
212.901 251.153 li
211.476 251.153 li
212.193 247.764 li
212.235 247.562 212.239 247.396 212.203 247.266 cv
212.132 247.018 211.93 246.895 211.598 246.895 cv
211.214 246.895 210.914 247.054 210.699 247.374 cv
210.589 247.542 210.507 247.746 210.455 247.984 cv
209.786 251.153 li
208.385 251.153 li
209.054 247.984 li
209.122 247.667 209.139 247.438 209.103 247.295 cv
209.041 247.038 208.839 246.91 208.497 246.91 cv
208.1 246.91 207.806 247.038 207.613 247.295 cv
207.509 247.442 207.426 247.66 207.364 247.95 cv
206.686 251.153 li
205.274 251.153 li
206.402 245.84 li
207.755 245.84 li
207.589 246.617 li
207.82 246.339 208.025 246.143 208.204 246.026 cv
208.517 245.817 208.888 245.713 209.317 245.713 cv
209.725 245.713 210.035 245.802 210.25 245.982 cv
210.416 246.148 210.523 246.361 210.572 246.622 cv
210.819 246.309 211.095 246.08 211.397 245.933 cv
211.713 245.787 212.047 245.713 212.398 245.713 cv
212.633 245.713 212.854 245.758 213.063 245.85 cv
213.271 245.941 213.445 246.1 213.585 246.329 cv
cp
f
222.478 246.329 mo
222.585 246.514 222.637 246.742 222.634 247.012 cv
222.627 247.191 222.588 247.453 222.517 247.798 cv
221.794 251.153 li
220.368 251.153 li
221.086 247.764 li
221.128 247.562 221.132 247.396 221.096 247.266 cv
221.024 247.018 220.822 246.895 220.49 246.895 cv
220.106 246.895 219.807 247.054 219.592 247.374 cv
219.481 247.542 219.399 247.746 219.348 247.984 cv
218.679 251.153 li
217.277 251.153 li
217.946 247.984 li
218.015 247.667 218.031 247.438 217.995 247.295 cv
217.934 247.038 217.731 246.91 217.39 246.91 cv
216.992 246.91 216.698 247.038 216.506 247.295 cv
216.401 247.442 216.318 247.66 216.257 247.95 cv
215.578 251.153 li
214.167 251.153 li
215.295 245.84 li
216.647 245.84 li
216.481 246.617 li
216.713 246.339 216.918 246.143 217.097 246.026 cv
217.409 245.817 217.78 245.713 218.21 245.713 cv
218.617 245.713 218.928 245.802 219.143 245.982 cv
219.309 246.148 219.416 246.361 219.465 246.622 cv
219.712 246.309 219.987 246.08 220.29 245.933 cv
220.605 245.787 220.939 245.713 221.291 245.713 cv
221.525 245.713 221.747 245.758 221.955 245.85 cv
222.163 245.941 222.338 246.1 222.478 246.329 cv
cp
f
228.659 245.772 mo
228.852 246.651 228.853 247.536 228.664 248.428 cv
228.456 249.408 228.018 250.404 227.351 251.417 cv
226.977 251.983 226.646 252.409 226.359 252.696 cv
225.915 253.169 li
224.89 253.169 li
225.479 252.394 225.912 251.759 226.188 251.265 cv
226.654 250.428 226.992 249.512 227.204 248.516 cv
227.341 247.877 227.414 247.289 227.424 246.749 cv
227.44 245.924 227.323 245.137 227.072 244.385 cv
226.892 243.838 li
227.941 243.838 li
228.29 244.528 228.529 245.172 228.659 245.772 cv
cp
f
76.0586 101.907 mo
76 102.19 75.9951 102.425 76.0439 102.61 cv
76.1416 102.952 76.4131 103.123 76.8594 103.123 cv
77.1328 103.123 77.3916 103.029 77.6357 102.842 cv
77.8799 102.655 78.0391 102.386 78.1143 102.034 cv
78.2119 101.568 78.0879 101.258 77.7432 101.102 cv
77.5479 101.014 77.2188 100.97 76.7568 100.97 cv
76.9668 99.9736 li
77.4229 99.9668 77.748 99.9229 77.9434 99.8418 cv
78.2822 99.7051 78.4951 99.4287 78.583 99.0117 cv
78.6416 98.7412 78.6094 98.5215 78.4883 98.3525 cv
78.3652 98.1836 78.1611 98.0986 77.875 98.0986 cv
77.5459 98.0986 77.2822 98.2031 77.084 98.4111 cv
76.8857 98.6191 76.752 98.8975 76.6836 99.2461 cv
75.3848 99.2461 li
75.4727 98.8945 75.6045 98.5605 75.7803 98.2451 cv
75.9531 97.9688 76.1855 97.7129 76.4785 97.4785 cv
76.6963 97.3125 76.9395 97.1855 77.209 97.0977 cv
77.4766 97.0098 77.7939 96.9658 78.1582 96.9658 cv
78.835 96.9658 79.3438 97.1406 79.6836 97.4902 cv
80.0244 97.8408 80.1328 98.3105 80.0088 98.8994 cv
79.9209 99.3164 79.7227 99.668 79.4131 99.9541 cv
79.2178 100.133 79.0293 100.255 78.8467 100.32 cv
78.9736 100.32 79.1328 100.43 79.3252 100.647 cv
79.6084 100.977 79.6895 101.426 79.5693 101.995 cv
79.4424 102.594 79.123 103.121 78.6123 103.574 cv
78.1016 104.029 77.4385 104.256 76.625 104.256 cv
75.6221 104.256 74.9961 103.929 74.7451 103.274 cv
74.6113 102.926 74.5938 102.471 74.6914 101.907 cv
76.0586 101.907 li
cp
f
84.0371 99.1973 mo
84.2373 98.25 li
84.6836 98.2305 84.9971 98.2012 85.1797 98.1621 cv
85.4727 98.1006 85.7266 97.9766 85.9414 97.791 cv
86.0908 97.6641 86.2178 97.4951 86.3223 97.2832 cv
86.3877 97.1563 86.4268 97.0615 86.4395 97 cv
87.5967 97 li
86.0928 104.08 li
84.667 104.08 li
85.7021 99.1973 li
84.0371 99.1973 li
cp
f
90.8242 103.123 mo
91.2373 103.123 91.5537 102.907 91.7744 102.477 cv
91.9932 102.045 92.1914 101.422 92.3672 100.608 cv
92.5459 99.7559 92.6152 99.124 92.5752 98.7139 cv
92.5342 98.3037 92.3066 98.0986 91.8936 98.0986 cv
91.4805 98.0986 91.1631 98.3037 90.9414 98.7139 cv
90.7197 99.124 90.5195 99.7559 90.3408 100.608 cv
90.165 101.422 90.0986 102.045 90.1406 102.477 cv
90.1826 102.907 90.4111 103.123 90.8242 103.123 cv
cp
93.8027 100.608 mo
93.5518 101.777 93.1787 102.677 92.6826 103.309 cv
92.1855 103.94 91.4863 104.256 90.585 104.256 cv
89.6836 104.256 89.1182 103.94 88.8877 103.309 cv
88.6592 102.677 88.6689 101.777 88.9199 100.608 cv
89.167 99.4395 89.54 98.5381 90.0381 97.9033 cv
90.5361 97.2686 91.2363 96.9512 92.1377 96.9512 cv
93.0391 96.9512 93.6045 97.2686 93.832 97.9033 cv
94.0596 98.5381 94.0498 99.4395 93.8027 100.608 cv
cp
f
95.9629 96.2568 mo
96.417 94.1182 li
94.7227 96.2568 li
95.9629 96.2568 li
cp
97.3154 97.0186 mo
96.7559 97.0186 li
96.5303 98.084 li
95.5771 98.084 li
95.8027 97.0186 li
93.8418 97.0186 li
94.0225 96.168 li
96.4824 93.1611 li
97.5752 93.1611 li
96.916 96.2568 li
97.4766 96.2568 li
97.3154 97.0186 li
cp
f
74.5679 118.355 mo
74.8677 117.884 75.4419 117.384 76.2915 116.856 cv
77.0308 116.397 77.5151 116.068 77.7466 115.87 cv
78.1011 115.561 78.3179 115.223 78.396 114.854 cv
78.4614 114.555 78.4321 114.306 78.3081 114.107 cv
78.1841 113.909 77.9683 113.81 77.6587 113.81 cv
77.2358 113.81 76.9136 113.968 76.6919 114.283 cv
76.5649 114.466 76.4526 114.755 76.355 115.152 cv
75.0024 115.152 li
75.1519 114.55 75.3638 114.063 75.6372 113.692 cv
76.1577 112.986 76.8921 112.633 77.8394 112.633 cv
78.5884 112.633 79.1401 112.841 79.4946 113.255 cv
79.8491 113.671 79.9536 114.22 79.8071 114.903 cv
79.6968 115.428 79.4429 115.893 79.0454 116.3 cv
78.7817 116.57 78.3794 116.871 77.8394 117.203 cv
77.1997 117.599 li
76.7993 117.846 76.5229 118.025 76.3696 118.136 cv
76.2163 118.246 76.0815 118.375 75.9644 118.521 cv
79.0552 118.521 li
78.7964 119.747 li
73.9478 119.747 li
74.0679 119.239 74.2749 118.775 74.5679 118.355 cv
cp
f
80.1294 118.292 mo
81.6089 118.292 li
81.3013 119.747 li
79.8218 119.747 li
80.1294 118.292 li
cp
f
84.0649 117.574 mo
84.0063 117.857 84.0015 118.092 84.0503 118.277 cv
84.1479 118.619 84.4194 118.79 84.8657 118.79 cv
85.1392 118.79 85.3979 118.696 85.6421 118.509 cv
85.8862 118.322 86.0454 118.053 86.1206 117.701 cv
86.2183 117.235 86.0942 116.925 85.7495 116.769 cv
85.5542 116.681 85.2251 116.637 84.7632 116.637 cv
84.9731 115.641 li
85.4292 115.634 85.7544 115.59 85.9497 115.509 cv
86.2886 115.372 86.5015 115.096 86.5894 114.679 cv
86.6479 114.408 86.6157 114.188 86.4946 114.02 cv
86.3716 113.851 86.1675 113.766 85.8813 113.766 cv
85.5522 113.766 85.2886 113.87 85.0903 114.078 cv
84.8921 114.286 84.7583 114.564 84.6899 114.913 cv
83.3911 114.913 li
83.479 114.562 83.6108 114.228 83.7866 113.912 cv
83.9595 113.636 84.1919 113.38 84.4849 113.146 cv
84.7026 112.979 84.9458 112.853 85.2153 112.765 cv
85.4829 112.677 85.8003 112.633 86.1646 112.633 cv
86.8413 112.633 87.3501 112.808 87.6899 113.157 cv
88.0308 113.508 88.1392 113.978 88.0151 114.566 cv
87.9272 114.983 87.729 115.335 87.4194 115.621 cv
87.2241 115.8 87.0356 115.922 86.853 115.987 cv
86.98 115.987 87.1392 116.097 87.3315 116.314 cv
87.6147 116.644 87.6958 117.093 87.5757 117.662 cv
87.4487 118.261 87.1294 118.788 86.6187 119.241 cv
86.1079 119.696 85.4448 119.923 84.6313 119.923 cv
83.6284 119.923 83.0024 119.596 82.7515 118.941 cv
82.6177 118.593 82.6001 118.138 82.6978 117.574 cv
84.0649 117.574 li
cp
f
92.0435 114.864 mo
92.2437 113.917 li
92.6899 113.897 93.0034 113.868 93.186 113.829 cv
93.479 113.768 93.7329 113.644 93.9478 113.458 cv
94.0972 113.331 94.2241 113.162 94.3286 112.95 cv
94.394 112.823 94.4331 112.729 94.4458 112.667 cv
95.603 112.667 li
94.0991 119.747 li
92.6733 119.747 li
93.7085 114.864 li
92.0435 114.864 li
cp
f
98.8306 118.79 mo
99.2437 118.79 99.5601 118.574 99.7808 118.144 cv
99.9995 117.712 100.198 117.089 100.374 116.275 cv
100.552 115.423 100.622 114.791 100.582 114.381 cv
100.541 113.971 100.313 113.766 99.8999 113.766 cv
99.4868 113.766 99.1694 113.971 98.9478 114.381 cv
98.7261 114.791 98.5259 115.423 98.3472 116.275 cv
98.1714 117.089 98.105 117.712 98.147 118.144 cv
98.189 118.574 98.4175 118.79 98.8306 118.79 cv
cp
101.809 116.275 mo
101.558 117.444 101.185 118.344 100.689 118.976 cv
100.192 119.607 99.4927 119.923 98.5913 119.923 cv
97.6899 119.923 97.1245 119.607 96.894 118.976 cv
96.6655 118.344 96.6753 117.444 96.9263 116.275 cv
97.1733 115.106 97.5464 114.205 98.0444 113.57 cv
98.5425 112.936 99.2427 112.618 100.144 112.618 cv
101.045 112.618 101.611 112.936 101.838 113.57 cv
102.066 114.205 102.056 115.106 101.809 116.275 cv
cp
f
102.873 112.426 mo
102.866 112.638 102.905 112.801 102.991 112.916 cv
103.076 113.031 103.223 113.088 103.433 113.088 cv
103.674 113.088 103.875 113.004 104.038 112.834 cv
104.2 112.664 104.307 112.45 104.362 112.193 cv
104.417 111.94 104.404 111.727 104.323 111.553 cv
104.242 111.379 104.077 111.291 103.826 111.291 cv
103.708 111.291 103.601 111.307 103.508 111.336 cv
103.344 111.391 103.208 111.492 103.098 111.64 cv
102.231 111.599 li
103.163 108.862 li
105.892 108.862 li
105.714 109.689 li
103.689 109.689 li
103.283 110.772 li
103.454 110.675 103.584 110.609 103.675 110.577 cv
103.828 110.525 104.005 110.499 104.208 110.499 cv
104.619 110.499 104.946 110.637 105.192 110.912 cv
105.438 111.188 105.505 111.589 105.394 112.114 cv
105.298 112.572 105.065 112.981 104.694 113.341 cv
104.322 113.701 103.844 113.881 103.258 113.881 cv
102.788 113.881 102.427 113.754 102.179 113.502 cv
101.931 113.249 101.838 112.891 101.903 112.426 cv
102.873 112.426 li
cp
f
75.3638 130.532 mo
75.564 129.584 li
76.0103 129.565 76.3237 129.536 76.5063 129.497 cv
76.7993 129.435 77.0532 129.311 77.2681 129.125 cv
77.4175 128.999 77.5444 128.83 77.6489 128.618 cv
77.7144 128.491 77.7534 128.396 77.7661 128.334 cv
78.9233 128.334 li
77.4194 135.415 li
75.9937 135.415 li
77.0288 130.532 li
75.3638 130.532 li
cp
f
80.1294 133.959 mo
81.6089 133.959 li
81.3013 135.415 li
79.8218 135.415 li
80.1294 133.959 li
cp
f
85.5981 131.191 mo
85.8813 131.191 86.1177 131.11 86.3091 130.947 cv
86.4985 130.784 86.6206 130.574 86.6724 130.317 cv
86.7339 130.037 86.7036 129.818 86.5825 129.661 cv
86.4595 129.502 86.2573 129.423 85.9741 129.423 cv
85.6938 129.423 85.4595 129.502 85.2681 129.661 cv
85.0786 129.818 84.9517 130.037 84.8901 130.317 cv
84.8384 130.574 84.8735 130.784 84.9946 130.947 cv
85.1177 131.11 85.3179 131.191 85.5981 131.191 cv
cp
84.9048 134.458 mo
85.2241 134.458 85.4937 134.362 85.7153 134.169 cv
85.937 133.977 86.0845 133.708 86.1597 133.359 cv
86.2378 132.998 86.2046 132.723 86.0591 132.536 cv
85.9146 132.349 85.686 132.255 85.3735 132.255 cv
85.061 132.255 84.7935 132.349 84.5708 132.536 cv
84.3472 132.723 84.1968 132.998 84.1187 133.359 cv
84.0435 133.708 84.0767 133.977 84.2163 134.169 cv
84.356 134.362 84.5854 134.458 84.9048 134.458 cv
cp
84.104 131.645 mo
83.8081 131.417 83.6372 131.17 83.5913 130.905 cv
83.5454 130.64 83.5474 130.392 83.5962 130.161 cv
83.7065 129.646 83.9946 129.208 84.4575 128.844 cv
84.9224 128.482 85.5073 128.3 86.2134 128.3 cv
86.9194 128.3 87.4282 128.482 87.7388 128.844 cv
88.0503 129.208 88.1499 129.646 88.0396 130.161 cv
87.9907 130.392 87.8862 130.64 87.7271 130.905 cv
87.5679 131.17 87.2974 131.401 86.9165 131.596 cv
87.2222 131.792 87.4292 132.05 87.5366 132.373 cv
87.644 132.695 87.6558 133.054 87.5708 133.452 cv
87.4438 134.047 87.1147 134.554 86.5845 134.973 cv
86.0542 135.391 85.3931 135.6 84.6021 135.6 cv
83.811 135.6 83.2563 135.391 82.9399 134.973 cv
82.6216 134.554 82.5269 134.047 82.6538 133.452 cv
82.7388 133.054 82.9048 132.695 83.1548 132.373 cv
83.4028 132.05 83.7202 131.808 84.104 131.645 cv
cp
f
92.0435 130.532 mo
92.2437 129.584 li
92.6899 129.565 93.0034 129.536 93.186 129.497 cv
93.479 129.435 93.7329 129.311 93.9478 129.125 cv
94.0972 128.999 94.2241 128.83 94.3286 128.618 cv
94.394 128.491 94.4331 128.396 94.4458 128.334 cv
95.603 128.334 li
94.0991 135.415 li
92.6733 135.415 li
93.7085 130.532 li
92.0435 130.532 li
cp
f
98.8306 134.458 mo
99.2437 134.458 99.5601 134.242 99.7808 133.811 cv
99.9995 133.379 100.198 132.756 100.374 131.943 cv
100.552 131.09 100.622 130.458 100.582 130.048 cv
100.541 129.638 100.313 129.433 99.8999 129.433 cv
99.4868 129.433 99.1694 129.638 98.9478 130.048 cv
98.7261 130.458 98.5259 131.09 98.3472 131.943 cv
98.1714 132.756 98.105 133.379 98.147 133.811 cv
98.189 134.242 98.4175 134.458 98.8306 134.458 cv
cp
101.809 131.943 mo
101.558 133.112 101.185 134.011 100.689 134.643 cv
100.192 135.275 99.4927 135.59 98.5913 135.59 cv
97.6899 135.59 97.1245 135.275 96.894 134.643 cv
96.6655 134.011 96.6753 133.112 96.9263 131.943 cv
97.1733 130.774 97.5464 129.873 98.0444 129.238 cv
98.5425 128.603 99.2427 128.286 100.144 128.286 cv
101.045 128.286 101.611 128.603 101.838 129.238 cv
102.066 129.873 102.056 130.774 101.809 131.943 cv
cp
f
103.536 128.755 mo
103.751 128.755 103.939 128.674 104.097 128.511 cv
104.255 128.349 104.362 128.137 104.417 127.877 cv
104.478 127.588 104.455 127.367 104.347 127.213 cv
104.239 127.06 104.082 126.983 103.877 126.983 cv
103.71 126.983 103.553 127.033 103.406 127.133 cv
103.182 127.281 103.036 127.52 102.965 127.85 cv
102.908 128.117 102.934 128.334 103.042 128.503 cv
103.15 128.671 103.315 128.755 103.536 128.755 cv
cp
104.79 125.712 mo
104.807 125.632 104.794 125.544 104.751 125.449 cv
104.681 125.294 104.54 125.216 104.328 125.216 cv
104.011 125.216 103.749 125.394 103.539 125.75 cv
103.425 125.946 103.313 126.235 103.204 126.618 cv
103.354 126.474 103.517 126.369 103.691 126.303 cv
103.865 126.237 104.054 126.204 104.259 126.204 cv
104.699 126.204 105.028 126.353 105.246 126.652 cv
105.462 126.95 105.521 127.332 105.421 127.795 cv
105.323 128.258 105.099 128.666 104.749 129.019 cv
104.397 129.372 103.932 129.548 103.351 129.548 cv
102.727 129.548 102.323 129.288 102.138 128.766 cv
101.995 128.358 101.992 127.833 102.128 127.188 cv
102.21 126.81 102.292 126.502 102.374 126.265 cv
102.52 125.844 102.705 125.494 102.927 125.213 cv
103.119 124.974 103.344 124.782 103.605 124.636 cv
103.866 124.491 104.156 124.417 104.475 124.417 cv
104.935 124.417 105.277 124.536 105.5 124.771 cv
105.723 125.006 105.809 125.321 105.759 125.712 cv
104.79 125.712 li
cp
f
77.2583 146.523 mo
77.5415 146.523 77.7778 146.442 77.9692 146.279 cv
78.1587 146.116 78.2808 145.906 78.3325 145.649 cv
78.394 145.369 78.3638 145.15 78.2427 144.993 cv
78.1196 144.834 77.9175 144.755 77.6343 144.755 cv
77.354 144.755 77.1196 144.834 76.9282 144.993 cv
76.7388 145.15 76.6118 145.369 76.5503 145.649 cv
76.4985 145.906 76.5337 146.116 76.6548 146.279 cv
76.7778 146.442 76.978 146.523 77.2583 146.523 cv
cp
76.5649 149.79 mo
76.8843 149.79 77.1538 149.694 77.3755 149.501 cv
77.5972 149.309 77.7446 149.04 77.8198 148.691 cv
77.8979 148.33 77.8647 148.055 77.7192 147.868 cv
77.5747 147.681 77.3462 147.587 77.0337 147.587 cv
76.7212 147.587 76.4536 147.681 76.231 147.868 cv
76.0073 148.055 75.8569 148.33 75.7788 148.691 cv
75.7036 149.04 75.7368 149.309 75.8765 149.501 cv
76.0161 149.694 76.2456 149.79 76.5649 149.79 cv
cp
75.7642 146.977 mo
75.4683 146.75 75.2974 146.502 75.2515 146.237 cv
75.2056 145.972 75.2075 145.724 75.2563 145.493 cv
75.3667 144.978 75.6548 144.54 76.1177 144.176 cv
76.5825 143.814 77.1675 143.632 77.8735 143.632 cv
78.5796 143.632 79.0884 143.814 79.3989 144.176 cv
79.7104 144.54 79.8101 144.978 79.6997 145.493 cv
79.6509 145.724 79.5464 145.972 79.3872 146.237 cv
79.228 146.502 78.9575 146.733 78.5767 146.928 cv
78.8823 147.124 79.0894 147.382 79.1968 147.705 cv
79.3042 148.027 79.3159 148.386 79.231 148.784 cv
79.104 149.379 78.7749 149.886 78.2446 150.305 cv
77.7144 150.723 77.0532 150.932 76.2622 150.932 cv
75.4712 150.932 74.9165 150.723 74.6001 150.305 cv
74.2817 149.886 74.187 149.379 74.314 148.784 cv
74.3989 148.386 74.5649 148.027 74.8149 147.705 cv
75.063 147.382 75.3804 147.14 75.7642 146.977 cv
cp
f
83.7036 145.864 mo
83.9038 144.917 li
84.3501 144.897 84.6636 144.868 84.8462 144.829 cv
85.1392 144.767 85.3931 144.643 85.6079 144.458 cv
85.7573 144.331 85.8843 144.162 85.9888 143.95 cv
86.0542 143.823 86.0933 143.728 86.106 143.667 cv
87.2632 143.667 li
85.7593 150.747 li
84.3335 150.747 li
85.3687 145.864 li
83.7036 145.864 li
cp
f
90.4907 149.79 mo
90.9038 149.79 91.2202 149.574 91.4409 149.143 cv
91.6597 148.711 91.8579 148.088 92.0337 147.275 cv
92.2124 146.422 92.2817 145.791 92.2417 145.38 cv
92.2007 144.97 91.9731 144.765 91.5601 144.765 cv
91.147 144.765 90.8296 144.97 90.6079 145.38 cv
90.3862 145.791 90.186 146.422 90.0073 147.275 cv
89.8315 148.088 89.7651 148.711 89.8071 149.143 cv
89.8491 149.574 90.0776 149.79 90.4907 149.79 cv
cp
93.4692 147.275 mo
93.2183 148.444 92.8452 149.343 92.3491 149.975 cv
91.8521 150.607 91.1528 150.922 90.2515 150.922 cv
89.3501 150.922 88.7847 150.607 88.5542 149.975 cv
88.3257 149.343 88.3354 148.444 88.5864 147.275 cv
88.8335 146.106 89.2065 145.205 89.7046 144.57 cv
90.2026 143.935 90.9028 143.618 91.8042 143.618 cv
92.7056 143.618 93.271 143.935 93.4985 144.57 cv
93.7261 145.205 93.7163 146.106 93.4692 147.275 cv
cp
f
95.1958 144.087 mo
95.4116 144.087 95.5991 144.006 95.7573 143.843 cv
95.9155 143.681 96.022 143.469 96.0767 143.209 cv
96.1382 142.92 96.1147 142.699 96.0073 142.545 cv
95.8989 142.392 95.7417 142.315 95.5376 142.315 cv
95.3706 142.315 95.2134 142.365 95.0659 142.465 cv
94.8423 142.613 94.6958 142.852 94.6255 143.182 cv
94.5679 143.449 94.5942 143.667 94.7017 143.835 cv
94.8101 144.003 94.9751 144.087 95.1958 144.087 cv
cp
96.4497 141.044 mo
96.4673 140.964 96.4546 140.876 96.4116 140.781 cv
96.3413 140.626 96.1997 140.548 95.9878 140.548 cv
95.6714 140.548 95.4087 140.726 95.1987 141.082 cv
95.0854 141.278 94.9731 141.567 94.8638 141.95 cv
95.0142 141.806 95.1772 141.701 95.3511 141.635 cv
95.5249 141.569 95.7144 141.536 95.9194 141.536 cv
96.3589 141.536 96.688 141.685 96.9058 141.984 cv
97.1226 142.282 97.1812 142.664 97.0815 143.127 cv
96.9829 143.59 96.7593 143.998 96.4087 144.351 cv
96.0571 144.704 95.5923 144.88 95.0112 144.88 cv
94.3872 144.88 93.9829 144.62 93.7983 144.098 cv
93.6548 143.69 93.6519 143.165 93.7886 142.52 cv
93.8706 142.142 93.9526 141.834 94.0337 141.597 cv
94.1802 141.176 94.3647 140.826 94.5874 140.545 cv
94.7788 140.306 95.0044 140.114 95.2651 139.968 cv
95.5259 139.823 95.8159 139.75 96.1353 139.75 cv
96.5952 139.75 96.937 139.868 97.1597 140.103 cv
97.3833 140.338 97.4692 140.653 97.4194 141.044 cv
96.4497 141.044 li
cp
f
62.0459 115.198 mo
62.0459 115.448 li
65.7439 115.448 li
63.6333 111.492 li
61.64 115.448 li
62.0459 115.448 li
62.0459 115.198 li
62.2692 115.31 li
63.646 112.578 li
64.9104 114.948 li
62.0459 114.948 li
62.0459 115.198 li
62.2692 115.31 li
62.0459 115.198 li
cp
f
72.1436 40.8965 mo
72.1436 58.814 li
f
71.8936 40.8965 mo
71.8936 58.814 li
72.3936 58.814 li
72.3936 40.8965 li
f
73.3682 40.8994 mo
70.9209 40.8994 li
f
73.3682 40.6494 mo
70.9209 40.6494 li
70.9209 41.1494 li
73.3682 41.1494 li
f
73.3682 58.8486 mo
70.9209 58.8486 li
f
73.3682 58.5986 mo
70.9209 58.5986 li
70.9209 59.0986 li
73.3682 59.0986 li
f
65.1416 97.5791 mo
64.8916 97.5791 li
64.8903 98.3111 64.2985 98.903 63.5654 98.9043 cv
62.8345 98.903 62.2416 98.3109 62.2402 97.5791 cv
62.2416 96.8472 62.8347 96.2543 63.5654 96.2529 cv
64.2983 96.2543 64.8903 96.847 64.8916 97.5791 cv
65.1416 97.5791 li
65.3916 97.5791 li
65.3915 96.5709 64.5747 95.7531 63.5654 95.7529 cv
62.5579 95.7532 61.7405 96.5707 61.7402 97.5791 cv
61.7405 98.5875 62.5581 99.4041 63.5654 99.4043 cv
64.5745 99.4042 65.3915 98.5874 65.3916 97.5791 cv
65.1416 97.5791 li
cp
f
65.2993 144.705 mo
65.2993 145.661 64.5239 146.436 63.5649 146.436 cv
62.6089 146.436 61.8325 145.661 61.8325 144.705 cv
61.8325 143.747 62.6089 142.97 63.5649 142.97 cv
64.5239 142.97 65.2993 143.747 65.2993 144.705 cv
cp
f
62.1934 127.674 mo
62.1934 127.924 li
64.9219 127.924 li
64.9219 130.403 li
62.4434 130.403 li
62.4434 127.674 li
62.1934 127.674 li
62.1934 127.924 li
62.1934 127.674 li
61.9434 127.674 li
61.9434 130.903 li
65.4219 130.903 li
65.4219 127.424 li
61.9434 127.424 li
61.9434 127.674 li
62.1934 127.674 li
cp
f
298.524 157.554 mo
298.524 157.804 li
301.253 157.804 li
301.253 160.283 li
298.774 160.283 li
298.774 157.554 li
298.524 157.554 li
298.524 157.804 li
298.524 157.554 li
298.274 157.554 li
298.274 160.783 li
301.753 160.783 li
301.753 157.304 li
298.274 157.304 li
298.274 157.554 li
298.524 157.554 li
cp
f
284.649 120.679 mo
284.649 120.929 li
287.378 120.929 li
287.378 123.408 li
284.899 123.408 li
284.899 120.679 li
284.649 120.679 li
284.649 120.929 li
284.649 120.679 li
284.399 120.679 li
284.399 123.908 li
287.878 123.908 li
287.878 120.429 li
284.399 120.429 li
284.399 120.679 li
284.649 120.679 li
cp
f
269.666 93.3042 mo
269.666 93.5542 li
272.395 93.5542 li
272.395 96.0327 li
269.916 96.0327 li
269.916 93.3042 li
269.666 93.3042 li
269.666 93.5542 li
269.666 93.3042 li
269.416 93.3042 li
269.416 96.5327 li
272.895 96.5327 li
272.895 93.0542 li
269.416 93.0542 li
269.416 93.3042 li
269.666 93.3042 li
cp
f
255.669 76.8042 mo
255.669 77.0542 li
258.397 77.0542 li
258.397 79.5327 li
255.919 79.5327 li
255.919 76.8042 li
255.669 76.8042 li
255.669 77.0542 li
255.669 76.8042 li
255.419 76.8042 li
255.419 80.0327 li
258.897 80.0327 li
258.897 76.5542 li
255.419 76.5542 li
255.419 76.8042 li
255.669 76.8042 li
cp
f
215.274 60.8306 mo
215.274 61.0806 li
218.003 61.0806 li
218.003 63.5591 li
215.524 63.5591 li
215.524 60.8306 li
215.274 60.8306 li
215.274 61.0806 li
215.274 60.8306 li
215.024 60.8306 li
215.024 64.0591 li
218.503 64.0591 li
218.503 60.5806 li
215.024 60.5806 li
215.024 60.8306 li
215.274 60.8306 li
cp
f
191.873 55.8403 mo
191.873 56.0903 li
194.602 56.0903 li
194.602 58.5688 li
192.123 58.5688 li
192.123 55.8403 li
191.873 55.8403 li
191.873 56.0903 li
191.873 55.8403 li
191.623 55.8403 li
191.623 59.0688 li
195.102 59.0688 li
195.102 55.5903 li
191.623 55.5903 li
191.623 55.8403 li
191.873 55.8403 li
cp
f
170.899 52.8765 mo
170.899 53.1265 li
173.628 53.1265 li
173.628 55.605 li
171.149 55.605 li
171.149 52.8765 li
170.899 52.8765 li
170.899 53.1265 li
170.899 52.8765 li
170.649 52.8765 li
170.649 56.105 li
174.128 56.105 li
174.128 52.6265 li
170.649 52.6265 li
170.649 52.8765 li
170.899 52.8765 li
cp
f
135.534 50.3667 mo
135.534 50.6167 li
138.263 50.6167 li
138.263 53.0952 li
135.784 53.0952 li
135.784 50.3667 li
135.534 50.3667 li
135.534 50.6167 li
135.534 50.3667 li
135.284 50.3667 li
135.284 53.5952 li
138.763 53.5952 li
138.763 50.1167 li
135.284 50.1167 li
135.284 50.3667 li
135.534 50.3667 li
cp
f
126.554 52.9336 mo
126.304 52.9336 li
126.303 53.6644 125.711 54.2565 124.978 54.2578 cv
124.247 54.2565 123.654 53.6643 123.653 52.9336 cv
123.654 52.2007 124.247 51.6087 124.978 51.6074 cv
125.711 51.6087 126.303 52.2005 126.304 52.9336 cv
126.554 52.9336 li
126.804 52.9336 li
126.804 51.9245 125.987 51.1075 124.978 51.1074 cv
123.971 51.1076 123.153 51.9243 123.153 52.9336 cv
123.153 53.9412 123.971 54.7576 124.978 54.7578 cv
125.987 54.7577 126.804 53.941 126.804 52.9336 cv
126.554 52.9336 li
cp
f
73.6987 49.7891 mo
73.4487 49.7891 li
73.4474 50.5199 72.8557 51.112 72.1226 51.1133 cv
71.3916 51.112 70.7987 50.5197 70.7974 49.7891 cv
70.7987 49.0561 71.3916 48.4642 72.1226 48.4629 cv
72.8557 48.4642 73.4474 49.056 73.4487 49.7891 cv
73.6987 49.7891 li
73.9487 49.7891 li
73.9487 48.78 73.1317 47.9629 72.1226 47.9629 cv
71.1152 47.9631 70.2976 48.7798 70.2974 49.7891 cv
70.2977 50.7967 71.1152 51.613 72.1226 51.6133 cv
73.1316 51.6132 73.9486 50.7965 73.9487 49.7891 cv
73.6987 49.7891 li
cp
f
168.486 49.4023 mo
168.236 49.4023 li
168.235 50.1332 167.643 50.7252 166.91 50.7266 cv
166.179 50.7252 165.586 50.133 165.585 49.4023 cv
165.586 48.6694 166.179 48.0775 166.91 48.0762 cv
167.643 48.0775 168.235 48.6693 168.236 49.4023 cv
168.486 49.4023 li
168.736 49.4023 li
168.736 48.3932 167.919 47.5762 166.91 47.5762 cv
165.903 47.5764 165.085 48.3931 165.085 49.4023 cv
165.085 50.41 165.903 51.2263 166.91 51.2266 cv
167.919 51.2265 168.736 50.4098 168.736 49.4023 cv
168.486 49.4023 li
cp
f
184.427 51.2275 mo
184.177 51.2275 li
184.175 51.9584 183.584 52.5504 182.851 52.5518 cv
182.12 52.5504 181.527 51.9582 181.525 51.2275 cv
181.527 50.4946 182.12 49.9027 182.851 49.9014 cv
183.584 49.9027 184.175 50.4944 184.177 51.2275 cv
184.427 51.2275 li
184.677 51.2275 li
184.677 50.2184 183.86 49.4014 182.851 49.4014 cv
181.843 49.4016 181.026 50.2183 181.025 51.2275 cv
181.026 52.2352 181.843 53.0515 182.851 53.0518 cv
183.86 53.0517 184.677 52.235 184.677 51.2275 cv
184.427 51.2275 li
cp
f
178.117 49.2695 mo
178.117 50.2256 177.341 51.001 176.383 51.001 cv
175.427 51.001 174.651 50.2256 174.651 49.2695 cv
174.651 48.3115 175.427 47.5352 176.383 47.5352 cv
177.341 47.5352 178.117 48.3115 178.117 49.2695 cv
cp
f
263.895 73.7871 mo
263.895 74.7432 263.119 75.5195 262.161 75.5195 cv
261.205 75.5195 260.427 74.7432 260.427 73.7871 cv
260.427 72.8291 261.205 72.0537 262.161 72.0537 cv
263.119 72.0537 263.895 72.8291 263.895 73.7871 cv
cp
f
301.846 109.719 mo
301.846 110.675 301.07 111.451 300.112 111.451 cv
299.156 111.451 298.381 110.675 298.381 109.719 cv
298.381 108.761 299.156 107.986 300.112 107.986 cv
301.07 107.986 301.846 108.761 301.846 109.719 cv
cp
f
338.69 196.5 mo
338.69 197.457 337.915 198.232 336.957 198.232 cv
336.001 198.232 335.226 197.457 335.226 196.5 cv
335.226 195.542 336.001 194.766 336.957 194.766 cv
337.915 194.766 338.69 195.542 338.69 196.5 cv
cp
f
146.868 54.7988 mo
146.868 55.0488 li
150.566 55.0488 li
148.456 51.0927 li
146.462 55.0488 li
146.868 55.0488 li
146.868 54.7988 li
147.091 54.9113 li
148.468 52.1787 li
149.733 54.5488 li
146.868 54.5488 li
146.868 54.7988 li
147.091 54.9113 li
146.868 54.7988 li
cp
f
104.864 52.3555 mo
104.864 52.6055 li
108.562 52.6055 li
106.451 48.6494 li
104.458 52.6055 li
104.864 52.6055 li
104.864 52.3555 li
105.087 52.468 li
106.464 49.7354 li
107.728 52.1055 li
104.864 52.1055 li
104.864 52.3555 li
105.087 52.468 li
104.864 52.3555 li
cp
f
183.248 55.3193 mo
183.248 55.5693 li
186.946 55.5693 li
184.835 51.6133 li
182.842 55.5693 li
183.248 55.5693 li
183.248 55.3193 li
183.471 55.4318 li
184.848 52.6992 li
186.113 55.0693 li
183.248 55.0693 li
183.248 55.3193 li
183.471 55.4318 li
183.248 55.3193 li
cp
f
211.189 63.3608 mo
211.189 63.6108 li
214.887 63.6108 li
212.777 59.6547 li
210.784 63.6108 li
211.189 63.6108 li
211.189 63.3608 li
211.413 63.4733 li
212.79 60.7408 li
214.054 63.1108 li
211.189 63.1108 li
211.189 63.3608 li
211.413 63.4733 li
211.189 63.3608 li
cp
f
106.527 41.8711 mo
106.527 59.3911 li
f
106.277 41.8711 mo
106.277 59.3911 li
106.777 59.3911 li
106.777 41.8711 li
f
107.788 41.874 mo
105.34 41.874 li
f
107.788 41.624 mo
105.34 41.624 li
105.34 42.124 li
107.788 42.124 li
f
107.788 59.4258 mo
105.34 59.4258 li
f
107.788 59.1758 mo
105.34 59.1758 li
105.34 59.6758 li
107.788 59.6758 li
f
124.991 44.4419 mo
124.991 61.7856 li
f
124.741 44.4419 mo
124.741 61.7856 li
125.241 61.7856 li
125.241 44.4419 li
f
126.251 44.377 mo
123.804 44.377 li
f
126.251 44.127 mo
123.804 44.127 li
123.804 44.627 li
126.251 44.627 li
f
126.251 61.8203 mo
123.804 61.8203 li
f
126.251 61.5703 mo
123.804 61.5703 li
123.804 62.0703 li
126.251 62.0703 li
f
136.955 42.9683 mo
136.955 60.8179 li
f
136.705 42.9683 mo
136.705 60.8179 li
137.205 60.8179 li
137.205 42.9683 li
f
138.215 42.9033 mo
135.768 42.9033 li
f
138.215 42.6533 mo
135.768 42.6533 li
135.768 43.1533 li
138.215 43.1533 li
f
138.215 60.8164 mo
135.768 60.8164 li
f
138.215 60.5664 mo
135.768 60.5664 li
135.768 61.0664 li
138.215 61.0664 li
f
148.455 44.4683 mo
148.455 61.812 li
f
148.205 44.4683 mo
148.205 61.812 li
148.705 61.812 li
148.705 44.4683 li
f
149.715 44.4033 mo
147.232 44.4033 li
f
149.715 44.1533 mo
147.232 44.1533 li
147.232 44.6533 li
149.715 44.6533 li
f
149.715 61.8105 mo
147.232 61.8105 li
f
149.715 61.5605 mo
147.232 61.5605 li
147.232 62.0605 li
149.715 62.0605 li
f
166.903 40.4644 mo
166.903 58.3345 li
f
166.653 40.4644 mo
166.653 58.3345 li
167.153 58.3345 li
167.153 40.4644 li
f
168.164 40.3994 mo
165.68 40.3994 li
f
168.164 40.1494 mo
165.68 40.1494 li
165.68 40.6494 li
168.164 40.6494 li
f
168.164 58.333 mo
165.68 58.333 li
f
168.164 58.083 mo
165.68 58.083 li
165.68 58.583 li
168.164 58.583 li
f
172.403 45.4331 mo
172.403 63.3394 li
f
172.153 45.4331 mo
172.153 63.3394 li
172.653 63.3394 li
172.653 45.4331 li
f
173.664 45.3682 mo
171.18 45.3682 li
f
173.664 45.1182 mo
171.18 45.1182 li
171.18 45.6182 li
173.664 45.6182 li
f
173.664 63.3379 mo
171.18 63.3379 li
f
173.664 63.0879 mo
171.18 63.0879 li
171.18 63.5879 li
173.664 63.5879 li
f
176.372 40.4595 mo
176.372 58.3296 li
f
176.122 40.4595 mo
176.122 58.3296 li
176.622 58.3296 li
176.622 40.4595 li
f
177.632 40.3945 mo
175.149 40.3945 li
f
177.632 40.1445 mo
175.149 40.1445 li
175.149 40.6445 li
177.632 40.6445 li
f
177.632 58.3281 mo
175.149 58.3281 li
f
177.632 58.0781 mo
175.149 58.0781 li
175.149 58.5781 li
177.632 58.5781 li
f
182.872 42.4692 mo
182.872 60.3394 li
f
182.622 42.4692 mo
182.622 60.3394 li
183.122 60.3394 li
183.122 42.4692 li
f
184.132 42.4043 mo
181.649 42.4043 li
f
184.132 42.1543 mo
181.649 42.1543 li
181.649 42.6543 li
184.132 42.6543 li
f
184.132 60.3379 mo
181.649 60.3379 li
f
184.132 60.0879 mo
181.649 60.0879 li
181.649 60.5879 li
184.132 60.5879 li
f
184.877 44.9331 mo
184.877 62.8394 li
f
184.627 44.9331 mo
184.627 62.8394 li
185.127 62.8394 li
185.127 44.9331 li
f
186.101 44.8682 mo
183.654 44.8682 li
f
186.101 44.6182 mo
183.654 44.6182 li
183.654 45.1182 li
186.101 45.1182 li
f
186.101 62.8379 mo
183.654 62.8379 li
f
186.101 62.5879 mo
183.654 62.5879 li
183.654 63.0879 li
186.101 63.0879 li
f
193.341 48.9341 mo
193.341 66.2983 li
f
193.091 48.9341 mo
193.091 66.2983 li
193.591 66.2983 li
193.591 48.9341 li
f
194.564 48.8691 mo
192.118 48.8691 li
f
194.564 48.6191 mo
192.118 48.6191 li
192.118 49.1191 li
194.564 49.1191 li
f
194.564 66.2969 mo
192.118 66.2969 li
f
194.564 66.0469 mo
192.118 66.0469 li
192.118 66.5469 li
194.564 66.5469 li
f
212.814 53.4331 mo
212.814 70.8335 li
f
212.564 53.4331 mo
212.564 70.8335 li
213.064 70.8335 li
213.064 53.4331 li
f
214.038 53.3682 mo
211.592 53.3682 li
f
214.038 53.1182 mo
211.592 53.1182 li
211.592 53.6182 li
214.038 53.6182 li
f
214.038 70.832 mo
211.592 70.832 li
f
214.038 70.582 mo
211.592 70.582 li
211.592 71.082 li
214.038 71.082 li
f
216.778 53.9331 mo
216.778 70.8081 li
f
216.528 53.9331 mo
216.528 70.8081 li
217.028 70.8081 li
217.028 53.9331 li
f
218.002 53.8682 mo
215.556 53.8682 li
f
218.002 53.6182 mo
215.556 53.6182 li
215.556 54.1182 li
218.002 54.1182 li
f
218.002 70.8066 mo
215.556 70.8066 li
f
218.002 70.5566 mo
215.556 70.5566 li
215.556 71.0566 li
218.002 71.0566 li
f
257.153 69.8706 mo
257.153 86.2769 li
f
256.903 69.8706 mo
256.903 86.2769 li
257.403 86.2769 li
257.403 69.8706 li
f
258.377 69.8057 mo
255.931 69.8057 li
f
258.377 69.5557 mo
255.931 69.5557 li
255.931 70.0557 li
258.377 70.0557 li
f
258.377 86.2754 mo
255.931 86.2754 li
f
258.377 86.0254 mo
255.931 86.0254 li
255.931 86.5254 li
258.377 86.5254 li
f
262.153 65.4067 mo
262.153 82.2769 li
f
261.903 65.4067 mo
261.903 82.2769 li
262.403 82.2769 li
262.403 65.4067 li
f
263.377 65.3418 mo
260.931 65.3418 li
f
263.377 65.0918 mo
260.931 65.0918 li
260.931 65.5918 li
263.377 65.5918 li
f
263.377 82.2754 mo
260.931 82.2754 li
f
263.377 82.0254 mo
260.931 82.0254 li
260.931 82.5254 li
263.377 82.5254 li
f
271.127 86.8296 mo
271.127 102.736 li
f
270.877 86.8296 mo
270.877 102.736 li
271.377 102.736 li
271.377 86.8296 li
f
272.351 86.7646 mo
269.904 86.7646 li
f
272.351 86.5146 mo
269.904 86.5146 li
269.904 87.0146 li
272.351 87.0146 li
f
272.351 102.734 mo
269.904 102.734 li
f
272.351 102.484 mo
269.904 102.484 li
269.904 102.984 li
272.351 102.984 li
f
300.096 102.272 mo
300.096 117.709 li
f
299.846 102.272 mo
299.846 117.709 li
300.346 117.709 li
300.346 102.272 li
f
301.319 102.207 mo
298.873 102.207 li
f
301.319 101.957 mo
298.873 101.957 li
298.873 102.457 li
301.319 102.457 li
f
301.319 117.708 mo
298.873 117.708 li
f
301.319 117.458 mo
298.873 117.458 li
298.873 117.958 li
301.319 117.958 li
f
286.091 114.746 mo
286.091 129.647 li
f
285.841 114.746 mo
285.841 129.647 li
286.341 129.647 li
286.341 114.746 li
f
287.314 114.681 mo
284.868 114.681 li
f
287.314 114.431 mo
284.868 114.431 li
284.868 114.931 li
287.314 114.931 li
f
287.314 129.645 mo
284.868 129.645 li
f
287.314 129.395 mo
284.868 129.395 li
284.868 129.895 li
287.314 129.895 li
f
300.064 152.152 mo
300.064 165.553 li
f
299.814 152.152 mo
299.814 165.553 li
300.314 165.553 li
300.314 152.152 li
f
301.288 152.087 mo
298.842 152.087 li
f
301.288 151.837 mo
298.842 151.837 li
298.842 152.337 li
301.288 152.337 li
f
301.288 165.551 mo
298.842 165.551 li
f
301.288 165.301 mo
298.842 165.301 li
298.842 165.801 li
301.288 165.801 li
f
336.973 190.546 mo
336.973 202.476 li
f
336.723 190.546 mo
336.723 202.476 li
337.223 202.476 li
337.223 190.546 li
f
338.196 190.482 mo
335.75 190.482 li
f
338.196 190.232 mo
335.75 190.232 li
335.75 190.732 li
338.196 190.732 li
f
338.196 202.474 mo
335.75 202.474 li
f
338.196 202.224 mo
335.75 202.224 li
335.75 202.724 li
338.196 202.724 li
f
342.753 183.033 mo
339.253 183.033 li
339.253 184.033 li
342.753 184.033 li
f
342.753 138.641 mo
339.253 138.641 li
339.253 139.641 li
342.753 139.641 li
f
342.753 93.7466 mo
339.253 93.7466 li
339.253 94.7466 li
342.753 94.7466 li
f
342.753 49.6494 mo
339.253 49.6494 li
339.253 50.6494 li
342.753 50.6494 li
f
35.0107 183.033 mo
31.5107 183.033 li
31.5107 184.033 li
35.0107 184.033 li
f
35.0107 138.641 mo
31.5107 138.641 li
31.5107 139.641 li
35.0107 139.641 li
f
35.0107 93.7466 mo
31.5107 93.7466 li
31.5107 94.7466 li
35.0107 94.7466 li
f
35.0107 49.6494 mo
31.5107 49.6494 li
31.5107 50.6494 li
35.0107 50.6494 li
f
333.001 195.019 mo
332.939 194.446 332.756 193.758 332.493 192.972 cv
332.406 192.71 332.122 192.569 331.861 192.657 cv
331.599 192.744 331.458 193.028 331.545 193.289 cv
331.796 194.036 331.961 194.681 332.007 195.125 cv
332.036 195.399 332.282 195.598 332.557 195.569 cv
332.831 195.54 333.03 195.294 333.001 195.019 cv
cp
331.385 190.133 mo
331.125 189.53 330.847 188.911 330.56 188.293 cv
330.444 188.043 330.147 187.934 329.896 188.05 cv
329.646 188.166 329.537 188.463 329.653 188.714 cv
329.936 189.325 330.211 189.936 330.467 190.529 cv
330.576 190.783 330.87 190.9 331.124 190.79 cv
331.377 190.681 331.494 190.387 331.385 190.133 cv
cp
329.252 185.573 mo
328.937 184.939 328.63 184.334 328.345 183.777 cv
328.219 183.532 327.917 183.435 327.672 183.561 cv
327.426 183.687 327.329 183.988 327.455 184.234 cv
327.739 184.787 328.044 185.388 328.356 186.017 cv
328.479 186.265 328.779 186.366 329.026 186.243 cv
329.274 186.12 329.375 185.82 329.252 185.573 cv
cp
326.941 181.105 mo
326.774 180.794 326.678 180.62 326.678 180.619 cv
326.239 180.859 li
326.691 180.645 li
326.07 179.329 li
325.952 179.079 325.654 178.972 325.404 179.09 cv
325.155 179.208 325.048 179.506 325.166 179.756 cv
325.794 181.086 li
325.801 181.099 li
325.801 181.1 325.895 181.27 326.061 181.579 cv
326.191 181.822 326.495 181.913 326.738 181.782 cv
326.981 181.651 327.072 181.348 326.941 181.105 cv
cp
324.789 176.616 mo
323.936 174.807 li
323.818 174.557 323.52 174.451 323.27 174.568 cv
323.02 174.686 322.914 174.984 323.031 175.234 cv
323.885 177.043 li
324.003 177.292 324.301 177.399 324.551 177.281 cv
324.8 177.163 324.907 176.866 324.789 176.616 cv
cp
322.655 172.094 mo
321.802 170.285 li
321.684 170.036 321.386 169.929 321.136 170.047 cv
320.886 170.165 320.779 170.463 320.897 170.712 cv
321.751 172.521 li
321.869 172.771 322.167 172.878 322.417 172.76 cv
322.666 172.642 322.773 172.344 322.655 172.094 cv
cp
320.521 167.573 mo
319.667 165.764 li
319.55 165.514 319.252 165.407 319.002 165.525 cv
318.752 165.643 318.645 165.941 318.763 166.191 cv
319.617 167.999 li
319.735 168.249 320.033 168.356 320.282 168.238 cv
320.532 168.12 320.639 167.822 320.521 167.573 cv
cp
318.387 163.051 mo
317.786 161.777 li
317.518 161.238 li
317.395 160.991 317.095 160.89 316.848 161.013 cv
316.601 161.136 316.5 161.436 316.622 161.683 cv
316.886 162.214 li
317.483 163.478 li
317.6 163.727 317.898 163.834 318.148 163.716 cv
318.398 163.599 318.505 163.301 318.387 163.051 cv
cp
316.183 158.552 mo
315.294 156.76 li
315.171 156.513 314.871 156.412 314.623 156.535 cv
314.376 156.658 314.275 156.958 314.398 157.205 cv
315.288 158.997 li
315.411 159.244 315.711 159.345 315.958 159.222 cv
316.205 159.099 316.306 158.799 316.183 158.552 cv
cp
313.959 154.074 mo
313.069 152.283 li
312.946 152.035 312.646 151.934 312.399 152.057 cv
312.152 152.18 312.051 152.48 312.174 152.727 cv
313.063 154.519 li
313.186 154.766 313.486 154.867 313.734 154.744 cv
313.981 154.621 314.082 154.321 313.959 154.074 cv
cp
311.848 149.557 mo
311.609 149.018 311.336 148.403 311.034 147.727 cv
310.921 147.474 310.626 147.361 310.374 147.474 cv
310.121 147.586 310.008 147.882 310.121 148.134 cv
310.422 148.81 310.695 149.424 310.934 149.963 cv
311.046 150.216 311.342 150.329 311.594 150.217 cv
311.847 150.105 311.96 149.81 311.848 149.557 cv
cp
309.806 144.984 mo
309.543 144.397 309.268 143.787 308.984 143.158 cv
308.871 142.906 308.575 142.794 308.323 142.908 cv
308.071 143.021 307.959 143.317 308.073 143.569 cv
308.356 144.197 308.631 144.807 308.894 145.394 cv
309.007 145.646 309.303 145.758 309.555 145.645 cv
309.807 145.532 309.92 145.236 309.807 144.984 cv
cp
307.744 140.421 mo
307.471 139.821 307.194 139.212 306.913 138.599 cv
306.798 138.348 306.501 138.238 306.25 138.353 cv
305.999 138.467 305.889 138.764 306.004 139.015 cv
306.284 139.628 306.561 140.236 306.834 140.835 cv
306.948 141.087 307.245 141.198 307.496 141.083 cv
307.748 140.969 307.859 140.673 307.744 140.421 cv
cp
305.657 135.869 mo
305.376 135.261 305.094 134.655 304.813 134.052 cv
304.696 133.802 304.399 133.694 304.148 133.811 cv
303.898 133.927 303.79 134.225 303.907 134.475 cv
304.187 135.076 304.469 135.682 304.749 136.289 cv
304.865 136.54 305.162 136.649 305.413 136.533 cv
305.664 136.417 305.773 136.12 305.657 135.869 cv
cp
303.528 131.33 mo
303.229 130.717 302.927 130.117 302.624 129.531 cv
302.497 129.286 302.195 129.19 301.95 129.317 cv
301.705 129.444 301.609 129.746 301.736 129.991 cv
302.035 130.57 302.334 131.163 302.629 131.768 cv
302.749 132.016 303.049 132.119 303.297 131.998 cv
303.545 131.877 303.649 131.578 303.528 131.33 cv
cp
301.202 126.874 mo
300.865 126.26 300.537 125.674 300.227 125.122 cv
300.092 124.881 299.787 124.796 299.547 124.931 cv
299.306 125.066 299.22 125.371 299.355 125.612 cv
299.664 126.162 299.991 126.746 300.326 127.356 cv
300.459 127.598 300.763 127.686 301.005 127.553 cv
301.247 127.42 301.336 127.116 301.202 126.874 cv
cp
298.772 122.507 mo
298.486 121.976 298.254 121.521 298.093 121.162 cv
298.037 121.037 297.973 120.895 297.9 120.739 cv
297.784 120.488 297.487 120.379 297.236 120.495 cv
296.986 120.611 296.877 120.908 296.993 121.159 cv
297.064 121.312 297.126 121.45 297.18 121.57 cv
297.359 121.968 297.6 122.439 297.892 122.981 cv
298.023 123.224 298.326 123.315 298.569 123.184 cv
298.812 123.053 298.903 122.75 298.772 122.507 cv
cp
296.593 118.019 mo
296.318 117.458 296.02 116.854 295.704 116.22 cv
295.581 115.973 295.281 115.872 295.033 115.996 cv
294.786 116.119 294.686 116.419 294.809 116.666 cv
295.124 117.298 295.422 117.9 295.696 118.459 cv
295.817 118.707 296.117 118.809 296.365 118.688 cv
296.613 118.566 296.715 118.267 296.593 118.019 cv
cp
294.352 113.533 mo
294.053 112.943 293.748 112.345 293.441 111.747 cv
293.314 111.501 293.013 111.404 292.767 111.53 cv
292.522 111.656 292.425 111.958 292.551 112.204 cv
292.857 112.8 293.162 113.397 293.461 113.985 cv
293.586 114.232 293.887 114.33 294.133 114.205 cv
294.379 114.08 294.477 113.779 294.352 113.533 cv
cp
292.055 109.076 mo
291.735 108.466 291.42 107.872 291.116 107.302 cv
290.986 107.059 290.683 106.967 290.439 107.097 cv
290.196 107.228 290.104 107.531 290.234 107.774 cv
290.537 108.341 290.851 108.933 291.169 109.541 cv
291.298 109.785 291.6 109.879 291.844 109.751 cv
292.089 109.623 292.183 109.321 292.055 109.076 cv
cp
289.668 104.657 mo
289.353 104.098 289.065 103.603 288.814 103.189 cv
288.758 103.097 288.702 103.006 288.645 102.913 cv
288.501 102.678 288.193 102.604 287.958 102.748 cv
287.722 102.893 287.648 103.201 287.793 103.436 cv
287.849 103.527 287.904 103.618 287.96 103.709 cv
288.203 104.109 288.486 104.595 288.797 105.148 cv
288.933 105.388 289.238 105.473 289.478 105.338 cv
289.719 105.202 289.804 104.897 289.668 104.657 cv
cp
287.038 100.364 mo
286.674 99.801 286.305 99.2404 285.935 98.6856 cv
285.782 98.4558 285.472 98.3936 285.242 98.5467 cv
285.012 98.6998 284.95 99.0103 285.103 99.2401 cv
285.471 99.7914 285.837 100.348 286.198 100.907 cv
286.348 101.139 286.658 101.205 286.89 101.055 cv
287.121 100.905 287.188 100.596 287.038 100.364 cv
cp
284.243 96.195 mo
283.855 95.633 283.47 95.0836 283.093 94.5509 cv
282.933 94.3255 282.621 94.2722 282.396 94.4317 cv
282.17 94.5912 282.117 94.9033 282.277 95.1287 cv
282.652 95.6586 283.034 96.2051 283.421 96.764 cv
283.578 96.9911 283.89 97.0478 284.117 96.8907 cv
284.344 96.7335 284.401 96.4221 284.243 96.195 cv
cp
281.334 92.1078 mo
280.912 91.5315 280.511 90.9912 280.138 90.4947 cv
279.972 90.2739 279.659 90.2294 279.438 90.3952 cv
279.217 90.5611 279.173 90.8745 279.339 91.0953 cv
279.709 91.5884 280.108 92.1255 280.527 92.6986 cv
280.69 92.9214 281.003 92.9697 281.226 92.8066 cv
281.449 92.6435 281.497 92.3306 281.334 92.1078 cv
cp
278.292 88.1045 mo
278.035 87.7852 277.829 87.5382 277.676 87.3666 cv
277.449 87.1122 277.194 86.8473 276.912 86.5721 cv
276.714 86.3793 276.398 86.3831 276.205 86.5808 cv
276.012 86.7784 276.016 87.0949 276.213 87.2878 cv
276.482 87.5498 276.722 87.7988 276.929 88.0318 cv
277.062 88.1809 277.262 88.4202 277.513 88.7316 cv
277.686 88.9467 278.001 88.9807 278.216 88.8075 cv
278.431 88.6344 278.465 88.3196 278.292 88.1045 cv
cp
274.623 84.558 mo
274.125 84.1517 273.595 83.7337 273.039 83.3077 cv
272.82 83.1396 272.506 83.181 272.338 83.4001 cv
272.17 83.6192 272.211 83.9331 272.43 84.1012 cv
272.979 84.522 273.502 84.934 273.991 85.3329 cv
274.205 85.5074 274.52 85.4755 274.694 85.2615 cv
274.869 85.0475 274.837 84.7325 274.623 84.558 cv
cp
270.615 81.5081 mo
270.079 81.1213 269.531 80.7323 268.977 80.3437 cv
268.75 80.1852 268.439 80.2401 268.28 80.4663 cv
268.122 80.6924 268.177 81.0042 268.403 81.1627 cv
268.954 81.5489 269.498 81.9352 270.03 82.319 cv
270.254 82.4805 270.566 82.43 270.728 82.2061 cv
270.889 81.9822 270.839 81.6696 270.615 81.5081 cv
cp
266.493 78.635 mo
265.935 78.2578 265.378 77.8845 264.825 77.5178 cv
264.595 77.3651 264.285 77.4279 264.132 77.658 cv
263.979 77.8881 264.042 78.1984 264.272 78.3511 cv
264.823 78.7162 265.378 79.0878 265.933 79.4633 cv
266.161 79.618 266.472 79.5581 266.627 79.3293 cv
266.782 79.1006 266.722 78.7898 266.493 78.635 cv
cp
262.307 75.8686 mo
261.727 75.4937 261.162 75.1314 260.618 74.7851 cv
260.385 74.6369 260.076 74.7056 259.927 74.9385 cv
259.779 75.1715 259.848 75.4805 260.081 75.6288 cv
260.623 75.9738 261.186 76.3348 261.764 76.7083 cv
261.996 76.8583 262.305 76.7918 262.455 76.56 cv
262.605 76.3281 262.539 76.0185 262.307 75.8686 cv
cp
258.068 73.1826 mo
257.43 72.7867 256.853 72.4332 256.355 72.1311 cv
256.119 71.9879 255.812 72.0632 255.669 72.2993 cv
255.525 72.5354 255.601 72.8429 255.837 72.9861 cv
256.332 73.2863 256.905 73.6381 257.541 74.0323 cv
257.775 74.1779 258.084 74.1057 258.229 73.8711 cv
258.375 73.6364 258.303 73.3282 258.068 73.1826 cv
cp
253.695 70.6382 mo
253.179 70.3813 252.568 70.0867 251.879 69.7614 cv
251.63 69.6434 251.332 69.7502 251.214 69.9999 cv
251.096 70.2496 251.202 70.5476 251.452 70.6656 cv
252.137 70.9888 252.742 71.2809 253.249 71.5334 cv
253.496 71.6565 253.797 71.5558 253.92 71.3086 cv
254.043 71.0614 253.942 70.7612 253.695 70.6382 cv
cp
249.145 68.4936 mo
248.561 68.2266 247.949 67.9493 247.317 67.6641 cv
247.065 67.5506 246.769 67.6627 246.656 67.9144 cv
246.542 68.1661 246.654 68.4622 246.906 68.5757 cv
247.537 68.8603 248.147 69.137 248.729 69.4032 cv
248.981 69.518 249.277 69.4074 249.392 69.1562 cv
249.507 68.905 249.396 68.6084 249.145 68.4936 cv
cp
244.571 66.4351 mo
243.968 66.1672 243.356 65.8959 242.737 65.6229 cv
242.484 65.5114 242.189 65.6258 242.078 65.8785 cv
241.966 66.1311 242.081 66.4263 242.333 66.5378 cv
242.951 66.8104 243.563 67.0814 244.165 67.3489 cv
244.417 67.4611 244.713 67.3474 244.825 67.0951 cv
244.937 66.8428 244.823 66.5473 244.571 66.4351 cv
cp
239.983 64.414 mo
239.369 64.1456 238.755 63.8781 238.145 63.6131 cv
237.891 63.5031 237.597 63.6193 237.487 63.8726 cv
237.377 64.1259 237.493 64.4204 237.746 64.5304 cv
238.356 64.795 238.969 65.0622 239.583 65.3303 cv
239.836 65.4409 240.131 65.3254 240.241 65.0723 cv
240.352 64.8193 240.236 64.5245 239.983 64.414 cv
cp
235.384 62.4199 mo
234.757 62.15 234.141 61.8859 233.541 61.6295 cv
233.287 61.521 232.993 61.6389 232.885 61.8928 cv
232.776 62.1467 232.894 62.4406 233.148 62.5491 cv
233.747 62.8051 234.363 63.069 234.989 63.3385 cv
235.243 63.4477 235.537 63.3305 235.646 63.0768 cv
235.755 62.8232 235.638 62.5291 235.384 62.4199 cv
cp
230.772 60.4535 mo
230.116 60.1771 229.496 59.9171 228.92 59.6772 cv
228.665 59.571 228.372 59.6917 228.266 59.9466 cv
228.16 60.2015 228.281 60.4942 228.536 60.6004 cv
229.11 60.8396 229.729 61.099 230.383 61.3748 cv
230.637 61.4822 230.931 61.3629 231.038 61.1085 cv
231.145 60.854 231.026 60.5608 230.772 60.4535 cv
cp
226.126 58.5346 mo
225.621 58.3343 225.226 58.1829 224.952 58.0864 cv
224.749 58.0149 224.502 57.9301 224.217 57.8336 cv
223.955 57.7451 223.671 57.8854 223.583 58.147 cv
223.494 58.4085 223.635 58.6923 223.896 58.7808 cv
224.179 58.8765 224.422 58.9602 224.62 59.0298 cv
224.87 59.1176 225.259 59.2663 225.757 59.4641 cv
226.014 59.566 226.304 59.4405 226.406 59.1838 cv
226.508 58.9272 226.383 58.6365 226.126 58.5346 cv
cp
221.355 56.8887 mo
220.756 56.6942 220.116 56.4871 219.446 56.2719 cv
219.183 56.1873 218.902 56.3319 218.817 56.5948 cv
218.733 56.8577 218.877 57.1393 219.14 57.2239 cv
219.809 57.4388 220.448 57.6456 221.045 57.8397 cv
221.308 57.9251 221.59 57.7814 221.675 57.5188 cv
221.761 57.2562 221.617 56.9741 221.355 56.8887 cv
cp
216.581 55.3564 mo
215.948 55.1553 215.307 54.9527 214.67 54.7517 cv
214.406 54.6687 214.126 54.8149 214.043 55.0783 cv
213.96 55.3416 214.106 55.6224 214.369 55.7055 cv
215.006 55.9062 215.646 56.1086 216.278 56.3095 cv
216.541 56.3931 216.823 56.2475 216.906 55.9843 cv
216.99 55.7211 216.844 55.44 216.581 55.3564 cv
cp
211.799 53.8526 mo
211.136 53.6461 210.493 53.4473 209.883 53.2599 cv
209.619 53.1788 209.34 53.327 209.259 53.591 cv
209.177 53.8549 209.326 54.1347 209.59 54.2158 cv
210.198 54.4027 210.84 54.6013 211.502 54.8075 cv
211.766 54.8895 212.046 54.7422 212.128 54.4786 cv
212.21 54.2149 212.063 53.9346 211.799 53.8526 cv
cp
207 52.3875 mo
206.085 52.117 205.407 51.9253 205.039 51.8389 cv
204.77 51.7759 204.501 51.9428 204.438 52.2117 cv
204.375 52.4805 204.542 52.7495 204.811 52.8125 cv
205.13 52.8869 205.811 53.0785 206.717 53.3464 cv
206.981 53.4247 207.26 53.2735 207.338 53.0087 cv
207.416 52.7439 207.265 52.4658 207 52.3875 cv
cp
202.13 51.125 mo
201.501 50.9626 200.837 50.7882 200.193 50.618 cv
199.926 50.5474 199.653 50.7065 199.582 50.9735 cv
199.511 51.2405 199.671 51.5141 199.938 51.5847 cv
200.583 51.7553 201.249 51.9301 201.879 52.0932 cv
202.146 52.1623 202.419 52.0017 202.488 51.7343 cv
202.557 51.467 202.397 51.1942 202.13 51.125 cv
cp
197.29 49.8425 mo
196.783 49.7057 196.472 49.6212 196.471 49.621 cv
196.407 49.6038 li
195.187 49.5991 li
194.911 49.5981 194.686 49.8211 194.685 50.0972 cv
194.684 50.3734 194.907 50.5981 195.183 50.5991 cv
196.338 50.6035 li
196.34 50.1035 li
196.209 50.586 li
196.209 50.5861 196.522 50.6711 197.03 50.808 cv
197.297 50.8799 197.571 50.722 197.643 50.4553 cv
197.715 50.1887 197.557 49.9143 197.29 49.8425 cv
cp
192.187 49.5877 mo
190.187 49.5801 li
189.911 49.5791 189.686 49.8021 189.685 50.0782 cv
189.684 50.3544 189.907 50.5791 190.183 50.5801 cv
192.183 50.5877 li
192.459 50.5888 192.684 50.3658 192.685 50.0896 cv
192.686 49.8135 192.463 49.5888 192.187 49.5877 cv
cp
187.187 49.5687 mo
185.187 49.5611 li
184.911 49.5601 184.686 49.7831 184.685 50.0592 cv
184.684 50.3353 184.907 50.56 185.183 50.5611 cv
187.183 50.5687 li
187.459 50.5698 187.684 50.3467 187.685 50.0706 cv
187.686 49.7945 187.463 49.5698 187.187 49.5687 cv
cp
182.187 49.5497 mo
180.187 49.5421 li
179.911 49.541 179.686 49.764 179.685 50.0402 cv
179.684 50.3163 179.907 50.541 180.183 50.5421 cv
182.183 50.5497 li
182.459 50.5507 182.684 50.3277 182.685 50.0516 cv
182.686 49.7755 182.463 49.5507 182.187 49.5497 cv
cp
177.243 49.4768 mo
175.256 49.256 li
174.981 49.2255 174.734 49.4232 174.704 49.6977 cv
174.673 49.9722 174.871 50.2194 175.145 50.2498 cv
177.133 50.4707 li
177.408 50.5012 177.655 50.3034 177.685 50.0289 cv
177.716 49.7545 177.518 49.5073 177.243 49.4768 cv
cp
172.274 48.9247 mo
170.286 48.7039 li
170.012 48.6734 169.765 48.8712 169.734 49.1456 cv
169.704 49.4201 169.901 49.6673 170.176 49.6978 cv
172.164 49.9186 li
172.438 49.9491 172.685 49.7513 172.716 49.4769 cv
172.746 49.2024 172.549 48.9552 172.274 48.9247 cv
cp
167.236 48.6172 mo
165.236 48.6181 li
164.959 48.6182 164.736 48.8422 164.736 49.1183 cv
164.736 49.3944 164.96 49.6182 165.236 49.6181 cv
167.236 49.6172 li
167.512 49.6171 167.736 49.3931 167.736 49.117 cv
167.736 48.8408 167.512 48.6171 167.236 48.6172 cv
cp
162.236 48.6194 mo
160.236 48.6203 li
159.959 48.6204 159.736 48.8444 159.736 49.1205 cv
159.736 49.3966 159.96 49.6204 160.236 49.6203 cv
162.236 49.6194 li
162.512 49.6193 162.736 49.3953 162.736 49.1192 cv
162.736 48.843 162.512 48.6193 162.236 48.6194 cv
cp
157.236 48.6216 mo
155.236 48.6225 li
154.959 48.6226 154.736 48.8466 154.736 49.1227 cv
154.736 49.3989 154.96 49.6226 155.236 49.6225 cv
157.236 49.6216 li
157.512 49.6215 157.736 49.3975 157.736 49.1214 cv
157.736 48.8452 157.512 48.6215 157.236 48.6216 cv
cp
152.236 48.6238 mo
150.236 48.6247 li
149.959 48.6248 149.736 48.8488 149.736 49.1249 cv
149.736 49.4011 149.96 49.6248 150.236 49.6247 cv
152.236 49.6238 li
152.512 49.6237 152.736 49.3997 152.736 49.1236 cv
152.736 48.8475 152.512 48.6237 152.236 48.6238 cv
cp
147.236 48.626 mo
145.236 48.6269 li
144.959 48.627 144.736 48.851 144.736 49.1271 cv
144.736 49.4033 144.96 49.627 145.236 49.6269 cv
147.236 49.626 li
147.512 49.6259 147.736 49.4019 147.736 49.1258 cv
147.736 48.8497 147.512 48.6259 147.236 48.626 cv
cp
142.236 48.6282 mo
141.802 48.6284 li
141.79 48.6284 li
140.213 48.708 li
139.937 48.722 139.724 48.9568 139.738 49.2326 cv
139.752 49.5084 139.987 49.7207 140.263 49.7068 cv
141.815 49.6284 li
142.236 49.6282 li
142.512 49.6281 142.736 49.4042 142.736 49.128 cv
142.736 48.8519 142.512 48.6281 142.236 48.6282 cv
cp
137.216 48.8593 mo
135.219 48.9602 li
134.943 48.9741 134.731 49.209 134.745 49.4848 cv
134.759 49.7606 134.994 49.9728 135.269 49.9589 cv
137.267 49.8581 li
137.543 49.8441 137.755 49.6093 137.741 49.3335 cv
137.727 49.0577 137.492 48.8454 137.216 48.8593 cv
cp
132.244 49.0166 mo
130.244 49.022 li
129.968 49.0228 129.745 49.2472 129.745 49.5234 cv
129.746 49.7995 129.971 50.0228 130.247 50.022 cv
132.247 50.0166 li
132.523 50.0158 132.746 49.7914 132.745 49.5152 cv
132.745 49.2391 132.52 49.0158 132.244 49.0166 cv
cp
127.244 49.0301 mo
125.244 49.0356 li
124.968 49.0363 124.745 49.2608 124.745 49.5369 cv
124.746 49.8131 124.971 50.0363 125.247 50.0356 cv
127.247 50.0301 li
127.523 50.0294 127.746 49.8049 127.745 49.5288 cv
127.745 49.2526 127.52 49.0294 127.244 49.0301 cv
cp
122.244 49.0437 mo
120.244 49.0491 li
119.968 49.0499 119.745 49.2743 119.745 49.5505 cv
119.746 49.8266 119.971 50.0499 120.247 50.0491 cv
122.247 50.0437 li
122.523 50.0429 122.746 49.8185 122.745 49.5423 cv
122.745 49.2662 122.52 49.0429 122.244 49.0437 cv
cp
117.244 49.0572 mo
115.244 49.0627 li
114.968 49.0634 114.745 49.2879 114.746 49.564 cv
114.746 49.8402 114.971 50.0634 115.247 50.0627 cv
117.247 50.0572 li
117.523 50.0565 117.746 49.832 117.745 49.5559 cv
117.745 49.2797 117.52 49.0565 117.244 49.0572 cv
cp
112.244 49.0708 mo
110.244 49.0762 li
109.968 49.077 109.745 49.3014 109.746 49.5776 cv
109.746 49.8537 109.971 50.077 110.247 50.0762 cv
112.247 50.0708 li
112.523 50.07 112.746 49.8456 112.746 49.5694 cv
112.745 49.2933 112.52 49.07 112.244 49.0708 cv
cp
107.244 49.0843 mo
105.244 49.0898 li
104.968 49.0905 104.745 49.315 104.746 49.5911 cv
104.746 49.8673 104.971 50.0905 105.247 50.0898 cv
107.247 50.0843 li
107.523 50.0836 107.746 49.8591 107.746 49.583 cv
107.745 49.3068 107.52 49.0836 107.244 49.0843 cv
cp
102.244 49.0979 mo
100.244 49.1033 li
99.9681 49.1041 99.7448 49.3285 99.7456 49.6047 cv
99.7463 49.8808 99.9708 50.1041 100.247 50.1033 cv
102.247 50.0979 li
102.523 50.0971 102.746 49.8727 102.746 49.5965 cv
102.745 49.3204 102.52 49.0971 102.244 49.0979 cv
cp
97.2442 49.1115 mo
95.2442 49.1169 li
94.9681 49.1176 94.7449 49.3421 94.7456 49.6182 cv
94.7463 49.8944 94.9708 50.1176 95.2469 50.1169 cv
97.2469 50.1114 li
97.5231 50.1107 97.7463 49.8862 97.7456 49.6101 cv
97.7448 49.334 97.5204 49.1107 97.2442 49.1115 cv
cp
92.2443 49.125 mo
90.2443 49.1304 li
89.9681 49.1312 89.7449 49.3556 89.7456 49.6318 cv
89.7464 49.9079 89.9708 50.1312 90.247 50.1304 cv
92.247 50.125 li
92.5231 50.1243 92.7464 49.8998 92.7456 49.6236 cv
92.7449 49.3475 92.5204 49.1243 92.2443 49.125 cv
cp
87.2443 49.1386 mo
85.2443 49.144 li
84.9681 49.1447 84.7449 49.3692 84.7456 49.6453 cv
84.7464 49.9215 84.9709 50.1447 85.247 50.144 cv
87.247 50.1385 li
87.5231 50.1378 87.7464 49.9133 87.7456 49.6372 cv
87.7449 49.3611 87.5204 49.1378 87.2443 49.1386 cv
cp
82.2443 49.1521 mo
80.2443 49.1575 li
79.9682 49.1583 79.7449 49.3827 79.7457 49.6589 cv
79.7464 49.935 79.9709 50.1583 80.247 50.1575 cv
82.247 50.1521 li
82.5232 50.1514 82.7464 49.9269 82.7457 49.6507 cv
82.7449 49.3746 82.5204 49.1514 82.2443 49.1521 cv
cp
77.2443 49.1657 mo
75.2443 49.1711 li
74.9682 49.1718 74.7449 49.3963 74.7457 49.6724 cv
74.7464 49.9486 74.9709 50.1718 75.247 50.1711 cv
77.247 50.1657 li
77.5232 50.1649 77.7464 49.9404 77.7457 49.6643 cv
77.7449 49.3882 77.5205 49.1649 77.2443 49.1657 cv
cp
72.2443 49.1792 mo
70.2444 49.1846 li
69.9682 49.1854 69.745 49.4098 69.7457 49.686 cv
69.7465 49.9621 69.9709 50.1854 70.2471 50.1846 cv
72.2471 50.1792 li
72.5232 50.1785 72.7464 49.954 72.7457 49.6779 cv
72.7449 49.4017 72.5205 49.1785 72.2443 49.1792 cv
cp
66.9753 49.3744 mo
66.6047 49.6494 li
65.3968 49.6494 li
65.1207 49.6494 64.8968 49.8733 64.8968 50.1494 cv
64.8968 50.4256 65.1207 50.6494 65.3968 50.6494 cv
66.9353 50.6494 li
67.5713 50.1773 li
67.793 50.0127 67.8394 49.6996 67.6748 49.4778 cv
67.5102 49.2561 67.197 49.2098 66.9753 49.3744 cv
cp
62.3968 49.6494 mo
60.3968 49.6494 li
60.1207 49.6494 59.8968 49.8733 59.8968 50.1494 cv
59.8968 50.4256 60.1207 50.6494 60.3968 50.6494 cv
62.3968 50.6494 li
62.673 50.6494 62.8968 50.4256 62.8968 50.1494 cv
62.8968 49.8733 62.673 49.6494 62.3968 49.6494 cv
cp
57.3968 49.6494 mo
55.3968 49.6494 li
55.1207 49.6494 54.8968 49.8733 54.8968 50.1494 cv
54.8968 50.4256 55.1207 50.6494 55.3968 50.6494 cv
57.3968 50.6494 li
57.673 50.6494 57.8968 50.4256 57.8968 50.1494 cv
57.8968 49.8733 57.673 49.6494 57.3968 49.6494 cv
cp
52.3968 49.6494 mo
50.3968 49.6494 li
50.1207 49.6494 49.8968 49.8733 49.8968 50.1494 cv
49.8968 50.4256 50.1207 50.6494 50.3968 50.6494 cv
52.3968 50.6494 li
52.673 50.6494 52.8968 50.4256 52.8968 50.1494 cv
52.8968 49.8733 52.673 49.6494 52.3968 49.6494 cv
cp
47.3968 49.6494 mo
45.3968 49.6494 li
45.1207 49.6494 44.8968 49.8733 44.8968 50.1494 cv
44.8968 50.4256 45.1207 50.6494 45.3968 50.6494 cv
47.3968 50.6494 li
47.673 50.6494 47.8968 50.4256 47.8968 50.1494 cv
47.8968 49.8733 47.673 49.6494 47.3968 49.6494 cv
cp
42.3968 49.6494 mo
40.3968 49.6494 li
40.1207 49.6494 39.8968 49.8733 39.8968 50.1494 cv
39.8968 50.4256 40.1207 50.6494 40.3968 50.6494 cv
42.3968 50.6494 li
42.673 50.6494 42.8968 50.4256 42.8968 50.1494 cv
42.8968 49.8733 42.673 49.6494 42.3968 49.6494 cv
cp
37.3968 49.6494 mo
35.3968 49.6494 li
35.1207 49.6494 34.8968 49.8733 34.8968 50.1494 cv
34.8968 50.4256 35.1207 50.6494 35.3968 50.6494 cv
37.3968 50.6494 li
37.673 50.6494 37.8968 50.4256 37.8968 50.1494 cv
37.8968 49.8733 37.673 49.6494 37.3968 49.6494 cv
cp
32.3968 49.6494 mo
31.5107 49.6494 li
31.2346 49.6494 31.0107 49.8733 31.0107 50.1494 cv
31.0107 50.4256 31.2346 50.6494 31.5107 50.6494 cv
32.3968 50.6494 li
32.673 50.6494 32.8968 50.4256 32.8968 50.1494 cv
32.8968 49.8733 32.673 49.6494 32.3968 49.6494 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
