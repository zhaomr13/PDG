%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cr_eplus_frac_15b-1.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 10/27/15
%%BoundingBox: 0 0 568 387
%%HiResBoundingBox: 0 0 567.2500 386.2500
%%CropBox: 0 0 567.2500 386.2500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2015-10-27T12:14:15-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>176</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqh9Q1Gw02zkvb&#xA;+4jtbSEAyzysFRakKKk+JIAxVLr3zn5SsZDFd6xaQyiNJuDTJy9OUgI9AejFhQ++KpyCGAINQdwR&#xA;0pirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirGf&#xA;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&#xA;2UFeXI/u4JZFG/7RJqcVZJirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2015-10-27T12:14:15-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-10-27T12:14:15-07:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>SymbolMT</stFnt:fontName>
                  <stFnt:fontFamily>SymbolMT</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=78 M=0 Y=100 K=0 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>77.926292</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118A6DD45D8E3DF958</stEvt:instanceID>
                  <stEvt:when>2015-10-27T12:14:15-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:F77F1174072068118A6DD45D8E3DF958</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068118A6DD45D8E3DF958</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F1174072068118A6DD45D8E3DF958</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -386.25 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 386.25 li
567.25 386.25 li
567.25 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.125 386.125 mo
.125 .125 li
567.125 .125 li
567.125 386.125 li
.125 386.125 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
.125 386.125 mo
.125 .125 li
567.125 .125 li
567.125 386.125 li
.125 386.125 li
cp
@
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
ef
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
@
.75 lw
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
0 0 0 1 cmyk
@
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
0 0 0 0 cmyk
ef
.25 lw
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
@
.75 lw
56.875 347.625 mo
510.375 347.625 li
56.875 347.625 mo
56.875 38.625 li
510.375 38.625 li
510.375 347.625 li
56.875 347.625 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Helvetica def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 69 /E putdup 71 /G putdup 86 /V putdup 101 /e putdup 103 /g putdup 110 /n putdup 114 /r putdup 121 /y putdef/FontBBox {-951 -481 1446 1122} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E648A7CA97DB1343CA> |-/space <1C60D8A8C9B854D00D> |-/parenleft <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD238F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-/parenright <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB5365991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-/E <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29F8D56A4237858E054C3198877A> |-/G <1C60D8A8C9B6FF86FAE761919412E75DCB56A17E0B647886E974BE0CD2DDC55247C89172C0F24B317CED95A1845F91927547B6F787BE4A81523EC6B90B7AF23F6F8A8BDDC51D0AA285D7E086AD8E028BD7D16A89F17742D556071D7D56166C6C8A71E0DFC3DA3B4DBE27EC4E6BE207A1EAF47A71BE409951D1C5060119CDD071AF7E9076F56846B6D62E52B2CB6390635FC230> |-/V <1C60D8A8C9B64EDFA60949676B75C625C6948873966B83A549B84A6BD5D6EE9C83058CE085EB61> |-/e <1C60D8A8C9B7EF322BB83B593C4F5531F1493EEBEAC6F4C92C25FF10F1FB8EC7E530E4B1F1C9E51F31B44D59539AB4135F310FAB43C5A16AA1F4EA07D67BBB916AB355913EB7D45F3AC7C9CF1FD32728FCA1A2D5BBD257CEF831AE751904AD7F4FBE21E10F3A844E74CF6B850E894017941E45AE6BCDA168BF4979345C67DB13F0C5FE9888EB731B0A06A8D5D1475F60C11332FBE633540E50C86671A26FD83CD870BB68F7A9> |-/g <1C60D8A8C9B7EF322B9E33783F120324D4831FD54687FCF0A3239094C0D4E3AAB20B4037430546FA4664C0C2EC6F9AF25AB8C7F18077B54094AD8EBB679EA5C6D7AFD732ED61A8DCEA904021433763160B264DB52A614A19F2765FBBC5798DAD5FE93A7CA6F9AD05E8ADF7528A45B919107B69D8844684194FE7F92E944890ACD166034B8B64BAE18E8E65CE4B5414E043D7BFC474CE1F5EA604A5C9DC3A7BA914202197CB4B05F919B47B1EB5B22C18D76DC248F3694EA79BFDDDCC0F068EB1529F2B8631C6> |-/n <1C60D8A8C9B7EF3217E3BC2FA8BE5FFDDE7BA6B2BB97B82CAF2D20211744A627BCE3171C7124085EFB87C01551538DC74ADD76A4A469E736F37382A8E68FCF64FCF52E65C49BB3C47B4136748A05BC6A02EABE080CF030B375C809CD67343FEE2448D6> |-/r <1C60D8A8C9B81F2C037408F8BF0E381AE4C9649BA754678B3C9CB9B6F5985C2C3DD85532C988309B457CF86E09A953B63981C0C686B55A9B6F57C7F684C3CFA5497AE68C179CE338521D1494441800> |-/y <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F53071656420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOUHVU+Helvetica /Helvetica findfont ct_VMDictPut/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 14{/.notdef}rp /e /.notdef /g 6{/.notdef}rp /n 3{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf435.905 377.166 mo(Energy \(GeV\))[8.14941 6.79492 6.7959 4.06836 6.79492 6.10938 3.39453 4.06934 9.50391 6.79492 8.14941 0 ]xsh56.875 338.125 mo
56.875 347.625 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907C7468090579C66DE0263BFE> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 19{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 14{/.notdef}rp /e /.notdef /g 6{/.notdef}rp /n 3{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf53.5615 364.992 mo(1)sh224.875 338.125 mo
224.875 347.625 li
217.125 342.875 mo
217.125 347.625 li
208.625 342.875 mo
208.625 347.625 li
198.875 342.875 mo
198.875 347.625 li
187.625 342.875 mo
187.625 347.625 li
174.375 342.875 mo
174.375 347.625 li
157.875 342.875 mo
157.875 347.625 li
136.875 342.875 mo
136.875 347.625 li
107.375 342.875 mo
107.375 347.625 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B0E3B0C4781A3901> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 19{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 14{/.notdef}rp /e /.notdef /g 6{/.notdef}rp /n 3{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf217.866 364.992 mo(10)[6.79541 0 ]xsh392.875 338.125 mo
392.875 347.625 li
385.125 342.875 mo
385.125 347.625 li
376.625 342.875 mo
376.625 347.625 li
366.875 342.875 mo
366.875 347.625 li
355.625 342.875 mo
355.625 347.625 li
342.375 342.875 mo
342.375 347.625 li
326.125 342.875 mo
326.125 347.625 li
305.125 342.875 mo
305.125 347.625 li
275.375 342.875 mo
275.375 347.625 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BDC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A4357093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290FB46DD6A2918F4C2C2BDEECA159D78> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 18{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 14{/.notdef}rp /e /.notdef /g 6{/.notdef}rp /n 3{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [8.14552 0 0 -8.14552 0 0 ]msf396.812 359.244 mo(2)shDOUHVU+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf383.78 364.947 mo(10)[6.79492 0 ]xsh56.875 347.625 mo
56.875 38.625 li
510.375 43.375 mo
510.375 38.625 li
494.125 43.375 mo
494.125 38.625 li
473.125 43.375 mo
473.125 38.625 li
443.375 43.375 mo
443.375 38.625 li
392.875 47.875 mo
392.875 38.625 li
385.125 43.375 mo
385.125 38.625 li
376.625 43.375 mo
376.625 38.625 li
366.875 43.375 mo
366.875 38.625 li
355.625 43.375 mo
355.625 38.625 li
342.375 43.375 mo
342.375 38.625 li
326.125 43.375 mo
326.125 38.625 li
305.125 43.375 mo
305.125 38.625 li
275.375 43.375 mo
275.375 38.625 li
224.875 47.875 mo
224.875 38.625 li
217.125 43.375 mo
217.125 38.625 li
208.625 43.375 mo
208.625 38.625 li
198.875 43.375 mo
198.875 38.625 li
187.625 43.375 mo
187.625 38.625 li
174.375 43.375 mo
174.375 38.625 li
157.875 43.375 mo
157.875 38.625 li
136.875 43.375 mo
136.875 38.625 li
107.375 43.375 mo
107.375 38.625 li
56.875 47.875 mo
56.875 38.625 li
56.875 38.625 mo
510.375 38.625 li
510.375 342.875 mo
510.375 347.625 li
494.125 342.875 mo
494.125 347.625 li
473.125 342.875 mo
473.125 347.625 li
443.375 342.875 mo
443.375 347.625 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7F374893581E76C8776BE7C21604E85D269579E2DADA7A812D7979B6797287709894A7BA08D02> |-/hyphen <1C60D8A8C9B81F2C797F8B2BDB0639171EDAAB309BF7> |-/slash <1C60D8A8C9B854D08FD42DCC2A61292225078A8A43> |-/F <1C60D8A8C9B7D8BE0123FD0A136BA0F480FD4287FFCF97986718886432AF2C7EB6A3F35B> |-/P <1C60D8A8C9B64EDFE336D280AD0769103D1650D4946BC89E21A88DEC51613F3C79BEE823BD11DE4DA6DB5B89497F0D2976B3DEFC67AF28487C3BB530BC49F1D09A090BACE6D7137C10758B70768799060F36DCE81F308AA18889AF5053DE> |-/a <1C60D8A8C9B7EF322B0D17E770BC81022852C5639214CBF49D6EF8BAFB0188062A6BB41F6EB58ADD15E3D1B86AD22624C804FD4A4EBA73D78F7E503599DB65A7EB53D74C4A9A536152BF7A6B13AB96FF2727313FED0263E50A950746CED5AD5E7764E6E353716A8BE8970281B41D9429E56957BD1FCC84205F76AF78E807D18CA1CFFE724AECDDD2D385233E91066015AC7E0906FE359E28D96D9E0BD326B9E6C7D3E486FD1864E3B47A611B1D6D0D080020321300485E65AE9E4C12443E21865F474D46CD791839F25C8FD0A80215E3D2C3A5928427942DF3859AEF6E9035C909FC75082E8FF246F375DDB90EAC248C9121707FE869E161502F320A27113504> |-/c <1C60D8A8C9B7A73DB9BB4BD7623FA1F3C03F832EDB3EBDEEADF30D53894CA8D0E43AB471E7BA022BFFD675D506AE0402072D4B89708C39F4DE4224D2E08E345C99AE382D5A27CCF2E9E7F36B9FF185D5B1582E55EEA79434D321A3126C806AF846740E1C2FF9A41681247A023D851231C058548F93E1F768FE103B973ACF15C379D13F> |-/i <1C60D8A8C9B88C084EE8A68C7FA2A58C433876A9B19799899FEF7A13> |-/o <1C60D8A8C9B7EF322BB7315D499F0FAA57DF741D86CA9D8DB7E5AD83A05FD148F53EC24E4E6BF5C292C0FC171599978D99E35AB7CAFB8CB65593939725D520CE4A30CDA834D29EB92A082721C79AE18875772ECDD437AD2148D76D23F045CDA1E61619294E456095F14AB8D580008870DAABB6481A0C5B1656CACCDE79F2741F9BB15B> |-/s <1C60D8A8C9B7A73DE557A2AA450BB57EE39D611FDE79056DA153DEDE8E0D2C9D756143DA5E614060C362E0813E35369DA2F002330267D2CFA81D3D9AA172C91A8B8E19BB92CE3CFBA62200E9E8175CCCB3A5FA559ECF71DD7F2B47B117C69AC3637EDAE62020C9DAFDDB718C27C76EF62794CF8B187D103B05AC07655F04A6D9D5181CB287F032D98B2512B2A9B281D13745308AC05B350DA95BA0BE14F12630B5B2A718215DC0DE5A544FA267BEF8FD5CF5292808F195D31A5EEC3ADC63> |-/t <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB06537F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD0161CF> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 43 /plus putdup 45 /hyphen putdup 47 /slash putdup 70 /F putdup 80 /P putdup 97 /a putdup 99 /c putdup 105 /i putdup 111 /o putdup 115 /s putdup 116 /t putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /.notdef /slash /zero /one /two 18{/.notdef}rp /E /F /G 8{/.notdef}rp /P 5{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 45.6504 mo(\)\))[-4.06885 0 ]yshDOUHVU+Helvetica*1 [0 -8.14552 -8.14552 0 0 0 ]msf14.7803 48.0801 mo(-)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 58.6738 mo(\(e)[-4.06885 0 ]ysh%ADOBeginSubsetFont: SymbolMT Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /SymbolMT def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 70 /F putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942FF37E122B69D17C7AA691A603207160811AFB791> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/DOUHVV+SymbolMT /SymbolMT findfont ct_VMDictPut/DOUHVV+SymbolMT*1 [70{/.notdef}rp /F 185{/.notdef}rp]DOUHVV+SymbolMT nfDOUHVV+SymbolMT*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 68.4551 mo(F)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 79.8516 mo(\)+)[-4.06885 0 ]yshDOUHVU+Helvetica*1 [0 -8.14552 -8.14552 0 0 0 ]msf15.6006 84.7334 mo(+)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 95.3359 mo(\(e)[-4.06885 0 ]yshDOUHVV+SymbolMT*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 105.111 mo(F)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 116.51 mo(\)/\()[-4.06885 -3.39453 0 ]yshDOUHVU+Helvetica*1 [0 -8.14552 -8.14552 0 0 0 ]msf15.6006 121.393 mo(+)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 131.986 mo(\(e)[-4.06885 0 ]yshDOUHVV+SymbolMT*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 141.76 mo(F)shDOUHVU+Helvetica*1 [0 -12.2183 -12.2183 0 0 0 ]msf21.3066 237.885 mo(Positron Fraction )[-8.14941 -6.79492 -6.10938 -2.71484 -3.39453 -4.06836 -6.7959 -6.79492 -3.39453 -7.46338 -4.06885 -6.79541 -6.10889 -3.39453 -2.71484 -6.79492 -6.79541 0 ]ysh70.375 38.625 mo
56.875 38.625 li
70.375 38.625 mo
56.875 38.625 li
63.625 50.875 mo
56.875 50.875 li
63.625 63.375 mo
56.875 63.375 li
63.625 75.625 mo
56.875 75.625 li
63.625 88.125 mo
56.875 88.125 li
70.375 100.375 mo
56.875 100.375 li
63.625 112.875 mo
56.875 112.875 li
63.625 125.125 mo
56.875 125.125 li
63.625 137.375 mo
56.875 137.375 li
63.625 149.875 mo
56.875 149.875 li
70.375 162.125 mo
56.875 162.125 li
63.625 174.625 mo
56.875 174.625 li
63.625 186.875 mo
56.875 186.875 li
63.625 199.375 mo
56.875 199.375 li
63.625 211.625 mo
56.875 211.625 li
70.375 223.875 mo
56.875 223.875 li
63.625 236.375 mo
56.875 236.375 li
63.625 248.625 mo
56.875 248.625 li
63.625 261.125 mo
56.875 261.125 li
63.625 273.375 mo
56.875 273.375 li
70.375 285.625 mo
56.875 285.625 li
63.625 298.125 mo
56.875 298.125 li
63.625 310.375 mo
56.875 310.375 li
63.625 322.875 mo
56.875 322.875 li
63.625 335.125 mo
56.875 335.125 li
70.375 347.625 mo
56.875 347.625 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B854D0E3687C43D46768E11610> |-/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 46 /period putdup 53 /five putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two 2{/.notdef}rp /five 15{/.notdef}rp /E /F /G 8{/.notdef}rp /P 5{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [12.2183 0 0 -12.2183 0 0 ]msf47.377 351.914 mo(0)sh30.2646 290.002 mo(0.0)sh47.2495 290.002 mo(5)sh39.2178 228.104 mo(0.)[6.79541 0 ]xsh49.4053 228.104 mo(1)sh30.2646 167.018 mo(0.1)sh47.2495 167.018 mo(5)sh36.7803 105.104 mo(0.)[6.79541 0 ]xsh46.9678 105.104 mo(2)sh30.2646 43.1973 mo(0.2)sh47.2495 43.1973 mo(5)sh496.875 38.625 mo
510.375 38.625 li
496.875 38.625 mo
510.375 38.625 li
503.625 50.875 mo
510.375 50.875 li
503.625 63.375 mo
510.375 63.375 li
503.625 75.625 mo
510.375 75.625 li
503.625 88.125 mo
510.375 88.125 li
496.875 100.375 mo
510.375 100.375 li
503.625 112.875 mo
510.375 112.875 li
503.625 125.125 mo
510.375 125.125 li
503.625 137.375 mo
510.375 137.375 li
503.625 149.875 mo
510.375 149.875 li
496.875 162.125 mo
510.375 162.125 li
503.625 174.625 mo
510.375 174.625 li
503.625 186.875 mo
510.375 186.875 li
503.625 199.375 mo
510.375 199.375 li
503.625 211.625 mo
510.375 211.625 li
496.875 223.875 mo
510.375 223.875 li
503.625 236.375 mo
510.375 236.375 li
503.625 248.625 mo
510.375 248.625 li
503.625 261.125 mo
510.375 261.125 li
503.625 273.375 mo
510.375 273.375 li
496.875 285.625 mo
510.375 285.625 li
503.625 298.125 mo
510.375 298.125 li
503.625 310.375 mo
510.375 310.375 li
503.625 322.875 mo
510.375 322.875 li
503.625 335.125 mo
510.375 335.125 li
496.875 347.625 mo
510.375 347.625 li
510.375 347.625 mo
510.375 38.625 li
@
1.5 lw
443.375 215.375 mo
473.125 215.375 li
456.125 197.125 mo
458.375 193.125 li
460.625 197.125 li
458.375 215.375 mo
458.375 193.125 li
.743191 .712459 0 0 cmyk
@
2 lw
63.125 174.625 mo
76.625 193.125 li
89.875 209.375 li
103.125 223.375 li
116.375 235.375 li
129.875 245.625 li
143.125 255.125 li
156.375 264.125 li
169.625 271.875 li
182.875 279.125 li
196.375 285.625 li
209.625 291.125 li
222.875 295.625 li
236.125 298.625 li
249.625 301.625 li
262.875 304.125 li
276.125 306.625 li
289.375 309.125 li
302.875 311.375 li
316.125 313.625 li
329.375 315.625 li
342.625 317.625 li
355.875 319.375 li
369.375 321.375 li
382.625 322.875 li
395.875 324.625 li
409.125 326.125 li
422.625 327.875 li
435.875 329.375 li
449.125 330.875 li
462.375 332.125 li
475.625 333.625 li
489.125 335.125 li
502.375 336.625 li
510.375 337.375 li
56.875 164.875 mo
63.125 174.625 li
0 0 0 1 cmyk
@
60.875 41.625 mo
61.625 45.875 li
62.625 50.125 li
63.375 54.375 li
64.375 58.625 li
65.125 62.875 li
65.875 66.875 li
66.875 70.875 li
67.625 74.875 li
68.625 78.625 li
69.375 82.625 li
70.125 86.375 li
71.125 90.125 li
71.875 93.625 li
72.875 97.375 li
73.625 100.875 li
74.375 104.375 li
75.375 107.625 li
76.125 111.125 li
77.125 114.375 li
77.875 117.625 li
78.625 120.875 li
79.625 123.875 li
80.375 127.125 li
81.375 130.125 li
82.125 133.125 li
82.875 135.875 li
83.875 138.875 li
84.625 141.625 li
85.625 144.375 li
86.375 147.125 li
87.125 149.875 li
88.125 152.375 li
88.875 154.875 li
89.875 157.375 li
90.625 159.875 li
91.375 162.375 li
92.375 164.625 li
93.125 167.125 li
94.125 169.375 li
94.875 171.625 li
95.625 173.625 li
96.625 175.875 li
97.375 177.875 li
98.375 180.125 li
99.125 182.125 li
99.875 184.125 li
100.875 185.875 li
101.625 187.875 li
102.625 189.625 li
103.375 191.625 li
104.125 193.375 li
105.125 195.125 li
105.875 196.875 li
106.875 198.625 li
107.625 200.125 li
108.375 201.875 li
109.375 203.375 li
110.125 204.875 li
111.125 206.375 li
111.875 207.875 li
112.625 209.375 li
113.625 210.875 li
114.375 212.125 li
115.375 213.625 li
116.125 214.875 li
116.875 216.375 li
117.875 217.625 li
118.625 218.875 li
119.625 220.125 li
120.375 221.375 li
121.125 222.375 li
122.125 223.625 li
122.875 224.875 li
123.875 225.875 li
124.625 227.125 li
125.375 228.125 li
126.375 229.375 li
127.125 230.375 li
128.125 231.375 li
128.875 232.375 li
129.625 233.375 li
130.625 234.375 li
131.375 235.375 li
132.375 236.375 li
133.125 237.375 li
133.875 238.375 li
134.875 239.125 li
135.625 240.125 li
136.625 241.125 li
137.375 241.875 li
138.125 242.875 li
139.125 243.625 li
139.875 244.625 li
140.875 245.375 li
141.625 246.125 li
142.375 246.875 li
143.375 247.625 li
144.125 248.625 li
145.125 249.375 li
145.875 250.125 li
146.625 250.875 li
147.625 251.625 li
148.375 252.125 li
149.375 252.875 li
150.125 253.625 li
150.875 254.375 li
151.875 254.875 li
152.625 255.625 li
153.625 256.125 li
154.375 256.875 li
155.125 257.375 li
156.125 258.125 li
156.875 258.625 li
157.625 259.125 li
158.625 259.875 li
159.375 260.375 li
160.375 260.875 li
161.125 261.375 li
161.875 261.875 li
162.875 262.375 li
163.625 262.875 li
164.625 263.375 li
165.375 263.875 li
166.125 264.375 li
167.125 264.625 li
167.875 265.125 li
168.875 265.625 li
169.625 265.875 li
170.375 266.375 li
171.375 266.875 li
172.125 267.125 li
173.125 267.625 li
173.875 267.875 li
174.625 268.125 li
175.625 268.625 li
176.375 268.875 li
177.375 269.125 li
178.125 269.625 li
178.875 269.875 li
179.875 270.125 li
180.625 270.375 li
181.625 270.625 li
182.375 270.875 li
183.125 271.125 li
184.125 271.375 li
184.875 271.625 li
185.875 271.875 li
186.625 272.125 li
187.375 272.375 li
188.375 272.375 li
189.125 272.625 li
190.125 272.875 li
190.875 273.125 li
191.625 273.125 li
192.625 273.375 li
193.375 273.625 li
194.125 273.625 li
195.125 273.875 li
195.875 274.125 li
196.875 274.125 li
197.625 274.375 li
198.375 274.375 li
199.375 274.625 li
200.125 274.625 li
201.125 274.875 li
202.625 274.875 li
203.625 275.125 li
204.375 275.125 li
205.375 275.375 li
206.875 275.375 li
207.875 275.625 li
210.375 275.625 li
211.125 275.875 li
213.875 275.875 li
214.625 276.125 li
219.625 276.125 li
220.625 276.375 li
240.125 276.375 li
240.875 276.125 li
245.875 276.125 li
246.875 275.875 li
250.125 275.875 li
251.125 275.625 li
252.875 275.625 li
253.625 275.375 li
255.375 275.375 li
256.125 275.125 li
257.875 275.125 li
258.625 274.875 li
259.625 274.875 li
260.375 274.625 li
261.375 274.625 li
262.125 274.375 li
262.875 274.375 li
263.875 274.125 li
264.625 274.125 li
265.625 273.875 li
266.375 273.875 li
267.125 273.625 li
268.125 273.625 li
268.875 273.375 li
269.625 273.125 li
270.625 273.125 li
271.375 272.875 li
272.375 272.625 li
273.125 272.625 li
273.875 272.375 li
274.875 272.125 li
275.625 271.875 li
276.625 271.875 li
277.375 271.625 li
278.125 271.375 li
279.125 271.125 li
279.875 271.125 li
280.875 270.875 li
281.625 270.625 li
282.375 270.375 li
283.375 270.125 li
284.125 269.875 li
285.125 269.625 li
285.875 269.375 li
286.625 269.125 li
287.625 268.875 li
288.375 268.625 li
289.125 268.375 li
290.125 268.125 li
290.875 267.875 li
291.875 267.625 li
292.625 267.375 li
293.375 267.125 li
294.375 266.875 li
295.125 266.625 li
296.125 266.125 li
296.875 265.875 li
297.625 265.625 li
298.625 265.375 li
299.375 265.125 li
300.375 264.625 li
301.125 264.375 li
301.875 264.125 li
302.875 263.625 li
303.625 263.375 li
304.625 263.125 li
305.375 262.625 li
306.125 262.375 li
307.125 261.875 li
307.875 261.625 li
308.625 261.375 li
309.625 260.875 li
310.375 260.375 li
311.375 260.125 li
312.125 259.625 li
312.875 259.375 li
313.875 258.875 li
314.625 258.625 li
315.625 258.125 li
316.375 257.625 li
317.125 257.125 li
318.125 256.875 li
318.875 256.375 li
319.875 255.875 li
320.625 255.375 li
321.375 254.875 li
322.375 254.625 li
323.125 254.125 li
323.875 253.625 li
324.875 253.125 li
325.625 252.625 li
326.625 252.125 li
327.375 251.625 li
328.125 251.125 li
329.125 250.625 li
329.875 250.125 li
330.875 249.375 li
331.625 248.875 li
332.375 248.375 li
333.375 247.875 li
334.125 247.375 li
335.125 246.625 li
335.875 246.125 li
336.625 245.625 li
337.625 245.125 li
338.375 244.375 li
339.375 243.875 li
340.125 243.125 li
340.875 242.625 li
341.875 242.125 li
342.625 241.375 li
343.375 240.875 li
344.375 240.125 li
345.125 239.375 li
346.125 238.875 li
346.875 238.125 li
347.625 237.625 li
348.625 236.875 li
349.375 236.125 li
350.375 235.625 li
351.125 234.875 li
351.875 234.125 li
352.875 233.375 li
353.625 232.625 li
354.625 231.875 li
355.375 231.375 li
356.125 230.625 li
357.125 229.875 li
357.875 229.125 li
358.625 228.375 li
359.625 227.625 li
360.375 226.875 li
361.375 226.125 li
362.125 225.375 li
362.875 224.625 li
363.875 223.625 li
364.625 222.875 li
365.625 222.125 li
366.375 221.375 li
367.125 220.625 li
368.125 219.625 li
368.875 218.875 li
369.875 218.125 li
370.625 217.125 li
371.375 216.375 li
372.375 215.625 li
373.125 214.625 li
373.875 213.875 li
374.875 212.875 li
375.625 212.125 li
376.625 211.125 li
377.375 210.375 li
378.125 209.375 li
379.125 208.625 li
379.875 207.625 li
380.875 206.625 li
381.625 205.875 li
382.375 204.875 li
383.375 204.125 li
384.125 203.125 li
385.125 202.125 li
385.875 201.125 li
386.625 200.375 li
387.625 199.375 li
388.375 198.375 li
389.375 197.375 li
390.125 196.625 li
390.875 195.625 li
391.875 194.625 li
392.625 193.625 li
393.375 192.625 li
394.375 191.625 li
395.125 190.625 li
396.125 189.875 li
396.875 188.875 li
397.625 187.875 li
398.625 186.875 li
399.375 185.875 li
400.375 184.875 li
401.125 183.875 li
401.875 182.875 li
402.875 181.875 li
403.625 180.875 li
404.625 179.875 li
405.375 178.875 li
406.125 177.875 li
407.125 176.875 li
407.875 175.625 li
408.625 174.625 li
409.625 173.625 li
410.375 172.625 li
411.375 171.625 li
412.125 170.625 li
412.875 169.625 li
413.875 168.625 li
414.625 167.625 li
415.625 166.375 li
416.375 165.375 li
417.125 164.375 li
418.125 163.375 li
418.875 162.375 li
419.875 161.375 li
420.625 160.375 li
421.375 159.125 li
422.375 158.125 li
423.125 157.125 li
423.875 156.125 li
424.875 155.125 li
425.625 154.125 li
426.625 153.125 li
427.375 152.125 li
428.125 151.125 li
429.125 149.875 li
429.875 148.875 li
430.875 147.875 li
431.625 146.875 li
432.375 145.875 li
433.375 144.875 li
434.125 143.875 li
435.125 142.875 li
435.875 141.875 li
436.625 140.875 li
437.625 140.125 li
438.375 139.125 li
439.375 138.125 li
440.125 137.125 li
440.875 136.125 li
441.875 135.125 li
442.625 134.125 li
443.375 133.375 li
444.375 132.375 li
445.125 131.375 li
446.125 130.625 li
446.875 129.625 li
447.625 128.625 li
448.625 127.875 li
449.375 126.875 li
450.375 126.125 li
451.125 125.125 li
451.875 124.375 li
452.875 123.625 li
453.625 122.625 li
454.625 121.875 li
455.375 121.125 li
456.125 120.375 li
457.125 119.375 li
457.875 118.625 li
458.875 117.875 li
459.625 117.125 li
460.375 116.375 li
461.375 115.875 li
462.125 115.125 li
462.875 114.375 li
463.875 113.625 li
464.625 113.125 li
465.625 112.375 li
466.375 111.625 li
467.125 111.125 li
468.125 110.625 li
468.875 109.875 li
469.875 109.375 li
470.625 108.875 li
471.375 108.375 li
472.375 107.625 li
473.125 107.125 li
474.125 106.625 li
474.875 106.375 li
475.625 105.875 li
476.625 105.375 li
477.375 104.875 li
478.375 104.625 li
479.125 104.125 li
479.875 103.875 li
480.875 103.375 li
481.625 103.125 li
482.375 102.875 li
483.375 102.625 li
484.125 102.375 li
485.125 102.125 li
485.875 101.875 li
486.625 101.625 li
487.625 101.375 li
488.375 101.375 li
489.375 101.125 li
490.125 100.875 li
496.125 100.875 li
496.875 101.125 li
497.875 101.125 li
498.625 101.375 li
499.375 101.625 li
500.375 101.875 li
501.125 102.125 li
502.125 102.375 li
502.875 102.625 li
503.625 103.125 li
504.625 103.375 li
505.375 103.875 li
506.125 104.375 li
507.125 104.875 li
507.875 105.375 li
508.875 106.125 li
509.625 106.625 li
510.375 107.375 li
60.375 38.625 mo
60.875 41.625 li
.779263 0 1 0 cmyk
@
56.875 113.875 mo
57.625 116.125 li
58.375 118.375 li
59.125 120.375 li
60.125 122.375 li
60.875 124.625 li
61.625 126.625 li
62.375 128.625 li
63.125 130.875 li
63.875 132.875 li
64.625 134.875 li
65.625 136.875 li
66.375 138.875 li
67.125 140.875 li
67.875 142.875 li
68.625 144.875 li
69.375 146.875 li
70.375 148.875 li
71.125 150.625 li
71.875 152.625 li
72.625 154.625 li
73.375 156.375 li
74.125 158.375 li
74.875 160.125 li
75.875 162.125 li
76.625 163.875 li
77.375 165.625 li
78.125 167.375 li
78.875 169.375 li
79.625 171.125 li
80.375 172.875 li
81.375 174.625 li
82.125 176.375 li
82.875 177.875 li
83.625 179.625 li
84.375 181.375 li
85.125 183.125 li
85.875 184.625 li
86.875 186.375 li
87.625 187.875 li
88.375 189.625 li
89.125 191.125 li
89.875 192.875 li
90.625 194.375 li
91.625 195.875 li
92.375 197.375 li
93.125 198.875 li
93.875 200.375 li
94.625 201.875 li
95.375 203.375 li
96.125 204.875 li
97.125 206.125 li
97.875 207.625 li
98.625 209.125 li
99.375 210.375 li
100.125 211.875 li
100.875 213.125 li
101.625 214.375 li
102.625 215.875 li
103.375 217.125 li
104.125 218.375 li
104.875 219.625 li
105.625 220.875 li
106.375 222.125 li
107.375 223.375 li
108.125 224.625 li
108.875 225.625 li
109.625 226.875 li
110.375 228.125 li
111.125 229.125 li
111.875 230.375 li
112.875 231.375 li
113.625 232.375 li
114.375 233.625 li
115.125 234.625 li
115.875 235.625 li
116.625 236.625 li
117.375 237.625 li
118.375 238.625 li
119.125 239.625 li
119.875 240.625 li
120.625 241.625 li
121.375 242.625 li
122.125 243.375 li
123.125 244.375 li
123.875 245.375 li
124.625 246.125 li
125.375 247.125 li
126.125 247.875 li
126.875 248.625 li
127.625 249.625 li
128.625 250.375 li
129.375 251.125 li
130.125 251.875 li
130.875 252.625 li
131.625 253.375 li
132.375 254.125 li
133.125 254.875 li
134.125 255.625 li
134.875 256.375 li
135.625 257.125 li
136.375 257.625 li
137.125 258.375 li
137.875 259.125 li
138.875 259.625 li
139.625 260.375 li
140.375 260.875 li
141.125 261.375 li
141.875 262.125 li
142.625 262.625 li
143.375 263.125 li
144.375 263.625 li
145.125 264.375 li
145.875 264.875 li
146.625 265.375 li
147.375 265.875 li
148.125 266.375 li
149.125 266.875 li
149.875 267.375 li
150.625 267.625 li
151.375 268.125 li
152.125 268.625 li
152.875 269.125 li
153.625 269.375 li
154.625 269.875 li
155.375 270.125 li
156.125 270.625 li
156.875 270.875 li
157.625 271.375 li
158.375 271.625 li
159.375 272.125 li
160.125 272.375 li
160.875 272.625 li
161.625 272.875 li
162.375 273.375 li
163.125 273.625 li
163.875 273.875 li
164.875 274.125 li
165.625 274.375 li
166.375 274.625 li
167.125 274.875 li
167.875 275.125 li
168.625 275.375 li
169.625 275.625 li
170.375 275.875 li
171.125 275.875 li
171.875 276.125 li
172.625 276.375 li
173.375 276.625 li
174.125 276.625 li
175.125 276.875 li
175.875 277.125 li
176.625 277.125 li
177.375 277.375 li
178.125 277.375 li
178.875 277.625 li
179.875 277.625 li
180.625 277.875 li
181.375 277.875 li
182.125 278.125 li
183.625 278.125 li
184.375 278.375 li
186.125 278.375 li
186.875 278.625 li
190.125 278.625 li
190.875 278.875 li
208.875 278.875 li
209.625 278.625 li
213.625 278.625 li
214.375 278.375 li
216.875 278.375 li
217.625 278.125 li
219.875 278.125 li
220.875 277.875 li
223.125 277.875 li
223.875 277.625 li
225.625 277.625 li
226.375 277.375 li
227.875 277.375 li
228.625 277.125 li
230.375 277.125 li
231.125 276.875 li
232.625 276.875 li
233.375 276.625 li
234.125 276.625 li
234.875 276.375 li
235.875 276.375 li
236.625 276.125 li
238.125 276.125 li
238.875 275.875 li
239.625 275.875 li
240.625 275.625 li
241.375 275.625 li
242.125 275.375 li
242.875 275.375 li
243.625 275.125 li
244.375 275.125 li
245.125 274.875 li
246.125 274.625 li
246.875 274.625 li
247.625 274.375 li
248.375 274.375 li
249.125 274.125 li
249.875 274.125 li
250.875 273.875 li
251.625 273.625 li
252.375 273.625 li
253.125 273.375 li
253.875 273.125 li
254.625 273.125 li
255.625 272.875 li
256.375 272.625 li
257.125 272.625 li
257.875 272.375 li
258.625 272.125 li
259.375 272.125 li
260.125 271.875 li
261.125 271.625 li
261.875 271.375 li
262.625 271.375 li
263.375 271.125 li
264.125 270.875 li
264.875 270.625 li
265.875 270.375 li
266.625 270.375 li
267.375 270.125 li
268.125 269.875 li
268.875 269.625 li
269.625 269.375 li
270.625 269.125 li
271.375 268.875 li
272.125 268.875 li
272.875 268.625 li
273.625 268.375 li
274.375 268.125 li
275.125 267.875 li
276.125 267.625 li
276.875 267.375 li
277.625 267.125 li
278.375 266.875 li
279.125 266.625 li
279.875 266.375 li
280.875 266.125 li
281.625 265.875 li
282.375 265.625 li
283.125 265.375 li
283.875 265.125 li
284.625 264.875 li
285.625 264.625 li
286.375 264.375 li
287.125 263.875 li
287.875 263.625 li
288.625 263.375 li
289.375 263.125 li
290.125 262.875 li
291.125 262.625 li
291.875 262.375 li
292.625 261.875 li
293.375 261.625 li
294.125 261.375 li
294.875 261.125 li
295.875 260.625 li
296.625 260.375 li
297.375 260.125 li
298.125 259.875 li
298.875 259.375 li
299.625 259.125 li
300.625 258.875 li
301.375 258.375 li
302.125 258.125 li
302.875 257.875 li
303.625 257.375 li
304.375 257.125 li
305.125 256.875 li
306.125 256.375 li
306.875 256.125 li
307.625 255.625 li
308.375 255.375 li
309.125 255.125 li
309.875 254.625 li
310.875 254.375 li
311.625 253.875 li
312.375 253.625 li
313.125 253.125 li
313.875 252.875 li
314.625 252.375 li
315.625 252.125 li
316.375 251.625 li
317.125 251.125 li
317.875 250.875 li
318.625 250.375 li
319.375 250.125 li
320.125 249.625 li
321.125 249.125 li
321.875 248.875 li
322.625 248.375 li
323.375 247.875 li
324.125 247.625 li
324.875 247.125 li
325.875 246.625 li
326.625 246.375 li
327.375 245.875 li
328.125 245.375 li
328.875 244.875 li
329.625 244.625 li
330.625 244.125 li
331.375 243.625 li
332.125 243.125 li
332.875 242.625 li
333.625 242.375 li
334.375 241.875 li
335.125 241.375 li
336.125 240.875 li
336.875 240.375 li
337.625 239.875 li
338.375 239.375 li
339.125 239.125 li
339.875 238.625 li
340.875 238.125 li
341.625 237.625 li
342.375 237.125 li
343.125 236.625 li
343.875 236.125 li
344.625 235.625 li
345.625 235.125 li
346.375 234.625 li
347.125 234.125 li
347.875 233.625 li
348.625 233.125 li
349.375 232.625 li
350.125 231.875 li
351.125 231.375 li
351.875 230.875 li
352.625 230.375 li
353.375 229.875 li
354.125 229.375 li
354.875 228.875 li
355.875 228.375 li
356.625 227.625 li
357.375 227.125 li
358.125 226.625 li
358.875 226.125 li
359.625 225.625 li
360.625 224.875 li
361.375 224.375 li
362.125 223.875 li
362.875 223.125 li
363.625 222.625 li
364.375 222.125 li
365.125 221.625 li
366.125 220.875 li
366.875 220.375 li
367.625 219.875 li
368.375 219.125 li
369.125 218.625 li
369.875 217.875 li
370.875 217.375 li
371.625 216.875 li
372.375 216.125 li
373.125 215.625 li
373.875 214.875 li
374.625 214.375 li
375.625 213.625 li
376.375 213.125 li
377.125 212.375 li
377.875 211.875 li
378.625 211.125 li
379.375 210.625 li
380.375 209.875 li
381.125 209.375 li
381.875 208.625 li
382.625 208.125 li
383.375 207.375 li
384.125 206.625 li
384.875 206.125 li
385.875 205.375 li
386.625 204.875 li
387.375 204.125 li
388.125 203.375 li
388.875 202.875 li
389.625 202.125 li
390.625 201.375 li
391.375 200.625 li
392.125 200.125 li
392.875 199.375 li
393.625 198.625 li
394.375 198.125 li
395.375 197.375 li
396.125 196.625 li
396.875 195.875 li
397.625 195.125 li
398.375 194.625 li
399.125 193.875 li
399.875 193.125 li
400.875 192.375 li
401.625 191.625 li
402.375 190.875 li
403.125 190.375 li
403.875 189.625 li
404.625 188.875 li
405.625 188.125 li
406.375 187.375 li
407.125 186.625 li
407.875 185.875 li
408.625 185.125 li
409.375 184.375 li
410.375 183.625 li
411.125 182.875 li
411.875 182.125 li
412.625 181.375 li
413.375 180.625 li
414.125 179.875 li
414.875 179.125 li
415.875 178.375 li
416.625 177.625 li
417.375 176.875 li
418.125 176.125 li
418.875 175.375 li
419.625 174.625 li
420.625 173.875 li
421.375 172.875 li
422.125 172.125 li
422.875 171.375 li
423.625 170.625 li
424.375 169.875 li
425.375 169.125 li
426.125 168.375 li
426.875 167.375 li
427.625 166.625 li
428.375 165.875 li
429.125 165.125 li
429.875 164.375 li
430.875 163.625 li
431.625 162.625 li
432.375 161.875 li
433.125 161.125 li
433.875 160.375 li
434.625 159.375 li
435.625 158.625 li
436.375 157.875 li
437.125 157.125 li
437.875 156.125 li
438.625 155.375 li
439.375 154.625 li
440.375 153.875 li
441.125 152.875 li
441.875 152.125 li
442.625 151.375 li
443.375 150.375 li
444.125 149.625 li
445.125 148.875 li
445.875 147.875 li
446.625 147.125 li
447.375 146.375 li
448.125 145.375 li
448.875 144.625 li
449.625 143.875 li
450.625 142.875 li
451.375 142.125 li
452.125 141.375 li
452.875 140.375 li
453.625 139.625 li
454.375 138.625 li
455.375 137.875 li
456.125 137.125 li
456.875 136.125 li
457.625 135.375 li
458.375 134.375 li
459.125 133.625 li
460.125 132.875 li
460.875 131.875 li
461.625 131.125 li
462.375 130.125 li
463.125 129.375 li
463.875 128.375 li
464.625 127.625 li
465.625 126.625 li
466.375 125.875 li
467.125 125.125 li
467.875 124.125 li
468.625 123.375 li
469.375 122.375 li
470.375 121.625 li
471.125 120.625 li
471.875 119.875 li
472.625 118.875 li
473.375 118.125 li
474.125 117.125 li
475.125 116.375 li
475.875 115.625 li
476.625 114.625 li
477.375 113.875 li
478.125 112.875 li
478.875 112.125 li
479.625 111.125 li
480.625 110.375 li
481.375 109.375 li
482.125 108.625 li
482.875 107.625 li
483.625 106.875 li
484.375 106.125 li
485.375 105.125 li
486.125 104.375 li
486.875 103.375 li
487.625 102.625 li
488.375 101.625 li
489.125 100.875 li
490.125 99.8755 li
490.875 99.1255 li
491.625 98.3755 li
492.375 97.3755 li
493.125 96.6255 li
493.875 95.8755 li
494.625 94.8755 li
495.625 94.1255 li
496.375 93.1255 li
497.125 92.3755 li
497.875 91.6255 li
498.625 90.6255 li
499.375 89.8755 li
500.375 89.1255 li
501.125 88.1255 li
501.875 87.3755 li
502.625 86.6255 li
503.375 85.6255 li
504.125 84.8755 li
505.125 84.1255 li
505.875 83.1255 li
506.625 82.3755 li
507.375 81.6255 li
508.125 80.6255 li
508.875 79.8755 li
509.625 79.1255 li
510.375 78.3755 li
.883665 .769161 0 0 cmyk
@
56.875 153.375 mo
57.625 154.125 li
58.375 154.625 li
59.125 155.375 li
59.875 156.125 li
60.625 156.875 li
61.625 157.375 li
62.375 158.125 li
63.125 158.875 li
63.875 159.625 li
64.625 160.375 li
65.375 161.125 li
66.125 161.875 li
67.125 162.625 li
67.875 163.375 li
68.625 164.125 li
69.375 164.875 li
70.125 165.625 li
70.875 166.375 li
71.625 167.125 li
72.625 167.875 li
73.375 168.625 li
74.125 169.625 li
74.875 170.375 li
75.625 171.125 li
76.375 171.875 li
77.125 172.875 li
78.125 173.625 li
78.875 174.625 li
79.625 175.375 li
80.375 176.375 li
81.125 177.125 li
81.875 178.125 li
82.625 178.875 li
83.625 179.875 li
84.375 180.625 li
85.125 181.625 li
85.875 182.625 li
86.625 183.375 li
87.375 184.375 li
88.125 185.375 li
89.125 186.125 li
89.875 187.125 li
90.625 188.125 li
91.375 189.125 li
92.125 190.125 li
92.875 191.125 li
93.625 191.875 li
94.625 192.875 li
95.375 193.875 li
96.125 194.875 li
96.875 195.875 li
97.625 196.875 li
98.375 197.875 li
99.125 198.875 li
100.125 199.875 li
100.875 200.875 li
101.625 202.125 li
102.375 203.125 li
103.125 204.125 li
103.875 205.125 li
104.625 206.125 li
105.625 207.125 li
106.375 208.125 li
107.125 209.375 li
107.875 210.375 li
108.625 211.375 li
109.375 212.375 li
110.375 213.375 li
111.125 214.625 li
111.875 215.625 li
112.625 216.625 li
113.375 217.625 li
114.125 218.625 li
114.875 219.875 li
115.875 220.875 li
116.625 221.875 li
117.375 222.875 li
118.125 223.875 li
118.875 225.125 li
119.625 226.125 li
120.375 227.125 li
121.375 228.125 li
122.125 229.125 li
122.875 230.375 li
123.625 231.375 li
124.375 232.375 li
125.125 233.375 li
125.875 234.375 li
126.875 235.375 li
127.625 236.375 li
128.375 237.375 li
129.125 238.375 li
129.875 239.375 li
130.625 240.375 li
131.375 241.375 li
132.375 242.375 li
133.125 243.375 li
133.875 244.375 li
134.625 245.125 li
135.375 246.125 li
136.125 247.125 li
136.875 247.875 li
137.875 248.875 li
138.625 249.875 li
139.375 250.625 li
140.125 251.625 li
140.875 252.375 li
141.625 253.375 li
142.625 254.125 li
143.375 254.875 li
144.125 255.625 li
144.875 256.625 li
145.625 257.375 li
146.375 258.125 li
147.125 258.875 li
148.125 259.625 li
148.875 260.375 li
149.625 261.125 li
150.375 261.875 li
151.125 262.625 li
151.875 263.125 li
152.625 263.875 li
153.625 264.625 li
154.375 265.125 li
155.125 265.875 li
155.875 266.375 li
156.625 267.125 li
157.375 267.625 li
158.125 268.125 li
159.125 268.625 li
159.875 269.375 li
160.625 269.875 li
161.375 270.375 li
162.125 270.875 li
162.875 271.375 li
163.625 271.875 li
164.625 272.375 li
165.375 272.625 li
166.125 273.125 li
166.875 273.625 li
167.625 274.125 li
168.375 274.375 li
169.125 274.875 li
170.125 275.125 li
170.875 275.625 li
171.625 275.875 li
172.375 276.375 li
173.125 276.625 li
173.875 277.125 li
174.625 277.375 li
175.625 277.625 li
176.375 277.875 li
177.125 278.125 li
177.875 278.625 li
178.625 278.875 li
179.375 279.125 li
180.125 279.375 li
181.125 279.625 li
181.875 279.875 li
182.625 279.875 li
183.375 280.125 li
184.125 280.375 li
184.875 280.625 li
185.625 280.875 li
186.625 280.875 li
187.375 281.125 li
188.125 281.375 li
188.875 281.375 li
189.625 281.625 li
190.375 281.875 li
191.125 281.875 li
192.125 282.125 li
192.875 282.125 li
193.625 282.375 li
195.125 282.375 li
195.875 282.625 li
196.625 282.625 li
197.625 282.875 li
199.875 282.875 li
200.625 283.125 li
206.125 283.125 li
206.875 283.375 li
209.375 283.375 li
210.125 283.125 li
215.625 283.125 li
216.375 282.875 li
219.625 282.875 li
220.375 282.625 li
221.875 282.625 li
222.625 282.375 li
224.125 282.375 li
225.125 282.125 li
226.625 282.125 li
227.375 281.875 li
228.125 281.875 li
228.875 281.625 li
230.625 281.625 li
231.375 281.375 li
232.125 281.375 li
232.875 281.125 li
233.625 281.125 li
234.375 280.875 li
235.125 280.875 li
235.875 280.625 li
236.875 280.625 li
237.625 280.375 li
238.375 280.375 li
239.125 280.125 li
239.875 280.125 li
240.625 279.875 li
241.375 279.875 li
242.375 279.625 li
243.125 279.375 li
243.875 279.375 li
244.625 279.125 li
245.375 279.125 li
246.125 278.875 li
246.875 278.625 li
247.875 278.625 li
248.625 278.375 li
249.375 278.125 li
250.125 278.125 li
250.875 277.875 li
251.625 277.625 li
252.375 277.625 li
253.375 277.375 li
254.125 277.125 li
254.875 277.125 li
255.625 276.875 li
256.375 276.625 li
257.125 276.375 li
257.875 276.375 li
258.875 276.125 li
259.625 275.875 li
260.375 275.625 li
261.125 275.625 li
261.875 275.375 li
262.625 275.125 li
263.375 274.875 li
264.375 274.625 li
265.125 274.625 li
265.875 274.375 li
266.625 274.125 li
267.375 273.875 li
268.125 273.625 li
268.875 273.375 li
269.875 273.125 li
270.625 273.125 li
271.375 272.875 li
272.125 272.625 li
272.875 272.375 li
273.625 272.125 li
274.375 271.875 li
275.375 271.625 li
276.125 271.375 li
276.875 271.125 li
277.625 270.875 li
278.375 270.625 li
279.125 270.375 li
279.875 270.125 li
280.625 269.876 li
281.625 269.626 li
282.375 269.376 li
283.125 269.126 li
283.875 268.876 li
284.625 268.626 li
285.375 268.376 li
286.125 268.126 li
287.125 267.876 li
287.875 267.626 li
288.625 267.376 li
289.375 267.126 li
290.125 266.876 li
290.875 266.376 li
291.625 266.126 li
292.625 265.876 li
293.375 265.626 li
294.125 265.376 li
294.875 265.126 li
295.625 264.876 li
296.375 264.626 li
297.125 264.126 li
298.125 263.876 li
298.875 263.626 li
299.625 263.376 li
300.375 263.126 li
301.125 262.626 li
301.875 262.376 li
302.625 262.126 li
303.625 261.876 li
304.375 261.376 li
305.125 261.126 li
305.875 260.876 li
306.625 260.626 li
307.375 260.126 li
308.125 259.876 li
309.125 259.626 li
309.875 259.126 li
310.625 258.876 li
311.375 258.626 li
312.125 258.126 li
312.875 257.876 li
313.625 257.626 li
314.625 257.126 li
315.375 256.876 li
316.125 256.626 li
316.875 256.126 li
317.625 255.876 li
318.375 255.626 li
319.125 255.126 li
319.875 254.876 li
320.875 254.376 li
321.625 254.126 li
322.375 253.626 li
323.125 253.376 li
323.875 252.876 li
324.625 252.626 li
325.375 252.126 li
326.375 251.876 li
327.125 251.376 li
327.875 251.126 li
328.625 250.626 li
329.375 250.376 li
330.125 249.876 li
330.875 249.626 li
331.875 249.126 li
332.625 248.876 li
333.375 248.376 li
334.125 247.876 li
334.875 247.626 li
335.625 247.126 li
336.375 246.876 li
337.375 246.376 li
338.125 245.876 li
338.875 245.626 li
339.625 245.126 li
340.375 244.626 li
341.125 244.376 li
341.875 243.876 li
342.875 243.376 li
343.625 243.126 li
344.375 242.626 li
345.125 242.126 li
345.875 241.626 li
346.625 241.376 li
347.375 240.876 li
348.375 240.376 li
349.125 240.126 li
349.875 239.626 li
350.625 239.126 li
351.375 238.626 li
352.125 238.126 li
352.875 237.876 li
353.875 237.376 li
354.625 236.876 li
355.375 236.376 li
356.125 235.876 li
356.875 235.376 li
357.625 235.126 li
358.375 234.626 li
359.125 234.126 li
360.125 233.626 li
360.875 233.126 li
361.625 232.626 li
362.375 232.126 li
363.125 231.626 li
363.875 231.126 li
364.625 230.876 li
365.625 230.376 li
366.375 229.876 li
367.125 229.376 li
367.875 228.876 li
368.625 228.376 li
369.375 227.876 li
370.125 227.376 li
371.125 226.876 li
371.875 226.376 li
372.625 225.876 li
373.375 225.376 li
374.125 224.876 li
374.875 224.376 li
375.625 223.876 li
376.625 223.376 li
377.375 222.876 li
378.125 222.376 li
378.875 221.876 li
379.625 221.376 li
380.375 220.876 li
381.125 220.376 li
382.125 219.626 li
382.875 219.126 li
383.625 218.626 li
384.375 218.126 li
385.125 217.626 li
385.875 217.126 li
386.625 216.626 li
387.625 216.126 li
388.375 215.626 li
389.125 214.876 li
389.875 214.376 li
390.625 213.876 li
391.375 213.376 li
392.125 212.876 li
392.875 212.376 li
393.875 211.876 li
394.625 211.126 li
395.375 210.626 li
396.125 210.126 li
396.875 209.626 li
397.625 209.126 li
398.375 208.626 li
399.375 207.876 li
400.125 207.376 li
400.875 206.876 li
401.625 206.376 li
402.375 205.626 li
403.125 205.126 li
403.875 204.626 li
404.875 204.126 li
405.625 203.626 li
406.375 202.876 li
407.125 202.376 li
407.875 201.876 li
408.625 201.126 li
409.375 200.626 li
410.375 200.126 li
411.125 199.626 li
411.875 198.876 li
412.625 198.376 li
413.375 197.876 li
414.125 197.376 li
414.875 196.626 li
415.875 196.126 li
416.625 195.626 li
417.375 195.126 li
418.125 194.376 li
418.875 193.876 li
419.625 193.376 li
420.375 192.626 li
421.375 192.126 li
422.125 191.626 li
422.875 191.126 li
423.625 190.376 li
424.375 189.876 li
425.125 189.376 li
425.875 188.626 li
426.875 188.126 li
427.625 187.626 li
428.375 187.126 li
429.125 186.376 li
429.875 185.876 li
430.625 185.376 li
431.375 184.876 li
432.125 184.126 li
433.125 183.626 li
433.875 183.126 li
434.625 182.626 li
435.375 181.876 li
436.125 181.376 li
436.875 180.876 li
437.625 180.376 li
438.625 179.876 li
439.375 179.126 li
440.125 178.626 li
440.875 178.126 li
441.625 177.626 li
442.375 177.126 li
443.125 176.626 li
444.125 176.126 li
444.875 175.626 li
445.625 174.876 li
446.375 174.376 li
447.125 173.876 li
447.875 173.376 li
448.625 172.876 li
449.625 172.376 li
450.375 171.876 li
451.125 171.376 li
451.875 170.876 li
452.625 170.626 li
453.375 170.126 li
454.125 169.626 li
455.125 169.126 li
455.875 168.626 li
456.625 168.126 li
457.375 167.876 li
458.125 167.376 li
458.875 166.876 li
459.625 166.626 li
460.625 166.126 li
461.375 165.626 li
462.125 165.376 li
462.875 164.876 li
463.625 164.626 li
464.375 164.126 li
465.125 163.876 li
466.125 163.626 li
466.875 163.126 li
467.625 162.876 li
468.375 162.626 li
469.125 162.126 li
469.875 161.876 li
470.625 161.626 li
471.625 161.376 li
472.375 161.126 li
473.125 160.876 li
473.875 160.626 li
474.625 160.626 li
475.375 160.376 li
476.125 160.126 li
476.875 160.126 li
477.875 159.876 li
478.625 159.876 li
479.375 159.626 li
484.875 159.626 li
485.625 159.876 li
486.375 159.876 li
487.125 160.126 li
487.875 160.126 li
488.875 160.376 li
489.625 160.626 li
490.375 160.876 li
491.125 161.126 li
491.875 161.626 li
492.625 161.876 li
493.375 162.376 li
494.375 162.626 li
495.125 163.126 li
495.875 163.626 li
496.625 164.376 li
497.375 164.876 li
498.125 165.376 li
498.875 166.126 li
499.875 166.626 li
500.625 167.376 li
501.375 168.126 li
502.125 168.876 li
502.875 169.876 li
503.625 170.626 li
504.375 171.376 li
505.375 172.376 li
506.125 173.376 li
506.875 174.376 li
507.625 175.376 li
508.375 176.376 li
509.125 177.376 li
509.875 178.626 li
510.375 179.126 li
0 .993988 1 0 cmyk
@
.75 lw
308.875 310.375 mo
312.125 310.375 li
310.375 281.125 mo
310.375 310.375 li
308.875 225.125 mo
312.125 225.125 li
310.375 273.125 mo
310.375 225.125 li
267.625 299.375 mo
270.875 299.375 li
269.375 287.375 mo
269.375 299.375 li
267.625 267.125 mo
270.875 267.125 li
269.375 279.125 mo
269.375 267.125 li
230.125 280.875 mo
233.375 280.875 li
231.875 274.875 mo
231.875 280.875 li
230.125 261.125 mo
233.375 261.125 li
231.875 266.875 mo
231.875 261.125 li
199.375 270.875 mo
202.625 270.875 li
200.875 267.625 mo
200.875 270.875 li
199.375 256.125 mo
202.625 256.125 li
200.875 259.375 mo
200.875 256.125 li
174.625 288.125 mo
177.875 288.125 li
176.375 284.875 mo
176.375 288.125 li
174.625 273.375 mo
177.875 273.375 li
176.375 276.625 mo
176.375 273.375 li
149.375 264.625 mo
152.625 264.625 li
151.125 262.625 mo
151.125 264.625 li
149.375 252.375 mo
152.625 252.375 li
151.125 254.375 mo
151.125 252.375 li
120.875 237.625 mo
124.125 237.625 li
122.625 235.375 mo
122.625 237.625 li
120.875 225.125 mo
124.125 225.125 li
122.625 227.375 mo
122.625 225.125 li
96.375 212.875 mo
99.625 212.875 li
98.125 207.125 mo
98.125 212.875 li
96.375 193.125 mo
99.625 193.125 li
98.125 198.875 mo
98.125 193.125 li
77.625 216.625 mo
80.875 216.625 li
79.375 200.875 mo
79.375 216.625 li
77.625 177.125 mo
80.875 177.125 li
79.375 192.625 mo
79.375 177.125 li
0 0 0 1 cmyk
@
314.575 277.165 mo
314.575 274.819 312.671 272.915 310.325 272.915 cv
307.979 272.915 306.075 274.819 306.075 277.165 cv
306.075 279.511 307.979 281.415 310.325 281.415 cv
312.671 281.415 314.575 279.511 314.575 277.165 cv
.149691 .764157 .56347 .013672 cmyk
ef
1 lw
314.575 277.165 mo
314.575 274.819 312.671 272.915 310.325 272.915 cv
307.979 272.915 306.075 274.819 306.075 277.165 cv
306.075 279.511 307.979 281.415 310.325 281.415 cv
312.671 281.415 314.575 279.511 314.575 277.165 cv
0 0 0 1 cmyk
@
273.655 283.405 mo
273.655 281.059 271.751 279.155 269.405 279.155 cv
267.059 279.155 265.155 281.059 265.155 283.405 cv
265.155 285.751 267.059 287.655 269.405 287.655 cv
271.751 287.655 273.655 285.751 273.655 283.405 cv
.149691 .764157 .56347 .013672 cmyk
ef
273.655 283.405 mo
273.655 281.059 271.751 279.155 269.405 279.155 cv
267.059 279.155 265.155 281.059 265.155 283.405 cv
265.155 285.751 267.059 287.655 269.405 287.655 cv
271.751 287.655 273.655 285.751 273.655 283.405 cv
0 0 0 1 cmyk
@
236.095 270.925 mo
236.095 268.579 234.191 266.675 231.845 266.675 cv
229.499 266.675 227.595 268.579 227.595 270.925 cv
227.595 273.271 229.499 275.175 231.845 275.175 cv
234.191 275.175 236.095 273.271 236.095 270.925 cv
.149691 .764157 .56347 .013672 cmyk
ef
236.095 270.925 mo
236.095 268.579 234.191 266.675 231.845 266.675 cv
229.499 266.675 227.595 268.579 227.595 270.925 cv
227.595 273.271 229.499 275.175 231.845 275.175 cv
234.191 275.175 236.095 273.271 236.095 270.925 cv
0 0 0 1 cmyk
@
205.135 263.605 mo
205.135 261.259 203.231 259.355 200.885 259.355 cv
198.539 259.355 196.635 261.259 196.635 263.605 cv
196.635 265.951 198.539 267.855 200.885 267.855 cv
203.231 267.855 205.135 265.951 205.135 263.605 cv
.149691 .764157 .56347 .013672 cmyk
ef
205.135 263.605 mo
205.135 261.259 203.231 259.355 200.885 259.355 cv
198.539 259.355 196.635 261.259 196.635 263.605 cv
196.635 265.951 198.539 267.855 200.885 267.855 cv
203.231 267.855 205.135 265.951 205.135 263.605 cv
0 0 0 1 cmyk
@
180.655 280.885 mo
180.655 278.539 178.751 276.635 176.405 276.635 cv
174.059 276.635 172.155 278.539 172.155 280.885 cv
172.155 283.231 174.059 285.135 176.405 285.135 cv
178.751 285.135 180.655 283.231 180.655 280.885 cv
.149691 .764157 .56347 .013672 cmyk
ef
180.655 280.885 mo
180.655 278.539 178.751 276.635 176.405 276.635 cv
174.059 276.635 172.155 278.539 172.155 280.885 cv
172.155 283.231 174.059 285.135 176.405 285.135 cv
178.751 285.135 180.655 283.231 180.655 280.885 cv
0 0 0 1 cmyk
@
155.335 258.685 mo
155.335 256.339 153.431 254.435 151.085 254.435 cv
148.739 254.435 146.835 256.339 146.835 258.685 cv
146.835 261.031 148.739 262.935 151.085 262.935 cv
153.431 262.935 155.335 261.031 155.335 258.685 cv
.149691 .764157 .56347 .013672 cmyk
ef
155.335 258.685 mo
155.335 256.339 153.431 254.435 151.085 254.435 cv
148.739 254.435 146.835 256.339 146.835 258.685 cv
146.835 261.031 148.739 262.935 151.085 262.935 cv
153.431 262.935 155.335 261.031 155.335 258.685 cv
0 0 0 1 cmyk
@
126.895 231.325 mo
126.895 228.979 124.991 227.075 122.645 227.075 cv
120.299 227.075 118.395 228.979 118.395 231.325 cv
118.395 233.671 120.299 235.575 122.645 235.575 cv
124.991 235.575 126.895 233.671 126.895 231.325 cv
.149691 .764157 .56347 .013672 cmyk
ef
126.895 231.325 mo
126.895 228.979 124.991 227.075 122.645 227.075 cv
120.299 227.075 118.395 228.979 118.395 231.325 cv
118.395 233.671 120.299 235.575 122.645 235.575 cv
124.991 235.575 126.895 233.671 126.895 231.325 cv
0 0 0 1 cmyk
@
102.415 202.885 mo
102.415 200.539 100.511 198.635 98.165 198.635 cv
95.8188 198.635 93.915 200.539 93.915 202.885 cv
93.915 205.231 95.8188 207.135 98.165 207.135 cv
100.511 207.135 102.415 205.231 102.415 202.885 cv
.149691 .764157 .56347 .013672 cmyk
ef
102.415 202.885 mo
102.415 200.539 100.511 198.635 98.165 198.635 cv
95.8188 198.635 93.915 200.539 93.915 202.885 cv
93.915 205.231 95.8188 207.135 98.165 207.135 cv
100.511 207.135 102.415 205.231 102.415 202.885 cv
0 0 0 1 cmyk
@
83.5752 196.885 mo
83.5752 194.539 81.6709 192.635 79.3252 192.635 cv
76.979 192.635 75.0752 194.539 75.0752 196.885 cv
75.0752 199.231 76.979 201.135 79.3252 201.135 cv
81.6709 201.135 83.5752 199.231 83.5752 196.885 cv
.149691 .764157 .56347 .013672 cmyk
ef
83.5752 196.885 mo
83.5752 194.539 81.6709 192.635 79.3252 192.635 cv
76.979 192.635 75.0752 194.539 75.0752 196.885 cv
75.0752 199.231 76.979 201.135 79.3252 201.135 cv
81.6709 201.135 83.5752 199.231 83.5752 196.885 cv
0 0 0 1 cmyk
@
.75 lw
495.625 207.625 mo
498.875 207.625 li
497.375 169.875 mo
497.375 207.625 li
495.625 123.875 mo
498.875 123.875 li
497.375 161.625 mo
497.375 123.875 li
471.875 177.375 mo
475.125 177.375 li
473.375 155.125 mo
473.375 177.375 li
471.875 124.625 mo
475.125 124.625 li
473.375 146.875 mo
473.375 124.625 li
452.625 174.625 mo
455.875 174.625 li
454.125 160.125 mo
454.125 174.625 li
452.625 137.625 mo
455.875 137.625 li
454.125 151.875 mo
454.125 137.625 li
437.875 174.625 mo
441.125 174.625 li
439.375 163.625 mo
439.375 174.625 li
437.875 144.625 mo
441.125 144.625 li
439.375 155.625 mo
439.375 144.625 li
426.625 190.625 mo
429.875 190.625 li
428.125 181.875 mo
428.125 190.625 li
426.625 164.875 mo
429.875 164.875 li
428.125 173.625 mo
428.125 164.875 li
416.625 194.625 mo
419.875 194.625 li
418.125 187.625 mo
418.125 194.625 li
416.625 172.625 mo
419.875 172.625 li
418.125 179.375 mo
418.125 172.625 li
406.625 218.625 mo
409.875 218.625 li
408.125 214.375 mo
408.125 218.625 li
406.625 202.125 mo
409.875 202.125 li
408.125 206.375 mo
408.125 202.125 li
396.375 205.875 mo
399.625 205.875 li
398.125 202.625 mo
398.125 205.875 li
396.375 191.375 mo
399.625 191.375 li
398.125 194.625 mo
398.125 191.375 li
388.375 211.125 mo
391.625 211.125 li
390.125 207.125 mo
390.125 211.125 li
388.375 194.875 mo
391.625 194.875 li
390.125 199.125 mo
390.125 194.875 li
382.875 206.375 mo
386.125 206.375 li
384.625 202.375 mo
384.625 206.375 li
382.875 190.375 mo
386.125 190.375 li
384.625 194.375 mo
384.625 190.375 li
377.625 226.875 mo
380.875 226.875 li
379.375 223.875 mo
379.375 226.875 li
377.625 212.625 mo
380.875 212.625 li
379.375 215.625 mo
379.375 212.625 li
372.375 234.625 mo
375.625 234.625 li
373.875 232.625 mo
373.875 234.625 li
372.375 222.375 mo
375.625 222.375 li
373.875 224.375 mo
373.875 222.375 li
366.875 221.125 mo
370.125 221.125 li
368.625 219.625 mo
368.625 221.125 li
366.875 209.875 mo
370.125 209.875 li
368.625 211.375 mo
368.625 209.875 li
361.375 232.125 mo
364.625 232.125 li
363.125 231.125 mo
363.125 232.125 li
361.375 222.125 mo
364.625 222.125 li
363.125 223.125 mo
363.125 222.125 li
355.875 237.125 mo
359.125 237.125 li
357.625 236.375 mo
357.625 237.125 li
355.875 227.375 mo
359.125 227.375 li
357.625 228.125 mo
357.625 227.375 li
350.375 237.875 mo
353.625 237.875 li
352.125 237.875 mo
350.375 229.625 mo
353.625 229.625 li
@
497.375 161.625 mo
493.125 161.625 li
493.125 170.125 li
501.625 170.125 li
501.625 161.625 li
497.375 161.625 li
cp
.611749 0 .900298 0 cmyk
ef
1 lw
497.375 161.625 mo
493.125 161.625 li
493.125 170.125 li
501.625 170.125 li
501.625 161.625 li
497.375 161.625 li
cp
0 0 0 1 cmyk
@
473.375 146.875 mo
469.125 146.875 li
469.125 155.375 li
477.625 155.375 li
477.625 146.875 li
473.375 146.875 li
cp
.611749 0 .900298 0 cmyk
ef
473.375 146.875 mo
469.125 146.875 li
469.125 155.375 li
477.625 155.375 li
477.625 146.875 li
473.375 146.875 li
cp
0 0 0 1 cmyk
@
454.125 151.875 mo
449.875 151.875 li
449.875 160.375 li
458.375 160.375 li
458.375 151.875 li
454.125 151.875 li
cp
.611749 0 .900298 0 cmyk
ef
454.125 151.875 mo
449.875 151.875 li
449.875 160.375 li
458.375 160.375 li
458.375 151.875 li
454.125 151.875 li
cp
0 0 0 1 cmyk
@
439.375 155.375 mo
435.125 155.375 li
435.125 163.875 li
443.625 163.875 li
443.625 155.375 li
439.375 155.375 li
cp
.611749 0 .900298 0 cmyk
ef
439.375 155.375 mo
435.125 155.375 li
435.125 163.875 li
443.625 163.875 li
443.625 155.375 li
439.375 155.375 li
cp
0 0 0 1 cmyk
@
428.125 173.625 mo
423.875 173.625 li
423.875 182.125 li
432.375 182.125 li
432.375 173.625 li
428.125 173.625 li
cp
.611749 0 .900298 0 cmyk
ef
428.125 173.625 mo
423.875 173.625 li
423.875 182.125 li
432.375 182.125 li
432.375 173.625 li
428.125 173.625 li
cp
0 0 0 1 cmyk
@
418.125 179.375 mo
413.875 179.375 li
413.875 187.875 li
422.375 187.875 li
422.375 179.375 li
418.125 179.375 li
cp
.611749 0 .900298 0 cmyk
ef
418.125 179.375 mo
413.875 179.375 li
413.875 187.875 li
422.375 187.875 li
422.375 179.375 li
418.125 179.375 li
cp
0 0 0 1 cmyk
@
408.125 206.125 mo
403.875 206.125 li
403.875 214.625 li
412.375 214.625 li
412.375 206.125 li
408.125 206.125 li
cp
.611749 0 .900298 0 cmyk
ef
408.125 206.125 mo
403.875 206.125 li
403.875 214.625 li
412.375 214.625 li
412.375 206.125 li
408.125 206.125 li
cp
0 0 0 1 cmyk
@
398.125 194.375 mo
393.875 194.375 li
393.875 202.875 li
402.375 202.875 li
402.375 194.375 li
398.125 194.375 li
cp
.611749 0 .900298 0 cmyk
ef
398.125 194.375 mo
393.875 194.375 li
393.875 202.875 li
402.375 202.875 li
402.375 194.375 li
398.125 194.375 li
cp
0 0 0 1 cmyk
@
390.125 198.875 mo
385.875 198.875 li
385.875 207.375 li
394.375 207.375 li
394.375 198.875 li
390.125 198.875 li
cp
.611749 0 .900298 0 cmyk
ef
390.125 198.875 mo
385.875 198.875 li
385.875 207.375 li
394.375 207.375 li
394.375 198.875 li
390.125 198.875 li
cp
0 0 0 1 cmyk
@
384.625 194.125 mo
380.375 194.125 li
380.375 202.625 li
388.875 202.625 li
388.875 194.125 li
384.625 194.125 li
cp
.611749 0 .900298 0 cmyk
ef
384.625 194.125 mo
380.375 194.125 li
380.375 202.625 li
388.875 202.625 li
388.875 194.125 li
384.625 194.125 li
cp
0 0 0 1 cmyk
@
379.375 215.625 mo
375.125 215.625 li
375.125 224.125 li
383.625 224.125 li
383.625 215.625 li
379.375 215.625 li
cp
.611749 0 .900298 0 cmyk
ef
379.375 215.625 mo
375.125 215.625 li
375.125 224.125 li
383.625 224.125 li
383.625 215.625 li
379.375 215.625 li
cp
0 0 0 1 cmyk
@
373.875 224.375 mo
369.625 224.375 li
369.625 232.875 li
378.125 232.875 li
378.125 224.375 li
373.875 224.375 li
cp
.611749 0 .900298 0 cmyk
ef
373.875 224.375 mo
369.625 224.375 li
369.625 232.875 li
378.125 232.875 li
378.125 224.375 li
373.875 224.375 li
cp
0 0 0 1 cmyk
@
368.625 211.125 mo
364.375 211.125 li
364.375 219.625 li
372.875 219.625 li
372.875 211.125 li
368.625 211.125 li
cp
.611749 0 .900298 0 cmyk
ef
368.625 211.125 mo
364.375 211.125 li
364.375 219.625 li
372.875 219.625 li
372.875 211.125 li
368.625 211.125 li
cp
0 0 0 1 cmyk
@
363.125 222.875 mo
358.875 222.875 li
358.875 231.375 li
367.375 231.375 li
367.375 222.875 li
363.125 222.875 li
cp
.611749 0 .900298 0 cmyk
ef
363.125 222.875 mo
358.875 222.875 li
358.875 231.375 li
367.375 231.375 li
367.375 222.875 li
363.125 222.875 li
cp
0 0 0 1 cmyk
@
357.625 227.875 mo
353.375 227.875 li
353.375 236.375 li
361.875 236.375 li
361.875 227.875 li
357.625 227.875 li
cp
.611749 0 .900298 0 cmyk
ef
357.625 227.875 mo
353.375 227.875 li
353.375 236.375 li
361.875 236.375 li
361.875 227.875 li
357.625 227.875 li
cp
0 0 0 1 cmyk
@
352.125 229.375 mo
347.875 229.375 li
347.875 237.875 li
356.375 237.875 li
356.375 229.375 li
352.125 229.375 li
cp
.611749 0 .900298 0 cmyk
ef
352.125 229.375 mo
347.875 229.375 li
347.875 237.875 li
356.375 237.875 li
356.375 229.375 li
352.125 229.375 li
cp
0 0 0 1 cmyk
@
346.375 233.625 mo
342.125 233.625 li
342.125 242.125 li
350.625 242.125 li
350.625 233.625 li
346.375 233.625 li
cp
.611749 0 .900298 0 cmyk
ef
346.375 233.625 mo
342.125 233.625 li
342.125 242.125 li
350.625 242.125 li
350.625 233.625 li
346.375 233.625 li
cp
0 0 0 1 cmyk
@
340.625 239.375 mo
336.375 239.375 li
336.375 247.875 li
344.875 247.875 li
344.875 239.375 li
340.625 239.375 li
cp
.611749 0 .900298 0 cmyk
ef
340.625 239.375 mo
336.375 239.375 li
336.375 247.875 li
344.875 247.875 li
344.875 239.375 li
340.625 239.375 li
cp
0 0 0 1 cmyk
@
334.875 235.625 mo
330.625 235.625 li
330.625 244.125 li
339.125 244.125 li
339.125 235.625 li
334.875 235.625 li
cp
.611749 0 .900298 0 cmyk
ef
334.875 235.625 mo
330.625 235.625 li
330.625 244.125 li
339.125 244.125 li
339.125 235.625 li
334.875 235.625 li
cp
0 0 0 1 cmyk
@
329.125 243.625 mo
324.875 243.625 li
324.875 252.125 li
333.375 252.125 li
333.375 243.625 li
329.125 243.625 li
cp
.611749 0 .900298 0 cmyk
ef
329.125 243.625 mo
324.875 243.625 li
324.875 252.125 li
333.375 252.125 li
333.375 243.625 li
329.125 243.625 li
cp
0 0 0 1 cmyk
@
323.625 246.875 mo
319.375 246.875 li
319.375 255.375 li
327.875 255.375 li
327.875 246.875 li
323.625 246.875 li
cp
.611749 0 .900298 0 cmyk
ef
323.625 246.875 mo
319.375 246.875 li
319.375 255.375 li
327.875 255.375 li
327.875 246.875 li
323.625 246.875 li
cp
0 0 0 1 cmyk
@
319.375 252.875 mo
315.125 252.875 li
315.125 261.375 li
323.625 261.375 li
323.625 252.875 li
319.375 252.875 li
cp
.611749 0 .900298 0 cmyk
ef
319.375 252.875 mo
315.125 252.875 li
315.125 261.375 li
323.625 261.375 li
323.625 252.875 li
319.375 252.875 li
cp
0 0 0 1 cmyk
@
315.625 248.625 mo
311.375 248.625 li
311.375 257.125 li
319.875 257.125 li
319.875 248.625 li
315.625 248.625 li
cp
.611749 0 .900298 0 cmyk
ef
315.625 248.625 mo
311.375 248.625 li
311.375 257.125 li
319.875 257.125 li
319.875 248.625 li
315.625 248.625 li
cp
0 0 0 1 cmyk
@
311.875 254.125 mo
307.625 254.125 li
307.625 262.625 li
316.125 262.625 li
316.125 254.125 li
311.875 254.125 li
cp
.611749 0 .900298 0 cmyk
ef
311.875 254.125 mo
307.625 254.125 li
307.625 262.625 li
316.125 262.625 li
316.125 254.125 li
311.875 254.125 li
cp
0 0 0 1 cmyk
@
308.125 254.375 mo
303.875 254.375 li
303.875 262.875 li
312.375 262.875 li
312.375 254.375 li
308.125 254.375 li
cp
.611749 0 .900298 0 cmyk
ef
308.125 254.375 mo
303.875 254.375 li
303.875 262.875 li
312.375 262.875 li
312.375 254.375 li
308.125 254.375 li
cp
0 0 0 1 cmyk
@
304.125 254.625 mo
299.875 254.625 li
299.875 263.125 li
308.375 263.125 li
308.375 254.625 li
304.125 254.625 li
cp
.611749 0 .900298 0 cmyk
ef
304.125 254.625 mo
299.875 254.625 li
299.875 263.125 li
308.375 263.125 li
308.375 254.625 li
304.125 254.625 li
cp
0 0 0 1 cmyk
@
300.125 256.375 mo
295.875 256.375 li
295.875 264.875 li
304.375 264.875 li
304.375 256.375 li
300.125 256.375 li
cp
.611749 0 .900298 0 cmyk
ef
300.125 256.375 mo
295.875 256.375 li
295.875 264.875 li
304.375 264.875 li
304.375 256.375 li
300.125 256.375 li
cp
0 0 0 1 cmyk
@
296.125 261.375 mo
291.875 261.375 li
291.875 269.875 li
300.375 269.875 li
300.375 261.375 li
296.125 261.375 li
cp
.611749 0 .900298 0 cmyk
ef
296.125 261.375 mo
291.875 261.375 li
291.875 269.875 li
300.375 269.875 li
300.375 261.375 li
296.125 261.375 li
cp
0 0 0 1 cmyk
@
292.125 262.625 mo
287.875 262.625 li
287.875 271.125 li
296.375 271.125 li
296.375 262.625 li
292.125 262.625 li
cp
.611749 0 .900298 0 cmyk
ef
292.125 262.625 mo
287.875 262.625 li
287.875 271.125 li
296.375 271.125 li
296.375 262.625 li
292.125 262.625 li
cp
0 0 0 1 cmyk
@
287.875 262.375 mo
283.625 262.375 li
283.625 270.875 li
292.125 270.875 li
292.125 262.375 li
287.875 262.375 li
cp
.611749 0 .900298 0 cmyk
ef
287.875 262.375 mo
283.625 262.375 li
283.625 270.875 li
292.125 270.875 li
292.125 262.375 li
287.875 262.375 li
cp
0 0 0 1 cmyk
@
283.875 264.125 mo
279.625 264.125 li
279.625 272.625 li
288.125 272.625 li
288.125 264.125 li
283.875 264.125 li
cp
.611749 0 .900298 0 cmyk
ef
283.875 264.125 mo
279.625 264.125 li
279.625 272.625 li
288.125 272.625 li
288.125 264.125 li
283.875 264.125 li
cp
0 0 0 1 cmyk
@
279.375 267.125 mo
275.125 267.125 li
275.125 275.625 li
283.625 275.625 li
283.625 267.125 li
279.375 267.125 li
cp
.611749 0 .900298 0 cmyk
ef
279.375 267.125 mo
275.125 267.125 li
275.125 275.625 li
283.625 275.625 li
283.625 267.125 li
279.375 267.125 li
cp
0 0 0 1 cmyk
@
275.375 266.125 mo
271.125 266.125 li
271.125 274.625 li
279.625 274.625 li
279.625 266.125 li
275.375 266.125 li
cp
.611749 0 .900298 0 cmyk
ef
275.375 266.125 mo
271.125 266.125 li
271.125 274.625 li
279.625 274.625 li
279.625 266.125 li
275.375 266.125 li
cp
0 0 0 1 cmyk
@
270.875 269.625 mo
266.625 269.625 li
266.625 278.125 li
275.125 278.125 li
275.125 269.625 li
270.875 269.625 li
cp
.611749 0 .900298 0 cmyk
ef
270.875 269.625 mo
266.625 269.625 li
266.625 278.125 li
275.125 278.125 li
275.125 269.625 li
270.875 269.625 li
cp
0 0 0 1 cmyk
@
266.625 269.125 mo
262.375 269.125 li
262.375 277.625 li
270.875 277.625 li
270.875 269.125 li
266.625 269.125 li
cp
.611749 0 .900298 0 cmyk
ef
266.625 269.125 mo
262.375 269.125 li
262.375 277.625 li
270.875 277.625 li
270.875 269.125 li
266.625 269.125 li
cp
0 0 0 1 cmyk
@
262.125 270.875 mo
257.875 270.875 li
257.875 279.375 li
266.375 279.375 li
266.375 270.875 li
262.125 270.875 li
cp
.611749 0 .900298 0 cmyk
ef
262.125 270.875 mo
257.875 270.875 li
257.875 279.375 li
266.375 279.375 li
266.375 270.875 li
262.125 270.875 li
cp
0 0 0 1 cmyk
@
257.625 272.875 mo
253.375 272.875 li
253.375 281.375 li
261.875 281.375 li
261.875 272.875 li
257.625 272.875 li
cp
.611749 0 .900298 0 cmyk
ef
257.625 272.875 mo
253.375 272.875 li
253.375 281.375 li
261.875 281.375 li
261.875 272.875 li
257.625 272.875 li
cp
0 0 0 1 cmyk
@
252.875 274.375 mo
248.625 274.375 li
248.625 282.875 li
257.125 282.875 li
257.125 274.375 li
252.875 274.375 li
cp
.611749 0 .900298 0 cmyk
ef
252.875 274.375 mo
248.625 274.375 li
248.625 282.875 li
257.125 282.875 li
257.125 274.375 li
252.875 274.375 li
cp
0 0 0 1 cmyk
@
247.875 275.125 mo
243.625 275.125 li
243.625 283.625 li
252.125 283.625 li
252.125 275.125 li
247.875 275.125 li
cp
.611749 0 .900298 0 cmyk
ef
247.875 275.125 mo
243.625 275.125 li
243.625 283.625 li
252.125 283.625 li
252.125 275.125 li
247.875 275.125 li
cp
0 0 0 1 cmyk
@
242.875 274.875 mo
238.625 274.875 li
238.625 283.375 li
247.125 283.375 li
247.125 274.875 li
242.875 274.875 li
cp
.611749 0 .900298 0 cmyk
ef
242.875 274.875 mo
238.625 274.875 li
238.625 283.375 li
247.125 283.375 li
247.125 274.875 li
242.875 274.875 li
cp
0 0 0 1 cmyk
@
237.875 275.875 mo
233.625 275.875 li
233.625 284.375 li
242.125 284.375 li
242.125 275.875 li
237.875 275.875 li
cp
.611749 0 .900298 0 cmyk
ef
237.875 275.875 mo
233.625 275.875 li
233.625 284.375 li
242.125 284.375 li
242.125 275.875 li
237.875 275.875 li
cp
0 0 0 1 cmyk
@
232.625 277.625 mo
228.375 277.625 li
228.375 286.125 li
236.875 286.125 li
236.875 277.625 li
232.625 277.625 li
cp
.611749 0 .900298 0 cmyk
ef
232.625 277.625 mo
228.375 277.625 li
228.375 286.125 li
236.875 286.125 li
236.875 277.625 li
232.625 277.625 li
cp
0 0 0 1 cmyk
@
227.125 278.625 mo
222.875 278.625 li
222.875 287.125 li
231.375 287.125 li
231.375 278.625 li
227.125 278.625 li
cp
.611749 0 .900298 0 cmyk
ef
227.125 278.625 mo
222.875 278.625 li
222.875 287.125 li
231.375 287.125 li
231.375 278.625 li
227.125 278.625 li
cp
0 0 0 1 cmyk
@
221.625 279.875 mo
217.375 279.875 li
217.375 288.375 li
225.875 288.375 li
225.875 279.875 li
221.625 279.875 li
cp
.611749 0 .900298 0 cmyk
ef
221.625 279.875 mo
217.375 279.875 li
217.375 288.375 li
225.875 288.375 li
225.875 279.875 li
221.625 279.875 li
cp
0 0 0 1 cmyk
@
215.875 279.875 mo
211.625 279.875 li
211.625 288.375 li
220.125 288.375 li
220.125 279.875 li
215.875 279.875 li
cp
.611749 0 .900298 0 cmyk
ef
215.875 279.875 mo
211.625 279.875 li
211.625 288.375 li
220.125 288.375 li
220.125 279.875 li
215.875 279.875 li
cp
0 0 0 1 cmyk
@
209.875 280.375 mo
205.625 280.375 li
205.625 288.875 li
214.125 288.875 li
214.125 280.375 li
209.875 280.375 li
cp
.611749 0 .900298 0 cmyk
ef
209.875 280.375 mo
205.625 280.375 li
205.625 288.875 li
214.125 288.875 li
214.125 280.375 li
209.875 280.375 li
cp
0 0 0 1 cmyk
@
203.625 280.625 mo
199.375 280.625 li
199.375 289.125 li
207.875 289.125 li
207.875 280.625 li
203.625 280.625 li
cp
.611749 0 .900298 0 cmyk
ef
203.625 280.625 mo
199.375 280.625 li
199.375 289.125 li
207.875 289.125 li
207.875 280.625 li
203.625 280.625 li
cp
0 0 0 1 cmyk
@
197.125 280.125 mo
192.875 280.125 li
192.875 288.625 li
201.375 288.625 li
201.375 280.125 li
197.125 280.125 li
cp
.611749 0 .900298 0 cmyk
ef
197.125 280.125 mo
192.875 280.125 li
192.875 288.625 li
201.375 288.625 li
201.375 280.125 li
197.125 280.125 li
cp
0 0 0 1 cmyk
@
190.875 279.875 mo
186.625 279.875 li
186.625 288.375 li
195.125 288.375 li
195.125 279.875 li
190.875 279.875 li
cp
.611749 0 .900298 0 cmyk
ef
190.875 279.875 mo
186.625 279.875 li
186.625 288.375 li
195.125 288.375 li
195.125 279.875 li
190.875 279.875 li
cp
0 0 0 1 cmyk
@
184.375 279.625 mo
180.125 279.625 li
180.125 288.125 li
188.625 288.125 li
188.625 279.625 li
184.375 279.625 li
cp
.611749 0 .900298 0 cmyk
ef
184.375 279.625 mo
180.125 279.625 li
180.125 288.125 li
188.625 288.125 li
188.625 279.625 li
184.375 279.625 li
cp
0 0 0 1 cmyk
@
177.625 278.625 mo
173.375 278.625 li
173.375 287.125 li
181.875 287.125 li
181.875 278.625 li
177.625 278.625 li
cp
.611749 0 .900298 0 cmyk
ef
177.625 278.625 mo
173.375 278.625 li
173.375 287.125 li
181.875 287.125 li
181.875 278.625 li
177.625 278.625 li
cp
0 0 0 1 cmyk
@
170.625 278.125 mo
166.375 278.125 li
166.375 286.625 li
174.875 286.625 li
174.875 278.125 li
170.625 278.125 li
cp
.611749 0 .900298 0 cmyk
ef
170.625 278.125 mo
166.375 278.125 li
166.375 286.625 li
174.875 286.625 li
174.875 278.125 li
170.625 278.125 li
cp
0 0 0 1 cmyk
@
163.625 276.625 mo
159.375 276.625 li
159.375 285.125 li
167.875 285.125 li
167.875 276.625 li
163.625 276.625 li
cp
.611749 0 .900298 0 cmyk
ef
163.625 276.625 mo
159.375 276.625 li
159.375 285.125 li
167.875 285.125 li
167.875 276.625 li
163.625 276.625 li
cp
0 0 0 1 cmyk
@
156.125 274.875 mo
151.875 274.875 li
151.875 283.375 li
160.375 283.375 li
160.375 274.875 li
156.125 274.875 li
cp
.611749 0 .900298 0 cmyk
ef
156.125 274.875 mo
151.875 274.875 li
151.875 283.375 li
160.375 283.375 li
160.375 274.875 li
156.125 274.875 li
cp
0 0 0 1 cmyk
@
148.125 274.125 mo
143.875 274.125 li
143.875 282.625 li
152.375 282.625 li
152.375 274.125 li
148.125 274.125 li
cp
.611749 0 .900298 0 cmyk
ef
148.125 274.125 mo
143.875 274.125 li
143.875 282.625 li
152.375 282.625 li
152.375 274.125 li
148.125 274.125 li
cp
0 0 0 1 cmyk
@
139.625 272.125 mo
135.375 272.125 li
135.375 280.625 li
143.875 280.625 li
143.875 272.125 li
139.625 272.125 li
cp
.611749 0 .900298 0 cmyk
ef
139.625 272.125 mo
135.375 272.125 li
135.375 280.625 li
143.875 280.625 li
143.875 272.125 li
139.625 272.125 li
cp
0 0 0 1 cmyk
@
130.875 269.625 mo
126.625 269.625 li
126.625 278.125 li
135.125 278.125 li
135.125 269.625 li
130.875 269.625 li
cp
.611749 0 .900298 0 cmyk
ef
130.875 269.625 mo
126.625 269.625 li
126.625 278.125 li
135.125 278.125 li
135.125 269.625 li
130.875 269.625 li
cp
0 0 0 1 cmyk
@
121.625 266.375 mo
117.375 266.375 li
117.375 274.875 li
125.875 274.875 li
125.875 266.375 li
121.625 266.375 li
cp
.611749 0 .900298 0 cmyk
ef
121.625 266.375 mo
117.375 266.375 li
117.375 274.875 li
125.875 274.875 li
125.875 266.375 li
121.625 266.375 li
cp
0 0 0 1 cmyk
@
111.625 262.875 mo
107.375 262.875 li
107.375 271.375 li
115.875 271.375 li
115.875 262.875 li
111.625 262.875 li
cp
.611749 0 .900298 0 cmyk
ef
111.625 262.875 mo
107.375 262.875 li
107.375 271.375 li
115.875 271.375 li
115.875 262.875 li
111.625 262.875 li
cp
0 0 0 1 cmyk
@
100.875 258.625 mo
96.625 258.625 li
96.625 267.125 li
105.125 267.125 li
105.125 258.625 li
100.875 258.625 li
cp
.611749 0 .900298 0 cmyk
ef
100.875 258.625 mo
96.625 258.625 li
96.625 267.125 li
105.125 267.125 li
105.125 258.625 li
100.875 258.625 li
cp
0 0 0 1 cmyk
@
89.625 253.875 mo
85.375 253.875 li
85.375 262.375 li
93.875 262.375 li
93.875 253.875 li
89.625 253.875 li
cp
.611749 0 .900298 0 cmyk
ef
89.625 253.875 mo
85.375 253.875 li
85.375 262.375 li
93.875 262.375 li
93.875 253.875 li
89.625 253.875 li
cp
0 0 0 1 cmyk
@
77.125 247.625 mo
72.875 247.625 li
72.875 256.125 li
81.375 256.125 li
81.375 247.625 li
77.125 247.625 li
cp
.611749 0 .900298 0 cmyk
ef
77.125 247.625 mo
72.875 247.625 li
72.875 256.125 li
81.375 256.125 li
81.375 247.625 li
77.125 247.625 li
cp
0 0 0 1 cmyk
@
63.875 241.875 mo
59.625 241.875 li
59.625 250.375 li
68.125 250.375 li
68.125 241.875 li
63.875 241.875 li
cp
.611749 0 .900298 0 cmyk
ef
63.875 241.875 mo
59.625 241.875 li
59.625 250.375 li
68.125 250.375 li
68.125 241.875 li
63.875 241.875 li
cp
0 0 0 1 cmyk
@
.75 lw
413.125 195.625 mo
416.375 195.625 li
414.875 150.125 mo
414.875 195.625 li
413.125 96.625 mo
416.375 96.625 li
414.875 142.125 mo
414.875 96.625 li
413.125 195.625 mo
416.375 195.625 li
414.875 150.125 mo
414.875 195.625 li
413.125 96.625 mo
416.375 96.625 li
414.875 142.125 mo
414.875 96.625 li
372.625 225.125 mo
375.875 225.125 li
374.375 202.125 mo
374.375 225.125 li
372.625 170.875 mo
375.875 170.875 li
374.375 193.875 mo
374.375 170.875 li
340.875 241.375 mo
344.125 241.375 li
342.625 229.375 mo
342.625 241.375 li
340.875 209.125 mo
344.125 209.125 li
342.625 221.125 mo
342.625 209.125 li
310.625 265.875 mo
313.875 265.875 li
312.125 261.375 mo
312.125 265.875 li
310.625 248.625 mo
313.875 248.625 li
312.125 253.125 mo
312.125 248.625 li
284.125 277.125 mo
287.375 277.125 li
285.625 274.875 mo
285.625 277.125 li
284.125 264.625 mo
287.375 264.625 li
285.625 266.875 mo
285.625 264.625 li
262.875 277.125 mo
266.125 277.125 li
264.375 276.125 mo
264.375 277.125 li
262.875 267.125 mo
266.125 267.125 li
264.375 268.125 mo
264.375 267.125 li
247.375 274.625 mo
250.625 274.625 li
248.875 273.875 mo
248.875 274.625 li
247.375 264.625 mo
250.625 264.625 li
248.875 265.625 mo
248.875 264.625 li
@
410.625 147.542 mo
413.458 147.542 li
413.458 150.375 li
416.292 150.375 li
416.292 147.542 li
419.125 147.542 li
419.125 144.708 li
416.292 144.708 li
416.292 141.875 li
413.458 141.875 li
413.458 144.708 li
410.625 144.708 li
410.625 147.542 li
cp
.743191 .712459 0 0 cmyk
ef
1 lw
410.625 147.542 mo
413.458 147.542 li
413.458 150.375 li
416.292 150.375 li
416.292 147.542 li
419.125 147.542 li
419.125 144.708 li
416.292 144.708 li
416.292 141.875 li
413.458 141.875 li
413.458 144.708 li
410.625 144.708 li
410.625 147.542 li
cp
0 0 0 1 cmyk
@
410.625 147.542 mo
413.458 147.542 li
413.458 150.375 li
416.292 150.375 li
416.292 147.542 li
419.125 147.542 li
419.125 144.708 li
416.292 144.708 li
416.292 141.875 li
413.458 141.875 li
413.458 144.708 li
410.625 144.708 li
410.625 147.542 li
cp
.743191 .712459 0 0 cmyk
ef
410.625 147.542 mo
413.458 147.542 li
413.458 150.375 li
416.292 150.375 li
416.292 147.542 li
419.125 147.542 li
419.125 144.708 li
416.292 144.708 li
416.292 141.875 li
413.458 141.875 li
413.458 144.708 li
410.625 144.708 li
410.625 147.542 li
cp
0 0 0 1 cmyk
@
370.125 199.542 mo
372.958 199.542 li
372.958 202.375 li
375.792 202.375 li
375.792 199.542 li
378.625 199.542 li
378.625 196.708 li
375.792 196.708 li
375.792 193.875 li
372.958 193.875 li
372.958 196.708 li
370.125 196.708 li
370.125 199.542 li
cp
.743191 .712459 0 0 cmyk
ef
370.125 199.542 mo
372.958 199.542 li
372.958 202.375 li
375.792 202.375 li
375.792 199.542 li
378.625 199.542 li
378.625 196.708 li
375.792 196.708 li
375.792 193.875 li
372.958 193.875 li
372.958 196.708 li
370.125 196.708 li
370.125 199.542 li
cp
0 0 0 1 cmyk
@
338.375 226.542 mo
341.208 226.542 li
341.208 229.375 li
344.042 229.375 li
344.042 226.542 li
346.875 226.542 li
346.875 223.708 li
344.042 223.708 li
344.042 220.875 li
341.208 220.875 li
341.208 223.708 li
338.375 223.708 li
338.375 226.542 li
cp
.743191 .712459 0 0 cmyk
ef
338.375 226.542 mo
341.208 226.542 li
341.208 229.375 li
344.042 229.375 li
344.042 226.542 li
346.875 226.542 li
346.875 223.708 li
344.042 223.708 li
344.042 220.875 li
341.208 220.875 li
341.208 223.708 li
338.375 223.708 li
338.375 226.542 li
cp
0 0 0 1 cmyk
@
307.875 258.792 mo
310.708 258.792 li
310.708 261.625 li
313.542 261.625 li
313.542 258.792 li
316.375 258.792 li
316.375 255.958 li
313.542 255.958 li
313.542 253.125 li
310.708 253.125 li
310.708 255.958 li
307.875 255.958 li
307.875 258.792 li
cp
.743191 .712459 0 0 cmyk
ef
307.875 258.792 mo
310.708 258.792 li
310.708 261.625 li
313.542 261.625 li
313.542 258.792 li
316.375 258.792 li
316.375 255.958 li
313.542 255.958 li
313.542 253.125 li
310.708 253.125 li
310.708 255.958 li
307.875 255.958 li
307.875 258.792 li
cp
0 0 0 1 cmyk
@
281.375 272.292 mo
284.208 272.292 li
284.208 275.125 li
287.042 275.125 li
287.042 272.292 li
289.875 272.292 li
289.875 269.458 li
287.042 269.458 li
287.042 266.625 li
284.208 266.625 li
284.208 269.458 li
281.375 269.458 li
281.375 272.292 li
cp
.743191 .712459 0 0 cmyk
ef
281.375 272.292 mo
284.208 272.292 li
284.208 275.125 li
287.042 275.125 li
287.042 272.292 li
289.875 272.292 li
289.875 269.458 li
287.042 269.458 li
287.042 266.625 li
284.208 266.625 li
284.208 269.458 li
281.375 269.458 li
281.375 272.292 li
cp
0 0 0 1 cmyk
@
260.125 273.542 mo
262.958 273.542 li
262.958 276.375 li
265.792 276.375 li
265.792 273.542 li
268.625 273.542 li
268.625 270.708 li
265.792 270.708 li
265.792 267.875 li
262.958 267.875 li
262.958 270.708 li
260.125 270.708 li
260.125 273.542 li
cp
.743191 .712459 0 0 cmyk
ef
260.125 273.542 mo
262.958 273.542 li
262.958 276.375 li
265.792 276.375 li
265.792 273.542 li
268.625 273.542 li
268.625 270.708 li
265.792 270.708 li
265.792 267.875 li
262.958 267.875 li
262.958 270.708 li
260.125 270.708 li
260.125 273.542 li
cp
0 0 0 1 cmyk
@
244.625 271.042 mo
247.458 271.042 li
247.458 273.875 li
250.292 273.875 li
250.292 271.042 li
253.125 271.042 li
253.125 268.208 li
250.292 268.208 li
250.292 265.375 li
247.458 265.375 li
247.458 268.208 li
244.625 268.208 li
244.625 271.042 li
cp
.743191 .712459 0 0 cmyk
ef
244.625 271.042 mo
247.458 271.042 li
247.458 273.875 li
250.292 273.875 li
250.292 271.042 li
253.125 271.042 li
253.125 268.208 li
250.292 268.208 li
250.292 265.375 li
247.458 265.375 li
247.458 268.208 li
244.625 268.208 li
244.625 271.042 li
cp
0 0 0 1 cmyk
@
229.625 280.042 mo
232.458 280.042 li
232.458 282.875 li
235.292 282.875 li
235.292 280.042 li
238.125 280.042 li
238.125 277.208 li
235.292 277.208 li
235.292 274.375 li
232.458 274.375 li
232.458 277.208 li
229.625 277.208 li
229.625 280.042 li
cp
.743191 .712459 0 0 cmyk
ef
229.625 280.042 mo
232.458 280.042 li
232.458 282.875 li
235.292 282.875 li
235.292 280.042 li
238.125 280.042 li
238.125 277.208 li
235.292 277.208 li
235.292 274.375 li
232.458 274.375 li
232.458 277.208 li
229.625 277.208 li
229.625 280.042 li
cp
0 0 0 1 cmyk
@
212.125 284.792 mo
214.958 284.792 li
214.958 287.625 li
217.792 287.625 li
217.792 284.792 li
220.625 284.792 li
220.625 281.958 li
217.792 281.958 li
217.792 279.125 li
214.958 279.125 li
214.958 281.958 li
212.125 281.958 li
212.125 284.792 li
cp
.743191 .712459 0 0 cmyk
ef
212.125 284.792 mo
214.958 284.792 li
214.958 287.625 li
217.792 287.625 li
217.792 284.792 li
220.625 284.792 li
220.625 281.958 li
217.792 281.958 li
217.792 279.125 li
214.958 279.125 li
214.958 281.958 li
212.125 281.958 li
212.125 284.792 li
cp
0 0 0 1 cmyk
@
193.375 286.542 mo
196.208 286.542 li
196.208 289.375 li
199.042 289.375 li
199.042 286.542 li
201.875 286.542 li
201.875 283.708 li
199.042 283.708 li
199.042 280.875 li
196.208 280.875 li
196.208 283.708 li
193.375 283.708 li
193.375 286.542 li
cp
.743191 .712459 0 0 cmyk
ef
193.375 286.542 mo
196.208 286.542 li
196.208 289.375 li
199.042 289.375 li
199.042 286.542 li
201.875 286.542 li
201.875 283.708 li
199.042 283.708 li
199.042 280.875 li
196.208 280.875 li
196.208 283.708 li
193.375 283.708 li
193.375 286.542 li
cp
0 0 0 1 cmyk
@
176.375 284.292 mo
179.208 284.292 li
179.208 287.125 li
182.042 287.125 li
182.042 284.292 li
184.875 284.292 li
184.875 281.458 li
182.042 281.458 li
182.042 278.625 li
179.208 278.625 li
179.208 281.458 li
176.375 281.458 li
176.375 284.292 li
cp
.743191 .712459 0 0 cmyk
ef
176.375 284.292 mo
179.208 284.292 li
179.208 287.125 li
182.042 287.125 li
182.042 284.292 li
184.875 284.292 li
184.875 281.458 li
182.042 281.458 li
182.042 278.625 li
179.208 278.625 li
179.208 281.458 li
176.375 281.458 li
176.375 284.292 li
cp
0 0 0 1 cmyk
@
163.375 282.792 mo
166.208 282.792 li
166.208 285.625 li
169.042 285.625 li
169.042 282.792 li
171.875 282.792 li
171.875 279.958 li
169.042 279.958 li
169.042 277.125 li
166.208 277.125 li
166.208 279.958 li
163.375 279.958 li
163.375 282.792 li
cp
.743191 .712459 0 0 cmyk
ef
163.375 282.792 mo
166.208 282.792 li
166.208 285.625 li
169.042 285.625 li
169.042 282.792 li
171.875 282.792 li
171.875 279.958 li
169.042 279.958 li
169.042 277.125 li
166.208 277.125 li
166.208 279.958 li
163.375 279.958 li
163.375 282.792 li
cp
0 0 0 1 cmyk
@
150.625 281.542 mo
153.458 281.542 li
153.458 284.375 li
156.292 284.375 li
156.292 281.542 li
159.125 281.542 li
159.125 278.708 li
156.292 278.708 li
156.292 275.875 li
153.458 275.875 li
153.458 278.708 li
150.625 278.708 li
150.625 281.542 li
cp
.743191 .712459 0 0 cmyk
ef
150.625 281.542 mo
153.458 281.542 li
153.458 284.375 li
156.292 284.375 li
156.292 281.542 li
159.125 281.542 li
159.125 278.708 li
156.292 278.708 li
156.292 275.875 li
153.458 275.875 li
153.458 278.708 li
150.625 278.708 li
150.625 281.542 li
cp
0 0 0 1 cmyk
@
134.125 276.542 mo
136.958 276.542 li
136.958 279.375 li
139.792 279.375 li
139.792 276.542 li
142.625 276.542 li
142.625 273.708 li
139.792 273.708 li
139.792 270.875 li
136.958 270.875 li
136.958 273.708 li
134.125 273.708 li
134.125 276.542 li
cp
.743191 .712459 0 0 cmyk
ef
134.125 276.542 mo
136.958 276.542 li
136.958 279.375 li
139.792 279.375 li
139.792 276.542 li
142.625 276.542 li
142.625 273.708 li
139.792 273.708 li
139.792 270.875 li
136.958 270.875 li
136.958 273.708 li
134.125 273.708 li
134.125 276.542 li
cp
0 0 0 1 cmyk
@
115.875 268.292 mo
118.708 268.292 li
118.708 271.125 li
121.542 271.125 li
121.542 268.292 li
124.375 268.292 li
124.375 265.458 li
121.542 265.458 li
121.542 262.625 li
118.708 262.625 li
118.708 265.458 li
115.875 265.458 li
115.875 268.292 li
cp
.743191 .712459 0 0 cmyk
ef
115.875 268.292 mo
118.708 268.292 li
118.708 271.125 li
121.542 271.125 li
121.542 268.292 li
124.375 268.292 li
124.375 265.458 li
121.542 265.458 li
121.542 262.625 li
118.708 262.625 li
118.708 265.458 li
115.875 265.458 li
115.875 268.292 li
cp
0 0 0 1 cmyk
@
100.875 261.042 mo
103.708 261.042 li
103.708 263.875 li
106.542 263.875 li
106.542 261.042 li
109.375 261.042 li
109.375 258.208 li
106.542 258.208 li
106.542 255.375 li
103.708 255.375 li
103.708 258.208 li
100.875 258.208 li
100.875 261.042 li
cp
.743191 .712459 0 0 cmyk
ef
100.875 261.042 mo
103.708 261.042 li
103.708 263.875 li
106.542 263.875 li
106.542 261.042 li
109.375 261.042 li
109.375 258.208 li
106.542 258.208 li
106.542 255.375 li
103.708 255.375 li
103.708 258.208 li
100.875 258.208 li
100.875 261.042 li
cp
0 0 0 1 cmyk
@
88.625 253.042 mo
91.4585 253.042 li
91.4585 255.875 li
94.2915 255.875 li
94.2915 253.042 li
97.125 253.042 li
97.125 250.208 li
94.2915 250.208 li
94.2915 247.375 li
91.4585 247.375 li
91.4585 250.208 li
88.625 250.208 li
88.625 253.042 li
cp
.743191 .712459 0 0 cmyk
ef
88.625 253.042 mo
91.4585 253.042 li
91.4585 255.875 li
94.2915 255.875 li
94.2915 253.042 li
97.125 253.042 li
97.125 250.208 li
94.2915 250.208 li
94.2915 247.375 li
91.4585 247.375 li
91.4585 250.208 li
88.625 250.208 li
88.625 253.042 li
cp
0 0 0 1 cmyk
@
454.125 216.792 mo
456.958 216.792 li
456.958 219.625 li
459.792 219.625 li
459.792 216.792 li
462.625 216.792 li
462.625 213.958 li
459.792 213.958 li
459.792 211.125 li
456.958 211.125 li
456.958 213.958 li
454.125 213.958 li
454.125 216.792 li
cp
.743191 .712459 0 0 cmyk
ef
454.125 216.792 mo
456.958 216.792 li
456.958 219.625 li
459.792 219.625 li
459.792 216.792 li
462.625 216.792 li
462.625 213.958 li
459.792 213.958 li
459.792 211.125 li
456.958 211.125 li
456.958 213.958 li
454.125 213.958 li
454.125 216.792 li
cp
0 0 0 1 cmyk
@
454.125 216.792 mo
456.958 216.792 li
456.958 219.625 li
459.792 219.625 li
459.792 216.792 li
462.625 216.792 li
462.625 213.958 li
459.792 213.958 li
459.792 211.125 li
456.958 211.125 li
456.958 213.958 li
454.125 213.958 li
454.125 216.792 li
cp
.743191 .712459 0 0 cmyk
ef
454.125 216.792 mo
456.958 216.792 li
456.958 219.625 li
459.792 219.625 li
459.792 216.792 li
462.625 216.792 li
462.625 213.958 li
459.792 213.958 li
459.792 211.125 li
456.958 211.125 li
456.958 213.958 li
454.125 213.958 li
454.125 216.792 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B64EDFF4A769B0E349B0B8A8759517834132408F730D5925332B160EAFC678A283B12B9F41A37E5CF702EF2D2E718583BF> |-/H <1C60D8A8C9B6079F4F4E07EFC7C894BAD912B65087B319FD4C6D4407FA6BDEE59584D043C3070AE38B> |-/T <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522CE1F006> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 65 /A putdup 72 /H putdup 84 /T putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two 2{/.notdef}rp /five 11{/.notdef}rp /A 3{/.notdef}rp /E /F /G /H 7{/.notdef}rp /P 3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [17.1056 0 0 -17.1056 0 0 ]msf184.218 76.5957 mo(HEAT)[12.353 11.4097 11.4092 0 ]xsh167.335 70.8848 mo
167.335 68.5391 165.431 66.6348 163.085 66.6348 cv
160.739 66.6348 158.835 68.5391 158.835 70.8848 cv
158.835 73.231 160.739 75.1348 163.085 75.1348 cv
165.431 75.1348 167.335 73.231 167.335 70.8848 cv
.149691 .764157 .56347 .013672 cmyk
ef
167.335 70.8848 mo
167.335 68.5391 165.431 66.6348 163.085 66.6348 cv
160.739 66.6348 158.835 68.5391 158.835 70.8848 cv
158.835 73.231 160.739 75.1348 163.085 75.1348 cv
165.431 75.1348 167.335 73.231 167.335 70.8848 cv
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-/S <1C60D8A8C9B64EDFB8831DC7D3DA5352C683CFE7ADDB1F2F7D19136185D1F816C3BE09EC1E84619F52030DEE9359B5F11BDC142E51FA821DBBAA94D355CDB3194A176F4CAFE2F8762140A61B8DB4801B25EC39CF8CD3F7F21C11EB8BF2FEAA7BF71364CB0E29D9153C5428F8E2556CFDCDFCF7C63E7AA008F518E6EAA3DEB5EC8960FB0234452B3B55FF1BB7B980C85D0DFF1CA34BE144E02D5E8A581ACC1C4C80D7396F6E85C6E2CC3BAA0E140AF4F656AC7D073077DF7B4E8B5856F92B> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 77 /M putdup 83 /S putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two 2{/.notdef}rp /five 11{/.notdef}rp /A 3{/.notdef}rp /E /F /G /H 4{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [17.1056 0 0 -17.1056 0 0 ]msf184.218 101.843 mo(AMS)sh221.286 101.843 mo(-02)sh163.125 92.375 mo
158.875 92.375 li
158.875 100.875 li
167.375 100.875 li
167.375 92.375 li
163.125 92.375 li
cp
.611749 0 .900298 0 cmyk
ef
163.125 92.375 mo
158.875 92.375 li
158.875 100.875 li
167.375 100.875 li
167.375 92.375 li
163.125 92.375 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginDOUHVU+Helvetica dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7EF320B5E1B1901757FD427860A5A6931496E07> |-systemdict /gcheck known {setglobal} if end {end} ifendDOUHVU+Helvetica /Encoding getdup 76 /L putpop%ADOEndSubsetFont
/DOUHVU+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period /slash /zero /one /two 2{/.notdef}rp /five 11{/.notdef}rp /A 3{/.notdef}rp /E /F /G /H 3{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /.notdef /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]DOUHVU+Helvetica nfDOUHVU+Helvetica*1 [17.1056 0 0 -17.1056 0 0 ]msf184.218 127.916 mo(PAMELA)[11.4092 11.4097 14.249 11.4092 9.51318 0 ]xsh158.875 123.792 mo
161.708 123.792 li
161.708 126.625 li
164.542 126.625 li
164.542 123.792 li
167.375 123.792 li
167.375 120.958 li
164.542 120.958 li
164.542 118.125 li
161.708 118.125 li
161.708 120.958 li
158.875 120.958 li
158.875 123.792 li
cp
.743191 .712459 0 0 cmyk
ef
158.875 123.792 mo
161.708 123.792 li
161.708 126.625 li
164.542 126.625 li
164.542 123.792 li
167.375 123.792 li
167.375 120.958 li
164.542 120.958 li
164.542 118.125 li
161.708 118.125 li
161.708 120.958 li
158.875 120.958 li
158.875 123.792 li
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DOUHVV+SymbolMT*1 uf/DOUHVV+SymbolMT uf/SymbolMT uf/DOUHVU+Helvetica*1 uf/DOUHVU+Helvetica uf/Helvetica ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
