%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: jet_2013_3.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: huston
%%CreationDate: 11/4/13, 3:59 PM
%%BoundingBox: -10 45 500 516
%%HiResBoundingBox: -23 23 544 567
%%CropBox: -23 23 544 567
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 669 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2013-11-04T15:59:08"
   xmp:CreatorTool="ROOT Version 5.32/00"
   pdf:Keywords="ROOT"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">/RPP/jet_2013_3.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -567 translate
pgsv
[0 1 -1 0 544 0 ]ct
gsave
np
gsave
0 0 mo
0 567 li
544 567 li
544 0 li
cp
clp
544 567 mo
544 .0709839 li
-.0999756 .0709839 li
-.0999756 567 li
cp
false sop
0 0 0 0 cmyk
ef
462.195 481.39 mo
462.195 56.1929 li
54.1198 56.1929 li
54.1198 481.39 li
cp
ef
.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
462.195 481.39 mo
462.195 56.1929 li
54.1198 56.1929 li
54.1198 481.39 li
cp
0 0 0 1 cmyk
@
462.195 481.39 mo
462.195 56.1929 li
54.1198 56.1929 li
54.1198 481.39 li
cp
0 0 0 0 cmyk
ef
462.195 481.39 mo
462.195 56.1929 li
54.1198 56.1929 li
54.1198 481.39 li
cp
0 0 0 1 cmyk
@
462.195 481.39 mo
462.195 481.39 li
462.195 378.233 li
462.195 336.542 li
462.195 309.964 li
462.195 290.412 li
462.195 274.937 li
462.195 262.128 li
462.195 251.201 li
462.195 241.673 li
462.195 233.226 li
462.195 225.639 li
462.195 218.754 li
462.195 212.451 li
462.195 206.64 li
462.195 201.249 li
462.195 196.222 li
462.195 191.512 li
462.195 187.083 li
462.195 182.902 li
462.195 178.943 li
462.195 175.184 li
462.195 171.605 li
462.195 168.19 li
462.195 164.925 li
462.195 161.797 li
462.195 158.795 li
462.195 155.909 li
462.195 153.13 li
462.195 150.452 li
462.195 147.866 li
462.195 145.367 li
462.195 142.95 li
462.195 140.608 li
462.195 138.337 li
462.195 136.134 li
462.195 133.994 li
462.195 131.913 li
462.195 129.889 li
462.195 127.919 li
462.195 125.999 li
462.195 124.127 li
462.195 122.302 li
462.195 120.52 li
462.195 118.779 li
462.195 117.079 li
462.195 115.416 li
462.195 113.789 li
462.195 112.198 li
462.195 110.639 li
462.195 109.113 li
462.195 107.617 li
462.195 106.15 li
462.195 104.712 li
462.195 103.301 li
462.195 101.916 li
462.195 100.557 li
462.195 99.221 li
462.195 97.91 li
462.195 96.621 li
462.195 95.354 li
462.195 94.108 li
462.195 92.882 li
462.195 91.677 li
462.195 90.49 li
462.195 89.323 li
462.195 88.173 li
462.195 87.04 li
462.195 85.925 li
462.195 84.826 li
462.195 83.743 li
462.195 82.675 li
462.195 81.623 li
462.195 80.585 li
462.195 79.562 li
462.195 78.552 li
462.195 77.556 li
462.195 76.573 li
462.195 75.603 li
462.195 74.645 li
462.195 73.699 li
462.195 72.766 li
462.195 71.843 li
462.195 70.932 li
462.195 70.032 li
462.195 69.143 li
462.195 68.264 li
462.195 67.396 li
462.195 66.537 li
462.195 65.689 li
462.195 64.85 li
462.195 64.02 li
462.195 63.199 li
462.195 62.387 li
462.195 61.584 li
462.195 60.79 li
462.195 60.004 li
462.195 59.226 li
462.195 58.456 li
462.195 57.694 li
462.195 56.94 li
462.195 56.193 li
1 .983429 .035523 .0644236 cmyk
@
54.12 30.51 mo
54.12 11.4855 li
35.0955 11.4855 li
35.0955 30.51 li
cp
0 0 0 0 cmyk
ef
54.12 30.51 mo
54.12 11.486 li
@
54.12 11.486 mo
35.095 11.486 li
@
35.095 11.486 mo
35.095 30.51 li
@
35.095 30.51 mo
54.12 30.51 li
@
39.852 30.51 mo
39.852 11.486 li
@
%ADOBeginSubsetFont: Helvetica Initial
ct_T42Dict begin
-0.949 -0.48 1.445 1.121
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica
Type42DictBegin
[<00010000000c000c000c000c4f532f3210481d3e000000cc000000606376
74208de93e9e0000012c0000036c6670676de80497d30000049800000a1d
676c7966b613125000005cd80003f3ec68656164c0a0e84700000eb80000
003668686561ac0f210900000ef000000024686d747829ca1e3100000f14
000022486c6f63610f55b1d80000315c0000224c6d61787010fc0b2d0000
53a8000000206e616d6558b85cfc000053c80000054070726570bc836e31
00005908000003cf676469720000000000000000000000000003fc780190
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300400009
fb020600fea4003d079a01cd2000019f4f010000042f05bd000000200000
05c0001005bd00280580001a042f001f0000ffd90000ffda0000ffd9fe55
ffe605c70010fe6dfff1033b000000b9000000b902fe3f3c00c0008d009b
00af000600a800c00028005e009800c9016a00b9015c00b400d6011e002e
0080000400b8004c00cc01ffffd1006600a400af007400c2009500b1000c
0028006d0015004c008e0125ff7a000c0040004c00620084ffa200240038
008600bd0039005e008e00edffa9ffb300400052005500aa00ab00c200cb
012302b10413ffaeffe4000800510074008400aa00d1ff4cffaf0012002c
004200500051008400be012503daff680018003b0098009c009f00a100c1
00ec018201b4ff68ff76ffd0ffe100020018001c00530053007d01b401e1
03af0486ff9cffeafffe001f0028002a00520060009300a300aa00af00af
00c001000145016b0174019301950240028202b404850517fefd00060029
004700470048006f008800b400b900c400f200f901ef02180310037403c5
ff35fff3000b004b004c0052005500650076007600870087008e00ab00bb
0106013001430150017d0194019501d3022a025502580277027802e6034e
035c037903d3047304b2058c0598060bfef5ffbbffc7ffd50017001d005b
0072007e009c00c200d000f400fa01030106011c0125013b0142015e015e
0180019b02b901a101b9025001c001d002aa01df01e301ef01fb0205020c
0215022b0274029302ab02c202ce03690395039903df03f5043e050205a1
05e5062507dbfe62fe89feceff3bffe1fff800030008002100390042004e
005f0061006f00700034007f008e00ad00ad00af00bd00c400c500c900c9
00c900e3011c00ed00f800f901000112011a0132014d014d014e014f0166
0169019e01ba01ba01be01e301ef01f602000200020902110217021c0253
0262026d028002d50280031b032a034a035a03af03af03c803d603fb03fb
04050413041504470449008c046d049a049a04a604a804b204cf0539053e
054e055605800589058c036305d105d6067e068e06b206ef06f00728074c
076f078c00b400c900c000c10000000000000000000000000004012400af
0032006e0063014401620096014301a10161008a00740064018801ef0170
0028ff5d037e0347023000aa00be007b0062009a007d0089035c00a1ffd8
03aa00d70093006c0000008000a70442001d0597001d00820030002a002a
002a002a002a40292a292827262524232221201f1e1d1c1b1a1918171615
14131211100d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b0004361
7d6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164
b050515845441b2121592d2c20b0032552582359212d2c69b04061b0008b
0c6423648bb8400062600c642364615c58b0036159b002602d2c45b0112b
b0172344b0177ae5182d2c45b0112bb01723442d2c45b0112bb017458cb0
172344b0177ae5182d2cb002254661658a46b040608b482d2cb002254660
8a46b040618c482d2c4b53205c58b002855958b00185592d2c20b0032545
b019236a4445b01a23444565234520b00325606a20b009234223688a6a60
6120b0005258b21a401a4523614459b0005058b219401945236144592d2c
b9187e3b210b2d2cb92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b
2d2cb92d41d2c00b2d2cb9187ec4e00b2d2c4b525845441b2121592d2c01
20b003252349b04060b0206320b000525823b002253823b002256538008a
63381b212121212159012d2c456920b00943b0022660b00325b005254961
b0805358b21940194523616844b21a401a4523606a44b209191a45652345
604259b00943608a103a2d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20
b001600110203c003c2d2c20b001610110203c003c2d2c764520b0032545
23616818236860442d2c7645b00325452361682318456860442d2c7645b0
032545616823452361442d2c4569b014b0324b505821b0205961442db800
2b2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db8
002c2c2020456944b001602db8002d2cb8002c2a212db8002e2c2046b003
254652582359208a208a49648a204620686164b004254620686164525823
658a592f20b00053586920b000545821b040591b6920b000545821b04065
59593a2db8002f2c2046b00425465258238a592046206a6164b004254620
6a61645258238a592ffd2db800302c4b20b0032650585158b080441bb040
44591b21212045b0c05058b0c0441b2159592db800312c2020456944b001
602020457d691844b001602db800322cb800312a2db800332c4b20b00326
5358b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b00326
53582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a2359
20b80003265358b0032545b8018050582321b8018023211bb00325452321
2321591b2159442db800342c4b535845441b2121592db800352c4bb80009
5058b101018e59b801ff85b800441db9000900035f5e2db800362c202045
6944b001602db800372cb800362a212db800382c2046b003254652582359
208a208a49648a204620686164b004254620686164525823658a592f20b0
0053586920b000545821b040591b6920b000545821b0406559593a2db800
392c2046b00425465258238a592046206a6164b0042546206a6164525823
8a592ffd2db8003a2c4b20b0032650585158b080441bb04044591b212120
45b0c05058b0c0441b2159592db8003b2c2020456944b001602020457d69
1844b001602db8003c2cb8003b2a2db8003d2c4b20b003265358b0801bb0
40598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b801
008a8a1b8a235920b0032653582321b801408a8a1b8a235920b800032653
58b0032545b8018050582321b8018023211bb003254523212321591b2159
442db8003e2c4b535845441b2121592db8003f2c4bb800095058b101018e
59b801ff85b800441db9000900035f5e2db800402c2020456944b001602d
b800412cb800402a212db800422c2046b003254652582359208a208a4964
8a204620686164b004254620686164525823658a592f20b00053586920b0
00545821b040591b6920b000545821b0406559593a2db800432c2046b004
25465258238a592046206a6164b0042546206a61645258238a592ffd2db8
00442c4b20b0032650585158b080441bb04044591b21212045b0c05058b0
c0441b2159592db800452c2020456944b001602020457d691844b001602d
b800462cb800452a2db800472c4b20b003265358b0801bb040598a8a20b0
032653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a23
5920b0032653582321b801408a8a1b8a235920b80003265358b0032545b8
018050582321b8018023211bb003254523212321591b2159442db800482c
4b535845441b2121592db800492c4bb800095058b101018e59b801ff85b8
00441db9000900035f5e2db8004a2c2020456944b001602db8004b2cb800
4a2a212db8004c2c2046b003254652582359208a208a49648a2046206861
64b004254620686164525823658a592f20b00053586920b000545821b040
591b6920b000545821b0406559593a2db8004d2c2046b00425465258238a
592046206a6164b0042546206a61645258238a592ffd2db8004e2c4b20b0
032650585158b080441bb04044591b21212045b0c05058b0c0441b215959
2db8004f2c2020456944b001602020457d691844b001602db800502cb800
4f2a2db800512c4b20b003265358b0801bb040598a8a20b0032653582321
b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653
582321b801408a8a1b8a235920b80003265358b0032545b8018050582321
b8018023211bb003254523212321591b2159442db800522c4b535845441b
2121592db800532c4bb800095058b101018e59b801ff85b800441db90009
00035f5e2db800542c2020456944b001602db800552cb800542a212db800
562c2046b003254652582359208a208a49648a204620686164b004254620
686164525823658a592f20b00053586920b000545821b040591b6920b000
545821b0406559593a2db800572c2046b00425465258238a592046206a61
64b0042546206a61645258238a592ffd2db800582c4b20b0032650585158
b080441bb04044591b21212045b0c05058b0c0441b2159592db800592c20
20456944b001602020457d691844b001602db8005a2cb800592a2db8005b
2c4b20b003265358b0401bb000598a8a20b0032653582321b0808a8a1b8a
235920b0032653582321b800c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db8005c2c4b535845441b2121592d000000000100000000000078832fcc
5f0f3cf500110800000000005f4d8f0000000000cb97f49ff865fc270b91
08f9000000090001000100000000000100000629fe2900000c01f865fced
0b9100010000000000000000000000000000089205120042000000000239
000002390000023900ed02d700520473000004730040071d004205560059
0187009c02aa008e02aa0044031d004e04ac005c023900aa02aa00550239
00af0239000004730040047300c404730040047300310473003404730042
0473004d0473004b0473004204730049023900e3023900e304ac001c04ac
005c04ac001c0473009c081f00e10556001e0556009705c7005a05c700a5
055600af04e300af0639006305c700a1023900c9040000230556009c0473
009c06aa009705c7009c06390050055600af0639005005c700b405560060
04e3002105c700aa05560034078d00250556002a0556002a04e3002f0239
00800239ffbb0239002f03c100780473000002aa00260473005204730076
0400003b04730038047300480239001c0473003d0473008401c7008401c7
ffda0400008001c7008906aa0084047300840473003b047300760473003c
02aa00890400004202390017047300800400000b05c700120400000b0400
00150400003402acffd50214009002ac002a04ac00120556001e0556001e
05c7005a055600af05c7009c0639005005c700aa04730052047300520473
00520473005204730052047300520400003b047300480473004804730048
0473004802390067023900080239000002390025047300840473003b0473
003b0473003b0473003b0473003b04730080047300800473008004730080
047300500333006f04730068047300380473004b02cd0095044cfff504e3
00c705e5001505e50012080000ed02aa008a02aa00520464005c08000010
0639004205b4002a0464005c0464005a0464005c0473ffe1049cffb403f4
006a05b400280696001c0464002f0231ff7902f6003b02ec00310625005e
071d004904e3005c04e300ba02aa00e804ac005c0464ffef047300280464
005c04e50071047300c2047300c2080000ed023900000556001e0556001e
0639005008000049078d00470473fffb080000f102aa004e02aa004e01c7
008401c700aa0464005c03f40042040000150556002a0156feaa05f40060
02aa00b402aa00aa0400001c0400001c047300500239009701c700aa02aa
004e0800000e0556001e055600af0556001e055600af055600af0239006b
0239fff902390020023900020639005006390050065200690639005005c7
00aa05c700aa05c700aa023900bd02aa002a02aafff702aa001502aa0019
02aa00f702aa008402aa007902aaffff02aa00a102aa002a0473ffe801c7
ffd7055600600400004204e3002f040000340214009005c700210473003d
0556002a04000015055600800473008004ac005c04ac007402aa005702aa
000b02aa000706ac005a06ac00a306ac004b04730000063900630473003d
023900c9055600600400004205c7005a0400003b05c7005a0400003b0473
00380556001e047300520556001e047300520556001e0473005205c7005a
0400003b05c7005a0400003b05c700a505480038055600af047300480556
00af04730048055600af04730048055600af04730048055600af04730048
063900630473003d063900630473003d063900630473003d0473003d05c7
00a10473008405c700350473003e038f00690371004403330059031f0065
0239003501c7ffdf063900c9038e00840400002301c7ffa3055600320400
fff10473009c021f00830473009c01c7000c0473009c021a004e0473009c
027b008905c7009c0473008405c7002a0473000a05c7009c047300840473
000e063900500473003b063900500473003b063900500473003b05c700b4
02aa008905c7004902aa001705c700b402aa004205560060040000420556
00600400004204e300210239001704e3002102e1001704e30021028fffe2
05c700aa0473008005c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080078d002505c700120556002a
0400001504e3002f0400003404e3002f04000034055600600400004204e3
0021023900170473004b0000fcfc0000fcfc0000fc9c0000fc680000fc86
0000fc8a0000fd690000fcc40000fcf60000fc700000fc9c0000fd5b0000
fcea0000fd120000fc9105c70021063900630473003d0473009c01c70089
0556009c0400008005c7009c0473008405c700b402aa008901aaffdb0237
00e102aa005501c7ffda040000800239001c04730048047300480400003a
047300510000fd3c0000fc660000fc8a0239fffb0239fffb05c7009c0473
00840000fcc4056d00240556009805560098042700980556002505560098
0804001404e3003b05c7009805c7009805560098052f002506aa009805c7
00980639005005c700980556009805c7005004e3001d0556002f06390042
0556002505c70098052f0060078d0098078d009806aa001d071d00ba0556
00b605c700640800009805cb006a047300560473004804730098031b0087
04e3004e04730050063d0017040000330473007f0473007f047300980498
001b055400870473008704730048047300870473007d0400004804000033
0400001706a800460400001404730087044e005c063900870639008704e3
001b05c70087040000870400001b06390087047700500556009804730050
04270098031b0087023900ba01c700870400002305c70050040000480239
001d01c7ffe30800002b06c3001b08000098069c008701c7ffdd05560062
0639004e0473001b0556009804730098040000480617001b0473001b0556
002f0400001705c700980473008704730098031d00870000fd5b0000fd5b
0000fd5b0000fd5b0000fc700000fd930000fd2a0000fc8a0000fcfc0000
fcfc0000fc860000fd690000fcc40000fcf60000fd930000fc9c0000fc9c
0000fc8a0000fc8a0000fc680000fc860000fc660000fc680000fc860000
fc660000fc660000fd500000fc660000fd5b0000fc8a0000fc8d0000fd2a
000000000239001b0473008306aa008302aa008806aa008302aa008902aa
0088042b0052042b005302020087033afffd02390017023900170400000a
05c70011040000140473009c0473009d0473009c0400008004b2003904b2
003905c7005905c7002104890049055600af055600600400004204980039
06e600aa05950080060a0052021400b6037300b6023900c3048c002b0400
003b0134005102aa00c102aa00c20b06000e055600ed029600ed02aa004e
01c700aa02aa0055044cfff5042f00c1042f00c2056500c1056500c202aa
0055029600ed02aa0055080000f102d500a4011d00000000000000000000
000000000000000000000000000000000000000002390000023900000239
000002390000023900000239000002390000023900000239000002390000
00000000000000000000000000000000011d0000008f000002aafff70370
00b60473009c02aa005502aa0006044c0072044c00730556001e04e300ae
04730048071c00500568003b0000fd5e0000fd5e0000fd5e0000fd5e0000
fcc90000fcd20000fd980000fccd0000fcef0000fce10000fcd90000fcec
0000fc5e0000fd440000fd4a0000fccf0000fcd10000fc860000fc910000
fcc10000fcc10000fcc10000fcc20000fcc20000fc8a01550061027b0061
0155006101550061046400320464002b03f4002d03f4002f05b4011305b4
00280231006b0231fe830464ff330464ffef0464002b0464002d08fa006f
0816006f0556009c023900c9047200c906ab00c9078f00c905560034078f
003409c800340c010034078f00c90556002a078f002a09c8002a0473009c
05c7005a05c700a506aa009701c70084038e00840555008405c700840400
000b05c7000b078e000b0955000b05c700840400000b05c7000b078e000b
01c700890400003b0473003806aa008409e2007408c1004f07db003807da
006b05a7007102f7005808e7007106f0006b05a100530556001e04730052
0239001e0239ffff063900500473003b05c700aa0473008005c700aa0473
008005c700aa0473008005c700aa0473008005c700aa047300800556001e
047300520556001e0473005208000010071d0049063900630473003d0556
009c04000080063900500473003b063900500473003b01c7ffbe09cd0054
08fc006f07fb00380639006305c7009c047300840556001e047300520800
0010071d00490639004204e3005c0556001e047300520556001e04730052
055600af04730048055600af047300480239ff7101c7ff350239fff801c7
ffaa063900500473003b063900500473003b05c700b402aaffd605c700b4
02aa004f05c700aa0473008005c700aa0473008005c700a1047300840556
001e04730052055600af04730048063900500473003b063900500473003b
063900500473003b063900500473003b0556002a0400001502aa004e0239
00c90556001e047300520556009704730076055600970473007605560097
0473007605c7005a0400003b05c700a50473003805c700a50473003805c7
00a50473003805c700a50473003805c700a504730038055600af04730048
055600af04730048055600af04730048055600af04730048055600af0473
004804e300af0239001c063900630473003d05c700a10473008405c700a1
0473008405c700a10473008405c700390473001b05c700a1047300840239
ffec01c7ff9e02390027023900160556009c040000800556009c04000080
0556009c040000800473009c01c700890473009c01c7ff9d0473009c01c7
ffb50473009c01c7ffc006aa009706aa008406aa009706aa008406aa0097
06aa008405c7009c0473008405c7009c0473008405c7009c0473008405c7
009c04730084063900500473003b063900500473003b063900500473003b
063900500473003b055600af04730076055600af0473007605c700b402aa
008905c700b402aa008305c700b402aa004a05c700b402aa001805560060
040000420556006004000042055600600400004205560060040000420556
00600400004204e300210239001704e300210239001704e300210239ffe2
04e300210239ffe705c700aa0473008005c700aa0473008005c700aa0473
008005c700aa0473008005c700aa04730080055600340400000b05560034
0400000b078d002505c70012078d002505c70012078d002505c70012078d
002505c70012078d002505c700120556002a0400000b0556002a0400000b
0556002a0400001504e3002f0400003404e3002f0400003404e3002f0400
0034047300840239001005c70012040000150239001c0556001e04730052
0556001e047300520556001e047300520556001e0473ffcb0556001e0473
00520556001e047300520556001e047300520556001e047300520556001e
047300520556001e047300520556001e047300520556001e047300520556
00af04730048055600af04730048055600af04730048055600af04730048
0556008c0473fff0055600af04730048055600af04730048055600af0473
0048023900ae02390099023900c701c70084063900500473003b06390050
0473003b063900500473003b063900500473ffd8063900500473003b0639
00500473003b063900500473003b071c00500568003b071c00500568003b
071c00500568003b071c00500568003b071c00500568003b05c700aa0473
008005c700aa0473008006e600aa0595008006e600aa0595008006e600aa
0595008006e600aa0595008006e600aa059500800556002a040000150556
002a040000150556002a040000150556002a04000015055600af04730048
055600af04730048056d007505df0096048600520486007f072300140589
0017056d002404860043056d002404860043056d00750486005208d9001a
06dd0012054f0039040a003005df00960486007f05df00960486007f0655
00500486005205df006004120023056d001004120019056d001004120019
056d00100412001905ac005e047a0069074800ba0600008d08000010071d
004906aa009706aa008405c700b402aa004c0222ffc50556001b05c700c5
04e300d505c70029055600c504e3004805c700b006390071023900ba0556
00b00556002f071d00be05c700b004e300620639007105c700b0055600c5
04e3005804e1002f0556002905c700500558003d06a8007f063900640239
000a0556002904e3005a04e300b40473001204e3006804730077038d004a
04e3003b04e5008f023900b0047300b00473002504e300b8047300420400
007104e3006f04e300aa0473004c04e3006f0400003b04e300b805c70077
0473000e05c7008f0610006a0239000a04e300b80239009a0222000b0000
fd19023900b0016c0088016c00880000fcfc0000fcfc016c008802ca001a
02b5001a03050088031200880222002e0222002f031e00880362006f0333
00880362006f0735007f0625005e0639ffef01c7008401c700aa047200ed
06ac009c06ac00ed04730048047300480556001e04730052047300520556
00af04730048055600af04730048055600af047300480239fff00239ffdb
01c70079063900500473003b063900500473003b063900500473003b0556
00600400004205c700aa047300800400000b06e600aa0595008006020061
0473ffd605c7fff20473008406aa008403f0009c0460009a03a6005a03e9
000c02cf00020448005c06020061047300500655004e0486004c06390050
02aa001e07c6002407c6002408e6ffca0000f9200000fa0b0000fa0b0000
fa060000fa0606020061047300500655004e0486004c0222002f02b5001a
0473002504e3002f040000340473003b04d2008404dc00380473007204bd
003804d7003d0473008204d7008202220086078d00470387008802aa0086
04d2003c04b80032052b00320772003805600017043a001705ce001c04c2
008904b8008901a9008a01a9008a01c700aa0187007802aa000802aa00c1
02aa003a0187007802aa000802aa00c102aa003a01a9008a01a9008a02aa
001e02aafff7023a0042023a004100e4ffed015500450155004401c40044
02e400090200000b023a004e023a004f0256000e0256000e025600240256
002402aa00550256002e0256002e0256002e020000210200000600e30044
0256003a023a000902560024025600240256000e0256000e02aa0078023a
004f0000fccd0000fca20000fca20000fd6f0000fd6f0000fc490000fc49
0000fb9e0000fca20000fc490000fccd0000fcc20000fcc2000000000239
0000000000000000000000000000031d004e031d004e06da00c107c60024
023900e308e6009c07c60024071d00d00703001b02390080023900800000
00000000000000000000000000000000000000000000067b003a023a0020
0239001a02390021023a002702390025023a0021023900240256002e0155
002b0256002e0155004701550022023a0042023a0020023a006202390020
023900180239001a02390021023a002702390025023a0021023900240256
002e0155002b0256002e0155004701550022063c0011063900630473009c
0473009c0556002a06ab002806000030075600110473007207c8005806ac
005a05c7005a0556005904e500710696001c06ab003406ab0028055600af
04730076055600af0473007604e300020639005004c400a1024100230369
001105c7005002bb0023033afffd0473009c0473009c01c7002a01c7002a
0473003d04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a05c1005b05b3005b076c00880776008807760088078d0088
07ca006f07a0006f04730077047300770473007704730077047300770473
007706c2008806c200880874008808890088085b00880868008804e3003b
04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b04e3003b0733
00880733008808e5008808fa008808cc008808d900880929006f0929006f
023900b0023900b002390041023900390239003d0239003d023900230239
002303a5008803a5008805570088056c0088053e0088054b0088059b006f
059b006f04e3006f04e3006f04e3006f04e3006f04e3006f04e3006f07a5
008807a5008809570088096c0088093e0088094b008804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b806c200880889
00880868008808b8006f0610006a0610006a0610006a0610006a0610006a
0610006a0610006a0610006a07910088079100880943008809580088092a
0088093700880987006f0987006f04e3005a04e3005a0473007704730077
04e3003b04e3003b023900b0023900b004e3006f04e3006f04e300b804e3
00b80610006a0610006a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a04e3005a04e3005a0811005b080c005b0991008809d80088097f
0088099b008809d3006f09ce006f04e3003b04e3003b04e3003b04e3003b
04e3003b04e3003b04e3003b04e3003b096c0088096c00880b1e00880b33
00880b0500880b1200880b62006f0b62006f0610006a0610006a0610006a
0610006a0610006a0610006a0610006a0610006a09ca008809ca00880b7c
00880b9100880b6300880b7000880bc0006f0bc0006f04e3005a04e3005a
04e3005a04e3005a04e3005a04e3005a04e3005a0556001b0556001b0666
002e0661002f07a9001b04e3003b04e3003b04e3003b04e3003b04e3003b
06ac002e06a7002f06d2002e06ba002f083100b00239ffcf0239ffce0239
ffcc0239ffda0239ffdc0239ffc50239ffe10239ffee0343002e0348002f
04e300b804e300b804e300b804e300b804e300aa04e300aa04e300b804e3
00b8055600290556002906b1002e0713002f06c200880610006a0610006a
0610006a0610006a0610006a075a002e0789002f0792002e07a9002f0878
005e04e3005a0473007704e3003b023900b004e3006f04e300b80610006a
05d5007206a7002f06ba002f0348002f0789002f0713002f07a9002f0239
ffcb04e300b804ac002504ea011704f700a102f3001b02bb002304730025
04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3
005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a04e3005a
04e3005a0239ffd70239ffe40239ffd20239ffd70239ffdb0239ffdb0239
ffcd0239ffe00239ffc80239ffc30239ffdc0239ffdc0239ffd70239ffd7
0239ffd20239ffcd0239ffd20239ffd704e300b804e300b804e300b804e3
00b804e300b804e300b804e300b804e300b804e300b804e300b804e300b8
04e300b804e300b804e300b804e300b804e300b804e300b804e300b80666
002e0661002f05c1005b076c00880776008805b3005b07760088078d0088
0666002e0661002f05c1005b076c00880776008805b3005b07760088078d
00880343002e0348002f0348002f03a5008805570088053e008803a50088
056c0088054b00880343002e0348002f0348002f03a5008805570088053e
008803a50088056c0088054b008806b1002e0713002f0713002f06c20088
088900880868008806c20088088900880868008806b1002e0713002f0713
002f06c20088088900880868008806c20088088900880868008805c700b4
05c7005a0639005001c70020051d0029055600af05c700a10000fd310552
00680473003806390050047300480772005b0738004505e5001306ac003d
06ac003d06ac003a06ac003a066d001d04e3001b082200d005e1008a06a8
007f05c7008f0556001e0400000b079900d005cf008a04da003802ca0024
05d900160588003805c700b404730052031f000004da00a103eb00a10649
00a104cf00840556009c0400008004e3002f0400003408d9001406dd0030
054f0072040a0047056d00a50412007a05df00ac0486009105df00630412
003f04f8002b0412003a056d002e0412002405ac00ac047a007705ac00ac
047a00770556002a0556002a04d900bc037c009105ac00ac047a00770632
00a504df007a075f00ac059b00910556002a0556002a06fe0028054e0035
0748003a059400260748003a059400260772004805b3003805df00ac0486
009104730052054f00ac054f00ac06a8007f04dc005d0855004405e00026
05560025040000040556003404b6000b0400003b054f0072040a004705f1
0026049c0024023900bd056d002e04120024055600340556001e05c7005a
0400003b0473ffe804e3002101c7003e02bb002304e30021055600af0473
009c0473009c055600af047300480456002301c7ffda05c700aa01a90021
01a9002102aa003302aa003302aa003a02aaffe9023900e302aa003c02aa
003c057f005b04ac002504ac0074023900e304ac0025057c004c04ac0074
023900e3023900e3063900710412003f0412003f055600ae0473008005c7
005a06aa009705dd0097059b004605c7005a05c7005a05c7005a0400003b
0400003b0400003b0473003805ca003006c6002e063f002f031f001a062e
001904e900310488004502aa00be02aa00be02aa00be02aa00be0277003b
0277003b034b0000034b0000034b0000034b0000034b00000487001203f7
001e045e0054043600830436008302fd005d034f0012069900390655003e
052900300000f86506e1002204e9002001e0004b01e9004b015d0025015d
000a0199002a0198001202fb001703040017026700130257001202570012
02c8004b01d8000701d8000707e9003a097c004b0931004909310002013c
004b04570022058900050589000d04be00150442001801d8000701d80007
03fe003d03fe003d0404003a036f000b0467003c0000fb760000fcc10000
fc080000fc680000fc680000fa630000fce00000fe950000fc8e0000fc51
0000fa0b0000fc9f0465003604650022040100340401002407760017044c
001b03ea001d051a00340653003204c8003306c200880889008808680088
0556001b0556001b0239ffdf0239ffe105560029055600290404001505e5
001405e5001405e500140800ffeb0800ffeb080003b40800038c080003b4
0800038c0800ffe90800ffe9080003b40800038c0800ffe90800ffe90800
00000404001500e40042023a0029023a0024023a001e02000006023a0024
05c7005a0639006305c7005a047100220552002904e300210556001e04d0
002805c2004e04d9004e05c7005a06aa008405d0003106640037082d0035
0552006805520068039c003f0380003b039c003f0380003b039c00530381
003c039c00530381003c02eb005302e3005302e3005302e3005302eb0053
02eb000802e3000002e3000002e3000002eb000803630053036300530363
00530363005303630053027f00010330004503b2002603c3000b050b0031
069c00290390007f0000fc4f0000fc4f0000fc420000fc420000fc420000
fc420000fc010000fc010000fd4404650022040100240a3900500873003b
0436008304360083043600830329003a0329003a03550028050d00340329
005403290028032900330329003302f6003a02f6003a0329002b0143005e
02d7005b04bb005e0329005e0329002a02d70029032900270329002a0329
0054019400100329005b0373003704bb005e02d70008037800800329000d
0378004a04dc004d0632002a04be0033047300390473003b04e6003804e1
003a04fa0039076e003e0329000a0143005e01e400610329005b02d70008
037800800329000d037800790329000a042b005205c5001001c70084045e
0054070a002e06cb003504d6001b04fa001a02d8000d04e9001b0330000d
02d9000a02db000c01c700aa02aa004e01c700aa02aa004e01c700aa02aa
004e01c700aa02aa004e053d007a0708003b0310008f0574009708c00022
0473004002e00034047300400473003104730034047300420473004d0430
002b047300420473004903cc000903cc000903cc00090428005803b7006b
0497007104b0004f0797004a0418006a045a005505d5004c07a9004404bf
004b03e0003b0965004a03f900560419004e06ed004a0420003f04500050
06a3004a03f3004d0633006006b90047064000440419004b0667004503be
003e043d003d03d60052048400440412004a041600460497003903fa0058
0650002d03cd005e0560005604950032045e005503e9003e0462005406c2
0049044500f60000000000000068000000680000006800000068000000c8
000001180000027c0000042c000005bc0000074c00000790000008200000
08a400000994000009fc00000a6000000a9c00000adc00000b2400000c00
00000c4c00000d6400000ebc00000f5800001080000011ac000012400000
13a4000014d000001528000015a400001638000016880000172000001824
000019d400001aec00001bf400001d1400001dd800001e6000001ec40000
201400002084000020b4000021380000222c0000227c0000239400002440
0000253c000025e80000275c0000287000002a0800002a6400002af40000
2bb000002d4800002e4000002f0400002f9c00002ff400003054000030b8
0000315000003178000031a4000033380000340c00003510000035e80000
377c000038140000396400003a0400003a6000003ad400003bb400003bf8
00003cf000003da800003e9800003f7c00004064000040f0000042b00000
435000004404000045300000468c000047000000482c000048cc000049ac
000049f000004aec00004ba800004bc000004bd800004da000004db80000
4dd000004de800004e0000004e1800004e3000004e4800004e6000004e78
00004e900000503c000050540000506c000050840000509c000050b40000
50cc000050e4000050fc000051140000512c000051440000515c00005174
0000518c000051a4000051bc000051d4000051ec00005248000052c00000
548400005610000057dc00005868000058dc000059f400005b9400005cf8
00005ddc00005e0c00005e7000005f500000603400006210000063640000
63ec0000648c0000653c0000665c0000675c0000689400006960000069c0
00006a7000006af800006c5400006d2800006e4800007070000072180000
731000007374000073b800007468000075a40000769c00007728000077d8
0000788c000078f8000078f800007910000079280000794000007a6c0000
7c4c00007c8400007cc000007d6000007df000007e5000007eb000007f20
000080080000802000008038000080980000820400008274000082e40000
83a800008458000084dc00008534000085980000862c000088540000886c
000088840000889c000088b4000088cc000089180000898800008a080000
8a5400008a6c00008a8400008b2c00008b4400008b5c00008b7400008b8c
00008bdc00008c2000008ca400008cd000008d2c00008d5c00008e6c0000
8f5000008f9800009064000090a400009174000092040000921c00009234
0000924c00009264000092c0000093b00000951800009530000095480000
9600000096cc000096f4000097ac000097f8000098b0000099a400009a9c
00009bac00009d7800009e3000009f9c0000a10c0000a1640000a3940000
a5d00000a5e80000a6000000a6180000a6300000a6f80000a7100000a728
0000a7c00000a9840000a99c0000a9b40000a9cc0000a9e40000a9fc0000
aa140000aa2c0000ab640000ab7c0000ab940000ac400000ad480000ad60
0000ad780000ad900000ada80000adc00000add80000adf00000ae080000
ae200000ae380000ae500000ae680000ae800000ae980000aeb00000af98
0000afb00000b0500000b0680000b0ac0000b0c40000b1bc0000b1d40000
b25c0000b2740000b28c0000b2a40000b2bc0000b2d40000b2ec0000b304
0000b31c0000b3340000b3bc0000b4180000b4300000b4480000b4600000
b4780000b4900000b4a80000b4c00000b4d80000b4f00000b5080000b520
0000b6a00000b8040000b81c0000b8340000b84c0000b8640000b87c0000
b8940000b8ac0000b8c40000b8dc0000b8f40000b90c0000b9240000b93c
0000b9540000b96c0000ba840000ba9c0000bab40000bacc0000bae40000
bafc0000bb140000bbe00000bcc80000bce00000bcf80000bd100000bd28
0000bd400000bd580000bd700000bd880000bda00000bdb80000bdd00000
bde80000be000000be180000bfac0000c1400000c1d40000c2d00000c438
0000c4640000c4940000c4d80000c55c0000c5880000c5e80000c6180000
c67c0000c78c0000c7d40000c8140000c8680000c9440000ca100000ca3c
0000cb280000cb400000cb5c0000cb740000cb8c0000cba40000cbbc0000
cbd40000cbec0000cc040000cc1c0000cc980000cd100000cd3c0000cd8c
0000cdf40000ce6c0000cf240000cfdc0000d0a00000d2240000d2e40000
d3100000d3700000d3880000d3a00000d4400000d5040000d54c0000d5a4
0000d6980000d8280000d8640000d9340000d9940000da400000db980000
dc280000dcf00000dd5c0000ddf00000dea40000df240000e0740000e0d8
0000e1b00000e2a40000e2ec0000e3680000e5080000e5740000e5f80000
e69c0000e7100000e7bc0000e8b00000e9ac0000ea940000eb6c0000ec94
0000ee080000ef8c0000f1540000f2c00000f2fc0000f3b40000f49c0000
f52c0000f65c0000f6ec0000f7b40000f81c0000f8a40000f9580000f9d8
0000fb100000fb700000fcbc0000fdb00000fdf80000fe64000100ac0001
01140001019800010234000102a80001035400010448000105440001062c
000106f00001080c0001094c000109ec00010af800010b5000010bb40001
0be400010c3400010cc000010d9000010e4c00010ecc00010f4c00011080
000111b4000112d8000113fc00011480000115d0000116740001175c0001
17e8000118700001195800011a9c00011b9800011c5c00011d1400011d88
00011dfc00011e6400011ecc00011f2000011f7400011fc80001201c0001
20680001209c000121080001217c000121a8000121d40001220000012230
00012294000123a4000123d40001241400012458000124b4000125140001
2598000125c4000125f000012674000126a0000126cc0001270c00012828
00012868000128bc0001291c000129b000012a1c00012a1c00012abc0001
2b5400012c2400012c9400012d9000012e0000012e7000012f6c000130b8
0001310c0001319400013234000132d800013320000133980001341c0001
3500000135e4000136c400013734000138400001394800013a2000013b40
00013ca400013d0400013e7000013f6c00013fc40001407c0001414c0001
42b4000142e400014348000143a400014454000145100001456400014594
000145c4000149a400014a0800014a3800014ae000014b3c00014b680001
4bec00014c3400014c7800014cd800014d3400014d6000014d9000014dbc
00014de800014e1c00014e1c00014e1c00014e1c00014e1c00014e1c0001
4e1c00014e1c00014e1c00014e1c00014e1c00014e1c00014e1c00014e1c
00014e1c00014e1c00014e1c00014e1c00014e1c00014e1c00014e1c0001
4e1c00014e1c00014e1c00014e1c00014e5800014ebc00014fe400015010
000150240001507c000150dc000150f40001514c00015204000153840001
54f000015548000155e400015680000156d800015858000159000001594c
00015a6000015b0400015bbc00015cb800015d5400015e3000015ea40001
5f4c00015f9000015ff0000160300001605c000160c40001610c00016154
000161a0000161ec000162600001628c000162d0000162fc000163280001
634000016350000163680001637800016390000163a0000163b8000163cc
000163e4000163f40001640c0001641c000164340001644c0001645c0001
646c00016484000164a4000164bc000164cc000164e4000165040001652c
00016544000165540001656c0001658c0001659c000165ac000165bc0001
65cc000165dc000165f4000166140001662c0001663c0001665400016674
0001669c000166b4000166c4000166dc000166fc0001670c0001671c0001
672c0001673c0001675c0001677c0001679c000167b4000167cc000167e4
000167fc000168140001682c000168440001685c000168740001688c0001
68a4000168bc000168d4000168ec0001690c0001692c0001694c0001696c
0001698c000169ac000169cc000169ec00016a0c00016a2c00016a4c0001
6a6c00016a8400016a9c00016ab400016acc00016ae400016afc00016b14
00016b2c00016b4c00016b6c00016b8400016b9c00016bb400016bcc0001
6be400016bfc00016c1400016c3400016c5400016c6c00016c8400016c9c
00016cb400016ccc00016ce400016cfc00016d1400016d2c00016d440001
6d5c00016d7400016d8c00016da400016dbc00016dd400016dec00016e04
00016e1c00016e3400016e4c00016e6400016e7c00016e9400016eac0001
6ec400016edc00016ef400016f0c00016f2400016f3c00016f5400016f6c
00016f8400016fa400016fc400016fe4000170040001701c000170340001
7054000170740001708c000170a4000170b4000170c4000170dc000170f4
0001710c000171240001713c000171540001716c000171840001719c0001
71b4000171cc000171e4000171fc000172140001722c000172440001725c
000172740001728c000172a4000172c4000172e400017304000173240001
733c000173540001736c00017384000173a4000173c4000173dc000173f4
0001740c000174240001743c000174540001746c000174840001749c0001
74b4000174cc000174e4000174fc000175140001752c0001754400017564
000175840001759c000175b4000175cc000175e4000175fc000176140001
762c0001764400017664000176840001769c000176b4000176cc000176e4
000176fc000177140001772c000177440001775c000177740001778c0001
77a4000177bc000177d4000177ec000178040001781c0001783400017854
0001787400017894000178b4000178d4000178f400017914000179340001
794c000179640001797c00017994000179ac000179c4000179dc000179f4
00017a1400017a3400017a4c00017a6400017a7c00017a9400017aac0001
7ac400017ae400017b0400017b2400017b4400017b6400017b8400017b9c
00017bb400017bcc00017be400017bfc00017c1400017c2c00017c440001
7c5c00017c7400017c8c00017ca400017cbc00017cd400017cf400017d14
00017d3400017d5400017d6c00017d8400017d9c00017db400017dcc0001
7de400017dfc00017e1400017e2c00017e4400017e5c00017e7400017e8c
00017ea400017ebc00017ed400017eec00017f0400017f1c00017f340001
7f4c00017f6400017f7c00017f9400017fac00017fc400017fdc00017ff4
0001800c000180240001803c000180540001806c000180840001809c0001
80bc000180dc000180fc0001811c0001813c0001815c0001817c0001819c
000181bc000181dc000181fc0001821c0001823c0001825c0001827c0001
829c000182bc000182dc000182fc0001831c000183340001834c00018364
0001837c00018394000183ac000183cc000183ec0001840c0001842c0001
844c0001846c0001848c000184ac000184cc000184ec000185040001851c
000185340001854c000185640001857c00018594000185ac000185cc0001
85ec0001860c0001862c0001864c0001866c0001868c000186ac000186cc
000186ec000187040001871c000187340001874c000187640001877c0001
8794000187ac000187c4000187dc000187f40001880c000188240001883c
000188540001886c000188840001889c000188b4000188cc000188e40001
88fc000189140001892c000189440001895c000189740001898c000189a4
000189bc000189d4000189ec00018a0c00018a2c00018a4c00018a6c0001
8a8400018a9c00018ab400018acc00018ae400018afc00018b1400018b2c
00018b4400018b5c00018b7400018b8c00018ba400018bbc00018bd40001
8bec00018c0400018c1c00018c3400018c4c00018c6400018c7c00018c94
00018cac00018cc400018cdc00018cf400018d0c00018d2400018d3c0001
8d5400018d6c00018d8400018d9c00018dac00018dbc00018dd400018dec
00018e0400018e1c00018ed400018f34000190b4000190f00001912c0001
918c000191d400019254000193d4000194040001946c000194b400019568
000195ec00019640000197a80001980c000198e000019938000199800001
99e000019b7000019bdc00019d1c00019e8400019f0c00019fa40001a0ec
0001a2b40001a34c0001a4c40001a6180001a7300001a7d00001a8cc0001
a93c0001a9a80001aa240001ab240001ab680001ace00001ae200001af44
0001b05c0001b1ac0001b22c0001b2ac0001b4380001b5040001b5b80001
b7500001b8000001b8b80001b9040001b9640001b9c80001ba240001ba80
0001badc0001bb080001bb380001bb940001bc2c0001bcd00001bd400001
bdb00001bddc0001be080001be780001bf040001bf740001c0080001c198
0001c3040001c4640001c4c00001c51c0001c5340001c54c0001c5640001
c5840001c5a40001c5c40001c5e40001c6040001c61c0001c6340001c654
0001c6740001c6940001c6b40001c6d40001c6f40001c70c0001c7240001
c73c0001c75c0001c77c0001c79c0001c7bc0001c7d40001c7ec0001c80c
0001c82c0001c8440001c85c0001c8740001c9300001ca200001cac80001
cb5c0001cc680001cca40001cd800001ce7c0001cef00001cf680001d0a4
0001d1600001d24c0001d2fc0001d3900001d4680001d4ac0001d5100001
d5740001d7bc0001d8640001d8c80001d92c0001d9580001d9840001d99c
0001d9b40001d9cc0001d9e40001da100001daa80001db380001dbac0001
dc200001dcb00001dd780001dec00001dffc0001e1200001e2800001e364
0001e47c0001e4f00001e64c0001e7080001e7c40001e9040001e9dc0001
ea940001ebd40001edc00001eec00001f0300001f17c0001f1e00001f240
0001f2dc0001f3380001f3680001f3940001f3c40001f3f00001f4200001
f4480001f4740001f4a00001f5000001f59c0001f5dc0001f61c0001f6b8
0001f79c0001f8080001f87c0001f8f80001f98c0001fa000001fa780001
fb5c0001fc400001fc800001fcc00001fd040001fd480001fd740001fddc
0001fe440001feb0000200140002007c000200ac000200f8000201940002
01d80002021c0002025c0002029c000203ac00020490000204dc0002051c
0002055c000205ac000205fc00020660000206c400020740000207800002
07e800020834000209080002094400020944000209440002094400020944
00020944000209d800020ae400020b5c00020bc000020c4800020c600002
0d0800020e4400020ee800020f5c00020fd400020fd400020fd400020fd4
00020fd400020fd400020fd400021184000212ac00021330000214180002
156c000215bc000217a0000219040002196c00021994000219d400021a88
00021b3400021be000021d0800021d4800021df400021f2c00021fb00002
2098000221ec0002223c0002241c00022580000225e80002261000022650
00022704000227b000022814000229300002296c000229a800022a040002
2a8400022c7800022d5800022dd000022ea800022f0000022fe000023178
000231b80002323000023248000232580002333800023464000235440002
3664000236ec00023830000238b000023958000239e800023b6400023bf0
00023ca000023df800023f4c00023fa000023ff8000241240002413c0002
41540002416c000241840002419c000241b4000241cc000241e4000241fc
000242140002422c000242440002425c000242740002428c000242a40002
42bc000242d4000242ec000243040002431c000243340002434c00024364
0002437c00024394000243ac000243c4000243dc000243f40002440c0002
44240002443c000244540002446c000244840002449c000244b4000244cc
000244e4000244fc000245140002452c000245440002455c000245740002
458c000245a4000245bc000245d4000245ec000246040002461c00024634
0002464c000246640002467c00024694000246ac000246c4000246dc0002
46f40002470c000247240002473c000247540002476c000247840002479c
000247b4000247cc000247e4000247fc000248140002482c000248440002
485c000248740002488c000248a4000248bc000248d4000248ec00024904
0002491c000249340002494c000249640002497c00024994000249ac0002
49c4000249dc000249f400024a0c00024a2400024a3c00024a5400024a6c
00024a8400024a9c00024ab400024acc00024ae400024afc00024b140002
4b2c00024b4400024b5c00024b7400024b8c00024ba400024bbc00024bd4
00024bf400024c1400024c3400024c5400024c7400024c9400024cb40002
4cd400024cf400024d1400024d3400024d5400024d7400024d9400024db4
00024dd400024df400024e1400024e3400024e5400024e7400024e940002
4eb400024ed400024ef400024f1400024f3400024f5400024f7400024f94
00024fb400024fd400024ff4000250140002503400025054000250740002
5094000250b4000250d4000250f400025114000251340002515400025174
00025194000251b4000251d4000251ec00025204000252240002523c0002
525c0002527400025294000252ac000252c4000252dc000252f40002530c
0002532c00025344000253640002537c0002539c000253b4000253cc0002
53e4000253fc000254140002542c000254440002545c000254740002548c
000254a4000254bc000254d4000254ec000255040002551c000255340002
554c000255640002557c00025594000255ac000255c4000255dc000255f4
0002560c000256240002563c0002565c0002567400025694000256ac0002
56cc000256e4000256fc000257140002572c000257440002575c00025774
0002578c000257a4000257bc000257d4000257ec000258040002581c0002
58340002584c000258640002587c00025894000258ac000258c400025994
000259e000025a3400025aec00025b5800025b7000025b9000025bb00002
5bd000025bf000025c1000025c3000025c5000025c7000025c9000025cb0
00025cd000025cf000025d1000025d3000025d5000025d7000025d900002
5db000025dd000025df000025e1000025e3000025e5000025e7000025e90
00025eb000025ed000025ef000025f1000025f3000025f5000025f700002
5f9000025fb000025fd000025ff000026010000260300002605000026070
00026090000260b0000260d0000260f00002611000026130000261500002
617000026190000261b0000261d0000261f0000262080002622000026238
00026250000262680002628000026298000262b0000262c8000262e00002
62f8000263100002632800026340000263580002637000026388000263a0
000263c0000263d8000263f0000264080002642000026438000264500002
646800026480000264a0000264b8000264d0000264e80002650000026518
0002653000026548000265600002658000026598000265b0000265c80002
65e0000265f8000266100002662800026640000266600002667800026690
000266a8000266c0000266d8000266f0000268180002694400026ac40002
6b1c00026bd000026ce400026da000026dd800026e7800026e9000026f74
000270100002720c0002743c000276140002783000027aec00027cd40002
7e3800027f5c000280800002818000028248000283880002843c000284b8
000285340002861400028704000287b4000288580002894000028a580002
8b5400028da800028e9000028edc00028f2800028fbc00029064000290f8
00029190000291f80002925c0002932c000293fc000295ec0002984c0002
98dc00029960000299f000029a8000029bb000029cd400029d3800029da0
00029e3000029ec400029f580002a0040002a0880002a1180002a1740002
a1d00002a2280002a2800002a3400002a3f80002a4ac0002a54c0002a618
0002a6a40002a7480002a7cc0002a8640002a8e40002a9dc0002aacc0002
ac5c0002ade80002ae7c0002af340002afd00002b0740002b24c0002b368
0002b4840002b60c0002b7400002b88c0002b9dc0002ba4c0002bab40002
bb580002bc0c0002bcdc0002be100002bf5c0002c0000002c0a40002c0d4
0002c1740002c20c0002c2540002c2c80002c3ec0002c52c0002c5a80002
c6500002c6a00002c70c0002c7740002c84c0002c9300002c9f80002cad4
0002cc280002ccd80002cd800002ce140002ce540002ceb40002cefc0002
cf480002cf740002cff80002d0540002d0bc0002d1000002d1bc0002d258
0002d2d80002d3340002d3d00002d4a80002d5280002d5a80002d6480002
d7200002d7b40002d84c0002d93c0002da600002db380002dc000002dcc0
0002de280002df080002e0100002e1180002e1e80002e2e00002e3d40002
e5040002e6b40002e7a40002e8a80002e95c0002ea040002eac80002ebc8
0002ec040002ec400002ec7c0002ecb40002ed000002ed3c0002ed800002
edc40002ee180002ee6c0002eec40002ef000002ef5c0002efdc0002f094
0002f14c0002f2980002f30c0002f3ec0002f5480002f6500002f6900002
f7c00002f8f40002f9300002f9ec0002fa240002fa5c0002fb140002fbd0
0002fc180002fce00002fdfc0002fe940002ff2c0002ff980002ffc40002
fff000030098000300c00003010400030148000301a8000301f000030270
000302f0000303e800030438000304640003049000030640000307b00003
08800003095400030a6800030b1400030b8000030bfc00030d7400030e64
00030ec000030f1000030f4000030fd400031170000311d4000312200003
12f0000313c400031498000315740003175c000318500003195400031a40
00031b5400031cc800031ce000031cf800031d1000031d7800031e140003
1e5800031ed000031f3400031fcc000320b4000322cc000324e40003268c
000326b8000326e4000327180003274c00032788000327c4000328000003
283c00032878000328b4000328f00003292c0003295800032a4000032a8c
00032c0800032cb000032dc400032e2c00032edc000330040003315c0003
32a0000333f000033528000335c4000336c80003389000033b1c00033d30
00033e9400034008000340bc000342900003443c00034498000344f80003
459c00034658000346fc000347b80003486400034924000349d000034a90
00034b5000034c0c00034cc800034d8400034e4000034efc00034fb40003
506c00035124000351e00003521c00035268000352b4000353000003533c
000353f800035448000354f0000355340003566400035838000358900003
59d800035b2400035b6000035b9c00035bd800035c1400035c6800035cb8
00035d2c00035e0000035edc00035ef400035f0c00035fe4000360a40003
6164000362e40003645c0003657000036778000368800003697c00036a28
00036ad800036bd000036cd000036df400036e4400036eb400036f8c0003
70500003716400037234000372b400037384000374a40003754c000375e8
000376bc0003778c000377d00003799000037a2c00037bac00037c800003
7dc800037edc00037fac000380c0000381e4000382c000038474000385d8
000386a8000386f80003876c000388080003884c00038a0c00038aa80003
8bc000038c9000038de800038e8800038ed800038f50000391000003925c
000393f000039580000396d8000398800003998000039a5800039bbc0003
9c1800039cc000039d1c00039dc400039e2400039ed000039f2c00039fd0
0003a1400003a1a80003a2c80003a4dc0003a54c0003a6800003a6c80003
a7b40003a94c0003a9d40003aac00003ac180003ac6c0003ae580003afc4
0003b0080003b0440003b0880003b15c0003b2d80003b4ac0003b5fc0003
b84c0003b9180003baa00003bd0c0003bec80003bfd00003c14c0003c390
0003c4e40003c6800003c8280003c9b00003cb200003cca00003cd800003
d0940003d28c0003d50c0003d5e80003d7a00003d8880003da500003dbbc
0003dd900003dea00003e05c0003e2340003e39c0003e67c0003e8b80003
eb100003eca40003ede40003efb00003f1580003f3680003f3ec00010000
089200920009006b0007000200100010005d000007e80a1d000400010000
002701da0001000000000000005000000001000000000001000900500001
000000000002000700590001000000000003001e00600001000000000004
0009007e00010000000000050007008700010000000000060009008e0001
000000000007003200970001000000000012000900c90001000000000100
000900d20001000000000101001000db0001000000000102000e00eb0001
000000000103001400f900010000000001040012010d0001000000000105
0009011f0001000000010007002f01280001000000020007003c01570001
000000030007003001930001000000040007003a01c30001000000050007
003601fd0001000000060007003002330001000000070007003c02630003
0001040400020006029f0003000104060002000e02a50003000104070002
000c02b30003000104090002000e02bf00030001040b0002001002cd0003
0001040c0002000c02dd0003000104100002001002e90003000104110002
000a02f90003000104120002000603030003000104130002001003090003
000104140002000c03190003000104160002000c03250003000104190002
000e033100030001041d0002000c033f00030001080400020006034b0003
00010c01000200080351000300010c0a0002000c0359a920313939302d32
303036204170706c6520436f6d707574657220496e632e20a92031393831
204c696e6f7479706520414720a920313939302d3931205479706520536f
6c7574696f6e7320496e632e48656c766574696361526567756c61724865
6c7665746963613b20382e30643365313b20323031322d30332d32374865
6c766574696361382e306433653148656c76657469636148656c76657469
6361206973206120726567697374657265642074726164656d61726b206f
66204c696e6f7479706520414748656c7665746963614c69676174757265
73436f6d6d6f6e204c69676174757265734e756d6265722053706163696e
6750726f706f7274696f6e616c204e756d626572734d6f6e6f7370616365
64204e756d626572734e6f204368616e676548656c766574696361206573
7420756e65206d617271756520648e706f738e65206465204c696e6f7479
706520414748656c766574696361206973742065696e2065696e67657472
6167656e657320576172656e7a65696368656e20646572204c696e6f7479
706520414748656c766574696361208f20756e206d61726368696f207265
676973747261746f206469204c696e6f7479706520414748656c76657469
63612069732065656e20676572656769737472656572642068616e64656c
736d65726b2076616e204c696e6f7479706520414748656c766574696361
208a722065747420726567697374726572617420766172756d8a726b6520
669a72204c696e6f7479706520414748656c76657469636120657320756e
61206d617263612072656769737472616461206465204c696e6f74797065
20414748656c766574696361206572206574207265676973747265726574
20766172656dbe726b652074696c68bf72656e6465204c696e6f74797065
2041476a196e969ad4004f007200640069006e00e60072004e006f007200
6d0061006c0052006500670075006c00610072004e006f0072006d006100
61006c0069004e006f0072006d0061006c005200650067006f006c006100
72006530ec30ae30e530e930fcc77cbc18ccb40052006500670075006c00
6900650072004e006f0072006d0061006c004e006f0072006d0061006c04
1e0431044b0447043d044b0439004e006f0072006d0061006c5e3889c44f
5306390627062f064a004e006f0072006d0061006c00b800532bb800492b
b8003f2bb800352bb8002b2b4118008001a6009001a600a001a600030069
018b0079018b0089018b0099018b00040089018b0099018b00a9018b00b9
018bb2040840ba0179001a014a400b041f5414191f180a0b1fd2b80106b4
9e1fd918e3bb0119000d00e10119b20d0009410a01a0019f0064001f01a5
0025017a00480028019ab3296c1f60410a01a9007001a9008001a9000300
8001a9000101a9b21e321fbe012c00250401001f0126001e0401b61fe731
2d1fe531b80201b21fc227b80401b21fc11eb80201400f1fc01d9e1fbf1d
671fbe1d671fab27b80401b21faa29b80401b61fa91d6c1f931eb8019ab2
1f921db80101b21f911db80101b21f751db80201b61f6d29961f6431b801
9ab21f4c96b802abb21f391db80156400b1f3638211f351de41f2f27b808
01400b1f2d1d4c1f2a31cd1f241db802abb21f201eb8012540111f1c1d93
1f3a1d4c1f1e1d45273a1d4527bb01aa019b002a019bb2254a1fba019b00
25017ab349293896b8017bb348283125b8017a403648289629482725294c
1f252946272729482756c80784075b07410732072b072807260721071b07
1408120810080e080c080a08080807b801acb23f1f06bb01ab003f001f01
abb308060805b801aeb23f1f04bb01ad003f001f01adb708040802080008
14b8ffe0b40000010014b801abb41000000100b801abb606100000010006
b801adb300000100b801ad401f0400000100041000000100100200000100
0200000001000002010802004a00b0018db806008516763f183f123e1139
46443e113946443e113946443e113946443e113946443e11394660443e11
394660443e11394660442b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff1d592b2b
2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b74752b2b2b65422b2b4b5279b376706a66456523
456023456560234560b08b766818b080622020b16a704565234520b00326
6062636820b003266165b070236544b06a234420b176664565234520b003
266062636820b003266165b066236544b0762344b10066455458b1664065
44b27640764523614459b36242725d456523456023456560234560b08976
6818b080622020b172424565234520b003266062636820b003266165b042
236544b072234420b1625d4565234520b003266062636820b003266165b0
5d236544b0622344b1005d455458b15d406544b262406245236144592b2b
2b2b456953427374b8019a2045694b20b02853b049515a58b020615944b8
01a620456944750000>
[16253 16293 16121 16353 16141 16369 16349 16369 16353 15949 16329 16297 15925
16193 15917 15857 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica AddT42Char 
1 2852 19 <00020040ffd9041c0598000f001c00714017870501460815350f051c3507
0d1238036f18380b1e471d1076c418d4edfded003fed3fed313043794034
001b0d2601251a2609250526160e18280014001228011b08182800100612
2801170c1528011302152801190a1c280011041c28002b2b2b2b012b2b2b
2b2b2b2b2b2b81005d001716111007022120272611343712211236113402
232202111417163303407c60577efee2fefe7e693f7601358aa678ad9f93
2f48ae0598e5b1feccfedcbffeeee0bb013bf4af0146fae5f80152f4013b
fed5fedddb85cb000000>Helvetica AddT42Char 
1 7640 40 <000200af000004ed05bd000b000c004e4024071e04040b031e0100020908
1e0a0b080c020c0c02000669023b091a0e03082500190d0eb8010bb32195
89182b2b4ef44dfd3c4e10f64df4e41112392f003f3f3cfd3c3f3ced1239
2ffd313013211521112115211121152101af042ffc93032bfcd5037cfbc2
021f05bdb4fe42aafe0eaf05bd000000>Helvetica AddT42Char 
1 8828 48 <000100970000061705bd001300cb405944014b03020601090316011903d7
010513011c03140b1b0c57015803d401db03d40bdb0c0a040a040d450286
02045102970202290a280d380a380d4702570276020725640d0a02031203
01020b0c120306081517171a040405b8019b400d0a1f030b06fd0c0102fd
0d1f12b8019bb6130019147670182b4e10f43c4dfde419f43939f4393918
e4fd3c4e10456544e6003f173c3f3c1217394b5279b10d0cb801aab40201
020a0bb801aab202020387054d2e7afd047dc487052e7afd047dc4313000
5d727101725d71132109012111231134363501230115141615112397011d
01a601a3011abd04fe5dc5fe5a05be05bdfb2604dafa4303632dd077fb29
04d72d36dd34fc9d0000>Helvetica AddT42Char 
1 10076 53 <000200b40000057805bd0009002700944012070d49014805590158056905
641478050816bb01300119001b011c40422321202660127112751403121e
1f141c1503211e161404261224251e0009091b071e0b02261c1b08202515
1f251603310f691b1a29082625270a192829d6219566182b2b4ef43c4dfd
3c4e10f64df4edd4edd4ed003f3c3c3ffd12392f3cfd3c39111739011112
39391239395d1112392b3130015d01323635342726232111032132171615
1406071e011f011617161715232e012f012627262321112303478ca3723d
66fe1ac702a8a86dcf6d6256570507030b122ef40a0c040c0764397afe3b
c7031c70929d391efe0a02a1315efd84a833237280c55429461421133c56
f590311bfd8a>Helvetica AddT42Char 
1 10352 54 <00020060ffd504f605e5002f003000fe405e290f27232626360e35214726
62267a0e7724096b08180e172502590e680eaa22030a0e3a2224220a0304
1c1886142f2f2b1c3a1403043a2b0930020a0e081124221f283030111825
17490825281a321f25114900252f193132a0216a89182b2b4ef44dedf4ed
4e10f64dedf4ed12392f1211393912113939003f3fed3fed12392f10ed11
1217392efd335d7131304379404d282e111f0008022602262d2506251a26
032c002b002d2e032c002b00052a082b011d131f2b001b15182b01191801
2d042b0009270b2b01250b012e042b000729042b001e121c2b0119161c2b
01002b2b2b2b10102b2b01103c2b2b2b2b103c2b2b2b2b2b2b818181005d
0116171633323736353427262f0126272635342433320415232627262322
06151417161f01161716151404232027263701011e073463fa705cb24b4c
a2c7c3518c0112fbe70143bb0f315bdab09a5a3bd0ce95518cfe9debfeee
9b9b03024d01da7d4e92203ea0783332252d2c355cb7c6fedff5763f7394
626c3220302f223b67c4f4d28c8bee040b00>Helvetica AddT42Char 
1 12708 68 <00030052ffdc04470449000f003b003c00dd40382a30010a100b1b0c1c27
33481069096a10073908120c09031b320724091d100c1d3b2b022e293bb7
3b023b322a2512100705081c2722171cb8018a4023171d1f07271d2e0b02
1d350b3c073c3c1c1407292aa8241a3e1b291c4a0f2738193d3ebc019700
2100b9019600182b2b4ef44dedf4ed4e10f64de4fdc412392f003f3fed3f
ed3feded1239111217395d1112392eed2eed011112391117393130437940
28363715220001192501360f2100181e1b21001620142101212200370221
001a1d1721011521172101002b2b2b01103c2b2b2b2b818181005d015d24
16333237363d010e010f0106070615013637363534262322070607233e01
333217161511141633323637150e0123222726270e012322263534363713
010e724e5f59962168326d62315301b43e150c837a8d3b210aa805f7a3bd
767517250c1e112a2c265d2a160937ce7c95bdba978acf5a2c49a691151c
060e0d1c2f67016c082c182d5c534c2a53c69b484898fd971c220303850c
06422340486ab58895a41301e400>Helvetica AddT42Char 
1 13800 72 <00030048ffda041a0449001c00240025010c40799708991aa71f03050e02
0f0514150e120f1514400c401408291a014b0bb603c701c603c71bd808d9
09d61fd823e817e8230bc711c712025c080521240f9a161d243906070716
211d1c070a1d160b2507971ca71cb71cd71c0425160f251c05190a0c0711
0e270f1d27051a27242e072719192627d421a65d182b2b4ef44dfde44e10
f64dedd4fd391239391112393912392f5d003f3fed3fed12392f3cfd3c10
ed1112393130437940460023040503050205010504061f26111012101310
141004060c25221b24260020001d26011e1d09170726000b150e26010d0e
231a2126011e0521260108180a26000d100a2600002b2b2b2b01103c2b2b
103c2b2b2b2a2b2a8101715d00715d5d00161716171615211e0133323736
37330e01070607062322001110003301262726232206070102b4d6383612
10fcef0590978d543014b1074f3152794152c8feea0118e2011f0b284aad
7ca805012304476b55516c4aa2a3c55d36473b912e501c10012301060102
0142fe26754682b38a01dc000000>Helvetica AddT42Char 
1 14852 76 <000200840000013b05bd000300070036401c07e50400010006030a091717
1a06010229070300190809aa216242182b2b4ef43c4dc4fd3cc44e456544
e6003f3f3c3f4ded3130133311231133152384b7b7b7b7042afbd605bdcc
0000>Helvetica AddT42Char 
1 15600 81 <00020084000003ed04490019001a005e4031b706c7060204061406271476
06740705140c021418101d05070006180b0a1a071a1a000c29091a1c012e
18291900191b1cb80106b3216242182b2b4ef43c4dfde44e10f64ded1239
2f003f3f3c3f3fed1139390112393130005d015d1333153e013332171615
11231134272623220706070e011511230184ab4caa68e4502cb71d307e40
294a382d1bb401a7042f985e529f57a2fd5102a3623c640d1642357169fd
cf044900>Helvetica AddT42Char 
2 232 85 <000100890000029204470011004f40262703260d37034704040e0810020e
0911090c270805070006110a081a13012e10291100191213b80145b32162
7e182b2b4ef43c4dfde44e10e6003f3f4d3fc4fdc4111239390111123931
30005d1333153e0133321617152e0123220615112389ab15a46b05181d10
1b108892b4042fb9369b0203be0302af72fd9800>Helvetica AddT42Char 
2 372 86 <00020042ffd703b6044b002e002f012e408f38099805961299149815982a
062824252736214621472447275624572766246726790c790d790e762374
2474257426a61ea82c1303000b15052d042e13001a151b171c18152d142e
280f0b6908262536250225220d0a042b1318c61c1d1307041d2e9a2b0b2f
07090e100207002f212f1a1f18161827173e28260727281a310e1f27103e
00272e193031b221a65d182b2b4ef44dedf4fd394e10f64dfd3910f4fd39
11123939392f111239113939003f3feded3feded11121739713130437940
4c012d022615251a26210e1f21000926072101032c002100052a0721011d
121f21001b14182101200f22210021220e0d08270a21012625090a012d04
210006290421001e111c210119161c2101002b2b2b2b103c103c2b103c10
3c2b012b2b2b2b2b2b2b2b2b81005d5d015d13161716333236353427262f
01262726353436333217160723262726232206151417161f011617161514
062322262701ef082544a864983d27738f894174dbb9f26b4302aa05263e
99666945284e77c24269d9deefc70701b701505a3057575b4524161d2422
2a498198bc8e5a683d32474e40462a19131d2f2c45948fd0d9a002f9>Helvetica AddT42Char 
2 820 87 <00010017ffef0209055a00180052b50d2e0ac00e01b8013f402504163917
03060e0a111a17171a0301062900150e150f031f030203fc1619191afc21
677d182b2b4ef44dfd5d39c42f3cfd3c104e456544e6002f3f3f3c4dfd3c
ed10fde431301333113315231114171633323637150e0123222635112335
33a8b6abab2615310d1e141f43277e5a9191055afed593fd4538130b0102
8e0908816702c5930000>Helvetica AddT42Char 
1 0 0 <00020042000004d005bd00030007003fb800532bb800082fb800092fb800
0810b80000d0b800002fb8000910b80003dcb80004dcb8000010b80007dc
00ba0007000000562bba0002000500562b3031331121112711211142048e
b8fce205bdfa43b8044dfbb30000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/space 3 def
/zero 19 def
/E 40 def
/M 48 def
/R 53 def
/S 54 def
/a 68 def
/e 72 def
/i 76 def
/n 81 def
/r 85 def
/s 86 def
/t 87 def
end
Helvetica /Encoding get
dup 32 /space put
dup 48 /zero put
dup 69 /E put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
end
%ADOEndSubsetFont
/VCIYWW+Helvetica /Helvetica findfont ct_VMDictPut/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero 20{/.notdef}rp /E 7{/.notdef}rp /M 4{/.notdef}rp /R /S 13{/.notdef}rp /a 3{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /s /t 139{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -2.85367 -2.85367 0 0 0 ]msf43.656 29.559 mo(Entries)[-1.90338 -1.58661 -.793335 -.950256 -.633484 -1.58661 0 ]ysh43.656 15.29 mo( 0)[-.793335 0 ]ysh48.413 29.559 mo(Mean)[-2.37708 -1.58667 -1.58661 0 ]ysh48.413 19.095 mo(      0)[-.793335 -.793335 -.793274 -.793335 -.793335 -.793335 0 ]ysh53.169 29.559 mo(RMS)[-2.0603 -2.37708 0 ]ysh53.169 19.095 mo(      0)[-.793335 -.793335 -.793274 -.793335 -.793335 -.793335 0 ]ysh462.195 481.39 mo
462.195 56.193 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 1936 11 <0001008efe5e026105d50014003e4009141109131617171a09bb019c0008
0014019c400e400080044c10191516f7216c5218b80732852b2b4ef44ded
1add1aedd4ed4e456544e6003f3f3130010207061110171613232e012726
27263510373613025e9d2f475132937992462938160b5d3bbb05d5fecf90
dbfee1fedef094feeae47e6c94a8574f0128e79301250000>Helvetica AddT42Char 
1 2080 12 <00010044fe5e021705d500130036400c081100131517171a044c0f13bb01
9c00000009019c400908191415f7213f7b182b2b4ef44dedd4eddded4e45
6544e6003f3f3130131237361110272603331e01171e011510070603479f
2e46513293799a412630295e3bbafe5e01368ed701210121f0940116f673
657df471fed8e895fede0000>Helvetica AddT42Char 
1 2780 18 <000100000000026a05bd0003002b4017070117019701030102021c120303
0002030a0100020003192f18d4003f3c3f3c05872e2b7d10c4015d013301
2301d298fe2e9805bdfa4300>Helvetica AddT42Char 
1 7876 42 <00020063ffd905a105e50022002300d1403e1b0686018502031d011f0586
01891cb6200540080f04151603106d167e16020f16110d04862210111e13
121215073a220315080d3a1a0923022323031e12b8014b4010030431033b
1025131a250a311e192425b80167b3216a70182b2b4ef44ded4e10f64ded
f4fd10ed1112392f003f3fed3f3fed12392f3cfd3c10ed111239395d0111
123939123931304379402c1b21000c1c25202601250c1b0a320008210a32
000600043201020305040b1d0d3200091f0732010502073201002b2b2b01
103c103c2b2b2b2b2b2b81815d015d00171613232e012322001110122132
24132135211123270607062320272611103736212703e697db31c524e2ac
ccfee9e60104c7010503fe3402858030654e83cafefbbccdc8be012e2105
e35073fee0a193fecefed1fefafeb7e70102a5fceebd6f2b4aa9d4017201
71dad0020000>Helvetica AddT42Char 
1 10760 55 <00010021000004c905bd00070034401a01061e00070204080917171a00fb
0203250504fb0619088c5e182b4e10f44df43cfd3cf44e456544e6003f3f
3c4dfd3c3130011521112311213504c9fe11cafe1105bdaffaf2050eaf00
0000>Helvetica AddT42Char 
1 10996 57 <000100340000053605bd0006008f40449001a00102400154010216010178
05e601026704680588040319280225120303040025120606050105020306
0300020504080817171a0402039e0500019e0619078e5e182b194e10f418
4dfd3939fd3939194e456544e618003f3c3f173c123901874d2e2b872e18
2b4b5279400c01020100030401000102060587087d10c487087d10c43130
015d005d717172090233012301011001a601a1dffde8d3fde905bdfb1d04
e3fa4305bd000000>Helvetica AddT42Char 
1 13324 70 <0002003bffe103d0044e001a001b00a7402fa719019818a808aa18034a08
119b14030314061d1a070d1d140b1b071b1b1710271201032702111a1d0a
2717191c1db80107b321727d182b2b4ef44ded4e10f63c4ded3939ed1239
2f003f3fed3fed12392f10ed313043794034001908250c150a26000e1310
260112110f1007190a26000500032101010204030b160d26000f120d2600
091806260104010621012b2b2b2b01103c103c2b2b103c103c2b2b2b8100
5d015d001617232e012322070615141633323637330e0123220235100033
0702d6e317af10727eac4a308892708319af1ef0bbd2fa0112d41c044eb0
d76383a86da0a1dc8977d5c50133e6011a013a05>Helvetica AddT42Char 
1 16024 83 <00020076fe5504250449000e00220074402ca908a717022808201c110e06
1d15070f060e1d1c0b220e0227181a240a2e102e2129220f1923248721bd
5d182b2b4ef43c4dfde4e44e10f64ded003f3fed3f3fed11391239313043
79401c161b00051a260426001b022601051602260101190e260003170626
012b2b012b2b2b2b8181005d243635342726232207061514171633013315
363736333212111007062322272627112302c6a72546babb45252546bafe
2eaf36405b7bb6feb7749a7952303bb479d3d2805cb1bb649a7c57a603b1
8e49283cfee9fefdfea2965f351e49fddd00>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/slash 18 def
/G 42 def
/T 55 def
/V 57 def
/c 70 def
/p 83 def
end
Helvetica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 71 /G put
dup 84 /T put
dup 86 /V put
dup 99 /c put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 20{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 139{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf510.707 118.023 mo(\(GeV/c\))[-6.01825 -14.0609 -10.0487 -12.0547 -5.02435 -9.03662 0 ]yshVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf519.268 125.632 mo(T)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf510.707 135.145 mo(p)sh456.074 467.799 mo
462.195 467.799 li
@
456.074 456.307 mo
462.195 456.307 li
@
456.074 446.353 mo
462.195 446.353 li
@
456.074 437.573 mo
462.195 437.573 li
@
449.952 429.718 mo
462.195 429.718 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3072 20 <000100c4000002d5059200080023b10801b80133400c0404070c04079605
000a47091076c418c4d5fd39003f3ff4cd313013353e013733112311c4c3
9a268ec003f68a1359a6fa6e03f60000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/one 20 def
end
Helvetica /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one 19{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 139{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf486.815 439.706 mo(10)[-10.0487 0 ]ysh456.074 378.047 mo
462.195 378.047 li
@
456.074 347.821 mo
462.195 347.821 li
@
456.074 326.375 mo
462.195 326.375 li
@
456.074 309.74 mo
462.195 309.74 li
@
456.074 296.149 mo
462.195 296.149 li
@
456.074 284.658 mo
462.195 284.658 li
@
456.074 274.703 mo
462.195 274.703 li
@
456.074 265.923 mo
462.195 265.923 li
@
449.952 258.069 mo
462.195 258.069 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3148 21 <000100400000041e059d002200a6404e3604460457056b1d6e1e7a1e8401
8702082a085a196b197c197c1cb519050022010f041c0e1921071c190401
00051f0f0f22130a351305201f7521220c217f0738166f220e270f811f38
222447231076c418d4edf4ed10f5ede4003f3cfd3c3fed1112392f121739
0111123912393911391239005d31304379401c04190c2511260b120e2800
091407280119040d100a280108150a2801002b2b1010012b2b2b2b81005d
36123f01363736353426232207060723363736213212151407060f010607
06072115214a85c1c0813452967db9472604b70342750128f6e37946b589
6238641a030efc29b90112706f4b35536b7d938c4b85bb76d0fef6a3ac7a
47654c3631576aaa0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/two 21 def
end
Helvetica /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two 18{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 139{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf477.414 252.145 mo(2)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf485.975 272.121 mo(10)[-10.0487 0 ]ysh456.074 206.397 mo
462.195 206.397 li
@
456.074 176.171 mo
462.195 176.171 li
@
456.074 154.725 mo
462.195 154.725 li
@
456.074 138.091 mo
462.195 138.091 li
@
456.074 124.499 mo
462.195 124.499 li
@
456.074 113.008 mo
462.195 113.008 li
@
456.074 103.054 mo
462.195 103.054 li
@
456.074 94.273 mo
462.195 94.273 li
@
449.952 86.419 mo
462.195 86.419 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3428 22 <00010031ffd9041a059a003100c4401f490c532d6529632d7529752d0696
26014b082b0a182b140d03f93114350d20b8012340141135107f0d0d311b
3524050735310d1896274411b8014a400f0a382e6f021f29208103270233
47321076c418d4edf4ed10f5ededf4ed003fed3fed12392ff4fde610ed10
ed111239011112393130437940362f301926000905261d25222606000328
00040308300a28011c231f28001a251828010401072800092f0728001e21
1b280119261b2801002b2b2b2b012b2b2b103c2b2b2b2b818181005d015d
0402353316171633323635342623220607351e0133323736353426232207
06072334373621321615140706071e01151400230116e5bc0c2846b78eac
b5a11225131c26166541729865b4452605b2406e0115dbf0472c46717ffe
f2f8270117c88b3f719878947601019f03022038906b7478427aa070c8c3
b98452331d1fb180cdfefe000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/three 22 def
end
Helvetica /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three 17{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c /.notdef /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 139{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf476.463 79.974 mo(3)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf485.975 99.949 mo(10)[-10.0487 0 ]ysh462.195 481.39 mo
54.12 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 12188 62 <00010080fe6d020005c700070035401c031c0010041c07120917171a0501
580304200700190809f0216c33182b2b4ef43c4dfd3cf43c4e456544e600
3f4dfd3ffd31301321152311331521800180d6d6fe8005c793f9cc93>Helvetica AddT42Char 
1 12372 64 <0001002ffe6d01af05c70007003e402000070102031c050410001c071209
17171a06200201580003190809f0213c7c182b2b4ef43c4df43cfd4e4565
44e6003f4dfd3f3cfd3c01113939313013331123352111212fd5d50180fe
80ff00063493f8a60000>Helvetica AddT42Char 
1 13112 69 <00020076ffde042505c20011001e0070402ea607a71cd71c0322080f1e02
050000171d0507110a1e1d0b0b1427081a201a2e102e01290011191f2087
21bd5d182b2b4ef43c4dfde4e44e10f64ded003fed3f3fed3f1139113931
30437940181216060a1606142601120a142601150717260113091e26002b
2b012b2b8181005d1333113e013332121114022322272627152324363534
26232206151417163376af3ba460c8f9f6da7a543239a6026691918d7bb9
2647c205c2fdeb4d51feedfef4fefeb03b234d897de8bea9deb6d1975eb1
0000>Helvetica AddT42Char 
1 13584 71 <00020038ffda03ed05c2000b001d00774032370e470e570ea704a91b0525
0814020f1d1000081d1d07130a021d170b052e132e102911121a1f0b271a
191e1f87217242182b2b4ef44ded4e10f63c4dfde4e4003fed3f3fed3f11
39113931304379401a181c090a000101180b2600091c0b26000019022600
0a1b0826012b2b012b2b818181005d121633323635342623220615001716
1711331123350e0123220035341233f692a17da1a67a88a9018a53303dad
a23fac6fb3fefaefde015fe8d7c9cbc3d0ca0237341e4b021dfa3e956358
012dfaea0157>Helvetica AddT42Char 
2 1924 92 <00020015fe4903e804490018001900ca406e8a158818a718030706170638
12481258126707770377078c1498009705981597169717a800a816104800
4b154717c915044405c605028705a600a601a705a8170524280518151716
010006150c0b0f1d080e19071919161b17171a050001af171518af0c8f16
191a1bd421677e182b2b194ef44de418fd3939fd3939194e456544e61812
392f003f3f4dfd3932192f183f3c3c3c123939014b527940121515001616
6d121717180501016d12000018872e2b107dc418872e2b10087dc418015d
71313071015d005d013306030207020623222627351e01333236373e0137
013301030321c7268362429c809c26291e2f2a10322f10053e0efe74cc01
1f01042f67fe91feecaefe66b40608a40d062118089424044efc98038200
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/bracketleft 62 def
/bracketright 64 def
/b 69 def
/d 71 def
/y 92 def
end
Helvetica /Encoding get
dup 91 /bracketleft put
dup 93 /bracketright put
dup 98 /b put
dup 100 /d put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero /one /two /three 17{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [-18.0732 0 0 18.0732 0 0 ]msf175.877 526.097 mo(dy\)[nb/\(GeV/c\)])[-10.0487 -9.03659 -6.01825 -5.02432 -10.0487 -10.0487 -5.02435 -6.01822 -14.0609 -10.0487 -12.0547 -5.02435 -9.03659 -6.01825 0 ]xshVCIYWW+Helvetica*1 [-11.4147 0 0 11.4147 0 0 ]msf183.486 516.585 mo(T)shVCIYWW+Helvetica*1 [-18.0732 0 0 18.0732 0 0 ]msf213.925 526.097 mo(/\(dp)[-5.02435 -6.01825 -10.0487 0 ]xsh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 115 /sigma putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/sigma <1C60D8A8C9B7C05447F5912FBA2452AF183FCDA4EABE4B48A1B8CA2DB2FE27B5CA05184337E6A14471F4E4784E68DE4BCCB0F4CBDF4CF56943F8EAC4BE9236E53E561465B455434CB9B524ED6F54658755443A22EF90736E45BBEF02E32C0C302E57A2C333DCAF88A033C44D239492CE07F8959B883BCC98EFFD299A778B9FD0B07ABB4FAB7AAA28829714962ABE342EDDC72A559B> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VCIYWX+Symbol /Symbol findfont ct_VMDictPut/VCIYWX+Symbol*1 [115{/.notdef}rp /sigma 140{/.notdef}rp]VCIYWX+Symbol nfVCIYWX+Symbol*1 [-18.0732 0 0 18.0732 0 0 ]msf225.34 526.097 mo(s)shVCIYWW+Helvetica*1 [-11.4147 0 0 11.4147 0 0 ]msf231.999 533.707 mo(2)shVCIYWW+Helvetica*1 [-18.0732 0 0 18.0732 0 0 ]msf241.511 526.097 mo(d)sh462.195 468.634 mo
462.195 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 2656 16 <0001005501de024b029700030020400a002f03011a0500190405b80142b3
21ba48182b2b4ee410e6002f4ded3130132115215501f6fe0a0297b90000
>Helvetica AddT42Char 
1 4672 27 <00030042ffd7041a059c000b0017003200cb4047560157095a0f59136401
65096b0f691377250949107b197623722573277c317c3288198720872788
2e883198190d47083208250e0225320b3511112c05351e0517352c0d0238
21b80186b70e38296f2f08381bb80186b514382f3447331076c418d4edf4
ed10f5edf4ed003fed3fed12392fed39390111123912393130437940352a
2e1c201216030d162d1428000c2b0e28010a12082800061d082800041f02
2801152e1728000d2a172800071c0528010320052801002b2b2b2b012b2b
2b2b2b81818181015d005d00363534262322061514163312363534262322
061514163300272635343633321615140706071617161514022322243534
363702a48680838274966688a5aa8581a3959cfeb52a4fe8d5ceea442650
59335ffee8d1fedf7c7a0340855c5086865a6572fd3b87868b90938270a3
02a02b5080a0e6d99186532f2d293564a0bdfef9e3d87fb93100>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/hyphen 16 def
/eight 27 def
end
Helvetica /Encoding get
dup 45 /hyphen put
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three 4{/.notdef}rp /eight 12{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf461.244 496.609 mo(-8)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf470.756 516.585 mo(10)[-10.0486 0 ]ysh452.106 475.012 mo
452.106 481.39 li
@
446.204 475.012 mo
446.204 481.39 li
@
442.017 475.012 mo
442.017 481.39 li
@
438.769 475.012 mo
438.769 481.39 li
@
436.115 475.012 mo
436.115 481.39 li
@
433.872 475.012 mo
433.872 481.39 li
@
431.928 475.012 mo
431.928 481.39 li
@
430.214 475.012 mo
430.214 481.39 li
@
428.68 468.634 mo
428.68 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4524 26 <0001004b0000042f0580000f00534036050b1902380b3a0c390d4a0d5502
56046202b7070a7c0db40dc50d030209010d0e3a000f04090c020d080000
6f0e083809ac0e1147101076c418d4f4ed10e511123939003f3f3cfd3c39
1239015d31305d01150602070607060723121336372135042f45e558572d
1d2ec744e88997fce805809d43feb4c0bb9a63dc019a0196eeadb500>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/seven 26 def
end
Helvetica /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three 3{/.notdef}rp /seven /eight 12{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf427.951 496.609 mo(-7)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf436.512 516.585 mo(10)[-10.0486 0 ]ysh418.591 475.012 mo
418.591 481.39 li
@
412.69 475.012 mo
412.69 481.39 li
@
408.503 475.012 mo
408.503 481.39 li
@
405.255 475.012 mo
405.255 481.39 li
@
402.601 475.012 mo
402.601 481.39 li
@
400.357 475.012 mo
400.357 481.39 li
@
398.414 475.012 mo
398.414 481.39 li
@
396.699 475.012 mo
396.699 481.39 li
@
395.166 468.634 mo
395.166 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 4224 25 <0002004dffdb0423059e001b002700a94039771a01170825082719581986
00870188090747080a212721350e0e1403c707351b052735140d03290281
1e38116f170a023c0a2431172947281076c418d4fd397c4b52787a2f1810
f5edf4ed003fed3feded12392fed11123931304379403425261c200f1600
060526200f1e280126152428001c131e2801060003280104031f10212801
25162728001d1227280004010728012b2b2b2b01103c2b2b2b2b2b818181
81015d005d00161523262726232202033637363332041514022322001110
3712211236353426232206151416330347bdb21023418497b20a3e5e566a
b4010cfeebc9fedc417d014c818d7ea674af9f8d059ef98455305afee9fe
fc5b2d28e6e4c3fed301310169010bba0164faddbf826ec79a9b88b90000
>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/six 25 def
end
Helvetica /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three 2{/.notdef}rp /six /seven /eight 12{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf393.707 496.609 mo(-6)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf403.219 516.585 mo(10)[-10.0486 0 ]ysh385.077 475.012 mo
385.077 481.39 li
@
379.175 475.012 mo
379.175 481.39 li
@
374.988 475.012 mo
374.988 481.39 li
@
371.74 475.012 mo
371.74 481.39 li
@
369.087 475.012 mo
369.087 481.39 li
@
366.843 475.012 mo
366.843 481.39 li
@
364.899 475.012 mo
364.899 481.39 li
@
363.185 475.012 mo
363.185 481.39 li
@
361.651 468.634 mo
361.651 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3928 24 <00010042ffdc041c0580002000bb402b4812881f02390c46135713671304
3a080c0d07000c0a0f0e0e75121313120e0f201213070013170a17350ab8
0122401a0d7f0e0e1d123a0f04043520c71d0d1107381a6f003820224721
1076c418d4edf5edc4003feded3ffd12392fe4f4ed111239011112393912
3939872e2b7d10c5001239011112393931301843794028181f0109022603
1e00280001001f20051c0728010918072801011f042800061b0428000819
0a2801002b2b2b012b2b103c103c2b2b8181005d5d131617163332363534
262322060727132115210336373633320415140221222427fd127d4054a0
9ab7805d852f9c6d02e8fd9f3d322d5069c50112fbfeedaffef310016d9a
3b1ecc7c96a44840090303aefe72261321fec3cbfecac5cc0000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/five 24 def
end
Helvetica /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /.notdef /five /six /seven /eight 12{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf360.414 496.609 mo(-5)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf369.926 516.585 mo(10)[-10.0486 0 ]ysh351.563 475.012 mo
351.563 481.39 li
@
345.661 475.012 mo
345.661 481.39 li
@
341.474 475.012 mo
341.474 481.39 li
@
338.226 475.012 mo
338.226 481.39 li
@
335.572 475.012 mo
335.572 481.39 li
@
333.328 475.012 mo
333.328 481.39 li
@
331.385 475.012 mo
331.385 481.39 li
@
329.671 475.012 mo
329.671 481.39 li
@
328.137 468.634 mo
328.137 481.39 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica gcheck setglobal} if
1 3772 23 <000200340000042f059c0002000d005c402209020a080d010202be120606
07020601050708030106070a02750b05ef030c070403b80117b501960d08
ac0ab80158b3050f470e1076c418d4f5f43cfde4003f3ff43cfd3c113939
0111123911123939872e2b047d10c50f3130011109011121350133113315
231102a5fe3501cefd8c029098d3d301fb0289fd77fe05015eb0038efc5f
9dfea2000000>Helvetica AddT42Char 
Helvetica /CharStrings get begin
/four 23 def
end
Helvetica /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWW+Helvetica*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash /zero /one /two /three /four /five /six /seven /eight 12{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 4{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /.notdef /p /.notdef /r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]VCIYWW+Helvetica nfVCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf328.072 496.609 mo(-4)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf336.633 516.585 mo(10)[-10.0486 0 ]ysh318.048 475.012 mo
318.048 481.39 li
@
312.147 475.012 mo
312.147 481.39 li
@
307.959 475.012 mo
307.959 481.39 li
@
304.711 475.012 mo
304.711 481.39 li
@
302.058 475.012 mo
302.058 481.39 li
@
299.814 475.012 mo
299.814 481.39 li
@
297.87 475.012 mo
297.87 481.39 li
@
296.156 475.012 mo
296.156 481.39 li
@
294.623 468.634 mo
294.623 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf292.877 496.609 mo(-3)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf302.389 516.585 mo(10)[-10.0486 0 ]ysh284.534 475.012 mo
284.534 481.39 li
@
278.632 475.012 mo
278.632 481.39 li
@
274.445 475.012 mo
274.445 481.39 li
@
271.197 475.012 mo
271.197 481.39 li
@
268.543 475.012 mo
268.543 481.39 li
@
266.3 475.012 mo
266.3 481.39 li
@
264.356 475.012 mo
264.356 481.39 li
@
262.642 475.012 mo
262.642 481.39 li
@
261.108 468.634 mo
261.108 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf260.535 496.609 mo(-2)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf269.096 516.585 mo(10)[-10.0486 0 ]ysh251.019 475.012 mo
251.019 481.39 li
@
245.118 475.012 mo
245.118 481.39 li
@
240.93 475.012 mo
240.93 481.39 li
@
237.683 475.012 mo
237.683 481.39 li
@
235.029 475.012 mo
235.029 481.39 li
@
232.785 475.012 mo
232.785 481.39 li
@
230.842 475.012 mo
230.842 481.39 li
@
229.127 475.012 mo
229.127 481.39 li
@
227.594 468.634 mo
227.594 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf227.243 494.707 mo(-1)[-3.80103 0 ]yshVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf235.804 514.683 mo(10)[-10.0487 0 ]ysh217.505 475.012 mo
217.505 481.39 li
@
211.603 475.012 mo
211.603 481.39 li
@
207.416 475.012 mo
207.416 481.39 li
@
204.168 475.012 mo
204.168 481.39 li
@
201.514 475.012 mo
201.514 481.39 li
@
199.271 475.012 mo
199.271 481.39 li
@
197.327 475.012 mo
197.327 481.39 li
@
195.613 475.012 mo
195.613 481.39 li
@
194.079 468.634 mo
194.079 481.39 li
@
VCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf201.689 493.422 mo(1)sh183.99 475.012 mo
183.99 481.39 li
@
178.089 475.012 mo
178.089 481.39 li
@
173.902 475.012 mo
173.902 481.39 li
@
170.654 475.012 mo
170.654 481.39 li
@
168 475.012 mo
168 481.39 li
@
165.756 475.012 mo
165.756 481.39 li
@
163.813 475.012 mo
163.813 481.39 li
@
162.098 475.012 mo
162.098 481.39 li
@
160.565 468.634 mo
160.565 481.39 li
@
VCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf168.175 505.788 mo(10)[-10.0487 0 ]ysh150.476 475.012 mo
150.476 481.39 li
@
144.574 475.012 mo
144.574 481.39 li
@
140.387 475.012 mo
140.387 481.39 li
@
137.139 475.012 mo
137.139 481.39 li
@
134.486 475.012 mo
134.486 481.39 li
@
132.242 475.012 mo
132.242 481.39 li
@
130.298 475.012 mo
130.298 481.39 li
@
128.584 475.012 mo
128.584 481.39 li
@
127.05 468.634 mo
127.05 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf126.413 492.805 mo(2)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf134.974 512.78 mo(10)[-10.0487 0 ]ysh116.962 475.012 mo
116.962 481.39 li
@
111.06 475.012 mo
111.06 481.39 li
@
106.873 475.012 mo
106.873 481.39 li
@
103.625 475.012 mo
103.625 481.39 li
@
100.971 475.012 mo
100.971 481.39 li
@
98.727 475.012 mo
98.727 481.39 li
@
96.784 475.012 mo
96.784 481.39 li
@
95.07 475.012 mo
95.07 481.39 li
@
93.536 468.634 mo
93.536 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf92.169 492.805 mo(3)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf101.681 512.78 mo(10)[-10.0487 0 ]ysh83.447 475.012 mo
83.447 481.39 li
@
77.546 475.012 mo
77.546 481.39 li
@
73.358 475.012 mo
73.358 481.39 li
@
70.11 475.012 mo
70.11 481.39 li
@
67.457 475.012 mo
67.457 481.39 li
@
65.213 475.012 mo
65.213 481.39 li
@
63.269 475.012 mo
63.269 481.39 li
@
61.555 475.012 mo
61.555 481.39 li
@
60.022 468.634 mo
60.022 481.39 li
@
VCIYWW+Helvetica*1 [0 -11.4147 -11.4147 0 0 0 ]msf59.827 492.805 mo(4)shVCIYWW+Helvetica*1 [0 -18.0732 -18.0732 0 0 0 ]msf68.388 512.78 mo(10)[-10.0487 0 ]ysh54.12 30.51 mo
54.12 11.4855 li
35.0955 11.4855 li
35.0955 30.51 li
cp
0 0 0 0 cmyk
ef
54.12 30.51 mo
54.12 11.486 li
@
54.12 11.486 mo
35.095 11.486 li
@
35.095 11.486 mo
35.095 30.51 li
@
35.095 30.51 mo
54.12 30.51 li
@
39.852 30.51 mo
39.852 11.486 li
@
VCIYWW+Helvetica*1 [0 -2.85367 -2.85367 0 0 0 ]msf43.656 29.559 mo(Entries)[-1.90338 -1.58661 -.793335 -.950256 -.633484 -1.58661 0 ]ysh43.656 15.29 mo( 0)[-.793335 0 ]ysh48.413 29.559 mo(Mean)[-2.37708 -1.58667 -1.58661 0 ]ysh48.413 19.095 mo(      0)[-.793335 -.793335 -.793274 -.793335 -.793335 -.793335 0 ]ysh53.169 29.559 mo(RMS)[-2.0603 -2.37708 0 ]ysh53.169 19.095 mo(      0)[-.793335 -.793335 -.793274 -.793335 -.793335 -.793335 0 ]ysh427.409 130.043 mo
426.812 130.043 li
0 0 0 1 cmyk
@
426.812 131.945 mo
426.812 128.14 li
@
433.116 130.043 mo
434.795 130.043 li
@
434.795 131.945 mo
434.795 128.14 li
@
158.521 299.322 mo
155.667 297.419 li
152.814 299.322 li
155.667 301.224 li
cp
170.518 288.706 mo
167.664 286.803 li
164.811 288.706 li
167.664 290.608 li
cp
182.53 277.843 mo
179.676 275.941 li
176.823 277.843 li
179.676 279.746 li
cp
195.026 267.092 mo
192.172 265.189 li
189.318 267.092 li
192.172 268.994 li
cp
207.316 256.592 mo
204.462 254.69 li
201.609 256.592 li
204.462 258.495 li
cp
219.788 246.365 mo
216.934 244.462 li
214.08 246.365 li
216.934 248.267 li
cp
232.796 235.697 mo
229.942 233.794 li
227.088 235.697 li
229.942 237.599 li
cp
246.452 224.919 mo
243.599 223.016 li
240.745 224.919 li
243.599 226.821 li
cp
260.949 214.251 mo
258.095 212.349 li
255.241 214.251 li
258.095 216.154 li
cp
275.488 203.832 mo
272.634 201.93 li
269.78 203.832 li
272.634 205.735 li
cp
290.911 193.429 mo
288.057 191.527 li
285.203 193.429 li
288.057 195.332 li
cp
307.949 182.657 mo
305.095 180.755 li
302.241 182.657 li
305.095 184.56 li
cp
325.785 172.298 mo
322.931 170.395 li
320.077 172.298 li
322.931 174.2 li
cp
345.502 161.756 mo
342.648 159.853 li
339.794 161.756 li
342.648 163.658 li
cp
369.327 151.444 mo
366.473 149.542 li
363.62 151.444 li
366.473 153.346 li
cp
395.859 140.979 mo
393.006 139.076 li
390.152 140.979 li
393.006 142.881 li
cp
433.116 130.043 mo
430.262 128.14 li
427.409 130.043 li
430.262 131.945 li
cp
@
430.853 130.043 mo
430.133 130.043 li
@
430.133 131.945 mo
430.133 128.14 li
@
436.56 130.043 mo
438.452 130.043 li
@
438.452 131.945 mo
438.452 128.14 li
@
170.19 288.706 mo
164.482 285.852 li
164.482 291.559 li
cp
182.476 277.843 mo
176.769 274.99 li
176.769 280.697 li
cp
194.899 267.092 mo
189.191 264.238 li
189.191 269.945 li
cp
207.375 256.592 mo
201.668 253.739 li
201.668 259.446 li
cp
219.858 246.365 mo
214.15 243.511 li
214.15 249.218 li
cp
232.813 235.697 mo
227.106 232.843 li
227.106 238.551 li
cp
246.584 224.919 mo
240.877 222.065 li
240.877 227.773 li
cp
260.831 214.251 mo
255.124 211.398 li
255.124 217.105 li
cp
275.423 203.832 mo
269.716 200.979 li
269.716 206.686 li
cp
291.004 193.429 mo
285.296 190.576 li
285.296 196.283 li
cp
307.741 182.657 mo
302.034 179.804 li
302.034 185.511 li
cp
325.887 172.298 mo
320.18 169.444 li
320.18 175.151 li
cp
346.147 161.756 mo
340.439 158.902 li
340.439 164.609 li
cp
369.969 151.444 mo
364.262 148.59 li
364.262 154.298 li
cp
395.125 140.979 mo
389.418 138.125 li
389.418 143.832 li
cp
436.56 130.043 mo
430.853 127.189 li
430.853 132.897 li
cp
f
136.426 324.438 mo
136.426 318.731 li
130.719 318.731 li
130.719 324.438 li
cp
146.903 314.926 mo
146.903 309.219 li
141.196 309.219 li
141.196 314.926 li
cp
155.634 306.365 mo
155.634 300.658 li
149.927 300.658 li
149.927 306.365 li
cp
164.365 298.755 mo
164.365 293.048 li
158.658 293.048 li
158.658 298.755 li
cp
171.35 292.096 mo
171.35 286.389 li
165.643 286.389 li
165.643 292.096 li
cp
177.462 286.389 mo
177.462 280.682 li
171.755 280.682 li
171.755 286.389 li
cp
183.573 280.682 mo
183.573 274.975 li
177.866 274.975 li
177.866 280.682 li
cp
189.685 274.974 mo
189.685 269.267 li
183.978 269.267 li
183.978 274.974 li
cp
195.797 270.218 mo
195.797 264.511 li
190.09 264.511 li
190.09 270.218 li
cp
200.162 266.413 mo
200.162 260.706 li
194.455 260.706 li
194.455 266.413 li
cp
205.401 261.657 mo
205.401 255.95 li
199.694 255.95 li
199.694 261.657 li
cp
209.766 257.852 mo
209.766 252.145 li
204.059 252.145 li
204.059 257.852 li
cp
215.005 254.048 mo
215.005 248.341 li
209.298 248.341 li
209.298 254.048 li
cp
219.37 250.243 mo
219.37 244.536 li
213.663 244.536 li
213.663 250.243 li
cp
223.736 247.389 mo
223.736 241.682 li
218.029 241.682 li
218.029 247.389 li
cp
227.228 244.535 mo
227.228 238.828 li
221.521 238.828 li
221.521 244.535 li
cp
231.594 240.73 mo
231.594 235.023 li
225.887 235.023 li
225.887 240.73 li
cp
235.086 237.877 mo
235.086 232.17 li
229.379 232.17 li
229.379 237.877 li
cp
240.325 234.072 mo
240.325 228.365 li
234.618 228.365 li
234.618 234.072 li
cp
248.183 228.364 mo
248.183 222.657 li
242.476 222.657 li
242.476 228.364 li
cp
254.294 223.608 mo
254.294 217.901 li
248.587 217.901 li
248.587 223.608 li
cp
260.406 218.852 mo
260.406 213.145 li
254.699 213.145 li
254.699 218.852 li
cp
266.518 215.047 mo
266.518 209.34 li
260.811 209.34 li
260.811 215.047 li
cp
272.63 210.291 mo
272.63 204.584 li
266.923 204.584 li
266.923 210.291 li
cp
278.741 206.486 mo
278.741 200.779 li
273.034 200.779 li
273.034 206.486 li
cp
286.599 201.73 mo
286.599 196.023 li
280.892 196.023 li
280.892 201.73 li
cp
297.076 194.12 mo
297.076 188.413 li
291.369 188.413 li
291.369 194.12 li
cp
305.807 188.413 mo
305.807 182.706 li
300.1 182.706 li
300.1 188.413 li
cp
317.158 182.706 mo
317.158 176.999 li
311.451 176.999 li
311.451 182.706 li
cp
327.635 176.998 mo
327.635 171.291 li
321.928 171.291 li
321.928 176.998 li
cp
335.493 172.242 mo
335.493 166.535 li
329.786 166.535 li
329.786 172.242 li
cp
345.97 165.584 mo
345.97 159.877 li
340.263 159.877 li
340.263 165.584 li
cp
370.417 156.072 mo
370.417 150.365 li
364.71 150.365 li
364.71 156.072 li
cp
.897551 .783413 0 0 cmyk
@
150.395 305.414 mo
150.395 299.706 li
144.688 302.56 li
cp
164.365 293.048 mo
164.365 287.34 li
158.658 290.194 li
cp
176.588 281.633 mo
176.588 275.926 li
170.881 278.779 li
cp
187.939 272.121 mo
187.939 266.413 li
182.231 269.267 li
cp
197.543 264.511 mo
197.543 258.804 li
191.836 261.657 li
cp
206.274 256.901 mo
206.274 251.194 li
200.567 254.048 li
cp
215.005 250.243 mo
215.005 244.535 li
209.298 247.389 li
cp
222.863 243.584 mo
222.863 237.877 li
217.155 240.73 li
cp
231.594 236.925 mo
231.594 231.218 li
225.887 234.072 li
cp
241.198 229.316 mo
241.198 223.608 li
235.491 226.462 li
cp
251.675 220.755 mo
251.675 215.047 li
245.968 217.901 li
cp
263.025 212.194 mo
263.025 206.486 li
257.318 209.34 li
cp
273.503 204.584 mo
273.503 198.877 li
267.795 201.73 li
cp
283.107 197.925 mo
283.107 192.218 li
277.399 195.072 li
cp
293.584 191.267 mo
293.584 185.559 li
287.877 188.413 li
cp
305.807 183.657 mo
305.807 177.95 li
300.1 180.803 li
cp
318.031 176.047 mo
318.031 170.34 li
312.324 173.194 li
cp
332.874 168.437 mo
332.874 162.73 li
327.166 165.584 li
cp
347.716 160.828 mo
347.716 155.12 li
342.009 157.974 li
cp
363.432 153.218 mo
363.432 147.51 li
357.725 150.364 li
cp
380.894 145.608 mo
380.894 139.901 li
375.187 142.754 li
cp
401.849 137.047 mo
401.849 131.34 li
396.141 134.193 li
cp
432.407 128.486 mo
432.407 122.779 li
426.7 125.632 li
cp
0 .996857 1 0 cmyk
f
390.903 144.657 mo
390.78 144.657 li
0 0 0 1 cmyk
@
390.78 146.559 mo
390.78 142.754 li
@
396.61 144.657 mo
397.502 144.657 li
@
397.502 146.559 mo
397.502 142.754 li
@
170.236 293.496 mo
170.236 287.789 li
164.529 287.789 li
164.529 293.496 li
cp
182.262 282.767 mo
182.262 277.06 li
176.555 277.06 li
176.555 282.767 li
cp
192.673 273.301 mo
192.673 267.594 li
186.966 267.594 li
186.966 273.301 li
cp
202.849 264.982 mo
202.849 259.275 li
197.142 259.275 li
197.142 264.982 li
cp
211.682 257.498 mo
211.682 251.791 li
205.975 251.791 li
205.975 257.498 li
cp
219.858 250.633 mo
219.858 244.926 li
214.151 244.926 li
214.151 250.633 li
cp
227.915 244.407 mo
227.915 238.7 li
222.208 238.7 li
222.208 244.407 li
cp
235.31 238.661 mo
235.31 232.954 li
229.603 232.954 li
229.603 238.661 li
cp
242.037 233.326 mo
242.037 227.619 li
236.33 227.619 li
236.33 233.326 li
cp
248.82 228.348 mo
248.82 222.641 li
243.113 222.641 li
243.113 228.348 li
cp
255.166 223.682 mo
255.166 217.975 li
249.459 217.975 li
249.459 223.682 li
cp
260.949 219.29 mo
260.949 213.583 li
255.242 213.583 li
255.242 219.29 li
cp
266.534 215.143 mo
266.534 209.436 li
260.827 209.436 li
260.827 215.143 li
cp
272.298 211.214 mo
272.298 205.507 li
266.591 205.507 li
266.591 211.214 li
cp
277.556 207.483 mo
277.556 201.776 li
271.849 201.776 li
271.849 207.483 li
cp
283.182 203.929 mo
283.182 198.222 li
277.475 198.222 li
277.475 203.929 li
cp
287.756 200.537 mo
287.756 194.83 li
282.049 194.83 li
282.049 200.537 li
cp
295.191 195.846 mo
295.191 190.139 li
289.484 190.139 li
289.484 195.846 li
cp
305.305 189.865 mo
305.305 184.158 li
299.598 184.158 li
299.598 189.865 li
cp
314.015 184.301 mo
314.015 178.594 li
308.308 178.594 li
308.308 184.301 li
cp
324.518 178.062 mo
324.518 172.355 li
318.811 172.355 li
318.811 178.062 li
cp
338.281 171.044 mo
338.281 165.337 li
332.574 165.337 li
332.574 171.044 li
cp
358.799 162.251 mo
358.799 156.544 li
353.092 156.544 li
353.092 162.251 li
cp
396.61 147.51 mo
396.61 141.803 li
390.903 141.803 li
390.903 147.51 li
cp
.274083 .836698 0 0 cmyk
f
305.38 235.037 mo
305.862 235.037 li
.532189 0 .123476 0 cmyk
@
305.862 236.94 mo
305.862 233.135 li
@
113.316 372.38 mo
109.511 372.38 109.511 366.672 113.316 366.672 cv
117.121 366.672 117.121 372.38 113.316 372.38 cv
cp
126.066 361.056 mo
122.261 361.056 122.261 355.348 126.066 355.348 cv
129.871 355.348 129.871 361.056 126.066 361.056 cv
cp
136.737 351.675 mo
132.932 351.675 132.932 345.968 136.737 345.968 cv
140.542 345.968 140.542 351.675 136.737 351.675 cv
cp
146.271 343.344 mo
142.466 343.344 142.466 337.636 146.271 337.636 cv
150.075 337.636 150.075 343.344 146.271 343.344 cv
cp
155.983 335.647 mo
152.178 335.647 152.178 329.94 155.983 329.94 cv
159.788 329.94 159.788 335.647 155.983 335.647 cv
cp
163.886 328.857 mo
160.081 328.857 160.081 323.149 163.886 323.149 cv
167.691 323.149 167.691 328.857 163.886 328.857 cv
cp
173.053 322.634 mo
169.249 322.634 169.249 316.926 173.053 316.926 cv
176.858 316.926 176.858 322.634 173.053 322.634 cv
cp
178.938 316.89 mo
175.133 316.89 175.133 311.183 178.938 311.183 cv
182.743 311.183 182.743 316.89 178.938 316.89 cv
cp
185.443 311.558 mo
181.638 311.558 181.638 305.85 185.443 305.85 cv
189.248 305.85 189.248 311.558 185.443 311.558 cv
cp
192.172 306.581 mo
188.367 306.581 188.367 300.874 192.172 300.874 cv
195.977 300.874 195.977 306.581 192.172 306.581 cv
cp
198.561 301.916 mo
194.756 301.916 194.756 296.209 198.561 296.209 cv
202.365 296.209 202.365 301.916 198.561 301.916 cv
cp
203.966 297.526 mo
200.161 297.526 200.161 291.819 203.966 291.819 cv
207.771 291.819 207.771 297.526 203.966 297.526 cv
cp
210.26 293.38 mo
206.455 293.38 206.455 287.673 210.26 287.673 cv
214.065 287.673 214.065 293.38 210.26 293.38 cv
cp
214.73 289.453 mo
210.925 289.453 210.925 283.746 214.73 283.746 cv
218.535 283.746 218.535 289.453 214.73 289.453 cv
cp
220.393 285.722 mo
216.588 285.722 216.588 280.015 220.393 280.015 cv
224.198 280.015 224.198 285.722 220.393 285.722 cv
cp
225.185 282.169 mo
221.38 282.169 221.38 276.462 225.185 276.462 cv
228.99 276.462 228.99 282.169 225.185 282.169 cv
cp
229.471 278.778 mo
225.666 278.778 225.666 273.071 229.471 273.071 cv
233.276 273.071 233.276 278.778 229.471 278.778 cv
cp
242.105 272.862 mo
238.3 272.862 238.3 267.155 242.105 267.155 cv
245.909 267.155 245.909 272.862 242.105 272.862 cv
cp
260.398 260.551 mo
256.593 260.551 256.593 254.843 260.398 254.843 cv
264.203 254.843 264.203 260.551 260.398 260.551 cv
cp
302.526 237.891 mo
298.721 237.891 298.721 232.184 302.526 232.184 cv
306.331 232.184 306.331 237.891 302.526 237.891 cv
cp
f
139.509 354.306 mo
138.742 354.306 li
0 .996857 1 0 cmyk
@
138.742 356.209 mo
138.742 352.404 li
@
139.509 354.306 mo
140.319 354.306 li
@
140.319 356.209 mo
140.319 352.404 li
@
146.657 349.835 mo
145.683 349.835 li
@
145.683 351.738 mo
145.683 347.933 li
@
146.657 349.835 mo
147.702 349.835 li
@
147.702 351.738 mo
147.702 347.933 li
@
149.905 345.859 mo
148.892 345.859 li
@
148.892 347.761 mo
148.892 343.956 li
@
149.905 345.859 mo
150.995 345.859 li
@
150.995 347.761 mo
150.995 343.956 li
@
153.999 341.854 mo
152.841 341.854 li
@
152.841 343.756 mo
152.841 339.951 li
@
153.999 341.854 mo
155.257 341.854 li
@
155.257 343.756 mo
155.257 339.951 li
@
159.717 337.618 mo
158.405 337.618 li
@
158.405 339.521 mo
158.405 335.716 li
@
159.717 337.618 mo
161.159 337.618 li
@
161.159 339.521 mo
161.159 335.716 li
@
165.346 334.229 mo
163.74 334.229 li
@
163.74 336.132 mo
163.74 332.327 li
@
165.346 334.229 mo
167.152 334.229 li
@
167.152 336.132 mo
167.152 332.327 li
@
168.368 329.807 mo
167.106 329.807 li
@
167.106 331.71 mo
167.106 327.905 li
@
168.368 329.807 mo
169.751 329.807 li
@
169.751 331.71 mo
169.751 327.905 li
@
175.598 323.631 mo
174.011 323.631 li
@
174.011 325.533 mo
174.011 321.728 li
@
175.598 323.631 mo
177.379 323.631 li
@
177.379 325.533 mo
177.379 321.728 li
@
186.101 314.353 mo
184.737 314.353 li
@
184.737 316.255 mo
184.737 312.45 li
@
186.101 314.353 mo
187.607 314.353 li
@
187.607 316.255 mo
187.607 312.45 li
@
208.163 299.192 mo
205.669 299.192 li
@
205.669 301.094 mo
205.669 297.29 li
@
208.163 299.192 mo
211.173 299.192 li
@
211.173 301.094 mo
211.173 297.29 li
@
234.552 282.247 mo
229.127 282.247 li
@
229.127 284.15 mo
229.127 280.345 li
@
234.552 282.247 mo
243.296 282.247 li
@
243.296 284.15 mo
243.296 280.345 li
@
139.509 357.16 mo
135.704 357.16 135.704 351.453 139.509 351.453 cv
143.314 351.453 143.314 357.16 139.509 357.16 cv
cp
146.657 352.689 mo
142.852 352.689 142.852 346.982 146.657 346.982 cv
150.462 346.982 150.462 352.689 146.657 352.689 cv
cp
149.905 348.712 mo
146.1 348.712 146.1 343.005 149.905 343.005 cv
153.71 343.005 153.71 348.712 149.905 348.712 cv
cp
153.999 344.707 mo
150.194 344.707 150.194 339 153.999 339 cv
157.804 339 157.804 344.707 153.999 344.707 cv
cp
159.717 340.472 mo
155.912 340.472 155.912 334.765 159.717 334.765 cv
163.522 334.765 163.522 340.472 159.717 340.472 cv
cp
165.346 337.083 mo
161.541 337.083 161.541 331.375 165.346 331.375 cv
169.151 331.375 169.151 337.083 165.346 337.083 cv
cp
168.368 332.661 mo
164.564 332.661 164.564 326.954 168.368 326.954 cv
172.173 326.954 172.173 332.661 168.368 332.661 cv
cp
175.598 326.484 mo
171.793 326.484 171.793 320.777 175.598 320.777 cv
179.403 320.777 179.403 326.484 175.598 326.484 cv
cp
186.101 317.207 mo
182.296 317.207 182.296 311.499 186.101 311.499 cv
189.906 311.499 189.906 317.207 186.101 317.207 cv
cp
208.163 302.046 mo
204.358 302.046 204.358 296.338 208.163 296.338 cv
211.967 296.338 211.967 302.046 208.163 302.046 cv
cp
234.552 285.101 mo
230.747 285.101 230.747 279.394 234.552 279.394 cv
238.357 279.394 238.357 285.101 234.552 285.101 cv
cp
@
190.461 299.973 mo
190.612 299.973 li
.897551 .783413 0 0 cmyk
@
190.612 301.875 mo
190.612 298.07 li
@
333.976 223.038 mo
332.731 223.038 li
@
332.731 224.94 mo
332.731 221.135 li
@
339.684 223.038 mo
342.557 223.038 li
@
342.557 224.94 mo
342.557 221.135 li
@
167.318 320.448 mo
167.318 314.741 li
161.61 317.595 li
cp
171.347 317.207 mo
171.347 311.499 li
165.64 314.353 li
cp
175.106 314.1 mo
175.106 308.393 li
169.398 311.246 li
cp
178.951 311.118 mo
178.951 305.41 li
173.243 308.264 li
cp
183.308 308.25 mo
183.308 302.543 li
177.601 305.397 li
cp
186.917 305.489 mo
186.917 299.782 li
181.21 302.635 li
cp
190.461 302.826 mo
190.461 297.119 li
184.753 299.973 li
cp
194.524 300.255 mo
194.524 294.548 li
188.817 297.402 li
cp
197.927 297.77 mo
197.927 292.063 li
192.219 294.917 li
cp
201.857 295.365 mo
201.857 289.658 li
196.149 292.512 li
cp
204.762 293.036 mo
204.762 287.328 li
199.054 290.182 li
cp
207.768 290.776 mo
207.768 285.069 li
202.061 287.923 li
cp
210.978 288.584 mo
210.978 282.876 li
205.271 285.73 li
cp
214.457 286.454 mo
214.457 280.746 li
208.75 283.6 li
cp
217.286 284.383 mo
217.286 278.676 li
211.579 281.529 li
cp
220.359 282.368 mo
220.359 276.661 li
214.651 279.514 li
cp
223.606 280.406 mo
223.606 274.699 li
217.899 277.552 li
cp
226.854 278.495 mo
226.854 272.787 li
221.147 275.641 li
cp
230.303 276.631 mo
230.303 270.923 li
224.595 273.777 li
cp
232.358 274.812 mo
232.358 269.105 li
226.65 271.959 li
cp
235.473 273.038 mo
235.473 267.33 li
229.766 270.184 li
cp
238.401 271.304 mo
238.401 265.596 li
232.694 268.45 li
cp
241.624 269.609 mo
241.624 263.902 li
235.917 266.756 li
cp
245.197 267.138 mo
245.197 261.431 li
239.49 264.284 li
cp
251.219 263.965 mo
251.219 258.258 li
245.512 261.112 li
cp
255.984 260.922 mo
255.984 255.215 li
250.277 258.069 li
cp
262.708 257.999 mo
262.708 252.291 li
257 255.145 li
cp
266.191 255.185 mo
266.191 249.478 li
260.484 252.331 li
cp
276.554 251.155 mo
276.554 245.447 li
270.846 248.301 li
cp
288.522 244.887 mo
288.522 239.179 li
282.815 242.033 li
cp
306.391 236.912 mo
306.391 231.205 li
300.684 234.058 li
cp
339.684 225.891 mo
339.684 220.184 li
333.976 223.038 li
cp
@
135.186 340.716 mo
134.979 340.716 li
0 0 0 1 cmyk
@
134.979 342.618 mo
134.979 338.813 li
@
140.894 340.716 mo
141.921 340.716 li
@
141.921 342.618 mo
141.921 338.813 li
@
139.108 336.329 mo
139 336.329 li
@
139 338.232 mo
139 334.427 li
@
144.815 336.329 mo
145.683 336.329 li
@
145.683 338.232 mo
145.683 334.427 li
@
266.956 249.62 mo
266.937 249.62 li
@
266.937 251.523 mo
266.937 247.718 li
@
272.663 249.62 mo
273.392 249.62 li
@
273.392 251.523 mo
273.392 247.718 li
@
285.111 238.51 mo
283.963 238.51 li
@
283.963 240.413 mo
283.963 236.608 li
@
290.818 238.51 mo
293.502 238.51 li
@
293.502 240.413 mo
293.502 236.608 li
@
305.106 227.843 mo
301.348 227.843 li
@
301.348 229.745 mo
301.348 225.94 li
@
310.813 227.843 mo
320.414 227.843 li
@
320.414 229.745 mo
320.414 225.94 li
@
140.894 343.569 mo
140.894 337.862 li
135.186 340.716 li
cp
144.815 339.183 mo
144.815 333.475 li
139.108 336.329 li
cp
148.484 335.04 mo
148.484 329.333 li
142.777 332.187 li
cp
153.624 331.116 mo
153.624 325.409 li
147.916 328.262 li
cp
157.324 327.388 mo
157.324 321.68 li
151.617 324.534 li
cp
161.133 323.837 mo
161.133 318.13 li
155.426 320.984 li
cp
165.445 320.448 mo
165.445 314.741 li
159.738 317.595 li
cp
168.404 317.207 mo
168.404 311.499 li
162.696 314.353 li
cp
172.067 314.1 mo
172.067 308.393 li
166.36 311.246 li
cp
174.944 311.118 mo
174.944 305.41 li
169.237 308.264 li
cp
178.908 308.25 mo
178.908 302.543 li
173.201 305.397 li
cp
182.476 305.489 mo
182.476 299.782 li
176.769 302.635 li
cp
187.138 302.826 mo
187.138 297.119 li
181.431 299.973 li
cp
191.325 300.255 mo
191.325 294.548 li
185.618 297.402 li
cp
195.026 297.77 mo
195.026 292.063 li
189.318 294.917 li
cp
198.96 295.365 mo
198.96 289.658 li
193.253 292.512 li
cp
203.774 293.036 mo
203.774 287.328 li
198.067 290.182 li
cp
205.477 290.776 mo
205.477 285.069 li
199.769 287.923 li
cp
210.161 288.584 mo
210.161 282.876 li
204.454 285.73 li
cp
212.297 286.454 mo
212.297 280.746 li
206.589 283.6 li
cp
215.255 284.383 mo
215.255 278.676 li
209.547 281.529 li
cp
216.318 282.368 mo
216.318 276.661 li
210.61 279.514 li
cp
225.344 279.444 mo
225.344 273.737 li
219.636 276.591 li
cp
229.599 275.716 mo
229.599 270.009 li
223.892 272.862 li
cp
235.639 272.166 mo
235.639 266.458 li
229.932 269.312 li
cp
245.686 267.138 mo
245.686 261.431 li
239.979 264.284 li
cp
254.167 260.922 mo
254.167 255.215 li
248.46 258.069 li
cp
272.663 252.474 mo
272.663 246.767 li
266.956 249.62 li
cp
290.818 241.364 mo
290.818 235.657 li
285.111 238.51 li
cp
310.813 230.696 mo
310.813 224.989 li
305.106 227.843 li
cp
f
88.335 462.987 mo
84.94 462.987 li
@
84.94 464.89 mo
84.94 461.085 li
@
92.901 462.987 mo
100.055 462.987 li
@
100.055 464.89 mo
100.055 461.085 li
@
115.892 450.177 mo
115.247 450.177 li
@
115.247 452.079 mo
115.247 448.274 li
@
120.458 450.177 mo
121.844 450.177 li
@
121.844 452.079 mo
121.844 448.274 li
@
137.533 440.1 mo
135.594 440.1 li
@
135.594 442.002 mo
135.594 438.197 li
@
142.099 440.1 mo
145.788 440.1 li
@
145.788 442.002 mo
145.788 438.197 li
@
146.159 434.331 mo
144.623 434.331 li
@
144.623 436.233 mo
144.623 432.428 li
@
150.725 434.331 mo
153.633 434.331 li
@
153.633 436.233 mo
153.633 432.428 li
@
174.867 422.613 mo
170.948 422.613 li
@
170.948 424.516 mo
170.948 420.711 li
@
179.432 422.613 mo
188.178 422.613 li
@
188.178 424.516 mo
188.178 420.711 li
@
86.813 462.987 mo
89.442 462.133 li
89.442 459.369 li
91.067 461.605 li
93.696 460.751 li
92.071 462.987 li
93.696 465.224 li
91.067 464.37 li
89.442 466.606 li
89.442 463.842 li
cp
114.37 450.177 mo
116.999 449.322 li
116.999 446.558 li
118.624 448.794 li
121.253 447.94 li
119.629 450.177 li
121.253 452.413 li
118.624 451.559 li
116.999 453.795 li
116.999 451.031 li
cp
136.011 440.1 mo
138.641 439.245 li
138.641 436.481 li
140.265 438.718 li
142.895 437.863 li
141.27 440.1 li
142.895 442.336 li
140.265 441.482 li
138.641 443.718 li
138.641 440.954 li
cp
144.637 434.331 mo
147.266 433.477 li
147.266 430.712 li
148.891 432.949 li
151.52 432.094 li
149.895 434.331 li
151.52 436.567 li
148.891 435.713 li
147.266 437.949 li
147.266 435.185 li
cp
173.345 422.613 mo
175.974 421.759 li
175.974 418.995 li
177.599 421.231 li
180.228 420.377 li
178.603 422.613 li
180.228 424.85 li
177.599 423.995 li
175.974 426.232 li
175.974 423.467 li
cp
@
75.807 461.795 mo
73.4 461.795 li
.897551 .783413 0 0 cmyk
@
73.4 463.697 mo
73.4 459.892 li
@
79.231 461.795 mo
83.285 461.795 li
@
83.285 463.697 mo
83.285 459.892 li
@
100.928 446.726 mo
97.53 446.726 li
@
97.53 448.629 mo
97.53 444.824 li
@
104.352 446.726 mo
110.583 446.726 li
@
110.583 448.629 mo
110.583 444.824 li
@
114.678 436.259 mo
113.831 436.259 li
@
113.831 438.161 mo
113.831 434.356 li
@
118.103 436.259 mo
119.499 436.259 li
@
119.499 438.161 mo
119.499 434.356 li
@
133.242 426.366 mo
132.263 426.366 li
@
132.263 428.268 mo
132.263 424.463 li
@
136.666 426.366 mo
138.258 426.366 li
@
138.258 428.268 mo
138.258 424.463 li
@
150.791 419.559 mo
149.905 419.559 li
@
149.905 421.462 mo
149.905 417.657 li
@
154.215 419.559 mo
155.667 419.559 li
@
155.667 421.462 mo
155.667 417.657 li
@
163.433 411.025 mo
163.103 411.025 li
@
163.103 412.927 mo
163.103 409.123 li
@
166.858 411.025 mo
167.523 411.025 li
@
167.523 412.927 mo
167.523 409.123 li
@
74.665 461.795 mo
76.637 461.154 li
76.637 459.081 li
77.856 460.758 li
79.828 460.117 li
78.609 461.795 li
79.828 463.472 li
77.856 462.831 li
76.637 464.509 li
76.637 462.435 li
cp
99.786 446.726 mo
101.758 446.086 li
101.758 444.012 li
102.977 445.69 li
104.949 445.049 li
103.73 446.726 li
104.949 448.404 li
102.977 447.763 li
101.758 449.44 li
101.758 447.367 li
cp
113.537 436.259 mo
115.509 435.618 li
115.509 433.545 li
116.728 435.222 li
118.699 434.582 li
117.481 436.259 li
118.699 437.936 li
116.728 437.296 li
115.509 438.973 li
115.509 436.9 li
cp
132.1 426.366 mo
134.072 425.725 li
134.072 423.652 li
135.291 425.329 li
137.263 424.688 li
136.044 426.366 li
137.263 428.043 li
135.291 427.402 li
134.072 429.08 li
134.072 427.006 li
cp
149.649 419.559 mo
151.621 418.919 li
151.621 416.845 li
152.84 418.523 li
154.812 417.882 li
153.593 419.559 li
154.812 421.237 li
152.84 420.596 li
151.621 422.273 li
151.621 420.2 li
cp
162.292 411.025 mo
164.264 410.384 li
164.264 408.311 li
165.482 409.988 li
167.454 409.348 li
166.236 411.025 li
167.454 412.702 li
165.482 412.062 li
164.264 413.739 li
164.264 411.666 li
cp
@
56.505 361.536 mo
56.018 361.536 li
0 .996857 1 0 cmyk
@
56.018 363.438 mo
56.018 359.633 li
@
62.212 361.536 mo
63.701 361.536 li
@
63.701 363.438 mo
63.701 359.633 li
@
92.771 332.048 mo
92.864 332.048 li
@
92.864 333.95 mo
92.864 330.145 li
@
355.979 95.193 mo
355.811 95.193 li
@
355.811 97.096 mo
355.811 93.291 li
@
361.686 95.193 mo
362.65 95.193 li
@
362.65 97.096 mo
362.65 93.291 li
@
385.664 79.974 mo
384.236 79.974 li
@
384.236 81.876 mo
384.236 78.071 li
@
391.371 79.974 mo
394.61 79.974 li
@
394.61 81.876 mo
394.61 78.071 li
@
404.872 64.754 mo
400.824 64.754 li
@
400.824 66.656 mo
400.824 62.852 li
@
410.58 64.754 mo
421.31 64.754 li
@
421.31 66.656 mo
421.31 62.852 li
@
62.212 361.536 mo
56.505 358.682 li
56.505 364.389 li
cp
92.771 332.048 mo
87.063 329.194 li
87.063 334.901 li
cp
118.091 306.365 mo
112.383 303.511 li
112.383 309.218 li
cp
138.172 285.438 mo
132.465 282.584 li
132.465 288.292 li
cp
160.873 262.609 mo
155.165 259.755 li
155.165 265.462 li
cp
187.066 235.974 mo
181.358 233.121 li
181.358 238.828 li
cp
213.259 213.145 mo
207.551 210.291 li
207.551 215.999 li
cp
233.34 195.072 mo
227.633 192.218 li
227.633 197.925 li
cp
249.929 180.803 mo
244.222 177.95 li
244.222 183.657 li
cp
268.264 163.681 mo
262.557 160.828 li
262.557 166.535 li
cp
290.092 146.559 mo
284.384 143.706 li
284.384 149.413 li
cp
310.173 131.34 mo
304.466 128.486 li
304.466 134.193 li
cp
334.62 113.266 mo
328.912 110.413 li
328.912 116.12 li
cp
361.686 95.193 mo
355.979 92.34 li
355.979 98.047 li
cp
391.371 79.974 mo
385.664 77.12 li
385.664 82.827 li
cp
410.58 64.754 mo
404.872 61.9 li
404.872 67.608 li
cp
f
77.103 361.412 mo
76.327 361.412 li
0 0 0 1 cmyk
@
76.327 363.314 mo
76.327 359.51 li
@
82.81 361.412 mo
84.804 361.412 li
@
84.804 363.314 mo
84.804 359.51 li
@
108.206 331.186 mo
108.007 331.186 li
@
108.007 333.088 mo
108.007 329.284 li
@
113.914 331.186 mo
114.927 331.186 li
@
114.927 333.088 mo
114.927 329.284 li
@
267.223 194.375 mo
267.156 194.375 li
@
267.156 196.277 mo
267.156 192.473 li
@
272.931 194.375 mo
273.735 194.375 li
@
273.735 196.277 mo
273.735 192.473 li
@
285.019 179.995 mo
283.346 179.995 li
@
283.346 181.897 mo
283.346 178.092 li
@
290.727 179.995 mo
294.478 179.995 li
@
294.478 181.897 mo
294.478 178.092 li
@
304.291 164.062 mo
301.51 164.062 li
@
301.51 165.964 mo
301.51 162.159 li
@
309.998 164.062 mo
316.462 164.062 li
@
316.462 165.964 mo
316.462 162.159 li
@
331.004 145.945 mo
322.48 145.945 li
@
322.48 147.847 mo
322.48 144.043 li
@
336.712 145.945 mo
462.195 145.945 li
@
462.195 147.847 mo
462.195 144.043 li
@
82.81 364.266 mo
82.81 358.559 li
77.1027 358.559 li
77.1027 364.266 li
cp
113.914 334.04 mo
113.914 328.333 li
108.207 328.333 li
108.207 334.04 li
cp
140.77 308.957 mo
140.77 303.25 li
135.063 303.25 li
135.063 308.957 li
cp
163.274 287.511 mo
163.274 281.804 li
157.567 281.804 li
157.567 287.511 li
cp
188.058 264.746 mo
188.058 259.039 li
182.351 259.039 li
182.351 264.746 li
cp
216.822 238.551 mo
216.822 232.844 li
211.115 232.844 li
211.115 238.551 li
cp
247.032 215.062 mo
247.032 209.355 li
241.325 209.355 li
241.325 215.062 li
cp
272.931 197.229 mo
272.931 191.522 li
267.224 191.522 li
267.224 197.229 li
cp
290.727 182.848 mo
290.727 177.141 li
285.02 177.141 li
285.02 182.848 li
cp
309.998 166.915 mo
309.998 161.208 li
304.291 161.208 li
304.291 166.915 li
cp
336.712 148.799 mo
336.712 143.092 li
331.005 143.092 li
331.005 148.799 li
cp
.897551 .783413 0 0 cmyk
f
180.954 245.487 mo
180.954 239.779 li
175.247 242.633 li
cp
192.304 235.023 mo
192.304 229.316 li
186.597 232.169 li
cp
202.782 224.56 mo
202.782 218.852 li
197.074 221.706 li
cp
213.259 215.999 mo
213.259 210.291 li
207.551 213.145 li
cp
222.863 206.486 mo
222.863 200.779 li
217.155 203.633 li
cp
232.467 198.877 mo
232.467 193.169 li
226.76 196.023 li
cp
241.198 190.316 mo
241.198 184.608 li
235.491 187.462 li
cp
249.929 182.706 mo
249.929 176.998 li
244.222 179.852 li
cp
258.66 176.047 mo
258.66 170.34 li
252.953 173.194 li
cp
267.391 168.437 mo
267.391 162.73 li
261.684 165.584 li
cp
275.249 161.779 mo
275.249 156.072 li
269.542 158.925 li
cp
283.107 156.072 mo
283.107 150.364 li
277.399 153.218 li
cp
290.965 149.413 mo
290.965 143.706 li
285.257 146.559 li
cp
298.823 143.706 mo
298.823 137.998 li
293.115 140.852 li
cp
306.681 137.047 mo
306.681 131.34 li
300.973 134.193 li
cp
314.538 131.34 mo
314.538 125.632 li
308.831 128.486 li
cp
321.523 125.632 mo
321.523 119.925 li
315.816 122.779 li
cp
329.381 120.876 mo
329.381 115.169 li
323.674 118.023 li
cp
337.239 115.169 mo
337.239 109.462 li
331.532 112.315 li
cp
345.097 110.413 mo
345.097 104.705 li
339.39 107.559 li
cp
352.082 104.705 mo
352.082 98.998 li
346.374 101.852 li
cp
359.94 99.949 mo
359.94 94.242 li
354.232 97.096 li
cp
367.798 94.242 mo
367.798 88.535 li
362.09 91.388 li
cp
376.529 89.486 mo
376.529 83.779 li
370.821 86.632 li
cp
385.26 84.73 mo
385.26 79.022 li
379.552 81.876 li
cp
392.244 79.974 mo
392.244 74.266 li
386.537 77.12 li
cp
400.975 75.217 mo
400.975 69.51 li
395.268 72.364 li
cp
413.199 71.413 mo
413.199 65.705 li
407.492 68.559 li
cp
422.803 66.656 mo
422.803 60.949 li
417.096 63.803 li
cp
431.534 61.9 mo
431.534 56.193 li
425.827 59.047 li
cp
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f321186289e000000cc000000606376
74206741296a0000012c000003886670676db24d5cc5000004b400000b97
676c796665fbf61600005fa40003e01c68656164bc89f5600000104c0000
0036686865619a0f85080000108400000024686d7478c2fdbc55000010a8
000022486c6f63610ec2ca9c000032f00000224c6d61787011060c900000
553c000000206e616d65ea5eadef0000555c0000067470726570b552e591
00005bd0000003d367646972000000000000000000000000000303d402bc
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300200009
feff0600fea4003d07ae01db2000019f4f010000044205c2000000200000
05c0001105c2002d0597001d0442001d0000ffda0000ffdb0000ffdafe53
ffef05d0000afffdffed03340000012200000122dffb011400af000700b7
007e000400d200aa0109002300ed013200d9011d012a00d800fe00db00e2
001a008b00a0001a004500e801f6000900e90128013200360082009e009f
ff700070003f003f00e801050015003800e9ff7bffc8fff90042008a00c4
01070113011dffb9002f00870087009a009c010c0262ffb10018004c0077
0080008200c900daffb2ffea001a003600e50111012f043bffdd00020005
001a0039008900aa00b701210123012a015bffe5000200180023005c00aa
ff4dff76ffb2ffef001a002f004e007b008a00e1011f0126012b019a01de
03edff80ff8e0007001c004e005500630063006d00810098009c00ad011f
01260162041c051500390044004b0063008e00cc00e800f2010001290142
017802d503ea03f0043b049affc400050055005c0060009f0103011d0124
01550164017001ad01b401c301f602370261033903d5047004a100020055
008800a100bd00c700d300dd00eb00ed00fa00fd0104012b013e014f017b
019d01ad01e20233025d027d028c02da02ef033103de0407048b058505bb
ff04ffd5fffa0007001e002a003b004700510058006500650066006e0075
007f00840107009700b100c300cc00df00df010a0110012f013101470154
015b016b0179009101a401ba01dc01e401e601e901f60213021f0223022f
0276027d0282028902ad02b202b902ed03110374037d03c003de03f60415
045d04c004c004df052d0574061c064b0751fe94fedfff2dff90ff9affea
0016001600240029002d003e0104006d006d008400870089008e009c00a4
00ab00ae00b200b2fffb013900c400d100df00e100ef00f70121011c011c
012101320138015001510154016c016d017f019801a401aa01b601ba01bb
01bb00d701d701fb01fb01fe00190209022d025b026102790279029a0098
02d302da02ef030c03210328032d034b0353fff103ad03b103f20425045a
0471047b048a0498049f051c053d0557055a0570059505b605cb05d605ef
05f4061d068706a406b406d307080734079807fe012201320120012500b4
00be0082009603700132012400430184011d015600cc010500ed00c500fb
00f900c000a7011d00fe035500880026ffa100b8ff8800dd00bd00b5037c
003c00910293024aff3f03a803090132fff700820030002a002a002a002a
002a002a402a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d
6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c20b0032552582359212d2c69b04061b0008b0c6423648bb840
0062600c642364615c58b0036159b002602d2c45b0112bb0172344b0177a
e5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae5
182d2cb002254661658a46b040608b482d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b0005058b21a
401a4523604459b0005258b219401945236044592d2cb9187e3b210b2d2c
b92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b
2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b040
60b0206320b000525823b002253823b002256538008a63381b2121212121
59012d2c456920b00943b0022660b00325b005254961b0805358b2194019
4523616844b21a401a4523606a44b209191a45652345604259b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2c764520b00325452361681823686044
2d2c7645b00325452361682318456860442d2c7645b00325456168234523
61442db8002a2c4bb800095058b101018e59b801ff85b800441db9000900
035f5e2db8002b2c2020456944b001602db8002c2cb8002b2a212db8002d
2c2046b003254652582359208a208a49648a204620686164b00425462068
6164525823658a592f20b00053586920b000545821b040591b6920b00054
5821b0406559593a2db8002e2c2046b00425465258238a592046206a6164
b0042546206a61645258238a592ffd2db8002f2c4b20b0032650585158b0
80441bb04044591b21212045b0c05058b0c0441b2159592db800302c2020
456944b001602020457d691844b001602db800312cb800302a2db800322c
4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800332c4b535845441b2121592db80034
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
352c2020456944b001602db800362cb800352a212db800372c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800382c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800392c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db8003a2c2020456944b00160
2020457d691844b001602db8003b2cb8003a2a2db8003c2c4b20b0032653
58b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653
582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920
b80003265358b0032545b8018050582321b8018023211bb0032545232123
21591b2159442db8003d2c4b535845441b2121592db8003e2c4bb8000950
58b101018e59b801ff85b800441db9000900035f5e2db8003f2c20204569
44b001602db800402cb8003f2a212db800412c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db80042
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db800432c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800442c2020456944b001602020457d6918
44b001602db800452cb800442a2db800462c4b20b003265358b0801bb040
598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db800472c4b535845441b2121592db800482c4bb800095058b101018e59
b801ff85b800441db9000900035f5e2db800492c2020456944b001602db8
004a2cb800492a212db8004b2c2046b003254652582359208a208a49648a
204620686164b004254620686164525823658a592f20b00053586920b000
545821b040591b6920b000545821b0406559593a2db8004c2c2046b00425
465258238a592046206a6164b0042546206a61645258238a592ffd2db800
4d2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db8004e2c2020456944b001602020457d691844b001602db8
004f2cb8004e2a2db800502c4b20b003265358b0801bb040598a8a20b003
2653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800512c4b
535845441b2121592db800522c4bb800095058b101018e59b801ff85b800
441db9000900035f5e2db800532c2020456944b001602db800542cb80053
2a212db800552c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db800562c2046b00425465258238a59
2046206a6164b0042546206a61645258238a592ffd2db800572c4b20b003
2650585158b080441bb04044591b21212045b0c05058b0c0441b2159592d
b800582c2020456944b001602020457d691844b001602db800592cb80058
2a2db8005a2c4b20b003265358b0401bb000598a8a20b0032653582321b0
808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8
0003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db8005b2c4b535845441b2121592db8005c2c4bb800095058
b101018e59b801ff85b800441db9000900035f5e2db8005d2c2020456944
b001602db8005e2cb8005d2a212db8005f2c2046b003254652582359208a
208a49648a204620686164b004254620686164525823658a592f20b00053
586920b000545821b040591b6920b000545821b0406559593a2db800602c
2046b00425465258238a592046206a6164b0042546206a61645258238a59
2ffd2db800612c4b20b0032650585158b080441bb04044591b21212045b0
c05058b0c0441b2159592db800622c2020456944b001602020457d691844
b001602db800632cb800622a2db800642c4b20b003265358b0401bb00059
8a8a20b0032653582321b0808a8a1b8a235920b0032653582321b800c08a
8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321
b801408a8a1b8a235920b80003265358b0032545b8018050582321b80180
23211bb003254523212321591b2159442db800652c4b535845441b212159
2d000001000000010000ef9f9d525f0f3cf50011080000000000a2272e80
00000000cb97f49ff7dcfc270b7e09460001000900010001000000000001
00000629fe2900000c01f7dcfcdb0b7e0001000000000000000000000000
0000089205c7009a00000000023900000239000002aa00e103cb00a70473
000004730038071d002f05c7006f01e7006302aa005902aa0015031d002f
04ac00490239007602aa002f023900800239ff90047300400473008e0473
00400473003604730036047300360473004004730034047300360473003d
02aa00e802aa00e804ac001704ac004904ac001704e3007b07cd00c705c7
003405c700a105c7005c05c7009c055600a504e3009c0639005505c7009a
023900840473002d05c700a104e3009c06aa009705c70097063900650556
00a30639006505c700a30556005504e3002105c7009c0556002f078d001e
055600210556002304e3003402aa00800239ff9002aa002f04ac008b0473
000002aaffce0473003b04e3007b0473004704e3003f0473002f02aa0015
04e3004204e300870239008902390009047300820239008b071d008004e3
008704e3004204e3007d04e3003c031d00820473004202aa001504e3007d
0473001a0639000e0473001a0473001504000021031d0000023d006a031d
002d04ac000405c7003405c7003405c7005c055600a505c7009706390065
05c7009c0473003b0473003b0473003b0473003b0473003b0473003b0473
00470473002f0473002f0473002f0473002f023900760239ffce0239ffb6
0239ffd504e3008704e3004204e3004204e3004204e3004204e3004204e3
007d04e3007d04e3007d04e3007d047300470333005e0473004504730042
0473004102cd00910473ffc304e3008905e5001a05e5001a080000cb02aa
007602aaffd504640049080000120639004705b400190464004904640047
046400490473ffea049cffcb03f4002405b4fff706960007046400290231
007602f6002802ec000e06250031071d003804e3002a04e3006d02aa00e1
04ac00490464ffd50473001e0464004904e5fffa047300af047300000800
00bd0239000005c7003405c70034063900650800004b078d003f0473fffb
080000f10400008b0400009702390089023900840464004903f400210473
0015055600230156fea305f4004402aa00aa02aa00aa04e3001c04e3001c
047300470239007102390092040000920800000405c70034055600a505c7
0034055600a5055600a5023900760239ffb60239ffd50239ffce06390065
06390065065200690639006505c7009c05c7009c05c7009c0239008902aa
ffb602aaffa802aaffbd02aaffc902aa009a02aa004202aa001202aaffd3
02aa004202aaffb604e3fff10239ffe8055600550473004204e300340400
0021023d006a05c7001204e3006d05560023047300150556008004e30080
04ac004904ac005502aa005002aa001a02aa001206ac002f06ac005a06ac
004e047300000639005504e3004202390084055600550473004205c7005c
0473004705c7005c0473004704e3003f05c700340473003b05c700340473
003b05c700340473003b05c7005c0473004705c7005c0473004705c7009c
0600003f055600a50473002f055600a50473002f055600a50473002f0556
00a50473002f055600a50473002f0639005504e300420639005504e30042
0639005504e3004204e3004205c7009a04e3008705c7000f04e3fff1035c
fffc037100010366000a035c000c0239000b0239000306ac008404720089
0473002d027bffc905c7008e0473005804e3009c0271008b04e3009c0239
002704e3009c0356008b04e3009c0329008b05c7009704e3008705c70075
04e3005c05c7009704e3008704e300870639006504e300420639006504e3
00420639006504e3004205c700a3031d008205c70092031d006905c700a3
031d00360556005504730042055600550473004204e3002102aa001504e3
002103b8001504e3002102aaffe305c7009c04e3007d05c7009c04e3007d
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d078d001e0639000e055600230473001504e300340400002104e30034
04000021055600550473004204e3002102aa0015047300360000fc910000
fc900000fc250000fc180000fc2c0000fc360000fd0d0000fc450000fcb5
0000fbd80000fc250000fd010000fc9d0000fcb50000fbfb05c700120639
005504e3004204e3009c0239008b05c700a10473008205c7009704e30087
05c700a3031d0080020e000802aa00e702aa002f023900090473008202aa
0015047300300473002e047300460473003a0000fcfb0000fc2c0000fc36
0239ffcc0239ffc905c7009704e300870000fc2b05c7002905c700a805c7
00a804a000a805c70019055600a80800001904e3003d05c7008f05c7008f
05c700b205ec004e06aa008f05c7008f0639005a05c7008f055600a805c7
005a04e500190556003106ac003d0556001b05c7008f0556005a078d008f
078d008f06aa002f078d00a8055600a805c7005a0800008f05cb00460473
003904e3004604e3008f038d00870531001f0473003506ac00100400002d
04e3008704e3008704e3008f0556004605c7008704e3008704e5004604e3
008704e3007f04730046040000290473001d06a800460473001f04e30087
0473003f06ac008706aa00870556002906aa008704a000850473004606aa
008704e30056055600a80473003504a000a8038d0087023900830239008f
0473002f05c7005a047300460239ffcf0239ffcf080000140750004607e9
008f070e0087023900040556004e0664001704e3002905c700b204e3008f
047300440617001004e30029055600310473001d05c7008f04e3008504e3
00a8038d00870000fd010000fd010000fd010000fd010000fbd80000fd43
0000fc9e0000fc360000fc910000fc900000fc2c0000fd0d0000fc450000
fcb50000fd430000fc250000fc250000fc360000fc360000fc180000fc54
0000fc2c0000fc180000fc2c0000fc2c0000fc2c0000fd0d0000fc2c0000
fd010000fc360000fc240000fc9e0000000002aa001504e30086071d0080
031d0081071d0080031d0082031d0081040a0046040a004702390089030b
ffd802aa001502aa0015047300190639000d0473001404e3007b04e3007b
04e3007b0473008104bc003b04bc003b05c7005b05c70012049e00480556
00a4055600560473004304c3003d0758009c0671007d0633005b023d00a5
043b00a502aa00e10494001b04730047011d004502aa00af02aa00af0b62
0004056500bd02a500bd040000970239008502aa002f0473000004e200af
04e200af06e400af06e400af02aa002f02a500bd02aa002f080000f10554
01d000000000000000000000000000000000000000000000000000000000
000000000239000002390000023900000239000002390000023900000239
000002390000023900000000000000000000000000000000000000000000
023900000239000002aafff6043b00a504e3007b02aa002f02aafff60473
00050473000005c7003404e3009c0473002e07920065065c00420000fd22
0000fd220000fd220000fd220000fc900000fc8d0000fd470000fc790000
fc990000fc940000fc860000fc9a0000fc080000fcf10000fcf70000fc80
0000fc820000fc540000fbfb0000fc810000fc810000fc810000fc820000
fc820000fc3602aa00af04e200af02aa00af02aa00af0464001304640019
04510011046e002405b4007705b400830231ff5e0231ff6e0464ff520464
ffd5046400110464001a08fa005e0816005e05c700a10239008404720084
06ab0084078f00840556002f078f002f09c8002f0c01002f078f00840556
0021078f002109c8002104e3009c05c7005c05c7009c06aa009702390089
0472008906ab008906ac00890473001a06ac001a08e5001a0b1e001a06ac
00890473001a06ac001a08e5001a0239008b0473004704e3003f071d0080
09d70048090f0058087b003f0876006d06af006d042c008b09440063073f
00680667005d05c700340473003b0239ffb60239ffb60639006504e30042
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d05c7009c04e3007d05c700340473003b05c700340473003b08000012
071d00380639005504e3004205c700a1047300820639006504e300420639
006504e300420239ffb60a0c006d0939006808ab003f0639005505c70097
04e3008705c700340473003b08000012071d00380639004704e3002a05c7
00340473003605c700340473003b055600a50473002f055600a50473002f
0239ff1d0239ff190239ffc60239ffcc0639006504e300420639006504e3
004205c700a3031dffaa05c700a3031d005e05c7009c04e3005c05c7009c
04e3007d05c7009a04e3008705c700340473003b055600a50473002f0639
006504e300420639006504e300420639006504e300420639006504e30042
0556002304730015040000970239008405c700340473003b05c700a104e3
007b05c700a104e3007b05c700a104e3007b05c7005c0473004705c7009c
04e3003f05c7009c04e3003f05c7009c04e3003f05c7009c04e3003f05c7
009c04e3003f055600a50473002f055600a50473002f055600a50473002f
055600a50473002f055600a50473002f04e3009c02aa00150639005504e3
004205c7009a04e3008705c7009a04e3008705c7009a04e3008705c70082
04e3006605c7009a04e300870239ffa80239ffa00239ffd90239ffe905c7
00a10473008205c700a10473008205c700a10473008204e3009c0239008b
04e3009c0239ffbd04e3009c0239ffbd04e3009c0239ffae06aa0097071d
008006aa0097071d008006aa0097071d008005c7009704e3008705c70097
04e3008705c7009704e3008705c7009704e300870639006504e300420639
006504e300420639006504e300420639006504e30042055600a304e3007d
055600a304e3007d05c700a3031d008205c700a3031d008205c700a3031d
005105c700a3031d00010556005504730042055600550473004205560055
047300420556005504730042055600550473004204e3002102aa001504e3
002102aa001504e3002102aaffe304e3002102aa001505c7009c04e3007d
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d0556002f0473001a0556002f0473001a078d001e0639000e078d001e
0639000e078d001e0639000e078d001e0639000e078d001e0639000e0556
00210473001a055600210473001a055600230473001504e3003404000021
04e300340400002104e300340400002104e3008702aafffc0639000e0473
001502aa001505c700340473003b05c700340473003b05d3003404ec003b
05d7ffe804a8ff8505c70034048d003b05c700340473003b05c700340473
003b05c700340473003b05c700340473003b05c700340473003b05c70034
0473003b05c700340473003b055600a50473002f055600a50473002f0556
00a50473002f057500a5047d002f0556002b04a2ffb4055600a50473002f
055600a50473002f055600a50473002f0239008402390089023900840239
00890639006504e300420639006504e300420639006504e3004206390065
04e3ffc00639006504e300420639006504e300420639006504e300420792
0065065c004207920065065c004207920065065c004207920065065c0042
07920065065c004205c7009c04e3007d05c7009c04e3007d0758009c0671
007d0758009c0671007d0758009c0671007d0758009c0671007d0758009c
0671007d0556002304730015055600230473001505560023047300150556
002304730015055600a50473002f055600a50473002f056d008605df008e
048600370486008708d9002006dd000c056d002904860027056d00290486
0027056d00860486003708d9002006dd000c054f003d040a002b05df008e
0486008705df008e048600870655005a0486005005df005b04120050056d
00170412001e056d00170412001e056d00170412001e05ac0059047a004c
074800a80600008d08000012071d003806aa0097071d008005c700a3031d
00600222ffbc05c7003705c700a204e300a205c7001b055600a204e3003d
05c700a206390068025e009305c700a20558002d071a00ae063900ba04e3
00520639006805c700a2055600a204e3002f04e500290556002705c70042
0556002d06ac007b06390044025e00040556002704e5004804d500770473
002504e3006204730077038d005204e1009a04e100810239008d0473008d
0473003104e1009a047300310400005604e5006004e3009a0473004e04e5
00600400004604e1009a05c700580473001405c7006d05c7003b0239ffe9
04e1009a023900710222ffb20000fd4802c601a401c7006a01c7006a0000
fc910000fc9001c7006a03290014032900140340006a036a006a02220006
0222008c0376006a01c7ff9e036e006a01c7ff9e08000073062500310639
fffe0239008902390084055400e1078d007b078d00e10473002f0473002f
05c700340473003b0473003b055600a50473002f055600a50473002f0556
00a50473002f0239ffbb0239ffb7023900890639006504e3004206390065
04e300420639006504e30042055600550473004205c7009c04e3007d0473
001a0758009c0671007d0602003f04e3ffff05c7000d04e30087071d0080
043f009c0460007f0400006004d9006e0356fff8048b00350602005d0473
00350655004b048600370639006502aaffef07ac001b07ac001b09b60087
0000f9290000f9d30000f9d30000f9650000f9dd0602005d047300350655
004b048600370222008c032900140464003104e300340400002104e30042
05300087052b003f04e3007704e3003f04e3004204e30087054500870271
008b078d003f03c60081031d008104e3003c04e3fffe04e3fffe0800003f
064c001504db001506b00015057f008b0555008b01a4006f01a4006f0239
008402aa010d02aafff602aa00af02aa000702aa010d02aafff602aa00af
02aa000701a4006f01a4006f02aaffef02aafff60272004402720044011d
0005018f0041018f004101e30041031d0007023a000b0272003e0272003e
0256000c0256000c025600130256001302aa002f02560025025600250256
0025023900210239000d011c00450256002b023900120256001302560013
0256000c0256000c02aa007b0272003e0000fc870000fc690000fc690000
fd260000fd260000fc2c0000fc2c0000fb4f0000fc690000fc2c0000fc87
0000fc810000fc810000000002390000000000000000000000000000031d
002f031d002f08dc00af07ac001b02aa00e809c6007b07ac001b071d0104
0702000602aa008002aa0080000000000000000000000000000000000000
00000000000006c5001b023a0020023a001b0239001b02390020023a001a
0239001b0239001e0256002501550018025600250155002e0155000a0272
0044023a0020023a0047023a00200239001b023a001b0239001b02390020
023a001a0239001b0239001e0256002501550018025600250155002e0155
000a06f900340639005504e3009c04e3009c0556002307d6fff70600002a
078e001104e300820800004e06ac002f05c7005c05c7006f04e5fffa0696
000707d6002507d600310556009b04e300730556009b04e3007304e30013
06390065052b009a02ad002f036dfff605c7004203060017030bffd804e3
007b04e3007b023900090239000904e3004204e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e500480629006a063b006a086e
009b081d006e078d006a07f0006a078e0070078e00480473007704730077
04730077047300770473007704730077071d006a071d00b208cc009008c4
009a0896009108c0009504e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a078e006a078e006a093d006a0935006a0907
006a0931006a078eff9e078eff9e0239008d0239008d0239ffbd0239ffc1
0239ffd10239ffc10239ffd30239ffd30425006a0425006a05d4006a05cc
006a059e006a05c8006a0425ff9e0425ff9e04e5006004e5006004e50060
04e5006004e5006004e500600800006a0800006a09af006a09a7006a0979
006a09a3006a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a071d006a08c4006a08c0006a0792ff9e05c7003b05c7
003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b07ec006a
07ec006a099b006a0993006a0965006a098f006a07ecff9e07ecff9e04e5
004804e50048047300770473007704e1009a04e1009a0239005102390056
04e5006004e5006004e1009a04e1009a05c7003b05c7003b04e5004804e5
004804e5004804e5004804e5004804e5004804e5004804e500480899006a
0878006a0a73006a0a7c006a0a15006a0a77006a09c7006609c7006604e1
009204e1009204e1009204e1009204e1009204e1009204e1009204e10092
09c7006a09c7006a0b76006a0b6e006a0b40006a0b6a006a09c7ff9e09c7
ff9e05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b
05c7003b0a25006a0a25006a0bd4006a0bcc006a0b9e006a0bc8006a0a25
ff9e0a25ff9e04e5004804e5004804e5004804e5004804e5004804e50048
04e5004805c7003705c7003706cd000606cd008c07d8003704e1009204e1
009204e1009204e1009a04e10092076300060784008c07e2000607ca008c
080700a20239ffbf0239ffaa0239ffb60239ffb60239ffcf0239ffc9025e
ffd2025effc2043b002d0453008c04e1009a04e1009a04e1009a04e1009a
04e3009a04e3009a04e1009a04e1009a055600270556002707a500580797
008c071d006a05c7003b05c7003b05c7003b05c7003b05c7003b07f60045
082b0059086500060899008c0852003104e500480473007704e1009a0239
008d04e5006004e1009a05c7003b06cd008c0784008c07ca008c0453008c
07d4005e0775006c0842006c0239ffb604e1009a067d003d04f700db04f7
007b03220013031e002b0464003104e5004804e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e5004804e5
004804e5004804e5004804e5004804e500480239ffb60239ffb60239ffb5
0239ffb60239ffb60239ffb60239ffb60239ffb60239ffb60239ffbe0239
ffbe0239ffb50239ffbe0239ffbc0239ffbe0239ffbe0239ffbe0239ffbe
04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a06cd000606cd008c0629006a086e006a078d
006a063b006a085c006a07f0006a06cd000606cd008c0629006a086e006a
078d006a063b006a085c006a07f0006a047000060453008c0453008c0425
006a05d4006a059e006a0425006a05cc006a05c8006a047000060453008c
0453008c0425006a05d4006a059e006a0425006a05cc006a05c8006a07a5
00060797008c0797008c071d006a08c4006a08c0006a071d006a08c4006a
08c0006a07a500060797008c0797008c071d006a08c4006a08c0006a071d
006a08c4006a08c0006a05c700a305c7005c063900650239003b05aa008f
055600a305c7004a0000fcfb04b5004a04e3003f0639005a04e5004607b0
004107b4004205e5001a06ac004506ac004506ac004306ac0043063900b4
05560029082200a205e1005b06ac007b05c7006d05c700340473001a080a
00a20642005b0547001503d0001f0636003005ba002905c700a30473003b
02aaffcc04ac009a0425009a063d009a0524008705c700a10473008204e3
00340400002108d9ffef06ddfff7054f0062040a0033056d00a00412006a
05df00a20486007c05df005f0412002c04f8002204120028056dfff80412
ffe105ac00a0047a006205ac00a0047a0062055600230556002304d900ac
037c007505ac00a004d7006206e300a00552006a077600a205d9007c0556
0023055600230731001305d100230767002505f800250767002505f80025
075b00360543001b05df00a20486007c0473003b054f00a6054f00a606ac
007b04f0005b088a003e06a6003305c7003904e1001d05eb002f04e3001a
04730047054f0062040a003305f10022049c001402390089056dfff80412
ffe10556002f05c7003405c7005c0473004704e3fff104e3002102390059
031e002b04e30021055600a304e3007b04e3007b055600a50473002f0473
002d0239fff305c7009c01a9001a01a9001a02aa000c02aa000c02aa0007
02aaffe102aa00e802aa002402aa0024067d0057067d003d067d00ad02aa
00e8067d003d067d005c067d011002aa00e802aa00e8063900680412002c
0412002c055600a504e3008005c7005c06aa0097063000970548001605c7
005c05c7005c05c7005c04730047047300470473004704e3003f061b003a
06a80039062e003b0384002b062200240549003b04e5004f02aa00bf02aa
00bf02aa00bf02aa00bf025d003d025e003d03cc000903cc000903c30000
03c3000003c3000004c2001303fe0027043c005c04440078044400780307
0055034f0012070f003e0662004405fe00350000f7dc0698004a05450049
01ec004e01f4004e01b3002a01b2000c01d3002b01d3001a033c001f0343
001f03420013033f0013033f001302ff004e0224000a0224000b07ec003d
0982004e0933004b093300020149004e0485002505d2000705d1000d04d1
0014047a00200224000a0224000b044b0041044b004104290041038c0008
049e00440000fb230000fc720000fb870000fc180000fc180000fa110000
fcaf0000fe390000fc470000fc100000f9d30000fc5e04cc003c04cc0038
0468003c046800380821001b04a60021044400220533003b069a0037057f
003a071d006a08c4006a08c0006a05c7003705c70037025effd3025effd2
0556002705560027045f001605e5001a05e5001a05e5001a0800ffeb0800
ffeb080003b40800038c080003b40800038c0800ffe90800ffe9080003b4
0800038c0800ffe90800ffe908000000045f0016011d0045023a001e023a
001802720021023a000d023a001805c7005c0639005505c7005c045e0023
063c002f04e3002105c7003405320053062500320508003205c70058071d
008006420033067800390832003604b5004a04b5004a0347004203430047
0346004103430047034600570344004f034600570344004f03a100570394
0057039400570394005703a1005703a0000d039400000394000003940000
03a0000d03e9005703dd005703dd005703dd005703ea00570397000303fc
003803fc00290412001505a8003106de002e039b00730000fbf40000fbf4
0000fbe00000fbe00000fbe00000fbe00000fb9e0000fb9e0000fcf104cc
0038046800380aac0065095600420444007804440078044400780329002a
0329002a035d002a050d0028037800570378002d032900210329002102de
003202de00320378002f019400610329005c050d005b037800600378002f
032900320378002f0378002f0378005901e4000f037800590383003a050d
005b03290012036e00540329001a0378004604f40052066f003604f50052
04e3004204e300410501003b04fe003d0530003b078e00420329000e0194
00610236005c0378005903290012036e00540329001a0378006d0329000e
040a00460604001202390089043c005c0898002907240037052c00210558
001d0320000e052b002303730017031c000f031f00100239009204000092
0239008504000097023900920400009202390085040000970519001b0702
00090310007e05d500a208c00022047300400351002e0493006004730036
04730036047300360473004004730034046000360473003d03cc000903cc
000903cc0009046d001603a2003a044d003804b2003a0797003a0454003a
0459003a05a0003a079e003a04d2003a042c003a090a003a0459003a047e
006b06e2003a044f003a0490003f0672003a043c006b0616003a06dc003a
0630003a0467003a0678003a043d003a0485003a042d006b0497003a046e
003a0442003a04aa003a043f006b0657003a03c0003a0568003a04c3003a
0469003a0409003a0463003a06fc003a041c00bc00000000000000680000
00680000006800000068000000dc00000120000003300000047000000610
0000086c000008b800000960000009e000000af400000b6400000bd40000
0c1000000c5400000ccc00000da000000e0800000f0000001008000010d4
000011a0000012a00000132000001414000014fc00001558000015f00000
1680000016d8000017700000184000001a1c00001b3800001c1c00001d00
00001dac00001e1000001e7400001f7800001fe000002030000020ac0000
2194000021e0000022ec0000237c00002428000024b400002608000026e8
000028280000288800002910000029b400002b7400002cb800002d980000
2e4000002ea400002f1000002f780000302400003058000030ac000031f4
000032a400003380000034340000355c000036280000371c000037b00000
3818000038a0000039cc00003a0c00003b5c00003bfc00003ca800003d64
00003e1c00003eb000003fbc00004050000040f8000041c00000423c0000
437c000044ac00004574000046500000469400004774000048240000483c
000048540000497c00004994000049ac000049c4000049dc000049f40000
4a0c00004a2400004a3c00004a5400004a6c00004ba800004bc000004bd8
00004bf000004c0800004c2000004c3800004c5000004c6800004c800000
4c9800004cb000004cc800004ce000004cf800004d1000004d2800004d40
00004d5800004dd000004e4000004fd000005154000052cc000053580000
53d4000054e00000573c0000590800005a0800005a6000005ac400005ba4
00005c8400005dfc00005f0000005f8000006020000060c4000061f80000
6308000063f4000064ac00006514000065940000664c0000678c00006824
000068e800006a7c00006be000006cb000006d2400006d6c00006e4c0000
6f5000007098000071640000726c00007370000073e0000073e0000073f8
00007410000074280000752800007678000076b0000076ec000077940000
7844000078a8000079040000798000007aa000007ab800007ad000007b10
00007c7c00007d1c00007dc000007e9800007f5c00007ffc000080500000
80c40000817c000083080000832000008338000083500000836800008380
00008398000083b0000083c8000083e0000083f800008410000084b80000
84d0000084e8000085000000851800008564000085f0000086d00000870c
000087a8000087f80000888c00008964000089cc00008a6800008b400000
8c1800008ce400008cfc00008d1400008d2c00008d4400008db800008e98
00008ffc000090140000902c00009120000091c0000091fc000092a80000
9300000093980000946c0000958c0000968400009808000098b4000098cc
000098e4000098fc00009a9000009bc000009bd800009bf000009c080000
9c2000009ce800009d0000009d1800009d3000009d4800009d6000009d78
00009d9000009da800009dc000009dd800009df000009f4000009f580000
9f7000009f8800009fa000009fb800009fd000009fe80000a0000000a018
0000a0300000a0480000a0600000a0780000a0900000a0a80000a0c00000
a0d80000a0f00000a1080000a1ec0000a2040000a21c0000a2340000a24c
0000a2640000a27c0000a2940000a2ac0000a2c40000a2dc0000a2f40000
a30c0000a3240000a33c0000a3540000a36c0000a3840000a4200000a4ac
0000a4c40000a4dc0000a4f40000a50c0000a5240000a53c0000a5540000
a56c0000a5840000a59c0000a5b40000a5cc0000a5e40000a5fc0000a614
0000a62c0000a6440000a65c0000a6740000a68c0000a6a40000a6bc0000
a6d40000a6ec0000a7040000a71c0000a7340000a74c0000a8500000a868
0000a8800000a8980000a8b00000a8c80000a8e00000a8f80000a9100000
a9280000a9400000a9580000a9700000a9880000a9a00000a9b80000aa6c
0000aa840000aa9c0000aab40000aacc0000aae40000aafc0000acac0000
ae4c0000aee80000afe40000b0680000b0940000b0c40000b0fc0000b190
0000b1bc0000b2180000b24c0000b2b00000b3c00000b40c0000b4500000
b4a80000b5880000b6540000b6800000b7600000b7780000b7940000b7ac
0000b7c40000b7dc0000b7f40000b80c0000b8240000b83c0000b8540000
b8e40000b9740000b9a00000b9fc0000ba740000baf00000bb980000bc34
0000bd080000be640000bed00000befc0000bf580000bf700000bf880000
c0300000c0fc0000c1440000c1a80000c2a40000c3dc0000c4180000c4e0
0000c5400000c5d80000c7940000c8300000c9040000c9700000ca180000
cad80000cb640000ccb40000cd200000ce080000cef80000cf440000cfb8
0000d1380000d1a80000d2240000d2c80000d3800000d41c0000d5140000
d61c0000d7080000d7e00000d9080000da7c0000dbfc0000ddac0000dedc
0000df180000dfdc0000e0cc0000e1640000e2d00000e36c0000e4580000
e4c40000e5400000e5fc0000e6880000e7cc0000e8380000e98c0000ea80
0000eacc0000eb440000ed840000edec0000ee6c0000ef080000eff80000
f0a00000f1900000f2940000f3840000f45c0000f5800000f6d80000f788
0000f8b80000f9180000f9780000f9b40000fa080000fa940000fb680000
fc200000fcd40000fd980000fee000010024000101540001027c00010308
0001047000010518000105fc00010670000106e40001082c000109640001
0abc00010b7c00010c4000010cb800010d3000010da000010e0c00010e64
00010ebc00010f1400010f6c00010fb800010fec00011054000110cc0001
10f8000111240001115000011184000111e8000112f80001132c00011370
000113a80001140400011460000114f4000115200001154c000115e00001
160c00011638000116780001175800011798000117f00001184c000118f0
0001195800011958000119f000011a9800011b9c00011c3800011d4c0001
1dd800011e7400011f2000011fcc000120000001208400012134000121bc
000122040001227c000122f00001237800012400000124ec0001256c0001
2670000127740001284c0001296400012aac00012b1800012c7c00012d24
00012d7400012e3400012efc0001305000013084000130ec000131580001
320c000132d8000133080001333800013368000135000001356800013598
0001364c000136a4000136d00001375000013798000137dc0001383c0001
3898000138c4000138f80001392400013950000139880001398800013988
000139880001398800013988000139880001398800013988000139880001
398800013988000139880001398800013988000139880001398800013988
000139880001398800013988000139880001398800013988000139880001
39c400013a2c00013b1400013b4000013b6c00013bc000013c1c00013c34
00013c8c00013d2800013e9000014004000140b80001415c000142000001
42b400014414000144a8000144f800014608000146c0000147940001489c
0001493400014a4400014ad000014b6400014ba800014c0800014c480001
4c7400014cdc00014d2400014d6c00014db800014e0400014e7800014ea8
00014ef000014f2000014f4c00014f6400014f7400014f8c00014f9c0001
4fb400014fc800014fe000014ff40001500c0001501c0001503400015044
0001505c000150740001508400015094000150ac000150cc000150e40001
50f40001510c0001512c000151540001516c0001517c00015194000151b4
000151c4000151d4000151e4000151f4000152040001521c0001523c0001
5254000152640001527c0001529c000152c4000152dc000152ec00015304
000153240001533400015344000153540001536400015384000153a40001
53c4000153dc000153f40001540c000154240001543c000154540001546c
000154840001549c000154b4000154cc000154e4000154fc000155140001
5534000155540001557400015594000155b4000155d4000155f400015614
00015634000156540001567400015694000156ac000156c4000156dc0001
56f40001570c000157240001573c000157540001577400015794000157ac
000157c4000157dc000157f40001580c000158240001583c0001585c0001
587c00015894000158ac000158c4000158dc000158f40001590c00015924
0001593c000159540001596c000159840001599c000159b4000159cc0001
59e4000159fc00015a1400015a2c00015a4400015a5c00015a7400015a8c
00015aa400015abc00015ad400015aec00015b0400015b1c00015b340001
5b4c00015b6400015b7c00015b9400015bac00015bcc00015bec00015c0c
00015c2c00015c4400015c5c00015c7c00015c9c00015cb400015ccc0001
5cdc00015cec00015d0400015d1c00015d3400015d4c00015d6400015d7c
00015d9400015dac00015dc400015ddc00015df400015e0c00015e240001
5e3c00015e5400015e6c00015e8400015e9c00015eb400015ecc00015eec
00015f0c00015f2c00015f4c00015f6400015f7c00015f9400015fac0001
5fcc00015fec000160040001601c000160340001604c000160640001607c
00016094000160ac000160c4000160dc000160f40001610c000161240001
613c000161540001616c0001618c000161ac000161c4000161dc000161f4
0001620c000162240001623c000162540001626c0001628c000162ac0001
62c4000162dc000162f40001630c000163240001633c000163540001636c
000163840001639c000163b4000163cc000163e4000163fc000164140001
642c000164440001645c0001647c0001649c000164bc000164dc000164fc
0001651c0001653c0001655c000165740001658c000165a4000165bc0001
65d4000165ec000166040001661c0001663c0001665c000166740001668c
000166a4000166bc000166d4000166ec0001670c0001672c0001674c0001
676c0001678c000167ac000167c4000167dc000167f40001680c00016824
0001683c000168540001686c000168840001689c000168b4000168cc0001
68e4000168fc0001691c0001693c0001695c0001697c00016994000169ac
000169c4000169dc000169f400016a0c00016a2400016a3c00016a540001
6a6c00016a8400016a9c00016ab400016acc00016ae400016afc00016b14
00016b2c00016b4400016b5c00016b7400016b8c00016ba400016bbc0001
6bd400016bec00016c0400016c1c00016c3400016c4c00016c6800016c80
00016c9800016cb000016cc800016ce800016d0800016d2800016d480001
6d6800016d8800016da800016dc800016de800016e0800016e2800016e48
00016e6800016e8800016ea800016ec800016ee800016f0800016f280001
6f4800016f6000016f7800016f9000016fa800016fc000016fd800016ff8
0001701800017038000170580001707800017098000170b8000170d80001
70f8000171180001713000017148000171600001717800017190000171a8
000171c0000171d8000171f8000172180001723800017258000172780001
7298000172b8000172d8000172f800017318000173300001734800017360
0001737800017390000173a8000173c0000173d8000173f0000174080001
74200001743800017450000174680001748000017498000174b0000174c8
000174e0000174f800017510000175280001754000017558000175700001
7588000175a0000175b8000175d0000175e8000176000001761800017638
000176580001767800017698000176b0000176c8000176e0000176f80001
77100001772800017740000177580001777000017788000177a0000177b8
000177d0000177e800017800000178180001783000017848000178600001
787800017890000178a8000178c0000178d8000178f00001790800017920
0001793800017950000179680001798000017998000179b0000179c80001
79d8000179e800017a0000017a1800017a3000017a4800017af000017b54
00017cc800017d0400017d4400017da800017df000017e7400017fd00001
800c00018078000180c40001817c000182040001825c000183a000018408
000184f0000185400001858c000185f000018768000187d4000189100001
8a8400018b0400018ba000018cdc00018e7800018ed80001904c0001911c
00019214000192b00001947c000194b8000195300001957c000196340001
967c000197c000019904000199dc00019ad400019c4400019c9000019d30
00019e7000019edc00019f900001a11c0001a1b00001a2880001a2d40001
a3300001a3600001a3e80001a4400001a4980001a4c40001a4f40001a54c
0001a5e80001a6880001a70c0001a7880001a7b40001a7e00001a8600001
a9000001a9780001aa200001aaf40001ac4c0001adcc0001ae240001ae7c
0001ae940001aeac0001aec40001aee40001af040001af240001af440001
af640001af7c0001af940001afb40001afd40001aff40001b0140001b034
0001b0540001b06c0001b0840001b09c0001b0bc0001b0dc0001b0fc0001
b11c0001b1340001b14c0001b16c0001b18c0001b1a40001b1bc0001b1d4
0001b2940001b3640001b41c0001b4bc0001b5fc0001b6380001b7200001
b8340001b8ac0001b9240001ba6c0001bb400001bc200001bcd80001bd8c
0001be240001be5c0001bebc0001bf1c0001c1880001c20c0001c26c0001
c2cc0001c2f80001c3240001c33c0001c3540001c36c0001c3840001c3b0
0001c44c0001c4b40001c52c0001c59c0001c62c0001c7000001c8580001
c9b40001cb080001cc8c0001cd5c0001ce700001ced00001d05c0001d140
0001d2180001d3580001d43c0001d5680001d6c00001d8d80001d9cc0001
db400001dca00001dd040001ddc00001de640001debc0001def00001df1c
0001df4c0001df780001dfac0001dfd40001e0000001e02c0001e0e80001
e18c0001e1d00001e2100001e2ac0001e3800001e3f40001e4800001e518
0001e5f00001e6640001e6d00001e7740001e8180001e8580001e8980001
e8dc0001e9200001e94c0001e9b40001ea1c0001ea880001eb400001eba0
0001ebd00001ec1c0001ec780001ecbc0001ed000001ed400001ed800001
ee900001ef340001ef800001efc00001f0000001f0540001f0a80001f108
0001f1680001f1d80001f2180001f27c0001f2c80001f3980001f3d80001
f3d80001f3d80001f3d80001f3d80001f3d80001f4680001f5740001f5ec
0001f64c0001f6dc0001f6f40001f7940001f8d40001f9680001f9e00001
fa580001fa580001fa580001fa580001fa580001fa580001fa580001fc04
0001fd180001fdd00001fe940002001c0002006c00020204000203780002
03e00002041c0002045c0002050c000205b8000206780002078c000207d8
00020894000209c400020a7c00020b4000020cc800020d1800020eb00002
102000021088000210c400021104000211b00002125c000212c8000213c4
000214000002143c0002149c0002151c0002168400021764000217dc0002
18d00002194000021a1800021bf800021c3800021cb400021ccc00021cdc
00021dd000021f1400021ffc00022130000221c400022304000223800002
240000022490000225f0000226840002272c00022888000229e400022a40
00022aa400022bec00022c0400022c1c00022c3400022c4c00022c640002
2c7c00022c9400022cac00022cc400022cdc00022cf400022d0c00022d24
00022d3c00022d5800022d7400022d8c00022da400022dbc00022dd40002
2dec00022e0400022e1c00022e3400022e4c00022e6400022e7c00022e94
00022eac00022ec400022edc00022ef400022f0c00022f2400022f3c0002
2f5400022f6c00022f8400022f9c00022fb400022fcc00022fe400022ffc
000230140002302c000230440002305c000230740002308c000230a40002
30bc000230d4000230ec000231040002311c000231340002314c00023164
0002317c00023194000231ac000231c4000231dc000231f40002320c0002
32240002323c000232540002326c000232840002329c000232b4000232cc
000232e4000232fc000233140002332c000233440002335c000233740002
338c000233a4000233bc000233d4000233ec000234040002341c00023434
0002344c000234640002347c00023494000234ac000234c4000234dc0002
34f40002350c000235240002353c000235540002356c000235840002359c
000235b4000235cc000235e4000235fc000236140002362c000236440002
365c000236740002368c000236a4000236c4000236e40002370400023724
000237440002376400023784000237a4000237c4000237e4000238040002
3824000238440002386400023888000238ac000238cc000238ec0002390c
0002392c0002394c0002396c0002398c000239ac000239cc000239ec0002
3a0c00023a2c00023a4c00023a6c00023a8c00023aac00023acc00023aec
00023b0c00023b2c00023b4c00023b6c00023b8c00023bac00023bcc0002
3bec00023c0c00023c2c00023c4c00023c6c00023c8c00023cac00023cc4
00023cdc00023cfc00023d1400023d3400023d4c00023d6c00023d840002
3d9c00023db400023dcc00023de400023e0400023e1c00023e3c00023e54
00023e7400023e8c00023ea400023ebc00023ed400023eec00023f040002
3f1c00023f3400023f4c00023f6400023f7c00023f9400023fac00023fc4
00023fdc00023ff40002400c000240240002403c000240540002406c0002
40840002409c000240b4000240cc000240e4000240fc0002411400024134
0002414c0002416c00024184000241a4000241bc000241d4000241ec0002
42040002421c000242340002424c000242640002427c00024294000242ac
000242c4000242dc000242f40002430c000243240002433c000243540002
436c000243840002439c00024478000244c4000245180002459000024600
0002461800024638000246580002467800024698000246b8000246d80002
46f80002471800024738000247580002477800024798000247b8000247d8
000247f80002481800024838000248580002487800024898000248b80002
48d8000248f80002491800024938000249580002497800024998000249b8
000249d8000249f800024a1800024a3800024a5800024a7800024a980002
4ab800024ad800024af800024b1800024b3800024b5800024b7800024b98
00024bb800024bd800024bf800024c1800024c3800024c5800024c780002
4c9800024cb000024cc800024ce000024cf800024d1000024d2800024d40
00024d5800024d7000024d8800024da000024db800024dd000024de80002
4e0000024e1800024e3000024e4800024e6800024e8000024e9800024eb0
00024ec800024ee000024ef800024f1000024f2800024f4800024f600002
4f7800024f9000024fa800024fc000024fd800024ff00002500800025028
00025040000250580002507000025088000250a0000250b8000250d00002
50e800025108000251200002513800025150000251680002518000025198
000253180002540000025588000255ec000256a4000257bc0002587c0002
58bc0002595c0002597400025a6000025af800025d0c00025f2c000260fc
00026358000266380002683c000269b000026ad800026bfc00026ce40002
6df800026f34000270000002707c00027118000271f400027304000273b8
00027464000275340002764c000277a800027900000279cc00027a1c0002
7a6c00027afc00027bb400027c5000027d0400027d7400027dd400027f0c
0002804000028278000284fc000285e4000286b80002874c000287e00002
893000028a7400028adc00028b4400028c0c00028cd800028d7800028e28
00028eb800028f5400028fb4000290140002906c000290c4000291800002
922800029300000293c400029460000294e8000295800002962800029704
000297bc000298d4000299d800029b8c00029d2c00029dc400029e740002
9f1c00029fc40002a1b40002a3480002a4dc0002a6600002a7cc0002a934
0002aa980002ab080002ab780002ac080002ac940002ad780002aed80002
b0480002b0f00002b1980002b1cc0002b2a80002b3780002b3c00002b434
0002b5880002b6c40002b7440002b7c80002b8240002b8940002b9080002
b9e40002badc0002bbd40002bcac0002bdc40002be800002bf400002bff8
0002c0280002c0880002c0d40002c1200002c14c0002c1e00002c2400002
c2a80002c2ec0002c3b00002c4580002c4dc0002c53c0002c5e40002c6c8
0002c7500002c7d80002c8840002c9240002c9f40002cab80002cbac0002
cccc0002cd9c0002ce640002cf200002d0d40002d1ac0002d2a80002d3a8
0002d48c0002d5940002d6a00002d7f80002d9ac0002da980002dbf00002
dcb80002dd800002de540002df0c0002df480002df840002dfc00002dff8
0002e0440002e0800002e0c40002e10c0002e1640002e1bc0002e2140002
e2580002e2b80002e3400002e46c0002e59c0002e69c0002e71c0002e800
0002e9880002eaa00002eae40002ec240002ed640002eda00002ee640002
ee9c0002eed80002ef900002f04c0002f0940002f1680002f2840002f31c
0002f3b40002f4240002f4500002f47c0002f5280002f5500002f5940002
f5d80002f6940002f6dc0002f7580002f7d40002f8340002f8880002f8b4
0002f8e00002fa380002fb880002fc600002fd300002fe380002fed00002
ff380002ffc40003014000030250000302b40003030000030334000303c4
00030554000305b400030600000306ec000307e0000308cc000309c00003
0bc400030ce400030e0400030f4800031068000312000003121800031230
00031248000312b40003134c00031398000314140003147c000315140003
15f0000317f800031a1400031ba400031bd000031bfc00031c3000031c64
00031ca000031cdc00031d1800031d5400031d9000031dcc00031e080003
1e4400031e7000031f4c00031f9c0003210400032198000322ac0003230c
000323a0000324f40003266c000327b00003290000032a2c00032ac80003
2bcc00032d3400032fd40003321800033358000334980003354400033718
00033890000338e80003394400033a0c00033af400033bbc00033ca40003
3d6800033e4c00033f1000033ff40003403c00034088000340d400034120
00034168000341b80003420c00034260000342b400034304000343400003
438c000343d80003442800034468000344c0000345040003454c00034590
000346c400034874000348c80003492800034988000349c4000349fc0003
4a3800034a7000034abc00034b0800034b9000034c8400034d7800034d90
00034da800034e9000034fc0000350f000035250000353b0000354c40003
5668000357780003589000035924000359bc00035adc00035bbc00035d04
00035d5400035dcc00035ed800035fa4000360b800036194000362bc0003
63640003649400036534000365d4000366a0000367a4000367e800036980
000369e000036b6000036c3800036d6400036eac00036fd4000370ec0003
720c000372f800037498000376280003768c000376dc0003776c0003780c
00037850000379e800037a4800037bc400037c2800037d4400037de00003
7e3800037eb8000380340003815000038304000384700003857400038718
0003882c000388cc000389c400038a3400038b0000038b5800038c0c0003
8c7400038d3000038d8800038e4000038f8800038ff000039148000392b0
00039320000394440003949c00039540000396b40003974c000398440003
99c800039a2000039c0c00039d8800039dcc00039e0c00039e5000039f28
0003a08c0003a2400003a3b00003a5e00003a6940003a8800003aac00003
acb40003adc40003aef00003b0f80003b2400003b3a40003b58c0003b714
0003b8500003ba0c0003bb040003bdf80003bfbc0003c2180003c2e80003
c47c0003c54c0003c6d40003c85c0003ca500003cb780003cda40003cfa8
0003d0d80003d2bc0003d4e80003d73c0003d8c80003d9e40003dba80003
dd4c0003df900003e01c000100000892007a0009006c0008000200100010
0066000007e80b970004000100000033026a000100000000000000500000
000100000000000100090050000100000000000200040059000100000000
00030023005d0001000000000004000e008000010000000000050007008e
0001000000000006000e00950001000000000007003200a3000100000000
0012000e00d50001000000000100000900e30001000000000101001000ec
0001000000000102000e00fc00010000000001030014010a000100000000
01040012011e0001000000000105000901300001000000010004000e0139
0001000000010007002f01470001000000020004000e0176000100000002
0007003c01840001000000030004001301c00001000000030007003001d3
0001000000040004000d02030001000000040007003a0210000100000005
0004000d024a00010000000500070036025700010000000600040011028d
00010000000600070030029e0001000000070007003c02ce000100000008
00040013030a00010000000900040011031d00010000000d00040010032e
00010004000c0004000e033e00010004001f00040010034c00010005000a
0004000d035c00030001040400020004036900030001040600020006036d
00030001040700020008037300030001040900020008037b00030001040b
00020016038300030001040c0002000803990003000104100002001203a1
0003000104110002000803b30003000104120002000603bb000300010413
0002000603c10003000104140002000603c70003000104160002000e03cd
0003000104190002000c03db00030001041d0002000603e7000300010804
0002000403ed000300010c010002000803f1000300010c0a0002000e03f9
a920313939302d32303036204170706c6520436f6d707574657220496e63
2e20a92031393831204c696e6f7479706520414720a920313939302d3931
205479706520536f6c7574696f6e7320496e632e48656c76657469636142
6f6c6448656c76657469636120426f6c643b20382e30643365313b203230
31322d30332d323748656c76657469636120426f6c64382e306433653148
656c7665746963612d426f6c6448656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c76657469636120426f6c644c6967617475726573436f6d6d
6f6e204c69676174757265734e756d6265722053706163696e6750726f70
6f7274696f6e616c204e756d626572734d6f6e6f737061636564204e756d
626572734e6f204368616e676548656c766574696361204772617348656c
7665746963612065737420756e65206d617271756520648e706f738e6520
6465204c696e6f7479706520414748656c76657469636120466574744865
6c766574696361206973742065696e2065696e676574726167656e657320
576172656e7a65696368656e20646572204c696e6f747970652041474865
6c7665746963612067726173736574746f48656c766574696361208f2075
6e206d61726368696f207265676973747261746f206469204c696e6f7479
706520414748656c7665746963612076657448656c766574696361206973
2065656e20676572656769737472656572642068616e64656c736d65726b
2076616e204c696e6f7479706520414748656c7665746963612046657448
656c766574696361208a7220657474207265676973747265726174207661
72756d8a726b6520669a72204c696e6f7479706520414748656c76657469
6361204e65677269746148656c76657469636120657320756e61206d6172
63612072656769737472616461206465204c696e6f747970652041474865
6c7665746963612065722065742072656769737472657265742076617265
6dbe726b652074696c68bf72656e6465204c696e6f747970652041474865
6c7665746963612043617272656761646f48656c7665746963612048616c
7666657448656c766574696361206c696861766148656c76657469636120
c3d3e8cf48656c76657469636120c8d1ccd3cae748656c76657469636120
f2e1e47c979ad400460065006400460065007400740042006f006c006400
500075006f006c0069006c00690068006100760061004700720061007300
470072006100730073006500740074006f30dc30fc30eb30c9bcfcb4dccc
b4005600650074004600650074004e00650067007200690074006f041604
380440043d044b04390046006500747c974f5306390631064a0636004e00
6500670072006900740061000000b8005c2bb800522bb800482bb8003e2b
b800342bb8002a2bb10840ba019000145df44009011f04000b1fd819eebe
012e000d00e6012e000d00b0012e400c0d000963833c1f63838348294109
014b00370401001f014500240401001f0144b224ab1fb8013eb224231fb8
013db224231fb80102b2371d1fb80100400937241ffd37621ffc37b80801
401b1ff824931ff724931ff6243f1ff524311fd1371d1fd037471fcd41b8
0801b21fcb2ab80201b21fca24b80401400f1fc824811fb537291fb4373b
1fb227b80401b21fb141b80401b61fa437811fa384b80401b21fa22ab804
01b21fa124b8019ab21fa024b8019ab61f9f243f1f9683b80401b21f9527
b80401b21f8227b80401b21f7084b80801b21f6fb3b80801b21f6eb3b802
abb61f6d24261f6224b80101400b1f5d246c1f5c24391f5441b80125b21f
4d27b80401b61f4c27cd1f4b41b80401b21f4024b8019ab21f3683b80401
b21f3524b80201b21f3224b8019ab61f2c24bb1f2884b80801b21f2241b8
040140131f20244c1f1d24261f2ca0961f2c245e1f412ab801a8b748282a
2448279636b801f4b21f4d27b801f4b21f9527b801f4b21f6e27b801f4b2
1f6327bd01a700470029015a00250199b348296fb3b80190b21f83b3b801
9ab348283725b803e840121fb327482784274827362748272527482755b8
0154402c0797076407550733072b072907260721071e071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b806008516763f183f123e113946443e113946443e113946
443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b18
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b4b5279b35279eb5645652345
6023456560234560b08b766818b080622020b1eb794565234520b0032660
62636820b003266165b079236544b0eb234420b152564565234520b00326
6062636820b003266165b056236544b0522344b10056455458b156406544
b25240524523614459b35045484e456523456023456560234560b0897668
18b080622020b148454565234520b003266062636820b003266165b04523
6544b048234420b1504e4565234520b003266062636820b003266165b04e
236544b0502344b1004e455458b14e406544b250405045236144592b2b45
6953420000>
[16317 16289 16381 16265 16305 16357 16361 16245 16381 16297 16185 16309 16221
16013 16325 9745 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica-Bold AddT42Char 
1 2232 11 <00010059fe63029105da0013005db8005c2bba00080012005f2b411b0006
000800160008002600080036000800460008005600080066000800760008
008600080096000800a6000800b6000800c60008000d5d410500d5000800
e5000800025d00b800022fb8000c2f303113363733070607061510131617
23272627021110ce4f98d73d7e3120593484d347454e8b044eb8d470e7fd
a6c4fecefeff98ee6158ae0137012d011200>Helvetica-Bold AddT42Char 
1 2400 12 <00010015fe63024d05da001300344018121109131517171a120d08130903
6e0dfa09191415d52142b901ac00182b2bf4f4fd11393912394e456544e6
4d003f3f3130001712111003060f0123363712113427262f013301894f75
8b4e4547d384345920317e3dd70506b8fef2feeefed3fec9ae5861ee9801
010132c4a6fde770>Helvetica-Bold AddT42Char 
1 2916 15 <00010076fea501aa012a000d003b401f00ee0a08040d710528040a0f1717
1a090a035a06700004190e0f70217f3c182b2b4ef43c4dfded39394e4565
44e64d003fedf4113939ed3130173e0137231121111406070e0123765651
06ad01342431358f1bed187065012afefe4494363a3b>Helvetica-Bold AddT42Char 
1 3088 17 <00010080000001af012a0003002640130128030a0517171a017000190405
70217f3c182b2b4ef44dfd4e456544e6003f4ded31301321112180012ffe
d1012afed6000000>Helvetica-Bold AddT42Char 
1 3276 19 <00020040ffdc042805b4000b00170075405917012707d70f03380d370f37
1338154b0d440f44134f159815b713ba15c613ca150d1700530676007606
040606a606c80f03084017050240110d05830e0b830ea710143014027014
80149014a014b014d014f01407141947184e1076c418d45d71e44ded10ed
003fed3fed31300072715d01720012333212351026232206110012111002
212002111012210163527f7f4f4f7f7f5201e6dfdffeebfeebdfdf011501
cdfef70109fa0106fcfcfefa02edfe7afe99fe99fe7c0184016701670186
0000>Helvetica-Bold AddT42Char 
1 4308 24 <00010036ffda042105970020005e40160e0f0fa1121212130d0ec2130940
17171d12a10f0420b80155401903401d0d113813120d0006831a0fc3006f
0e381aa720224721104e76c418d4e44de4fded10ed11393939e4003feded
3fed12392ffd39f4c401872e2b7d10c53130011e01333236353426232207
060725132115210336373633320415140021222427015211605c6a6f686e
34264322ff0066031ffdaf3442253e59b4010cfefefeffcffef60f01845d
6595716f990d18410c0321f2fec32b0e17f2e7c9fec4decc>Helvetica-Bold AddT42Char 
1 4768 26 <00010034000004380597000e003e402416021503f70503000ca10d04070c
0b00068307c60d7300a8100c300c02d00c010c10470f4e1076c418d45d71
e44df4f4ed1139003f3ffd393130015d0106020706021521121312372113
21043840e44d3d62fed80df39d6afd2d04040004b83ffebdac87fe7a7d01
8601a50105670100>Helvetica-Bold AddT42Char 
1 5616 31 <00010017ffde04b1045e0006006340340304030204221205050603020304
02221201010003000504020301040605000201bb060403bb050b011a0800
190708aa216747182b2b4ee410e619003f184dfd3939fd39391139390111
173c123904872e2b087d10c504872e182b087d10c5313013011109011101
17049afcb70349fb66029e01c0fee9fed7fed6feea01c000>Helvetica-Bold AddT42Char 
1 5760 32 <0002004900b10484038b00030007002c4018032202072206070204900001
001a090219080965216a46182b2b4ee410f65d4d3c103c002ffddefd3130
01112111011121110484fbc5043bfbc5038bfef90107fe2dfef90107>Helvetica-Bold AddT42Char 
1 7196 38 <0002005cffd7057b05ef001e001f00744029570a94079408035b02591b58
1d660477018905a914b204b70ac604c70bda02db14dd18df1bf8181017b8
010b40231a08081a0c411f030312411a091f16371708371f1e071a210f37
1e1920219921ad56182b2b4ef44ded4e10f64d1139edd4ed2f003fed3f3c
ed12392f10ed3130015d005d123736212017161721262726232202151416
33323736372106002120272611015ccfb401160174ac5f07fecc1e2f54a5
a8c2cd9ea2552f1f013128feb7fefffec2b6b602900457d1b6f4898a6a36
60fef1f8f8f76a3972f1fed2cccd0165031a>Helvetica-Bold AddT42Char 
1 8672 48 <000100970000062805c2001200c040900900070808090511160819092900
27082b0924112a12370735083c0938126a00651179007511890086119a00
9611a800a611c700f708f8091c05080a09160818090407121a071a0a1712
220023112f123d073f0a3f127a12b909b612c7120e0f070f0a020a0f1211
090800050e070203120a07030e1100020e0803081417171a020403270212
0f0d0e270f19135279182b4e10f44dfd3c1910dcdc18fd3c104e456544e6
003f3c3c3f3c121739011112391217391139313000715d01715d01211121
113436350121011416151121112101046d01bbfee102fee9fed5feeb02fe
e101c0010c05c2fa3e03e52b9b2afb2b04d52a9b2bfc1b05c2fb7900>Helvetica-Bold AddT42Char 
1 9736 53 <000200a30000057105c2000a002a0058402a20231b1815052713262a0101
1d002a2902271d081d2022130617220637171b57101a2c00272528192b2c
b8011eb3215256182b2b4ef44dfd3c4e10f64de4c4fdc411123911393900
3f3c3fed12392ffd39111739313001112132373635342726233616171e01
151406071e011d011417161715212627262f012e0123211121112101d001
5d68345c593264dba73a30386a7a6655080c2cfead0e060c0102026388fe
c2fed302d304c2fe74182a7c862e1afd464438885769cb2a29979b636524
391b25311e3e41898d5efdbe05c2>Helvetica-Bold AddT42Char 
1 9960 54 <00020055ffda050e05ef002e002f00a3406a080f07210726190b190f1721
1726660c650d6922e52d0b29102915281a26273a15381ab915ca15dc15d2
2ceb13eb16f913fa16f92d0f0e00110b22181f25170825220e0b04182ed4
2b18d41c412f140304412b092f18962f11174f0896281a311f3611570036
2e193031b8011eb321ad56182b2b4ef44dedf4ed4e10f64dedf41139ed2f
003fed3f3ceded10ed11173901111239111239391112393130015d005d01
16171633323736353427262f012627263534002132041721262726232206
151417161f011617161514002120003501017b0e294bb66d44814040899c
e6589501200117e9014908fed8086c486b778e462d93fea75584fecbfee6
fee0feb6025101c765325b182e7d4928271e23343d66d9c60106f7eb8538
2560564f271a233d284368c5cafef50107e60428>Helvetica-Bold AddT42Char 
1 10280 55 <00010021000004cb05c200070038400c01062a070204080917171a00b801
58b2022505b80158400906190809c0217572182b2b4ef44df4fdfd4e4565
44e64d003f3ffd3c3130011121112111211104cbfe47fecafe4505c2fefb
fb4304bd0105>Helvetica-Bold AddT42Char 
1 10512 57 <0001002f0000053b05c20006007740213204042512050605320101251200
0600060305040100020302080817171a020001b80111b2030506b80111b6
041907657572182b764e10f4184dfd3939fd3939194e456544e618003f3c
3f3c3c3c123905874d2e2b7d104b5158b002c01bb002c459872e182b7d10
4b5158b003c01bb003c45931300121012101210103fb0140fe09feddfe0e
0149014005c2fa3e05c2fba10000>Helvetica-Bold AddT42Char 
1 12460 68 <0003003bffde0438045f000e0039003a008f404f3b0235367901890104d8
1e0126f3e62ae7230e0d05020005131a2b24232204262e262e2a0d050200
041b0b221b162c3a1f072a0a0b2c320b3a134d004d2e3a352a3e261a3c1a
4d1b2d084d35193b3cbc01190021004801ae00182b2b4ef44dedf4ed4e10
f64de41139cde5e52f003fed3f3f3cfdcd39111217391239390111121739
111217392b3130015d005d010e010f010607061514163332363727363736
35342623220706072136373621321716151114171e011715212e01270607
0623222635343736371302de1b3730405a2742513a5c9b03ad4f223d5d5a
652a1e0afeed0947710113b38b8b02031c1cfeca0d0a033b4d5c7494c19b
55a57002121115090c1017275249416c8fef0a0f1a37433332253f8f5c90
4747c5fe0c344a38280d2a213a25402d35a99bc95a311501d4000000>Helvetica-Bold AddT42Char 
1 13364 72 <0003002fffdc043a045f00060021002200ab4049460887149701990a0406
0109050610051a4b05461049208601850f871f0a03160317131613174808
4c164c17491a5c165c175a1adc01db04e91de720f720104a014610880583
100402b8019540334f0e5f0e6f0e030e0e1b062422210717122c1b0b1603
02220336177b221e600c800c020c1a24021f0e951e1923249821484e182b
2b4ef44dfde44e10f65d4d1139e4ed2f111239003fedcd3f3ced12392f5d
fd313000715d01715d000607212e01233616171617160721161716333237
3637210607062322001110003b0101d06d0e01bb077b5b88da4740130b02
fd1606613b5358371e1701230b5a8cfcd0fec2011fe51403747c6a7175eb
666e61804b8da44229321b3061649f010c012e011b012e000000>Helvetica-Bold AddT42Char 
1 13864 74 <00030042fe42045e045f000d002f0030005a40108a1e0111120524302f07
1206250d2429b8013f40201c202c180f30021f121f2527302c131a321c84
1b2d09362c19313298214845182b2b4ef44dedf4ed4e10f64d1139fdf4e4
2f003ffdcd3fed393f3f3ced11393130015d243635342623220706151417
1633121716173521111407062122242721161716333237363d0106070623
2202353412333702bd8a836e96391e203a960b3d68400115477afea6d1fe
f80e01360c1b2e6d9a3422292f5588d2fbf2de5bea97a59ba28d4b6e5f4a
8a0372192b739dfbf6d36bb8a4a332162767429c464623410127fcf3014b
03000000>Helvetica-Bold AddT42Char 
1 14108 75 <000100870000045e05bd0017003f402505022702580e680e04141712000c
24170710070a0836051a1913102711191819be215045182b2b4ef44dfd3c
4e10f64ded003f3c3fed3f11393130015d0016171e011511211134272623
22061511211121113e01330343a5352d14fedd1e276d7175fee4011c3ea3
5a045e46483d8192fd80029758364c978cfdb205bdfdf75f4b000000>Helvetica-Bold AddT42Char 
1 14256 76 <00020089000001aa05cb00030007003b40224c004c015c005c010401b102
000406070a0917171a0006270107190809b2215045182b2b4ef43c4dfd3c
4e456544e6003f3f3f4ded3130005d012111210121112101aafedf0121fe
df0121fedf04c40107fe77fbbe00>Helvetica-Bold AddT42Char 
1 14496 78 <000100820000046d05bd000b00f040b240024605d402e502040f080a0955
0589058f088e09c505ca08d907df08dc090b080618062f032f0428052d06
370338064c0348065d0359066a0369067804880497039507a903af04aa06
a807b603b804c603c9041a4b064a07560588048308c405c808d903d904dd
07da080b050909040505060b0b040802070904050706050a02200303cb12
04040909040302040602090a0403060a070a0000061a0d010a27000b200b
300b400b040b190c0d872150e3182b2b4efc5d4dfd3c4e10ee003f3f3c3f
3c12393901111739874d2e2b047d104b51587a59c4001239011139390f87
10083c07103c313001715d00715d13211101210901210107112182011801
630161fe83018cfea8fefb76fee805bdfce6019afe5ffd6401d27bfea900
>Helvetica-Bold AddT42Char 
1 14796 79 <0001008b000001a805c20003002540130200010a0517171a002701190405
b2215045182b2b4ef44dfd4e456544e6003f3f31302901112101a8fee301
1d05c200>Helvetica-Bold AddT42Char 
1 14860 80 <000100800000069c045a002d00c2414d0037000200010006000200160002
002500020069000f006a001a0079000f007a001a0089000f008a001a0099
000f0099001a00a9001a00b9001a00e7000b000e0002002100290003001f
000d0024002d00180024002d00250007001f0006001d00120008000a002f
00170017001a000600360009010f00290011004d0014010f001e0020001d
0027001e0019002e002f012300210050004500182b2b4ef44dfdc410f4ed
39f4fd4e456544e6003f3c3c3f3f3c4ded10ed1117393130015d005d0016
171617161503211134272623220706151121113427262322070615112111
2115363736333217161736373633058f8c392e100a02fedc142666762d17
fee11424697a2a17fedf0115352f53847d4d3e203853586c045a38463953
376afd5102b63e284c623449fd770289612c4f4f2d59fd7004409f552440
373350602d2d>Helvetica-Bold AddT42Char 
1 15196 81 <0002008700000461045f00160017004b402d0501150125013701580b680b
060112100609241716070e040a170536170f021a19110e270f191819be21
5045182b2b4ef44dfdc44e10f64d1139ed2f003f3c3f3ced3f3939313001
5d001615112111342726232207061511211121153637363327038ad7fedc
172a7691361cfee401133731588769045cb1cdfd220297562e547b4165fd
b204409f542542030000>Helvetica-Bold AddT42Char 
1 15356 82 <00030042ffda049c0465000b00170018004d4028170301080c880c881003
170d180f660d0305241814070b240e0b1818080236171a1a08361119191a
b80176b321484e182b2b4ef44ded4e10f64ded11392f003fed3f3ced3130
017200727124363534262322061514163324002120003534002120001501
02eb86867d7d87877d022efeecfee7fee7feec0114011901190114fdd3c9
b2a4a4b1b1a4a4b266feab0155f0ec015afea6ec0240>Helvetica-Bold AddT42Char 
1 15528 83 <0002007dfe53049a045a000d0020004a40291713080a1c1a022420071a06
0a24130b190e080d180d36101a22061f1b1f1827191921229821504e182b
2b4ef44dfdf4e44e10f64ded111239003f3fed3f3fed1139113912393130
002623220706151417163332363512001110002322272627112111211536
373633037473819b3a1e653c52777d1d0109fefdcc82562f2dfee601112e
345f83029fc2934e78be4d2db8990239fee6feeffee0fed2412445fdc805
efa1472949000000>Helvetica-Bold AddT42Char 
1 15900 85 <00010082000002fb045c0013004ab900030147b3020f0d06b80147401913
070d060c0a200230024002031517171a020e0b270c191415b80164b32150
66182b2b4ef44dfdc4d44e456544e64d5d003f3f3fed1139d4ed31300016
17112e01232207061511211121153637363302dd0b131b2a0dac3b21fee1
011042315080045c0101fedc0302703f83fdf70442be6d2843000000>Helvetica-Bold AddT42Char 
2 0 87 <00010015ffea027805680016004ab6102c0f1f0c2c11ba01710004015c40
1607005c0601061817171a0f06f4040927009203151718b8010eb3216066
182b2bd43ce4fd3cf43c4e456544ee4d003f3cfd3ced3ffdf4e431301335
3311211133152311141633323637150706272635111598011ab1b122570d
1d0e87ca4a30036dcb0130fed0cbfdc043210101d505074d3166029f>Helvetica-Bold AddT42Char 
2 960 92 <00020015fe470450045f0013001400d94070270a560a660a950aa40ad30a
06050a0106061c07110d2d07200d3d07310d4b075d07580b680b7707790d
0d170f360d8709880b980bb80b0614140c080d02200c0c27120b0b0a0607
021f0808271209090a0607020d0a150c0b0908060709001f022c131f100f
14071617171a0e0d0b0cb8010cb30607090ab8010c400c13920819651516
a9216066182b2b764ef44de418fc393939fc393939194e456544e618003f
3f4de4fde43f3f3c3c3c12393911123901872e2b057d104b52787ac53387
2e182b7d104b52787ac5011112392f3130015d7100715d1f011636373e01
2701211b01210102062322262701b1242a4c1a192b04fe70013deee1012f
fe8a6c7ebd262e2e0182d102020a12116c0c0472fcdc0324fbd0feca9501
03061400>Helvetica-Bold AddT42Char 
2 1684 95 <0001006a0000017105d00003002540130300020a0517171a012202190405
cd216c3c182b2b4ef44dfd4e456544e6003f3f3130011121110171fef905
d0fa3005d0000000>Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/comma 15 def
/period 17 def
/zero 19 def
/five 24 def
/seven 26 def
/less 31 def
/equal 32 def
/C 38 def
/M 48 def
/R 53 def
/S 54 def
/T 55 def
/V 57 def
/a 68 def
/e 72 def
/g 74 def
/h 75 def
/i 76 def
/k 78 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/t 87 def
/y 92 def
/bar 95 def
end
Helvetica-Bold /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 53 /five put
dup 55 /seven put
dup 60 /less put
dup 61 /equal put
dup 67 /C put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 121 /y put
dup 124 /bar put
pop
end
%ADOEndSubsetFont
/VCIYWY+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/VCIYWY+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero 4{/.notdef}rp /five /.notdef /seven 4{/.notdef}rp /less /equal 5{/.notdef}rp /C 9{/.notdef}rp /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWY+Helvetica-Bold nfVCIYWY+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf292.877 419.56 mo(CMS \(pp at 7 TeV, |y|<0.5\) antikt algorithm R=0.7)[-4.20624 -4.78271 -3.89233 -1.6152 -1.92902 -3.57275 -3.57275 -1.61517 -3.25888 -1.98611 -1.61517 -3.25891 -1.61517 -3.22461 -3.25888 -3.36157 -1.67227 -1.61517 -1.68365 -3.25888 -1.62659 -3.4187 -3.25888 -1.61517 -3.25891 -1.92905 -1.67224 -3.25888 -3.51569 -1.98611 -1.61517 -3.25888 -1.92905 -1.67227 -3.25888 -1.61517 -3.57275 -3.57272 -2.24866 -1.61517 -1.98611 -3.57275 -5.10229 -1.61517 -4.20621 -3.36163 -3.25888 -1.67224 0 ]ysh/VCIYWX+Symbol*1 uf/VCIYWX+Symbol uf/Symbol uf/VCIYWY+Helvetica-Bold*1 uf/VCIYWY+Helvetica-Bold uf/Helvetica-Bold uf/VCIYWW+Helvetica*1 uf/VCIYWW+Helvetica uf/Helvetica uf293.964 442.984 mo
293.964 437.277 li
288.257 440.131 li
cp
.897551 .783413 0 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica-Bold Initial
ct_T42Dict begin
-1.016 -0.48 1.434 1.156
 256 array 0 1 255 {1 index exch /.notdef put} for  /Helvetica-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f321186289e000000cc000000606376
74206741296a0000012c000003886670676db24d5cc5000004b400000b97
676c796665fbf61600005fa40003e01c68656164bc89f5600000104c0000
0036686865619a0f85080000108400000024686d7478c2fdbc55000010a8
000022486c6f63610ec2ca9c000032f00000224c6d61787011060c900000
553c000000206e616d65ea5eadef0000555c0000067470726570b552e591
00005bd0000003d367646972000000000000000000000000000303d402bc
00050000059905330000011e05990533000003d000660200000000000000
000000000000e00002ff5000785b00000000000000007079727300200009
feff0600fea4003d07ae01db2000019f4f010000044205c2000000200000
05c0001105c2002d0597001d0442001d0000ffda0000ffdb0000ffdafe53
ffef05d0000afffdffed03340000012200000122dffb011400af000700b7
007e000400d200aa0109002300ed013200d9011d012a00d800fe00db00e2
001a008b00a0001a004500e801f6000900e90128013200360082009e009f
ff700070003f003f00e801050015003800e9ff7bffc8fff90042008a00c4
01070113011dffb9002f00870087009a009c010c0262ffb10018004c0077
0080008200c900daffb2ffea001a003600e50111012f043bffdd00020005
001a0039008900aa00b701210123012a015bffe5000200180023005c00aa
ff4dff76ffb2ffef001a002f004e007b008a00e1011f0126012b019a01de
03edff80ff8e0007001c004e005500630063006d00810098009c00ad011f
01260162041c051500390044004b0063008e00cc00e800f2010001290142
017802d503ea03f0043b049affc400050055005c0060009f0103011d0124
01550164017001ad01b401c301f602370261033903d5047004a100020055
008800a100bd00c700d300dd00eb00ed00fa00fd0104012b013e014f017b
019d01ad01e20233025d027d028c02da02ef033103de0407048b058505bb
ff04ffd5fffa0007001e002a003b004700510058006500650066006e0075
007f00840107009700b100c300cc00df00df010a0110012f013101470154
015b016b0179009101a401ba01dc01e401e601e901f60213021f0223022f
0276027d0282028902ad02b202b902ed03110374037d03c003de03f60415
045d04c004c004df052d0574061c064b0751fe94fedfff2dff90ff9affea
0016001600240029002d003e0104006d006d008400870089008e009c00a4
00ab00ae00b200b2fffb013900c400d100df00e100ef00f70121011c011c
012101320138015001510154016c016d017f019801a401aa01b601ba01bb
01bb00d701d701fb01fb01fe00190209022d025b026102790279029a0098
02d302da02ef030c03210328032d034b0353fff103ad03b103f20425045a
0471047b048a0498049f051c053d0557055a0570059505b605cb05d605ef
05f4061d068706a406b406d307080734079807fe012201320120012500b4
00be0082009603700132012400430184011d015600cc010500ed00c500fb
00f900c000a7011d00fe035500880026ffa100b8ff8800dd00bd00b5037c
003c00910293024aff3f03a803090132fff700820030002a002a002a002a
002a002a402a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b9400000000a2d2c00b9000040000b2d2c2045b00043617d
6818b0004360442d2c45b01a234445b01923442d2c2045b00325456164b0
50515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000
4360442d2c20b0032552582359212d2c69b04061b0008b0c6423648bb840
0062600c642364615c58b0036159b002602d2c45b0112bb0172344b0177a
e5182d2c45b0112bb01723442d2c45b0112bb017458cb0172344b0177ae5
182d2cb002254661658a46b040608b482d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b0005058b21a
401a4523604459b0005258b219401945236044592d2cb9187e3b210b2d2c
b92d412d410b2d2cb93b21187e0b2d2cb93b21e7830b2d2cb92d41d2c00b
2d2cb9187ec4e00b2d2c4b525845441b2121592d2c0120b003252349b040
60b0206320b000525823b002253823b002256538008a63381b2121212121
59012d2c456920b00943b0022660b00325b005254961b0805358b2194019
4523616844b21a401a4523606a44b209191a45652345604259b00943608a
103a2d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2c764520b00325452361681823686044
2d2c7645b00325452361682318456860442d2c7645b00325456168234523
61442db8002a2c4bb800095058b101018e59b801ff85b800441db9000900
035f5e2db8002b2c2020456944b001602db8002c2cb8002b2a212db8002d
2c2046b003254652582359208a208a49648a204620686164b00425462068
6164525823658a592f20b00053586920b000545821b040591b6920b00054
5821b0406559593a2db8002e2c2046b00425465258238a592046206a6164
b0042546206a61645258238a592ffd2db8002f2c4b20b0032650585158b0
80441bb04044591b21212045b0c05058b0c0441b2159592db800302c2020
456944b001602020457d691844b001602db800312cb800302a2db800322c
4b20b003265358b0801bb040598a8a20b0032653582321b0c08a8a1b8a23
5920b0032653582321b801008a8a1b8a235920b0032653582321b801408a
8a1b8a235920b80003265358b0032545b8018050582321b8018023211bb0
03254523212321591b2159442db800332c4b535845441b2121592db80034
2c4bb800095058b101018e59b801ff85b800441db9000900035f5e2db800
352c2020456944b001602db800362cb800352a212db800372c2046b00325
4652582359208a208a49648a204620686164b00425462068616452582365
8a592f20b00053586920b000545821b040591b6920b000545821b0406559
593a2db800382c2046b00425465258238a592046206a6164b0042546206a
61645258238a592ffd2db800392c4b20b0032650585158b080441bb04044
591b21212045b0c05058b0c0441b2159592db8003a2c2020456944b00160
2020457d691844b001602db8003b2cb8003a2a2db8003c2c4b20b0032653
58b0801bb040598a8a20b0032653582321b0c08a8a1b8a235920b0032653
582321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920
b80003265358b0032545b8018050582321b8018023211bb0032545232123
21591b2159442db8003d2c4b535845441b2121592db8003e2c4bb8000950
58b101018e59b801ff85b800441db9000900035f5e2db8003f2c20204569
44b001602db800402cb8003f2a212db800412c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db80042
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db800432c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800442c2020456944b001602020457d6918
44b001602db800452cb800442a2db800462c4b20b003265358b0801bb040
598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db800472c4b535845441b2121592db800482c4bb800095058b101018e59
b801ff85b800441db9000900035f5e2db800492c2020456944b001602db8
004a2cb800492a212db8004b2c2046b003254652582359208a208a49648a
204620686164b004254620686164525823658a592f20b00053586920b000
545821b040591b6920b000545821b0406559593a2db8004c2c2046b00425
465258238a592046206a6164b0042546206a61645258238a592ffd2db800
4d2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db8004e2c2020456944b001602020457d691844b001602db8
004f2cb8004e2a2db800502c4b20b003265358b0801bb040598a8a20b003
2653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800512c4b
535845441b2121592db800522c4bb800095058b101018e59b801ff85b800
441db9000900035f5e2db800532c2020456944b001602db800542cb80053
2a212db800552c2046b003254652582359208a208a49648a204620686164
b004254620686164525823658a592f20b00053586920b000545821b04059
1b6920b000545821b0406559593a2db800562c2046b00425465258238a59
2046206a6164b0042546206a61645258238a592ffd2db800572c4b20b003
2650585158b080441bb04044591b21212045b0c05058b0c0441b2159592d
b800582c2020456944b001602020457d691844b001602db800592cb80058
2a2db8005a2c4b20b003265358b0401bb000598a8a20b0032653582321b0
808a8a1b8a235920b0032653582321b800c08a8a1b8a235920b003265358
2321b801008a8a1b8a235920b0032653582321b801408a8a1b8a235920b8
0003265358b0032545b8018050582321b8018023211bb003254523212321
591b2159442db8005b2c4b535845441b2121592db8005c2c4bb800095058
b101018e59b801ff85b800441db9000900035f5e2db8005d2c2020456944
b001602db8005e2cb8005d2a212db8005f2c2046b003254652582359208a
208a49648a204620686164b004254620686164525823658a592f20b00053
586920b000545821b040591b6920b000545821b0406559593a2db800602c
2046b00425465258238a592046206a6164b0042546206a61645258238a59
2ffd2db800612c4b20b0032650585158b080441bb04044591b21212045b0
c05058b0c0441b2159592db800622c2020456944b001602020457d691844
b001602db800632cb800622a2db800642c4b20b003265358b0401bb00059
8a8a20b0032653582321b0808a8a1b8a235920b0032653582321b800c08a
8a1b8a235920b0032653582321b801008a8a1b8a235920b0032653582321
b801408a8a1b8a235920b80003265358b0032545b8018050582321b80180
23211bb003254523212321591b2159442db800652c4b535845441b212159
2d000001000000010000ef9f9d525f0f3cf50011080000000000a2272e80
00000000cb97f49ff7dcfc270b7e09460001000900010001000000000001
00000629fe2900000c01f7dcfcdb0b7e0001000000000000000000000000
0000089205c7009a00000000023900000239000002aa00e103cb00a70473
000004730038071d002f05c7006f01e7006302aa005902aa0015031d002f
04ac00490239007602aa002f023900800239ff90047300400473008e0473
00400473003604730036047300360473004004730034047300360473003d
02aa00e802aa00e804ac001704ac004904ac001704e3007b07cd00c705c7
003405c700a105c7005c05c7009c055600a504e3009c0639005505c7009a
023900840473002d05c700a104e3009c06aa009705c70097063900650556
00a30639006505c700a30556005504e3002105c7009c0556002f078d001e
055600210556002304e3003402aa00800239ff9002aa002f04ac008b0473
000002aaffce0473003b04e3007b0473004704e3003f0473002f02aa0015
04e3004204e300870239008902390009047300820239008b071d008004e3
008704e3004204e3007d04e3003c031d00820473004202aa001504e3007d
0473001a0639000e0473001a0473001504000021031d0000023d006a031d
002d04ac000405c7003405c7003405c7005c055600a505c7009706390065
05c7009c0473003b0473003b0473003b0473003b0473003b0473003b0473
00470473002f0473002f0473002f0473002f023900760239ffce0239ffb6
0239ffd504e3008704e3004204e3004204e3004204e3004204e3004204e3
007d04e3007d04e3007d04e3007d047300470333005e0473004504730042
0473004102cd00910473ffc304e3008905e5001a05e5001a080000cb02aa
007602aaffd504640049080000120639004705b400190464004904640047
046400490473ffea049cffcb03f4002405b4fff706960007046400290231
007602f6002802ec000e06250031071d003804e3002a04e3006d02aa00e1
04ac00490464ffd50473001e0464004904e5fffa047300af047300000800
00bd0239000005c7003405c70034063900650800004b078d003f0473fffb
080000f10400008b0400009702390089023900840464004903f400210473
0015055600230156fea305f4004402aa00aa02aa00aa04e3001c04e3001c
047300470239007102390092040000920800000405c70034055600a505c7
0034055600a5055600a5023900760239ffb60239ffd50239ffce06390065
06390065065200690639006505c7009c05c7009c05c7009c0239008902aa
ffb602aaffa802aaffbd02aaffc902aa009a02aa004202aa001202aaffd3
02aa004202aaffb604e3fff10239ffe8055600550473004204e300340400
0021023d006a05c7001204e3006d05560023047300150556008004e30080
04ac004904ac005502aa005002aa001a02aa001206ac002f06ac005a06ac
004e047300000639005504e3004202390084055600550473004205c7005c
0473004705c7005c0473004704e3003f05c700340473003b05c700340473
003b05c700340473003b05c7005c0473004705c7005c0473004705c7009c
0600003f055600a50473002f055600a50473002f055600a50473002f0556
00a50473002f055600a50473002f0639005504e300420639005504e30042
0639005504e3004204e3004205c7009a04e3008705c7000f04e3fff1035c
fffc037100010366000a035c000c0239000b0239000306ac008404720089
0473002d027bffc905c7008e0473005804e3009c0271008b04e3009c0239
002704e3009c0356008b04e3009c0329008b05c7009704e3008705c70075
04e3005c05c7009704e3008704e300870639006504e300420639006504e3
00420639006504e3004205c700a3031d008205c70092031d006905c700a3
031d00360556005504730042055600550473004204e3002102aa001504e3
002103b8001504e3002102aaffe305c7009c04e3007d05c7009c04e3007d
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d078d001e0639000e055600230473001504e300340400002104e30034
04000021055600550473004204e3002102aa0015047300360000fc910000
fc900000fc250000fc180000fc2c0000fc360000fd0d0000fc450000fcb5
0000fbd80000fc250000fd010000fc9d0000fcb50000fbfb05c700120639
005504e3004204e3009c0239008b05c700a10473008205c7009704e30087
05c700a3031d0080020e000802aa00e702aa002f023900090473008202aa
0015047300300473002e047300460473003a0000fcfb0000fc2c0000fc36
0239ffcc0239ffc905c7009704e300870000fc2b05c7002905c700a805c7
00a804a000a805c70019055600a80800001904e3003d05c7008f05c7008f
05c700b205ec004e06aa008f05c7008f0639005a05c7008f055600a805c7
005a04e500190556003106ac003d0556001b05c7008f0556005a078d008f
078d008f06aa002f078d00a8055600a805c7005a0800008f05cb00460473
003904e3004604e3008f038d00870531001f0473003506ac00100400002d
04e3008704e3008704e3008f0556004605c7008704e3008704e5004604e3
008704e3007f04730046040000290473001d06a800460473001f04e30087
0473003f06ac008706aa00870556002906aa008704a000850473004606aa
008704e30056055600a80473003504a000a8038d0087023900830239008f
0473002f05c7005a047300460239ffcf0239ffcf080000140750004607e9
008f070e0087023900040556004e0664001704e3002905c700b204e3008f
047300440617001004e30029055600310473001d05c7008f04e3008504e3
00a8038d00870000fd010000fd010000fd010000fd010000fbd80000fd43
0000fc9e0000fc360000fc910000fc900000fc2c0000fd0d0000fc450000
fcb50000fd430000fc250000fc250000fc360000fc360000fc180000fc54
0000fc2c0000fc180000fc2c0000fc2c0000fc2c0000fd0d0000fc2c0000
fd010000fc360000fc240000fc9e0000000002aa001504e30086071d0080
031d0081071d0080031d0082031d0081040a0046040a004702390089030b
ffd802aa001502aa0015047300190639000d0473001404e3007b04e3007b
04e3007b0473008104bc003b04bc003b05c7005b05c70012049e00480556
00a4055600560473004304c3003d0758009c0671007d0633005b023d00a5
043b00a502aa00e10494001b04730047011d004502aa00af02aa00af0b62
0004056500bd02a500bd040000970239008502aa002f0473000004e200af
04e200af06e400af06e400af02aa002f02a500bd02aa002f080000f10554
01d000000000000000000000000000000000000000000000000000000000
000000000239000002390000023900000239000002390000023900000239
000002390000023900000000000000000000000000000000000000000000
023900000239000002aafff6043b00a504e3007b02aa002f02aafff60473
00050473000005c7003404e3009c0473002e07920065065c00420000fd22
0000fd220000fd220000fd220000fc900000fc8d0000fd470000fc790000
fc990000fc940000fc860000fc9a0000fc080000fcf10000fcf70000fc80
0000fc820000fc540000fbfb0000fc810000fc810000fc810000fc820000
fc820000fc3602aa00af04e200af02aa00af02aa00af0464001304640019
04510011046e002405b4007705b400830231ff5e0231ff6e0464ff520464
ffd5046400110464001a08fa005e0816005e05c700a10239008404720084
06ab0084078f00840556002f078f002f09c8002f0c01002f078f00840556
0021078f002109c8002104e3009c05c7005c05c7009c06aa009702390089
0472008906ab008906ac00890473001a06ac001a08e5001a0b1e001a06ac
00890473001a06ac001a08e5001a0239008b0473004704e3003f071d0080
09d70048090f0058087b003f0876006d06af006d042c008b09440063073f
00680667005d05c700340473003b0239ffb60239ffb60639006504e30042
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d05c7009c04e3007d05c700340473003b05c700340473003b08000012
071d00380639005504e3004205c700a1047300820639006504e300420639
006504e300420239ffb60a0c006d0939006808ab003f0639005505c70097
04e3008705c700340473003b08000012071d00380639004704e3002a05c7
00340473003605c700340473003b055600a50473002f055600a50473002f
0239ff1d0239ff190239ffc60239ffcc0639006504e300420639006504e3
004205c700a3031dffaa05c700a3031d005e05c7009c04e3005c05c7009c
04e3007d05c7009a04e3008705c700340473003b055600a50473002f0639
006504e300420639006504e300420639006504e300420639006504e30042
0556002304730015040000970239008405c700340473003b05c700a104e3
007b05c700a104e3007b05c700a104e3007b05c7005c0473004705c7009c
04e3003f05c7009c04e3003f05c7009c04e3003f05c7009c04e3003f05c7
009c04e3003f055600a50473002f055600a50473002f055600a50473002f
055600a50473002f055600a50473002f04e3009c02aa00150639005504e3
004205c7009a04e3008705c7009a04e3008705c7009a04e3008705c70082
04e3006605c7009a04e300870239ffa80239ffa00239ffd90239ffe905c7
00a10473008205c700a10473008205c700a10473008204e3009c0239008b
04e3009c0239ffbd04e3009c0239ffbd04e3009c0239ffae06aa0097071d
008006aa0097071d008006aa0097071d008005c7009704e3008705c70097
04e3008705c7009704e3008705c7009704e300870639006504e300420639
006504e300420639006504e300420639006504e30042055600a304e3007d
055600a304e3007d05c700a3031d008205c700a3031d008205c700a3031d
005105c700a3031d00010556005504730042055600550473004205560055
047300420556005504730042055600550473004204e3002102aa001504e3
002102aa001504e3002102aaffe304e3002102aa001505c7009c04e3007d
05c7009c04e3007d05c7009c04e3007d05c7009c04e3007d05c7009c04e3
007d0556002f0473001a0556002f0473001a078d001e0639000e078d001e
0639000e078d001e0639000e078d001e0639000e078d001e0639000e0556
00210473001a055600210473001a055600230473001504e3003404000021
04e300340400002104e300340400002104e3008702aafffc0639000e0473
001502aa001505c700340473003b05c700340473003b05d3003404ec003b
05d7ffe804a8ff8505c70034048d003b05c700340473003b05c700340473
003b05c700340473003b05c700340473003b05c700340473003b05c70034
0473003b05c700340473003b055600a50473002f055600a50473002f0556
00a50473002f057500a5047d002f0556002b04a2ffb4055600a50473002f
055600a50473002f055600a50473002f0239008402390089023900840239
00890639006504e300420639006504e300420639006504e3004206390065
04e3ffc00639006504e300420639006504e300420639006504e300420792
0065065c004207920065065c004207920065065c004207920065065c0042
07920065065c004205c7009c04e3007d05c7009c04e3007d0758009c0671
007d0758009c0671007d0758009c0671007d0758009c0671007d0758009c
0671007d0556002304730015055600230473001505560023047300150556
002304730015055600a50473002f055600a50473002f056d008605df008e
048600370486008708d9002006dd000c056d002904860027056d00290486
0027056d00860486003708d9002006dd000c054f003d040a002b05df008e
0486008705df008e048600870655005a0486005005df005b04120050056d
00170412001e056d00170412001e056d00170412001e05ac0059047a004c
074800a80600008d08000012071d003806aa0097071d008005c700a3031d
00600222ffbc05c7003705c700a204e300a205c7001b055600a204e3003d
05c700a206390068025e009305c700a20558002d071a00ae063900ba04e3
00520639006805c700a2055600a204e3002f04e500290556002705c70042
0556002d06ac007b06390044025e00040556002704e5004804d500770473
002504e3006204730077038d005204e1009a04e100810239008d0473008d
0473003104e1009a047300310400005604e5006004e3009a0473004e04e5
00600400004604e1009a05c700580473001405c7006d05c7003b0239ffe9
04e1009a023900710222ffb20000fd4802c601a401c7006a01c7006a0000
fc910000fc9001c7006a03290014032900140340006a036a006a02220006
0222008c0376006a01c7ff9e036e006a01c7ff9e08000073062500310639
fffe0239008902390084055400e1078d007b078d00e10473002f0473002f
05c700340473003b0473003b055600a50473002f055600a50473002f0556
00a50473002f0239ffbb0239ffb7023900890639006504e3004206390065
04e300420639006504e30042055600550473004205c7009c04e3007d0473
001a0758009c0671007d0602003f04e3ffff05c7000d04e30087071d0080
043f009c0460007f0400006004d9006e0356fff8048b00350602005d0473
00350655004b048600370639006502aaffef07ac001b07ac001b09b60087
0000f9290000f9d30000f9d30000f9650000f9dd0602005d047300350655
004b048600370222008c032900140464003104e300340400002104e30042
05300087052b003f04e3007704e3003f04e3004204e30087054500870271
008b078d003f03c60081031d008104e3003c04e3fffe04e3fffe0800003f
064c001504db001506b00015057f008b0555008b01a4006f01a4006f0239
008402aa010d02aafff602aa00af02aa000702aa010d02aafff602aa00af
02aa000701a4006f01a4006f02aaffef02aafff60272004402720044011d
0005018f0041018f004101e30041031d0007023a000b0272003e0272003e
0256000c0256000c025600130256001302aa002f02560025025600250256
0025023900210239000d011c00450256002b023900120256001302560013
0256000c0256000c02aa007b0272003e0000fc870000fc690000fc690000
fd260000fd260000fc2c0000fc2c0000fb4f0000fc690000fc2c0000fc87
0000fc810000fc810000000002390000000000000000000000000000031d
002f031d002f08dc00af07ac001b02aa00e809c6007b07ac001b071d0104
0702000602aa008002aa0080000000000000000000000000000000000000
00000000000006c5001b023a0020023a001b0239001b02390020023a001a
0239001b0239001e0256002501550018025600250155002e0155000a0272
0044023a0020023a0047023a00200239001b023a001b0239001b02390020
023a001a0239001b0239001e0256002501550018025600250155002e0155
000a06f900340639005504e3009c04e3009c0556002307d6fff70600002a
078e001104e300820800004e06ac002f05c7005c05c7006f04e5fffa0696
000707d6002507d600310556009b04e300730556009b04e3007304e30013
06390065052b009a02ad002f036dfff605c7004203060017030bffd804e3
007b04e3007b023900090239000904e3004204e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e500480629006a063b006a086e
009b081d006e078d006a07f0006a078e0070078e00480473007704730077
04730077047300770473007704730077071d006a071d00b208cc009008c4
009a0896009108c0009504e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a078e006a078e006a093d006a0935006a0907
006a0931006a078eff9e078eff9e0239008d0239008d0239ffbd0239ffc1
0239ffd10239ffc10239ffd30239ffd30425006a0425006a05d4006a05cc
006a059e006a05c8006a0425ff9e0425ff9e04e5006004e5006004e50060
04e5006004e5006004e500600800006a0800006a09af006a09a7006a0979
006a09a3006a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a071d006a08c4006a08c0006a0792ff9e05c7003b05c7
003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b07ec006a
07ec006a099b006a0993006a0965006a098f006a07ecff9e07ecff9e04e5
004804e50048047300770473007704e1009a04e1009a0239005102390056
04e5006004e5006004e1009a04e1009a05c7003b05c7003b04e5004804e5
004804e5004804e5004804e5004804e5004804e5004804e500480899006a
0878006a0a73006a0a7c006a0a15006a0a77006a09c7006609c7006604e1
009204e1009204e1009204e1009204e1009204e1009204e1009204e10092
09c7006a09c7006a0b76006a0b6e006a0b40006a0b6a006a09c7ff9e09c7
ff9e05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b05c7003b
05c7003b0a25006a0a25006a0bd4006a0bcc006a0b9e006a0bc8006a0a25
ff9e0a25ff9e04e5004804e5004804e5004804e5004804e5004804e50048
04e5004805c7003705c7003706cd000606cd008c07d8003704e1009204e1
009204e1009204e1009a04e10092076300060784008c07e2000607ca008c
080700a20239ffbf0239ffaa0239ffb60239ffb60239ffcf0239ffc9025e
ffd2025effc2043b002d0453008c04e1009a04e1009a04e1009a04e1009a
04e3009a04e3009a04e1009a04e1009a055600270556002707a500580797
008c071d006a05c7003b05c7003b05c7003b05c7003b05c7003b07f60045
082b0059086500060899008c0852003104e500480473007704e1009a0239
008d04e5006004e1009a05c7003b06cd008c0784008c07ca008c0453008c
07d4005e0775006c0842006c0239ffb604e1009a067d003d04f700db04f7
007b03220013031e002b0464003104e5004804e5004804e5004804e50048
04e5004804e5004804e5004804e5004804e5004804e5004804e5004804e5
004804e5004804e5004804e5004804e500480239ffb60239ffb60239ffb5
0239ffb60239ffb60239ffb60239ffb60239ffb60239ffb60239ffbe0239
ffbe0239ffb50239ffbe0239ffbc0239ffbe0239ffbe0239ffbe0239ffbe
04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1
009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a04e1009a
04e1009a04e1009a04e1009a06cd000606cd008c0629006a086e006a078d
006a063b006a085c006a07f0006a06cd000606cd008c0629006a086e006a
078d006a063b006a085c006a07f0006a047000060453008c0453008c0425
006a05d4006a059e006a0425006a05cc006a05c8006a047000060453008c
0453008c0425006a05d4006a059e006a0425006a05cc006a05c8006a07a5
00060797008c0797008c071d006a08c4006a08c0006a071d006a08c4006a
08c0006a07a500060797008c0797008c071d006a08c4006a08c0006a071d
006a08c4006a08c0006a05c700a305c7005c063900650239003b05aa008f
055600a305c7004a0000fcfb04b5004a04e3003f0639005a04e5004607b0
004107b4004205e5001a06ac004506ac004506ac004306ac0043063900b4
05560029082200a205e1005b06ac007b05c7006d05c700340473001a080a
00a20642005b0547001503d0001f0636003005ba002905c700a30473003b
02aaffcc04ac009a0425009a063d009a0524008705c700a10473008204e3
00340400002108d9ffef06ddfff7054f0062040a0033056d00a00412006a
05df00a20486007c05df005f0412002c04f8002204120028056dfff80412
ffe105ac00a0047a006205ac00a0047a0062055600230556002304d900ac
037c007505ac00a004d7006206e300a00552006a077600a205d9007c0556
0023055600230731001305d100230767002505f800250767002505f80025
075b00360543001b05df00a20486007c0473003b054f00a6054f00a606ac
007b04f0005b088a003e06a6003305c7003904e1001d05eb002f04e3001a
04730047054f0062040a003305f10022049c001402390089056dfff80412
ffe10556002f05c7003405c7005c0473004704e3fff104e3002102390059
031e002b04e30021055600a304e3007b04e3007b055600a50473002f0473
002d0239fff305c7009c01a9001a01a9001a02aa000c02aa000c02aa0007
02aaffe102aa00e802aa002402aa0024067d0057067d003d067d00ad02aa
00e8067d003d067d005c067d011002aa00e802aa00e8063900680412002c
0412002c055600a504e3008005c7005c06aa0097063000970548001605c7
005c05c7005c05c7005c04730047047300470473004704e3003f061b003a
06a80039062e003b0384002b062200240549003b04e5004f02aa00bf02aa
00bf02aa00bf02aa00bf025d003d025e003d03cc000903cc000903c30000
03c3000003c3000004c2001303fe0027043c005c04440078044400780307
0055034f0012070f003e0662004405fe00350000f7dc0698004a05450049
01ec004e01f4004e01b3002a01b2000c01d3002b01d3001a033c001f0343
001f03420013033f0013033f001302ff004e0224000a0224000b07ec003d
0982004e0933004b093300020149004e0485002505d2000705d1000d04d1
0014047a00200224000a0224000b044b0041044b004104290041038c0008
049e00440000fb230000fc720000fb870000fc180000fc180000fa110000
fcaf0000fe390000fc470000fc100000f9d30000fc5e04cc003c04cc0038
0468003c046800380821001b04a60021044400220533003b069a0037057f
003a071d006a08c4006a08c0006a05c7003705c70037025effd3025effd2
0556002705560027045f001605e5001a05e5001a05e5001a0800ffeb0800
ffeb080003b40800038c080003b40800038c0800ffe90800ffe9080003b4
0800038c0800ffe90800ffe908000000045f0016011d0045023a001e023a
001802720021023a000d023a001805c7005c0639005505c7005c045e0023
063c002f04e3002105c7003405320053062500320508003205c70058071d
008006420033067800390832003604b5004a04b5004a0347004203430047
0346004103430047034600570344004f034600570344004f03a100570394
0057039400570394005703a1005703a0000d039400000394000003940000
03a0000d03e9005703dd005703dd005703dd005703ea00570397000303fc
003803fc00290412001505a8003106de002e039b00730000fbf40000fbf4
0000fbe00000fbe00000fbe00000fbe00000fb9e0000fb9e0000fcf104cc
0038046800380aac0065095600420444007804440078044400780329002a
0329002a035d002a050d0028037800570378002d032900210329002102de
003202de00320378002f019400610329005c050d005b037800600378002f
032900320378002f0378002f0378005901e4000f037800590383003a050d
005b03290012036e00540329001a0378004604f40052066f003604f50052
04e3004204e300410501003b04fe003d0530003b078e00420329000e0194
00610236005c0378005903290012036e00540329001a0378006d0329000e
040a00460604001202390089043c005c0898002907240037052c00210558
001d0320000e052b002303730017031c000f031f00100239009204000092
0239008504000097023900920400009202390085040000970519001b0702
00090310007e05d500a208c00022047300400351002e0493006004730036
04730036047300360473004004730034046000360473003d03cc000903cc
000903cc0009046d001603a2003a044d003804b2003a0797003a0454003a
0459003a05a0003a079e003a04d2003a042c003a090a003a0459003a047e
006b06e2003a044f003a0490003f0672003a043c006b0616003a06dc003a
0630003a0467003a0678003a043d003a0485003a042d006b0497003a046e
003a0442003a04aa003a043f006b0657003a03c0003a0568003a04c3003a
0469003a0409003a0463003a06fc003a041c00bc00000000000000680000
00680000006800000068000000dc00000120000003300000047000000610
0000086c000008b800000960000009e000000af400000b6400000bd40000
0c1000000c5400000ccc00000da000000e0800000f0000001008000010d4
000011a0000012a00000132000001414000014fc00001558000015f00000
1680000016d8000017700000184000001a1c00001b3800001c1c00001d00
00001dac00001e1000001e7400001f7800001fe000002030000020ac0000
2194000021e0000022ec0000237c00002428000024b400002608000026e8
000028280000288800002910000029b400002b7400002cb800002d980000
2e4000002ea400002f1000002f780000302400003058000030ac000031f4
000032a400003380000034340000355c000036280000371c000037b00000
3818000038a0000039cc00003a0c00003b5c00003bfc00003ca800003d64
00003e1c00003eb000003fbc00004050000040f8000041c00000423c0000
437c000044ac00004574000046500000469400004774000048240000483c
000048540000497c00004994000049ac000049c4000049dc000049f40000
4a0c00004a2400004a3c00004a5400004a6c00004ba800004bc000004bd8
00004bf000004c0800004c2000004c3800004c5000004c6800004c800000
4c9800004cb000004cc800004ce000004cf800004d1000004d2800004d40
00004d5800004dd000004e4000004fd000005154000052cc000053580000
53d4000054e00000573c0000590800005a0800005a6000005ac400005ba4
00005c8400005dfc00005f0000005f8000006020000060c4000061f80000
6308000063f4000064ac00006514000065940000664c0000678c00006824
000068e800006a7c00006be000006cb000006d2400006d6c00006e4c0000
6f5000007098000071640000726c00007370000073e0000073e0000073f8
00007410000074280000752800007678000076b0000076ec000077940000
7844000078a8000079040000798000007aa000007ab800007ad000007b10
00007c7c00007d1c00007dc000007e9800007f5c00007ffc000080500000
80c40000817c000083080000832000008338000083500000836800008380
00008398000083b0000083c8000083e0000083f800008410000084b80000
84d0000084e8000085000000851800008564000085f0000086d00000870c
000087a8000087f80000888c00008964000089cc00008a6800008b400000
8c1800008ce400008cfc00008d1400008d2c00008d4400008db800008e98
00008ffc000090140000902c00009120000091c0000091fc000092a80000
9300000093980000946c0000958c0000968400009808000098b4000098cc
000098e4000098fc00009a9000009bc000009bd800009bf000009c080000
9c2000009ce800009d0000009d1800009d3000009d4800009d6000009d78
00009d9000009da800009dc000009dd800009df000009f4000009f580000
9f7000009f8800009fa000009fb800009fd000009fe80000a0000000a018
0000a0300000a0480000a0600000a0780000a0900000a0a80000a0c00000
a0d80000a0f00000a1080000a1ec0000a2040000a21c0000a2340000a24c
0000a2640000a27c0000a2940000a2ac0000a2c40000a2dc0000a2f40000
a30c0000a3240000a33c0000a3540000a36c0000a3840000a4200000a4ac
0000a4c40000a4dc0000a4f40000a50c0000a5240000a53c0000a5540000
a56c0000a5840000a59c0000a5b40000a5cc0000a5e40000a5fc0000a614
0000a62c0000a6440000a65c0000a6740000a68c0000a6a40000a6bc0000
a6d40000a6ec0000a7040000a71c0000a7340000a74c0000a8500000a868
0000a8800000a8980000a8b00000a8c80000a8e00000a8f80000a9100000
a9280000a9400000a9580000a9700000a9880000a9a00000a9b80000aa6c
0000aa840000aa9c0000aab40000aacc0000aae40000aafc0000acac0000
ae4c0000aee80000afe40000b0680000b0940000b0c40000b0fc0000b190
0000b1bc0000b2180000b24c0000b2b00000b3c00000b40c0000b4500000
b4a80000b5880000b6540000b6800000b7600000b7780000b7940000b7ac
0000b7c40000b7dc0000b7f40000b80c0000b8240000b83c0000b8540000
b8e40000b9740000b9a00000b9fc0000ba740000baf00000bb980000bc34
0000bd080000be640000bed00000befc0000bf580000bf700000bf880000
c0300000c0fc0000c1440000c1a80000c2a40000c3dc0000c4180000c4e0
0000c5400000c5d80000c7940000c8300000c9040000c9700000ca180000
cad80000cb640000ccb40000cd200000ce080000cef80000cf440000cfb8
0000d1380000d1a80000d2240000d2c80000d3800000d41c0000d5140000
d61c0000d7080000d7e00000d9080000da7c0000dbfc0000ddac0000dedc
0000df180000dfdc0000e0cc0000e1640000e2d00000e36c0000e4580000
e4c40000e5400000e5fc0000e6880000e7cc0000e8380000e98c0000ea80
0000eacc0000eb440000ed840000edec0000ee6c0000ef080000eff80000
f0a00000f1900000f2940000f3840000f45c0000f5800000f6d80000f788
0000f8b80000f9180000f9780000f9b40000fa080000fa940000fb680000
fc200000fcd40000fd980000fee000010024000101540001027c00010308
0001047000010518000105fc00010670000106e40001082c000109640001
0abc00010b7c00010c4000010cb800010d3000010da000010e0c00010e64
00010ebc00010f1400010f6c00010fb800010fec00011054000110cc0001
10f8000111240001115000011184000111e8000112f80001132c00011370
000113a80001140400011460000114f4000115200001154c000115e00001
160c00011638000116780001175800011798000117f00001184c000118f0
0001195800011958000119f000011a9800011b9c00011c3800011d4c0001
1dd800011e7400011f2000011fcc000120000001208400012134000121bc
000122040001227c000122f00001237800012400000124ec0001256c0001
2670000127740001284c0001296400012aac00012b1800012c7c00012d24
00012d7400012e3400012efc0001305000013084000130ec000131580001
320c000132d8000133080001333800013368000135000001356800013598
0001364c000136a4000136d00001375000013798000137dc0001383c0001
3898000138c4000138f80001392400013950000139880001398800013988
000139880001398800013988000139880001398800013988000139880001
398800013988000139880001398800013988000139880001398800013988
000139880001398800013988000139880001398800013988000139880001
39c400013a2c00013b1400013b4000013b6c00013bc000013c1c00013c34
00013c8c00013d2800013e9000014004000140b80001415c000142000001
42b400014414000144a8000144f800014608000146c0000147940001489c
0001493400014a4400014ad000014b6400014ba800014c0800014c480001
4c7400014cdc00014d2400014d6c00014db800014e0400014e7800014ea8
00014ef000014f2000014f4c00014f6400014f7400014f8c00014f9c0001
4fb400014fc800014fe000014ff40001500c0001501c0001503400015044
0001505c000150740001508400015094000150ac000150cc000150e40001
50f40001510c0001512c000151540001516c0001517c00015194000151b4
000151c4000151d4000151e4000151f4000152040001521c0001523c0001
5254000152640001527c0001529c000152c4000152dc000152ec00015304
000153240001533400015344000153540001536400015384000153a40001
53c4000153dc000153f40001540c000154240001543c000154540001546c
000154840001549c000154b4000154cc000154e4000154fc000155140001
5534000155540001557400015594000155b4000155d4000155f400015614
00015634000156540001567400015694000156ac000156c4000156dc0001
56f40001570c000157240001573c000157540001577400015794000157ac
000157c4000157dc000157f40001580c000158240001583c0001585c0001
587c00015894000158ac000158c4000158dc000158f40001590c00015924
0001593c000159540001596c000159840001599c000159b4000159cc0001
59e4000159fc00015a1400015a2c00015a4400015a5c00015a7400015a8c
00015aa400015abc00015ad400015aec00015b0400015b1c00015b340001
5b4c00015b6400015b7c00015b9400015bac00015bcc00015bec00015c0c
00015c2c00015c4400015c5c00015c7c00015c9c00015cb400015ccc0001
5cdc00015cec00015d0400015d1c00015d3400015d4c00015d6400015d7c
00015d9400015dac00015dc400015ddc00015df400015e0c00015e240001
5e3c00015e5400015e6c00015e8400015e9c00015eb400015ecc00015eec
00015f0c00015f2c00015f4c00015f6400015f7c00015f9400015fac0001
5fcc00015fec000160040001601c000160340001604c000160640001607c
00016094000160ac000160c4000160dc000160f40001610c000161240001
613c000161540001616c0001618c000161ac000161c4000161dc000161f4
0001620c000162240001623c000162540001626c0001628c000162ac0001
62c4000162dc000162f40001630c000163240001633c000163540001636c
000163840001639c000163b4000163cc000163e4000163fc000164140001
642c000164440001645c0001647c0001649c000164bc000164dc000164fc
0001651c0001653c0001655c000165740001658c000165a4000165bc0001
65d4000165ec000166040001661c0001663c0001665c000166740001668c
000166a4000166bc000166d4000166ec0001670c0001672c0001674c0001
676c0001678c000167ac000167c4000167dc000167f40001680c00016824
0001683c000168540001686c000168840001689c000168b4000168cc0001
68e4000168fc0001691c0001693c0001695c0001697c00016994000169ac
000169c4000169dc000169f400016a0c00016a2400016a3c00016a540001
6a6c00016a8400016a9c00016ab400016acc00016ae400016afc00016b14
00016b2c00016b4400016b5c00016b7400016b8c00016ba400016bbc0001
6bd400016bec00016c0400016c1c00016c3400016c4c00016c6800016c80
00016c9800016cb000016cc800016ce800016d0800016d2800016d480001
6d6800016d8800016da800016dc800016de800016e0800016e2800016e48
00016e6800016e8800016ea800016ec800016ee800016f0800016f280001
6f4800016f6000016f7800016f9000016fa800016fc000016fd800016ff8
0001701800017038000170580001707800017098000170b8000170d80001
70f8000171180001713000017148000171600001717800017190000171a8
000171c0000171d8000171f8000172180001723800017258000172780001
7298000172b8000172d8000172f800017318000173300001734800017360
0001737800017390000173a8000173c0000173d8000173f0000174080001
74200001743800017450000174680001748000017498000174b0000174c8
000174e0000174f800017510000175280001754000017558000175700001
7588000175a0000175b8000175d0000175e8000176000001761800017638
000176580001767800017698000176b0000176c8000176e0000176f80001
77100001772800017740000177580001777000017788000177a0000177b8
000177d0000177e800017800000178180001783000017848000178600001
787800017890000178a8000178c0000178d8000178f00001790800017920
0001793800017950000179680001798000017998000179b0000179c80001
79d8000179e800017a0000017a1800017a3000017a4800017af000017b54
00017cc800017d0400017d4400017da800017df000017e7400017fd00001
800c00018078000180c40001817c000182040001825c000183a000018408
000184f0000185400001858c000185f000018768000187d4000189100001
8a8400018b0400018ba000018cdc00018e7800018ed80001904c0001911c
00019214000192b00001947c000194b8000195300001957c000196340001
967c000197c000019904000199dc00019ad400019c4400019c9000019d30
00019e7000019edc00019f900001a11c0001a1b00001a2880001a2d40001
a3300001a3600001a3e80001a4400001a4980001a4c40001a4f40001a54c
0001a5e80001a6880001a70c0001a7880001a7b40001a7e00001a8600001
a9000001a9780001aa200001aaf40001ac4c0001adcc0001ae240001ae7c
0001ae940001aeac0001aec40001aee40001af040001af240001af440001
af640001af7c0001af940001afb40001afd40001aff40001b0140001b034
0001b0540001b06c0001b0840001b09c0001b0bc0001b0dc0001b0fc0001
b11c0001b1340001b14c0001b16c0001b18c0001b1a40001b1bc0001b1d4
0001b2940001b3640001b41c0001b4bc0001b5fc0001b6380001b7200001
b8340001b8ac0001b9240001ba6c0001bb400001bc200001bcd80001bd8c
0001be240001be5c0001bebc0001bf1c0001c1880001c20c0001c26c0001
c2cc0001c2f80001c3240001c33c0001c3540001c36c0001c3840001c3b0
0001c44c0001c4b40001c52c0001c59c0001c62c0001c7000001c8580001
c9b40001cb080001cc8c0001cd5c0001ce700001ced00001d05c0001d140
0001d2180001d3580001d43c0001d5680001d6c00001d8d80001d9cc0001
db400001dca00001dd040001ddc00001de640001debc0001def00001df1c
0001df4c0001df780001dfac0001dfd40001e0000001e02c0001e0e80001
e18c0001e1d00001e2100001e2ac0001e3800001e3f40001e4800001e518
0001e5f00001e6640001e6d00001e7740001e8180001e8580001e8980001
e8dc0001e9200001e94c0001e9b40001ea1c0001ea880001eb400001eba0
0001ebd00001ec1c0001ec780001ecbc0001ed000001ed400001ed800001
ee900001ef340001ef800001efc00001f0000001f0540001f0a80001f108
0001f1680001f1d80001f2180001f27c0001f2c80001f3980001f3d80001
f3d80001f3d80001f3d80001f3d80001f3d80001f4680001f5740001f5ec
0001f64c0001f6dc0001f6f40001f7940001f8d40001f9680001f9e00001
fa580001fa580001fa580001fa580001fa580001fa580001fa580001fc04
0001fd180001fdd00001fe940002001c0002006c00020204000203780002
03e00002041c0002045c0002050c000205b8000206780002078c000207d8
00020894000209c400020a7c00020b4000020cc800020d1800020eb00002
102000021088000210c400021104000211b00002125c000212c8000213c4
000214000002143c0002149c0002151c0002168400021764000217dc0002
18d00002194000021a1800021bf800021c3800021cb400021ccc00021cdc
00021dd000021f1400021ffc00022130000221c400022304000223800002
240000022490000225f0000226840002272c00022888000229e400022a40
00022aa400022bec00022c0400022c1c00022c3400022c4c00022c640002
2c7c00022c9400022cac00022cc400022cdc00022cf400022d0c00022d24
00022d3c00022d5800022d7400022d8c00022da400022dbc00022dd40002
2dec00022e0400022e1c00022e3400022e4c00022e6400022e7c00022e94
00022eac00022ec400022edc00022ef400022f0c00022f2400022f3c0002
2f5400022f6c00022f8400022f9c00022fb400022fcc00022fe400022ffc
000230140002302c000230440002305c000230740002308c000230a40002
30bc000230d4000230ec000231040002311c000231340002314c00023164
0002317c00023194000231ac000231c4000231dc000231f40002320c0002
32240002323c000232540002326c000232840002329c000232b4000232cc
000232e4000232fc000233140002332c000233440002335c000233740002
338c000233a4000233bc000233d4000233ec000234040002341c00023434
0002344c000234640002347c00023494000234ac000234c4000234dc0002
34f40002350c000235240002353c000235540002356c000235840002359c
000235b4000235cc000235e4000235fc000236140002362c000236440002
365c000236740002368c000236a4000236c4000236e40002370400023724
000237440002376400023784000237a4000237c4000237e4000238040002
3824000238440002386400023888000238ac000238cc000238ec0002390c
0002392c0002394c0002396c0002398c000239ac000239cc000239ec0002
3a0c00023a2c00023a4c00023a6c00023a8c00023aac00023acc00023aec
00023b0c00023b2c00023b4c00023b6c00023b8c00023bac00023bcc0002
3bec00023c0c00023c2c00023c4c00023c6c00023c8c00023cac00023cc4
00023cdc00023cfc00023d1400023d3400023d4c00023d6c00023d840002
3d9c00023db400023dcc00023de400023e0400023e1c00023e3c00023e54
00023e7400023e8c00023ea400023ebc00023ed400023eec00023f040002
3f1c00023f3400023f4c00023f6400023f7c00023f9400023fac00023fc4
00023fdc00023ff40002400c000240240002403c000240540002406c0002
40840002409c000240b4000240cc000240e4000240fc0002411400024134
0002414c0002416c00024184000241a4000241bc000241d4000241ec0002
42040002421c000242340002424c000242640002427c00024294000242ac
000242c4000242dc000242f40002430c000243240002433c000243540002
436c000243840002439c00024478000244c4000245180002459000024600
0002461800024638000246580002467800024698000246b8000246d80002
46f80002471800024738000247580002477800024798000247b8000247d8
000247f80002481800024838000248580002487800024898000248b80002
48d8000248f80002491800024938000249580002497800024998000249b8
000249d8000249f800024a1800024a3800024a5800024a7800024a980002
4ab800024ad800024af800024b1800024b3800024b5800024b7800024b98
00024bb800024bd800024bf800024c1800024c3800024c5800024c780002
4c9800024cb000024cc800024ce000024cf800024d1000024d2800024d40
00024d5800024d7000024d8800024da000024db800024dd000024de80002
4e0000024e1800024e3000024e4800024e6800024e8000024e9800024eb0
00024ec800024ee000024ef800024f1000024f2800024f4800024f600002
4f7800024f9000024fa800024fc000024fd800024ff00002500800025028
00025040000250580002507000025088000250a0000250b8000250d00002
50e800025108000251200002513800025150000251680002518000025198
000253180002540000025588000255ec000256a4000257bc0002587c0002
58bc0002595c0002597400025a6000025af800025d0c00025f2c000260fc
00026358000266380002683c000269b000026ad800026bfc00026ce40002
6df800026f34000270000002707c00027118000271f400027304000273b8
00027464000275340002764c000277a800027900000279cc00027a1c0002
7a6c00027afc00027bb400027c5000027d0400027d7400027dd400027f0c
0002804000028278000284fc000285e4000286b80002874c000287e00002
893000028a7400028adc00028b4400028c0c00028cd800028d7800028e28
00028eb800028f5400028fb4000290140002906c000290c4000291800002
922800029300000293c400029460000294e8000295800002962800029704
000297bc000298d4000299d800029b8c00029d2c00029dc400029e740002
9f1c00029fc40002a1b40002a3480002a4dc0002a6600002a7cc0002a934
0002aa980002ab080002ab780002ac080002ac940002ad780002aed80002
b0480002b0f00002b1980002b1cc0002b2a80002b3780002b3c00002b434
0002b5880002b6c40002b7440002b7c80002b8240002b8940002b9080002
b9e40002badc0002bbd40002bcac0002bdc40002be800002bf400002bff8
0002c0280002c0880002c0d40002c1200002c14c0002c1e00002c2400002
c2a80002c2ec0002c3b00002c4580002c4dc0002c53c0002c5e40002c6c8
0002c7500002c7d80002c8840002c9240002c9f40002cab80002cbac0002
cccc0002cd9c0002ce640002cf200002d0d40002d1ac0002d2a80002d3a8
0002d48c0002d5940002d6a00002d7f80002d9ac0002da980002dbf00002
dcb80002dd800002de540002df0c0002df480002df840002dfc00002dff8
0002e0440002e0800002e0c40002e10c0002e1640002e1bc0002e2140002
e2580002e2b80002e3400002e46c0002e59c0002e69c0002e71c0002e800
0002e9880002eaa00002eae40002ec240002ed640002eda00002ee640002
ee9c0002eed80002ef900002f04c0002f0940002f1680002f2840002f31c
0002f3b40002f4240002f4500002f47c0002f5280002f5500002f5940002
f5d80002f6940002f6dc0002f7580002f7d40002f8340002f8880002f8b4
0002f8e00002fa380002fb880002fc600002fd300002fe380002fed00002
ff380002ffc40003014000030250000302b40003030000030334000303c4
00030554000305b400030600000306ec000307e0000308cc000309c00003
0bc400030ce400030e0400030f4800031068000312000003121800031230
00031248000312b40003134c00031398000314140003147c000315140003
15f0000317f800031a1400031ba400031bd000031bfc00031c3000031c64
00031ca000031cdc00031d1800031d5400031d9000031dcc00031e080003
1e4400031e7000031f4c00031f9c0003210400032198000322ac0003230c
000323a0000324f40003266c000327b00003290000032a2c00032ac80003
2bcc00032d3400032fd40003321800033358000334980003354400033718
00033890000338e80003394400033a0c00033af400033bbc00033ca40003
3d6800033e4c00033f1000033ff40003403c00034088000340d400034120
00034168000341b80003420c00034260000342b400034304000343400003
438c000343d80003442800034468000344c0000345040003454c00034590
000346c400034874000348c80003492800034988000349c4000349fc0003
4a3800034a7000034abc00034b0800034b9000034c8400034d7800034d90
00034da800034e9000034fc0000350f000035250000353b0000354c40003
5668000357780003589000035924000359bc00035adc00035bbc00035d04
00035d5400035dcc00035ed800035fa4000360b800036194000362bc0003
63640003649400036534000365d4000366a0000367a4000367e800036980
000369e000036b6000036c3800036d6400036eac00036fd4000370ec0003
720c000372f800037498000376280003768c000376dc0003776c0003780c
00037850000379e800037a4800037bc400037c2800037d4400037de00003
7e3800037eb8000380340003815000038304000384700003857400038718
0003882c000388cc000389c400038a3400038b0000038b5800038c0c0003
8c7400038d3000038d8800038e4000038f8800038ff000039148000392b0
00039320000394440003949c00039540000396b40003974c000398440003
99c800039a2000039c0c00039d8800039dcc00039e0c00039e5000039f28
0003a08c0003a2400003a3b00003a5e00003a6940003a8800003aac00003
acb40003adc40003aef00003b0f80003b2400003b3a40003b58c0003b714
0003b8500003ba0c0003bb040003bdf80003bfbc0003c2180003c2e80003
c47c0003c54c0003c6d40003c85c0003ca500003cb780003cda40003cfa8
0003d0d80003d2bc0003d4e80003d73c0003d8c80003d9e40003dba80003
dd4c0003df900003e01c000100000892007a0009006c0008000200100010
0066000007e80b970004000100000033026a000100000000000000500000
000100000000000100090050000100000000000200040059000100000000
00030023005d0001000000000004000e008000010000000000050007008e
0001000000000006000e00950001000000000007003200a3000100000000
0012000e00d50001000000000100000900e30001000000000101001000ec
0001000000000102000e00fc00010000000001030014010a000100000000
01040012011e0001000000000105000901300001000000010004000e0139
0001000000010007002f01470001000000020004000e0176000100000002
0007003c01840001000000030004001301c00001000000030007003001d3
0001000000040004000d02030001000000040007003a0210000100000005
0004000d024a00010000000500070036025700010000000600040011028d
00010000000600070030029e0001000000070007003c02ce000100000008
00040013030a00010000000900040011031d00010000000d00040010032e
00010004000c0004000e033e00010004001f00040010034c00010005000a
0004000d035c00030001040400020004036900030001040600020006036d
00030001040700020008037300030001040900020008037b00030001040b
00020016038300030001040c0002000803990003000104100002001203a1
0003000104110002000803b30003000104120002000603bb000300010413
0002000603c10003000104140002000603c70003000104160002000e03cd
0003000104190002000c03db00030001041d0002000603e7000300010804
0002000403ed000300010c010002000803f1000300010c0a0002000e03f9
a920313939302d32303036204170706c6520436f6d707574657220496e63
2e20a92031393831204c696e6f7479706520414720a920313939302d3931
205479706520536f6c7574696f6e7320496e632e48656c76657469636142
6f6c6448656c76657469636120426f6c643b20382e30643365313b203230
31322d30332d323748656c76657469636120426f6c64382e306433653148
656c7665746963612d426f6c6448656c7665746963612069732061207265
67697374657265642074726164656d61726b206f66204c696e6f74797065
20414748656c76657469636120426f6c644c6967617475726573436f6d6d
6f6e204c69676174757265734e756d6265722053706163696e6750726f70
6f7274696f6e616c204e756d626572734d6f6e6f737061636564204e756d
626572734e6f204368616e676548656c766574696361204772617348656c
7665746963612065737420756e65206d617271756520648e706f738e6520
6465204c696e6f7479706520414748656c76657469636120466574744865
6c766574696361206973742065696e2065696e676574726167656e657320
576172656e7a65696368656e20646572204c696e6f747970652041474865
6c7665746963612067726173736574746f48656c766574696361208f2075
6e206d61726368696f207265676973747261746f206469204c696e6f7479
706520414748656c7665746963612076657448656c766574696361206973
2065656e20676572656769737472656572642068616e64656c736d65726b
2076616e204c696e6f7479706520414748656c7665746963612046657448
656c766574696361208a7220657474207265676973747265726174207661
72756d8a726b6520669a72204c696e6f7479706520414748656c76657469
6361204e65677269746148656c76657469636120657320756e61206d6172
63612072656769737472616461206465204c696e6f747970652041474865
6c7665746963612065722065742072656769737472657265742076617265
6dbe726b652074696c68bf72656e6465204c696e6f747970652041474865
6c7665746963612043617272656761646f48656c7665746963612048616c
7666657448656c766574696361206c696861766148656c76657469636120
c3d3e8cf48656c76657469636120c8d1ccd3cae748656c76657469636120
f2e1e47c979ad400460065006400460065007400740042006f006c006400
500075006f006c0069006c00690068006100760061004700720061007300
470072006100730073006500740074006f30dc30fc30eb30c9bcfcb4dccc
b4005600650074004600650074004e00650067007200690074006f041604
380440043d044b04390046006500747c974f5306390631064a0636004e00
6500670072006900740061000000b8005c2bb800522bb800482bb8003e2b
b800342bb8002a2bb10840ba019000145df44009011f04000b1fd819eebe
012e000d00e6012e000d00b0012e400c0d000963833c1f63838348294109
014b00370401001f014500240401001f0144b224ab1fb8013eb224231fb8
013db224231fb80102b2371d1fb80100400937241ffd37621ffc37b80801
401b1ff824931ff724931ff6243f1ff524311fd1371d1fd037471fcd41b8
0801b21fcb2ab80201b21fca24b80401400f1fc824811fb537291fb4373b
1fb227b80401b21fb141b80401b61fa437811fa384b80401b21fa22ab804
01b21fa124b8019ab21fa024b8019ab61f9f243f1f9683b80401b21f9527
b80401b21f8227b80401b21f7084b80801b21f6fb3b80801b21f6eb3b802
abb61f6d24261f6224b80101400b1f5d246c1f5c24391f5441b80125b21f
4d27b80401b61f4c27cd1f4b41b80401b21f4024b8019ab21f3683b80401
b21f3524b80201b21f3224b8019ab61f2c24bb1f2884b80801b21f2241b8
040140131f20244c1f1d24261f2ca0961f2c245e1f412ab801a8b748282a
2448279636b801f4b21f4d27b801f4b21f9527b801f4b21f6e27b801f4b2
1f6327bd01a700470029015a00250199b348296fb3b80190b21f83b3b801
9ab348283725b803e840121fb327482784274827362748272527482755b8
0154402c0797076407550733072b072907260721071e071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b806008516763f183f123e113946443e113946443e113946
443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b18
2b2b2b2b2b2b2b2b2b2b2b18011db0964b5358b0aa1d59b0324b5358b0ff
1d592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b4b5279b35279eb5645652345
6023456560234560b08b766818b080622020b1eb794565234520b0032660
62636820b003266165b079236544b0eb234420b152564565234520b00326
6062636820b003266165b056236544b0522344b10056455458b156406544
b25240524523614459b35045484e456523456023456560234560b0897668
18b080622020b148454565234520b003266062636820b003266165b04523
6544b048234420b1504e4565234520b003266062636820b003266165b04e
236544b0502344b1004e455458b14e406544b250405045236144592b2b45
6953420000>
[16317 16289 16381 16265 16305 16357 16361 16245 16381 16297 16185 16309 16221
16013 16325 9745 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Helvetica-Bold AddT42Char 
1 2232 11 <00010059fe63029105da0013005db8005c2bba00080012005f2b411b0006
000800160008002600080036000800460008005600080066000800760008
008600080096000800a6000800b6000800c60008000d5d410500d5000800
e5000800025d00b800022fb8000c2f303113363733070607061510131617
23272627021110ce4f98d73d7e3120593484d347454e8b044eb8d470e7fd
a6c4fecefeff98ee6158ae0137012d011200>Helvetica-Bold AddT42Char 
1 2400 12 <00010015fe63024d05da001300344018121109131517171a120d08130903
6e0dfa09191415d52142b901ac00182b2bf4f4fd11393912394e456544e6
4d003f3f3130001712111003060f0123363712113427262f013301894f75
8b4e4547d384345920317e3dd70506b8fef2feeefed3fec9ae5861ee9801
010132c4a6fde770>Helvetica-Bold AddT42Char 
1 2916 15 <00010076fea501aa012a000d003b401f00ee0a08040d710528040a0f1717
1a090a035a06700004190e0f70217f3c182b2b4ef43c4dfded39394e4565
44e64d003fedf4113939ed3130173e0137231121111406070e0123765651
06ad01342431358f1bed187065012afefe4494363a3b>Helvetica-Bold AddT42Char 
1 3088 17 <00010080000001af012a0003002640130128030a0517171a017000190405
70217f3c182b2b4ef44dfd4e456544e6003f4ded31301321112180012ffe
d1012afed6000000>Helvetica-Bold AddT42Char 
1 3276 19 <00020040ffdc042805b4000b00170075405917012707d70f03380d370f37
1338154b0d440f44134f159815b713ba15c613ca150d1700530676007606
040606a606c80f03084017050240110d05830e0b830ea710143014027014
80149014a014b014d014f01407141947184e1076c418d45d71e44ded10ed
003fed3fed31300072715d01720012333212351026232206110012111002
212002111012210163527f7f4f4f7f7f5201e6dfdffeebfeebdfdf011501
cdfef70109fa0106fcfcfefa02edfe7afe99fe99fe7c0184016701670186
0000>Helvetica-Bold AddT42Char 
1 3592 21 <000100400000042105b1002100884061071401041b071c6f1203041d1901
1618660160046206671a97019502981aa6010b001910193419351c041c19
0402041e0f0a4013051ea1210c1e1c04030e07b316731f01020e630f7c1f
a7102101702180219021a021b021d021f02107212347224e1076c418d45d
71e44df4ed393910f4ed111739003ffd3feddd111739015d31305d710071
36373637363736353426232207060721363736213204151407060f010e01
07211521443f3de3c53a59665f822f1b05feeb073c720123e60110603f90
726b4f1b0279fc1f9c8191a28d3d5f715c7a61387ab972d9ffd2a17d5366
514c442dfb000000>Helvetica-Bold AddT42Char 
1 3840 22 <00010036ffdc042105b100300076b609200198220130b80108403c2c171e
25250bf66f0cdf0c020c0c2c13401e0504402c0d252507106f210783290c
8c1663177c006329a71030303002a030b030d030f03004303247314e1076
c418d45d71e44dedf4fde610edd4ed12392f003fed3fed12392f5dfd393d
2f1810cd10ed3130005d0171011417163332363534272623353637363534
262322061721363736373e01333216151407060732171615140223202726
27014e1c3489547d74428e8b375f6158655f02fef60421234b389a70d0ff
4c303427496dfffafecc783f0701bd573969736c8f301bcc02192a805368
806b6c6155483336d7b5805837144365afb8fee9c96bad00>Helvetica-Bold AddT42Char 
1 4512 25 <00020040ffda042a05b8000c002c007540494c0d4c2c5c0d5c2c04372657
13022c110a0215084018181e27114029052002401e0d0a0c0d6f2c7c056f
1b15e40c6f1ba71022302202702280229022a022b022d022f02207222e47
2d4e1076c4184dd45d714ee44dfde510edf4ed1139003fed393fed391239
2fed39113910cd3130015d005d0016333236353426232207061501342726
23220706073e013332121514022320272611343736373e0133321617015e
7e615f6d7c5a49385401911b2e5d8b3b200c358c5ac1f7f2fffeee82650e
19483ec98ccaf00f0156948f727f872c41910272232a449c56a83f3afefa
cccbfecae5b3011ba668b97b6980cfac>Helvetica-Bold AddT42Char 
1 4768 26 <00010034000004380597000e003e402416021503f70503000ca10d04070c
0b00068307c60d7300a8100c300c02d00c010c10470f4e1076c418d45d71
e44df4f4ed1139003f3ffd393130015d0106020706021521121312372113
21043840e44d3d62fed80df39d6afd2d04040004b83ffebdac87fe7a7d01
8601a50105670100>Helvetica-Bold AddT42Char 
1 5616 31 <00010017ffde04b1045e0006006340340304030204221205050603020304
02221201010003000504020301040605000201bb060403bb050b011a0800
190708aa216747182b2b4ee410e619003f184dfd3939fd39391139390111
173c123904872e2b087d10c504872e182b087d10c5313013011109011101
17049afcb70349fb66029e01c0fee9fed7fed6feea01c000>Helvetica-Bold AddT42Char 
1 5760 32 <0002004900b10484038b00030007002c4018032202072206070204900001
001a090219080965216a46182b2b4ee410f65d4d3c103c002ffddefd3130
01112111011121110484fbc5043bfbc5038bfef90107fe2dfef90107>Helvetica-Bold AddT42Char 
1 6684 36 <00030034000005a805c20002000a000b00dc406b6802012705280a380637
094806680a780a880488069a0395049806aa03a504a806b801b80ac801c8
0ad803d80a150107060602000809090200080a01070502140a0a25120909
02140505251206060207082a010000020a0b04030206090a0305080b0d17
171a0b0a040605b80114b2090302b80114b60a190c657572182b764e10f4
184dfd3939fd39391139194e456544e6182f003f173c4d3f3c3c1239392f
3cfd3c05872e2b7d104b5158b004c01bb004c459872e182b7d104b5158b0
03c01bb003c4591112393912393987103c3c07103c3c3130015d005d0121
0b012101210321032101022f0176b8ab015c020afeb25ffde166febe02ba
022d02440151fa3e012ffed105c2>Helvetica-Bold AddT42Char 
1 8596 47 <0001009c000004aa05c200050029400f000202410508031a070225001906
07b8011cb32152ab182b2b4ef44dfd4e10e6003f4dfd3f31301321112111
219c013402dafbf205c2fb47fef70000>Helvetica-Bold AddT42Char 
1 9736 53 <000200a30000057105c2000a002a0058402a20231b1815052713262a0101
1d002a2902271d081d2022130617220637171b57101a2c00272528192b2c
b8011eb3215256182b2b4ef44dfd3c4e10f64de4c4fdc411123911393900
3f3c3fed12392ffd39111739313001112132373635342726233616171e01
151406071e011d011417161715212627262f012e0123211121112101d001
5d68345c593264dba73a30386a7a6655080c2cfead0e060c0102026388fe
c2fed302d304c2fe74182a7c862e1afd464438885769cb2a29979b636524
391b25311e3e41898d5efdbe05c2>Helvetica-Bold AddT42Char 
1 9960 54 <00020055ffda050e05ef002e002f00a3406a080f07210726190b190f1721
1726660c650d6922e52d0b29102915281a26273a15381ab915ca15dc15d2
2ceb13eb16f913fa16f92d0f0e00110b22181f25170825220e0b04182ed4
2b18d41c412f140304412b092f18962f11174f0896281a311f3611570036
2e193031b8011eb321ad56182b2b4ef44dedf4ed4e10f64dedf41139ed2f
003fed3f3ceded10ed11173901111239111239391112393130015d005d01
16171633323736353427262f012627263534002132041721262726232206
151417161f011617161514002120003501017b0e294bb66d44814040899c
e6589501200117e9014908fed8086c486b778e462d93fea75584fecbfee6
fee0feb6025101c765325b182e7d4928271e23343d66d9c60106f7eb8538
2560564f271a233d284368c5cafef50107e60428>Helvetica-Bold AddT42Char 
1 10280 55 <00010021000004cb05c200070038400c01062a070204080917171a00b801
58b2022505b80158400906190809c0217572182b2b4ef44df4fdfd4e4565
44e64d003f3ffd3c3130011121112111211104cbfe47fecafe4505c2fefb
fb4304bd0105>Helvetica-Bold AddT42Char 
1 10512 57 <0001002f0000053b05c20006007740213204042512050605320101251200
0600060305040100020302080817171a020001b80111b2030506b80111b6
041907657572182b764e10f4184dfd3939fd3939194e456544e618003f3c
3f3c3c3c123905874d2e2b7d104b5158b002c01bb002c459872e182b7d10
4b5158b003c01bb003c45931300121012101210103fb0140fe09feddfe0e
0149014005c2fa3e05c2fba10000>Helvetica-Bold AddT42Char 
1 12460 68 <0003003bffde0438045f000e0039003a008f404f3b0235367901890104d8
1e0126f3e62ae7230e0d05020005131a2b24232204262e262e2a0d050200
041b0b221b162c3a1f072a0a0b2c320b3a134d004d2e3a352a3e261a3c1a
4d1b2d084d35193b3cbc01190021004801ae00182b2b4ef44dedf4ed4e10
f64de41139cde5e52f003fed3f3f3cfdcd39111217391239390111121739
111217392b3130015d005d010e010f010607061514163332363727363736
35342623220706072136373621321716151114171e011715212e01270607
0623222635343736371302de1b3730405a2742513a5c9b03ad4f223d5d5a
652a1e0afeed0947710113b38b8b02031c1cfeca0d0a033b4d5c7494c19b
55a57002121115090c1017275249416c8fef0a0f1a37433332253f8f5c90
4747c5fe0c344a38280d2a213a25402d35a99bc95a311501d4000000>Helvetica-Bold AddT42Char 
1 13364 72 <0003002fffdc043a045f00060021002200ab4049460887149701990a0406
0109050610051a4b05461049208601850f871f0a03160317131613174808
4c164c17491a5c165c175a1adc01db04e91de720f720104a014610880583
100402b8019540334f0e5f0e6f0e030e0e1b062422210717122c1b0b1603
02220336177b221e600c800c020c1a24021f0e951e1923249821484e182b
2b4ef44dfde44e10f65d4d1139e4ed2f111239003fedcd3f3ced12392f5d
fd313000715d01715d000607212e01233616171617160721161716333237
3637210607062322001110003b0101d06d0e01bb077b5b88da4740130b02
fd1606613b5358371e1701230b5a8cfcd0fec2011fe51403747c6a7175eb
666e61804b8da44229321b3061649f010c012e011b012e000000>Helvetica-Bold AddT42Char 
1 13864 74 <00030042fe42045e045f000d002f0030005a40108a1e0111120524302f07
1206250d2429b8013f40201c202c180f30021f121f2527302c131a321c84
1b2d09362c19313298214845182b2b4ef44dedf4ed4e10f64d1139fdf4e4
2f003ffdcd3fed393f3f3ced11393130015d243635342623220706151417
1633121716173521111407062122242721161716333237363d0106070623
2202353412333702bd8a836e96391e203a960b3d68400115477afea6d1fe
f80e01360c1b2e6d9a3422292f5588d2fbf2de5bea97a59ba28d4b6e5f4a
8a0372192b739dfbf6d36bb8a4a332162767429c464623410127fcf3014b
03000000>Helvetica-Bold AddT42Char 
1 14108 75 <000100870000045e05bd0017003f402505022702580e680e04141712000c
24170710070a0836051a1913102711191819be215045182b2b4ef44dfd3c
4e10f64ded003f3c3fed3f11393130015d0016171e011511211134272623
22061511211121113e01330343a5352d14fedd1e276d7175fee4011c3ea3
5a045e46483d8192fd80029758364c978cfdb205bdfdf75f4b000000>Helvetica-Bold AddT42Char 
1 14256 76 <00020089000001aa05cb00030007003b40224c004c015c005c010401b102
000406070a0917171a0006270107190809b2215045182b2b4ef43c4dfd3c
4e456544e6003f3f3f4ded3130005d012111210121112101aafedf0121fe
df0121fedf04c40107fe77fbbe00>Helvetica-Bold AddT42Char 
1 14496 78 <000100820000046d05bd000b00f040b240024605d402e502040f080a0955
0589058f088e09c505ca08d907df08dc090b080618062f032f0428052d06
370338064c0348065d0359066a0369067804880497039507a903af04aa06
a807b603b804c603c9041a4b064a07560588048308c405c808d903d904dd
07da080b050909040505060b0b040802070904050706050a02200303cb12
04040909040302040602090a0403060a070a0000061a0d010a27000b200b
300b400b040b190c0d872150e3182b2b4efc5d4dfd3c4e10ee003f3f3c3f
3c12393901111739874d2e2b047d104b51587a59c4001239011139390f87
10083c07103c313001715d00715d13211101210901210107112182011801
630161fe83018cfea8fefb76fee805bdfce6019afe5ffd6401d27bfea900
>Helvetica-Bold AddT42Char 
1 14796 79 <0001008b000001a805c20003002540130200010a0517171a002701190405
b2215045182b2b4ef44dfd4e456544e6003f3f31302901112101a8fee301
1d05c200>Helvetica-Bold AddT42Char 
1 14860 80 <000100800000069c045a002d00c2414d0037000200010006000200160002
002500020069000f006a001a0079000f007a001a0089000f008a001a0099
000f0099001a00a9001a00b9001a00e7000b000e0002002100290003001f
000d0024002d00180024002d00250007001f0006001d00120008000a002f
00170017001a000600360009010f00290011004d0014010f001e0020001d
0027001e0019002e002f012300210050004500182b2b4ef44dfdc410f4ed
39f4fd4e456544e6003f3c3c3f3f3c4ded10ed1117393130015d005d0016
171617161503211134272623220706151121113427262322070615112111
2115363736333217161736373633058f8c392e100a02fedc142666762d17
fee11424697a2a17fedf0115352f53847d4d3e203853586c045a38463953
376afd5102b63e284c623449fd770289612c4f4f2d59fd7004409f552440
373350602d2d>Helvetica-Bold AddT42Char 
1 15196 81 <0002008700000461045f00160017004b402d0501150125013701580b680b
060112100609241716070e040a170536170f021a19110e270f191819be21
5045182b2b4ef44dfdc44e10f64d1139ed2f003f3c3f3ced3f3939313001
5d001615112111342726232207061511211121153637363327038ad7fedc
172a7691361cfee401133731588769045cb1cdfd220297562e547b4165fd
b204409f542542030000>Helvetica-Bold AddT42Char 
1 15356 82 <00030042ffda049c0465000b00170018004d4028170301080c880c881003
170d180f660d0305241814070b240e0b1818080236171a1a08361119191a
b80176b321484e182b2b4ef44ded4e10f64ded11392f003fed3f3ced3130
017200727124363534262322061514163324002120003534002120001501
02eb86867d7d87877d022efeecfee7fee7feec0114011901190114fdd3c9
b2a4a4b1b1a4a4b266feab0155f0ec015afea6ec0240>Helvetica-Bold AddT42Char 
1 15528 83 <0002007dfe53049a045a000d0020004a40291713080a1c1a022420071a06
0a24130b190e080d180d36101a22061f1b1f1827191921229821504e182b
2b4ef44dfdf4e44e10f64ded111239003f3fed3f3fed1139113912393130
002623220706151417163332363512001110002322272627112111211536
373633037473819b3a1e653c52777d1d0109fefdcc82562f2dfee601112e
345f83029fc2934e78be4d2db8990239fee6feeffee0fed2412445fdc805
efa1472949000000>Helvetica-Bold AddT42Char 
1 15900 85 <00010082000002fb045c0013004ab900030147b3020f0d06b80147401913
070d060c0a200230024002031517171a020e0b270c191415b80164b32150
66182b2b4ef44dfdc4d44e456544e64d5d003f3f3fed1139d4ed31300016
17112e01232207061511211121153637363302dd0b131b2a0dac3b21fee1
011042315080045c0101fedc0302703f83fdf70442be6d2843000000>Helvetica-Bold AddT42Char 
2 0 87 <00010015ffea027805680016004ab6102c0f1f0c2c11ba01710004015c40
1607005c0601061817171a0f06f4040927009203151718b8010eb3216066
182b2bd43ce4fd3cf43c4e456544ee4d003f3cfd3ced3ffdf4e431301335
3311211133152311141633323637150706272635111598011ab1b122570d
1d0e87ca4a30036dcb0130fed0cbfdc043210101d505074d3166029f>Helvetica-Bold AddT42Char 
2 960 92 <00020015fe470450045f0013001400d94070270a560a660a950aa40ad30a
06050a0106061c07110d2d07200d3d07310d4b075d07580b680b7707790d
0d170f360d8709880b980bb80b0614140c080d02200c0c27120b0b0a0607
021f0808271209090a0607020d0a150c0b0908060709001f022c131f100f
14071617171a0e0d0b0cb8010cb30607090ab8010c400c13920819651516
a9216066182b2b764ef44de418fc393939fc393939194e456544e618003f
3f4de4fde43f3f3c3c3c12393911123901872e2b057d104b52787ac53387
2e182b7d104b52787ac5011112392f3130015d7100715d1f011636373e01
2701211b01210102062322262701b1242a4c1a192b04fe70013deee1012f
fe8a6c7ebd262e2e0182d102020a12116c0c0472fcdc0324fbd0feca9501
03061400>Helvetica-Bold AddT42Char 
2 1684 95 <0001006a0000017105d00003002540130300020a0517171a012202190405
cd216c3c182b2b4ef44dfd4e456544e6003f3f3130011121110171fef905
d0fa3005d0000000>Helvetica-Bold AddT42Char 
1 0 0 <0002009a0000053d05c200030007003e402105061d02010004071d03000a
05041d0303021a0906071d0100190809aa216c3c182b2b4ef43c4dfd3c4e
10f63c4d10fd3c003f3cfd3c3f3cfd3c313033112111271121119a04a3b8
fccd05c2fa3eb80452fbae000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/comma 15 def
/period 17 def
/zero 19 def
/two 21 def
/three 22 def
/six 25 def
/seven 26 def
/less 31 def
/equal 32 def
/A 36 def
/L 47 def
/R 53 def
/S 54 def
/T 55 def
/V 57 def
/a 68 def
/e 72 def
/g 74 def
/h 75 def
/i 76 def
/k 78 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/t 87 def
/y 92 def
/bar 95 def
end
Helvetica-Bold /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 55 /seven put
dup 60 /less put
dup 61 /equal put
dup 65 /A put
dup 76 /L put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 121 /y put
dup 124 /bar put
pop
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold /Helvetica-Bold findfont ct_VMDictPut/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /.notdef /two /three 2{/.notdef}rp /six /seven 4{/.notdef}rp /less /equal 3{/.notdef}rp /A 10{/.notdef}rp /L 5{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf304.292 419.56 mo(ATLAS \(pp at 2.76 TeV, |y|<0.3\) antikt algorithm R=0.6)[-3.79529 -3.57275 -3.57275 -4.20624 -3.8353 -1.67224 -1.92905 -3.57272 -3.51569 -1.67224 -3.25891 -1.92902 -1.67227 -3.25888 -1.61517 -3.25888 -3.25891 -1.61517 -3.22461 -3.25888 -3.36157 -1.67227 -1.61517 -1.68365 -3.25888 -1.62659 -3.4187 -3.25888 -1.6152 -3.25888 -1.92905 -1.67224 -3.25888 -3.51569 -1.98611 -1.61517 -3.25888 -1.92902 -1.67227 -3.25888 -1.61517 -3.57275 -3.57272 -2.24866 -1.61517 -1.98611 -3.57272 -5.10233 -1.61517 -4.20624 -3.36157 -3.25891 -1.67224 0 ]ysh305.651 442.984 mo
305.651 437.277 li
299.944 437.277 li
299.944 442.984 li
cp
.897551 .783413 0 0 cmyk
f
0 0 0 1 cmyk
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf315.706 419.56 mo(ATLAS \(pp at 7 TeV, |y|<0.3\) antikt algorithm R=0.6)[-3.79529 -3.57275 -3.51569 -4.20624 -3.89236 -1.61517 -1.92902 -3.57275 -3.57275 -1.61517 -3.25891 -1.98608 -1.6152 -3.25888 -1.61517 -3.22461 -3.25888 -3.36157 -1.67227 -1.61517 -1.68365 -3.25888 -1.62659 -3.4187 -3.25888 -1.6152 -3.25888 -1.92905 -1.67224 -3.25888 -3.51569 -1.98611 -1.61517 -3.25888 -1.92905 -1.67224 -3.25888 -1.61517 -3.57275 -3.57275 -2.24863 -1.61517 -1.98611 -3.57275 -5.10233 -1.61514 -4.20624 -3.3616 -3.25891 -1.67224 0 ]ysh317.337 440.131 mo
311.63 437.277 li
311.63 442.984 li
cp
0 .996857 1 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 3488 20 <0001008e0000030705aa000d0032401e29053905020d01cc09040c0c0bb3
000938200c300c600cb00c040c0f470e1076c418d45de4cced003f3ff4cd
3130005d13353637363736373635331121118e8736563625130bedfedc03
e8c2060c133927412713fa5603e8>Helvetica-Bold AddT42Char 
1 5140 28 <0002003dffd6042d05b6001c002a005a40361e231519402a2a0a23400205
0e11400a0d1e0e15e42083060e6f0d7c276f06a8101c301c02801c901ca0
1cb01cd01cf01c061c2c472b4e1076c418d45d71e44dedf4ed4d10fde512
39003ffdc53fed12392fed39123931301200332013161110070221222427
211e0133323736370607062322243504373635342623220706151416333d
010dd7014b7b464380feaaa3fefc13011c0a58498d391f08272c5075adfe
f4023234617364493452696d04950121fedba6fef1fef9b0feb1c1b94050
9c56a5311a30efe1e8223e997b902940998181000000>Helvetica-Bold AddT42Char 
1 8672 48 <000100970000062805c2001200c040900900070808090511160819092900
27082b0924112a12370735083c0938126a00651179007511890086119a00
9611a800a611c700f708f8091c05080a09160818090407121a071a0a1712
220023112f123d073f0a3f127a12b909b612c7120e0f070f0a020a0f1211
090800050e070203120a07030e1100020e0803081417171a020403270212
0f0d0e270f19135279182b4e10f44dfd3c1910dcdc18fd3c104e456544e6
003f3c3c3f3c121739011112391217391139313000715d01715d01211121
113436350121011416151121112101046d01bbfee102fee9fed5feeb02fe
e101c0010c05c2fa3e03e52b9b2afb2b04d52a9b2bfc1b05c2fb7900>Helvetica-Bold AddT42Char 
1 13184 71 <0002003fffde046505c00010001d004f402ce80c010706151d0210030017
241007060a1d240a0b15031a131f061f0327041a1f1a360d191e1f982148
45182b2b4ef44ded4e10f64dfdf4e4111239003fed3f3fed3f1139113912
393130005d00161711211121350e01232200351000331236353427262322
0615141633027a9a300121feeb3d9c74bffefb0101d7b77e653e527d7577
79045c574d0208fa409761580135f201170140fc72b48fc85634bd8c97b5
>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/one 20 def
/nine 28 def
/M 48 def
/d 71 def
end
Helvetica-Bold /Encoding get
dup 49 /one put
dup 57 /nine put
dup 77 /M put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three 2{/.notdef}rp /six /seven /.notdef /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A 10{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf328.072 396.731 mo( at 1.96 TeV, 0.1<|y|<0.7\) Midpoint algorithm)[-1.61517 -3.25888 -1.92905 -1.67224 -3.25888 -1.6152 -3.25888 -3.25888 -1.67224 -3.16183 -3.25888 -3.36157 -1.67227 -1.61517 -3.25888 -1.67224 -3.25891 -3.3616 -1.68365 -3.20181 -1.68369 -3.41867 -3.20184 -1.67224 -3.25888 -1.92905 -1.67224 -4.78271 -1.61517 -3.57275 -3.57275 -3.57275 -1.61517 -3.57275 -1.92905 -1.67224 -3.25888 -1.61517 -3.57275 -3.51566 -2.30573 -1.61517 -1.92905 -3.57272 0 ]ysh328.072 400.536 mo(p)sh1.5 lw
324.267 400.536 mo
324.267 396.731 li
@
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 7196 38 <0002005cffd7057b05ef001e001f00744029570a94079408035b02591b58
1d660477018905a914b204b70ac604c70bda02db14dd18df1bf8181017b8
010b40231a08081a0c411f030312411a091f16371708371f1e071a210f37
1e1920219921ad56182b2b4ef44ded4e10f64d1139edd4ed2f003fed3f3c
ed12392f10ed3130015d005d123736212017161721262726232202151416
33323736372106002120272611015ccfb401160174ac5f07fecc1e2f54a5
a8c2cd9ea2552f1f013128feb7fefffec2b6b602900457d1b6f4898a6a36
60fef1f8f8f76a3972f1fed2cccd0165031a>Helvetica-Bold AddT42Char 
1 7424 39 <0002009c0000057b05c2000900170053403277120107082707270c58126a
127b048c038a048a12980398049812ad030d022a15092a16021508063710
1a19012515191819b80120b3215256182b2b4ef44dfd4e10f64ded003f3f
ed10ed3130015d005d011121323736353426233617161716121510070229
01112101c7011cda562f8dd2bd5b9b604d3876a0feb2fd85027b04c2fc3e
d776a3e1f1fe1e33886eff0074fedaccfeed05c20000>Helvetica-Bold AddT42Char 
1 7696 41 <0001009c000004b105c0000900374017072a040409032a00020908067601
1a0b03082509190a0bb8011cb32152ab182b2b4ef44dfd3c4e10f64de400
3f3ffd12392ffd3130132111211121112111219c0415fd1d0287fd79fece
05c0fefdfeadff00fd96>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/C 38 def
/D 39 def
/F 41 def
end
Helvetica-Bold /Encoding get
dup 67 /C put
dup 68 /D put
dup 70 /F put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three 2{/.notdef}rp /six /seven /.notdef /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /D /.notdef /F 5{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf328.072 419.56 mo(CDF \(p)[-4.12061 -4.12064 -3.48712 -1.58664 -1.90051 0 ]ysh329.024 440.131 mo
323.316 437.277 li
323.316 442.984 li
cp
f
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf339.487 325.389 mo( algorithm)[-1.58664 -3.17328 -1.58664 -3.48715 -3.48715 -2.22009 -1.58664 -1.90051 -3.48712 0 ]yshVCIYWZ+Helvetica-Bold*1 [0 -3.80489 -3.80489 0 0 0 ]msf342.341 328.243 mo(T)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf339.487 396.731 mo( at 1.96 TeV,0.1<|y|<0.7\) k)[-1.67224 -3.20181 -1.98611 -1.61517 -3.25888 -1.67227 -3.25888 -3.20181 -1.67224 -3.16183 -3.25888 -3.42438 -1.61517 -3.25888 -1.67224 -3.20181 -3.4187 -1.68365 -3.20181 -1.68369 -3.3616 -3.25888 -1.67227 -3.25888 -1.92905 -1.67224 0 ]ysh339.487 400.536 mo(p)sh334.731 400.536 mo
334.731 396.731 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf339.487 419.56 mo(CDF \(p)[-4.12061 -4.12064 -3.48712 -1.58664 -1.90051 0 ]ysh.75 lw
340.71 440.131 mo
337.856 438.228 li
335.003 440.131 li
337.856 442.033 li
cp
@
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 4104 23 <000200360000042f05a1000a000d008f40450e0c480c480d8f0cdc0c051f
0c0158077a0789079907a80705050d460d830dd60d04110d01040500030c
090d0a01080b0d0a030c0c0d0df512060607060c07040a0df70005b8014c
4009030c0d07050c03b30abb013a0001000901a9b3060f470e4e1076c418
4dd4f43ce4fd3c113939003ff43cfd3c3f393901872e2b047d10c50f0f0f
31300172715d0072710123112111213501211133211101042fa4fee9fdc2
02150140a4fe45fe950138fec80138f90370fc760272fd8e>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/four 23 def
end
Helvetica-Bold /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /.notdef /six /seven /.notdef /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /D /.notdef /F 5{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf350.902 401.487 mo( at 1.96 TeV,0<|y|<0.4\))[-1.61517 -3.25891 -1.98611 -1.61517 -3.25888 -1.61517 -3.25888 -3.25891 -1.67224 -3.1618 -3.25891 -3.36157 -1.67224 -3.25888 -3.36163 -1.68365 -3.25888 -1.62659 -3.4187 -3.25888 -1.6152 -3.25888 0 ]ysh350.902 405.292 mo(p)sh1.5 lw
347.097 405.292 mo
347.097 401.487 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf350.902 419.56 mo(D0 \(p)[-4.12061 -3.17331 -1.58664 -1.90048 0 ]ysh352.396 442.984 mo
352.396 437.277 li
346.689 440.131 li
cp
0 .996857 1 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 4896 27 <00030036ffda042505b1000b0023002f00624016681f011a0e0e08262620
2c4014050240200d1a176329b8015fb605831d0e11632fb8015f40160b83
1da81023302302a023b023d023f02304233147304e1076c418d45d71e44d
fdf4ed3910fdf4ed39003fed3fed12392fcd392ec4313001015d00163332
36353426232206152436372e01353436333216151406071e011514002322
0235001633323635342623220615015e6f62626f71606071fed86f6b693f
eed9d9ee3f696b6cfef1f3f3fa01426156575f5f575661013a76766b6f73
736f67c63246a3479edfdf9e47a33c3cc67ab7feff0101b7023364644f56
61615600>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/eight 27 def
end
Helvetica-Bold /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /.notdef /six /seven /eight /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /D /.notdef /F 5{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf362.316 350.121 mo(|<0.7\))[-1.59805 -3.3331 -3.17328 -1.58664 -3.17328 0 ]ysh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 104 /eta putdef/UniqueID 42996 def/FontBBox {-180 -293 1090 1010} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [-19 0 673 688 487 500] def/StdHW [92] def/StdVW [85] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/eta <1C60D8A8C9B7C05465AA331C02131F28DA2D7EEA3C908F53294AABD4CD965D134D164EE178F4BB6AB75528F1D7E60B34D046EE6A57925E340E483C527E7341DC4E124CCE90BD6E85937DED09796D572136719159DD20A7AFDB9DAB3EDE9D656A6C97B92FF53A542CE009912FC9D0F1325D6BAEF394E9E979FC7AD5A4D3F1B9272544A59D6E1F88D6649AC12357413672753C6637E10EB2AF4D3B8CC69C4764D2C7B69C25147CA8E032B7863EBC5B4A058F94561B> |-/.notdef <1C60D8A8C9B8707C25> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/VCIYXA+Symbol /Symbol findfont ct_VMDictPut/VCIYXA+Symbol*1 [104{/.notdef}rp /eta 151{/.notdef}rp]VCIYXA+Symbol nfVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf362.316 353.926 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf362.316 396.731 mo( at 1.8 TeV,0.1<| )[-1.61517 -3.25888 -1.92905 -1.67224 -3.25888 -1.6152 -3.25888 -1.61517 -3.22461 -3.25888 -3.36157 -1.67224 -3.25891 -1.61517 -3.25888 -3.36163 -1.68365 0 ]ysh362.316 400.536 mo(p)sh358.511 400.536 mo
358.511 396.731 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf362.316 419.56 mo(CDF \(p)[-4.12061 -4.12064 -3.48712 -1.58664 -1.90051 0 ]ysh.75 lw
364.083 442.984 mo
364.083 437.277 li
358.376 437.277 li
358.376 442.984 li
cp
.897551 .783413 0 0 cmyk
@
0 0 0 1 cmyk
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf374.682 354.877 mo(|<0.7\))[-1.59805 -3.33307 -3.17328 -1.58664 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf374.682 358.682 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf374.682 401.487 mo( at 1.8 TeV,0.1<| )[-1.61517 -3.25891 -1.92902 -1.67227 -3.25888 -1.61517 -3.25888 -1.61517 -3.22461 -3.25888 -3.3616 -1.67224 -3.25888 -1.61517 -3.25891 -3.3616 -1.68365 0 ]ysh374.682 405.292 mo(p)sh1.5 lw
370.877 405.292 mo
370.877 401.487 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf374.682 419.56 mo(D0 \(p)[-4.12061 -3.17331 -1.58664 -1.90048 0 ]ysh375.769 442.984 mo
375.769 437.277 li
370.062 437.277 li
370.062 442.984 li
cp
.274083 .836698 0 0 cmyk
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 4308 24 <00010036ffda042105970020005e40160e0f0fa1121212130d0ec2130940
17171d12a10f0420b80155401903401d0d113813120d0006831a0fc3006f
0e381aa720224721104e76c418d4e44de4fded10ed11393939e4003feded
3fed12392ffd39f4c401872e2b7d10c53130011e01333236353426232207
060725132115210336373633320415140021222427015211605c6a6f686e
34264322ff0066031ffdaf3442253e59b4010cfefefeffcffef60f01845d
6595716f990d18410c0321f2fec32b0e17f2e7c9fec4decc>Helvetica-Bold AddT42Char 
1 7796 42 <00020055ffd905af05e8002200230085404bc808db08fa1af92104290228
2139134b1859159821c619c21df80909130a1222d41f0e2a0f0f12044123
1f0312080a41170923131213120d0322000037231b22ac0f101a2507371b
192425b8017fb321ad79182b2b4ef44ded4e10f64dcdf41139ed11121739
2f3d2f182f003fed3f3f3ced12392ffd10ed11123d2f183130015d005d01
262726232202111016333236372135211123270607062320272611103736
2120001701047b23884c5db2e5f89e9bc617feab0266cc1f59477ab2fedb
bbc3c5c501440119015519fd7803f6973c21fef3fef2fef0e2b391f6fce9
b8692b4bcbcc01620166d8d8fee3d501f2000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/five 24 def
/G 42 def
end
Helvetica-Bold /Encoding get
dup 53 /five put
dup 71 /G put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /D /.notdef /F /G 4{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /.notdef /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf386.097 361.536 mo(|<0.5\))[-1.59805 -3.33307 -3.17328 -1.58664 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf386.097 365.341 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf386.097 401.487 mo( at 630 GeV, | )[-1.67227 -3.20181 -1.98611 -1.61517 -3.25888 -3.25888 -3.25888 -1.6152 -4.52591 -3.25888 -3.42438 -1.61517 -1.61517 -1.68365 0 ]ysh386.097 405.292 mo(p)sh382.292 405.292 mo
382.292 401.487 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf386.097 419.56 mo(D0 \(p)[-4.12061 -3.17331 -1.58664 -1.90048 0 ]ysh384.602 442.984 mo
380.797 442.984 380.797 437.277 384.602 437.277 cv
388.407 437.277 388.407 442.984 384.602 442.984 cv
cp
.532189 0 .123476 0 cmyk
f
0 0 0 1 cmyk
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf397.512 347.267 mo(|<0.7\))[-1.59805 -3.3331 -3.17328 -1.58664 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf397.512 351.072 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf397.512 396.731 mo( at 546 GeV,0.1<| )[-1.61517 -3.25888 -1.98611 -1.61517 -3.25888 -3.25891 -3.25888 -1.61517 -4.52591 -3.25891 -3.36157 -1.67224 -3.25888 -1.61517 -3.25891 -3.3616 -1.68369 0 ]ysh397.512 400.536 mo(p)sh393.707 400.536 mo
393.707 396.731 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf397.512 419.56 mo(CDF \(p)[-4.12061 -4.12064 -3.48712 -1.58664 -1.90051 0 ]ysh.75 lw
396.289 442.984 mo
392.484 442.984 392.484 437.277 396.289 437.277 cv
400.093 437.277 400.093 442.984 396.289 442.984 cv
cp
0 .996857 1 0 cmyk
@
0 0 0 1 cmyk
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf409.878 356.78 mo(|<0.85\))[-1.59805 -3.3331 -3.17328 -1.58664 -3.17328 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf409.878 360.585 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf409.878 396.731 mo( at 630 GeV, | )[-1.67224 -3.20181 -1.98611 -1.61517 -3.25888 -3.25891 -3.25888 -1.61517 -4.52591 -3.25891 -3.42435 -1.61517 -1.61517 -1.68365 0 ]ysh409.878 400.536 mo(p)sh1.5 lw
406.073 400.536 mo
406.073 396.731 li
@
%ADOBeginSubsetFont: Helvetica-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Helvetica-Bold gcheck setglobal} if
1 10376 56 <0002009cffda053d05c2001500160033401b160c0102064111091616150a
370d1a18023715191718c0215279182b2b4ef44ded4e10f64ded12392f00
3fed3f3c3c31301321111417163332373635112111140706212027263501
9c01392438bcbb382401394988fe81fe818949025105c2fc7698467c7c46
98038afc76eb83f0f083eb038a000000>Helvetica-Bold AddT42Char 
Helvetica-Bold /CharStrings get begin
/U 56 def
end
Helvetica-Bold /Encoding get
dup 85 /U put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/VCIYWZ+Helvetica-Bold*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two /three /four /five /six /seven /eight /nine 2{/.notdef}rp /less /equal 3{/.notdef}rp /A /.notdef /C /D /.notdef /F /G 4{/.notdef}rp /L /M 4{/.notdef}rp /R /S /T /U /V 10{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /.notdef /t 4{/.notdef}rp /y 2{/.notdef}rp /bar 131{/.notdef}rp]VCIYWZ+Helvetica-Bold nfVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf409.878 419.56 mo(UA2 \(p)[-4.12061 -4.12064 -3.17328 -1.58664 -1.90048 0 ]ysh.75 lw
410.829 442.984 mo
410.829 437.277 li
405.121 440.131 li
cp
.897551 .783413 0 0 cmyk
@
0 0 0 1 cmyk
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf421.292 356.78 mo(|<0.7\))[-1.59805 -3.3331 -3.17328 -1.58664 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf421.292 360.585 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf421.292 396.731 mo( at 630 GeV, | )[-1.67224 -3.20181 -1.98611 -1.61517 -3.25888 -3.25891 -3.25888 -1.61517 -4.52591 -3.25891 -3.42435 -1.61517 -1.61517 -1.68365 0 ]ysh421.292 400.536 mo(p)sh1.5 lw
417.487 400.536 mo
417.487 396.731 li
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf421.292 419.56 mo(UA1 \(p)[-4.12061 -4.12064 -3.17328 -1.58664 -1.90048 0 ]ysh422.515 442.984 mo
422.515 437.277 li
416.808 440.131 li
cp
f
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf432.707 358.682 mo(|=0\))[-1.59805 -3.3331 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf432.707 362.487 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf432.707 419.56 mo(R807 \(pp at 45 GeV, | )[-4.20624 -3.25888 -3.25888 -3.25891 -1.61517 -1.98611 -3.51566 -3.57275 -1.61517 -3.25891 -1.98611 -1.61517 -3.25888 -3.25888 -1.61517 -4.52594 -3.25888 -3.42435 -1.61517 -1.6152 -1.68365 0 ]ysh.75 lw
427.543 440.131 mo
430.172 439.276 li
430.172 436.512 li
431.797 438.748 li
434.426 437.894 li
432.801 440.131 li
434.426 442.367 li
431.797 441.513 li
430.172 443.749 li
430.172 440.985 li
cp
@
VCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf444.121 358.682 mo(|=0\))[-1.59805 -3.3331 -3.17328 0 ]yshVCIYXA+Symbol*1 [0 -5.70734 -5.70734 0 0 0 ]msf444.121 362.487 mo(h)shVCIYWZ+Helvetica-Bold*1 [0 -5.70734 -5.70734 0 0 0 ]msf444.121 419.56 mo(R807 \(pp at 63 GeV, | )[-4.20624 -3.25888 -3.25888 -3.25891 -1.61517 -1.98611 -3.51566 -3.57275 -1.61517 -3.25891 -1.98611 -1.61517 -3.25888 -3.25888 -1.61517 -4.52594 -3.25888 -3.42435 -1.61517 -1.6152 -1.68365 0 ]ysh440.181 440.131 mo
442.153 439.49 li
442.153 437.417 li
443.371 439.094 li
445.343 438.453 li
444.124 440.131 li
445.343 441.808 li
443.371 441.167 li
442.153 442.845 li
442.153 440.771 li
cp
.897551 .783413 0 0 cmyk
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VCIYXA+Symbol*1 uf/VCIYXA+Symbol uf/Symbol uf/VCIYWZ+Helvetica-Bold*1 uf/VCIYWZ+Helvetica-Bold uf/Helvetica-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
