%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cr_fig6_09-1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Paul Schaffner
%%CreationDate: 12/3/09
%%BoundingBox: 0 -15 509 452
%%HiResBoundingBox: 0 -15 508.1993 451.5596
%%CropBox: 0 0 508.1993 451.5596
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font Helvetica
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: Helvetica
%%DocumentNeededFonts: Helvetica
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-03T15:50:58-08:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-03T15:50:59-08:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-03T15:50:59-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>228</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA5AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FUkufNllbxzu9vO&#xA;TbG6MqKI+Qis+Pqy7uBx+Nab8t+nXFUPqb+dT5o0T6jHGmhK0/6Zo0bckMZENOYSSok3PD/hq/Cq&#xA;lH5ia9oej61oL61YpqFrdJeQRwOITSX9xIHAuCkXwpG1asNq0qdiqnGj6b+X+s2EWoaVY6Ze2cyq&#xA;yTQwQMPiUOAfhqp4sDQ74qjf8J+Vf+rNY/8ASND/AM04qh7PyP5VtvX/ANxVnJ60rTfFbQ/Dyp8I&#xA;+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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:799CDF15B5E1DE11965195D8AEDE0A7F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:7A9CDF15B5E1DE11965195D8AEDE0A7F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>282.222222</stDim:w>
            <stDim:h>211.666667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.0d7e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Helvetica.dfont</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -451.56 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 451.56 li
508.199 451.56 li
508.199 0 li
cp
clp
[1 0 0 1 0 0 ]ct
191.505 196.03 mo
199.625 219.2 li
206.785 241.53 li
213.195 262.86 li
218.985 282.54 li
224.285 299.23 li
229.146 311.23 li
233.655 318.16 li
237.846 321.43 li
241.775 322.79 li
245.455 323.32 li
248.936 323.53 li
252.226 323.61 li
255.335 323.64 li
258.306 323.66 li
423.195 323.66 li
423.195 341.32 li
263.835 341.32 li
261.136 341.31 li
255.335 341.28 li
252.226 341.21 li
248.936 341.03 li
245.455 340.55 li
241.775 339.35 li
237.846 336.46 li
233.655 330.23 li
229.146 319.14 li
224.285 303.31 li
218.985 284.29 li
213.195 263.52 li
206.785 241.76 li
199.625 219.28 li
191.505 196.03 li
191.505 196.03 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0.8 0.8 0.8 rgb
f
8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
273.195 340 mo
420.195 340 li
0.6 0.6 0.6 rgb
@
0.5 lw
273.195 344.1 mo
273.195 336 li
420.195 336 li
420.195 344.1 li
273.195 344.1 li
191.505 196.03 mo
199.625 219.2 li
206.785 241.53 li
213.195 262.86 li
218.985 282.54 li
224.285 299.23 li
229.146 311.23 li
233.655 318.16 li
237.846 321.43 li
241.775 322.79 li
245.455 323.32 li
248.936 323.53 li
252.226 323.61 li
255.335 323.64 li
258.306 323.66 li
423.195 323.66 li
423.195 341.32 li
263.835 341.32 li
261.136 341.31 li
255.335 341.28 li
252.226 341.21 li
248.936 341.03 li
245.455 340.55 li
241.775 339.35 li
237.846 336.46 li
233.655 330.23 li
229.146 319.14 li
224.285 303.31 li
218.985 284.29 li
213.195 263.52 li
206.785 241.76 li
199.625 219.28 li
191.505 196.03 li
191.505 196.03 li
cp
0 0 0 rgb
@
1.1 lw
73.1953 8.5498 mo
115.335 55.2402 li
139.995 89.8999 li
157.485 119.62 li
171.055 146.64 li
182.135 171.94 li
191.505 196.05 li
199.625 219.28 li
206.785 241.76 li
213.195 263.52 li
218.985 284.29 li
224.285 303.31 li
229.146 319.14 li
233.655 330.23 li
237.846 336.46 li
241.775 339.35 li
245.455 340.55 li
248.936 341.03 li
252.226 341.21 li
255.335 341.28 li
258.306 341.31 li
261.136 341.31 li
263.835 341.32 li
266.426 341.32 li
268.905 341.32 li
271.295 341.32 li
273.585 341.32 li
275.795 341.32 li
277.936 341.32 li
279.995 341.32 li
423.195 341.32 li
73.1953 8.5498 mo
115.335 55.2402 li
139.995 89.8999 li
157.485 119.62 li
171.055 146.63 li
182.135 171.93 li
191.505 196.03 li
199.625 219.2 li
206.785 241.53 li
213.195 262.86 li
218.985 282.54 li
224.285 299.23 li
229.146 311.23 li
233.655 318.16 li
237.846 321.43 li
241.775 322.79 li
245.455 323.32 li
248.936 323.53 li
252.226 323.61 li
255.335 323.64 li
258.306 323.66 li
261.136 323.66 li
263.835 323.66 li
266.426 323.66 li
268.905 323.66 li
271.295 323.66 li
273.585 323.66 li
275.795 323.66 li
277.936 323.66 li
279.995 323.66 li
423.195 323.66 li
@
gsave
73.1953 400.5 mo
423.195 400.5 li
423.195 0.5 li
73.1953 0.5 li
73.1953 400.5 li
cp
clp
389.835 332.23 mo
389.835 337.05 li
389.835 337.05 li
329.245 339.09 mo
329.245 345.5 li
329.245 345.5 li
299.056 339.21 mo
299.056 346 li
299.056 346 li
279.215 336.29 mo
279.215 342.98 li
279.215 342.98 li
264.625 330.68 mo
264.625 336.9 li
264.625 336.9 li
253.235 341.57 mo
253.235 350.88 li
253.235 350.88 li
244.045 334.51 mo
244.045 342.85 li
244.045 342.85 li
235.615 332.55 mo
235.615 341.42 li
235.615 341.42 li
230.125 278.01 mo
230.125 286.88 li
230.125 286.88 li
224.785 312.06 mo
224.785 319.29 li
224.785 319.29 li
220.355 306.16 mo
220.355 314.21 li
220.355 314.21 li
216.625 284.44 mo
216.625 290.08 li
216.625 290.08 li
213.556 276.34 mo
213.556 281.98 li
213.556 281.98 li
211.095 272.22 mo
211.095 279.21 li
211.095 279.21 li
209.166 249.49 mo
209.166 255.99 li
209.166 255.99 li
207.735 253.36 mo
207.735 270.42 li
207.735 270.42 li
205.025 242.82 mo
205.025 246.44 li
205.025 246.44 li
195.585 205.73 mo
195.585 210.26 li
195.585 210.26 li
189.815 194.08 mo
189.815 200.39 li
189.815 200.39 li
164.755 134.93 mo
164.755 137.68 li
164.755 137.68 li
162.055 127.46 mo
162.055 130.5 li
162.055 130.5 li
161.245 130 mo
161.245 144.03 li
161.245 144.03 li
150.436 104 mo
150.436 106.41 li
150.436 106.41 li
149.955 108.42 mo
149.955 109.96 li
149.955 109.96 li
149.245 122.39 mo
149.245 132.75 li
149.245 132.75 li
131.805 87.6602 mo
131.805 91.8999 li
131.805 91.8999 li
122.095 63.79 mo
122.095 64.9902 li
122.095 64.9902 li
110.695 48.6401 mo
110.695 50.23 li
110.695 50.23 li
110.265 49.6099 mo
110.265 50.4697 li
110.265 50.4697 li
100.775 38.1001 mo
100.775 38.9199 li
100.775 38.9199 li
99.2554 37.54 mo
99.2554 38.5 li
99.2554 38.5 li
97.8452 34.6699 mo
97.8452 35.48 li
97.8452 35.48 li
77.1953 14.3398 mo
77.1953 15.3999 li
77.1953 15.3999 li
389.835 332.23 mo
389.835 328.28 li
389.835 328.28 li
329.245 339.09 mo
329.245 334.23 li
329.245 334.23 li
299.056 339.21 mo
299.056 334.1 li
299.056 334.1 li
279.215 336.29 mo
279.215 331.23 li
279.215 331.23 li
264.625 330.68 mo
264.625 325.91 li
264.625 325.91 li
253.235 341.57 mo
253.235 335.16 li
253.235 335.16 li
244.045 334.51 mo
244.045 328.59 li
244.045 328.59 li
235.615 332.55 mo
235.615 326.33 li
235.615 326.33 li
230.125 278.01 mo
230.125 271.8 li
230.125 271.8 li
224.785 312.06 mo
224.785 306.71 li
224.785 306.71 li
220.355 306.16 mo
220.355 300.37 li
220.355 300.37 li
216.625 284.44 mo
216.625 280.01 li
216.625 280.01 li
213.556 276.34 mo
213.556 271.91 li
213.556 271.91 li
211.095 272.22 mo
211.095 267.02 li
211.095 267.02 li
209.166 249.49 mo
209.166 244.57 li
209.166 244.57 li
207.735 253.36 mo
207.735 244.11 li
207.735 244.11 li
205.025 242.82 mo
205.025 239.64 li
205.025 239.64 li
195.585 205.73 mo
195.585 201.98 li
195.585 201.98 li
189.815 194.08 mo
189.815 189.26 li
189.815 189.26 li
164.755 134.93 mo
164.755 132.47 li
164.755 132.47 li
162.055 127.46 mo
162.055 124.81 li
162.055 124.81 li
161.245 130 mo
161.245 121.67 li
161.245 121.67 li
150.436 104 mo
150.436 101.88 li
150.436 101.88 li
149.955 108.42 mo
149.955 107.02 li
149.955 107.02 li
149.245 122.39 mo
149.245 115.5 li
149.245 115.5 li
131.805 87.6602 mo
131.805 84.1499 li
131.805 84.1499 li
122.095 63.79 mo
122.095 62.6802 li
122.095 62.6802 li
110.695 48.6401 mo
110.695 47.25 li
110.695 47.25 li
110.265 49.6099 mo
110.265 48.79 li
110.265 48.79 li
100.775 38.1001 mo
100.775 37.3301 li
100.775 37.3301 li
99.2554 37.54 mo
99.2554 36.6201 li
99.2554 36.6201 li
97.8452 34.6699 mo
97.8452 33.8901 li
97.8452 33.8901 li
77.1953 14.3398 mo
77.1953 13.3301 li
77.1953 13.3301 li
@
grestore
80.1953 14.3398 mo
77.1953 11.3398 li
74.1953 14.3398 li
77.1953 17.3398 li
80.1953 14.3398 li
cp
1 1 1 rgb
f
100.845 34.6699 mo
97.8452 31.6699 li
94.8452 34.6699 li
97.8452 37.6699 li
100.845 34.6699 li
cp
f
102.255 37.54 mo
99.2554 34.54 li
96.2554 37.54 li
99.2554 40.54 li
102.255 37.54 li
cp
f
103.775 38.1001 mo
100.775 35.1001 li
97.7754 38.1001 li
100.775 41.1001 li
103.775 38.1001 li
cp
f
113.265 49.6099 mo
110.265 46.6099 li
107.265 49.6099 li
110.265 52.6099 li
113.265 49.6099 li
cp
f
113.695 48.6401 mo
110.695 45.6401 li
107.695 48.6401 li
110.695 51.6401 li
113.695 48.6401 li
cp
f
125.095 63.79 mo
122.095 60.79 li
119.095 63.79 li
122.095 66.79 li
125.095 63.79 li
cp
f
134.805 87.6602 mo
131.805 84.6602 li
128.805 87.6602 li
131.805 90.6602 li
134.805 87.6602 li
cp
f
152.245 122.39 mo
149.245 119.39 li
146.245 122.39 li
149.245 125.39 li
152.245 122.39 li
cp
f
152.955 108.42 mo
149.955 105.42 li
146.955 108.42 li
149.955 111.42 li
152.955 108.42 li
cp
f
153.436 104 mo
150.436 101 li
147.436 104 li
150.436 107 li
153.436 104 li
cp
f
164.245 130 mo
161.245 127 li
158.245 130 li
161.245 133 li
164.245 130 li
cp
f
165.055 127.46 mo
162.055 124.46 li
159.055 127.46 li
162.055 130.46 li
165.055 127.46 li
cp
f
167.755 134.93 mo
164.755 131.93 li
161.755 134.93 li
164.755 137.93 li
167.755 134.93 li
cp
f
192.815 194.08 mo
189.815 191.08 li
186.815 194.08 li
189.815 197.08 li
192.815 194.08 li
cp
f
198.585 205.73 mo
195.585 202.73 li
192.585 205.73 li
195.585 208.73 li
198.585 205.73 li
cp
f
208.025 242.82 mo
205.025 239.82 li
202.025 242.82 li
205.025 245.82 li
208.025 242.82 li
cp
f
210.735 253.36 mo
207.735 250.36 li
204.735 253.36 li
207.735 256.36 li
210.735 253.36 li
cp
f
212.166 249.49 mo
209.166 246.49 li
206.166 249.49 li
209.166 252.49 li
212.166 249.49 li
cp
f
214.096 272.22 mo
211.095 269.22 li
208.095 272.22 li
211.095 275.22 li
214.096 272.22 li
cp
f
216.556 276.34 mo
213.556 273.34 li
210.555 276.34 li
213.556 279.34 li
216.556 276.34 li
cp
f
219.625 284.44 mo
216.625 281.44 li
213.625 284.44 li
216.625 287.44 li
219.625 284.44 li
cp
f
223.355 306.16 mo
220.355 303.16 li
217.355 306.16 li
220.355 309.16 li
223.355 306.16 li
cp
f
227.785 312.06 mo
224.785 309.06 li
221.785 312.06 li
224.785 315.06 li
227.785 312.06 li
cp
f
233.125 278.01 mo
230.125 275.01 li
227.125 278.01 li
230.125 281.01 li
233.125 278.01 li
cp
f
238.615 332.55 mo
235.615 329.55 li
232.615 332.55 li
235.615 335.55 li
238.615 332.55 li
cp
f
247.045 334.51 mo
244.045 331.51 li
241.045 334.51 li
244.045 337.51 li
247.045 334.51 li
cp
f
256.235 341.57 mo
253.235 338.57 li
250.235 341.57 li
253.235 344.57 li
256.235 341.57 li
cp
f
267.625 330.68 mo
264.625 327.68 li
261.625 330.68 li
264.625 333.68 li
267.625 330.68 li
cp
f
282.215 336.29 mo
279.215 333.29 li
276.215 336.29 li
279.215 339.29 li
282.215 336.29 li
cp
f
302.056 339.21 mo
299.056 336.21 li
296.056 339.21 li
299.056 342.21 li
302.056 339.21 li
cp
f
332.245 339.09 mo
329.245 336.09 li
326.245 339.09 li
329.245 342.09 li
332.245 339.09 li
cp
f
392.835 332.23 mo
389.835 329.23 li
386.835 332.23 li
389.835 335.23 li
392.835 332.23 li
cp
f
gsave
73.1953 400.5 mo
423.195 400.5 li
423.195 0.5 li
73.1953 0.5 li
73.1953 400.5 li
cp
clp
393.835 332.23 mo
389.835 328.23 li
385.835 332.23 li
389.835 336.23 li
393.835 332.23 li
cp
333.245 339.09 mo
329.245 335.09 li
325.245 339.09 li
329.245 343.09 li
333.245 339.09 li
cp
303.056 339.21 mo
299.056 335.21 li
295.056 339.21 li
299.056 343.21 li
303.056 339.21 li
cp
283.215 336.29 mo
279.215 332.29 li
275.215 336.29 li
279.215 340.29 li
283.215 336.29 li
cp
268.625 330.68 mo
264.625 326.68 li
260.625 330.68 li
264.625 334.68 li
268.625 330.68 li
cp
257.235 341.57 mo
253.235 337.57 li
249.235 341.57 li
253.235 345.57 li
257.235 341.57 li
cp
248.045 334.51 mo
244.045 330.51 li
240.045 334.51 li
244.045 338.51 li
248.045 334.51 li
cp
239.615 332.55 mo
235.615 328.55 li
231.615 332.55 li
235.615 336.55 li
239.615 332.55 li
cp
234.125 278.01 mo
230.125 274.01 li
226.125 278.01 li
230.125 282.01 li
234.125 278.01 li
cp
228.785 312.06 mo
224.785 308.06 li
220.785 312.06 li
224.785 316.06 li
228.785 312.06 li
cp
224.355 306.16 mo
220.355 302.16 li
216.355 306.16 li
220.355 310.16 li
224.355 306.16 li
cp
220.625 284.44 mo
216.625 280.44 li
212.625 284.44 li
216.625 288.44 li
220.625 284.44 li
cp
217.556 276.34 mo
213.556 272.34 li
209.555 276.34 li
213.556 280.34 li
217.556 276.34 li
cp
215.096 272.22 mo
211.095 268.22 li
207.095 272.22 li
211.095 276.22 li
215.096 272.22 li
cp
213.165 249.49 mo
209.166 245.49 li
205.166 249.49 li
209.166 253.49 li
213.165 249.49 li
cp
211.735 253.36 mo
207.735 249.36 li
203.735 253.36 li
207.735 257.36 li
211.735 253.36 li
cp
209.025 242.82 mo
205.025 238.82 li
201.025 242.82 li
205.025 246.82 li
209.025 242.82 li
cp
199.585 205.73 mo
195.585 201.73 li
191.585 205.73 li
195.585 209.73 li
199.585 205.73 li
cp
193.815 194.08 mo
189.815 190.08 li
185.815 194.08 li
189.815 198.08 li
193.815 194.08 li
cp
168.755 134.93 mo
164.755 130.93 li
160.755 134.93 li
164.755 138.93 li
168.755 134.93 li
cp
166.055 127.46 mo
162.055 123.46 li
158.055 127.46 li
162.055 131.46 li
166.055 127.46 li
cp
165.245 130 mo
161.245 126 li
157.245 130 li
161.245 134 li
165.245 130 li
cp
154.436 104 mo
150.436 100 li
146.436 104 li
150.436 108 li
154.436 104 li
cp
153.955 108.42 mo
149.955 104.42 li
145.955 108.42 li
149.955 112.42 li
153.955 108.42 li
cp
153.245 122.39 mo
149.245 118.39 li
145.245 122.39 li
149.245 126.39 li
153.245 122.39 li
cp
135.805 87.6602 mo
131.805 83.6602 li
127.805 87.6602 li
131.805 91.6602 li
135.805 87.6602 li
cp
126.095 63.79 mo
122.095 59.79 li
118.095 63.79 li
122.095 67.79 li
126.095 63.79 li
cp
114.695 48.6401 mo
110.695 44.6401 li
106.695 48.6401 li
110.695 52.6401 li
114.695 48.6401 li
cp
114.265 49.6099 mo
110.265 45.6099 li
106.265 49.6099 li
110.265 53.6099 li
114.265 49.6099 li
cp
104.775 38.1001 mo
100.775 34.1001 li
96.7754 38.1001 li
100.775 42.1001 li
104.775 38.1001 li
cp
103.255 37.54 mo
99.2554 33.54 li
95.2554 37.54 li
99.2554 41.54 li
103.255 37.54 li
cp
101.845 34.6699 mo
97.8452 30.6699 li
93.8452 34.6699 li
97.8452 38.6699 li
101.845 34.6699 li
cp
81.1953 14.3398 mo
77.1953 10.3398 li
73.1953 14.3398 li
77.1953 18.3398 li
81.1953 14.3398 li
cp
0 0 0 rgb
@
253.266 341.2 mo
253.266 397.59 li
253.266 397.59 li
249.035 313.46 mo
249.035 328.73 li
249.035 328.73 li
245.355 329.31 mo
245.355 353.8 li
245.355 353.8 li
240.035 324.37 mo
240.035 367.16 li
240.035 367.16 li
236.556 306.55 mo
236.556 325.3 li
236.556 325.3 li
224.936 307.52 mo
224.936 342.7 li
224.936 342.7 li
222.815 285.36 mo
222.815 300.44 li
222.815 300.44 li
220.605 285.79 mo
220.605 299.43 li
220.605 299.43 li
218.426 274.58 mo
218.426 282.58 li
218.426 282.58 li
215.556 271.28 mo
215.556 278.75 li
215.556 278.75 li
253.266 341.2 mo
253.266 324.38 li
253.266 324.38 li
249.035 313.46 mo
249.035 304.68 li
249.035 304.68 li
245.355 329.31 mo
245.355 318.61 li
245.355 318.61 li
240.035 324.37 mo
240.035 311.55 li
240.035 311.55 li
236.556 306.55 mo
236.556 298.31 li
236.556 298.31 li
224.936 307.52 mo
224.936 295.32 li
224.936 295.32 li
222.815 285.36 mo
222.815 276.68 li
222.815 276.68 li
220.605 285.79 mo
220.605 277.6 li
220.605 277.6 li
218.426 274.58 mo
218.426 268.8 li
218.426 268.8 li
215.556 271.28 mo
215.556 265.79 li
215.556 265.79 li
256.695 341.3 mo
256.695 339.368 255.127 337.8 253.195 337.8 cv
251.264 337.8 249.695 339.368 249.695 341.3 cv
249.695 343.232 251.264 344.8 253.195 344.8 cv
255.127 344.8 256.695 343.232 256.695 341.3 cv
252.615 313.46 mo
252.615 311.528 251.047 309.96 249.115 309.96 cv
247.184 309.96 245.615 311.528 245.615 313.46 cv
245.615 315.392 247.184 316.96 249.115 316.96 cv
251.047 316.96 252.615 315.392 252.615 313.46 cv
248.775 329.3 mo
248.775 327.368 247.207 325.8 245.275 325.8 cv
243.344 325.8 241.775 327.368 241.775 329.3 cv
241.775 331.232 243.344 332.8 245.275 332.8 cv
247.207 332.8 248.775 331.232 248.775 329.3 cv
243.495 324.38 mo
243.495 322.448 241.928 320.88 239.995 320.88 cv
238.063 320.88 236.495 322.448 236.495 324.38 cv
236.495 326.312 238.063 327.88 239.995 327.88 cv
241.928 327.88 243.495 326.312 243.495 324.38 cv
240.136 306.5 mo
240.136 304.568 238.567 303 236.636 303 cv
234.703 303 233.136 304.568 233.136 306.5 cv
233.136 308.432 234.703 310 236.636 310 cv
238.567 310 240.136 308.432 240.136 306.5 cv
228.375 307.46 mo
228.375 305.528 226.808 303.96 224.875 303.96 cv
222.943 303.96 221.375 305.528 221.375 307.46 cv
221.375 309.392 222.943 310.96 224.875 310.96 cv
226.808 310.96 228.375 309.392 228.375 307.46 cv
226.215 285.38 mo
226.215 283.448 224.647 281.88 222.715 281.88 cv
220.783 281.88 219.215 283.448 219.215 285.38 cv
219.215 287.312 220.783 288.88 222.715 288.88 cv
224.647 288.88 226.215 287.312 226.215 285.38 cv
224.056 285.86 mo
224.056 283.928 222.487 282.36 220.556 282.36 cv
218.623 282.36 217.056 283.928 217.056 285.86 cv
217.056 287.792 218.623 289.36 220.556 289.36 cv
222.487 289.36 224.056 287.792 224.056 285.86 cv
221.896 274.58 mo
221.896 272.648 220.327 271.08 218.396 271.08 cv
216.463 271.08 214.896 272.648 214.896 274.58 cv
214.896 276.512 216.463 278.08 218.396 278.08 cv
220.327 278.08 221.896 276.512 221.896 274.58 cv
219.016 271.22 mo
219.016 269.288 217.447 267.72 215.516 267.72 cv
213.583 267.72 212.015 269.288 212.015 271.22 cv
212.015 273.152 213.583 274.72 215.516 274.72 cv
217.447 274.72 219.016 273.152 219.016 271.22 cv
216.855 262.82 mo
216.855 260.888 215.287 259.32 213.355 259.32 cv
211.423 259.32 209.855 260.888 209.855 262.82 cv
209.855 264.752 211.423 266.32 213.355 266.32 cv
215.287 266.32 216.855 264.752 216.855 262.82 cv
213.976 258.98 mo
213.976 257.048 212.407 255.48 210.475 255.48 cv
208.543 255.48 206.975 257.048 206.975 258.98 cv
206.975 260.912 208.543 262.48 210.475 262.48 cv
212.407 262.48 213.976 260.912 213.976 258.98 cv
211.095 251.3 mo
211.095 249.368 209.527 247.8 207.595 247.8 cv
205.663 247.8 204.095 249.368 204.095 251.3 cv
204.095 253.232 205.663 254.8 207.595 254.8 cv
209.527 254.8 211.095 253.232 211.095 251.3 cv
208.695 241.46 mo
208.695 239.528 207.127 237.96 205.195 237.96 cv
203.263 237.96 201.695 239.528 201.695 241.46 cv
201.695 243.392 203.263 244.96 205.195 244.96 cv
207.127 244.96 208.695 243.392 208.695 241.46 cv
222.945 295.91 mo
222.945 302.51 li
222.945 302.51 li
217.255 275.47 mo
217.255 280.58 li
217.255 280.58 li
211.595 254.12 mo
211.595 256.77 li
211.595 256.77 li
204.695 231.58 mo
204.695 233.22 li
204.695 233.22 li
199.275 214.69 mo
199.275 216.67 li
199.275 216.67 li
195.146 203.74 mo
195.146 204.94 li
195.146 204.94 li
190.675 192.3 mo
190.675 193.07 li
190.675 193.07 li
222.945 295.91 mo
222.945 290.9 li
222.945 290.9 li
217.255 275.47 mo
217.255 271.37 li
217.255 271.37 li
211.595 254.12 mo
211.595 251.76 li
211.595 251.76 li
204.695 231.58 mo
204.695 230.08 li
204.695 230.08 li
199.275 214.69 mo
199.275 212.86 li
199.275 212.86 li
195.146 203.74 mo
195.146 202.58 li
195.146 202.58 li
190.675 192.3 mo
190.675 191.53 li
190.675 191.53 li
225.773 298.738 mo
225.773 293.082 li
220.117 293.082 li
220.117 298.738 li
225.773 298.738 li
cp
220.084 278.299 mo
220.084 272.642 li
214.427 272.642 li
214.427 278.299 li
220.084 278.299 li
cp
214.424 256.948 mo
214.424 251.292 li
208.767 251.292 li
208.767 256.948 li
214.424 256.948 li
cp
207.524 234.408 mo
207.524 228.752 li
201.867 228.752 li
201.867 234.408 li
207.524 234.408 li
cp
202.104 217.519 mo
202.104 211.861 li
196.447 211.861 li
196.447 217.519 li
202.104 217.519 li
cp
197.974 206.568 mo
197.974 200.912 li
192.317 200.912 li
192.317 206.568 li
197.974 206.568 li
cp
193.504 195.128 mo
193.504 189.472 li
187.847 189.472 li
187.847 195.128 li
193.504 195.128 li
cp
188.714 184.338 mo
188.714 178.682 li
183.057 178.682 li
183.057 184.338 li
188.714 184.338 li
cp
183.524 170.718 mo
183.524 165.062 li
177.867 165.062 li
177.867 170.718 li
183.524 170.718 li
cp
179.034 162.508 mo
179.034 156.852 li
173.377 156.852 li
173.377 162.508 li
179.034 162.508 li
cp
171.574 147.858 mo
171.574 142.202 li
165.917 142.202 li
165.917 147.858 li
171.574 147.858 li
cp
164.624 134.039 mo
164.624 128.381 li
158.967 128.381 li
158.967 134.039 li
164.624 134.039 li
cp
156.774 119.318 mo
156.774 113.662 li
151.117 113.662 li
151.117 119.318 li
156.774 119.318 li
cp
149.714 108.198 mo
149.714 102.542 li
144.057 102.542 li
144.057 108.198 li
149.714 108.198 li
cp
137.284 87.4185 mo
137.284 81.7617 li
131.627 81.7617 li
131.627 87.4185 li
137.284 87.4185 li
cp
127.374 73.4785 mo
127.374 67.8213 li
121.717 67.8213 li
121.717 73.4785 li
127.374 73.4785 li
cp
108.714 50.1582 mo
108.714 44.5015 li
103.057 44.5015 li
103.057 50.1582 li
108.714 50.1582 li
cp
87.3135 25.3984 mo
87.3135 19.7417 li
81.6567 19.7417 li
81.6567 25.3984 li
87.3135 25.3984 li
cp
@
grestore
218.016 271.22 mo
218.016 269.84 216.896 268.72 215.516 268.72 cv
214.136 268.72 213.016 269.84 213.016 271.22 cv
213.016 272.6 214.136 273.72 215.516 273.72 cv
216.896 273.72 218.016 272.6 218.016 271.22 cv
218.016 271.22 li
cp
f
220.896 274.58 mo
220.896 273.2 219.775 272.08 218.396 272.08 cv
217.016 272.08 215.896 273.2 215.896 274.58 cv
215.896 275.96 217.016 277.08 218.396 277.08 cv
219.775 277.08 220.896 275.96 220.896 274.58 cv
220.896 274.58 li
cp
f
223.056 285.86 mo
223.056 284.48 221.936 283.36 220.556 283.36 cv
219.176 283.36 218.056 284.48 218.056 285.86 cv
218.056 287.24 219.176 288.36 220.556 288.36 cv
221.936 288.36 223.056 287.24 223.056 285.86 cv
223.056 285.86 li
cp
f
225.215 285.38 mo
225.215 284 224.096 282.88 222.715 282.88 cv
221.335 282.88 220.215 284 220.215 285.38 cv
220.215 286.76 221.335 287.88 222.715 287.88 cv
224.096 287.88 225.215 286.76 225.215 285.38 cv
225.215 285.38 li
cp
f
227.375 307.46 mo
227.375 306.08 226.255 304.96 224.875 304.96 cv
223.495 304.96 222.375 306.08 222.375 307.46 cv
222.375 308.84 223.495 309.96 224.875 309.96 cv
226.255 309.96 227.375 308.84 227.375 307.46 cv
227.375 307.46 li
cp
f
239.136 306.5 mo
239.136 305.12 238.016 304 236.636 304 cv
235.255 304 234.136 305.12 234.136 306.5 cv
234.136 307.88 235.255 309 236.636 309 cv
238.016 309 239.136 307.88 239.136 306.5 cv
239.136 306.5 li
cp
f
242.495 324.38 mo
242.495 323 241.375 321.88 239.995 321.88 cv
238.615 321.88 237.495 323 237.495 324.38 cv
237.495 325.76 238.615 326.88 239.995 326.88 cv
241.375 326.88 242.495 325.76 242.495 324.38 cv
242.495 324.38 li
cp
f
247.775 329.3 mo
247.775 327.92 246.655 326.8 245.275 326.8 cv
243.896 326.8 242.775 327.92 242.775 329.3 cv
242.775 330.68 243.896 331.8 245.275 331.8 cv
246.655 331.8 247.775 330.68 247.775 329.3 cv
247.775 329.3 li
cp
f
251.615 313.46 mo
251.615 312.08 250.495 310.96 249.115 310.96 cv
247.735 310.96 246.615 312.08 246.615 313.46 cv
246.615 314.84 247.735 315.96 249.115 315.96 cv
250.495 315.96 251.615 314.84 251.615 313.46 cv
251.615 313.46 li
cp
f
255.695 341.3 mo
255.695 339.92 254.575 338.8 253.195 338.8 cv
251.815 338.8 250.695 339.92 250.695 341.3 cv
250.695 342.68 251.815 343.8 253.195 343.8 cv
254.575 343.8 255.695 342.68 255.695 341.3 cv
255.695 341.3 li
cp
f
256.695 341.3 mo
256.695 339.368 255.127 337.8 253.195 337.8 cv
251.264 337.8 249.695 339.368 249.695 341.3 cv
249.695 343.232 251.264 344.8 253.195 344.8 cv
255.127 344.8 256.695 343.232 256.695 341.3 cv
252.615 313.46 mo
252.615 311.528 251.047 309.96 249.115 309.96 cv
247.184 309.96 245.615 311.528 245.615 313.46 cv
245.615 315.392 247.184 316.96 249.115 316.96 cv
251.047 316.96 252.615 315.392 252.615 313.46 cv
248.775 329.3 mo
248.775 327.368 247.207 325.8 245.275 325.8 cv
243.344 325.8 241.775 327.368 241.775 329.3 cv
241.775 331.232 243.344 332.8 245.275 332.8 cv
247.207 332.8 248.775 331.232 248.775 329.3 cv
243.495 324.38 mo
243.495 322.448 241.928 320.88 239.995 320.88 cv
238.063 320.88 236.495 322.448 236.495 324.38 cv
236.495 326.312 238.063 327.88 239.995 327.88 cv
241.928 327.88 243.495 326.312 243.495 324.38 cv
240.136 306.5 mo
240.136 304.568 238.567 303 236.636 303 cv
234.703 303 233.136 304.568 233.136 306.5 cv
233.136 308.432 234.703 310 236.636 310 cv
238.567 310 240.136 308.432 240.136 306.5 cv
228.375 307.46 mo
228.375 305.528 226.808 303.96 224.875 303.96 cv
222.943 303.96 221.375 305.528 221.375 307.46 cv
221.375 309.392 222.943 310.96 224.875 310.96 cv
226.808 310.96 228.375 309.392 228.375 307.46 cv
226.215 285.38 mo
226.215 283.448 224.647 281.88 222.715 281.88 cv
220.783 281.88 219.215 283.448 219.215 285.38 cv
219.215 287.312 220.783 288.88 222.715 288.88 cv
224.647 288.88 226.215 287.312 226.215 285.38 cv
224.056 285.86 mo
224.056 283.928 222.487 282.36 220.556 282.36 cv
218.623 282.36 217.056 283.928 217.056 285.86 cv
217.056 287.792 218.623 289.36 220.556 289.36 cv
222.487 289.36 224.056 287.792 224.056 285.86 cv
221.896 274.58 mo
221.896 272.648 220.327 271.08 218.396 271.08 cv
216.463 271.08 214.896 272.648 214.896 274.58 cv
214.896 276.512 216.463 278.08 218.396 278.08 cv
220.327 278.08 221.896 276.512 221.896 274.58 cv
219.016 271.22 mo
219.016 269.288 217.447 267.72 215.516 267.72 cv
213.583 267.72 212.015 269.288 212.015 271.22 cv
212.015 273.152 213.583 274.72 215.516 274.72 cv
217.447 274.72 219.016 273.152 219.016 271.22 cv
0 0 0 rgb
@
146.835 98.4199 mo
146.835 97.3159 145.939 96.4199 144.835 96.4199 cv
143.731 96.4199 142.835 97.3159 142.835 98.4199 cv
142.835 99.5239 143.731 100.42 144.835 100.42 cv
145.939 100.42 146.835 99.5239 146.835 98.4199 cv
f
150.555 104.42 mo
150.555 103.316 149.659 102.42 148.555 102.42 cv
147.451 102.42 146.555 103.316 146.555 104.42 cv
146.555 105.524 147.451 106.42 148.555 106.42 cv
149.659 106.42 150.555 105.524 150.555 104.42 cv
f
153.916 110.18 mo
153.916 109.076 153.02 108.18 151.916 108.18 cv
150.812 108.18 149.916 109.076 149.916 110.18 cv
149.916 111.284 150.812 112.18 151.916 112.18 cv
153.02 112.18 153.916 111.284 153.916 110.18 cv
f
157.155 115.46 mo
157.155 114.356 156.259 113.46 155.155 113.46 cv
154.051 113.46 153.155 114.356 153.155 115.46 cv
153.155 116.564 154.051 117.46 155.155 117.46 cv
156.259 117.46 157.155 116.564 157.155 115.46 cv
f
160.155 120.74 mo
160.155 119.636 159.259 118.74 158.155 118.74 cv
157.051 118.74 156.155 119.636 156.155 120.74 cv
156.155 121.844 157.051 122.74 158.155 122.74 cv
159.259 122.74 160.155 121.844 160.155 120.74 cv
f
163.155 126.62 mo
163.155 125.516 162.259 124.62 161.155 124.62 cv
160.051 124.62 159.155 125.516 159.155 126.62 cv
159.155 127.724 160.051 128.62 161.155 128.62 cv
162.259 128.62 163.155 127.724 163.155 126.62 cv
f
165.916 132.26 mo
165.916 131.156 165.02 130.26 163.916 130.26 cv
162.812 130.26 161.916 131.156 161.916 132.26 cv
161.916 133.364 162.812 134.26 163.916 134.26 cv
165.02 134.26 165.916 133.364 165.916 132.26 cv
f
168.555 137.06 mo
168.555 135.956 167.659 135.06 166.555 135.06 cv
165.451 135.06 164.555 135.956 164.555 137.06 cv
164.555 138.164 165.451 139.06 166.555 139.06 cv
167.659 139.06 168.555 138.164 168.555 137.06 cv
f
171.195 141.86 mo
171.195 140.756 170.299 139.86 169.195 139.86 cv
168.091 139.86 167.195 140.756 167.195 141.86 cv
167.195 142.964 168.091 143.86 169.195 143.86 cv
170.299 143.86 171.195 142.964 171.195 141.86 cv
f
173.595 146.54 mo
173.595 145.436 172.699 144.54 171.595 144.54 cv
170.491 144.54 169.595 145.436 169.595 146.54 cv
169.595 147.644 170.491 148.54 171.595 148.54 cv
172.699 148.54 173.595 147.644 173.595 146.54 cv
f
175.995 152.42 mo
175.995 151.316 175.099 150.42 173.995 150.42 cv
172.891 150.42 171.995 151.316 171.995 152.42 cv
171.995 153.524 172.891 154.42 173.995 154.42 cv
175.099 154.42 175.995 153.524 175.995 152.42 cv
f
178.275 158.54 mo
178.275 157.436 177.379 156.54 176.275 156.54 cv
175.171 156.54 174.275 157.436 174.275 158.54 cv
174.275 159.644 175.171 160.54 176.275 160.54 cv
177.379 160.54 178.275 159.644 178.275 158.54 cv
f
180.555 162.5 mo
180.555 161.396 179.659 160.5 178.555 160.5 cv
177.451 160.5 176.555 161.396 176.555 162.5 cv
176.555 163.604 177.451 164.5 178.555 164.5 cv
179.659 164.5 180.555 163.604 180.555 162.5 cv
f
182.595 167.54 mo
182.595 166.436 181.699 165.54 180.595 165.54 cv
179.491 165.54 178.595 166.436 178.595 167.54 cv
178.595 168.644 179.491 169.54 180.595 169.54 cv
181.699 169.54 182.595 168.644 182.595 167.54 cv
f
184.635 173.3 mo
184.635 172.196 183.739 171.3 182.635 171.3 cv
181.531 171.3 180.635 172.196 180.635 173.3 cv
180.635 174.404 181.531 175.3 182.635 175.3 cv
183.739 175.3 184.635 174.404 184.635 173.3 cv
f
186.555 177.14 mo
186.555 176.036 185.659 175.14 184.555 175.14 cv
183.451 175.14 182.555 176.036 182.555 177.14 cv
182.555 178.244 183.451 179.14 184.555 179.14 cv
185.659 179.14 186.555 178.244 186.555 177.14 cv
f
188.475 183.38 mo
188.475 182.276 187.579 181.38 186.475 181.38 cv
185.371 181.38 184.475 182.276 184.475 183.38 cv
184.475 184.484 185.371 185.38 186.475 185.38 cv
187.579 185.38 188.475 184.484 188.475 183.38 cv
f
190.396 186.98 mo
190.396 185.876 189.5 184.98 188.396 184.98 cv
187.292 184.98 186.396 185.876 186.396 186.98 cv
186.396 188.084 187.292 188.98 188.396 188.98 cv
189.5 188.98 190.396 188.084 190.396 186.98 cv
f
192.195 191.3 mo
192.195 190.196 191.299 189.3 190.195 189.3 cv
189.091 189.3 188.195 190.196 188.195 191.3 cv
188.195 192.404 189.091 193.3 190.195 193.3 cv
191.299 193.3 192.195 192.404 192.195 191.3 cv
f
160.753 127.108 mo
160.753 123.572 li
157.218 123.572 li
157.218 127.108 li
160.753 127.108 li
cp
f
163.653 132.638 mo
163.653 129.102 li
160.118 129.102 li
160.118 132.638 li
163.653 132.638 li
cp
f
166.413 138.078 mo
166.413 134.542 li
162.877 134.542 li
162.877 138.078 li
166.413 138.078 li
cp
f
169.053 143.438 mo
169.053 139.902 li
165.518 139.902 li
165.518 143.438 li
169.053 143.438 li
cp
f
171.593 148.718 mo
171.593 145.182 li
168.058 145.182 li
168.058 148.718 li
171.593 148.718 li
cp
f
174.023 153.928 mo
174.023 150.392 li
170.487 150.392 li
170.487 153.928 li
174.023 153.928 li
cp
f
176.363 159.068 mo
176.363 155.532 li
172.828 155.532 li
172.828 159.068 li
176.363 159.068 li
cp
f
178.613 164.158 mo
178.613 160.622 li
175.078 160.622 li
175.078 164.158 li
178.613 164.158 li
cp
f
180.783 169.188 mo
180.783 165.652 li
177.248 165.652 li
177.248 169.188 li
180.783 169.188 li
cp
f
182.883 174.168 mo
182.883 170.632 li
179.348 170.632 li
179.348 174.168 li
182.883 174.168 li
cp
f
184.913 179.098 mo
184.913 175.562 li
181.377 175.562 li
181.377 179.098 li
184.913 179.098 li
cp
f
186.873 183.978 mo
186.873 180.442 li
183.337 180.442 li
183.337 183.978 li
186.873 183.978 li
cp
f
188.773 188.828 mo
188.773 185.292 li
185.237 185.292 li
185.237 188.828 li
188.773 188.828 li
cp
f
190.613 193.628 mo
190.613 190.092 li
187.078 190.092 li
187.078 193.628 li
190.613 193.628 li
cp
f
192.403 198.398 mo
192.403 194.862 li
188.868 194.862 li
188.868 198.398 li
192.403 198.398 li
cp
f
194.143 203.128 mo
194.143 199.592 li
190.607 199.592 li
190.607 203.128 li
194.143 203.128 li
cp
f
195.833 207.828 mo
195.833 204.292 li
192.297 204.292 li
192.297 207.828 li
195.833 207.828 li
cp
f
197.473 212.498 mo
197.473 208.962 li
193.938 208.962 li
193.938 212.498 li
197.473 212.498 li
cp
f
199.073 219.358 mo
199.073 215.822 li
195.538 215.822 li
195.538 219.358 li
199.073 219.358 li
cp
f
200.633 218.288 mo
200.633 214.752 li
197.098 214.752 li
197.098 218.288 li
200.633 218.288 li
cp
f
202.893 233.277 mo
202.893 229.742 li
199.357 229.742 li
199.357 233.277 li
202.893 233.277 li
cp
f
205.793 241.768 mo
205.793 238.232 li
202.257 238.232 li
202.257 241.768 li
205.793 241.768 li
cp
f
208.553 243.607 mo
208.553 240.072 li
205.018 240.072 li
205.018 243.607 li
208.553 243.607 li
cp
f
gsave
73.1953 400.5 mo
423.195 400.5 li
423.195 0.5 li
73.1953 0.5 li
73.1953 400.5 li
cp
clp
206.785 241.84 mo
206.785 250.03 li
206.785 250.03 li
204.025 240 mo
204.025 249.64 li
204.025 249.64 li
201.125 231.51 mo
201.125 234.89 li
201.125 234.89 li
206.785 241.84 mo
206.785 236.05 li
206.785 236.05 li
204.025 240 mo
204.025 233.25 li
204.025 233.25 li
201.125 231.51 mo
201.125 228.62 li
201.125 228.62 li
@
1 lw
419.995 400.5 mo
419.995 394.5 li
395.335 400.5 mo
395.335 394.5 li
353.195 400.5 mo
353.195 388.5 li
353.195 400.5 mo
353.195 394.5 li
346.785 400.5 mo
346.785 394.5 li
339.625 400.5 mo
339.625 394.5 li
331.505 400.5 mo
331.505 394.5 li
322.136 400.5 mo
322.136 394.5 li
311.056 400.5 mo
311.056 394.5 li
297.485 400.5 mo
297.485 394.5 li
279.995 400.5 mo
279.995 394.5 li
255.335 400.5 mo
255.335 394.5 li
213.195 400.5 mo
213.195 388.5 li
213.195 400.5 mo
213.195 394.5 li
206.785 400.5 mo
206.785 394.5 li
199.625 400.5 mo
199.625 394.5 li
191.505 400.5 mo
191.505 394.5 li
182.135 400.5 mo
182.135 394.5 li
171.055 400.5 mo
171.055 394.5 li
157.485 400.5 mo
157.485 394.5 li
139.995 400.5 mo
139.995 394.5 li
115.335 400.5 mo
115.335 394.5 li
73.1953 400.5 mo
73.1953 388.5 li
73.1953 400.5 mo
73.1953 394.5 li
73.1953 400.5 mo
423.195 400.5 li
@
grestore
%%IncludeResource: font Helvetica
/PSYTEM+Helvetica /Helvetica findfont ct_VMDictPut/PSYTEM+Helvetica*1 [48{/.notdef}rp /zero /one 206{/.notdef}rp]PSYTEM+Helvetica nfPSYTEM+Helvetica*1 [12 0 0 -12 0 0 ]msf69.8594 416.797 mo(11)[136.67 0 ]xsh213.188 416.797 mo(0)sh343.188 416.797 mo(100)[6.67383 6.67383 0 ]xsh1 lw
378.195 207.73 mo
378.195 195.73 li
371.785 207.73 mo
371.785 201.73 li
364.625 207.73 mo
364.625 201.73 li
356.505 207.73 mo
356.505 201.73 li
347.136 207.73 mo
347.136 201.73 li
336.056 207.73 mo
336.056 201.73 li
322.485 207.73 mo
322.485 201.73 li
304.995 207.73 mo
304.995 201.73 li
280.335 207.73 mo
280.335 201.73 li
238.195 207.73 mo
238.195 195.73 li
238.195 63.1499 mo
250.195 63.1499 li
238.195 111.34 mo
250.195 111.34 li
238.195 159.84 mo
250.195 159.84 li
238.195 207.73 mo
238.195 14.96 li
378.195 14.96 li
378.195 207.73 li
238.195 207.73 li
@
%%IncludeResource: font Helvetica
/PSYTEM+Helvetica*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 202{/.notdef}rp]PSYTEM+Helvetica nfPSYTEM+Helvetica*1 [12 0 0 -12 0 0 ]msf234.859 224.789 mo(11)[136.67 0 ]xsh378.195 224.789 mo(0)sh277 224.789 mo(25)[55.7178 0 ]xsh272.415 49.1802 mo
268.415 45.1802 li
264.415 49.1802 li
268.415 53.1802 li
272.415 49.1802 li
cp
f
275.325 53.6802 mo
271.325 49.6802 li
267.325 53.6802 li
271.325 57.6802 li
275.325 53.6802 li
cp
f
278.096 57.04 mo
274.096 53.04 li
270.096 57.04 li
274.096 61.04 li
278.096 57.04 li
cp
f
282.035 61.54 mo
278.035 57.54 li
274.035 61.54 li
278.035 65.54 li
282.035 61.54 li
cp
f
285.735 66.0303 mo
281.735 62.0303 li
277.735 66.0303 li
281.735 70.0303 li
285.735 66.0303 li
cp
f
290.335 71.6401 mo
286.335 67.6401 li
282.335 71.6401 li
286.335 75.6401 li
290.335 71.6401 li
cp
f
294.615 76.1299 mo
290.615 72.1299 li
286.615 76.1299 li
290.615 80.1299 li
294.615 76.1299 li
cp
f
298.615 80.6201 mo
294.615 76.6201 li
290.615 80.6201 li
294.615 84.6201 li
298.615 80.6201 li
cp
f
304.155 87.3599 mo
300.155 83.3599 li
296.155 87.3599 li
300.155 91.3599 li
304.155 87.3599 li
cp
f
309.235 95.2197 mo
305.235 91.2197 li
301.235 95.2197 li
305.235 99.2197 li
309.235 95.2197 li
cp
f
315.415 103.08 mo
311.415 99.0801 li
307.415 103.08 li
311.415 107.08 li
315.415 103.08 li
cp
f
322.335 114.31 mo
318.335 110.31 li
314.335 114.31 li
318.335 118.31 li
322.335 114.31 li
cp
f
329.726 122.17 mo
325.726 118.17 li
321.726 122.17 li
325.726 126.17 li
329.726 122.17 li
cp
f
338.865 141.25 mo
334.865 137.25 li
330.865 141.25 li
334.865 145.25 li
338.865 141.25 li
cp
f
348.955 158.1 mo
344.955 154.1 li
340.955 158.1 li
344.955 162.1 li
348.955 158.1 li
cp
f
360.825 178.31 mo
356.825 174.31 li
352.825 178.31 li
356.825 182.31 li
360.825 178.31 li
cp
f
356.825 170.45 mo
356.825 191.07 li
344.955 153.61 mo
344.955 163.83 li
334.865 137.89 mo
334.865 145.27 li
325.726 121.04 mo
325.726 123.35 li
318.335 113.18 mo
318.335 115.49 li
311.415 101.96 mo
311.415 104.27 li
305.235 94.1001 mo
305.235 96.4102 li
300.155 86.2402 mo
300.155 88.5498 li
294.615 79.5 mo
294.615 81.8101 li
290.615 75.0098 mo
290.615 77.3198 li
286.335 70.52 mo
286.335 72.8301 li
281.735 64.8999 mo
281.735 67.21 li
278.035 60.4102 mo
278.035 62.7197 li
274.096 55.9199 mo
274.096 58.23 li
271.325 52.5498 mo
271.325 54.8599 li
268.415 48.0601 mo
268.415 50.3701 li
@
279.056 66.3599 mo
279.056 62.3599 li
283.056 62.3599 li
283.056 66.3599 li
279.056 66.3599 li
279.056 66.3599 li
cp
1 1 1 rgb
f
282.096 71.1699 mo
282.096 67.1699 li
286.096 67.1699 li
286.096 71.1699 li
282.096 71.1699 li
282.096 71.1699 li
cp
f
285.495 76.02 mo
285.495 72.02 li
289.495 72.02 li
289.495 76.02 li
285.495 76.02 li
285.495 76.02 li
cp
f
289.396 82.4399 mo
289.396 78.4399 li
293.396 78.4399 li
293.396 82.4399 li
289.396 82.4399 li
289.396 82.4399 li
cp
f
292.726 88.6899 mo
292.726 84.6899 li
296.726 84.6899 li
296.726 88.6899 li
292.726 88.6899 li
292.726 88.6899 li
cp
f
296.795 95.2798 mo
296.795 91.2798 li
300.795 91.2798 li
300.795 95.2798 li
296.795 95.2798 li
296.795 95.2798 li
cp
f
301.005 101.39 mo
301.005 97.3901 li
305.005 97.3901 li
305.005 101.39 li
301.005 101.39 li
301.005 101.39 li
cp
f
305.705 108.32 mo
305.705 104.32 li
309.705 104.32 li
309.705 108.32 li
305.705 108.32 li
305.705 108.32 li
cp
f
310.495 115.09 mo
310.495 111.09 li
314.495 111.09 li
314.495 115.09 li
310.495 115.09 li
310.495 115.09 li
cp
f
316.176 124.27 mo
316.176 120.27 li
320.176 120.27 li
320.176 124.27 li
316.176 124.27 li
316.176 124.27 li
cp
f
322.115 133.89 mo
322.115 129.89 li
326.115 129.89 li
326.115 133.89 li
322.115 133.89 li
322.115 133.89 li
cp
f
329.136 144.82 mo
329.136 140.82 li
333.136 140.82 li
333.136 144.82 li
329.136 144.82 li
329.136 144.82 li
cp
f
335.695 158.32 mo
335.695 154.32 li
339.695 154.32 li
339.695 158.32 li
335.695 158.32 li
335.695 158.32 li
cp
f
344.426 174.47 mo
344.426 170.47 li
348.426 170.47 li
348.426 174.47 li
344.426 174.47 li
344.426 174.47 li
cp
f
354.085 194.05 mo
354.085 190.05 li
358.085 190.05 li
358.085 194.05 li
354.085 194.05 li
354.085 194.05 li
cp
f
423.195 14.96 mo
411.195 14.96 li
423.195 14.96 mo
417.195 14.96 li
423.195 17.1602 mo
417.195 17.1602 li
423.195 19.6299 mo
417.195 19.6299 li
423.195 22.4199 mo
417.195 22.4199 li
423.195 25.6499 mo
417.195 25.6499 li
423.195 29.4697 mo
417.195 29.4697 li
423.195 34.1401 mo
417.195 34.1401 li
423.195 40.1602 mo
417.195 40.1602 li
423.195 48.6401 mo
417.195 48.6401 li
423.195 63.1499 mo
411.195 63.1499 li
423.195 63.1499 mo
417.195 63.1499 li
423.195 65.3599 mo
417.195 65.3599 li
423.195 67.8198 mo
417.195 67.8198 li
423.195 70.6201 mo
417.195 70.6201 li
423.195 73.8398 mo
417.195 73.8398 li
423.195 77.6602 mo
417.195 77.6602 li
423.195 82.3301 mo
417.195 82.3301 li
423.195 88.3501 mo
417.195 88.3501 li
423.195 96.8398 mo
417.195 96.8398 li
423.195 111.34 mo
411.195 111.34 li
423.195 111.34 mo
417.195 111.34 li
423.195 113.55 mo
417.195 113.55 li
423.195 116.01 mo
417.195 116.01 li
423.195 118.81 mo
417.195 118.81 li
423.195 122.04 mo
417.195 122.04 li
423.195 125.85 mo
417.195 125.85 li
423.195 130.52 mo
417.195 130.52 li
423.195 136.54 mo
417.195 136.54 li
423.195 145.03 mo
417.195 145.03 li
423.195 159.54 mo
411.195 159.54 li
423.195 159.54 mo
417.195 159.54 li
423.195 161.74 mo
417.195 161.74 li
423.195 164.21 mo
417.195 164.21 li
423.195 167 mo
417.195 167 li
423.195 170.23 mo
417.195 170.23 li
423.195 174.04 mo
417.195 174.04 li
423.195 178.71 mo
417.195 178.71 li
423.195 184.74 mo
417.195 184.74 li
423.195 193.22 mo
417.195 193.22 li
423.195 207.73 mo
411.195 207.73 li
423.195 207.73 mo
417.195 207.73 li
423.195 209.93 mo
417.195 209.93 li
423.195 212.4 mo
417.195 212.4 li
423.195 215.19 mo
417.195 215.19 li
423.195 218.42 mo
417.195 218.42 li
423.195 222.24 mo
417.195 222.24 li
423.195 226.91 mo
417.195 226.91 li
423.195 232.93 mo
417.195 232.93 li
423.195 241.41 mo
417.195 241.41 li
423.195 255.92 mo
411.195 255.92 li
423.195 255.92 mo
417.195 255.92 li
423.195 258.13 mo
417.195 258.13 li
423.195 260.59 mo
417.195 260.59 li
423.195 263.39 mo
417.195 263.39 li
423.195 266.61 mo
417.195 266.61 li
423.195 270.43 mo
417.195 270.43 li
423.195 275.1 mo
417.195 275.1 li
423.195 281.12 mo
417.195 281.12 li
423.195 289.61 mo
417.195 289.61 li
423.195 304.11 mo
411.195 304.11 li
423.195 304.11 mo
417.195 304.11 li
423.195 306.32 mo
417.195 306.32 li
423.195 308.78 mo
417.195 308.78 li
423.195 311.58 mo
417.195 311.58 li
423.195 314.81 mo
417.195 314.81 li
423.195 318.62 mo
417.195 318.62 li
423.195 323.29 mo
417.195 323.29 li
423.195 329.31 mo
417.195 329.31 li
423.195 337.8 mo
417.195 337.8 li
423.195 352.31 mo
411.195 352.31 li
423.195 352.31 mo
417.195 352.31 li
423.195 354.51 mo
417.195 354.51 li
423.195 356.98 mo
417.195 356.98 li
423.195 359.77 mo
417.195 359.77 li
423.195 363 mo
417.195 363 li
423.195 366.81 mo
417.195 366.81 li
423.195 371.48 mo
417.195 371.48 li
423.195 377.51 mo
417.195 377.51 li
423.195 385.99 mo
417.195 385.99 li
423.195 400.5 mo
411.195 400.5 li
423.195 400.5 mo
417.195 400.5 li
423.195 400.5 mo
423.195 0.5 li
73.1953 14.96 mo
85.1953 14.96 li
73.1953 14.96 mo
79.1953 14.96 li
73.1953 17.1602 mo
79.1953 17.1602 li
73.1953 19.6299 mo
79.1953 19.6299 li
73.1953 22.4199 mo
79.1953 22.4199 li
73.1953 25.6499 mo
79.1953 25.6499 li
73.1953 29.4697 mo
79.1953 29.4697 li
73.1953 34.1401 mo
79.1953 34.1401 li
73.1953 40.1602 mo
79.1953 40.1602 li
73.1953 48.6401 mo
79.1953 48.6401 li
73.1953 63.1499 mo
85.1953 63.1499 li
73.1953 63.1499 mo
79.1953 63.1499 li
73.1953 65.3599 mo
79.1953 65.3599 li
73.1953 67.8198 mo
79.1953 67.8198 li
73.1953 70.6201 mo
79.1953 70.6201 li
73.1953 73.8398 mo
79.1953 73.8398 li
73.1953 77.6602 mo
79.1953 77.6602 li
73.1953 82.3301 mo
79.1953 82.3301 li
73.1953 88.3501 mo
79.1953 88.3501 li
73.1953 96.8398 mo
79.1953 96.8398 li
73.1953 111.34 mo
85.1953 111.34 li
73.1953 111.34 mo
79.1953 111.34 li
73.1953 113.55 mo
79.1953 113.55 li
73.1953 116.01 mo
79.1953 116.01 li
73.1953 118.81 mo
79.1953 118.81 li
73.1953 122.04 mo
79.1953 122.04 li
73.1953 125.85 mo
79.1953 125.85 li
73.1953 130.52 mo
79.1953 130.52 li
73.1953 136.54 mo
79.1953 136.54 li
73.1953 145.03 mo
79.1953 145.03 li
73.1953 159.54 mo
85.1953 159.54 li
73.1953 159.54 mo
79.1953 159.54 li
73.1953 161.74 mo
79.1953 161.74 li
73.1953 164.21 mo
79.1953 164.21 li
73.1953 167 mo
79.1953 167 li
73.1953 170.23 mo
79.1953 170.23 li
73.1953 174.04 mo
79.1953 174.04 li
73.1953 178.71 mo
79.1953 178.71 li
73.1953 184.74 mo
79.1953 184.74 li
73.1953 193.22 mo
79.1953 193.22 li
73.1953 207.73 mo
85.1953 207.73 li
73.1953 207.73 mo
79.1953 207.73 li
73.1953 209.93 mo
79.1953 209.93 li
73.1953 212.4 mo
79.1953 212.4 li
73.1953 215.19 mo
79.1953 215.19 li
73.1953 218.42 mo
79.1953 218.42 li
73.1953 222.24 mo
79.1953 222.24 li
73.1953 226.91 mo
79.1953 226.91 li
73.1953 232.93 mo
79.1953 232.93 li
73.1953 241.41 mo
79.1953 241.41 li
73.1953 255.92 mo
85.1953 255.92 li
73.1953 255.92 mo
79.1953 255.92 li
73.1953 258.13 mo
79.1953 258.13 li
73.1953 260.59 mo
79.1953 260.59 li
73.1953 263.39 mo
79.1953 263.39 li
73.1953 266.61 mo
79.1953 266.61 li
73.1953 270.43 mo
79.1953 270.43 li
73.1953 275.1 mo
79.1953 275.1 li
73.1953 281.12 mo
79.1953 281.12 li
73.1953 289.61 mo
79.1953 289.61 li
73.1953 304.11 mo
85.1953 304.11 li
73.1953 304.11 mo
79.1953 304.11 li
73.1953 306.32 mo
79.1953 306.32 li
73.1953 308.78 mo
79.1953 308.78 li
73.1953 311.58 mo
79.1953 311.58 li
73.1953 314.81 mo
79.1953 314.81 li
73.1953 318.62 mo
79.1953 318.62 li
73.1953 323.29 mo
79.1953 323.29 li
73.1953 329.31 mo
79.1953 329.31 li
73.1953 337.8 mo
79.1953 337.8 li
73.1953 352.31 mo
85.1953 352.31 li
73.1953 352.31 mo
79.1953 352.31 li
73.1953 354.51 mo
79.1953 354.51 li
73.1953 356.98 mo
79.1953 356.98 li
73.1953 359.77 mo
79.1953 359.77 li
73.1953 363 mo
79.1953 363 li
73.1953 366.81 mo
79.1953 366.81 li
73.1953 371.48 mo
79.1953 371.48 li
73.1953 377.51 mo
79.1953 377.51 li
73.1953 385.99 mo
79.1953 385.99 li
73.1953 400.5 mo
85.1953 400.5 li
73.1953 400.5 mo
79.1953 400.5 li
73.1953 400.5 mo
73.1953 0.5 li
419.995 0.5 mo
419.995 6.5 li
395.335 0.5 mo
395.335 6.5 li
353.195 0.5 mo
353.195 12.5 li
353.195 0.5 mo
353.195 6.5 li
346.785 0.5 mo
346.785 6.5 li
339.625 0.5 mo
339.625 6.5 li
331.505 0.5 mo
331.505 6.5 li
322.136 0.5 mo
322.136 6.5 li
311.056 0.5 mo
311.056 6.5 li
297.485 0.5 mo
297.485 6.5 li
279.995 0.5 mo
279.995 6.5 li
255.335 0.5 mo
255.335 6.5 li
213.195 0.5 mo
213.195 12.5 li
213.195 0.5 mo
213.195 6.5 li
206.785 0.5 mo
206.785 6.5 li
199.625 0.5 mo
199.625 6.5 li
191.505 0.5 mo
191.505 6.5 li
182.135 0.5 mo
182.135 6.5 li
171.055 0.5 mo
171.055 6.5 li
157.485 0.5 mo
157.485 6.5 li
139.995 0.5 mo
139.995 6.5 li
115.335 0.5 mo
115.335 6.5 li
73.1953 0.5 mo
73.1953 12.5 li
73.1953 0.5 mo
73.1953 6.5 li
73.1953 0.5 mo
423.195 0.5 li
354.085 194.05 mo
354.085 190.05 li
358.085 190.05 li
358.085 194.05 li
354.085 194.05 li
344.426 174.47 mo
344.426 170.47 li
348.426 170.47 li
348.426 174.47 li
344.426 174.47 li
335.695 158.32 mo
335.695 154.32 li
339.695 154.32 li
339.695 158.32 li
335.695 158.32 li
329.136 144.82 mo
329.136 140.82 li
333.136 140.82 li
333.136 144.82 li
329.136 144.82 li
322.115 133.89 mo
322.115 129.89 li
326.115 129.89 li
326.115 133.89 li
322.115 133.89 li
316.176 124.27 mo
316.176 120.27 li
320.176 120.27 li
320.176 124.27 li
316.176 124.27 li
310.495 115.09 mo
310.495 111.09 li
314.495 111.09 li
314.495 115.09 li
310.495 115.09 li
305.705 108.32 mo
305.705 104.32 li
309.705 104.32 li
309.705 108.32 li
305.705 108.32 li
301.005 101.39 mo
301.005 97.3901 li
305.005 97.3901 li
305.005 101.39 li
301.005 101.39 li
296.795 95.2798 mo
296.795 91.2798 li
300.795 91.2798 li
300.795 95.2798 li
296.795 95.2798 li
292.726 88.6899 mo
292.726 84.6899 li
296.726 84.6899 li
296.726 88.6899 li
292.726 88.6899 li
289.396 82.4399 mo
289.396 78.4399 li
293.396 78.4399 li
293.396 82.4399 li
289.396 82.4399 li
285.495 76.02 mo
285.495 72.02 li
289.495 72.02 li
289.495 76.02 li
285.495 76.02 li
282.096 71.1699 mo
282.096 67.1699 li
286.096 67.1699 li
286.096 71.1699 li
282.096 71.1699 li
279.056 66.3599 mo
279.056 62.3599 li
283.056 62.3599 li
283.056 66.3599 li
279.056 66.3599 li
0 0 0 rgb
@
0.719 lw
39.3354 404.27 mo
40.1753 403.85 li
40.5854 403.43 li
41.0054 402.6 li
41.4253 400.5 li
41.4253 399.24 li
41.0054 397.15 li
40.5854 396.31 li
40.1753 395.89 li
39.3354 395.47 li
38.4951 395.47 mo
37.2354 395.89 li
36.3955 397.15 li
35.9751 399.24 li
35.9751 400.5 li
36.3955 402.6 li
37.2354 403.85 li
38.4951 404.27 li
39.3354 404.27 li
40.5854 403.85 li
41.4253 402.6 li
41.8452 400.5 li
41.8452 399.24 li
41.4253 397.15 li
40.5854 395.89 li
39.3354 395.47 li
38.4951 395.47 li
37.6553 395.89 li
37.2354 396.31 li
36.8154 397.15 li
36.3955 399.24 li
36.3955 400.5 li
36.8154 402.6 li
37.2354 403.43 li
37.6553 403.85 li
38.4951 404.27 li
28.8555 404.27 mo
32.6255 404.27 li
30.5352 395.89 mo
30.5352 404.27 li
28.8555 397.15 mo
29.6953 396.73 li
30.9551 395.47 li
30.9551 404.27 li
@
0.551 lw
43.8555 393.8 mo
48.3853 393.8 li
@
0.719 lw
39.3354 307.89 mo
40.1753 307.47 li
40.5854 307.05 li
41.0054 306.21 li
41.4253 304.11 li
41.4253 302.86 li
41.0054 300.76 li
40.5854 299.92 li
40.1753 299.5 li
39.3354 299.09 li
38.4951 299.09 mo
37.2354 299.5 li
36.3955 300.76 li
35.9751 302.86 li
35.9751 304.11 li
36.3955 306.21 li
37.2354 307.47 li
38.4951 307.89 li
39.3354 307.89 li
40.5854 307.47 li
41.4253 306.21 li
41.8452 304.11 li
41.8452 302.86 li
41.4253 300.76 li
40.5854 299.5 li
39.3354 299.09 li
38.4951 299.09 li
37.6553 299.5 li
37.2354 299.92 li
36.8154 300.76 li
36.3955 302.86 li
36.3955 304.11 li
36.8154 306.21 li
37.2354 307.05 li
37.6553 307.47 li
38.4951 307.89 li
28.8555 307.89 mo
32.6255 307.89 li
30.5352 299.5 mo
30.5352 307.89 li
28.8555 300.76 mo
29.6953 300.34 li
30.9551 299.09 li
30.9551 307.89 li
@
0.551 lw
43.8555 297.41 mo
48.3853 297.41 li
@
0.719 lw
39.3354 211.5 mo
40.1753 211.08 li
40.5854 210.66 li
41.0054 209.82 li
41.4253 207.73 li
41.4253 206.47 li
41.0054 204.38 li
40.5854 203.54 li
40.1753 203.12 li
39.3354 202.7 li
38.4951 202.7 mo
37.2354 203.12 li
36.3955 204.38 li
35.9751 206.47 li
35.9751 207.73 li
36.3955 209.82 li
37.2354 211.08 li
38.4951 211.5 li
39.3354 211.5 li
40.5854 211.08 li
41.4253 209.82 li
41.8452 207.73 li
41.8452 206.47 li
41.4253 204.38 li
40.5854 203.12 li
39.3354 202.7 li
38.4951 202.7 li
37.6553 203.12 li
37.2354 203.54 li
36.8154 204.38 li
36.3955 206.47 li
36.3955 207.73 li
36.8154 209.82 li
37.2354 210.66 li
37.6553 211.08 li
38.4951 211.5 li
28.8555 211.5 mo
32.6255 211.5 li
30.5352 203.12 mo
30.5352 211.5 li
28.8555 204.38 mo
29.6953 203.96 li
30.9551 202.7 li
30.9551 211.5 li
@
0.551 lw
43.8555 201.02 mo
48.3853 201.02 li
@
0.719 lw
44.3652 115.11 mo
45.1953 114.7 li
45.6152 114.28 li
46.0352 113.44 li
46.4551 111.34 li
46.4551 110.09 li
46.0352 107.99 li
45.6152 107.15 li
45.1953 106.73 li
44.3652 106.31 li
43.5254 106.31 mo
42.2651 106.73 li
41.4253 107.99 li
41.0054 110.09 li
41.0054 111.34 li
41.4253 113.44 li
42.2651 114.7 li
43.5254 115.11 li
44.3652 115.11 li
45.6152 114.7 li
46.4551 113.44 li
46.8755 111.34 li
46.8755 110.09 li
46.4551 107.99 li
45.6152 106.73 li
44.3652 106.31 li
43.5254 106.31 li
42.6855 106.73 li
42.2651 107.15 li
41.8452 107.99 li
41.4253 110.09 li
41.4253 111.34 li
41.8452 113.44 li
42.2651 114.28 li
42.6855 114.7 li
43.5254 115.11 li
33.8853 115.11 mo
37.6553 115.11 li
35.5654 106.73 mo
35.5654 115.11 li
33.8853 107.99 mo
34.7251 107.57 li
35.9751 106.31 li
35.9751 115.11 li
@
0.551 lw
48.8853 104.64 mo
53.4155 104.64 li
@
0.719 lw
44.3652 18.73 mo
45.1953 18.3101 li
45.6152 17.8901 li
46.0352 17.0498 li
46.4551 14.96 li
46.4551 13.7002 li
46.0352 11.6099 li
45.6152 10.77 li
45.1953 10.3501 li
44.3652 9.93018 li
43.5254 9.93018 mo
42.2651 10.3501 li
41.4253 11.6099 li
41.0054 13.7002 li
41.0054 14.96 li
41.4253 17.0498 li
42.2651 18.3101 li
43.5254 18.73 li
44.3652 18.73 li
45.6152 18.3101 li
46.4551 17.0498 li
46.8755 14.96 li
46.8755 13.7002 li
46.4551 11.6099 li
45.6152 10.3501 li
44.3652 9.93018 li
43.5254 9.93018 li
42.6855 10.3501 li
42.2651 10.77 li
41.8452 11.6099 li
41.4253 13.7002 li
41.4253 14.96 li
41.8452 17.0498 li
42.2651 17.8901 li
42.6855 18.3101 li
43.5254 18.73 li
33.8853 18.73 mo
37.6553 18.73 li
35.5654 10.3501 mo
35.5654 18.73 li
33.8853 11.6099 mo
34.7251 11.1899 li
35.9751 9.93018 li
35.9751 18.73 li
@
0.551 lw
48.8853 8.25 mo
53.4155 8.25 li
@
0.719 lw
13.7651 170.61 mo
13.7651 167.68 li
13.7651 175.22 mo
13.7651 172.28 li
13.7651 179.83 mo
13.7651 176.89 li
7.89551 179.83 mo
7.89551 178.15 li
7.89551 170.61 mo
8.31543 169.77 li
9.15527 169.35 li
13.7651 169.35 li
9.15527 173.54 mo
8.31543 172.7 li
7.89551 171.45 li
7.89551 170.61 li
8.31543 169.35 li
9.15527 168.93 li
13.7651 168.93 li
7.89551 175.22 mo
8.31543 174.38 li
9.15527 173.96 li
13.7651 173.96 li
9.15527 178.15 mo
8.31543 177.31 li
7.89551 176.06 li
7.89551 175.22 li
8.31543 173.96 li
9.15527 173.54 li
13.7651 173.54 li
7.89551 178.15 mo
13.7651 178.15 li
7.89551 178.57 mo
13.7651 178.57 li
4.12549 183.72 mo
5.80518 184.56 li
7.06543 184.98 li
9.15527 185.4 li
10.8354 185.4 li
12.9253 184.98 li
14.1855 184.56 li
15.8652 183.72 li
3.29541 182.88 mo
4.12549 183.72 li
5.38525 184.56 li
7.06543 185.4 li
9.15527 185.82 li
10.8354 185.82 li
12.9253 185.4 li
14.6055 184.56 li
15.8652 183.72 li
16.6953 182.88 li
7.89551 197.97 mo
7.89551 195.46 li
7.89551 203 mo
7.89551 200.07 li
7.89551 196.71 mo
13.7651 199.23 li
15.4453 200.07 li
16.2852 200.9 li
16.6953 201.74 li
16.6953 202.16 li
16.2852 202.58 li
15.8652 202.16 li
16.2852 201.74 li
7.89551 201.32 mo
12.9253 199.23 li
7.89551 201.74 mo
13.7651 199.23 li
7.89551 208.87 mo
7.89551 205.51 li
4.96533 207.19 mo
12.0952 207.19 li
13.3452 206.77 li
13.7651 206.35 li
4.96533 207.61 mo
12.0952 207.61 li
13.3452 207.19 li
13.7651 206.35 li
13.7651 205.51 li
13.3452 204.68 li
12.5054 204.26 li
13.7651 213.48 mo
13.7651 210.54 li
7.89551 213.48 mo
7.89551 211.8 li
7.89551 211.8 mo
13.7651 211.8 li
7.89551 212.22 mo
13.7651 212.22 li
4.96533 212.22 mo
5.38525 212.64 li
5.80518 212.22 li
5.38525 211.8 li
4.96533 212.22 li
9.15527 220.18 mo
9.5752 219.76 li
9.99512 218.92 li
10.8354 216.83 li
11.2554 215.99 li
12.0952 215.57 li
12.9253 215.57 li
13.3452 215.99 li
13.7651 217.25 li
13.7651 218.5 li
13.3452 219.76 li
12.5054 220.18 li
13.7651 220.18 li
13.3452 219.76 li
8.31543 215.99 mo
7.89551 215.57 li
9.15527 215.57 li
8.31543 215.99 li
7.89551 217.25 li
7.89551 218.5 li
8.31543 219.76 li
8.73535 220.18 li
9.15527 220.18 li
9.99512 219.76 li
10.4155 218.92 li
11.2554 216.83 li
11.6753 215.99 li
12.0952 215.57 li
13.7651 225.21 mo
13.7651 222.28 li
13.7651 229.82 mo
13.7651 226.88 li
7.89551 229.82 mo
7.89551 228.14 li
7.89551 225.21 mo
8.31543 224.37 li
9.15527 223.95 li
13.7651 223.95 li
9.15527 228.14 mo
8.31543 227.3 li
7.89551 226.05 li
7.89551 225.21 li
8.31543 223.95 li
9.15527 223.53 li
13.7651 223.53 li
7.89551 228.14 mo
13.7651 228.14 li
7.89551 228.56 mo
13.7651 228.56 li
7.89551 234.85 mo
8.31543 235.68 li
9.15527 236.52 li
10.4155 236.94 li
11.2554 236.94 li
12.5054 236.52 li
13.3452 235.68 li
13.7651 234.85 li
10.4155 232.33 mo
9.15527 232.33 li
8.31543 232.75 li
10.4155 236.94 mo
10.4155 231.91 li
9.5752 231.91 li
8.73535 232.33 li
8.31543 232.75 li
7.89551 233.59 li
7.89551 234.85 li
8.31543 236.1 li
9.15527 236.94 li
10.4155 237.36 li
11.2554 237.36 li
12.5054 236.94 li
13.3452 236.1 li
13.7651 234.85 li
13.7651 234.01 li
13.3452 232.75 li
12.5054 231.91 li
7.89551 244.07 mo
7.89551 240.71 li
4.96533 242.39 mo
12.0952 242.39 li
13.3452 241.97 li
13.7651 241.55 li
4.96533 242.81 mo
12.0952 242.81 li
13.3452 242.39 li
13.7651 241.55 li
13.7651 240.71 li
13.3452 239.88 li
12.5054 239.46 li
13.7651 248.68 mo
13.7651 245.74 li
13.7651 253.28 mo
13.7651 250.35 li
7.89551 253.28 mo
7.89551 251.61 li
7.89551 248.68 mo
8.31543 247.84 li
9.15527 247.42 li
13.7651 247.42 li
9.15527 251.61 mo
8.31543 250.77 li
7.89551 249.51 li
7.89551 248.68 li
8.31543 247.42 li
9.15527 247 li
13.7651 247 li
7.89551 251.61 mo
13.7651 251.61 li
7.89551 252.03 mo
13.7651 252.03 li
13.7651 257.89 mo
13.7651 254.96 li
7.89551 257.89 mo
7.89551 256.22 li
7.89551 256.22 mo
13.7651 256.22 li
7.89551 256.64 mo
13.7651 256.64 li
4.96533 256.64 mo
5.38525 257.06 li
5.80518 256.64 li
5.38525 256.22 li
4.96533 256.64 li
13.7651 270.05 mo
13.7651 267.11 li
4.96533 270.05 mo
4.96533 268.37 li
4.96533 268.37 mo
13.7651 268.37 li
4.96533 268.79 mo
13.7651 268.79 li
10.4155 276.33 mo
10.8354 277.17 li
11.6753 277.59 li
12.5054 277.59 li
13.3452 277.17 li
13.7651 276.33 li
9.5752 273.4 mo
9.99512 273.82 li
10.4155 276.33 li
10.8354 277.59 li
11.6753 278.01 li
12.5054 278.01 li
13.3452 277.59 li
13.7651 276.33 li
13.7651 275.08 li
13.3452 274.24 li
12.5054 273.4 li
8.73535 273.4 mo
12.5054 273.4 li
13.3452 272.98 li
13.7651 272.14 li
13.7651 271.72 li
8.73535 277.17 mo
9.15527 277.17 li
9.15527 277.59 li
8.73535 277.59 li
8.31543 277.17 li
7.89551 276.33 li
7.89551 274.66 li
8.31543 273.82 li
8.73535 273.4 li
9.5752 272.98 li
12.5054 272.98 li
13.3452 272.56 li
13.7651 272.14 li
7.89551 283.46 mo
8.31543 284.29 li
9.15527 285.13 li
10.4155 285.55 li
11.2554 285.55 li
12.5054 285.13 li
13.3452 284.29 li
13.7651 283.46 li
9.15527 280.94 mo
9.5752 281.36 li
9.99512 280.94 li
9.5752 280.52 li
9.15527 280.52 li
8.31543 281.36 li
7.89551 282.2 li
7.89551 283.46 li
8.31543 284.71 li
9.15527 285.55 li
10.4155 285.97 li
11.2554 285.97 li
12.5054 285.55 li
13.3452 284.71 li
13.7651 283.46 li
13.7651 282.62 li
13.3452 281.36 li
12.5054 280.52 li
13.7651 291 mo
13.7651 288.07 li
7.89551 291 mo
7.89551 289.32 li
7.89551 289.32 mo
13.7651 289.32 li
7.89551 289.74 mo
13.7651 289.74 li
4.96533 289.74 mo
5.38525 290.16 li
5.80518 289.74 li
5.38525 289.32 li
4.96533 289.74 li
7.89551 297.28 mo
7.89551 293.93 li
4.96533 295.61 mo
12.0952 295.61 li
13.3452 295.19 li
13.7651 294.77 li
4.96533 296.03 mo
12.0952 296.03 li
13.3452 295.61 li
13.7651 294.77 li
13.7651 293.93 li
13.3452 293.09 li
12.5054 292.68 li
13.7651 304.41 mo
13.7651 301.48 li
7.89551 304.41 mo
7.89551 302.73 li
10.4155 302.73 mo
9.15527 302.31 li
8.31543 301.48 li
7.89551 300.64 li
7.89551 299.38 li
8.31543 298.96 li
8.73535 298.96 li
9.15527 299.38 li
8.73535 299.8 li
8.31543 299.38 li
7.89551 302.73 mo
13.7651 302.73 li
7.89551 303.15 mo
13.7651 303.15 li
7.89551 309.44 mo
8.31543 310.28 li
9.15527 311.11 li
10.4155 311.53 li
11.2554 311.53 li
12.5054 311.11 li
13.3452 310.28 li
13.7651 309.44 li
10.4155 306.92 mo
9.15527 306.92 li
8.31543 307.34 li
10.4155 311.53 mo
10.4155 306.5 li
9.5752 306.5 li
8.73535 306.92 li
8.31543 307.34 li
7.89551 308.18 li
7.89551 309.44 li
8.31543 310.69 li
9.15527 311.53 li
10.4155 311.95 li
11.2554 311.95 li
12.5054 311.53 li
13.3452 310.69 li
13.7651 309.44 li
13.7651 308.6 li
13.3452 307.34 li
12.5054 306.5 li
7.89551 316.14 mo
7.89551 313.63 li
7.89551 321.17 mo
7.89551 318.24 li
7.89551 314.88 mo
13.7651 317.4 li
7.89551 319.49 mo
12.9253 317.4 li
7.89551 319.91 mo
13.7651 317.4 li
290.575 438.63 mo
291.415 440.31 li
291.835 441.57 li
292.255 443.66 li
292.255 445.34 li
291.835 447.43 li
291.415 448.69 li
290.575 450.37 li
289.735 437.8 mo
290.575 438.63 li
291.415 439.89 li
292.255 441.57 li
292.676 443.66 li
292.676 445.34 li
292.255 447.43 li
291.415 449.11 li
290.575 450.37 li
289.735 451.2 li
286.806 447.43 mo
286.386 447.85 li
286.806 448.27 li
287.226 447.85 li
286.806 447.43 li
280.936 442.4 mo
280.096 442.82 li
279.266 443.66 li
278.846 444.92 li
278.846 445.76 li
279.266 447.01 li
280.096 447.85 li
280.936 448.27 li
283.455 444.92 mo
283.455 443.66 li
283.035 442.82 li
278.846 444.92 mo
283.875 444.92 li
283.875 444.08 li
283.455 443.24 li
283.035 442.82 li
282.195 442.4 li
280.936 442.4 li
279.686 442.82 li
278.846 443.66 li
278.426 444.92 li
278.426 445.76 li
278.846 447.01 li
279.686 447.85 li
280.936 448.27 li
281.775 448.27 li
283.035 447.85 li
283.875 447.01 li
275.495 447.43 mo
275.075 447.85 li
275.495 448.27 li
275.905 447.85 li
275.495 447.43 li
270.465 442.4 mo
272.976 442.4 li
263.755 442.4 mo
266.695 442.4 li
271.715 442.4 mo
270.045 448.27 li
268.785 442.4 mo
270.045 447.01 li
268.365 442.4 mo
270.045 448.27 li
268.365 442.4 mo
266.695 448.27 li
265.436 442.4 mo
266.695 447.01 li
265.016 442.4 mo
266.695 448.27 li
261.245 447.43 mo
260.825 447.85 li
261.245 448.27 li
261.665 447.85 li
261.245 447.43 li
255.795 448.27 mo
258.726 448.27 li
251.186 448.27 mo
254.115 448.27 li
246.575 448.27 mo
249.505 448.27 li
246.575 442.4 mo
248.255 442.4 li
255.795 442.4 mo
256.636 442.82 li
257.056 443.66 li
257.056 448.27 li
252.865 443.66 mo
253.695 442.82 li
254.955 442.4 li
255.795 442.4 li
257.056 442.82 li
257.476 443.66 li
257.476 448.27 li
251.186 442.4 mo
252.025 442.82 li
252.445 443.66 li
252.445 448.27 li
248.255 443.66 mo
249.096 442.82 li
250.346 442.4 li
251.186 442.4 li
252.445 442.82 li
252.865 443.66 li
252.865 448.27 li
248.255 442.4 mo
248.255 448.27 li
247.835 442.4 mo
247.835 448.27 li
241.965 448.27 mo
244.896 448.27 li
237.355 448.27 mo
240.295 448.27 li
241.965 442.4 mo
244.485 442.4 li
237.355 439.47 mo
239.035 439.47 li
240.705 444.92 mo
243.226 448.27 li
241.125 444.92 mo
243.646 448.27 li
243.226 442.4 mo
239.035 446.6 li
239.035 439.47 mo
239.035 448.27 li
238.615 439.47 mo
238.615 448.27 li
234.426 438.63 mo
233.585 440.31 li
233.165 441.57 li
232.745 443.66 li
232.745 445.34 li
233.165 447.43 li
233.585 448.69 li
234.426 450.37 li
235.266 437.8 mo
234.426 438.63 li
233.585 439.89 li
232.745 441.57 li
232.325 443.66 li
232.325 445.34 li
232.745 447.43 li
233.585 449.11 li
234.426 450.37 li
235.266 451.2 li
219.335 448.27 mo
222.275 448.27 li
214.726 448.27 mo
217.665 448.27 li
214.726 439.47 mo
216.405 439.47 li
219.335 442.4 mo
220.176 442.82 li
220.596 443.66 li
220.596 448.27 li
216.405 443.66 mo
217.245 442.82 li
218.495 442.4 li
219.335 442.4 li
220.596 442.82 li
221.016 443.66 li
221.016 448.27 li
216.405 439.47 mo
216.405 448.27 li
215.985 439.47 mo
215.985 448.27 li
208.445 442.4 mo
211.795 442.4 li
210.115 439.47 mo
210.115 446.6 li
210.535 447.85 li
210.955 448.27 li
209.695 439.47 mo
209.695 446.6 li
210.115 447.85 li
210.955 448.27 li
211.795 448.27 li
212.635 447.85 li
213.056 447.01 li
199.646 451.2 mo
202.575 451.2 li
199.646 442.4 mo
201.315 442.4 li
203.835 442.4 mo
204.675 442.82 li
205.505 443.66 li
205.925 444.92 li
205.925 445.76 li
205.505 447.01 li
204.675 447.85 li
203.835 448.27 li
201.315 443.66 mo
202.155 442.82 li
202.995 442.4 li
203.835 442.4 li
205.095 442.82 li
205.925 443.66 li
206.345 444.92 li
206.345 445.76 li
205.925 447.01 li
205.095 447.85 li
203.835 448.27 li
202.995 448.27 li
202.155 447.85 li
201.315 447.01 li
201.315 442.4 mo
201.315 451.2 li
200.896 442.4 mo
200.896 451.2 li
194.615 442.4 mo
193.775 442.82 li
192.936 443.66 li
192.515 444.92 li
192.515 445.76 li
192.936 447.01 li
193.775 447.85 li
194.615 448.27 li
197.125 444.92 mo
197.125 443.66 li
196.705 442.82 li
192.515 444.92 mo
197.545 444.92 li
197.545 444.08 li
197.125 443.24 li
196.705 442.82 li
195.875 442.4 li
194.615 442.4 li
193.355 442.82 li
192.515 443.66 li
192.095 444.92 li
192.095 445.76 li
192.515 447.01 li
193.355 447.85 li
194.615 448.27 li
195.455 448.27 li
196.705 447.85 li
197.545 447.01 li
188.325 448.27 mo
190.005 448.27 li
187.075 439.47 mo
188.745 439.47 li
185.815 442.4 mo
184.975 442.82 li
184.135 443.66 li
183.715 444.92 li
183.715 445.76 li
184.135 447.01 li
184.975 447.85 li
185.815 448.27 li
188.325 443.66 mo
187.495 442.82 li
186.655 442.4 li
185.815 442.4 li
184.555 442.82 li
183.715 443.66 li
183.295 444.92 li
183.295 445.76 li
183.715 447.01 li
184.555 447.85 li
185.815 448.27 li
186.655 448.27 li
187.495 447.85 li
188.325 447.01 li
188.745 439.47 mo
188.745 448.27 li
188.325 439.47 mo
188.325 448.27 li
@
0.551 lw
4.79541 159.29 mo
5.55518 158.04 li
5.55518 157.03 li
5.30518 156.78 li
4.79541 156.53 li
4.29541 156.53 li
5.05518 160.05 mo
4.79541 159.8 li
4.79541 159.29 li
5.30518 158.04 li
5.30518 157.28 li
5.05518 156.78 li
4.79541 156.53 li
0.275391 157.79 mo
0.525391 157.28 li
0.775391 157.03 li
1.27539 156.78 li
1.78516 156.78 li
2.28516 157.03 li
2.78516 157.79 li
3.29541 158.79 li
1.27539 159.8 mo
1.53516 159.55 li
1.78516 159.8 li
1.53516 160.05 li
1.27539 160.05 li
0.775391 159.8 li
0.525391 159.55 li
0.275391 158.79 li
0.275391 157.79 li
0.525391 157.03 li
0.775391 156.78 li
1.27539 156.53 li
1.78516 156.53 li
2.28516 156.78 li
2.78516 157.53 li
3.29541 158.79 li
3.54541 159.29 li
4.04541 159.8 li
4.79541 160.05 li
5.55518 160.05 li
3.29541 166.08 mo
3.29541 161.56 li
@
0.719 lw
9.15527 154.52 mo
9.5752 154.1 li
9.99512 153.26 li
10.8354 151.16 li
11.2554 150.33 li
12.0952 149.91 li
12.9253 149.91 li
13.3452 150.33 li
13.7651 151.58 li
13.7651 152.84 li
13.3452 154.1 li
12.5054 154.52 li
13.7651 154.52 li
13.3452 154.1 li
8.31543 150.33 mo
7.89551 149.91 li
9.15527 149.91 li
8.31543 150.33 li
7.89551 151.58 li
7.89551 152.84 li
8.31543 154.1 li
8.73535 154.52 li
9.15527 154.52 li
9.99512 154.1 li
10.4155 153.26 li
11.2554 151.16 li
11.6753 150.33 li
12.0952 149.91 li
@
0.551 lw
5.55518 141.11 mo
5.55518 138.84 li
0.525391 140.1 mo
5.55518 140.1 li
1.27539 141.11 mo
1.02539 140.6 li
0.275391 139.85 li
5.55518 139.85 li
3.29541 147.9 mo
3.29541 143.37 li
@
0.719 lw
13.7651 129.63 mo
13.7651 126.69 li
7.89551 129.63 mo
7.89551 127.95 li
10.4155 127.95 mo
9.15527 127.53 li
8.31543 126.69 li
7.89551 125.85 li
7.89551 124.6 li
8.31543 124.18 li
8.73535 124.18 li
9.15527 124.6 li
8.73535 125.02 li
8.31543 124.6 li
7.89551 127.95 mo
13.7651 127.95 li
7.89551 128.37 mo
13.7651 128.37 li
9.15527 136.33 mo
9.5752 135.91 li
9.99512 135.07 li
10.8354 132.98 li
11.2554 132.14 li
12.0952 131.72 li
12.9253 131.72 li
13.3452 132.14 li
13.7651 133.4 li
13.7651 134.65 li
13.3452 135.91 li
12.5054 136.33 li
13.7651 136.33 li
13.3452 135.91 li
8.31543 132.14 mo
7.89551 131.72 li
9.15527 131.72 li
8.31543 132.14 li
7.89551 133.4 li
7.89551 134.65 li
8.31543 135.91 li
8.73535 136.33 li
9.15527 136.33 li
9.99512 135.91 li
10.4155 135.07 li
11.2554 132.98 li
11.6753 132.14 li
12.0952 131.72 li
@
0.551 lw
5.55518 115.8 mo
5.55518 113.53 li
0.525391 114.79 mo
5.55518 114.79 li
1.27539 115.8 mo
1.02539 115.29 li
0.275391 114.54 li
5.55518 114.54 li
3.29541 122.59 mo
3.29541 118.06 li
@
0.719 lw
322.136 317.21 mo
322.136 337.76 li
255.335 325.05 mo
255.335 345.59 li
224.455 283.99 mo
224.455 320.74 li
223.295 283.99 mo
223.295 315.09 li
222.235 296.07 mo
222.235 351.01 li
221.035 296.07 mo
221.035 340.18 li
219.936 267.27 mo
219.936 286.36 li
218.815 296.07 mo
218.815 340.18 li
217.795 270.06 mo
217.795 292.59 li
216.636 265.41 mo
216.636 287.95 li
215.585 259.84 mo
215.585 275.84 li
214.646 257.05 mo
214.646 270.25 li
213.565 256.12 mo
213.565 269.33 li
212.595 250.55 mo
212.595 263.75 li
211.615 256.12 mo
211.615 269.33 li
210.615 245.9 mo
210.615 254.14 li
209.745 242.18 mo
209.745 252.82 li
208.715 242.18 mo
208.715 252.82 li
207.815 238.47 mo
207.815 246.71 li
206.905 235.68 mo
206.905 243.92 li
205.975 231.04 mo
205.975 239.28 li
205.195 229.18 mo
205.195 237.42 li
204.245 231.04 mo
204.245 239.28 li
203.275 231.96 mo
203.275 240.21 li
202.465 222.67 mo
202.465 214.23 li
201.635 226.391 mo
201.635 232.4 li
200.795 222.67 mo
200.795 214.23 li
199.945 217.1 mo
199.945 221 li
199.255 216.17 mo
199.255 220.07 li
198.555 220.82 mo
198.555 224.71 li
4.12549 110.18 mo
5.80518 109.34 li
7.06543 108.92 li
9.15527 108.51 li
10.8354 108.51 li
12.9253 108.92 li
14.1855 109.34 li
15.8652 110.18 li
3.29541 111.02 mo
4.12549 110.18 li
5.38525 109.34 li
7.06543 108.51 li
9.15527 108.09 li
10.8354 108.09 li
12.9253 108.51 li
14.6055 109.34 li
15.8652 110.18 li
16.6953 111.02 li
@
201.153 224.17 mo
198.555 219.67 li
195.957 224.17 li
201.153 224.17 li
cp
1 1 1 rgb
f
201.854 219.53 mo
199.255 215.03 li
196.657 219.53 li
201.854 219.53 li
cp
f
202.543 220.46 mo
199.945 215.96 li
197.347 220.46 li
202.543 220.46 li
cp
f
203.394 219.53 mo
200.795 215.03 li
198.197 219.53 li
203.394 219.53 li
cp
f
204.233 230.68 mo
201.635 226.18 li
199.037 230.68 li
204.233 230.68 li
cp
f
205.063 219.53 mo
202.465 215.03 li
199.867 219.53 li
205.063 219.53 li
cp
f
205.874 237.18 mo
203.275 232.68 li
200.677 237.18 li
205.874 237.18 li
cp
f
206.843 236.25 mo
204.245 231.75 li
201.647 236.25 li
206.843 236.25 li
cp
f
207.793 234.39 mo
205.195 229.89 li
202.597 234.39 li
207.793 234.39 li
cp
f
208.573 236.25 mo
205.975 231.75 li
203.377 236.25 li
208.573 236.25 li
cp
f
209.503 240.9 mo
206.905 236.4 li
204.307 240.9 li
209.503 240.9 li
cp
f
210.414 243.68 mo
207.815 239.18 li
205.217 243.68 li
210.414 243.68 li
cp
f
211.313 248.33 mo
208.715 243.83 li
206.117 248.33 li
211.313 248.33 li
cp
f
212.343 248.33 mo
209.745 243.83 li
207.147 248.33 li
212.343 248.33 li
cp
f
213.214 251.32 mo
210.615 246.82 li
208.017 251.32 li
213.214 251.32 li
cp
f
214.213 263.19 mo
211.615 258.69 li
209.017 263.19 li
214.213 263.19 li
cp
f
215.193 257.62 mo
212.595 253.12 li
209.997 257.62 li
215.193 257.62 li
cp
f
216.163 263.19 mo
213.565 258.69 li
210.967 263.19 li
216.163 263.19 li
cp
f
217.243 264.12 mo
214.646 259.62 li
212.047 264.12 li
217.243 264.12 li
cp
f
218.184 267.84 mo
215.585 263.34 li
212.987 267.84 li
218.184 267.84 li
cp
f
219.233 275.27 mo
216.636 270.77 li
214.037 275.27 li
219.233 275.27 li
cp
f
220.394 279.92 mo
217.795 275.42 li
215.197 279.92 li
220.394 279.92 li
cp
f
221.413 309.65 mo
218.815 305.15 li
216.217 309.65 li
221.413 309.65 li
cp
f
222.533 276.2 mo
219.936 271.7 li
217.337 276.2 li
222.533 276.2 li
cp
f
223.634 309.65 mo
221.035 305.15 li
218.438 309.65 li
223.634 309.65 li
cp
f
224.833 310.57 mo
222.235 306.07 li
219.638 310.57 li
224.833 310.57 li
cp
f
225.894 295.71 mo
223.295 291.21 li
220.697 295.71 li
225.894 295.71 li
cp
f
227.054 296.64 mo
224.455 292.14 li
221.857 296.64 li
227.054 296.64 li
cp
f
257.934 334.39 mo
255.335 329.89 li
252.737 334.39 li
257.934 334.39 li
cp
f
324.733 326.55 mo
322.136 322.05 li
319.537 326.55 li
324.733 326.55 li
cp
f
393.195 338.5 mo
393.195 342.5 li
325.6 327.05 mo
322.136 321.05 li
318.671 327.05 li
325.6 327.05 li
cp
258.8 334.89 mo
255.335 328.89 li
251.871 334.89 li
258.8 334.89 li
cp
227.919 297.14 mo
224.455 291.14 li
220.991 297.14 li
227.919 297.14 li
cp
226.76 296.21 mo
223.295 290.21 li
219.831 296.21 li
226.76 296.21 li
cp
225.699 311.07 mo
222.235 305.07 li
218.771 311.07 li
225.699 311.07 li
cp
224.499 310.15 mo
221.035 304.15 li
217.571 310.15 li
224.499 310.15 li
cp
223.399 276.7 mo
219.936 270.7 li
216.471 276.7 li
223.399 276.7 li
cp
222.279 310.15 mo
218.815 304.15 li
215.352 310.15 li
222.279 310.15 li
cp
221.26 280.42 mo
217.795 274.42 li
214.331 280.42 li
221.26 280.42 li
cp
220.1 275.77 mo
216.636 269.77 li
213.171 275.77 li
220.1 275.77 li
cp
219.05 268.34 mo
215.585 262.34 li
212.121 268.34 li
219.05 268.34 li
cp
218.109 264.62 mo
214.646 258.62 li
211.181 264.62 li
218.109 264.62 li
cp
217.029 263.69 mo
213.565 257.69 li
210.101 263.69 li
217.029 263.69 li
cp
216.06 258.12 mo
212.595 252.12 li
209.131 258.12 li
216.06 258.12 li
cp
215.079 263.69 mo
211.615 257.69 li
208.151 263.69 li
215.079 263.69 li
cp
214.079 251.82 mo
210.615 245.82 li
207.151 251.82 li
214.079 251.82 li
cp
213.209 248.83 mo
209.745 242.83 li
206.281 248.83 li
213.209 248.83 li
cp
212.179 248.83 mo
208.715 242.83 li
205.251 248.83 li
212.179 248.83 li
cp
211.279 244.18 mo
207.815 238.18 li
204.351 244.18 li
211.279 244.18 li
cp
210.369 241.4 mo
206.905 235.4 li
203.441 241.4 li
210.369 241.4 li
cp
209.439 236.75 mo
205.975 230.75 li
202.511 236.75 li
209.439 236.75 li
cp
208.659 234.89 mo
205.195 228.89 li
201.731 234.89 li
208.659 234.89 li
cp
207.709 236.75 mo
204.245 230.75 li
200.781 236.75 li
207.709 236.75 li
cp
206.739 237.68 mo
203.275 231.68 li
199.811 237.68 li
206.739 237.68 li
cp
205.929 220.03 mo
202.465 214.03 li
199.001 220.03 li
205.929 220.03 li
cp
205.1 231.18 mo
201.635 225.18 li
198.171 231.18 li
205.1 231.18 li
cp
204.259 220.03 mo
200.795 214.03 li
197.331 220.03 li
204.259 220.03 li
cp
203.409 220.96 mo
199.945 214.96 li
196.481 220.96 li
203.409 220.96 li
cp
202.719 220.03 mo
199.255 214.03 li
195.791 220.03 li
202.719 220.03 li
cp
202.02 224.67 mo
198.555 218.67 li
195.091 224.67 li
202.02 224.67 li
cp
0 0 0 rgb
@
390.598 339 mo
393.195 343.5 li
395.793 339 li
390.598 339 li
cp
1 1 1 rgb
f
389.731 338.5 mo
393.195 344.5 li
396.659 338.5 li
389.731 338.5 li
cp
0 0 0 rgb
@
324.825 122.61 mo
324.825 134.8 li
317.855 100.32 mo
317.855 113.47 li
308.155 89.52 mo
308.155 107.53 li
297.056 60.8799 mo
297.056 79.0601 li
283.016 53.2598 mo
283.016 86.3599 li
346.605 161.734 mo
348.605 158.27 li
344.605 158.27 mo
348.605 158.27 li
346.605 154.806 mo
348.605 158.27 li
350.605 154.806 mo
348.605 158.27 li
352.605 158.27 mo
348.605 158.27 li
350.605 161.734 mo
348.605 158.27 li
320.715 122.344 mo
322.715 118.88 li
318.715 118.88 mo
322.715 118.88 li
320.715 115.416 mo
322.715 118.88 li
324.715 115.416 mo
322.715 118.88 li
326.715 118.88 mo
322.715 118.88 li
324.715 122.344 mo
322.715 118.88 li
303.405 95.2739 mo
305.405 91.8101 li
301.405 91.8101 mo
305.405 91.8101 li
303.405 88.3457 mo
305.405 91.8101 li
307.405 88.3457 mo
305.405 91.8101 li
309.405 91.8101 mo
305.405 91.8101 li
307.405 95.2739 mo
305.405 91.8101 li
288.936 76.814 mo
290.936 73.3501 li
286.936 73.3501 mo
290.936 73.3501 li
288.936 69.8857 mo
290.936 73.3501 li
292.936 69.8857 mo
290.936 73.3501 li
294.936 73.3501 mo
290.936 73.3501 li
292.936 76.814 mo
290.936 73.3501 li
276.936 63.2739 mo
278.936 59.8101 li
274.936 59.8101 mo
278.936 59.8101 li
276.936 56.3457 mo
278.936 59.8101 li
280.936 56.3457 mo
278.936 59.8101 li
282.936 59.8101 mo
278.936 59.8101 li
280.936 63.2739 mo
278.936 59.8101 li
268.655 52.1938 mo
270.655 48.73 li
266.655 48.73 mo
270.655 48.73 li
268.655 45.2656 mo
270.655 48.73 li
272.655 45.2656 mo
270.655 48.73 li
274.655 48.73 mo
270.655 48.73 li
272.655 52.1938 mo
270.655 48.73 li
259.075 41.1143 mo
261.075 37.6499 li
257.075 37.6499 mo
261.075 37.6499 li
259.075 34.186 mo
261.075 37.6499 li
263.075 34.186 mo
261.075 37.6499 li
265.075 37.6499 mo
261.075 37.6499 li
263.075 41.1143 mo
261.075 37.6499 li
252.835 31.2739 mo
254.835 27.8101 li
250.835 27.8101 mo
254.835 27.8101 li
252.835 24.3457 mo
254.835 27.8101 li
256.835 24.3457 mo
254.835 27.8101 li
258.835 27.8101 mo
254.835 27.8101 li
256.835 31.2739 mo
254.835 27.8101 li
245.875 22.6543 mo
247.875 19.1899 li
243.875 19.1899 mo
247.875 19.1899 li
245.875 15.7256 mo
247.875 19.1899 li
249.875 15.7256 mo
247.875 19.1899 li
251.875 19.1899 mo
247.875 19.1899 li
249.875 22.6543 mo
247.875 19.1899 li
348.605 153.35 mo
348.605 164.73 li
322.715 116.42 mo
322.715 121.68 li
305.405 90.5801 mo
305.405 93.1201 li
290.936 72.1201 mo
290.936 74.6499 li
278.936 58.5801 mo
278.936 61.1201 li
270.655 47.5 mo
270.655 50.04 li
261.075 36.4199 mo
261.075 38.96 li
254.835 26.5801 mo
254.835 29.1201 li
247.875 17.96 mo
247.875 20.5 li
@
285.913 64.6162 mo
285.137 61.7188 li
282.239 60.9424 li
280.117 63.0635 li
280.894 65.9614 li
283.792 66.7378 li
285.913 64.6162 li
cp
f
299.953 68.8262 mo
299.177 65.9287 li
296.279 65.1523 li
294.157 67.2734 li
294.934 70.1714 li
297.832 70.9478 li
299.953 68.8262 li
cp
f
311.053 97.4165 mo
310.276 94.5186 li
307.379 93.7422 li
305.258 95.8638 li
306.034 98.7612 li
308.932 99.5376 li
311.053 97.4165 li
cp
f
320.753 106.646 mo
319.977 103.749 li
317.079 102.972 li
314.957 105.094 li
315.734 107.991 li
318.632 108.768 li
320.753 106.646 li
cp
f
327.723 128.597 mo
326.946 125.699 li
324.049 124.922 li
321.928 127.043 li
322.704 129.941 li
325.602 130.718 li
327.723 128.597 li
cp
f
284.947 64.3574 mo
284.43 62.4258 li
282.498 61.9082 li
281.083 63.3223 li
281.602 65.2544 li
283.533 65.772 li
284.947 64.3574 li
cp
1 1 1 rgb
f
298.987 68.5674 mo
298.47 66.6357 li
296.538 66.1182 li
295.123 67.5322 li
295.641 69.4644 li
297.573 69.9819 li
298.987 68.5674 li
cp
f
310.087 97.1577 mo
309.569 95.2256 li
307.638 94.708 li
306.224 96.1226 li
306.741 98.0542 li
308.673 98.5718 li
310.087 97.1577 li
cp
f
319.787 106.388 mo
319.27 104.456 li
317.338 103.938 li
315.924 105.353 li
316.441 107.284 li
318.373 107.802 li
319.787 106.388 li
cp
f
326.757 128.338 mo
326.239 126.406 li
324.308 125.888 li
322.894 127.302 li
323.411 129.234 li
325.343 129.752 li
326.757 128.338 li
cp
f
55.8848 9.25879 mo
55.75 9.41504 55.667 9.604 55.6372 9.82617 cv
55.9072 9.53809 56.2344 9.39404 56.6182 9.39404 cv
56.9722 9.39404 57.3442 9.55029 57.7344 9.86182 cv
58.1665 10.2041 58.4995 10.375 58.7334 10.375 cv
58.9014 10.375 59.0376 10.3193 59.1426 10.2085 cv
59.2476 10.0977 59.3003 9.95508 59.3003 9.78076 cv
59.3003 9.72119 59.2881 9.65479 59.2642 9.58301 cv
59.1685 9.6792 59.0601 9.72705 58.9404 9.72705 cv
58.6821 9.72705 58.5532 9.60107 58.5532 9.34912 cv
58.5532 9.21094 58.604 9.09717 58.7061 9.00684 cv
58.8081 8.91699 58.9434 8.87207 59.1113 8.87207 cv
59.333 8.87207 59.5117 8.95166 59.647 9.11035 cv
59.7817 9.26953 59.8491 9.48096 59.8491 9.74512 cv
59.8491 10.1172 59.7324 10.4351 59.498 10.6987 cv
59.2642 10.9629 58.979 11.0952 58.6431 11.0952 cv
58.3252 11.0952 57.9429 10.9238 57.4956 10.582 cv
57.0488 10.2397 56.6572 10.0688 56.3213 10.0688 cv
55.9854 10.0688 55.7754 10.189 55.6914 10.4292 cv
55.751 10.4292 55.7871 10.4292 55.7993 10.4292 cv
55.9731 10.4292 56.0601 10.5161 56.0601 10.6899 cv
56.0601 10.96 55.9102 11.0952 55.6104 11.0952 cv
55.4121 11.0952 55.2515 11.0093 55.1289 10.8384 cv
55.0059 10.6675 54.9443 10.438 54.9443 10.1499 cv
54.9443 9.1001 55.667 8.34424 57.1133 7.88184 cv
57.7612 7.6748 li
58.4873 7.44092 58.8501 7.04785 58.8501 6.49609 cv
58.8501 6.12402 58.7197 5.83008 58.459 5.61377 cv
58.1978 5.39795 57.8394 5.29004 57.3833 5.29004 cv
56.9814 5.29004 56.6484 5.37109 56.3843 5.5332 cv
56.1201 5.69482 55.9644 5.91699 55.9165 6.19873 cv
56.2402 6.22314 56.4023 6.36426 56.4023 6.62207 cv
56.4023 6.77783 56.3452 6.91162 56.2314 7.02246 cv
56.1172 7.13379 55.9761 7.18896 55.8081 7.18896 cv
55.604 7.18896 55.4409 7.11865 55.3179 6.97754 cv
55.1948 6.83643 55.1333 6.65186 55.1333 6.42383 cv
55.1333 5.93213 55.355 5.521 55.7993 5.19092 cv
56.2432 4.86084 56.792 4.6958 57.4463 4.6958 cv
58.082 4.6958 58.6025 4.8623 59.0078 5.19531 cv
59.4126 5.52832 59.6152 5.95898 59.6152 6.48682 cv
59.6152 6.84717 59.5176 7.16504 59.3228 7.44092 cv
59.1279 7.7168 58.856 7.92383 58.5083 8.06201 cv
58.4004 8.104 58.04 8.22998 57.4282 8.43994 cv
56.9902 8.58984 56.6392 8.73389 56.3755 8.87207 cv
56.1831 8.97412 56.0195 9.10303 55.8848 9.25879 cv
cp
0 0 0 rgb
f
56.0439 105.087 mo
58.375 105.087 li
58.438 102.144 li
56.0439 105.087 li
cp
59.1128 101.982 mo
59.1128 105.087 li
60.1748 105.087 li
60.373 105.087 60.4717 105.189 60.4717 105.393 cv
60.4717 105.597 60.3667 105.699 60.1567 105.699 cv
59.1128 105.699 li
59.1128 106.248 li
59.1128 106.746 59.248 106.995 59.5181 106.995 cv
59.5898 106.995 59.752 106.983 60.0039 106.959 cv
60.2559 106.959 60.3818 107.061 60.3818 107.265 cv
60.3818 107.475 60.2739 107.58 60.0576 107.58 cv
59.9258 107.58 59.7485 107.562 59.5269 107.526 cv
59.3408 107.496 59.1099 107.481 58.834 107.481 cv
58.666 107.481 58.4136 107.498 58.0776 107.53 cv
57.7417 107.563 57.4897 107.58 57.3218 107.58 cv
57.0938 107.58 56.98 107.479 56.98 107.278 cv
56.98 107.065 57.1177 106.959 57.394 106.959 cv
57.4536 106.959 57.5425 106.965 57.6592 106.977 cv
57.7764 106.989 57.8647 106.995 57.9248 106.995 cv
58.2246 106.995 58.375 106.746 58.375 106.248 cv
58.375 105.699 li
55.585 105.699 li
55.3086 105.699 55.1709 105.579 55.1709 105.339 cv
55.1709 105.243 55.2036 105.147 55.27 105.051 cv
57.6548 102.09 li
57.9067 101.778 58.0928 101.576 58.2129 101.482 cv
58.333 101.39 58.4707 101.343 58.627 101.343 cv
58.9507 101.343 59.1128 101.556 59.1128 101.982 cv
cp
f
53.4463 199.957 mo
52.9604 199.957 52.5762 200.09 52.2944 200.357 cv
52.0122 200.625 51.8716 200.986 51.8716 201.442 cv
51.8716 201.91 52.0137 202.283 52.2988 202.563 cv
52.584 202.841 52.9634 202.981 53.4375 202.981 cv
53.8994 202.981 54.2759 202.837 54.5669 202.549 cv
54.8579 202.261 55.0034 201.889 55.0034 201.433 cv
55.0034 200.989 54.8608 200.632 54.5757 200.362 cv
54.291 200.092 53.9146 199.957 53.4463 199.957 cv
cp
53.5815 197.797 mo
53.0415 197.797 52.6035 198.023 52.2676 198.476 cv
51.9312 198.929 51.7422 199.546 51.7002 200.326 cv
52.0786 199.672 52.7021 199.345 53.5723 199.345 cv
54.2266 199.345 54.7603 199.537 55.1743 199.921 cv
55.5884 200.305 55.7954 200.797 55.7954 201.397 cv
55.7954 202.039 55.5732 202.567 55.1294 202.981 cv
54.6855 203.395 54.1152 203.602 53.4194 203.602 cv
52.6514 203.602 52.0469 203.347 51.606 202.837 cv
51.165 202.327 50.9443 201.631 50.9443 200.749 cv
50.9443 199.663 51.1875 198.8 51.6733 198.161 cv
52.1592 197.522 52.8135 197.203 53.6353 197.203 cv
54.1396 197.203 54.5684 197.329 54.9224 197.581 cv
55.2764 197.833 55.4536 198.139 55.4536 198.499 cv
55.4536 198.667 55.395 198.811 55.2778 198.931 cv
55.1611 199.051 55.0244 199.111 54.8687 199.111 cv
54.7422 199.111 54.6328 199.064 54.54 198.971 cv
54.4468 198.878 54.4004 198.766 54.4004 198.634 cv
54.4004 198.454 54.4844 198.334 54.6523 198.274 cv
54.4727 197.956 54.1152 197.797 53.5815 197.797 cv
cp
f
51.0552 394.621 mo
51.0283 392.011 li
51.0225 391.705 50.9907 391.501 50.9336 391.398 cv
50.8765 391.297 50.7642 391.246 50.5962 391.246 cv
50.5361 391.246 50.4492 391.254 50.3354 391.268 cv
50.2212 391.283 50.1343 391.291 50.0742 391.291 cv
49.8403 391.291 49.7231 391.186 49.7231 390.976 cv
49.7231 390.766 49.8345 390.66 50.0562 390.66 cv
50.1284 390.66 50.2407 390.668 50.394 390.684 cv
50.5469 390.698 50.665 390.705 50.7495 390.705 cv
50.9414 390.705 51.1001 390.699 51.2261 390.688 cv
51.4121 390.67 51.5264 390.66 51.5684 390.66 cv
51.7002 390.66 51.7813 390.699 51.8115 390.777 cv
51.8354 390.832 51.8472 390.925 51.8472 391.057 cv
51.8472 391.074 51.8442 391.146 51.8384 391.273 cv
51.8081 391.915 51.7935 392.496 51.7935 393.019 cv
51.7935 394.035 li
51.7935 394.222 51.7964 394.471 51.8022 394.783 cv
51.8145 395.16 51.8203 395.41 51.8203 395.529 cv
51.8262 395.943 51.9644 396.15 52.2344 396.15 cv
52.3003 396.15 52.3994 396.143 52.5313 396.129 cv
52.6631 396.113 52.7622 396.105 52.8281 396.105 cv
53.1162 396.105 53.2603 396.211 53.2603 396.421 cv
53.2603 396.631 53.1284 396.736 52.8643 396.736 cv
52.7622 396.736 52.6665 396.729 52.5762 396.718 cv
52.0723 396.652 51.6885 396.619 51.4243 396.619 cv
51.1602 396.619 50.8364 396.645 50.4521 396.693 cv
50.2363 396.722 50.0835 396.736 49.9932 396.736 cv
49.7354 396.736 49.6064 396.629 49.6064 396.416 cv
49.6064 396.209 49.7534 396.105 50.0474 396.105 cv
50.1372 396.105 50.2305 396.115 50.3262 396.133 cv
50.4702 396.145 50.5601 396.15 50.5962 396.15 cv
50.8062 396.15 50.9351 396.068 50.9834 395.903 cv
51.0313 395.738 51.0552 395.311 51.0552 394.621 cv
cp
f
56.4014 391.164 mo
55.2974 391.164 54.7241 391.99 54.6826 393.64 cv
54.6826 393.775 li
54.6826 394.561 54.8267 395.168 55.1143 395.598 cv
55.4023 396.026 55.8105 396.24 56.3384 396.24 cv
56.8784 396.24 57.3013 396.007 57.6074 395.539 cv
57.9136 395.07 58.0664 394.426 58.0664 393.604 cv
58.0664 392.818 57.9224 392.215 57.6343 391.795 cv
57.3462 391.375 56.9355 391.164 56.4014 391.164 cv
cp
56.3296 396.898 mo
55.5674 396.898 54.9688 396.617 54.5337 396.057 cv
54.0986 395.495 53.8813 394.723 53.8813 393.738 cv
53.8813 392.736 54.1079 391.946 54.561 391.367 cv
55.0137 390.788 55.6333 390.498 56.4194 390.498 cv
57.1694 390.498 57.7617 390.776 58.1968 391.331 cv
58.6318 391.887 58.8496 392.638 58.8496 393.586 cv
58.8496 394.611 58.6245 395.42 58.1743 396.012 cv
57.7246 396.602 57.1094 396.898 56.3296 396.898 cv
cp
f
53.3955 294.74 mo
53.0356 294.74 52.7397 294.832 52.5088 295.015 cv
52.2778 295.198 52.1626 295.431 52.1626 295.713 cv
52.1626 295.965 52.2764 296.17 52.5044 296.329 cv
52.7324 296.488 53.0293 296.567 53.3955 296.567 cv
53.7612 296.567 54.0571 296.488 54.2817 296.329 cv
54.5068 296.17 54.6196 295.962 54.6196 295.703 cv
54.6196 295.422 54.5039 295.19 54.2729 295.011 cv
54.042 294.83 53.7495 294.74 53.3955 294.74 cv
cp
53.4316 297.252 mo
52.9155 297.252 52.5117 297.367 52.2207 297.598 cv
51.9297 297.829 51.7842 298.146 51.7842 298.548 cv
51.7842 298.938 51.9331 299.254 52.23 299.497 cv
52.5269 299.74 52.9155 299.861 53.3955 299.861 cv
53.8755 299.861 54.2637 299.74 54.561 299.497 cv
54.8579 299.254 55.0063 298.938 55.0063 298.548 cv
55.0063 298.157 54.8623 297.844 54.5742 297.607 cv
54.2866 297.37 53.9053 297.252 53.4316 297.252 cv
cp
51.6133 297.233 mo
51.7695 297.113 51.9795 297.006 52.2437 296.909 cv
51.9136 296.724 51.6885 296.545 51.5684 296.374 cv
51.4482 296.203 51.3882 295.982 51.3882 295.713 cv
51.3882 295.257 51.582 294.874 51.9688 294.565 cv
52.356 294.256 52.8315 294.102 53.3955 294.102 cv
53.9595 294.102 54.4351 294.256 54.8218 294.565 cv
55.209 294.874 55.4023 295.257 55.4023 295.713 cv
55.4023 295.982 55.3408 296.203 55.2178 296.374 cv
55.0947 296.545 54.8716 296.724 54.5474 296.909 cv
54.7993 297.006 55.0063 297.113 55.1685 297.233 cv
55.5884 297.552 55.7983 297.992 55.7983 298.557 cv
55.7983 299.133 55.5791 299.601 55.1416 299.961 cv
54.7031 300.32 54.1304 300.501 53.4224 300.501 cv
52.6846 300.501 52.0933 300.323 51.6494 299.97 cv
51.2051 299.615 50.9834 299.145 50.9834 298.557 cv
50.9834 297.998 51.1934 297.558 51.6133 297.233 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/PSYTEM+Helvetica*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF

