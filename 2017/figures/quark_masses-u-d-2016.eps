%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: quark_masses12b-2016.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 5/4/16
%%BoundingBox: 0 0 328 432
%%HiResBoundingBox: 0 0 327.5151 431.9248
%%CropBox: 0 0 327.5151 431.9248
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2016-05-04T14:47:10-07:00</xmp:CreateDate>
         <xmp:ModifyDate>2016-05-04T14:47:10-07:00</xmp:ModifyDate>
         <xmp:MetadataDate>2016-05-04T14:47:10-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>196</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADEAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXnP5k+TvKusa3o&#xA;cFxpNrda1rGoW6y388STTw2OnBryYRPIGMSP6QhPp03lr1NcVZ9qV4tjp11espdbWGSYoDQsI1LU&#xA;r70wxFmmM5cIJ7mNf48f/lgH/I7/AK95nfyfPvDrP5Wx9xWyefpFRmGncioJCibc07D93j/J8+8J&#xA;/lbH3Fd/jx/+WAf8jv8Ar3j/ACfPvCP5Wx9xUp/zClhhklbTlKxqXIE5rRRX/fWJ0Eu8KO1oHoV/&#xA;+PZ/+rev/I8/9Usf5Pl3hH8rQ7ipzfmJNF10wGoPGk/Vuy/3fU9sToJd4SO1YHoVT/Hs/wD1b1/5&#xA;Hn/qlj/J8u8I/laHcVH/AJWPJ9S+t/o0cPT9Xj6+9OPKn93g/ISq7DL+VYXVFW/x7P8A9W9f+R5/&#xA;6pYf5Pl3hj/K0O4tSef51RmGmhioJCic1NOw/dY/yfLvCf5Wh3FpfzBkaZ4v0cKoqsT6+3xEgD+7&#xA;/wAnH8hLvC/ytDuKz/lYx+pfW/0d8Hp+rx9benHlT+7wfkJVdhP8qwuqKr/j2f8A6t6/8jz/ANUs&#xA;P8ny7wx/laHcWpPP86ozDTQxUEhROamnYfusf5Pl3hP8rQ7i3/j2f/q3r/yPP/VLH+T5d4R/K0O4&#xA;qdz+Yj29tLcSaevpwo0j0nPRRU/7q9sToJDqEjtWBNUVSPz9KyKzacEYgEqZtwT22jx/k+feF/lb&#xA;H3F0nn6RUZhp3IqCQom3NOw/d4/yfPvCf5Wx9xXf48f/AJYB/wAjv+veP8nz7wj+VsfcWx59IIL2&#xA;NE/aIlqQO9AUFfvyMtDIAmwyh2pCRAo7sszCdm7FXYq7FUs8z/8AKNat/wAwVx/yabJ4vqHvas/0&#xA;S9xed50TyDsVdirUiJIjRuKo4KsPEHY4q3irTKrqVYVU7EHFVJWaFhHIaodo5D/xFvfwPf59Qnms&#xA;skSTTII3FUeFFYeIKAHEcky5onCxcTTc9MVULIcoTMftTky/QdkB9wgAOAMpLbJEk0yCNxVHhRWH&#xA;iCgBxHJZc0ThYuxV2Koa4RLqQ27DlAm847En7Kbf8Efo8cB3ZDbdE4WLsVdiq2T7DfI5Xl+g+4tu&#xA;D+8j7w9Zznnr3Yq7FXYqlnmmv+GdX4irfUrigOwr6TfPJ4vqHvas/wBEvcXna1oOQo3cDcV/DOie&#xA;QdirsVdirsVdirTKrqVYVU7EHFUFpjtFZWschqjRRiOQ+PEfC3v4Hv8APrGPJnLclHZJgh73441g&#xA;HWduB/1Or/8ACgj50wFlHvRGFih9O/459t/xiT/iIwR5MpcyiMLF2KrJ5fSjLU5N0RO7Meg+nASk&#xA;Bq3i9KMAnk5+KRvFj1P9PbEBSVTCh2KuxVTnMgjPBQx78iRt3OwOV5foPubtP/eR94et5zz1zsVd&#xA;iq2WaKGMySusca/adyFAqabk4ql3mlQ3ljV1YVU2VwCD4GJsni+oe9qzfRL3F5qrNEwjkNUO0ch/&#xA;4i3v4Hv8+vQ8nkuathYuxV2KuxV2KuxVDWKq+m26sKqYUBB/1RgHJlLmvVmhYRyGqHaOQ/8AEW9/&#xA;A9/n1Uc1sf7y7kk/ZhHpJ8zRnP8AxEfQceqTyRGFih9O/wCOfbf8Yk/4iMEeTKXMojCxdiqHT99c&#xA;GT/dcJKR+79Hb6Psj6cDLkERhYuxV2KuxVbJ9hvkcry/QfcW3B/eR94es5zz17sVdirxL8zL/wAx&#xA;Wn5jTaiGtpho9hZSeVtBvYWmj1G4ubl0vPqx9SMLdxqqKpAcqrA0AJqq9a801/wzq/EVb6lcUB2F&#xA;fSb55PF9Q97Vn+iXuLzZBNIrLcRoqnYBWL18a1Vc6F5H3NKzRMI5DVDtHIf+It7+B7/Pq8k81bCx&#xA;dirsVdirsVQ+nf8AHPtv+MSf8RGCPJlLmVS5eNLeRpF5oFNU/m9h7nEoHNQtFe1jSCY8q9JfF2NW&#xA;Br4sdv8AOoGyZbovJMUPp3/HPtv+MSf8RGCPJlLmURhYqNzI4URxmk0p4oevHxb/AGI/HbAUgKkc&#xA;aRxrGgoiABR12HzwoJXYq7FXYq7FVGZroFgkaGOn2i5De/w8D+vK8v0n3N2nrjj7w9dznnrnYq7F&#xA;XYqlnmf/AJRrVv8AmCuP+TTZPF9Q97Vn+iXuLzvOieQaZVZSrCqnYg4qpKzRMI5DVDtHIf8AiLe/&#xA;ge/z6jky5q2Fi7FXYq7FUPp3/HPtv+MSf8RGCPJlLmXT/vJ4Yf2QfVk+SEcR7fHQ/RiVHJXZVdSr&#xA;CqnYg4WKkrNCwjkNUO0ch/4i3v4Hv8+oTzWac6Gzt4wfjWGJiPZloP8AiJxjyTLmiSabnphYqFt+&#xA;8LXLf7s2iHhH2/4Lr9w7YAyPcr4WLsVdirsVdiq2T7DfI5Xl+g+4tuD+8j7w9Zznnr3Yq7FXYqln&#xA;mmv+GdX4irfUrigOwr6TfPJ4vqHvas/0S9xedrWg5CjdwNxX8M6J5B2KtMqspVhVTsQcVUldoWEc&#xA;hqhNI5D/AMRb38D3+fUJ5q2FDsVdiqH07/jn23/GJP8AiIwR5Mpcy61+Npbj/fjUjP8AxWmy/QTV&#xA;h88Qp7kRhYtMqupVhVTsQcVSrSXaJo0kNVa1txHIf9nRW9/A9/n1hFtnv8yjrj9662w+yw5Tf6n8&#xA;v+zO3yrkiwG26IwsXYq7FXYq7FXYqpzmQRngoY9+RI27nYHK8v0H3N2n/vI+8PW855652KuxVp3R&#xA;FLOwVV3LE0AHzxVLfNJA8s6uT0FlcHYVP903YZPF9Q97Vn+iXuLzP69D/LL/AMiZf+ac6G3kuF31&#xA;6H+WX/kTL/zTja8Lvr0P8sv/ACJl/wCacbXhaa8tnUqySlTsQYZf+acbXhKkmoRxMI5BMyHaOQwy&#xA;1/1W+Hr4Hv8APqOJPDat9eh/ll/5Ey/804bRwu+vQ/yy/wDImX/mnG14UNZ3Ly6fbW9rHO91LGkc&#xA;SrDKTUqKsBx34irfIZWcgjGy2xxSlOgLTePTNQjRY0sLoIgCqPQm2A2H7OQ/M4+9s/JZv5pWQ2up&#xA;ySTL9Ruf3ThNoJe6K2/w/wCVj+ax96/kcv8ANK6XTtYK/urO4VvFraZhT5ALj+ax96jQ5f5peC2f&#xA;lz80I/zQXVpr2X9AIEaRyZGhNoUIW2+q1DE1BUbfa+Ktd8xYxyeJd+n9Dnyni8Hhr1fp77ewWF21&#xA;unG79R5ZTyMohmAqdghqG6CgB7/Prng1zdTIXyRv16H+WX/kTL/zTkrY8Lvr0P8ALL/yJl/5pxte&#xA;F316H+WX/kTL/wA042vC769D/LL/AMiZf+acbXhd9eh/ll/5Ey/8042vC769D/LL/wAiZf8AmnG1&#xA;4WmvYSpAWWpFN4pQPvK5XlPoPubcEf3kfeHsGc+9a7FXYq8o/NHT9Pu/OGkX9rqFhqWvaW9nHH5P&#xA;v4LW79SK6u1V7mESK1xbyAfEZkPECMctgcVeieaa/wCGdX4irfUrigOwr6TfPJ4vqHvas/0S9xeb&#xA;xNcGvrIify8HL1+dVTOhDyJpUwodirsVaZVZSrCqnYg4qpKzRMI5DVDtHIf+It7+B7/PqOTLmrYW&#xA;Kdfl7Zq/G/loIrSBFRj9n1HT4jXsUT8GzV63JsIu97Mw7ymfcyrW7jVIbSdtNlt/rYRVt4ZkZh6s&#xA;rcIi5WRKIX67eOa527xL/nHmX8/JfMvmNfPJuI9P+0X1CJT/AKbyUUtwjR/u/Sr9j4KcaYq99hEw&#xA;QCZleTuyKUH3Fn/Xirxi2/fagV6xwQQFx4yfGVH+xB5fOnhnQY+Q9weSzbE+8pkyq6lWFVOxBy1o&#xA;UlZoWEchqh2jkP8AxFvfwPf59QnmrYUOxV2KuxV2KqMzXQLBI0MdPtFyG9/h4H9eV5fpPubtPXHH&#xA;3h67nPPXOxV2KuxVLPM//KNat/zBXH/Jpsni+oe9qz/RL3F53nRPIOxV2KuxV2KtMqspVhVTsQcV&#xA;UfV+r7TN+6H2ZW7U7Mf4/wAeoumVXyYn+aHmDzZpvkKDSPId7E3mS6gs5tUsbWWN9UFpLFPLJwtS&#xA;GloqtHyZfiC79Kkc/lkTIl6zTwEYAB5U3nf87PJnn/y1rf5j6tqFnp9+1vcXNlJKHWSzgIVw9jEw&#xA;VHA3+JFbkeX2srbn2jo11Z39kmq2MwuLHVFivLSYAqGilhTg1GofiUV3GKta5qqaZp0lyQGl+xbx&#xA;n9qVvsj5d2p2ByzFjM5ABqz5RjgZF5bpiBdOtvExKWPclhUn6Sa5v4CgHk8huRKKyTBplV1KsKqd&#xA;iDiqkrNCwjkNUO0ch/4i3v4Hv8+oTzVsKHYq7FXYqtk+w3yOV5foPuLbg/vI+8PWc55692KuxV2K&#xA;pX5qLjyxrBQAv9SueIJoCfSalTQ0+7J4vqHvas30S9xeaCTUaCsEIPcCVj/zLzod3ktnc9Q/3zF/&#xA;yNb/AKp47rs7nqH++Yv+Rrf9U8d12dz1D/fMX/I1v+qeO67O56h/vmL/AJGt/wBU8d12dz1D/fMX&#xA;/I1v+qeO67ITUUvLmNLR4Y+MzfGFnkX4F3avFAaH7P05GVnZlGhu8w8v/k5DH+Zdv5q1O+eewBiv&#xA;fqQZjJJJIpUQvOaUSq/y1I+HrvmtnopE2C7rF2lGMakDt3PSPzK8meQfOtnp6arpEsMunzD0Li1u&#xA;eEpSd1WSN2aN+SnYiu4PSm9YHQT7x+PgzHauPul9n62aafq3l/TrC20+z0GCK0s4kgt4+QbjHEoR&#xA;F5MhY0UdSa4fyE+8fj4L/K2Lul9n60q1bWrrU50a1s4bewtwy28IkKguT+8kosdN+g+Vf2sy9Lpz&#xA;jsnm6/XasZaAsAJXp73/ANQtqQxU9JP92t/KP+K8yo3Tgyqyr89Q/wB8xf8AI1v+qeHdGzueof75&#xA;i/5Gt/1Tx3XZpjeupVoISp2IMrf9U8d12Ulm1GFhHJFEyMaRyGVvoVj6fXwPf59RZTQKtz1D/fMX&#xA;/I1v+qeHdGzueof75i/5Gt/1Tx3XZ3PUP98xf8jW/wCqeO67NM99xPKGILTciViaf8ixleW+A+5t&#xA;wV4kfeHsGc+9a7FXYq0zKoqxAFQKnbcmgH34qlvmf/lGtW/5grj/AJNNk8X1D3tWf6Je4vO86J5B&#xA;2KuxV2KuxV2KoeH95cyzfsp+6j/2O7kfNvhP+rgDI8lOwt0a0hdviElvEjKelFBP/G2CI2TI7rpE&#xA;ICwysfTLo0cp3NUYMFb7tj3+fUoVLlmPGBCQ8tasOqoPtMPvoPc4lA71VEVFCKAqqAFA6ADChQ07&#xA;/jn23/GJP+IjBHkylzKIwsXYq7FWmVXUqwqp2IOKqSs0LCOQ1Q7RyH/iLe/ge/z6hPNWwodiq2T7&#xA;DfI5Xl+g+4tuD+8j7w9Zznnr0p1Dzd5U02/j0/UdasLLUJaelZ3FzDFM1enGN2DH7sVTYEEVG4PQ&#xA;4q8n/Na98yjXtJY6HqF1o2nappUlhLaTWCxXF090nP1FmuoJaqv7qJWQJyZmY/ZKqvRfNNf8M6vx&#xA;FW+pXFAdhX0m+eTxfUPe1Z/ol7i83ia4NfWRE/l4OXr86qmdCHkTSphQ7FXYq7FVO4l9KB5AOTAf&#xA;Av8AMx2VfpO2AlIFtwRelCkdeRUfE3dmO5Y/M74hSbUtO/459t/xiT/iIxjyTLmVaX0/Tb1KenQ8&#xA;+XSnetcKAhLMyRsXnr+/oInbqqivCN/fevzNMiGUvJFRSrKpZagBmXfxRip/EZIMSFLTv+Ofbf8A&#xA;GJP+IjBHkmXMojCxdirsVdirTKrqVYVU7EHFVJWaFhHIaodo5D/xFvfwPf59QnmrYUKMzXQLBI0M&#xA;dPtFyG9/h4H9eV5fpPubtPXHH3h67nPPXPHLfXfK/k2DT9J8+aJpq6rrHD1ruwZdUku7iUAySTQS&#xA;r9fcs/dUlXb7Q2GKvVtG0mx0nT47GwVo7OMsYIWZmEauxb005bqiVoidFFFFAAMVRuKpZ5n/AOUa&#xA;1b/mCuP+TTZPF9Q97Vn+iXuLzvOieQdirsVdirsVQ8v7y6ii/Zj/AHsnh3CAj51b5rgLIckRhYof&#xA;Tv8Ajn23/GJP+IjBHkylzLpv30wg/wB1rR5vf+VPp6n5e+JUbboLXfMWi6VpF7qF7OjW1nC8s0aM&#xA;rOwQElVUkVY9AMjOYiCSyx4pSkAOrE/yx/NTRvNdpeKsb2T2k24uGXdZ2d0+Ku52I/z3o0+oEwXJ&#xA;1ekljI62zjS5Ek021dGDqYkoymo2UDqMyY8nEmNyicLF2KuxV2KuxVplV1KsKqdiDiqkrNCwjkNU&#xA;O0ch/wCIt7+B7/PqE81ST7DfI5DL9B9xbMH95H3h6znPPXvDLi/8mfk9qs+kaXo9nbyx6Mby21e+&#xA;mMmpardxSxxrZxkIXZpVLBeJ+FukfBd1XuSNzRW4leQB4tsRXscVbxVLPNNf8M6vxFW+pXFAdhX0&#xA;m+eTxfUPe1Z/ol7i87WtByFG7gbiv4Z0TyDsVdirsVdiqHs/jD3B/wB3NVP+MY2SnsR8X04Ayl3I&#xA;jCxQlrKItLt5CK0ijoo6klQAB8ztkRyZEbq9vEY4/jIMrnlKw6Fj1p7DoPbCEEtXVrbXdtLa3Maz&#xA;W06NHNC4qro4oysD1BBxIvZQSDYSTyj5P8teXrC5t9HsI7SK5mkM4Usxfg7IoZnLMQq9BXb6crx4&#xA;oxGwbs2ecyDI2mWmO0VlaxyGqNFGI5D48R8Le/ge/wA+s48muW5KOyTB2KuxV2KuxV2KtMqupVhV&#xA;TsQcVQ0jzQr6Zo6tskjsRsezGh38PH59asv0H3N+DfJH3h7DnPvWvmvXLC/8vavH5Vm/MHzBr91L&#xA;WGytdElhnv7McTGrXVmLaU8EGzS/WUbwXFX0fZxNFaQRMxZo41VmPUkKBU4qqF0VlVmAZ68VJ3NN&#xA;zTFUt8z/APKNat/zBXH/ACabJ4vqHvas/wBEvcXnedE8g7FXYq7FVC8ZvR9NCRJMRGpGxHL7RHuq&#xA;1b6MBTFWVVVQqgKqiiqNgAOwwobxVL9N/fwWzf7qgjQL7ycKE/7EGnzr4ZGLOWxKYZJg7FWlRVFF&#xA;AAqTQeJNT+OKoexVX023VhVTCgIP+qMA5Mpc16s0TCOQ1Q7RyH/iLe/ge/z6q81bCxdirsVdirsV&#xA;diq2UAxsCKih2yvL9B9zbg/vI+8PWc55694jp3kPRPLGkzeWU8leYHknjME99omoulre1BT6w5a/&#xA;txG7j4nWZAFJoOQ3Kr1/Ql1BdJtlv4kt7lUANuj+oI1GyIz0UOwWnIgAV6bYq85/NuDSLjX9Aeyf&#xA;TLjzPY6jplw+mzt/uUktheDgLFufKFeXNpSEoyA8iAMVeheaa/4Z1fiKt9SuKA7CvpN88ni+oe9q&#xA;z/RL3F5vE1wa+siJ/LwcvX51VM6EPImlTCh2KuxVDj95eMf2LdeI/wBd6E/ctN/fB1ZdERhYqVzI&#xA;yIFj/vZDwj9j1J/2I3wFIClpaLHploi9BCn/ABEb4x5JnzKKwsXYq7FUPp3/ABz7b/jEn/ERgjyZ&#xA;S5lXZVZSrCqnYg4WKkrNEwjkNUO0ch/4i3v4Hv8APqOTLmrYWLsVdirsVdiqjM10CwSNDHT7Rchv&#xA;f4eB/XleX6T7m7T1xx94eu5zz1zy38yvOHnfSNUuodKvNPstMghjmmvLiexWSMsCIoRHdTQ/vLia&#xA;i85OKLGGILORxVenwNK0EbTLwlKgyIDUKxG4r7HFV+KpZ5n/AOUa1b/mCuP+TTZPF9Q97Vn+iXuL&#xA;zvOieQdirsVWySJHG0jmiICzHwAFT0xUBTtI3SAeoKSvV5R1ozbkV9ug9sASSrYUIe3/AHrm5P2S&#xA;OMP+pWvL/Z9flTAGR22dp3/HPtv+MSf8RGMeSy5lEYWLsVdiqH07/jn23/GJP+IjBHkylzKIwsWm&#xA;VWUqwqp2IOKqSs0TCOQ1Q7RyH/iLe/ge/wA+o5MuathYuxV2KuxVbJ9hvkcry/QfcW3B/eR94es5&#xA;zz17wb88b9NO1671CDTojPZ2TSG9u726ijSeeCSJJ47WG2uI+ZjUwJMzrRjxHBirFV7nYoqWVuii&#xA;irGgA36BR/MAfvxVWxVLPNNf8M6vxFW+pXFAdhX0m+eTxfUPe1Z/ol7i87WtByFG7gbiv4Z0TyDs&#xA;VdiqHuvjeK3/AJ25v/qRkE/e3EfI4CyHeiMLFQuf3hW2X/dm8p8I+/8AwXT7z2wFkO9XApsOmFih&#xA;9O/459t/xiT/AIiMEeTKXMojCxdirsVQ+nf8c+2/4xJ/xEYI8mUuZRGFi7FWmVWUqwqp2IOKqSs0&#xA;TCOQ1Q7RyH/iLe/ge/z6jky5q2Fi7FXYqpzmQRngoY9+RI27nYHK8v0H3N2n/vI+8PW855654n+a&#xA;F/qMvnHV7QS3bWdnplq8UUXmE6Ckby/WDIyxxn9/yCrVpOlKdMVex6Z/xzbT/jDH1NT9gd++Kogs&#xA;oIBIBb7I8fliqW+Z/wDlGtW/5grj/k02TxfUPe1Z/ol7i87zonkHYq7FUPb/ALyaaftX0o/9WPZv&#xA;p58h9AwBkVaSRI42kc0RASx67D5YWICnbRuA0sgpNLQuOvEdkr/k/rqe+AJJVsKEPp3/ABz7b/jE&#xA;n/ERgjyZS5lEYWLsVdiqH07/AI59t/xiT/iIwR5MpcyiMLF2KuxVplVlKsKqdiDiqkrNEwjkNUO0&#xA;ch/4i3v4Hv8APqOTLmrYWLsVWyfYb5HK8v0H3Ftwf3kfeHrOc89e8g13zx5I1L9I6lqn5capqNzZ&#xA;WiteT3el2sjJAEaVEeSSVivwsWp1ANaYq9btvR+rxehQQ8F9IDpxp8NPoxV5L+bl7+W48z6RZ6tq&#xA;NpZeZkns7+PUJ3H1mzs7K4WZktKVcS3TAxhVFXqSa8FGKvS/NNf8M6vxFW+pXFAdhX0m+eTxfUPe&#xA;1Z/ol7i83ia4NfWRE/l4OXr86qmdCHkTSphQpXUrRQO6UMmyxg9C7HioP+yIwFIG66GJYoUiWpVF&#xA;CgnqaCm+EKTak/764Ef+64SHk936ov0faP0YE8giMLF2KofTv+Ofbf8AGJP+IjBHkylzKIwsXYq7&#xA;FUPp3/HPtv8AjEn/ABEYI8mUuZRGFi7FXYq7FWmVWUqwqp2IOKqSs0TCOQ1Q7RyH/iLe/ge/z6jk&#xA;y5q2FiozNdAsEjQx0+0XIb3+Hgf15Xl+k+5u09ccfeHruc89cxvzN+XnlXzLcCfV7eaUlFhuI4rq&#xA;5t4riFCWWK5ihkjjnQMxPGRT91cVZIAFAAFANgB0AxV2KpZ5n/5RrVv+YK4/5NNk8X1D3tWf6Je4&#xA;vO86J5B2KoeT95eRp+zCPVb/AFmqifR9r8MHVl0VJ5fSj5AcnJConTkx6D+uJKAHQRelGFJ5N1d+&#xA;nJjuTiApKphQ7FUPp3/HPtv+MSf8RGCPJlLmURhYuxV2KofTv+Ofbf8AGJP+IjBHkylzKIwsXYq7&#xA;FXYq7FWmVWUqwqp2IOKqSs0TCOQ1Q7RyH/iLe/ge/wA+o5MuapJ9hvkchl+g+4s8H95H3h6znPPX&#xA;uxV2KuxVLPNNf8M6vxFW+pXFAdhX0m+eTxfUPe1Z/ol7i87WtByFG7gbiv4Z0TyDsVQ9l8URn73D&#xA;eoP9U7J/wgH04Ayl3Oj/AH1wZT/dxEpEPFujt9H2R9Pjip2CIwsXYq7FUPp3/HPtv+MSf8RGCPJl&#xA;LmURhYuxV2KofTv+Ofbf8Yk/4iMEeTKXMojCxdirsVdirsVdirTKrKVYVU7EHFUNK80K+maOrbLI&#xA;xI28CaHfw8fn1qy7RPub8G+SPvD2HOfetdirsVcSAQCaE7D3PXFUs8z/APKNat/zBXH/ACabJ4vq&#xA;Hvas/wBEvcXnedE8gh734ohB3uG9L/YkEv8A8IDT3wFlHvXXLvQRRmksuyn+UD7TfR+umJQFWNEj&#xA;RY0FEQBVHgBsMKG8VdirsVQ+nf8AHPtv+MSf8RGCPJlLmURhYuxV2KofTv8Ajn23/GJP+IjBHkyl&#xA;zKIwsXYq7FXYq7FXYq7FVsoBjYEVFDscry/Qfc24P7yPvD1nOeevdirsVef+fZ9Lh/MX8uWnlhjv&#xA;DqV6kYd1Vyj6VdoAAT0aRlX3agxVlvmmv+GdX4irfUrigOwr6TfPJ4vqHvas/wBEvcXm8TXBr6yI&#xA;n8vBy9fnVUzoQ8iaU1Ie7kkJokC+mCdt2o7/AEU4/jj1T0btgXLXLChk2jB7Rj7P3/aP3dsQp7lf&#xA;CxdirsVdiqH07/jn23/GJP8AiIwR5MpcyiMLF2KuxVD6d/xz7b/jEn/ERgjyZS5lEYWLsVdirsVd&#xA;irsVdiqjM10CwSNDHT7Rchvf4eB/XleX6T7m7T1xx94eu5zz1zsVdirsVSzzP/yjWrf8wVx/yabJ&#xA;4vqHvas/0S9xecTSrFC8rVKopYgdTQV2zoi8iBaFWJiiWjUJI9W7I6fESSBXs71/2Ncj5Mr6o3JM&#xA;HYq7FXYq7FUPp3/HPtv+MSf8RGCPJlLmURhYuxV2KofTv+Ofbf8AGJP+IjBHkylzKIwsXYq7FXYq&#xA;7FXYq7FVsn2G+RyvL9B9xbcH95H3h6znPPXuxV2KuxVLPNNf8M6vxFW+pXFAdhX0m+eTxfUPe1Z/&#xA;ol7i8wvJQDEjjYfvZFXevp04qvSpMhWnjnQF5KIVraJkQl/72Q85SOnI7UHyAAwhBKrhQ7FXYq7F&#xA;XYqh9O/459t/xiT/AIiMEeTKXMojCxdirsVQ+nf8c+2/4xJ/xEYI8mUuZRGFi7FXYq7FXYq7FXYq&#xA;pzmQRngoY9+RI27nYHK8v0H3N2n/ALyPvD1vOeeudirsVdUff0xVLPM//KNat/zBXH/Jpsni+oe9&#xA;qz/RL3F5Xbf6VeSz9YY24qfEx1AH+xJZvpHcZ0A3LyZ2CYZJg7FXYq7FXYq7FUPp3/HPtv8AjEn/&#xA;ABEYI8mUuZRGFi7FXYqh9O/459t/xiT/AIiMEeTKXMojCxdirsVdirsVdirsVWyfYb5HK8v0H3Ft&#xA;wf3kfeHrOc89e7FXYq8V/MXVLy38x+araWZodamg0YeR0LOHkkFwRMLTtzMzhZgm5SnL4aYq9b1+&#xA;yur7QdSsrNkS7urWaG3eWvpiSSNlQvQE8eR3oMlE0QWM48USO9hdr5D8wWttHbxCz4RKFBM8pJp3&#xA;J9Dqe+bMa+A6F0Z7KyE3YXv5M80cG4Cx50PHlPNSvatIMP8AKEe4o/kmfeF3+DPMvhZf8j5f+qGP&#xA;8oR7iv8AJM+8KV15H8zTW00S/Ug0iMgJnlpVhT/fGA6+PcUjsqYPMKv+DPMvhZf8j5f+qGH+UI9x&#xA;R/JM+8LX8meaODcBY86HjynmpXtWkGP8oR7iv8kz7wu/wZ5l8LL/AJHy/wDVDH+UI9xX+SZ94Q3+&#xA;AfNH6M+qf6Dz9H0uXrzUrw41/uMH5+NVRZfyVO7sIn/BnmXwsv8AkfL/ANUMP8oR7ix/kmfeFr+T&#xA;PNHBuAsedDx5TzUr2rSDH+UI9xX+SZ94Xf4M8y+Fl/yPl/6oY/yhHuK/yTPvCG/wD5o/Rn1T/Qef&#xA;o+ly9ealeHGv9xg/PxqqLL+Sp3dhE/4M8y+Fl/yPl/6oYf5Qj3Fj/JM+8LX8meaODcBY86Hjynmp&#xA;XtWkGP8AKEe4r/JM+8Lv8GeZfCy/5Hy/9UMf5Qj3Ff5Jn3hSuvI/maa2miX6kGkRkBM8tKsKf74w&#xA;HXx7ikdlTB5hV/wZ5l8LL/kfL/1Qw/yhHuKP5Jn3ha/kzzRwbgLHnQ8eU81K9q0gx/lCPcV/kmfe&#xA;F3+DPMvhZf8AI+X/AKoY/wAoR7iv8kz7w7/BXmNvhb6mFOxImlJA+XojIz10TEiizx9lzjIGxsWf&#xA;Zq3eOxV2KuxV4x+Yet6jba95vX6y0GsWdroz+TYGkZC8ktwyzG2Xbk0sxWGYJWq8VbY0xV7PirsV&#xA;dirEfze4D8rPNsjSNCYtIvpIpEkaIiRLdzHRlKn7dNu/TFWR6QwbSbJgeQaCIhutaoN8VReKuxVi&#xA;/wCY8vlaHy083md66Wkij6mZhAt1MwKRQMxaMEM7ct2CinJjxU4qt/K2FYPIOjWo1OPWHtYPQmv4&#xA;ZvrETSRsVkSOb/dixNWMMdzx33xVlWKuxVhv5radp+p+VZ7C4m05LydZP0dDq9w1vaNMIz8cgQ8n&#xA;9JSXA7H4tqVCqZfl7cXFx5D8uz3EcsU8mm2hkS4f1Zg3oLUu/wC0x6knc98VZBirsVYd+Z2p6tba&#xA;KtlYWl9LHfiVL6909OctvbpGWbjRlZXlNEVh9kcm6gAqoz8srxrz8u/LVw0csTNptqrLOvGQlIlT&#xA;kRU7Nx5Ke4IOKslxV2KsY/MjTrfVfKs2kza1DoIv5YoVvJwjK5DiT0ODvEH9URlWUNUrXFWDcH/5&#xA;UJ6H6I03l631bh+9/RnH9J+j+k/ter6HD/S/tV496b4q9gxV2KuxVTltbaWSKWWJJJICWhdlDMjE&#xA;UJUn7JpttiqpirsVdiqjd2dneQG3vII7mBqFopkV0JBqKqwI2xVfBBBBCkMEaxQxgLHEgCqqjoAo&#xA;2AxVfirsVQ99punX8ax31rDdxoeSpPGsihqUqAwO+Kqlta21rAlvbRJBBHskUShEUE12VaAYqqYq&#xA;7FUr1y/0G3NrDqiLPLM7PZ2wga6lZoV5s8cUayP8A6sBtsOpGKpUv5n+RG8kHzwNWT/CwFTqPpzA&#xA;bS+jT0uHrcvU+Hjwriqf/pO0/Rn6THqG09L1xSGUymPjy2hC+qWp+zx5e2KpNbfmF5Uu9J0fVrS5&#xA;lubHX3MWkPDa3LtO4R3I4CPmnwxOauFFBiqcaZqem6vpsGoafOl1YXSc4Zk3VlOxBB3BB2IO4Ox3&#xA;xVExxxxRrHGoSNAFRFACqoFAAB0AxVdirsVUrm0tbqL0rqGOeKob05VDryU1BowIqDiqrirsVdir&#xA;sVdirsVdirsVdirsVdirTokiNHIodHBV0YVBB2IIOKvKvyn8v+d9M1ez/T2l3FnFZ+X7bS7m7lub&#xA;adLm9tp3JmCxTSuecTLR3UNTY0oMVY/cfl75nkvpJRoGpGOaXzCLgnUYTzjuWD6XWt7XipFVX9ht&#xA;6Driq1fLn5rtrdjfz6Jfgx2i22oTQX9ks04fQ2t3/fSXLtGVv+DcUTgCPV/eMdlVW08h+f44vL8T&#xA;6W7NpN5K7VktIrae3eW2pLcQR3DG1uQsbOslqzj4XBSkpXFWe60LvTvzMstZlhe5sp9GudPsUQop&#xA;+u/WI5zAGkaONXuY0HHkwB9OlfFV5PJ+T3n1PJeq6RBpzHTbvSY7q00AzWvqJ5hntPqFz+8Mvo+i&#xA;qq0/2/tOCPiFMVZz5d8secV8+Lqeq2l+scciSWV2t5arZxWT2UcMlnPbqZJndJkYhU/dlj6nIHqq&#xA;j/JXkTU/L3mzWJLuSMeVLCW4u/LEdR+5OqFZr1WFaIsEkbCP/JkbFU3/ACztJ4tL1W7ZWjs9U1i/&#xA;v9NiaopazzEpIAaUWdg049nxVl+KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5.013889</stDim:w>
            <stDim:h>6.388889</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:098011740720681180838019988A8BD6</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:098011740720681180838019988A8BD6</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:b4a89a78-9e52-424e-80cc-38bd24f1f9aa</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:e0717343-dae2-9840-8925-4b2c12176141</stRef:instanceID>
            <stRef:documentID>xmp.did:018011740720681180838019988A8BD6</stRef:documentID>
            <stRef:originalDocumentID>uuid:b4a89a78-9e52-424e-80cc-38bd24f1f9aa</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:018011740720681180838019988A8BD6</stEvt:instanceID>
                  <stEvt:when>2016-05-02T12:19:01-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:098011740720681180838019988A8BD6</stEvt:instanceID>
                  <stEvt:when>2016-05-04T14:47:10-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -431.925 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 431.925 li
327.515 431.925 li
327.515 0 li
cp
clp
[1 0 0 1 0 0 ]ct
150.456 419.317 mo
150.456 425.567 li
150.456 426.01 150.518 426.365 150.641 426.632 cv
150.882 427.127 151.325 427.374 151.969 427.374 cv
152.412 427.374 152.845 427.228 153.268 426.935 cv
153.509 426.771 153.753 426.547 154 426.261 cv
154 420.909 li
154 420.408 153.903 420.079 153.708 419.923 cv
153.512 419.767 153.122 419.672 152.536 419.64 cv
152.536 419.317 li
155.69 419.317 li
155.69 426.192 li
155.69 426.635 155.77 426.939 155.929 427.105 cv
156.088 427.271 156.425 427.345 156.94 427.325 cv
156.94 427.599 li
156.582 427.696 156.319 427.77 156.149 427.818 cv
155.979 427.867 155.696 427.957 155.299 428.087 cv
155.13 428.146 154.759 428.285 154.186 428.507 cv
154.127 428.463 li
154.118 428.36 li
154.118 426.788 li
153.675 427.315 153.271 427.706 152.907 427.96 cv
152.354 428.351 151.768 428.546 151.149 428.546 cv
150.583 428.546 150.049 428.344 149.547 427.939 cv
149.04 427.542 148.786 426.874 148.786 425.936 cv
148.786 420.86 li
148.786 420.344 148.675 419.998 148.454 419.823 cv
148.311 419.714 148.004 419.637 147.536 419.591 cv
147.536 419.317 li
150.456 419.317 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
162.682 428.106 mo
163.19 428.061 163.529 427.977 163.698 427.853 cv
163.958 427.664 164.088 427.286 164.088 426.72 cv
164.088 421.671 li
164.088 421.189 164.025 420.873 163.898 420.724 cv
163.771 420.574 163.561 420.499 163.268 420.499 cv
163.131 420.499 163.029 420.506 162.96 420.519 cv
162.892 420.531 162.812 420.555 162.721 420.587 cv
162.721 420.245 li
163.424 420.011 li
163.678 419.926 164.095 419.773 164.674 419.552 cv
165.253 419.33 165.56 419.22 165.592 419.22 cv
165.651 419.269 li
165.658 419.301 165.661 419.363 165.661 419.454 cv
165.661 420.772 li
166.305 420.187 166.862 419.781 167.331 419.557 cv
167.799 419.332 168.281 419.22 168.776 419.22 cv
169.447 419.22 169.98 419.447 170.377 419.903 cv
170.585 420.15 170.758 420.486 170.895 420.909 cv
171.376 420.421 171.796 420.06 172.155 419.825 cv
172.773 419.422 173.405 419.22 174.049 419.22 cv
175.097 419.22 175.797 419.646 176.149 420.499 cv
176.351 420.98 176.452 421.742 176.452 422.784 cv
176.452 426.837 li
176.452 427.299 176.554 427.613 176.759 427.779 cv
176.964 427.945 177.333 428.055 177.868 428.106 cv
177.868 428.36 li
173.463 428.36 li
173.463 428.087 li
174.03 428.035 174.403 427.921 174.582 427.745 cv
174.76 427.569 174.85 427.211 174.85 426.671 cv
174.85 422.462 li
174.85 421.83 174.782 421.365 174.645 421.065 cv
174.404 420.531 173.932 420.265 173.229 420.265 cv
172.806 420.265 172.386 420.404 171.969 420.685 cv
171.728 420.848 171.432 421.107 171.081 421.466 cv
171.081 426.466 li
171.081 426.993 171.173 427.394 171.359 427.667 cv
171.544 427.94 171.937 428.087 172.536 428.106 cv
172.536 428.36 li
168.053 428.36 li
168.053 428.106 li
168.671 428.028 169.066 427.879 169.235 427.657 cv
169.404 427.436 169.489 426.889 169.489 426.017 cv
169.489 423.287 li
169.489 422.287 169.423 421.599 169.293 421.222 cv
169.079 420.584 168.623 420.265 167.926 420.265 cv
167.529 420.265 167.138 420.373 166.754 420.592 cv
166.371 420.811 166.032 421.095 165.739 421.446 cv
165.739 426.788 li
165.739 427.283 165.825 427.625 165.998 427.813 cv
166.17 428.002 166.546 428.1 167.125 428.106 cv
167.125 428.36 li
162.682 428.36 li
162.682 428.106 li
cp
f
183.649 422.95 mo
182.9 423.197 182.282 423.471 181.793 423.771 cv
180.856 424.35 180.387 425.008 180.387 425.743 cv
180.387 426.336 180.583 426.771 180.973 427.052 cv
181.227 427.234 181.51 427.325 181.823 427.325 cv
182.252 427.325 182.665 427.205 183.058 426.964 cv
183.452 426.723 183.649 426.417 183.649 426.046 cv
183.649 422.95 li
cp
180.065 424.054 mo
180.664 423.663 181.859 423.133 183.649 422.462 cv
183.649 421.632 li
183.649 420.968 183.583 420.506 183.454 420.245 cv
183.232 419.809 182.773 419.591 182.077 419.591 cv
181.745 419.591 181.429 419.676 181.129 419.845 cv
180.83 420.021 180.68 420.262 180.68 420.567 cv
180.68 420.646 180.697 420.777 180.729 420.963 cv
180.761 421.148 180.778 421.268 180.778 421.319 cv
180.778 421.684 180.658 421.938 180.417 422.081 cv
180.28 422.166 180.117 422.208 179.928 422.208 cv
179.635 422.208 179.411 422.111 179.254 421.92 cv
179.098 421.729 179.02 421.515 179.02 421.28 cv
179.02 420.824 179.301 420.348 179.865 419.85 cv
180.428 419.352 181.253 419.103 182.34 419.103 cv
183.603 419.103 184.459 419.513 184.909 420.333 cv
185.15 420.782 185.27 421.437 185.27 422.296 cv
185.27 426.212 li
185.27 426.59 185.296 426.85 185.348 426.993 cv
185.433 427.247 185.609 427.374 185.875 427.374 cv
186.025 427.374 186.149 427.352 186.247 427.306 cv
186.344 427.26 186.513 427.149 186.754 426.974 cv
186.754 427.481 li
186.546 427.735 186.322 427.943 186.081 428.106 cv
185.716 428.354 185.345 428.478 184.967 428.478 cv
184.525 428.478 184.204 428.334 184.005 428.048 cv
183.807 427.762 183.698 427.42 183.678 427.022 cv
183.183 427.452 182.76 427.771 182.409 427.979 cv
181.816 428.331 181.253 428.507 180.719 428.507 cv
180.16 428.507 179.674 428.311 179.264 427.916 cv
178.854 427.521 178.649 427.022 178.649 426.417 cv
178.649 425.473 179.121 424.686 180.065 424.054 cv
cp
f
187.838 425.284 mo
188.161 425.284 li
188.31 426.026 188.511 426.596 188.765 426.993 cv
189.219 427.723 189.885 428.087 190.762 428.087 cv
191.249 428.087 191.634 427.951 191.917 427.682 cv
192.199 427.412 192.34 427.062 192.34 426.632 cv
192.34 426.358 192.259 426.095 192.096 425.841 cv
191.933 425.587 191.647 425.34 191.237 425.099 cv
190.143 424.474 li
189.343 424.044 188.753 423.611 188.375 423.175 cv
187.998 422.738 187.809 422.225 187.809 421.632 cv
187.809 420.902 188.07 420.304 188.59 419.835 cv
189.111 419.366 189.765 419.132 190.553 419.132 cv
190.898 419.132 191.278 419.197 191.691 419.327 cv
192.104 419.457 192.337 419.522 192.389 419.522 cv
192.506 419.522 192.591 419.506 192.643 419.474 cv
192.78 419.317 li
193.014 419.317 li
193.083 422.042 li
192.78 422.042 li
192.65 421.41 192.474 420.919 192.252 420.567 cv
191.849 419.916 191.266 419.591 190.504 419.591 cv
190.048 419.591 189.691 419.73 189.43 420.011 cv
189.169 420.291 189.04 420.619 189.04 420.997 cv
189.04 421.596 189.489 422.13 190.387 422.599 cv
191.676 423.292 li
193.063 424.047 193.756 424.926 193.756 425.929 cv
193.756 426.697 193.468 427.325 192.893 427.813 cv
192.318 428.302 191.566 428.546 190.636 428.546 cv
190.247 428.546 189.805 428.48 189.311 428.351 cv
188.817 428.221 188.524 428.155 188.433 428.155 cv
188.229 428.238 li
188.092 428.438 li
187.838 428.438 li
187.838 425.284 li
cp
f
195.622 425.284 mo
195.944 425.284 li
196.093 426.026 196.294 426.596 196.548 426.993 cv
197.002 427.723 197.668 428.087 198.545 428.087 cv
199.032 428.087 199.417 427.951 199.7 427.682 cv
199.982 427.412 200.124 427.062 200.124 426.632 cv
200.124 426.358 200.042 426.095 199.879 425.841 cv
199.716 425.587 199.43 425.34 199.02 425.099 cv
197.926 424.474 li
197.126 424.044 196.537 423.611 196.159 423.175 cv
195.781 422.738 195.592 422.225 195.592 421.632 cv
195.592 420.902 195.853 420.304 196.374 419.835 cv
196.894 419.366 197.548 419.132 198.336 419.132 cv
198.681 419.132 199.061 419.197 199.474 419.327 cv
199.887 419.457 200.121 419.522 200.172 419.522 cv
200.29 419.522 200.375 419.506 200.426 419.474 cv
200.563 419.317 li
200.797 419.317 li
200.866 422.042 li
200.563 422.042 li
200.433 421.41 200.257 420.919 200.036 420.567 cv
199.632 419.916 199.049 419.591 198.288 419.591 cv
197.832 419.591 197.474 419.73 197.213 420.011 cv
196.953 420.291 196.823 420.619 196.823 420.997 cv
196.823 421.596 197.272 422.13 198.17 422.599 cv
199.459 423.292 li
200.846 424.047 201.54 424.926 201.54 425.929 cv
201.54 426.697 201.251 427.325 200.676 427.813 cv
200.101 428.302 199.349 428.546 198.419 428.546 cv
198.03 428.546 197.588 428.48 197.094 428.351 cv
196.6 428.221 196.307 428.155 196.216 428.155 cv
196.012 428.238 li
195.875 428.438 li
195.622 428.438 li
195.622 425.284 li
cp
f
210.309 417.374 mo
211.142 416.326 212.125 415.482 213.258 414.845 cv
213.444 415.167 li
212.396 416 211.647 416.811 211.198 417.599 cv
210.41 418.973 210.016 420.802 210.016 423.087 cv
210.016 424.779 210.166 426.176 210.465 427.276 cv
210.993 429.203 211.986 430.646 213.444 431.603 cv
213.19 431.925 li
212.389 431.541 211.523 430.789 210.592 429.669 cv
209.049 427.813 208.278 425.704 208.278 423.341 cv
208.278 421.075 208.955 419.086 210.309 417.374 cv
cp
f
214.245 427.989 mo
215.072 427.904 215.602 427.718 215.836 427.428 cv
216.071 427.139 216.188 426.467 216.188 425.413 cv
216.188 417.295 li
216.188 416.572 216.074 416.103 215.846 415.885 cv
215.619 415.666 215.101 415.538 214.293 415.499 cv
214.293 415.128 li
218.237 415.128 li
222.83 425.09 li
227.311 415.128 li
231.286 415.128 li
231.286 415.499 li
230.543 415.551 230.065 415.686 229.85 415.904 cv
229.635 416.122 229.528 416.586 229.528 417.295 cv
229.528 426.184 li
229.528 426.912 229.635 427.379 229.85 427.584 cv
230.065 427.789 230.543 427.924 231.286 427.989 cv
231.286 428.36 li
225.69 428.36 li
225.69 427.989 li
226.498 427.924 227 427.779 227.199 427.555 cv
227.397 427.33 227.497 426.795 227.497 425.949 cv
227.497 416.973 li
222.375 428.36 li
222.101 428.36 li
217.067 417.441 li
217.067 425.413 li
217.067 426.506 217.226 427.219 217.545 427.551 cv
217.753 427.766 218.219 427.911 218.942 427.989 cv
218.942 428.36 li
214.245 428.36 li
214.245 427.989 li
cp
f
234.118 420.899 mo
233.91 421.251 233.759 421.693 233.668 422.228 cv
237.79 422.228 li
237.718 421.576 237.594 421.092 237.418 420.772 cv
237.099 420.199 236.566 419.913 235.817 419.913 cv
235.075 419.913 234.508 420.242 234.118 420.899 cv
cp
238.795 420.152 mo
239.486 420.787 239.831 421.688 239.831 422.853 cv
233.629 422.853 li
233.695 424.359 234.037 425.457 234.655 426.146 cv
235.273 426.834 236.005 427.179 236.852 427.179 cv
237.536 427.179 238.112 427 238.581 426.643 cv
239.049 426.285 239.482 425.779 239.879 425.123 cv
240.221 425.24 li
239.955 426.068 239.455 426.834 238.722 427.539 cv
237.99 428.242 237.093 428.595 236.032 428.595 cv
234.808 428.595 233.862 428.133 233.195 427.208 cv
232.528 426.283 232.194 425.219 232.194 424.015 cv
232.194 422.706 232.582 421.576 233.356 420.626 cv
234.13 419.676 235.14 419.2 236.383 419.2 cv
237.301 419.2 238.105 419.518 238.795 420.152 cv
cp
f
246.325 415.128 mo
246.325 415.47 li
245.825 415.477 245.484 415.51 245.301 415.568 cv
244.983 415.675 244.824 415.89 244.824 416.214 cv
244.824 416.379 244.88 416.611 244.995 416.908 cv
245.108 417.205 245.32 417.699 245.63 418.391 cv
248.761 425.353 li
251.603 417.815 li
251.728 417.482 251.824 417.199 251.889 416.969 cv
251.954 416.736 251.987 416.548 251.987 416.402 cv
251.987 416.012 251.821 415.748 251.489 415.608 cv
251.294 415.529 250.972 415.482 250.524 415.47 cv
250.524 415.128 li
254.615 415.128 li
254.615 415.47 li
254.192 415.528 253.879 415.643 253.677 415.812 cv
253.372 416.065 253.069 416.576 252.769 417.346 cv
248.34 428.595 li
248.04 428.595 li
243.096 417.602 li
242.68 416.67 242.346 416.09 242.095 415.861 cv
241.844 415.633 241.479 415.502 240.997 415.47 cv
240.997 415.128 li
246.325 415.128 li
cp
f
260.436 426.192 mo
260.182 427.059 259.811 427.875 259.323 428.644 cv
258.808 429.464 258.122 430.229 257.262 430.938 cv
256.696 431.407 256.22 431.736 255.836 431.925 cv
255.651 431.603 li
256.654 430.841 257.386 430.063 257.848 429.269 cv
258.668 427.862 259.079 426.004 259.079 423.692 cv
259.079 421.824 258.89 420.297 258.512 419.112 cv
257.985 417.439 257.031 416.124 255.651 415.167 cv
255.905 414.845 li
256.933 415.418 257.89 416.283 258.776 417.442 cv
260.136 419.227 260.817 421.225 260.817 423.438 cv
260.817 424.408 260.69 425.326 260.436 426.192 cv
cp
f
12.334 281.256 mo
12.0347 280.943 11.7515 280.787 11.4844 280.787 cv
7.29492 280.787 li
6.44873 280.787 5.85107 281.014 5.50293 281.466 cv
5.15479 281.918 4.98047 282.359 4.98047 282.789 cv
4.98047 283.609 5.34326 284.248 6.06934 284.703 cv
6.79541 285.158 7.68896 285.387 8.75 285.387 cv
9.79834 285.387 10.7324 285.145 11.5527 284.659 cv
12.373 284.174 12.7832 283.449 12.7832 282.486 cv
12.7832 281.979 12.6333 281.568 12.334 281.256 cv
cp
4.73633 281.539 mo
4.87305 281.279 5.06201 281.027 5.30273 280.787 cv
2.19727 280.787 li
1.80029 280.787 1.52686 280.831 1.37695 280.919 cv
1.22705 281.007 1.15234 281.217 1.15234 281.549 cv
1.16211 281.754 li
1.16846 281.813 1.18164 281.943 1.20117 282.145 cv
.878906 282.145 li
.673828 281.344 li
.595703 281.051 .51416 280.758 .429688 280.465 cv
.345215 280.172 .263672 279.914 .185547 279.693 cv
.152832 279.59 .0913086 279.416 0 279.176 cv
.0195313 279.117 li
1.04492 279.137 li
1.41602 279.143 1.79834 279.15 2.19238 279.156 cv
2.58643 279.162 2.9751 279.166 3.35938 279.166 cv
11.3379 279.186 li
11.7612 279.186 12.0571 279.133 12.2266 279.029 cv
12.396 278.926 12.4805 278.648 12.4805 278.199 cv
12.4756 277.984 li
12.4512 277.77 li
12.7734 277.77 li
12.7866 277.809 12.9492 278.281 13.2617 279.186 cv
13.8379 280.719 li
13.75 280.787 li
12.5488 280.787 li
12.9458 281.152 13.229 281.467 13.3984 281.734 cv
13.6914 282.209 13.8379 282.76 13.8379 283.385 cv
13.8379 284.492 13.4097 285.389 12.5537 286.075 cv
11.6978 286.762 10.7065 287.105 9.58008 287.105 cv
8.16748 287.105 6.95459 286.693 5.94238 285.87 cv
4.93018 285.047 4.42383 284.039 4.42383 282.848 cv
4.42383 282.373 4.52783 281.936 4.73633 281.539 cv
cp
f
13.3984 272.262 mo
13.353 271.754 13.2681 271.416 13.1445 271.246 cv
12.9556 270.986 12.5781 270.855 12.0117 270.855 cv
6.96289 270.855 li
6.48096 270.855 6.16553 270.919 6.01563 271.046 cv
5.86572 271.173 5.79102 271.383 5.79102 271.676 cv
5.79102 271.813 5.79736 271.915 5.81055 271.983 cv
5.82373 272.052 5.84619 272.131 5.87891 272.223 cv
5.53711 272.223 li
5.30273 271.52 li
5.21826 271.266 5.06494 270.85 4.84375 270.27 cv
4.62256 269.689 4.51172 269.385 4.51172 269.352 cv
4.56055 269.293 li
4.59326 269.287 4.65479 269.283 4.74609 269.283 cv
6.06445 269.283 li
5.47852 268.639 5.07324 268.082 4.84863 267.613 cv
4.62402 267.145 4.51172 266.662 4.51172 266.168 cv
4.51172 265.498 4.73975 264.963 5.19531 264.566 cv
5.44287 264.357 5.77783 264.186 6.20117 264.049 cv
5.71289 263.566 5.35156 263.146 5.11719 262.789 cv
4.71338 262.17 4.51172 261.539 4.51172 260.895 cv
4.51172 259.846 4.93799 259.146 5.79102 258.795 cv
6.27295 258.594 7.03467 258.492 8.07617 258.492 cv
12.1289 258.492 li
12.5913 258.492 12.9053 258.39 13.0713 258.185 cv
13.2373 257.979 13.3462 257.609 13.3984 257.076 cv
13.6523 257.076 li
13.6523 261.48 li
13.3789 261.48 li
13.3267 260.914 13.2129 260.541 13.0371 260.362 cv
12.8613 260.184 12.5034 260.094 11.9629 260.094 cv
7.75391 260.094 li
7.12256 260.094 6.65674 260.162 6.35742 260.299 cv
5.82373 260.539 5.55664 261.012 5.55664 261.715 cv
5.55664 262.139 5.69678 262.559 5.97656 262.975 cv
6.13916 263.215 6.3999 263.512 6.75781 263.863 cv
11.7578 263.863 li
12.2852 263.863 12.6855 263.771 12.959 263.585 cv
13.2324 263.399 13.3789 263.008 13.3984 262.408 cv
13.6523 262.408 li
13.6523 266.891 li
13.3984 266.891 li
13.3203 266.271 13.1704 265.879 12.9492 265.709 cv
12.728 265.539 12.1812 265.455 11.3086 265.455 cv
8.57959 265.455 li
7.5791 265.455 6.89063 265.52 6.51367 265.65 cv
5.87549 265.865 5.55664 266.32 5.55664 267.018 cv
5.55664 267.414 5.66553 267.805 5.88379 268.189 cv
6.10205 268.574 6.38672 268.912 6.73828 269.205 cv
12.0801 269.205 li
12.5747 269.205 12.9165 269.119 13.1055 268.946 cv
13.2944 268.773 13.3921 268.398 13.3984 267.818 cv
13.6523 267.818 li
13.6523 272.262 li
13.3984 272.262 li
cp
f
8.24219 251.295 mo
8.48975 252.043 8.76318 252.662 9.0625 253.15 cv
9.64209 254.088 10.2993 254.557 11.0352 254.557 cv
11.6274 254.557 12.064 254.361 12.3438 253.971 cv
12.5259 253.717 12.6172 253.434 12.6172 253.121 cv
12.6172 252.691 12.4966 252.279 12.2559 251.886 cv
12.0151 251.492 11.709 251.295 11.3379 251.295 cv
8.24219 251.295 li
cp
9.3457 254.879 mo
8.95508 254.279 8.42432 253.086 7.75391 251.295 cv
6.92383 251.295 li
6.25977 251.295 5.79736 251.359 5.53711 251.49 cv
5.10107 251.711 4.88281 252.17 4.88281 252.867 cv
4.88281 253.199 4.96729 253.516 5.13672 253.814 cv
5.3125 254.113 5.55322 254.264 5.85938 254.264 cv
5.9375 254.264 6.06934 254.248 6.25488 254.215 cv
6.44043 254.182 6.55908 254.166 6.61133 254.166 cv
6.97607 254.166 7.22998 254.287 7.37305 254.527 cv
7.45752 254.664 7.5 254.826 7.5 255.016 cv
7.5 255.309 7.40381 255.533 7.21191 255.689 cv
7.02002 255.846 6.80664 255.924 6.57227 255.924 cv
6.1167 255.924 5.63965 255.643 5.1416 255.079 cv
4.64355 254.516 4.39453 253.691 4.39453 252.604 cv
4.39453 251.34 4.80469 250.484 5.625 250.035 cv
6.07422 249.795 6.72852 249.674 7.58789 249.674 cv
11.5039 249.674 li
11.8813 249.674 12.1421 249.648 12.2852 249.596 cv
12.5391 249.512 12.666 249.336 12.666 249.068 cv
12.666 248.918 12.6431 248.795 12.5977 248.697 cv
12.5522 248.6 12.4414 248.43 12.2656 248.189 cv
12.7734 248.189 li
13.0273 248.398 13.2358 248.623 13.3984 248.863 cv
13.646 249.229 13.7695 249.6 13.7695 249.977 cv
13.7695 250.42 13.6265 250.74 13.3398 250.938 cv
13.0532 251.137 12.7114 251.246 12.3145 251.266 cv
12.7441 251.76 13.063 252.184 13.2715 252.535 cv
13.623 253.127 13.7988 253.691 13.7988 254.225 cv
13.7988 254.785 13.6021 255.27 13.208 255.68 cv
12.814 256.09 12.3145 256.295 11.709 256.295 cv
10.7651 256.295 9.97705 255.822 9.3457 254.879 cv
cp
f
10.5762 247.105 mo
10.5762 246.783 li
11.3184 246.634 11.8882 246.433 12.2852 246.18 cv
13.0142 245.725 13.3789 245.059 13.3789 244.182 cv
13.3789 243.695 13.2437 243.311 12.9736 243.027 cv
12.7036 242.744 12.3535 242.604 11.9238 242.604 cv
11.6504 242.604 11.3867 242.686 11.1328 242.848 cv
10.8789 243.01 10.6313 243.297 10.3906 243.707 cv
9.76563 244.801 li
9.33594 245.602 8.90283 246.19 8.4668 246.568 cv
8.03076 246.945 7.51611 247.135 6.92383 247.135 cv
6.19482 247.135 5.5957 246.875 5.12695 246.354 cv
4.6582 245.832 4.42383 245.178 4.42383 244.391 cv
4.42383 244.045 4.48877 243.666 4.61914 243.253 cv
4.74951 242.84 4.81445 242.607 4.81445 242.555 cv
4.81445 242.438 4.79834 242.354 4.76563 242.301 cv
4.60938 242.164 li
4.60938 241.93 li
7.33398 241.861 li
7.33398 242.164 li
6.70264 242.295 6.21094 242.471 5.85938 242.691 cv
5.2085 243.096 4.88281 243.678 4.88281 244.439 cv
4.88281 244.895 5.02295 245.254 5.30273 245.514 cv
5.58252 245.773 5.91162 245.904 6.28906 245.904 cv
6.88818 245.904 7.42188 245.455 7.89063 244.557 cv
8.58398 243.268 li
9.33936 241.881 10.2183 241.188 11.2207 241.188 cv
11.9888 241.188 12.6172 241.475 13.1055 242.051 cv
13.5938 242.625 13.8379 243.378 13.8379 244.307 cv
13.8379 244.697 13.7729 245.139 13.6426 245.633 cv
13.5122 246.127 13.4473 246.42 13.4473 246.51 cv
13.5303 246.715 li
13.7305 246.852 li
13.7305 247.105 li
10.5762 247.105 li
cp
f
10.5762 239.322 mo
10.5762 239 li
11.3184 238.851 11.8882 238.649 12.2852 238.396 cv
13.0142 237.941 13.3789 237.275 13.3789 236.398 cv
13.3789 235.912 13.2437 235.527 12.9736 235.244 cv
12.7036 234.961 12.3535 234.82 11.9238 234.82 cv
11.6504 234.82 11.3867 234.902 11.1328 235.064 cv
10.8789 235.227 10.6313 235.514 10.3906 235.924 cv
9.76563 237.018 li
9.33594 237.818 8.90283 238.407 8.4668 238.785 cv
8.03076 239.162 7.51611 239.352 6.92383 239.352 cv
6.19482 239.352 5.5957 239.092 5.12695 238.57 cv
4.6582 238.049 4.42383 237.395 4.42383 236.607 cv
4.42383 236.262 4.48877 235.883 4.61914 235.47 cv
4.74951 235.057 4.81445 234.824 4.81445 234.771 cv
4.81445 234.654 4.79834 234.57 4.76563 234.518 cv
4.60938 234.381 li
4.60938 234.146 li
7.33398 234.078 li
7.33398 234.381 li
6.70264 234.512 6.21094 234.688 5.85938 234.908 cv
5.2085 235.313 4.88281 235.895 4.88281 236.656 cv
4.88281 237.111 5.02295 237.471 5.30273 237.73 cv
5.58252 237.99 5.91162 238.121 6.28906 238.121 cv
6.88818 238.121 7.42188 237.672 7.89063 236.773 cv
8.58398 235.484 li
9.33936 234.098 10.2183 233.404 11.2207 233.404 cv
11.9888 233.404 12.6172 233.691 13.1055 234.268 cv
13.5938 234.842 13.8379 235.595 13.8379 236.523 cv
13.8379 236.914 13.7729 237.355 13.6426 237.85 cv
13.5122 238.344 13.4473 238.637 13.4473 238.727 cv
13.5303 238.932 li
13.7305 239.068 li
13.7305 239.322 li
10.5762 239.322 li
cp
f
2.66602 224.635 mo
1.61768 223.801 .774902 222.818 .136719 221.686 cv
.458984 221.5 li
1.29248 222.548 2.10303 223.297 2.89063 223.746 cv
4.26416 224.534 6.09375 224.928 8.37891 224.928 cv
10.0718 224.928 11.4683 224.778 12.5684 224.479 cv
14.4956 223.951 15.9375 222.958 16.8945 221.5 cv
17.2168 221.754 li
16.8325 222.555 16.0806 223.42 14.9609 224.352 cv
13.1055 225.895 10.9961 226.666 8.63281 226.666 cv
6.36719 226.666 4.37842 225.989 2.66602 224.635 cv
cp
f
13.2813 220.699 mo
13.1968 219.872 13.0098 219.342 12.7202 219.107 cv
12.4307 218.873 11.7588 218.756 10.7051 218.756 cv
2.58643 218.756 li
1.86426 218.756 1.39453 218.87 1.17627 219.098 cv
.958496 219.325 .830078 219.843 .791016 220.65 cv
.419922 220.65 li
.419922 216.707 li
10.3818 212.114 li
.419922 207.633 li
.419922 203.658 li
.791016 203.658 li
.843262 204.4 .978027 204.879 1.1958 205.094 cv
1.41406 205.309 1.87744 205.416 2.58643 205.416 cv
11.4761 205.416 li
12.2046 205.416 12.6714 205.309 12.8765 205.094 cv
13.0815 204.879 13.2163 204.4 13.2813 203.658 cv
13.6523 203.658 li
13.6523 209.254 li
13.2813 209.254 li
13.2163 208.446 13.0713 207.943 12.8472 207.745 cv
12.6226 207.547 12.0874 207.447 11.2417 207.447 cv
2.26465 207.447 li
13.6523 212.569 li
13.6523 212.843 li
2.73291 217.877 li
10.7051 217.877 li
11.7979 217.877 12.5103 217.718 12.8423 217.398 cv
13.0571 217.19 13.2031 216.725 13.2813 216.002 cv
13.6523 216.002 li
13.6523 220.699 li
13.2813 220.699 li
cp
f
6.19141 200.826 mo
6.54297 201.034 6.98584 201.185 7.51953 201.275 cv
7.51953 197.154 li
6.86865 197.226 6.3833 197.35 6.06445 197.525 cv
5.4917 197.845 5.20508 198.378 5.20508 199.127 cv
5.20508 199.869 5.53369 200.436 6.19141 200.826 cv
cp
5.44434 196.148 mo
6.0791 195.458 6.979 195.113 8.14453 195.113 cv
8.14453 201.314 li
9.65186 201.249 10.7495 200.907 11.438 200.289 cv
12.1265 199.671 12.4707 198.938 12.4707 198.092 cv
12.4707 197.408 12.292 196.832 11.9346 196.363 cv
11.5776 195.895 11.0708 195.462 10.4146 195.064 cv
10.5317 194.723 li
11.3599 194.989 12.126 195.489 12.8306 196.222 cv
13.5347 196.954 13.8867 197.851 13.8867 198.912 cv
13.8867 200.136 13.4243 201.082 12.5 201.749 cv
11.5757 202.416 10.5112 202.75 9.30664 202.75 cv
7.99805 202.75 6.86865 202.362 5.91797 201.588 cv
4.96729 200.813 4.49219 199.804 4.49219 198.561 cv
4.49219 197.643 4.80957 196.839 5.44434 196.148 cv
cp
f
.419922 188.619 mo
.761719 188.619 li
.768555 189.119 .80127 189.46 .86084 189.643 cv
.966797 189.961 1.18164 190.12 1.50586 190.12 cv
1.6709 190.12 1.90283 190.063 2.2002 189.949 cv
2.49756 189.836 2.9917 189.624 3.68213 189.313 cv
10.6445 186.183 li
3.10742 183.341 li
2.77393 183.216 2.4917 183.12 2.26025 183.055 cv
2.02881 182.99 1.83984 182.957 1.69434 182.957 cv
1.3042 182.957 1.03955 183.123 .900391 183.455 cv
.821289 183.649 .774902 183.972 .761719 184.42 cv
.419922 184.42 li
.419922 180.329 li
.761719 180.329 li
.820313 180.752 .934082 181.064 1.10352 181.267 cv
1.35742 181.572 1.86865 181.875 2.63721 182.175 cv
13.8867 186.604 li
13.8867 186.904 li
2.89404 191.848 li
1.96143 192.264 1.38135 192.598 1.15283 192.849 cv
.924805 193.1 .794434 193.465 .761719 193.947 cv
.419922 193.947 li
.419922 188.619 li
cp
f
11.4844 174.508 mo
12.3501 174.762 13.1675 175.133 13.9355 175.621 cv
14.7559 176.136 15.521 176.822 16.2305 177.682 cv
16.6992 178.248 17.0278 178.724 17.2168 179.107 cv
16.8945 179.293 li
16.1328 178.29 15.355 177.558 14.5605 177.096 cv
13.1543 176.275 11.2954 175.865 8.98438 175.865 cv
7.11572 175.865 5.58936 176.054 4.4043 176.432 cv
2.73096 176.959 1.41602 177.913 .458984 179.293 cv
.136719 179.039 li
.709473 178.011 1.57568 177.054 2.73438 176.168 cv
4.51807 174.808 6.51709 174.127 8.73047 174.127 cv
9.70068 174.127 10.6187 174.254 11.4844 174.508 cv
cp
f
51.2124 403.412 mo
51.5703 402.364 51.7495 400.848 51.7495 398.864 cv
51.7495 397.283 51.6421 396.021 51.4272 395.078 cv
51.0234 393.322 50.2686 392.443 49.1616 392.443 cv
48.0547 392.443 47.2964 393.348 46.8862 395.156 cv
46.6714 396.119 46.564 397.388 46.564 398.962 cv
46.564 400.438 46.6748 401.619 46.896 402.504 cv
47.3125 404.156 48.0938 404.982 49.2397 404.982 cv
50.1968 404.982 50.8545 404.459 51.2124 403.412 cv
cp
52.6968 394.27 mo
53.3545 395.539 53.6831 396.998 53.6831 398.645 cv
53.6831 399.939 53.4814 401.16 53.0776 402.307 cv
52.3159 404.461 50.9976 405.539 49.1226 405.539 cv
47.8398 405.539 46.7852 404.957 45.9585 403.791 cv
45.0732 402.547 44.6304 400.857 44.6304 398.723 cv
44.6304 397.043 44.9268 395.598 45.519 394.387 cv
46.3198 392.74 47.5503 391.916 49.2104 391.916 cv
50.708 391.916 51.8701 392.701 52.6968 394.27 cv
cp
f
108.117 392.009 mo
108.122 392.121 li
108.122 403.879 li
108.122 404.381 108.256 404.699 108.524 404.836 cv
108.792 404.973 109.293 405.055 110.026 405.08 cv
110.026 405.354 li
104.508 405.354 li
104.508 405.061 li
105.296 405.021 105.811 404.914 106.051 404.738 cv
106.292 404.563 106.413 404.182 106.413 403.596 cv
106.413 394.553 li
106.413 394.24 106.374 394.002 106.295 393.84 cv
106.217 393.678 106.048 393.596 105.788 393.596 cv
105.618 393.596 105.398 393.643 105.128 393.737 cv
104.858 393.832 104.606 393.932 104.372 394.035 cv
104.372 393.762 li
107.956 391.936 li
108.073 391.936 li
108.117 392.009 li
cp
f
156.85 405.129 mo
159.233 402.656 160.851 400.842 161.704 399.684 cv
162.556 398.525 162.983 397.397 162.983 396.298 cv
162.983 395.336 162.722 394.602 162.202 394.098 cv
161.681 393.594 161.059 393.342 160.336 393.342 cv
159.445 393.342 158.722 393.667 158.168 394.317 cv
157.862 394.676 157.569 395.225 157.29 395.967 cv
156.87 395.879 li
157.195 394.382 157.747 393.343 158.525 392.76 cv
159.303 392.178 160.138 391.887 161.03 391.887 cv
162.13 391.887 163.02 392.233 163.701 392.926 cv
164.381 393.619 164.721 394.467 164.721 395.468 cv
164.721 396.535 164.353 397.563 163.618 398.551 cv
162.881 399.54 161.283 401.3 158.821 403.83 cv
163.304 403.83 li
163.929 403.83 164.37 403.756 164.624 403.605 cv
164.877 403.456 165.164 403.092 165.483 402.514 cv
165.737 402.63 li
164.653 405.354 li
156.85 405.354 li
156.85 405.129 li
cp
f
212.428 404.216 mo
213.017 404.59 213.517 404.777 213.927 404.777 cv
214.838 404.777 215.516 404.469 215.958 403.854 cv
216.401 403.236 216.623 402.566 216.623 401.843 cv
216.623 401.146 216.444 400.532 216.085 400.004 cv
215.48 399.111 214.458 398.664 213.019 398.664 cv
212.775 398.669 li
212.697 398.672 212.606 398.68 212.501 398.693 cv
212.482 398.439 li
213.524 398.063 214.344 397.629 214.943 397.141 cv
215.542 396.652 215.841 396.008 215.841 395.207 cv
215.841 394.498 215.605 393.957 215.133 393.586 cv
214.662 393.215 214.123 393.029 213.517 393.029 cv
212.801 393.029 212.169 393.293 211.623 393.82 cv
211.323 394.107 211 394.549 210.656 395.148 cv
210.353 395.08 li
210.614 394.09 211.098 393.299 211.808 392.707 cv
212.518 392.115 213.338 391.818 214.269 391.818 cv
215.265 391.818 216.035 392.092 216.579 392.639 cv
217.123 393.186 217.394 393.816 217.394 394.533 cv
217.394 395.164 217.169 395.744 216.72 396.271 cv
216.466 396.57 216.073 396.906 215.539 397.277 cv
216.164 397.545 216.665 397.857 217.042 398.215 cv
217.752 398.898 218.107 399.764 218.107 400.813 cv
218.107 402.049 217.621 403.141 216.647 404.084 cv
215.673 405.027 214.289 405.5 212.492 405.5 cv
211.691 405.5 211.129 405.381 210.807 405.144 cv
210.485 404.906 210.324 404.65 210.324 404.377 cv
210.324 404.207 210.377 404.045 210.485 403.889 cv
210.592 403.732 210.766 403.654 211.007 403.654 cv
211.366 403.654 211.839 403.842 212.428 404.216 cv
cp
f
269.605 393.951 mo
264.812 400.725 li
269.605 400.725 li
269.605 393.951 li
cp
270.25 391.936 mo
271.177 391.936 li
271.177 400.725 li
273.218 400.725 li
273.218 402.023 li
271.177 402.023 li
271.177 405.354 li
269.625 405.354 li
269.625 402.023 li
264 402.023 li
264 400.725 li
270.25 391.936 li
cp
f
321.733 404.196 mo
322.335 404.616 322.8 404.826 323.126 404.826 cv
323.876 404.826 324.532 404.496 325.092 403.835 cv
325.653 403.174 325.933 402.361 325.933 401.398 cv
325.933 399.713 325.034 398.498 323.234 397.756 cv
322.237 397.346 321.307 397.141 320.447 397.141 cv
320.303 397.141 320.213 397.136 320.178 397.126 cv
320.046 397.023 li
320.081 396.893 li
320.115 396.789 li
322.245 392.121 li
326.431 392.121 li
326.64 392.121 326.801 392.086 326.915 392.014 cv
327.029 391.941 327.176 391.809 327.359 391.613 cv
327.515 391.75 li
326.763 393.557 li
326.737 393.615 326.666 393.652 326.548 393.669 cv
326.431 393.686 326.303 393.693 326.167 393.693 cv
322.383 393.693 li
321.551 395.402 li
322.621 395.584 323.403 395.758 323.898 395.92 cv
324.712 396.193 325.394 396.598 325.941 397.131 cv
326.411 397.594 326.766 398.112 327.007 398.688 cv
327.248 399.265 327.369 399.875 327.369 400.52 cv
327.369 401.959 326.855 403.16 325.829 404.123 cv
324.802 405.086 323.503 405.568 321.932 405.568 cv
321.293 405.568 320.779 405.506 320.387 405.383 cv
319.736 405.182 319.41 404.82 319.41 404.299 cv
319.41 404.104 319.48 403.933 319.62 403.786 cv
319.76 403.64 319.977 403.566 320.27 403.566 cv
320.642 403.566 321.129 403.776 321.733 404.196 cv
cp
f
37.6499 389.299 mo
38.0078 388.251 38.187 386.734 38.187 384.751 cv
38.187 383.17 38.0796 381.908 37.8647 380.965 cv
37.4609 379.209 36.7061 378.33 35.5991 378.33 cv
34.4922 378.33 33.7339 379.234 33.3237 381.043 cv
33.1089 382.006 33.0015 383.274 33.0015 384.849 cv
33.0015 386.325 33.1123 387.506 33.3335 388.391 cv
33.75 390.043 34.5313 390.869 35.6772 390.869 cv
36.6343 390.869 37.292 390.346 37.6499 389.299 cv
cp
39.1343 380.156 mo
39.792 381.426 40.1206 382.885 40.1206 384.531 cv
40.1206 385.826 39.9189 387.047 39.5151 388.193 cv
38.7534 390.348 37.4351 391.426 35.5601 391.426 cv
34.2773 391.426 33.2227 390.844 32.396 389.678 cv
31.5107 388.434 31.0679 386.744 31.0679 384.609 cv
31.0679 382.93 31.3643 381.484 31.9565 380.273 cv
32.7573 378.627 33.9878 377.803 35.6479 377.803 cv
37.1455 377.803 38.3076 378.588 39.1343 380.156 cv
cp
f
36.854 323.896 mo
36.8589 324.008 li
36.8589 335.766 li
36.8589 336.268 36.9932 336.586 37.2612 336.723 cv
37.5293 336.859 38.0303 336.941 38.7632 336.967 cv
38.7632 337.24 li
33.2456 337.24 li
33.2456 336.947 li
34.0332 336.908 34.5479 336.801 34.7886 336.625 cv
35.0293 336.449 35.1499 336.068 35.1499 335.482 cv
35.1499 326.439 li
35.1499 326.127 35.1108 325.889 35.0327 325.727 cv
34.9546 325.564 34.7852 325.482 34.5249 325.482 cv
34.3555 325.482 34.1357 325.529 33.8657 325.624 cv
33.5957 325.719 33.3433 325.818 33.1089 325.922 cv
33.1089 325.648 li
36.6929 323.822 li
36.8101 323.822 li
36.854 323.896 li
cp
f
31.4878 283.008 mo
33.8706 280.535 35.4883 278.721 36.3413 277.563 cv
37.1943 276.404 37.6206 275.276 37.6206 274.177 cv
37.6206 273.215 37.3604 272.48 36.8394 271.977 cv
36.3184 271.473 35.6968 271.221 34.9741 271.221 cv
34.082 271.221 33.3594 271.546 32.8062 272.196 cv
32.5 272.555 32.207 273.104 31.9272 273.846 cv
31.5073 273.758 li
31.833 272.261 32.3848 271.222 33.1626 270.639 cv
33.9404 270.057 34.7754 269.766 35.6675 269.766 cv
36.7676 269.766 37.6582 270.112 38.3384 270.805 cv
39.0186 271.498 39.3589 272.346 39.3589 273.347 cv
39.3589 274.414 38.9907 275.441 38.2549 276.43 cv
37.519 277.419 35.9199 279.179 33.4585 281.709 cv
37.9419 281.709 li
38.5674 281.709 39.0068 281.635 39.2607 281.484 cv
39.5146 281.335 39.8013 280.971 40.1206 280.393 cv
40.3745 280.509 li
39.2905 283.232 li
31.4878 283.232 li
31.4878 283.008 li
cp
f
33.8657 228.103 mo
34.4551 228.477 34.9546 228.664 35.3647 228.664 cv
36.2764 228.664 36.9531 228.356 37.396 227.74 cv
37.8389 227.124 38.0601 226.454 38.0601 225.729 cv
38.0601 225.032 37.8809 224.419 37.5229 223.891 cv
36.9175 222.998 35.8955 222.551 34.4565 222.551 cv
34.2124 222.556 li
34.1343 222.559 34.043 222.567 33.939 222.58 cv
33.9194 222.326 li
34.9609 221.949 35.7813 221.516 36.3804 221.027 cv
36.9795 220.539 37.2788 219.895 37.2788 219.094 cv
37.2788 218.384 37.043 217.844 36.5708 217.473 cv
36.0986 217.102 35.5601 216.916 34.9546 216.916 cv
34.2383 216.916 33.6069 217.18 33.0601 217.707 cv
32.7607 217.994 32.4385 218.436 32.0933 219.035 cv
31.7905 218.967 li
32.0508 217.977 32.5361 217.186 33.2456 216.594 cv
33.9551 216.001 34.7754 215.705 35.7065 215.705 cv
36.7026 215.705 37.4727 215.979 38.0161 216.525 cv
38.5596 217.072 38.8315 217.704 38.8315 218.42 cv
38.8315 219.051 38.6069 219.631 38.1577 220.158 cv
37.9038 220.458 37.5098 220.793 36.9761 221.164 cv
37.6011 221.431 38.1025 221.744 38.48 222.102 cv
39.1895 222.785 39.5444 223.651 39.5444 224.699 cv
39.5444 225.936 39.0576 227.027 38.0845 227.971 cv
37.1113 228.915 35.7261 229.387 33.9292 229.387 cv
33.1284 229.387 32.5669 229.268 32.2446 229.03 cv
31.9224 228.792 31.7612 228.537 31.7612 228.264 cv
31.7612 228.094 31.8149 227.932 31.9224 227.775 cv
32.0298 227.619 32.2041 227.541 32.4448 227.541 cv
32.8027 227.541 33.2764 227.728 33.8657 228.103 cv
cp
f
36.7222 163.838 mo
31.9297 170.611 li
36.7222 170.611 li
36.7222 163.838 li
cp
37.3667 161.822 mo
38.2944 161.822 li
38.2944 170.611 li
40.3354 170.611 li
40.3354 171.91 li
38.2944 171.91 li
38.2944 175.24 li
36.7417 175.24 li
36.7417 171.91 li
31.1167 171.91 li
31.1167 170.611 li
37.3667 161.822 li
cp
f
33.8496 120.083 mo
34.4526 120.503 34.9175 120.713 35.2437 120.713 cv
35.9932 120.713 36.6484 120.383 37.209 119.722 cv
37.77 119.061 38.0503 118.249 38.0503 117.285 cv
38.0503 115.599 37.1504 114.385 35.3511 113.643 cv
34.3535 113.232 33.4248 113.027 32.564 113.027 cv
32.4209 113.027 32.3311 113.022 32.2949 113.013 cv
32.1631 112.91 li
32.1973 112.778 li
32.2314 112.676 li
34.3613 108.008 li
38.5488 108.008 li
38.7568 108.008 38.918 107.972 39.0317 107.9 cv
39.1455 107.829 39.2939 107.695 39.4761 107.5 cv
39.6323 107.637 li
38.8799 109.443 li
38.854 109.502 38.7827 109.539 38.665 109.556 cv
38.5479 109.572 38.4209 109.58 38.2842 109.58 cv
34.5 109.58 li
33.6689 111.289 li
34.7378 111.472 35.5195 111.644 36.0151 111.807 cv
36.8296 112.08 37.5107 112.483 38.0586 113.018 cv
38.5278 113.479 38.8828 113.999 39.124 114.575 cv
39.3652 115.151 39.4858 115.762 39.4858 116.406 cv
39.4858 117.845 38.9722 119.046 37.9458 120.01 cv
36.9189 120.974 35.6201 121.455 34.0493 121.455 cv
33.4106 121.455 32.8955 121.394 32.5044 121.27 cv
31.8525 121.067 31.5269 120.706 31.5269 120.186 cv
31.5269 119.99 31.5967 119.819 31.7373 119.673 cv
31.877 119.526 32.0942 119.453 32.3872 119.453 cv
32.7593 119.453 33.2466 119.663 33.8496 120.083 cv
cp
f
38.0503 61.2441 mo
37.5947 60.124 36.8198 59.5645 35.7261 59.5645 cv
34.7168 59.5645 34.0464 59.8643 33.7144 60.4629 cv
33.519 60.8145 33.4214 61.4004 33.4214 62.2207 cv
33.4214 63.2822 33.6475 64.3203 34.1001 65.3359 cv
34.5527 66.3516 35.2671 66.8594 36.2437 66.8594 cv
37.0186 66.8594 37.5815 66.5293 37.9331 65.8682 cv
38.2847 65.207 38.4604 64.4346 38.4604 63.5488 cv
38.4604 62.6826 38.3237 61.915 38.0503 61.2441 cv
cp
39.1001 66.0195 mo
38.335 66.9766 37.3408 67.4551 36.1167 67.4551 cv
34.9707 67.4551 33.9277 66.918 32.9868 65.8438 cv
32.0459 64.7695 31.5757 63.3408 31.5757 61.5566 cv
31.5757 59.2588 32.4873 57.2861 34.3101 55.6387 cv
35.9375 54.2588 37.7671 53.5684 39.7983 53.5684 cv
39.8472 53.8906 li
39.0332 54.04 38.332 54.2441 37.7427 54.501 cv
37.1533 54.7578 36.6279 55.1182 36.1655 55.5801 cv
35.6904 56.0488 35.2441 56.6445 34.8276 57.3672 cv
34.4111 58.0898 34.1245 58.8057 33.9683 59.5156 cv
34.3721 59.2686 34.7202 59.0859 35.0132 58.9688 cv
35.5342 58.7607 36.0581 58.6563 36.5854 58.6563 cv
37.6206 58.6563 38.4897 59.0146 39.1929 59.7305 cv
39.896 60.4463 40.2476 61.4688 40.2476 62.7969 cv
40.2476 63.9883 39.8652 65.0625 39.1001 66.0195 cv
cp
f
39.8667 0 mo
39.8667 .322266 li
35.6284 13.418 li
34.3457 13.418 li
38.2935 1.47461 li
34.0361 1.47461 li
33.4048 1.47461 32.9507 1.5791 32.6738 1.78711 cv
32.3975 1.99512 32.0474 2.43164 31.6245 3.0957 cv
31.2827 2.93945 li
31.7061 1.89746 31.9678 1.25488 32.0688 1.01074 cv
32.1699 .766602 32.3018 .429688 32.4644 0 cv
39.8667 0 li
cp
f
322.501 386.193 mo
52.5019 386.193 li
52.5019 40.5938 li
95.2427 83.3346 li
95.2427 105.394 li
117.302 105.394 li
155.729 143.821 li
86.5591 143.821 li
86.5591 205.36 li
217.268 205.36 li
322.501 310.594 li
322.501 386.193 li
.494118 .827451 .968627 rgb
f
322.501 310.594 mo
322.501 310.594 li
217.268 205.36 li
295.96 205.36 li
295.96 143.821 li
192.77 143.821 li
203.428 125.406 li
203.613 105.394 li
214.502 105.521 li
214.502 106.27 li
214.933 105.526 li
214.933 105.526 li
215.01 105.394 li
271.261 105.394 li
271.261 8.19339 li
322.501 8.19339 li
322.501 310.594 li
f
214.502 106.27 mo
214.502 105.521 li
214.502 105.394 li
215.009 105.394 li
214.933 105.526 li
214.502 106.27 li
f
149.702 137.794 mo
117.302 105.394 li
149.702 105.394 li
149.702 137.794 li
95.2427 83.3345 mo
52.5019 40.5938 li
52.5019 8.19339 li
149.702 8.19339 li
95.2427 8.19339 li
95.2427 83.3345 li
f
149.702 128.594 mo
149.702 105.394 li
158.558 105.394 li
149.702 128.594 li
f
271.261 105.394 mo
215.01 105.394 li
215.009 105.394 li
214.502 105.394 li
203.613 105.394 li
158.558 105.394 li
149.702 105.394 li
149.702 8.19339 li
271.261 8.19339 li
271.261 105.394 li
149.702 105.394 mo
117.302 105.394 li
117.302 105.394 li
95.2427 105.394 li
95.2427 83.3346 li
95.2427 83.3345 li
95.2427 8.19339 li
149.702 8.19339 li
149.702 105.394 li
f
295.96 205.36 mo
217.268 205.36 li
86.5591 205.36 li
86.5591 143.821 li
155.729 143.821 li
192.77 143.821 li
295.96 143.821 li
295.96 205.36 li
f
195.292 187.583 mo
195.292 189.81 193.488 191.615 191.259 191.615 cv
189.031 191.615 187.227 189.81 187.227 187.583 cv
187.227 185.355 189.031 183.55 191.259 183.55 cv
193.488 183.55 195.292 185.355 195.292 187.583 cv
cp
0 0 0 rgb
f
195.292 187.583 mo
194.942 187.583 li
194.939 189.616 193.294 191.261 191.259 191.265 cv
189.224 191.261 187.581 189.616 187.577 187.583 cv
187.581 185.549 189.224 183.903 191.259 183.9 cv
193.294 183.903 194.939 185.549 194.942 187.583 cv
195.292 187.583 li
195.642 187.583 li
195.642 185.162 193.681 183.2 191.259 183.2 cv
188.837 183.2 186.877 185.162 186.877 187.583 cv
186.877 190.003 188.837 191.965 191.259 191.965 cv
193.681 191.965 195.642 190.003 195.642 187.583 cv
195.292 187.583 li
cp
f
172.73 127.427 mo
172.73 129.654 170.925 131.459 168.697 131.459 cv
166.468 131.459 164.665 129.654 164.665 127.427 cv
164.665 125.2 166.468 123.394 168.697 123.394 cv
170.925 123.394 172.73 125.2 172.73 127.427 cv
cp
f
172.73 127.427 mo
172.38 127.427 li
172.376 129.46 170.732 131.105 168.697 131.109 cv
166.662 131.105 165.018 129.461 165.015 127.427 cv
165.018 125.393 166.662 123.748 168.697 123.744 cv
170.732 123.748 172.376 125.393 172.38 127.427 cv
172.73 127.427 li
173.08 127.427 li
173.08 125.006 171.119 123.044 168.697 123.044 cv
166.275 123.044 164.315 125.006 164.315 127.427 cv
164.315 129.847 166.275 131.809 168.697 131.809 cv
171.119 131.809 173.08 129.847 173.08 127.427 cv
172.73 127.427 li
cp
f
165.147 128.594 mo
165.147 130.821 163.342 132.626 161.114 132.626 cv
158.885 132.626 157.082 130.821 157.082 128.594 cv
157.082 126.367 158.885 124.561 161.114 124.561 cv
163.342 124.561 165.147 126.367 165.147 128.594 cv
cp
f
165.147 128.594 mo
164.797 128.594 li
164.793 130.627 163.149 132.272 161.114 132.276 cv
159.079 132.272 157.435 130.628 157.432 128.594 cv
157.435 126.56 159.079 124.915 161.114 124.911 cv
163.149 124.915 164.793 126.56 164.797 128.594 cv
165.147 128.594 li
165.497 128.594 li
165.497 126.173 163.536 124.211 161.114 124.211 cv
158.692 124.211 156.732 126.173 156.732 128.594 cv
156.732 131.014 158.692 132.976 161.114 132.976 cv
163.536 132.976 165.497 131.014 165.497 128.594 cv
165.147 128.594 li
cp
f
183.224 114.875 mo
183.224 117.103 181.419 118.908 179.191 118.908 cv
176.962 118.908 175.159 117.103 175.159 114.875 cv
175.159 112.648 176.962 110.843 179.191 110.843 cv
181.419 110.843 183.224 112.648 183.224 114.875 cv
cp
f
183.224 114.875 mo
182.874 114.875 li
182.87 116.909 181.226 118.554 179.191 118.558 cv
177.156 118.554 175.512 116.909 175.509 114.875 cv
175.512 112.842 177.156 111.196 179.191 111.193 cv
181.226 111.196 182.87 112.842 182.874 114.875 cv
183.224 114.875 li
183.574 114.875 li
183.574 112.455 181.613 110.493 179.191 110.493 cv
176.769 110.493 174.809 112.455 174.809 114.875 cv
174.809 117.296 176.769 119.258 179.191 119.258 cv
181.613 119.258 183.574 117.296 183.574 114.875 cv
183.224 114.875 li
cp
f
213.147 100.01 mo
213.147 102.237 211.342 104.042 209.114 104.042 cv
206.885 104.042 205.082 102.237 205.082 100.01 cv
205.082 97.7832 206.885 95.9775 209.114 95.9775 cv
211.342 95.9775 213.147 97.7832 213.147 100.01 cv
cp
f
213.147 100.01 mo
212.797 100.01 li
212.793 102.044 211.149 103.689 209.114 103.692 cv
207.079 103.689 205.435 102.044 205.432 100.01 cv
205.435 97.9764 207.079 96.3312 209.114 96.3275 cv
211.149 96.3312 212.793 97.9766 212.797 100.01 cv
213.147 100.01 li
213.497 100.01 li
213.497 97.5899 211.536 95.6277 209.114 95.6275 cv
206.692 95.6277 204.732 97.59 204.732 100.01 cv
204.732 102.431 206.692 104.392 209.114 104.392 cv
211.536 104.392 213.497 102.431 213.497 100.01 cv
213.147 100.01 li
cp
f
176.762 135.075 mo
176.762 137.302 174.958 139.107 172.729 139.107 cv
170.5 139.107 168.697 137.302 168.697 135.075 cv
168.697 132.848 170.5 131.042 172.729 131.042 cv
174.958 131.042 176.762 132.848 176.762 135.075 cv
cp
f
176.762 135.075 mo
176.412 135.075 li
176.409 137.109 174.764 138.754 172.729 138.757 cv
170.694 138.754 169.05 137.109 169.047 135.075 cv
169.05 133.041 170.694 131.396 172.729 131.392 cv
174.764 131.396 176.409 133.042 176.412 135.075 cv
176.762 135.075 li
177.112 135.075 li
177.112 132.655 175.151 130.693 172.729 130.692 cv
170.307 130.693 168.347 132.655 168.347 135.075 cv
168.347 137.495 170.307 139.457 172.729 139.457 cv
175.151 139.457 177.112 137.496 177.112 135.075 cv
176.762 135.075 li
cp
f
159.147 137.794 mo
159.147 140.021 157.342 141.826 155.114 141.826 cv
152.885 141.826 151.082 140.021 151.082 137.794 cv
151.082 135.567 152.885 133.761 155.114 133.761 cv
157.342 133.761 159.147 135.567 159.147 137.794 cv
cp
f
159.147 137.794 mo
158.797 137.794 li
158.793 139.828 157.149 141.472 155.114 141.476 cv
153.079 141.472 151.435 139.828 151.432 137.794 cv
151.435 135.76 153.079 134.115 155.114 134.111 cv
157.149 134.115 158.793 135.76 158.797 137.794 cv
159.147 137.794 li
159.497 137.794 li
159.497 135.374 157.536 133.411 155.114 133.411 cv
152.692 133.411 150.732 135.374 150.732 137.794 cv
150.732 140.214 152.692 142.176 155.114 142.176 cv
157.536 142.176 159.497 140.214 159.497 137.794 cv
159.147 137.794 li
cp
f
295.067 383.434 mo
295.067 386.193 li
295.067 386.331 295.179 386.443 295.317 386.443 cv
295.455 386.443 295.567 386.331 295.567 386.193 cv
295.567 383.434 li
295.567 383.296 295.455 383.184 295.317 383.184 cv
295.179 383.184 295.067 383.296 295.067 383.434 cv
cp
268.567 386.193 mo
268.567 378.033 li
268.567 377.895 268.455 377.783 268.317 377.783 cv
268.179 377.783 268.067 377.895 268.067 378.033 cv
268.067 386.193 li
268.067 386.331 268.179 386.443 268.317 386.443 cv
268.455 386.443 268.567 386.331 268.567 386.193 cv
cp
241.067 383.434 mo
241.067 386.193 li
241.067 386.331 241.179 386.443 241.317 386.443 cv
241.455 386.443 241.567 386.331 241.567 386.193 cv
241.567 383.434 li
241.567 383.296 241.455 383.184 241.317 383.184 cv
241.179 383.184 241.067 383.296 241.067 383.434 cv
cp
214.567 386.193 mo
214.567 378.033 li
214.567 377.895 214.455 377.783 214.317 377.783 cv
214.179 377.783 214.067 377.895 214.067 378.033 cv
214.067 386.193 li
214.067 386.331 214.179 386.443 214.317 386.443 cv
214.455 386.443 214.567 386.331 214.567 386.193 cv
cp
187.067 383.434 mo
187.067 386.193 li
187.067 386.331 187.179 386.443 187.317 386.443 cv
187.455 386.443 187.567 386.331 187.567 386.193 cv
187.567 383.434 li
187.567 383.296 187.455 383.184 187.317 383.184 cv
187.179 383.184 187.067 383.296 187.067 383.434 cv
cp
160.567 386.193 mo
160.567 378.033 li
160.567 377.895 160.455 377.783 160.317 377.783 cv
160.179 377.783 160.067 377.895 160.067 378.033 cv
160.067 386.193 li
160.067 386.331 160.179 386.443 160.317 386.443 cv
160.455 386.443 160.567 386.331 160.567 386.193 cv
cp
133.066 383.434 mo
133.066 386.193 li
133.066 386.331 133.178 386.443 133.316 386.443 cv
133.454 386.443 133.566 386.331 133.566 386.193 cv
133.566 383.434 li
133.566 383.296 133.454 383.184 133.316 383.184 cv
133.178 383.184 133.066 383.296 133.066 383.434 cv
cp
106.566 386.193 mo
106.566 378.033 li
106.566 377.895 106.454 377.783 106.316 377.783 cv
106.178 377.783 106.066 377.895 106.066 378.033 cv
106.066 386.193 li
106.066 386.331 106.178 386.443 106.316 386.443 cv
106.454 386.443 106.566 386.331 106.566 386.193 cv
cp
79.0664 383.434 mo
79.0664 386.193 li
79.0664 386.331 79.1783 386.443 79.3164 386.443 cv
79.4545 386.443 79.5664 386.331 79.5664 386.193 cv
79.5664 383.434 li
79.5664 383.296 79.4545 383.184 79.3164 383.184 cv
79.1783 383.184 79.0664 383.296 79.0664 383.434 cv
cp
208.667 78.3936 mo
208.667 121.594 li
208.667 121.732 208.778 121.844 208.917 121.844 cv
209.055 121.844 209.167 121.732 209.167 121.594 cv
209.167 78.3936 li
209.167 78.2555 209.055 78.1436 208.917 78.1436 cv
208.778 78.1436 208.667 78.2555 208.667 78.3936 cv
cp
219.717 99.7432 mo
198.118 99.7432 li
197.98 99.7432 197.868 99.8551 197.868 99.9932 cv
197.868 100.131 197.98 100.243 198.118 100.243 cv
219.717 100.243 li
219.855 100.243 219.967 100.131 219.967 99.9932 cv
219.967 99.8551 219.855 99.7432 219.717 99.7432 cv
cp
160.667 120.514 mo
160.667 136.713 li
160.667 136.851 160.778 136.963 160.917 136.963 cv
161.055 136.963 161.167 136.851 161.167 136.713 cv
161.167 120.514 li
161.167 120.376 161.055 120.264 160.917 120.264 cv
160.778 120.264 160.667 120.376 160.667 120.514 cv
cp
168.477 128.303 mo
153.356 128.303 li
153.218 128.303 153.106 128.415 153.106 128.553 cv
153.106 128.691 153.218 128.803 153.356 128.803 cv
168.477 128.803 li
168.615 128.803 168.727 128.691 168.727 128.553 cv
168.727 128.415 168.615 128.303 168.477 128.303 cv
cp
173.028 116.073 mo
173.028 154.113 li
173.028 154.251 173.14 154.363 173.278 154.363 cv
173.416 154.363 173.528 154.251 173.528 154.113 cv
173.528 116.073 li
173.528 115.935 173.416 115.823 173.278 115.823 cv
173.14 115.823 173.028 115.935 173.028 116.073 cv
cp
192.358 134.783 mo
154.196 134.783 li
154.058 134.783 153.946 134.895 153.946 135.033 cv
153.946 135.171 154.058 135.283 154.196 135.283 cv
192.358 135.283 li
192.496 135.283 192.608 135.171 192.608 135.033 cv
192.608 134.895 192.496 134.783 192.358 134.783 cv
cp
154.666 121.594 mo
154.666 153.993 li
154.666 154.131 154.778 154.243 154.916 154.243 cv
155.054 154.243 155.166 154.131 155.166 153.993 cv
155.166 121.594 li
155.166 121.456 155.054 121.344 154.916 121.344 cv
154.778 121.344 154.666 121.456 154.666 121.594 cv
cp
165.717 137.543 mo
144.116 137.543 li
143.978 137.543 143.866 137.655 143.866 137.793 cv
143.866 137.931 143.978 138.043 144.116 138.043 cv
165.717 138.043 li
165.855 138.043 165.967 137.931 165.967 137.793 cv
165.967 137.655 165.855 137.543 165.717 137.543 cv
cp
168.227 120.033 mo
168.227 135.033 li
168.227 135.171 168.339 135.283 168.477 135.283 cv
168.615 135.283 168.727 135.171 168.727 135.033 cv
168.727 120.033 li
168.727 119.895 168.615 119.783 168.477 119.783 cv
168.339 119.783 168.227 119.895 168.227 120.033 cv
cp
173.997 127.224 mo
162.836 127.224 li
162.698 127.224 162.586 127.336 162.586 127.474 cv
162.586 127.612 162.698 127.724 162.836 127.724 cv
173.997 127.724 li
174.135 127.724 174.247 127.612 174.247 127.474 cv
174.247 127.336 174.135 127.224 173.997 127.224 cv
cp
190.907 170.674 mo
190.907 204.153 li
190.907 204.291 191.019 204.403 191.157 204.403 cv
191.295 204.403 191.407 204.291 191.407 204.153 cv
191.407 170.674 li
191.407 170.536 191.295 170.424 191.157 170.424 cv
191.019 170.424 190.907 170.536 190.907 170.674 cv
cp
205.676 187.224 mo
176.518 187.224 li
176.38 187.224 176.268 187.336 176.268 187.474 cv
176.268 187.612 176.38 187.724 176.518 187.724 cv
205.676 187.724 li
205.814 187.724 205.926 187.612 205.926 187.474 cv
205.926 187.336 205.814 187.224 205.676 187.224 cv
cp
179.506 100.474 mo
179.506 128.553 li
179.506 128.691 179.618 128.803 179.756 128.803 cv
179.894 128.803 180.006 128.691 180.006 128.553 cv
180.006 100.474 li
180.006 100.336 179.894 100.224 179.756 100.224 cv
179.618 100.224 179.506 100.336 179.506 100.474 cv
cp
192.717 114.264 mo
166.797 114.264 li
166.659 114.264 166.547 114.376 166.547 114.514 cv
166.547 114.652 166.659 114.764 166.797 114.764 cv
192.717 114.764 li
192.855 114.764 192.967 114.652 192.967 114.514 cv
192.967 114.376 192.855 114.264 192.717 114.264 cv
cp
322.317 7.94336 mo
52.3164 7.94336 li
52.1783 7.94336 52.0664 8.05529 52.0664 8.19336 cv
52.0664 8.33143 52.1783 8.44336 52.3164 8.44336 cv
322.317 8.44336 li
322.455 8.44336 322.567 8.33143 322.567 8.19336 cv
322.567 8.05529 322.455 7.94336 322.317 7.94336 cv
cp
322.567 386.193 mo
322.567 8.19336 li
322.567 8.05529 322.455 7.94336 322.317 7.94336 cv
322.179 7.94336 322.067 8.05529 322.067 8.19336 cv
322.067 386.193 li
322.067 386.331 322.179 386.443 322.317 386.443 cv
322.455 386.443 322.567 386.331 322.567 386.193 cv
cp
52.3164 386.443 mo
322.317 386.443 li
322.455 386.443 322.567 386.331 322.567 386.193 cv
322.567 386.055 322.455 385.943 322.317 385.943 cv
52.3164 385.943 li
52.1783 385.943 52.0664 386.055 52.0664 386.193 cv
52.0664 386.331 52.1783 386.443 52.3164 386.443 cv
cp
52.0664 8.19336 mo
52.0664 386.193 li
52.0664 386.331 52.1783 386.443 52.3164 386.443 cv
52.4545 386.443 52.5664 386.331 52.5664 386.193 cv
52.5664 8.19336 li
52.5664 8.05529 52.4545 7.94336 52.3164 7.94336 cv
52.1783 7.94336 52.0664 8.05529 52.0664 8.19336 cv
cp
f
55.0762 34.9434 mo
52.3164 34.9434 li
52.1783 34.9434 52.0664 35.0553 52.0664 35.1934 cv
52.0664 35.3314 52.1783 35.4434 52.3164 35.4434 cv
55.0762 35.4434 li
55.2142 35.4434 55.3262 35.3314 55.3262 35.1934 cv
55.3262 35.0553 55.2142 34.9434 55.0762 34.9434 cv
cp
52.3164 62.4434 mo
60.4766 62.4434 li
60.6146 62.4434 60.7266 62.3314 60.7266 62.1934 cv
60.7266 62.0553 60.6146 61.9434 60.4766 61.9434 cv
52.3164 61.9434 li
52.1783 61.9434 52.0664 62.0553 52.0664 62.1934 cv
52.0664 62.3314 52.1783 62.4434 52.3164 62.4434 cv
cp
55.0762 88.9434 mo
52.3164 88.9434 li
52.1783 88.9434 52.0664 89.0553 52.0664 89.1934 cv
52.0664 89.3314 52.1783 89.4434 52.3164 89.4434 cv
55.0762 89.4434 li
55.2142 89.4434 55.3262 89.3314 55.3262 89.1934 cv
55.3262 89.0553 55.2142 88.9434 55.0762 88.9434 cv
cp
52.3164 116.443 mo
60.4766 116.443 li
60.6146 116.443 60.7266 116.331 60.7266 116.193 cv
60.7266 116.055 60.6146 115.943 60.4766 115.943 cv
52.3164 115.943 li
52.1783 115.943 52.0664 116.055 52.0664 116.193 cv
52.0664 116.331 52.1783 116.443 52.3164 116.443 cv
cp
55.0762 142.943 mo
52.3164 142.943 li
52.1783 142.943 52.0664 143.055 52.0664 143.193 cv
52.0664 143.331 52.1783 143.443 52.3164 143.443 cv
55.0762 143.443 li
55.2142 143.443 55.3262 143.331 55.3262 143.193 cv
55.3262 143.055 55.2142 142.943 55.0762 142.943 cv
cp
52.3164 170.443 mo
60.4766 170.443 li
60.6146 170.443 60.7266 170.331 60.7266 170.193 cv
60.7266 170.055 60.6146 169.943 60.4766 169.943 cv
52.3164 169.943 li
52.1783 169.943 52.0664 170.055 52.0664 170.193 cv
52.0664 170.331 52.1783 170.443 52.3164 170.443 cv
cp
55.0762 196.943 mo
52.3164 196.943 li
52.1783 196.943 52.0664 197.055 52.0664 197.193 cv
52.0664 197.331 52.1783 197.443 52.3164 197.443 cv
55.0762 197.443 li
55.2142 197.443 55.3262 197.331 55.3262 197.193 cv
55.3262 197.055 55.2142 196.943 55.0762 196.943 cv
cp
52.3164 224.444 mo
60.4766 224.444 li
60.6146 224.444 60.7266 224.332 60.7266 224.194 cv
60.7266 224.056 60.6146 223.944 60.4766 223.944 cv
52.3164 223.944 li
52.1783 223.944 52.0664 224.056 52.0664 224.194 cv
52.0664 224.332 52.1783 224.444 52.3164 224.444 cv
cp
55.0762 250.943 mo
52.3164 250.943 li
52.1783 250.943 52.0664 251.055 52.0664 251.193 cv
52.0664 251.331 52.1783 251.443 52.3164 251.443 cv
55.0762 251.443 li
55.2142 251.443 55.3262 251.331 55.3262 251.193 cv
55.3262 251.055 55.2142 250.943 55.0762 250.943 cv
cp
52.3164 278.443 mo
60.4766 278.443 li
60.6146 278.443 60.7266 278.331 60.7266 278.193 cv
60.7266 278.055 60.6146 277.943 60.4766 277.943 cv
52.3164 277.943 li
52.1783 277.943 52.0664 278.055 52.0664 278.193 cv
52.0664 278.331 52.1783 278.443 52.3164 278.443 cv
cp
55.0762 304.943 mo
52.3164 304.943 li
52.1783 304.943 52.0664 305.055 52.0664 305.193 cv
52.0664 305.331 52.1783 305.443 52.3164 305.443 cv
55.0762 305.443 li
55.2142 305.443 55.3262 305.331 55.3262 305.193 cv
55.3262 305.055 55.2142 304.943 55.0762 304.943 cv
cp
52.3164 332.443 mo
60.4766 332.443 li
60.6146 332.443 60.7266 332.331 60.7266 332.193 cv
60.7266 332.055 60.6146 331.943 60.4766 331.943 cv
52.3164 331.943 li
52.1783 331.943 52.0664 332.055 52.0664 332.193 cv
52.0664 332.331 52.1783 332.443 52.3164 332.443 cv
cp
55.0762 358.943 mo
52.3164 358.943 li
52.1783 358.943 52.0664 359.055 52.0664 359.193 cv
52.0664 359.331 52.1783 359.443 52.3164 359.443 cv
55.0762 359.443 li
55.2142 359.443 55.3262 359.331 55.3262 359.193 cv
55.3262 359.055 55.2142 358.943 55.0762 358.943 cv
cp
295.067 8.19336 mo
295.067 10.834 li
295.067 10.9721 295.179 11.084 295.317 11.084 cv
295.455 11.084 295.567 10.9721 295.567 10.834 cv
295.567 8.19336 li
295.567 8.05529 295.455 7.94336 295.317 7.94336 cv
295.179 7.94336 295.067 8.05529 295.067 8.19336 cv
cp
268.567 16.2334 mo
268.567 8.19336 li
268.567 8.05529 268.455 7.94336 268.317 7.94336 cv
268.179 7.94336 268.067 8.05529 268.067 8.19336 cv
268.067 16.2334 li
268.067 16.3715 268.179 16.4834 268.317 16.4834 cv
268.455 16.4834 268.567 16.3715 268.567 16.2334 cv
cp
241.067 8.19336 mo
241.067 10.834 li
241.067 10.9721 241.179 11.084 241.317 11.084 cv
241.455 11.084 241.567 10.9721 241.567 10.834 cv
241.567 8.19336 li
241.567 8.05529 241.455 7.94336 241.317 7.94336 cv
241.179 7.94336 241.067 8.05529 241.067 8.19336 cv
cp
214.567 16.2334 mo
214.567 8.19336 li
214.567 8.05529 214.455 7.94336 214.317 7.94336 cv
214.179 7.94336 214.067 8.05529 214.067 8.19336 cv
214.067 16.2334 li
214.067 16.3715 214.179 16.4834 214.317 16.4834 cv
214.455 16.4834 214.567 16.3715 214.567 16.2334 cv
cp
187.067 8.19336 mo
187.067 10.834 li
187.067 10.9721 187.179 11.084 187.317 11.084 cv
187.455 11.084 187.567 10.9721 187.567 10.834 cv
187.567 8.19336 li
187.567 8.05529 187.455 7.94336 187.317 7.94336 cv
187.179 7.94336 187.067 8.05529 187.067 8.19336 cv
cp
160.567 16.2334 mo
160.567 8.19336 li
160.567 8.05529 160.455 7.94336 160.317 7.94336 cv
160.179 7.94336 160.067 8.05529 160.067 8.19336 cv
160.067 16.2334 li
160.067 16.3715 160.179 16.4834 160.317 16.4834 cv
160.455 16.4834 160.567 16.3715 160.567 16.2334 cv
cp
133.066 8.19336 mo
133.066 10.834 li
133.066 10.9721 133.178 11.084 133.316 11.084 cv
133.454 11.084 133.566 10.9721 133.566 10.834 cv
133.566 8.19336 li
133.566 8.05529 133.454 7.94336 133.316 7.94336 cv
133.178 7.94336 133.066 8.05529 133.066 8.19336 cv
cp
106.566 16.2334 mo
106.566 8.19336 li
106.566 8.05529 106.454 7.94336 106.316 7.94336 cv
106.178 7.94336 106.066 8.05529 106.066 8.19336 cv
106.066 16.2334 li
106.066 16.3715 106.178 16.4834 106.316 16.4834 cv
106.454 16.4834 106.566 16.3715 106.566 16.2334 cv
cp
79.0664 8.19336 mo
79.0664 10.834 li
79.0664 10.9721 79.1783 11.084 79.3164 11.084 cv
79.4545 11.084 79.5664 10.9721 79.5664 10.834 cv
79.5664 8.19336 li
79.5664 8.05529 79.4545 7.94336 79.3164 7.94336 cv
79.1783 7.94336 79.0664 8.05529 79.0664 8.19336 cv
cp
f
52.3164 105.644 mo
322.317 105.644 li
322.455 105.644 322.567 105.532 322.567 105.394 cv
322.567 105.255 322.455 105.144 322.317 105.144 cv
52.3164 105.144 li
52.1783 105.144 52.0664 105.255 52.0664 105.394 cv
52.0664 105.532 52.1783 105.644 52.3164 105.644 cv
cp
52.3164 143.443 mo
322.317 143.443 li
322.455 143.443 322.567 143.331 322.567 143.193 cv
322.567 143.055 322.455 142.943 322.317 142.943 cv
52.3164 142.943 li
52.1783 142.943 52.0664 143.055 52.0664 143.193 cv
52.0664 143.331 52.1783 143.443 52.3164 143.443 cv
cp
203.768 386.193 mo
203.768 8.19336 li
203.768 8.05529 203.656 7.94336 203.518 7.94336 cv
203.38 7.94336 203.268 8.05529 203.268 8.19336 cv
203.268 386.193 li
203.268 386.331 203.38 386.443 203.518 386.443 cv
203.656 386.443 203.768 386.331 203.768 386.193 cv
cp
149.767 386.193 mo
149.767 8.19336 li
149.767 8.05529 149.655 7.94336 149.517 7.94336 cv
149.379 7.94336 149.267 8.05529 149.267 8.19336 cv
149.267 386.193 li
149.267 386.331 149.379 386.443 149.517 386.443 cv
149.655 386.443 149.767 386.331 149.767 386.193 cv
cp
52.5327 386.319 mo
271.773 8.31879 li
271.843 8.19935 271.802 8.04637 271.683 7.9771 cv
271.563 7.90783 271.41 7.94849 271.341 8.06793 cv
52.1001 386.068 li
52.0309 386.187 52.0715 386.34 52.191 386.41 cv
52.3104 386.479 52.4634 386.438 52.5327 386.319 cv
cp
52.5501 386.282 mo
196.191 8.28216 li
196.24 8.1531 196.175 8.00871 196.046 7.95966 cv
195.917 7.91062 195.773 7.97549 195.724 8.10455 cv
52.0827 386.105 li
52.0337 386.234 52.0985 386.378 52.2276 386.427 cv
52.3567 386.476 52.5011 386.411 52.5501 386.282 cv
cp
127.74 8.37014 mo
322.14 202.771 li
322.238 202.868 322.396 202.868 322.494 202.771 cv
322.591 202.673 322.591 202.515 322.494 202.417 cv
128.093 8.01658 li
127.996 7.91895 127.837 7.91895 127.74 8.01658 cv
127.642 8.11421 127.642 8.2725 127.74 8.37014 cv
cp
52.1396 40.7705 mo
322.14 310.771 li
322.238 310.868 322.396 310.868 322.494 310.771 cv
322.591 310.673 322.591 310.515 322.494 310.417 cv
52.4932 40.417 li
52.3955 40.3193 52.2373 40.3193 52.1396 40.417 cv
52.042 40.5146 52.042 40.6729 52.1396 40.7705 cv
cp
322.317 34.9434 mo
319.676 34.9434 li
319.538 34.9434 319.426 35.0553 319.426 35.1934 cv
319.426 35.3314 319.538 35.4434 319.676 35.4434 cv
322.317 35.4434 li
322.455 35.4434 322.567 35.3314 322.567 35.1934 cv
322.567 35.0553 322.455 34.9434 322.317 34.9434 cv
cp
314.278 62.4434 mo
322.317 62.4434 li
322.455 62.4434 322.567 62.3314 322.567 62.1934 cv
322.567 62.0553 322.455 61.9434 322.317 61.9434 cv
314.278 61.9434 li
314.14 61.9434 314.028 62.0553 314.028 62.1934 cv
314.028 62.3314 314.14 62.4434 314.278 62.4434 cv
cp
322.317 88.9434 mo
319.676 88.9434 li
319.538 88.9434 319.426 89.0553 319.426 89.1934 cv
319.426 89.3314 319.538 89.4434 319.676 89.4434 cv
322.317 89.4434 li
322.455 89.4434 322.567 89.3314 322.567 89.1934 cv
322.567 89.0553 322.455 88.9434 322.317 88.9434 cv
cp
314.278 116.443 mo
322.317 116.443 li
322.455 116.443 322.567 116.331 322.567 116.193 cv
322.567 116.055 322.455 115.943 322.317 115.943 cv
314.278 115.943 li
314.14 115.943 314.028 116.055 314.028 116.193 cv
314.028 116.331 314.14 116.443 314.278 116.443 cv
cp
322.317 142.943 mo
319.676 142.943 li
319.538 142.943 319.426 143.055 319.426 143.193 cv
319.426 143.331 319.538 143.443 319.676 143.443 cv
322.317 143.443 li
322.455 143.443 322.567 143.331 322.567 143.193 cv
322.567 143.055 322.455 142.943 322.317 142.943 cv
cp
314.278 170.443 mo
322.317 170.443 li
322.455 170.443 322.567 170.331 322.567 170.193 cv
322.567 170.055 322.455 169.943 322.317 169.943 cv
314.278 169.943 li
314.14 169.943 314.028 170.055 314.028 170.193 cv
314.028 170.331 314.14 170.443 314.278 170.443 cv
cp
322.317 196.943 mo
319.676 196.943 li
319.538 196.943 319.426 197.055 319.426 197.193 cv
319.426 197.331 319.538 197.443 319.676 197.443 cv
322.317 197.443 li
322.455 197.443 322.567 197.331 322.567 197.193 cv
322.567 197.055 322.455 196.943 322.317 196.943 cv
cp
314.278 224.444 mo
322.317 224.444 li
322.455 224.444 322.567 224.332 322.567 224.194 cv
322.567 224.056 322.455 223.944 322.317 223.944 cv
314.278 223.944 li
314.14 223.944 314.028 224.056 314.028 224.194 cv
314.028 224.332 314.14 224.444 314.278 224.444 cv
cp
322.317 250.943 mo
319.676 250.943 li
319.538 250.943 319.426 251.055 319.426 251.193 cv
319.426 251.331 319.538 251.443 319.676 251.443 cv
322.317 251.443 li
322.455 251.443 322.567 251.331 322.567 251.193 cv
322.567 251.055 322.455 250.943 322.317 250.943 cv
cp
314.278 278.443 mo
322.317 278.443 li
322.455 278.443 322.567 278.331 322.567 278.193 cv
322.567 278.055 322.455 277.943 322.317 277.943 cv
314.278 277.943 li
314.14 277.943 314.028 278.055 314.028 278.193 cv
314.028 278.331 314.14 278.443 314.278 278.443 cv
cp
322.317 304.943 mo
319.676 304.943 li
319.538 304.943 319.426 305.055 319.426 305.193 cv
319.426 305.331 319.538 305.443 319.676 305.443 cv
322.317 305.443 li
322.455 305.443 322.567 305.331 322.567 305.193 cv
322.567 305.055 322.455 304.943 322.317 304.943 cv
cp
314.278 332.443 mo
322.317 332.443 li
322.455 332.443 322.567 332.331 322.567 332.193 cv
322.567 332.055 322.455 331.943 322.317 331.943 cv
314.278 331.943 li
314.14 331.943 314.028 332.055 314.028 332.193 cv
314.028 332.331 314.14 332.443 314.278 332.443 cv
cp
322.317 358.943 mo
319.676 358.943 li
319.538 358.943 319.426 359.055 319.426 359.193 cv
319.426 359.331 319.538 359.443 319.676 359.443 cv
322.317 359.443 li
322.455 359.443 322.567 359.331 322.567 359.193 cv
322.567 359.055 322.455 358.943 322.317 358.943 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
