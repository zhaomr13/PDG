%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cpt_s011254-web-fig1.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/13/12
%%BoundingBox: 0 0 227 500
%%HiResBoundingBox: 0 0 226.7773 499.3647
%%CropBox: 0 0 226.7773 499.3647
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>GPL Ghostscript 8.70</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-06-12T19:22:26-07:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-06-12T19:22:25-07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:MetadataDate>2012-06-12T19:22:26-07:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>116</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAB0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWPHTrK785ag11b&#xA;w3Cpp1iFEsauwJnvOhatBt4YqmX+H9B/6ttr/wAiI/8AmnFXf4f0H/q22v8AyIj/AOacVd/h/Qf+&#xA;rba/8iI/+acVd/h/Qf8Aq22v/IiP/mnFXf4f0H/q22v/ACIj/wCacVd/h/Qf+rba/wDIiP8A5pxV&#xA;3+H9B/6ttr/yIj/5pxVj2o6z5I0/Who8+lxm7Zo0BW2hKVlpx3ND+14ZjT1UYz4TdtE9TGMuE80v&#xA;8w+dvy00C9vrK/sYhcWHASKtrFxZmEDMqu/BBwW8hZi5VaNsSQ1MlvV9I83flnq1/qdnZ20BOkJL&#xA;JfzyWixxIkLcWbmyjl0YinZSelKqt6J5j8maxrVvpNvoEkMt3aPqFpcXFlFDDLaJ6Q9ZGY8iCbmM&#xA;cePIV3AocVZT/h/Qf+rba/8AIiP/AJpxVH4qg/01o3pxy/X7f0pp/qkUnqpxe45FfRU1oZOSkcRv&#xA;XFUFbKf8Y6k3I0/R1gOG1P7+836V/HFU5xV2KuxV2KuxV2KuxVj+o+TvL99rI1S5L/XQ0bCklBWO&#xA;nH4fozCyY8JyXI+r3tMtNGUuI81PVvInlHUtQu77UbcyXmoRC2uH9eWIvbDipgIjdAYnNOan7RpX&#xA;otM1ucn5deUF8wXWvtYiTVb2OWG6nkd3DpNsw4MSo+D4Nh9nbFVK2/Lvyij27Q/XC9hFJaW1NSv/&#xA;AN1BI0ZeAAT0EdbeMFf8kVxVlOKuxVgmmflJpmntp6x6hPJDp13FfQBkhEoe3hitolWVEVlU29vH&#xA;HKP92DkTu2yrIbeJT5z1GUluS6dYqAGYLQz3nVQeJO3UjFU6xV2KuxV2KuxV2KuxVKrvSribURcq&#xA;yCMFDQk1+Gle2cnr+ws2bWjPEx4AY87vavL9LkwzAQp57+YX5N6z5p1nU7+DVo4Ir+ONEikVyyiN&#xA;I0VK/EFSMpJJsPjMjKaUVs6xxkToH5SatpHmvXtUg1cRWOuW9xHKY0DXaTTsx5iZ1LbM3qbMPi2b&#xA;nQMFVPQ/yz8zaFrGl6npkGhRXNhp8umSzrFPGZhK9sfrUiL9qXjattyH293OKvUsVdirsVSW29H/&#xA;ABpqNePrfo2xp05cfXvK+9K0xVOsVdirsVdirsVcSFBZjQDck9AMVeJ+afPOrajq7yWV3LbWULUt&#xA;UiZkqFP22oRUt136Zoc+qlKWxoOlz6mUpbGg9R8m642taBb3khBuBWK5pt+8TYn/AGQo305ttNl8&#xA;SAPV2mny8cAU7zIbnYq7FXYqwHSrPWvNd5qVzq9zqXl+50+6W2trCyvl4xlIYpWdlSFEl5GUH956&#xA;ikHsMVZ5ErrEiyP6jqoDyUA5EDc0GwriqUWzj/GOpJvU6dYGtDTae879MVTnFXYq7FXYq7FWO+f9&#xA;TOn+Vbx0bjLOBbxkeMmzf8JyzG1mThxnz2cfVT4cZeRWnlrUbrTXv4wojUFkQ15OF6lRTOPzdp4s&#xA;eUYzz+wODi7PyTxmY5fezr8nLota6nak7RvFKq/64ZWP/CDOm7NltINvZ8tiHoubN2LsVdirsVeR&#xA;ebfLdxN59u9eg0xrq2sJ7Sa8uxJpiyRvBFE9Y7mUNeWsQjp6iLSo5FacycVetxSxyxpLE6yRSKGj&#xA;kUgqykVBBGxBGKpRbF/8Y6kKDh+jrCrV3r695tSn8cVTnFXYq7FXYq7FXnn5uTtIulabGfinleQr&#xA;7iiJ/wATOartXIIxF+ZcDW+rhiOpRNvBHb28cEYokShFHsBTPJsuQzkZHmS9JjgIxERyCW/lZGYP&#xA;MGs2w2RBxp/qSEDPUuxsnFHi74gvN6WPDknHuP6Xpmbxz3Yq7FXYq8X1zzXoWu+Zra4Sz8sXtCq2&#xA;v6RSea6eJ5nt4WkuYoJYIFlkVvTVy2xDbE4q9C8xL5ynvdBk0atta+sj6vCxgqqerCXSQtz5L6Hr&#xA;r+639Qoa8QTiqMtxN/jPUSGURDTrHkhUlifXvKENyoB9GKp1irsVdirsVdirzXzyfrHn3SrfqIYV&#xA;cjwYO7/qUZzHtHk4ccv6v37OJXFqYBNM80eiS38tlP8AirXmpsGYE+5mP9M9S7B/u4/1I/c83i/v&#xA;8nvP3vSM6BzXYq7FXYq8K8z6PoHl7zKLBPL9pfTrJDcxXcFxrMYijkm42f6Rt7S3uLaRYpI+MQmn&#xA;VeK7CMYq9xtkuEtokuZFmuFRRNMq+mruB8TBKtxBO9KmnjiqVWyn/GOpNyNP0dYDhtT+/vN+lfxx&#xA;VOcVdirsVdirsVeZeYvi/MxKmvGAcfb9239c4/2nP7uX+b94cfB/jY936E3zz136C/KgCa41y96+&#xA;tLHxPzMjH/iQz1rsfHwwruADzWkPFKcu8vQ83DnOxV2KuxV4H59b9NecbjWk068MVpJbaWnr6XqM&#xA;qc7HUZo5ZYruK4gto425hgzRuPYb1Ve+Yqk1sg/xjqT71GnWApU03nvO3TFU5xV2KuxV2KuxV5Z5&#xA;sk9H8yoHbYMkagnvzQp+s5yntFDixzH9EH5buHCXDqon8b7Jhrd4LPSrmcmjBCE/1m+FfxOcHocP&#xA;iZox8/sDu9Xl8PFKXkmH5UWZh8sGcje6nd1PiqgR/rQ56z2fGsd95dJoY1jvvLM8znMdirsVdirs&#xA;VdiqS23o/wCNNRrx9b9G2NOnLj695X3pWmKp1irsVdirsVdiryj827d4desrxPh9SABWH88Tk1+5&#xA;hmm7ShchfIh1eusTEgxfVfMOoatHDbyKqqpFVQH436VP9M0Gj7Nx4JEx3JY6nXTzARL2/wAv6d+j&#xA;dEsrGlGghVZP9cir/wDDE52mGHDAB2WKHDEBMMsbHYq7FXYqh9Qv7XT7OW8umKW8A5SMqPIQK02V&#xA;AzH6BirBNN/N+31CDTJIdOAe/wBSg0+VGuYyYYrmGKVJiqq0jsPrCxsipRZAys4C8iqym3lUec9R&#xA;iIbk2nWLAhWK0E951YDiDv0JxVOsVdirsVdirsVYl+ZHl6fV9EWW1QyXdkxkSNRVmRhR1UePQ/Rm&#xA;FrcJnCxzDi6vEZx25hh35e+Tr271aPUL6B4bKzbmokUqZJVPwgBhuFO5+7MLR6YylxEbBw9JpyZW&#xA;RsHr2bp2zsVdirsVdirsVUvqlr6qzeinrJXhJxHIcqlqGlRWpriqV2zH/GOpLxNP0dYHntT+/vNu&#xA;tfwxVOcVdirsVdirsVdirsVdirsVdirsVdirsVdirGptb0rTvOd+moXttZrJp1iYzcTLEWInvK8Q&#xA;9A1K70O2Ko7/ABj5R/6vmn/9JUP/ADViqkvnfykbmSD9MWI4Ij+obmHieZYcQeXVeG/zGKqv+MfK&#xA;P/V80/8A6Sof+asVWjzr5PMjR/puw5KAx/0mKlGJAo3Kh+z0xVd/jHyj/wBXzT/+kqH/AJqxVSXz&#xA;v5SNzJB+mLEcER/UNzDxPMsOIPLqvDf5jFVX/GPlH/q+af8A9JUP/NWKrR518nmRo/03YclAY/6T&#xA;FSjEgUblQ/Z6Yqu/xj5R/wCr5p//AElQ/wDNWKqS+d/KRuZIP0xYjgiP6huYeJ5lhxB5dV4b/MYq&#xA;q/4x8o/9XzT/APpKh/5qxV3+MfKP/V80/wD6Sof+asVTfFXYq7FWOefLjzdBoqt5WiEuomXiw4xs&#xA;QvpOY9pWReLXAiWQ9VjLEbgHFWM+YdV/M2XU7gaNDdW9iLhHiU21uzC3+pgyDk5IYrcHlw+09OId&#xA;O6rM/KZ1w+W9OOu1GsGBTfcjGT6p+1X0kiT6Au3TfriqbYql/mGTV49A1GTRo1l1dLaZtPjegVrg&#xA;IfSBrQfap1IHuMVYLf6x+ayaNALKxkfVUs5luVkjhAaYXVr6MqsKpzNpJOSv2ean4fsgqvRLFrl7&#xA;K3a5jMVy0SGeJmVyrlRyUsgVWoe4FMVVsVY/58m81Q+WriTyunPVg8QRQqO/AyAOUWUrGWCmvxHp&#xA;XvTFWM65rv5ox3sZ0zTHktybEXcfCP8AdsGuVvPQLfbjYpAwLGvE7UJJRVlXkk+Yj5XsT5jZm1mk&#xA;n1p3Eas371vTcpEqInKPieFKr0JJBOKp5irsVdirsVdirsVdirFvzTuZrX8uPMlzb3M1pdw6fcSW&#xA;VxbSPFMLlUJtwjRkNVpeK0HWtO+KvL9J/M7zbo1jNZkIbubVbj001V728htbL0UltIo7qNJLi5+t&#xA;jk0MpU/y0qKYqnFv+YPmZtd0rT5mWCz1281FdRmmSWSSAWmo/UYrO14S2/B2hjoSgZw59TiBiqf6&#xA;B5s1y40LyzHNcDnqN9f2k+ryKvForA3PotQ8RyuEtlbp9nl0NKKpHo3m3zv5kvtJ0h7hraDU9MtX&#xA;u7mC2HJfVsTPNd82DIB9bQ2rJQcan7L8WCrKPJEWo6Bqr+TrmaO9itrBNQjura2+qQxtcXU6vEIh&#xA;JKEVuIMaA0FGpRQqqqzbFXYq7FXYq7FXYq7FXYq7FXYq7FUMmm2CLdKkCIt6xe7Cjj6jsgRman7R&#xA;VQCcVb/R+n/V4Lb6tF9XtShtoeC8IzFT0/TWlF4U+GnTtiqIxVTjtraKWWaOJEmnIM8iqAzlRxUu&#xA;Ru1FFBXFVTFXYq7FXYq7FUFNrejQTvbzX9tFcRU9SF5o1deQqOSk1FRuMVW/4g0H/q5Wv/I+P/mr&#xA;FXf4g0H/AKuVr/yPj/5qxV3+INB/6uVr/wAj4/8AmrFXf4g0H/q5Wv8AyPj/AOasVd/iDQf+rla/&#xA;8j4/+asVd/iDQf8Aq5Wv/I+P/mrFXf4g0H/q5Wv/ACPj/wCasVd/iDQf+rla/wDI+P8A5qxV3+IN&#xA;B/6uVr/yPj/5qxV3+INB/wCrla/8j4/+asVd/iDQf+rla/8AI+P/AJqxVr/EOgV4/pO05daevHWn&#xA;/BYqmGKuxVJtDcHVvMSb1W/iJNDTewteh6Hpiqc4q7FXYq7FXYq7FUk81+aIPLtpDczQNOJpPTCo&#xA;QpB4lq7/ACzH1GcYxZFtOfMMYspTrX5n6Po3lzTddvraf6rqUxhVY+J9OgckszFF6Rnio+JjsAcs&#xA;xZOOIl3s8c+OIKRH8+/LkUttFd6de2j3N49i5uBHAtu6MFP1lp3i9MgHkw34rv8AtLWxmnPmf8zF&#xA;0WTVvR0a61C10Liuq3cbwpHE724uVUB35t+7dakLSrAeNFWaKSVBYcWI3XrQ4qkX/Tef9uv/ALGM&#xA;VT7FXYqk2hsTq3mJeJAF/EQ+1DWwtdhvXanhiqc4q7FXYq7FXYq7FUu1vS9F1CCOPVo1khRuUYdm&#xA;UBqEfskdsxNZlwwiDmIiPM0xlhGTYi0Ncab5Vg0yzjuhBHplrKr2qTyUh9XlySoduLsH3XlWjbjf&#xA;LdPKEoA4zcOlJEOHbkkU2l/k/c2NjZyPpMloZJI7CP6zHR5WeMyBCHrI9UjDdTT4ehplyUR5msvy&#xA;sk1ORfMT6XFqVzFSaO6mihlljCkAujMhfigYBiNlqOlcVZJpel6dplmtrp0KwWoZpAiVILSMXZiT&#xA;UksxrXFUs/6bz/t1/wDYxiqfYq7FUm0Mv+lvMQIHD6/Fxau5P1C1rUU+XfFU5xV2KuxVDWGpWt8k&#xA;rW7VMEr28ynYrJG3FgR+PyyEJiXLoxjMS5InJsnYqhNSsDeRLGH4cW5VIr2pmn7a7LOtxiAlw1K+&#xA;V9G3Fk4DbH/NvkMeYtL02z/SM1hLptz9ZiuIOQPIxyRbcXQhgJaq1dj2IqDl9naQ6fBHETfD1Yzl&#xA;xG2Gn/nHnT47Gzis9Yls72yl9WG/hiZZBx9P01A9ai8eEjAjdWf4OCKEzNYMi80/ljNrMmui31OO&#xA;1t/MHpvdpNaC5kjmitxah4JPVi4KYhutDvWhHJgVWYaVb6nBZhNTu0vrwu7PPFD9XjozkoiR85SA&#xA;i0X4nYnrXFUs/wCm8/7df/YxiqdTXFvAFaeVIg7BELsFBZuiivc+GKsLn8pedX85x6pFrTQ6Il89&#xA;ybD6xO/7lre3jMXpkcGDyRSHiTxj5VXcnFU90ON/015hk9VuH12NfRovCv1G1PKvHnXt9qntiqd4&#xA;q7FXYqwe4u28u/mB+8PHTdeVeW/wrOvw8t/8rr/rZr5S8LN/Rn97hGXh5fKX3s4zYOa7FXYq7FXY&#xA;q7FXYqkP/Tef9uv/ALGMVYH56inl8/Bf0HZa3DLHbQy/p+C3j0+GKrFhbXkrySeq3Il0S3ftXtir&#xA;1Sys7eys4LO3Urb26LFCrMzkIg4qCzlmOw6k4qlmhoBq3mJ96tfxAipptYWvQdB1xVOcVdirsVY/&#xA;5002K60xbl0D/UmLv/xhccJvuU8/9jmq7Z08smnPD9cdx8GEgLBPLr7jsUZ5c1CS704JO3K6tT6M&#xA;7HqxUAq/+zQhvnXLey9aNTgjPr197KiCQeYTTNgl2KuxV2KuxV2KpD/03n/br/7GMVea/nQLjUdb&#xA;j024eOGW2i9TQrcWl/NLqC3UM0V5Y+taTRovrMkaMGA4oSxquKvaMVSXQvQ/TPmPjx9f69D6lKcu&#xA;P1C24170ryp9OKp1irsVdirTojoyOAyMCrKdwQdiDiQrD9JdtJ1o20jHgGFnKT3U/FbSH/guPzY+&#xA;Gch2fL8nrp4D9GT1R97I7xEusfSf0H8d7Mc69i7FXYq7FXYq7FUh/wCm8/7df/YxiqQ/l9c+cn13&#xA;WINfvrm9giCehHcwafbmAlmKpxsri5arRsrVkVSRv8lWeYqk2huDq3mJN6rfxEmhpvYWvQ9D0xVO&#xA;cVdirsVdirG/NtgCYrwVCSD6tckdQGP7p69uLkj5tnM+0ulJxxzw+vEb+DLGRxUeUtv1Jtol+17p&#xA;0U0lPXWsdwB/vxDxbbwNKj2ObzRaoZ8Mcg/iDAWNjzCOzKS7FXYq7FXYqkP/AE3n/br/AOxjFWAf&#xA;mXYai/nJZ7CHVXcW0DGWxs7mZYHDSUlhe3u7WFpW4gMJ4pKBR1X4cVZt5g8y63p3mvQdJs9Ma7sd&#xA;TMovbsBv3QSlKMPgXjy5nn9oCi74qjNDkf8ATXmGP0m4fXY29aq8K/UbUcacude/2ae+Kp3irsVd&#xA;irsVUby1iu7Sa1l/u5kKNTqKilR7jtkMkBOJieRQRYYx5ZvJbXVptOuTSSbkrjoPrEAFSB/xbEQw&#xA;9hnN9h8Wny5NLL+E8UfcUynZEup2PvH6wy3OnV2KuxV2KuxVIf8ApvP+3X/2MYq86vfO3kWTVNfk&#xA;80y6gNQ069ubRV0uDVoFNrbE+nFPcWXGCbqSfVfitd6DFXr1paWtnaw2lpEsFtboscEKAKqIgoqq&#xA;B0AGKpXoZf8AS3mIEDh9fi4tXcn6ha1qKfLviqc4q7FXYq7FXYqwf8wba6064s/MdlWltNH9djH7&#xA;QWoRvuYofmM1mtwiM45gPVHb4OHqjKNSHK92awTxzwRzxHlFKoeNvFWFQfuzZA2LDlg2LX4UuxV2&#xA;KuxVIf8ApvP+3X/2MYqwz8wfIXnTVbi+mj1G41bRZYZBZ+XredNMEU7glXdo1X62oko3GWVBt+10&#xA;xV6jiqTaGH/S3mIkjh9fi4rTcH6ha1qa/Ltiqc4q7FXYq7FXYqo3lpb3lpNa3C84J0McinuGFMjK&#xA;IkKKJRBFFDaDpsumaTb2Esvrm2DRpL0rGGPp1HiEoDkcMDCIiejDFDhiB3I/LGx2KuxV2KpD/wBN&#xA;5/26/wDsYxVPsVdiqTaGpGreYm5Eg38QCbUFLC13G1d6+OKpzirsVdirsVdirsVdirsVdirsVdiq&#xA;Q/8ATef9uv8A7GMVT7FWPyefPK8eurocl0yak1wbQQtFIB6ojjlALceIDLOnEk0YmgriqpoUlqNd&#xA;8xRho/rRvImdAR6hjFjbBSR9rjUmmKp5irsVdirsVdirsVdirsVdirsVdiqQ/wDTef8Abr/7GMVT&#xA;ueCC4gkt7iNZoJlMcsUgDI6MKMrKdiCNiDiqRweQvKNvqUOpQ6bGl3bSerbkM/CNvRjgHCLl6ahY&#xA;oEVVC0XiONMVUYdXh0vVtbW5tb1zPexSwtBZXU6NG1pbRchJFG6fCyNyFa7YqjD5s00SKn1bUSCC&#xA;ef6Nv+IoRsf3Namu3yxVbF5tsWeZXtNQRY3CxN+jr8814K3L+42+Jiv0Yq4+b9O9F5PqmpVTlSP9&#xA;G33JuJIFP3NPiptviq6TzZpqqCLbUX3UUXTb+u5ArvCNhWpxVx82aaJFT6tqJBBPP9G3/EUI2P7m&#xA;tTXb5YqtXzbYm4eM2moCJURkm/R1/wDEzFgy09DbiFB+nFV0fmzTWUk22opuwo2m39diRXaE7GlR&#xA;iq0eb9O9FJPqmpVfjWP9G33JeRANf3NPhrvviq5vNmmqyAW2otyNCRpt/RdiamsPTamKrV822JuH&#xA;jNpqAiVEZJv0df8AxMxYMtPQ24hQfpxVdH5s01lJNtqKbsKNpt/XYkV2hOxpUYqk3+IIP8S/pX6j&#xA;qX1b9G+lT9HXnP1fV9T0+Ppfap9HvirMsVdirsVU7n6wLeX6sENzwb0RISEL0+HkVBPGvWmKsGWw&#xA;/M6TzTaTtciHSkuvUvIucZiMZt7YOqDj6jR+os4jBCsCQzV7Ks9xV2KuxVjOmWfnBfPOr3V5cg+W&#xA;ZIo1062JU0cJFuqgclKuJuZY/FyT+XZVPW1PTUuRavdwrcl/TEBkUOXK8+PGteXE8qeG+KonFXYq&#xA;wLTdA/MJPPTajc6if8OLd3MiWbTsxMEkLKi+mFKmspjZQT8ARqfa3VZ7irsVdirsVdirsVdiq2R1&#xA;jjaRgSqAsQoLGgFdlUEk+wxV8+atD5x12213T3h1hH8zNp2p2102n3yfoi+S+jilgjZoV2jseHJ0&#xA;2bg+/wAW6qIsb78yU1vWfNut2FzY6lL5cVUX0ZGt7CSO44TGJ2RomcRK9zx3ry4+2Kp/rl/+Zgvb&#xA;yLQJr+4sRqTLpdz6KOsqGwsTbK0jRFTaNcG65y+277iqrKp/yq0GXzJa6/8AW70XNrcpdJE8olRn&#xA;jiSIBnlV5mBES15SH/iPFVh195h/NDT9SkuobHUL/Uo575Lq3eGf9FQW/wBcSKzeGOC353QFs/qf&#xA;u5fUNGqtaDFUTe3P5h276pc315c6fpkOnnXoL4b+ndzWwjGlBJAAyR3KtKFZCxBVD1xV6nplxc3O&#xA;m2lxdQm2uZoY5J7c9Y5GUFkP+qTTFUTirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:54DA3882E3206811808399C81683386A</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:54DA3882E3206811808399C81683386A</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>159ecf3a-dee1-11ec-0000-f48d57519ed3</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:53DA3882E3206811808399C81683386A</stRef:instanceID>
            <stRef:documentID>xmp.did:53DA3882E3206811808399C81683386A</stRef:documentID>
            <stRef:originalDocumentID>159ecf3a-dee1-11ec-0000-f48d57519ed3</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:53DA3882E3206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T19:22:18-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:54DA3882E3206811808399C81683386A</stEvt:instanceID>
                  <stEvt:when>2012-06-12T19:22:26-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cpt_s011254-web.dvi</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3.402778</stDim:w>
            <stDim:h>7.138889</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=100 K=5 1</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -499.365 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 499.365 li
226.777 499.365 li
226.777 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.521439 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
37.7793 201.798 mo
37.7793 .260742 li
226.517 .260742 li
226.517 201.798 li
37.7793 201.798 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
.104288 lw
37.7793 201.798 mo
37.7793 .260742 li
@
.312864 lw
39.5483 6.95068 mo
37.7793 6.95068 li
39.5483 20.4351 mo
37.7793 20.4351 li
41.3179 33.8149 mo
37.7793 33.8149 li
39.5483 195.108 mo
37.7793 195.108 li
39.5483 181.624 mo
37.7793 181.624 li
41.3179 168.243 mo
37.7793 168.243 li
41.3179 33.8149 mo
37.7793 33.8149 li
39.5483 47.2998 mo
37.7793 47.2998 li
39.5483 60.6802 mo
37.7793 60.6802 li
39.5483 74.1646 mo
37.7793 74.1646 li
39.5483 87.5444 mo
37.7793 87.5444 li
41.3179 101.029 mo
37.7793 101.029 li
39.5483 114.515 mo
37.7793 114.515 li
39.5483 127.894 mo
37.7793 127.894 li
39.5483 141.378 mo
37.7793 141.378 li
39.5483 154.759 mo
37.7793 154.759 li
41.3179 168.243 mo
37.7793 168.243 li
@
12.9116 169.035 mo
15.5596 169.035 li
15.5596 169.708 li
12.9116 169.708 li
12.9116 169.035 li
cp
f
19.6831 170.755 mo
19.875 170.191 19.9707 169.375 19.9707 168.307 cv
19.9707 167.456 19.9131 166.776 19.7983 166.269 cv
19.582 165.323 19.1772 164.85 18.584 164.85 cv
17.9912 164.85 17.585 165.337 17.3647 166.311 cv
17.25 166.829 17.1924 167.512 17.1924 168.359 cv
17.1924 169.154 17.2515 169.79 17.3701 170.266 cv
17.5933 171.156 18.0122 171.601 18.626 171.601 cv
19.1387 171.601 19.4912 171.319 19.6831 170.755 cv
cp
20.4785 165.833 mo
20.8306 166.517 21.0068 167.302 21.0068 168.188 cv
21.0068 168.886 20.8989 169.543 20.6826 170.16 cv
20.2744 171.32 19.5679 171.9 18.563 171.9 cv
17.876 171.9 17.311 171.586 16.8677 170.959 cv
16.3936 170.29 16.1563 169.38 16.1563 168.23 cv
16.1563 167.327 16.3149 166.548 16.6323 165.896 cv
17.0615 165.01 17.7207 164.566 18.6104 164.566 cv
19.4126 164.566 20.0352 164.989 20.4785 165.833 cv
cp
f
22.7437 171.75 mo
22.6289 171.633 22.5713 171.492 22.5713 171.327 cv
22.5713 171.163 22.6294 171.022 22.7466 170.907 cv
22.8633 170.791 23.0034 170.733 23.1675 170.733 cv
23.3315 170.733 23.4712 170.791 23.5864 170.907 cv
23.7012 171.022 23.7588 171.163 23.7588 171.327 cv
23.7588 171.492 23.7021 171.633 23.5889 171.75 cv
23.4756 171.868 23.335 171.926 23.1675 171.926 cv
23 171.926 22.8589 171.868 22.7437 171.75 cv
cp
f
25.6841 171.177 mo
26.0068 171.403 26.2559 171.517 26.4307 171.517 cv
26.8325 171.517 27.1836 171.338 27.4839 170.983 cv
27.7842 170.627 27.9346 170.19 27.9346 169.671 cv
27.9346 168.764 27.4526 168.11 26.4883 167.71 cv
25.9541 167.489 25.4561 167.379 24.9951 167.379 cv
24.918 167.379 24.8701 167.376 24.8511 167.371 cv
24.8315 167.366 24.8081 167.348 24.7803 167.316 cv
24.7871 167.288 24.7935 167.264 24.7983 167.245 cv
24.8037 167.226 24.8101 167.208 24.8169 167.19 cv
25.958 164.677 li
28.2017 164.677 li
28.3135 164.677 28.3994 164.658 28.4604 164.619 cv
28.5215 164.581 28.6011 164.509 28.6987 164.403 cv
28.7822 164.477 li
28.3794 165.45 li
28.3652 165.481 28.3271 165.501 28.2642 165.51 cv
28.2012 165.519 28.1333 165.523 28.0601 165.523 cv
26.0322 165.523 li
25.5869 166.443 li
26.1597 166.542 26.5786 166.634 26.8442 166.722 cv
27.2808 166.869 27.6455 167.086 27.939 167.374 cv
28.1904 167.623 28.3809 167.902 28.5103 168.212 cv
28.6392 168.522 28.7041 168.851 28.7041 169.198 cv
28.7041 169.973 28.4287 170.619 27.8789 171.138 cv
27.3286 171.657 26.6328 171.916 25.791 171.916 cv
25.4487 171.916 25.1729 171.883 24.9634 171.816 cv
24.6138 171.708 24.4395 171.513 24.4395 171.232 cv
24.4395 171.127 24.4766 171.035 24.5518 170.957 cv
24.627 170.877 24.7432 170.838 24.9004 170.838 cv
25.0996 170.838 25.3608 170.951 25.6841 171.177 cv
cp
f
27.7148 103.538 mo
27.9067 102.974 28.0024 102.158 28.0024 101.09 cv
28.0024 100.239 27.9448 99.5596 27.8301 99.0518 cv
27.6138 98.1064 27.209 97.6333 26.6157 97.6333 cv
26.0229 97.6333 25.6167 98.1201 25.3965 99.0938 cv
25.2817 99.6123 25.2241 100.295 25.2241 101.143 cv
25.2241 101.938 25.2832 102.573 25.4019 103.049 cv
25.625 103.939 26.0439 104.384 26.6577 104.384 cv
27.1704 104.384 27.5229 104.102 27.7148 103.538 cv
cp
28.5103 98.6167 mo
28.8623 99.2998 29.0386 100.085 29.0386 100.972 cv
29.0386 101.669 28.9307 102.327 28.7144 102.943 cv
28.3062 104.104 27.5996 104.684 26.5947 104.684 cv
25.9077 104.684 25.3428 104.37 24.8994 103.742 cv
24.4253 103.073 24.188 102.164 24.188 101.014 cv
24.188 100.11 24.3467 99.3315 24.6641 98.6797 cv
25.0933 97.793 25.7524 97.3496 26.6421 97.3496 cv
27.4443 97.3496 28.0669 97.772 28.5103 98.6167 cv
cp
f
19.6777 36.3208 mo
19.8696 35.7568 19.9653 34.9409 19.9653 33.8726 cv
19.9653 33.0215 19.9077 32.3423 19.793 31.8345 cv
19.5767 30.8892 19.1719 30.416 18.5786 30.416 cv
17.9858 30.416 17.5796 30.9028 17.3594 31.8765 cv
17.2446 32.395 17.187 33.0776 17.187 33.9253 cv
17.187 34.7202 17.2461 35.356 17.3647 35.832 cv
17.5879 36.7217 18.0068 37.1665 18.6206 37.1665 cv
19.1333 37.1665 19.4858 36.8848 19.6777 36.3208 cv
cp
20.4731 31.3994 mo
20.8252 32.0825 21.0015 32.8677 21.0015 33.7544 cv
21.0015 34.4521 20.8936 35.1094 20.6772 35.7261 cv
20.269 36.8862 19.5625 37.4663 18.5576 37.4663 cv
17.8706 37.4663 17.3057 37.1523 16.8623 36.5249 cv
16.3882 35.8555 16.1509 34.9463 16.1509 33.7964 cv
16.1509 32.8926 16.3096 32.1143 16.627 31.4624 cv
17.0562 30.5757 17.7153 30.1323 18.605 30.1323 cv
19.4072 30.1323 20.0298 30.5547 20.4731 31.3994 cv
cp
f
22.7388 37.3164 mo
22.624 37.1987 22.5664 37.0576 22.5664 36.8931 cv
22.5664 36.7285 22.6245 36.5884 22.7417 36.4727 cv
22.8584 36.3569 22.9985 36.2988 23.1626 36.2988 cv
23.3267 36.2988 23.4663 36.3569 23.5815 36.4727 cv
23.6963 36.5884 23.7539 36.7285 23.7539 36.8931 cv
23.7539 37.0576 23.6973 37.1987 23.584 37.3164 cv
23.4707 37.4336 23.3301 37.4922 23.1626 37.4922 cv
22.9951 37.4922 22.854 37.4336 22.7388 37.3164 cv
cp
f
25.6792 36.7432 mo
26.002 36.9692 26.251 37.0825 26.4258 37.0825 cv
26.8276 37.0825 27.1787 36.9043 27.479 36.5488 cv
27.7793 36.1929 27.9297 35.7559 27.9297 35.2368 cv
27.9297 34.3296 27.4478 33.6758 26.4834 33.2764 cv
25.9492 33.0552 25.4512 32.9448 24.9902 32.9448 cv
24.9131 32.9448 24.8652 32.9424 24.8462 32.937 cv
24.8267 32.9316 24.8032 32.9136 24.7754 32.8818 cv
24.7822 32.854 24.7886 32.8301 24.7935 32.811 cv
24.7988 32.792 24.8052 32.7734 24.812 32.7559 cv
25.9531 30.2427 li
28.1968 30.2427 li
28.3086 30.2427 28.3945 30.2236 28.4556 30.1851 cv
28.5166 30.1465 28.5962 30.0747 28.6938 29.9692 cv
28.7773 30.043 li
28.3745 31.0156 li
28.3604 31.0469 28.3223 31.0674 28.2593 31.0762 cv
28.1963 31.085 28.1284 31.0894 28.0552 31.0894 cv
26.0273 31.0894 li
25.582 32.0093 li
26.1548 32.1074 26.5737 32.2002 26.8394 32.2876 cv
27.2759 32.4351 27.6406 32.6523 27.9341 32.9395 cv
28.1855 33.1885 28.376 33.4678 28.5054 33.7783 cv
28.6343 34.0884 28.6992 34.417 28.6992 34.7637 cv
28.6992 35.5386 28.4238 36.1851 27.874 36.7036 cv
27.3237 37.2227 26.6279 37.4819 25.7861 37.4819 cv
25.4438 37.4819 25.168 37.4487 24.9585 37.3818 cv
24.6089 37.2734 24.4346 37.0791 24.4346 36.7983 cv
24.4346 36.6934 24.4717 36.6011 24.5469 36.5225 cv
24.6221 36.4434 24.7383 36.4043 24.8955 36.4043 cv
25.0947 36.4043 25.356 36.5171 25.6792 36.7432 cv
cp
f
.104288 lw
37.7793 201.798 mo
226.517 201.798 li
@
.312864 lw
194.99 196.989 mo
194.99 201.798 li
37.7793 199.394 mo
37.7793 201.798 li
69.2007 196.989 mo
69.2007 201.798 li
194.99 196.989 mo
194.99 201.798 li
163.569 199.394 mo
163.569 201.798 li
132.148 196.989 mo
132.148 201.798 li
100.623 199.394 mo
100.623 201.798 li
69.2007 196.989 mo
69.2007 201.798 li
@
60.7681 213.818 mo
60.96 213.254 61.0557 212.438 61.0557 211.37 cv
61.0557 210.519 60.998 209.839 60.8833 209.332 cv
60.667 208.386 60.2622 207.913 59.6689 207.913 cv
59.0762 207.913 58.6699 208.4 58.4497 209.374 cv
58.335 209.892 58.2773 210.575 58.2773 211.422 cv
58.2773 212.217 58.3364 212.853 58.4551 213.329 cv
58.6782 214.219 59.0972 214.664 59.7109 214.664 cv
60.2236 214.664 60.5762 214.382 60.7681 213.818 cv
cp
61.5635 208.896 mo
61.9155 209.58 62.0918 210.365 62.0918 211.251 cv
62.0918 211.949 61.9839 212.606 61.7676 213.223 cv
61.3594 214.383 60.6528 214.963 59.6479 214.963 cv
58.9609 214.963 58.396 214.649 57.9526 214.022 cv
57.4785 213.353 57.2412 212.443 57.2412 211.293 cv
57.2412 210.39 57.3999 209.611 57.7173 208.959 cv
58.1465 208.073 58.8057 207.629 59.6953 207.629 cv
60.4976 207.629 61.1201 208.052 61.5635 208.896 cv
cp
f
63.8291 214.813 mo
63.7144 214.696 63.6567 214.555 63.6567 214.39 cv
63.6567 214.226 63.7148 214.085 63.832 213.97 cv
63.9487 213.854 64.0889 213.796 64.2529 213.796 cv
64.417 213.796 64.5566 213.854 64.6719 213.97 cv
64.7866 214.085 64.8442 214.226 64.8442 214.39 cv
64.8442 214.555 64.7876 214.696 64.6743 214.813 cv
64.561 214.931 64.4204 214.989 64.2529 214.989 cv
64.0854 214.989 63.9443 214.931 63.8291 214.813 cv
cp
f
68.3789 207.679 mo
68.3809 207.688 68.3818 207.708 68.3818 207.74 cv
68.3818 214.069 li
68.3818 214.339 68.4536 214.511 68.5972 214.584 cv
68.7412 214.658 69.0093 214.702 69.4023 214.716 cv
69.4023 214.863 li
66.4458 214.863 li
66.4458 214.706 li
66.8677 214.685 67.1431 214.626 67.2725 214.532 cv
67.4014 214.438 67.4658 214.232 67.4658 213.917 cv
67.4658 209.049 li
67.4658 208.88 67.4453 208.753 67.4033 208.665 cv
67.3613 208.578 67.2705 208.534 67.1313 208.534 cv
67.0405 208.534 66.9229 208.559 66.7778 208.61 cv
66.6333 208.661 66.498 208.714 66.3726 208.77 cv
66.3726 208.623 li
68.293 207.64 li
68.3555 207.64 li
68.3696 207.658 68.3774 207.67 68.3789 207.679 cv
cp
f
72.1274 214.24 mo
72.4502 214.466 72.6992 214.58 72.874 214.58 cv
73.2759 214.58 73.627 214.401 73.9272 214.046 cv
74.2275 213.69 74.3779 213.253 74.3779 212.734 cv
74.3779 211.827 73.896 211.173 72.9316 210.773 cv
72.3975 210.552 71.8994 210.442 71.4385 210.442 cv
71.3613 210.442 71.3135 210.439 71.2944 210.434 cv
71.2749 210.429 71.2515 210.411 71.2236 210.379 cv
71.2305 210.351 71.2368 210.327 71.2417 210.308 cv
71.2471 210.289 71.2534 210.271 71.2603 210.253 cv
72.4014 207.74 li
74.645 207.74 li
74.7568 207.74 74.8428 207.721 74.9038 207.682 cv
74.9648 207.644 75.0444 207.572 75.1421 207.466 cv
75.2256 207.54 li
74.8228 208.513 li
74.8086 208.544 74.7705 208.564 74.7075 208.573 cv
74.6445 208.582 74.5767 208.586 74.5034 208.586 cv
72.4756 208.586 li
72.0303 209.506 li
72.603 209.604 73.022 209.697 73.2876 209.785 cv
73.7241 209.932 74.0889 210.149 74.3823 210.437 cv
74.6338 210.686 74.8242 210.965 74.9536 211.275 cv
75.0825 211.585 75.1475 211.914 75.1475 212.261 cv
75.1475 213.036 74.8721 213.682 74.3223 214.201 cv
73.772 214.72 73.0762 214.979 72.2344 214.979 cv
71.8921 214.979 71.6162 214.946 71.4067 214.879 cv
71.0571 214.771 70.8828 214.576 70.8828 214.295 cv
70.8828 214.19 70.9199 214.098 70.9951 214.02 cv
71.0703 213.94 71.1865 213.901 71.3438 213.901 cv
71.543 213.901 71.8042 214.014 72.1274 214.24 cv
cp
f
77.4858 214.24 mo
77.8086 214.466 78.0576 214.58 78.2324 214.58 cv
78.6343 214.58 78.9854 214.401 79.2856 214.046 cv
79.5859 213.69 79.7363 213.253 79.7363 212.734 cv
79.7363 211.827 79.2544 211.173 78.29 210.773 cv
77.7559 210.552 77.2578 210.442 76.7969 210.442 cv
76.7197 210.442 76.6719 210.439 76.6528 210.434 cv
76.6333 210.429 76.6099 210.411 76.582 210.379 cv
76.5889 210.351 76.5952 210.327 76.6001 210.308 cv
76.6055 210.289 76.6118 210.271 76.6187 210.253 cv
77.7598 207.74 li
80.0034 207.74 li
80.1152 207.74 80.2012 207.721 80.2622 207.682 cv
80.3232 207.644 80.4028 207.572 80.5005 207.466 cv
80.584 207.54 li
80.1812 208.513 li
80.167 208.544 80.1289 208.564 80.0659 208.573 cv
80.0029 208.582 79.9351 208.586 79.8618 208.586 cv
77.834 208.586 li
77.3887 209.506 li
77.9614 209.604 78.3804 209.697 78.646 209.785 cv
79.0825 209.932 79.4473 210.149 79.7407 210.437 cv
79.9922 210.686 80.1826 210.965 80.312 211.275 cv
80.4409 211.585 80.5059 211.914 80.5059 212.261 cv
80.5059 213.036 80.2305 213.682 79.6807 214.201 cv
79.1304 214.72 78.4346 214.979 77.5928 214.979 cv
77.2505 214.979 76.9746 214.946 76.7651 214.879 cv
76.4155 214.771 76.2412 214.576 76.2412 214.295 cv
76.2412 214.19 76.2783 214.098 76.3535 214.02 cv
76.4287 213.94 76.5449 213.901 76.7021 213.901 cv
76.9014 213.901 77.1626 214.014 77.4858 214.24 cv
cp
f
126.386 213.818 mo
126.577 213.254 126.674 212.438 126.674 211.37 cv
126.674 210.519 126.616 209.839 126.501 209.332 cv
126.284 208.386 125.88 207.913 125.287 207.913 cv
124.693 207.913 124.287 208.4 124.067 209.374 cv
123.952 209.892 123.895 210.575 123.895 211.422 cv
123.895 212.217 123.954 212.853 124.073 213.329 cv
124.296 214.219 124.715 214.664 125.329 214.664 cv
125.842 214.664 126.193 214.382 126.386 213.818 cv
cp
127.181 208.896 mo
127.533 209.58 127.71 210.365 127.71 211.251 cv
127.71 211.949 127.602 212.606 127.385 213.223 cv
126.977 214.383 126.271 214.963 125.266 214.963 cv
124.578 214.963 124.014 214.649 123.57 214.022 cv
123.096 213.353 122.858 212.443 122.858 211.293 cv
122.858 210.39 123.018 209.611 123.335 208.959 cv
123.764 208.073 124.424 207.629 125.313 207.629 cv
126.115 207.629 126.738 208.052 127.181 208.896 cv
cp
f
129.446 214.813 mo
129.331 214.696 129.273 214.555 129.273 214.39 cv
129.273 214.226 129.332 214.085 129.448 213.97 cv
129.565 213.854 129.706 213.796 129.87 213.796 cv
130.034 213.796 130.173 213.854 130.288 213.97 cv
130.403 214.085 130.461 214.226 130.461 214.39 cv
130.461 214.555 130.404 214.696 130.291 214.813 cv
130.178 214.931 130.037 214.989 129.87 214.989 cv
129.702 214.989 129.562 214.931 129.446 214.813 cv
cp
f
133.996 207.679 mo
133.998 207.688 133.999 207.708 133.999 207.74 cv
133.999 214.069 li
133.999 214.339 134.07 214.511 134.215 214.584 cv
134.358 214.658 134.627 214.702 135.02 214.716 cv
135.02 214.863 li
132.063 214.863 li
132.063 214.706 li
132.485 214.685 132.761 214.626 132.89 214.532 cv
133.019 214.438 133.083 214.232 133.083 213.917 cv
133.083 209.049 li
133.083 208.88 133.063 208.753 133.021 208.665 cv
132.979 208.578 132.888 208.534 132.748 208.534 cv
132.657 208.534 132.54 208.559 132.396 208.61 cv
132.25 208.661 132.115 208.714 131.989 208.77 cv
131.989 208.623 li
133.91 207.64 li
133.973 207.64 li
133.986 207.658 133.994 207.67 133.996 207.679 cv
cp
f
139.996 211.635 mo
139.752 211.033 139.336 210.731 138.75 210.731 cv
138.21 210.731 137.851 210.893 137.673 211.215 cv
137.567 211.404 137.516 211.72 137.516 212.161 cv
137.516 212.732 137.637 213.292 137.879 213.838 cv
138.121 214.385 138.505 214.658 139.027 214.658 cv
139.442 214.658 139.744 214.48 139.933 214.125 cv
140.121 213.769 140.216 213.353 140.216 212.876 cv
140.216 212.41 140.143 211.997 139.996 211.635 cv
cp
140.559 214.206 mo
140.148 214.721 139.615 214.979 138.96 214.979 cv
138.346 214.979 137.786 214.69 137.282 214.111 cv
136.778 213.533 136.526 212.764 136.526 211.804 cv
136.526 210.566 137.015 209.504 137.991 208.618 cv
138.863 207.875 139.844 207.503 140.933 207.503 cv
140.959 207.677 li
140.522 207.757 140.146 207.867 139.831 208.005 cv
139.515 208.144 139.233 208.337 138.985 208.586 cv
138.731 208.838 138.492 209.159 138.269 209.548 cv
138.046 209.938 137.893 210.323 137.809 210.705 cv
138.024 210.572 138.211 210.474 138.368 210.411 cv
138.647 210.298 138.929 210.242 139.211 210.242 cv
139.766 210.242 140.231 210.435 140.608 210.82 cv
140.984 211.206 141.173 211.756 141.173 212.471 cv
141.173 213.113 140.968 213.691 140.559 214.206 cv
cp
f
186.548 213.818 mo
186.739 213.254 186.836 212.438 186.836 211.37 cv
186.836 210.519 186.778 209.839 186.663 209.332 cv
186.446 208.386 186.042 207.913 185.449 207.913 cv
184.855 207.913 184.449 208.4 184.229 209.374 cv
184.114 209.892 184.057 210.575 184.057 211.422 cv
184.057 212.217 184.116 212.853 184.235 213.329 cv
184.458 214.219 184.877 214.664 185.491 214.664 cv
186.004 214.664 186.355 214.382 186.548 213.818 cv
cp
187.343 208.896 mo
187.695 209.58 187.872 210.365 187.872 211.251 cv
187.872 211.949 187.764 212.606 187.547 213.223 cv
187.139 214.383 186.433 214.963 185.428 214.963 cv
184.74 214.963 184.176 214.649 183.732 214.022 cv
183.258 213.353 183.021 212.443 183.021 211.293 cv
183.021 210.39 183.18 209.611 183.497 208.959 cv
183.926 208.073 184.586 207.629 185.475 207.629 cv
186.277 207.629 186.9 208.052 187.343 208.896 cv
cp
f
189.609 214.813 mo
189.494 214.696 189.437 214.555 189.437 214.39 cv
189.437 214.226 189.495 214.085 189.611 213.97 cv
189.729 213.854 189.869 213.796 190.033 213.796 cv
190.197 213.796 190.336 213.854 190.451 213.97 cv
190.566 214.085 190.624 214.226 190.624 214.39 cv
190.624 214.555 190.567 214.696 190.454 214.813 cv
190.341 214.931 190.2 214.989 190.033 214.989 cv
189.865 214.989 189.725 214.931 189.609 214.813 cv
cp
f
194.158 207.679 mo
194.16 207.688 194.161 207.708 194.161 207.74 cv
194.161 214.069 li
194.161 214.339 194.232 214.511 194.377 214.584 cv
194.521 214.658 194.789 214.702 195.182 214.716 cv
195.182 214.863 li
192.225 214.863 li
192.225 214.706 li
192.647 214.685 192.923 214.626 193.052 214.532 cv
193.181 214.438 193.245 214.232 193.245 213.917 cv
193.245 209.049 li
193.245 208.88 193.225 208.753 193.183 208.665 cv
193.141 208.578 193.05 208.534 192.91 208.534 cv
192.819 208.534 192.702 208.559 192.558 208.61 cv
192.412 208.661 192.277 208.714 192.151 208.77 cv
192.151 208.623 li
194.072 207.64 li
194.135 207.64 li
194.148 207.658 194.156 207.67 194.158 207.679 cv
cp
f
200.158 211.635 mo
199.914 211.033 199.498 210.731 198.912 210.731 cv
198.372 210.731 198.013 210.893 197.835 211.215 cv
197.729 211.404 197.678 211.72 197.678 212.161 cv
197.678 212.732 197.799 213.292 198.041 213.838 cv
198.283 214.385 198.667 214.658 199.189 214.658 cv
199.604 214.658 199.906 214.48 200.095 214.125 cv
200.283 213.769 200.378 213.353 200.378 212.876 cv
200.378 212.41 200.305 211.997 200.158 211.635 cv
cp
200.721 214.206 mo
200.311 214.721 199.777 214.979 199.122 214.979 cv
198.508 214.979 197.948 214.69 197.444 214.111 cv
196.94 213.533 196.688 212.764 196.688 211.804 cv
196.688 210.566 197.177 209.504 198.153 208.618 cv
199.025 207.875 200.006 207.503 201.095 207.503 cv
201.121 207.677 li
200.685 207.757 200.309 207.867 199.993 208.005 cv
199.677 208.144 199.396 208.337 199.147 208.586 cv
198.894 208.838 198.654 209.159 198.431 209.548 cv
198.208 209.938 198.055 210.323 197.971 210.705 cv
198.187 210.572 198.373 210.474 198.53 210.411 cv
198.81 210.298 199.091 210.242 199.373 210.242 cv
199.928 210.242 200.394 210.435 200.771 210.82 cv
201.146 211.206 201.335 211.756 201.335 212.471 cv
201.335 213.113 201.13 213.691 200.721 214.206 cv
cp
f
203.266 214.24 mo
203.589 214.466 203.838 214.58 204.013 214.58 cv
204.414 214.58 204.765 214.401 205.065 214.046 cv
205.366 213.69 205.517 213.253 205.517 212.734 cv
205.517 211.827 205.034 211.173 204.07 210.773 cv
203.535 210.552 203.038 210.442 202.576 210.442 cv
202.5 210.442 202.452 210.439 202.433 210.434 cv
202.413 210.429 202.39 210.411 202.361 210.379 cv
202.369 210.351 202.375 210.327 202.38 210.308 cv
202.386 210.289 202.392 210.271 202.398 210.253 cv
203.54 207.74 li
205.783 207.74 li
205.895 207.74 205.981 207.721 206.042 207.682 cv
206.104 207.644 206.183 207.572 206.28 207.466 cv
206.364 207.54 li
205.961 208.513 li
205.947 208.544 205.908 208.564 205.846 208.573 cv
205.783 208.582 205.715 208.586 205.642 208.586 cv
203.614 208.586 li
203.169 209.506 li
203.741 209.604 204.16 209.697 204.426 209.785 cv
204.862 209.932 205.228 210.149 205.521 210.437 cv
205.772 210.686 205.962 210.965 206.092 211.275 cv
206.221 211.585 206.285 211.914 206.285 212.261 cv
206.285 213.036 206.011 213.682 205.46 214.201 cv
204.91 214.72 204.214 214.979 203.372 214.979 cv
203.03 214.979 202.754 214.946 202.545 214.879 cv
202.195 214.771 202.021 214.576 202.021 214.295 cv
202.021 214.19 202.059 214.098 202.134 214.02 cv
202.209 213.94 202.324 213.901 202.481 213.901 cv
202.681 213.901 202.942 214.014 203.266 214.24 cv
cp
f
151.916 48.3481 mo
151.292 48.3481 li
150.98 48.4531 li
150.668 48.4531 li
150.356 48.5571 li
150.044 48.6611 li
149.835 48.7661 li
149.524 48.8701 li
149.211 49.0796 li
148.899 49.1841 li
148.587 49.3931 li
148.274 49.6025 li
147.963 49.8115 li
147.65 50.0205 li
147.338 50.3345 li
147.027 50.5435 li
146.714 50.8564 li
146.402 51.1704 li
146.194 51.4844 li
145.882 51.9023 li
145.569 52.2153 li
145.257 52.6343 li
144.945 52.9473 li
144.633 53.3652 li
144.321 53.8882 li
144.009 54.3062 li
143.697 54.7241 li
143.488 55.2476 li
143.176 55.7705 li
142.865 56.2925 li
142.552 56.8154 li
142.24 57.3384 li
141.928 57.8604 li
141.72 58.4873 li
141.408 59.0103 li
141.095 59.6372 li
140.784 60.2642 li
140.575 60.8921 li
140.264 61.6235 li
139.951 62.2515 li
139.744 62.8774 li
139.431 63.6104 li
139.119 64.3413 li
138.911 65.0732 li
138.599 65.8042 li
138.39 66.5361 li
138.079 67.2681 li
137.87 68.1045 li
137.558 68.8364 li
137.35 69.6724 li
137.142 70.5083 li
136.83 71.3452 li
136.622 72.1812 li
136.413 73.0171 li
136.103 73.8535 li
135.894 74.6904 li
135.685 75.6313 li
135.478 76.4673 li
135.269 77.4082 li
134.958 78.2441 li
134.749 79.1855 li
134.541 80.1255 li
134.333 81.0674 li
134.124 82.0073 li
133.917 82.9482 li
133.813 83.8892 li
133.604 84.9341 li
133.397 85.8745 li
133.188 86.8164 li
132.98 87.8613 li
132.876 88.8013 li
132.668 89.8472 li
132.46 90.8921 li
132.356 91.8335 li
132.148 92.8784 li
132.044 93.9243 li
131.94 94.9692 li
131.731 96.0142 li
131.627 97.0605 li
131.524 98.0015 li
131.316 99.0464 li
131.211 100.091 li
131.107 101.241 li
131.003 102.286 li
130.899 103.332 li
130.795 104.377 li
130.691 105.422 li
130.587 106.467 li
130.483 107.513 li
130.379 108.558 li
130.276 109.708 li
130.276 110.753 li
130.171 111.799 li
130.067 112.844 li
130.067 113.889 li
129.963 114.936 li
129.963 115.98 li
129.859 117.025 li
129.859 120.266 li
129.755 121.312 li
129.755 129.464 li
129.859 130.405 li
129.859 132.391 li
129.963 133.437 li
129.963 134.377 li
130.067 135.318 li
130.067 136.259 li
130.171 137.2 li
130.171 138.14 li
130.276 139.082 li
130.379 140.022 li
130.483 140.963 li
130.587 141.904 li
130.587 142.74 li
130.691 143.68 li
130.795 144.517 li
130.899 145.354 li
131.003 146.19 li
131.211 147.025 li
131.316 147.861 li
131.419 148.698 li
131.524 149.535 li
131.731 150.266 li
131.836 151.104 li
131.94 151.834 li
132.148 152.565 li
132.252 153.297 li
132.46 154.029 li
132.564 154.761 li
132.772 155.493 li
132.98 156.224 li
133.084 156.853 li
133.292 157.479 li
133.5 158.106 li
133.708 158.733 li
133.917 159.36 li
134.021 159.988 li
134.229 160.614 li
134.438 161.137 li
134.646 161.66 li
134.854 162.182 li
135.165 162.706 li
135.373 163.228 li
135.582 163.75 li
135.789 164.169 li
135.998 164.692 li
136.205 165.109 li
136.519 165.528 li
136.726 165.946 li
136.934 166.363 li
137.246 166.677 li
137.454 167.096 li
137.766 167.409 li
137.974 167.722 li
138.286 168.036 li
138.494 168.245 li
138.806 168.559 li
139.015 168.768 li
139.327 168.978 li
139.535 169.187 li
139.847 169.396 li
140.16 169.604 li
140.367 169.709 li
140.68 169.918 li
140.992 170.022 li
141.304 170.127 li
141.511 170.232 li
141.824 170.232 li
142.136 170.336 li
143.281 170.336 li
143.593 170.232 li
143.905 170.232 li
144.217 170.127 li
144.529 170.022 li
144.842 169.918 li
145.049 169.709 li
145.362 169.604 li
145.674 169.396 li
145.986 169.187 li
146.298 168.978 li
146.61 168.768 li
146.922 168.559 li
147.234 168.245 li
147.547 167.931 li
147.858 167.722 li
148.17 167.305 li
148.483 166.991 li
148.691 166.677 li
149.003 166.26 li
149.315 165.946 li
149.627 165.528 li
149.939 165.109 li
150.251 164.586 li
150.564 164.169 li
150.876 163.75 li
151.188 163.228 li
151.396 162.706 li
151.708 162.182 li
152.021 161.66 li
152.332 161.137 li
152.646 160.51 li
152.853 159.988 li
153.165 159.36 li
153.478 158.733 li
153.789 158.106 li
153.997 157.479 li
154.31 156.748 li
154.621 156.12 li
154.83 155.388 li
155.142 154.761 li
155.35 154.029 li
155.662 153.297 li
155.974 152.565 li
156.182 151.729 li
156.494 150.998 li
156.702 150.266 li
157.014 149.429 li
157.222 148.593 li
157.431 147.861 li
157.743 147.025 li
157.951 146.19 li
158.159 145.249 li
158.471 144.413 li
158.679 143.576 li
158.888 142.635 li
159.095 141.799 li
159.303 140.858 li
159.512 139.918 li
159.719 139.082 li
159.928 138.14 li
160.136 137.2 li
160.344 136.259 li
160.552 135.214 li
160.76 134.272 li
160.968 133.333 li
161.176 132.391 li
161.28 131.345 li
161.489 130.405 li
161.696 129.36 li
161.8 128.315 li
162.009 127.375 li
162.217 126.328 li
162.32 125.283 li
162.424 124.238 li
162.633 123.297 li
162.737 122.251 li
162.945 121.207 li
163.049 120.161 li
163.153 119.115 li
163.257 118.07 li
163.361 117.025 li
163.465 115.875 li
163.57 114.831 li
163.674 113.785 li
163.777 112.739 li
163.881 111.694 li
163.985 110.649 li
164.09 109.604 li
164.194 108.558 li
164.194 107.408 li
164.297 106.363 li
164.401 105.318 li
164.401 104.272 li
164.506 103.228 li
164.506 101.136 li
164.61 100.091 li
164.61 96.9556 li
164.714 95.9102 li
164.714 90.7886 li
164.61 89.7422 li
164.61 86.8164 li
164.506 85.7705 li
164.506 84.8296 li
164.401 83.8892 li
164.401 82.8442 li
164.297 81.9033 li
164.297 80.9614 li
164.194 80.0215 li
164.09 79.0806 li
163.985 78.2441 li
163.985 77.3032 li
163.881 76.3633 li
163.777 75.5264 li
163.674 74.5854 li
163.57 73.7495 li
163.465 72.9136 li
163.361 72.0762 li
163.257 71.2402 li
163.049 70.4043 li
162.945 69.5684 li
162.841 68.8364 li
162.633 68.0005 li
162.529 67.2681 li
162.424 66.4321 li
162.217 65.7002 li
162.113 64.9683 li
161.904 64.2363 li
161.8 63.6104 li
161.593 62.8774 li
161.384 62.1465 li
161.176 61.5195 li
161.072 60.8921 li
160.864 60.2642 li
160.656 59.6372 li
160.448 59.0103 li
160.24 58.3833 li
160.032 57.8604 li
159.824 57.2334 li
159.615 56.7114 li
159.408 56.1885 li
159.199 55.6655 li
158.992 55.2476 li
158.783 54.7241 li
158.575 54.2021 li
158.263 53.7832 li
158.055 53.3652 li
157.847 52.9473 li
157.535 52.5293 li
157.327 52.2153 li
157.118 51.7974 li
156.807 51.4844 li
156.598 51.1704 li
156.286 50.8564 li
156.078 50.5435 li
155.766 50.3345 li
155.558 50.0205 li
155.246 49.8115 li
154.933 49.6025 li
154.726 49.3931 li
154.413 49.1841 li
154.206 48.9751 li
153.894 48.8701 li
153.581 48.7661 li
153.269 48.6611 li
153.062 48.5571 li
152.749 48.4531 li
152.437 48.4531 li
152.125 48.3481 li
151.916 48.3481 li
.8 0 1 0 cmyk
ef
150.044 71.7632 mo
149.524 71.7632 li
149.315 71.8682 li
149.211 71.8682 li
149.003 71.9722 li
148.795 71.9722 li
148.587 72.0762 li
148.379 72.1812 li
148.274 72.2852 li
148.067 72.3901 li
147.858 72.4951 li
147.65 72.7046 li
147.443 72.8081 li
147.338 72.9136 li
147.13 73.1226 li
146.922 73.3315 li
146.714 73.5405 li
146.61 73.7495 li
146.402 73.9585 li
146.194 74.1675 li
145.986 74.3765 li
145.777 74.5854 li
145.674 74.8994 li
145.466 75.1084 li
145.257 75.4214 li
145.049 75.7354 li
144.842 76.0493 li
144.737 76.2583 li
144.529 76.5723 li
144.321 76.9893 li
144.113 77.3032 li
144.009 77.6172 li
143.801 78.0352 li
143.593 78.3481 li
143.488 78.7671 li
143.281 79.0806 li
143.072 79.4995 li
142.968 79.9165 li
142.761 80.3354 li
142.552 80.7534 li
142.448 81.1704 li
142.24 81.5894 li
142.136 82.0073 li
141.928 82.5293 li
141.72 82.9482 li
141.616 83.4702 li
141.408 83.8892 li
141.304 84.4111 li
141.095 84.9341 li
140.992 85.3525 li
140.784 85.8745 li
140.68 86.3975 li
140.575 86.9204 li
140.367 87.4424 li
140.264 87.9653 li
140.055 88.5933 li
139.951 89.1152 li
139.847 89.6382 li
139.639 90.1611 li
139.535 90.7886 li
139.431 91.3105 li
139.327 91.9375 li
139.119 92.4604 li
139.015 93.0884 li
138.911 93.7144 li
138.806 94.2373 li
138.703 94.8652 li
138.599 95.4922 li
138.494 96.1191 li
138.39 96.7466 li
138.286 97.3735 li
138.183 98.0015 li
138.079 98.5234 li
137.974 99.1504 li
137.87 99.8823 li
137.766 100.509 li
137.663 101.136 li
137.558 101.763 li
137.558 102.39 li
137.454 103.018 li
137.35 103.646 li
137.246 104.272 li
137.246 105.004 li
137.142 105.631 li
137.038 106.258 li
137.038 106.886 li
136.934 107.617 li
136.934 108.245 li
136.83 108.872 li
136.83 109.5 li
136.726 110.23 li
136.726 111.485 li
136.622 112.112 li
136.622 113.471 li
136.519 114.098 li
136.519 116.711 li
136.413 117.339 li
136.413 120.475 li
136.519 121.103 li
136.519 124.133 li
136.622 124.76 li
136.622 125.91 li
136.726 126.539 li
136.726 127.165 li
136.83 127.688 li
136.83 128.315 li
136.934 128.837 li
136.934 129.36 li
137.038 129.883 li
137.038 130.51 li
137.142 131.032 li
137.142 131.555 li
137.246 132.077 li
137.35 132.6 li
137.35 133.124 li
137.454 133.646 li
137.558 134.064 li
137.663 134.586 li
137.766 135.109 li
137.87 135.527 li
137.87 136.049 li
137.974 136.468 li
138.079 136.886 li
138.183 137.304 li
138.286 137.827 li
138.39 138.245 li
138.494 138.664 li
138.599 139.082 li
138.703 139.396 li
138.911 139.813 li
139.015 140.231 li
139.119 140.544 li
139.223 140.963 li
139.327 141.276 li
139.535 141.59 li
139.639 141.904 li
139.744 142.217 li
139.847 142.531 li
140.055 142.844 li
140.16 143.158 li
140.367 143.472 li
140.471 143.68 li
140.575 143.994 li
140.784 144.203 li
140.887 144.517 li
141.095 144.726 li
141.2 144.936 li
141.408 145.145 li
141.511 145.354 li
141.72 145.458 li
141.824 145.667 li
142.032 145.876 li
142.136 145.98 li
142.345 146.085 li
142.552 146.294 li
142.656 146.399 li
142.865 146.503 li
143.072 146.608 li
143.176 146.712 li
143.385 146.712 li
143.593 146.816 li
143.697 146.816 li
143.905 146.921 li
144.945 146.921 li
145.153 146.816 li
145.362 146.816 li
145.569 146.712 li
145.777 146.608 li
145.882 146.608 li
146.09 146.503 li
146.298 146.399 li
146.506 146.294 li
146.61 146.085 li
146.818 145.98 li
147.027 145.771 li
147.234 145.667 li
147.443 145.458 li
147.547 145.249 li
147.754 145.145 li
147.963 144.936 li
148.17 144.726 li
148.379 144.413 li
148.483 144.203 li
148.691 143.994 li
148.899 143.68 li
149.108 143.472 li
149.315 143.158 li
149.419 142.844 li
149.627 142.531 li
149.835 142.217 li
150.044 141.904 li
150.148 141.59 li
150.356 141.276 li
150.564 140.858 li
150.668 140.544 li
150.876 140.127 li
151.084 139.813 li
151.292 139.396 li
151.396 138.976 li
151.604 138.559 li
151.708 138.14 li
151.916 137.722 li
152.125 137.304 li
152.229 136.886 li
152.437 136.468 li
152.54 135.945 li
152.749 135.527 li
152.956 135.004 li
153.062 134.586 li
153.269 134.064 li
153.373 133.542 li
153.581 133.02 li
153.685 132.497 li
153.789 132.077 li
153.997 131.451 li
154.101 130.928 li
154.31 130.405 li
154.413 129.883 li
154.517 129.36 li
154.726 128.732 li
154.83 128.21 li
154.933 127.688 li
155.037 127.061 li
155.246 126.539 li
155.35 125.91 li
155.454 125.283 li
155.558 124.76 li
155.662 124.133 li
155.766 123.506 li
155.87 122.879 li
155.974 122.251 li
156.078 121.729 li
156.182 121.103 li
156.286 120.475 li
156.39 119.847 li
156.494 119.22 li
156.598 118.593 li
156.702 117.966 li
156.807 117.234 li
156.911 116.607 li
156.911 115.98 li
157.014 115.354 li
157.118 114.726 li
157.222 114.098 li
157.222 113.367 li
157.327 112.739 li
157.431 112.112 li
157.431 111.485 li
157.535 110.753 li
157.535 110.126 li
157.638 109.5 li
157.638 108.872 li
157.743 108.14 li
157.743 106.886 li
157.847 106.258 li
157.847 104.272 li
157.951 103.646 li
157.951 95.3872 li
157.847 94.8652 li
157.847 93.6104 li
157.743 93.0884 li
157.743 91.8335 li
157.638 91.3105 li
157.638 90.6831 li
157.535 90.1611 li
157.535 89.6382 li
157.431 89.0103 li
157.431 88.4883 li
157.327 87.9653 li
157.327 87.4424 li
157.222 86.9204 li
157.118 86.3975 li
157.118 85.8745 li
157.014 85.3525 li
156.911 84.8296 li
156.807 84.3062 li
156.702 83.8892 li
156.702 83.3662 li
156.598 82.9482 li
156.494 82.4253 li
156.39 82.0073 li
156.286 81.5894 li
156.182 81.1704 li
156.078 80.7534 li
155.974 80.3354 li
155.87 79.9165 li
155.766 79.4995 li
155.662 79.0806 li
155.454 78.6626 li
155.35 78.3481 li
155.246 77.9312 li
155.142 77.6172 li
155.037 77.3032 li
154.83 76.8853 li
154.726 76.5723 li
154.621 76.2583 li
154.517 75.9443 li
154.31 75.6313 li
154.206 75.4214 li
153.997 75.1084 li
153.894 74.8994 li
153.789 74.5854 li
153.581 74.3765 li
153.478 74.1675 li
153.269 73.8535 li
153.165 73.6445 li
152.956 73.4365 li
152.853 73.3315 li
152.646 73.1226 li
152.54 72.9136 li
152.332 72.8081 li
152.125 72.5991 li
152.021 72.4951 li
151.813 72.3901 li
151.708 72.2852 li
151.5 72.1812 li
151.292 72.0762 li
151.188 71.9722 li
150.98 71.9722 li
150.772 71.8682 li
150.668 71.8682 li
150.46 71.7632 li
150.044 71.7632 li
0 0 1 .05 cmyk
ef
111.897 226.527 mo
112.841 226.138 113.313 225.406 113.313 224.331 cv
113.313 223.297 112.89 222.592 112.045 222.214 cv
111.593 222.011 110.994 221.91 110.247 221.91 cv
109.743 221.91 109.434 221.946 109.321 222.019 cv
109.208 222.091 109.152 222.261 109.152 222.528 cv
109.152 226.928 li
110.432 226.882 111.347 226.748 111.897 226.527 cv
cp
105.816 232.724 mo
106.5 232.66 106.925 232.526 107.093 232.324 cv
107.261 232.121 107.345 231.649 107.345 230.908 cv
107.345 223.167 li
107.345 222.538 107.251 222.126 107.063 221.931 cv
106.875 221.736 106.459 221.613 105.816 221.561 cv
105.816 221.229 li
110.742 221.229 li
111.767 221.229 112.621 221.359 113.305 221.621 cv
114.602 222.115 115.25 223.024 115.25 224.349 cv
115.25 225.238 114.962 225.92 114.386 226.397 cv
113.81 226.874 113.026 227.187 112.036 227.338 cv
115.702 231.875 li
115.928 232.152 116.154 232.354 116.38 232.481 cv
116.605 232.608 116.896 232.689 117.248 232.724 cv
117.248 233.055 li
114.383 233.055 li
109.933 227.548 li
109.152 227.591 li
109.152 231.114 li
109.152 231.775 109.252 232.194 109.452 232.371 cv
109.651 232.548 110.087 232.666 110.759 232.724 cv
110.759 233.055 li
105.816 233.055 li
105.816 232.724 li
cp
.75021 .679683 .670222 .90164 cmyk
f
119.542 226.387 mo
119.356 226.701 119.224 227.097 119.143 227.574 cv
122.809 227.574 li
122.745 226.992 122.635 226.559 122.479 226.273 cv
122.194 225.762 121.72 225.505 121.054 225.505 cv
120.394 225.505 119.89 225.799 119.542 226.387 cv
cp
123.703 225.719 mo
124.317 226.287 124.624 227.091 124.624 228.133 cv
119.108 228.133 li
119.166 229.479 119.47 230.461 120.021 231.076 cv
120.57 231.691 121.222 231.999 121.975 231.999 cv
122.583 231.999 123.096 231.839 123.513 231.52 cv
123.93 231.201 124.314 230.748 124.668 230.162 cv
124.972 230.266 li
124.734 231.006 124.29 231.691 123.639 232.32 cv
122.986 232.95 122.188 233.265 121.245 233.265 cv
120.156 233.265 119.314 232.852 118.722 232.025 cv
118.128 231.199 117.831 230.248 117.831 229.171 cv
117.831 228.001 118.176 226.992 118.864 226.143 cv
119.554 225.293 120.451 224.868 121.558 224.868 cv
122.374 224.868 123.09 225.152 123.703 225.719 cv
cp
f
130.544 236.468 mo
130.171 236.504 128.178 234.806 127.307 233.126 cv
126.666 231.894 126.328 230.375 126.328 228.749 cv
126.328 227.123 126.666 225.604 127.307 224.371 cv
128.178 222.692 130.171 220.994 130.544 221.03 cv
130.723 221.333 li
128.641 223.013 128.463 224.425 128.231 225.211 cv
127.929 226.194 127.822 227.391 127.822 228.749 cv
127.822 230.107 127.929 231.304 128.231 232.287 cv
128.463 233.073 128.641 234.485 130.723 236.164 cv
130.544 236.468 li
cp
f
138.906 231.143 mo
138.889 231.769 138.462 232.751 137.038 233.163 cv
135.188 233.698 133.622 233.252 132.733 232.698 cv
132.004 232.233 131.452 231.232 131.79 230.178 cv
132.163 228.963 133.213 228.695 133.676 228.552 cv
132.715 228.124 132.323 227.874 132.074 227.266 cv
131.879 226.766 131.736 225.747 132.857 224.872 cv
134.228 223.799 136.469 224.067 136.949 224.264 cv
137.306 224.407 137.821 224.604 138.142 225.086 cv
138.533 225.658 138.319 226.212 137.893 226.462 cv
137.732 226.551 136.843 226.766 136.559 225.604 cv
136.38 224.907 135.455 224.479 134.548 224.89 cv
133.462 225.39 133.533 226.658 133.587 226.944 cv
133.818 228.142 134.726 228.249 135.455 228.177 cv
136.416 228.088 li
137.128 228.017 137.519 228.552 136.843 228.892 cv
136.416 229.106 136.06 229.035 135.65 228.963 cv
134.512 228.767 133.89 229.231 133.658 230 cv
133.498 230.536 133.533 231.286 133.818 231.679 cv
134.583 232.68 136.131 232.626 136.665 232.555 cv
137.59 232.448 138.106 232.072 138.444 231.018 cv
138.906 231.143 li
cp
f
139.654 236.164 mo
141.735 234.485 141.913 233.073 142.145 232.287 cv
142.447 231.304 142.554 230.107 142.554 228.749 cv
142.554 227.391 142.447 226.194 142.145 225.211 cv
141.913 224.425 141.735 223.013 139.654 221.333 cv
139.832 221.03 li
140.205 220.994 142.198 222.692 143.07 224.371 cv
143.71 225.604 144.049 227.123 144.049 228.749 cv
144.049 230.375 143.71 231.894 143.07 233.126 cv
142.198 234.806 140.205 236.504 139.832 236.468 cv
139.654 236.164 li
cp
f
150.922 225.186 mo
151.516 224.435 152.217 223.832 153.024 223.375 cv
153.156 223.605 li
152.409 224.202 151.876 224.782 151.556 225.346 cv
150.994 226.33 150.714 227.64 150.714 229.276 cv
150.714 230.488 150.82 231.488 151.033 232.276 cv
151.409 233.656 152.117 234.688 153.156 235.374 cv
152.976 235.604 li
152.404 235.33 151.787 234.791 151.124 233.989 cv
150.024 232.661 149.475 231.15 149.475 229.458 cv
149.475 227.836 149.957 226.412 150.922 225.186 cv
cp
f
157.816 223.497 mo
157.818 223.509 157.82 223.535 157.82 223.577 cv
157.82 231.997 li
157.82 232.355 157.916 232.584 158.106 232.682 cv
158.298 232.779 158.654 232.838 159.177 232.856 cv
159.177 233.052 li
155.245 233.052 li
155.245 232.842 li
155.806 232.814 156.173 232.738 156.345 232.612 cv
156.516 232.486 156.602 232.213 156.602 231.793 cv
156.602 225.318 li
156.602 225.095 156.574 224.925 156.519 224.808 cv
156.463 224.691 156.342 224.633 156.156 224.633 cv
156.036 224.633 155.879 224.667 155.687 224.734 cv
155.494 224.802 155.314 224.874 155.147 224.948 cv
155.147 224.752 li
157.701 223.444 li
157.785 223.444 li
157.804 223.468 157.814 223.485 157.816 223.497 cv
cp
f
165.511 231.662 mo
165.766 230.912 165.894 229.826 165.894 228.406 cv
165.894 227.273 165.816 226.37 165.664 225.695 cv
165.376 224.437 164.838 223.808 164.049 223.808 cv
163.26 223.808 162.72 224.456 162.428 225.75 cv
162.274 226.44 162.197 227.348 162.197 228.476 cv
162.197 229.533 162.276 230.378 162.435 231.012 cv
162.731 232.195 163.288 232.787 164.104 232.787 cv
164.787 232.787 165.256 232.412 165.511 231.662 cv
cp
166.568 225.116 mo
167.037 226.025 167.271 227.069 167.271 228.249 cv
167.271 229.176 167.128 230.05 166.84 230.871 cv
166.297 232.414 165.357 233.185 164.021 233.185 cv
163.107 233.185 162.355 232.768 161.767 231.934 cv
161.135 231.043 160.819 229.833 160.819 228.304 cv
160.819 227.102 161.03 226.067 161.453 225.2 cv
162.023 224.02 162.9 223.431 164.084 223.431 cv
165.151 223.431 165.979 223.992 166.568 225.116 cv
cp
f
167.77 223.266 mo
170.237 223.266 li
170.237 223.893 li
167.77 223.893 li
167.77 223.266 li
cp
f
171.003 225.73 mo
172.192 224.49 173.001 223.579 173.427 222.998 cv
173.853 222.417 174.065 221.851 174.065 221.299 cv
174.065 220.816 173.936 220.448 173.675 220.195 cv
173.415 219.942 173.104 219.816 172.744 219.816 cv
172.298 219.816 171.938 219.979 171.661 220.306 cv
171.508 220.485 171.361 220.761 171.222 221.133 cv
171.013 221.089 li
171.175 220.338 171.45 219.816 171.839 219.524 cv
172.228 219.232 172.645 219.086 173.09 219.086 cv
173.64 219.086 174.084 219.26 174.424 219.607 cv
174.764 219.955 174.934 220.38 174.934 220.883 cv
174.934 221.418 174.75 221.934 174.382 222.43 cv
174.015 222.926 173.216 223.809 171.986 225.079 cv
174.226 225.079 li
174.538 225.079 174.758 225.041 174.885 224.966 cv
175.012 224.891 175.154 224.708 175.313 224.417 cv
175.44 224.476 li
174.899 225.843 li
171.003 225.843 li
171.003 225.73 li
cp
f
179.925 231.5 mo
179.744 232.12 179.479 232.705 179.132 233.255 cv
178.765 233.842 178.275 234.39 177.663 234.898 cv
177.259 235.234 176.921 235.469 176.646 235.604 cv
176.515 235.374 li
177.229 234.828 177.751 234.271 178.08 233.703 cv
178.665 232.696 178.957 231.365 178.957 229.71 cv
178.957 228.372 178.823 227.279 178.554 226.43 cv
178.178 225.232 177.498 224.291 176.515 223.605 cv
176.695 223.375 li
177.429 223.785 178.11 224.405 178.742 225.234 cv
179.712 226.512 180.196 227.943 180.196 229.528 cv
180.196 230.223 180.105 230.88 179.925 231.5 cv
cp
f
13.5527 139.665 mo
13.501 138.938 13.3931 138.466 13.2285 138.25 cv
13.0645 138.036 12.6396 137.928 11.9541 137.928 cv
4.04004 137.928 li
3.38574 137.928 2.96436 138.036 2.77588 138.25 cv
2.58789 138.466 2.47656 138.938 2.44141 139.665 cv
2.11133 139.665 li
2.11133 134.375 li
2.44141 134.375 li
2.47656 135.103 2.58789 135.574 2.77588 135.79 cv
2.96436 136.005 3.38574 136.112 4.04004 136.112 cv
11.9541 136.112 li
12.6396 136.112 13.0645 136.005 13.2285 135.79 cv
13.3931 135.574 13.501 135.103 13.5527 134.375 cv
13.8828 134.375 li
13.8828 139.665 li
13.5527 139.665 li
cp
f
13.6567 133.712 mo
13.6167 133.258 13.541 132.956 13.4312 132.804 cv
13.2632 132.572 12.9272 132.455 12.4233 132.455 cv
7.93213 132.455 li
7.50342 132.455 7.22266 132.512 7.08936 132.625 cv
6.95605 132.739 6.88965 132.926 6.88965 133.188 cv
6.88965 133.311 6.89551 133.402 6.90674 133.463 cv
6.91846 133.524 6.93896 133.596 6.96777 133.677 cv
6.66357 133.677 li
6.45508 133.049 li
6.37988 132.822 6.24365 132.449 6.04688 131.932 cv
5.8501 131.414 5.75146 131.14 5.75146 131.111 cv
5.75146 131.082 5.76611 131.064 5.79492 131.059 cv
5.82422 131.053 5.87891 131.05 5.95996 131.05 cv
7.13281 131.05 li
6.61133 130.474 6.25098 129.977 6.05127 129.558 cv
5.85156 129.139 5.75146 128.708 5.75146 128.266 cv
5.75146 127.667 5.9541 127.189 6.35938 126.834 cv
6.57959 126.648 6.87793 126.494 7.25439 126.372 cv
6.81982 125.941 6.49854 125.566 6.29004 125.246 cv
5.93115 124.693 5.75146 124.129 5.75146 123.553 cv
5.75146 122.616 6.13086 121.99 6.88965 121.676 cv
7.31836 121.496 7.99561 121.406 8.92236 121.406 cv
12.5278 121.406 li
12.939 121.406 13.2183 121.314 13.3657 121.131 cv
13.5137 120.947 13.6108 120.617 13.6567 120.14 cv
13.8828 120.14 li
13.8828 124.076 li
13.6396 124.076 li
13.5933 123.57 13.4917 123.237 13.3354 123.077 cv
13.1792 122.917 12.8608 122.837 12.3799 122.837 cv
8.63574 122.837 li
8.07422 122.837 7.65967 122.898 7.39355 123.02 cv
6.91846 123.235 6.68115 123.657 6.68115 124.286 cv
6.68115 124.664 6.80566 125.04 7.05469 125.412 cv
7.19922 125.627 7.43115 125.892 7.74951 126.206 cv
12.1973 126.206 li
12.6665 126.206 13.0229 126.123 13.2661 125.957 cv
13.5093 125.792 13.6396 125.441 13.6567 124.905 cv
13.8828 124.905 li
13.8828 128.912 li
13.6567 128.912 li
13.5874 128.359 13.4541 128.007 13.2573 127.855 cv
13.0605 127.704 12.5742 127.628 11.7979 127.628 cv
9.37012 127.628 li
8.48047 127.628 7.86768 127.687 7.53223 127.803 cv
6.96484 127.995 6.68115 128.402 6.68115 129.025 cv
6.68115 129.38 6.77832 129.729 6.97217 130.072 cv
7.16602 130.416 7.41943 130.718 7.73242 130.98 cv
12.4844 130.98 li
12.9243 130.98 13.2285 130.903 13.3965 130.749 cv
13.5645 130.595 13.6514 130.259 13.6567 129.741 cv
13.8828 129.741 li
13.8828 133.712 li
13.6567 133.712 li
cp
f
17.2817 114.913 mo
17.3169 115.288 15.627 117.289 13.9546 118.165 cv
12.7271 118.808 11.2144 119.147 9.5957 119.147 cv
7.97656 119.147 6.46436 118.808 5.23633 118.165 cv
3.56396 117.289 1.87402 115.288 1.90967 114.913 cv
2.21191 114.734 li
3.88428 116.824 5.29004 117.003 6.07275 117.235 cv
7.05127 117.539 8.24316 117.646 9.5957 117.646 cv
10.9478 117.646 12.1396 117.539 13.1182 117.235 cv
13.9009 117.003 15.3066 116.824 16.979 114.734 cv
17.2817 114.913 li
cp
f
6.44629 109.032 mo
6.71338 110.265 7.49609 111.265 9.09717 111.462 cv
9.75586 111.551 11.2144 111.623 12.4775 110.89 cv
13.314 110.408 13.3853 109.675 13.3853 109.3 cv
13.3853 108.817 13.1362 108.264 12.6025 107.853 cv
11.9263 107.352 10.5562 107.066 9.04395 107.424 cv
7.65625 107.763 6.65967 108.782 6.44629 109.032 cv
cp
4.04443 111.658 mo
3.63525 112.105 3.15479 112.248 2.97705 112.302 cv
1.80273 112.659 1.39355 111.855 1.09082 111.462 cv
.468262 110.64 .806152 108.603 .859863 108.335 cv
1.00195 107.709 1.37549 106.906 1.73145 106.602 cv
2.14063 106.262 2.69238 106.102 3.03027 106.548 cv
3.45752 107.138 3.10156 107.745 2.49658 108.317 cv
1.90967 108.889 1.71387 109.032 1.53564 109.622 cv
1.25098 110.479 1.58936 111.015 1.90967 111.319 cv
2.15869 111.569 2.74561 111.712 3.31494 111.14 cv
4.18701 110.283 4.9873 108.799 5.12988 108.567 cv
5.32568 108.246 6.14404 106.941 7.30029 106.245 cv
8.67041 105.405 11.1611 105.012 12.9937 106.87 cv
13.4209 107.316 13.9189 108.067 14.0791 108.657 cv
14.3105 109.514 14.2393 110.533 13.9189 111.14 cv
13.2964 112.337 12.6025 112.749 11.9619 113.052 cv
10.9297 113.535 9.54199 113.66 8.11865 112.802 cv
6.53516 111.873 6.05469 109.89 5.93018 109.586 cv
4.04443 111.658 li
cp
f
16.979 104.776 mo
15.3066 102.686 13.9009 102.507 13.1182 102.274 cv
12.1396 101.971 10.9478 101.863 9.5957 101.863 cv
8.24316 101.863 7.05127 101.971 6.07275 102.274 cv
5.29004 102.507 3.88428 102.686 2.21191 104.776 cv
1.90967 104.597 li
1.87402 104.222 3.56396 102.221 5.23633 101.345 cv
6.46436 100.702 7.97656 100.363 9.5957 100.363 cv
11.2144 100.363 12.7271 100.702 13.9546 101.345 cv
15.627 102.221 17.3169 104.222 17.2817 104.597 cv
16.979 104.776 li
cp
f
6.05029 94.4307 mo
5.30322 93.834 4.70264 93.1299 4.24756 92.3188 cv
4.47754 92.186 li
5.07129 92.9365 5.64893 93.4727 6.21045 93.7944 cv
7.18945 94.3584 8.49316 94.6406 10.1221 94.6406 cv
11.3286 94.6406 12.3237 94.5332 13.1079 94.3188 cv
14.4814 93.9414 15.5088 93.2305 16.1909 92.186 cv
16.4209 92.3677 li
16.147 92.9414 15.6108 93.5615 14.813 94.228 cv
13.4907 95.3325 11.9873 95.8853 10.3027 95.8853 cv
8.68799 95.8853 7.271 95.4004 6.05029 94.4307 cv
cp
f
4.36963 87.5044 mo
4.38135 87.502 4.40771 87.501 4.44971 87.501 cv
12.8296 87.501 li
13.1865 87.501 13.4141 87.4048 13.5117 87.2129 cv
13.6089 87.021 13.667 86.6621 13.6855 86.1372 cv
13.8804 86.1372 li
13.8804 90.0884 li
13.6714 90.0884 li
13.6436 89.5244 13.5674 89.1558 13.4419 88.9834 cv
13.3164 88.811 13.0454 88.7246 12.6274 88.7246 cv
6.18262 88.7246 li
5.95996 88.7246 5.79053 88.7524 5.67432 88.8086 cv
5.55859 88.8647 5.50049 88.9858 5.50049 89.1724 cv
5.50049 89.2935 5.53418 89.4507 5.60156 89.644 cv
5.66895 89.8379 5.73975 90.0181 5.81348 90.186 cv
5.61865 90.186 li
4.31738 87.6196 li
4.31738 87.5361 li
4.34082 87.5176 4.35791 87.5068 4.36963 87.5044 cv
cp
f
12.4961 79.7739 mo
11.7495 79.5176 10.6694 79.3892 9.25537 79.3892 cv
8.12891 79.3892 7.22949 79.4663 6.55713 79.6201 cv
5.30518 79.9092 4.6792 80.4497 4.6792 81.2422 cv
4.6792 82.0352 5.32373 82.5781 6.61279 82.8716 cv
7.29883 83.0254 8.20313 83.1025 9.32471 83.1025 cv
10.3774 83.1025 11.2188 83.0229 11.8496 82.8647 cv
13.0273 82.5664 13.6157 82.0068 13.6157 81.1865 cv
13.6157 80.501 13.2427 80.0303 12.4961 79.7739 cv
cp
5.98096 78.7109 mo
6.88574 78.2402 7.9248 78.0049 9.09863 78.0049 cv
10.0225 78.0049 10.8921 78.1494 11.709 78.4385 cv
13.2446 78.9839 14.0127 79.9277 14.0127 81.2705 cv
14.0127 82.189 13.5972 82.9438 12.7666 83.5361 cv
11.8804 84.1699 10.6763 84.4868 9.1543 84.4868 cv
7.95752 84.4868 6.92725 84.2749 6.06445 83.8506 cv
4.89063 83.2773 4.30322 82.396 4.30322 81.2075 cv
4.30322 80.1353 4.86279 79.3032 5.98096 78.7109 cv
cp
f
4.13574 78.0303 mo
4.13574 75.5508 li
4.76025 75.5508 li
4.76025 78.0303 li
4.13574 78.0303 li
cp
f
1.00684 72.1553 mo
4.38965 74.5601 li
4.38965 72.1553 li
1.00684 72.1553 li
cp
0 71.832 mo
0 71.3662 li
4.38965 71.3662 li
4.38965 70.3423 li
5.03809 70.3423 li
5.03809 71.3662 li
6.70117 71.3662 li
6.70117 72.1455 li
5.03809 72.1455 li
5.03809 74.9678 li
4.38965 74.9678 li
0 71.832 li
cp
f
12.334 65.2891 mo
12.9512 65.4712 13.5332 65.7368 14.0806 66.0864 cv
14.6655 66.4546 15.2104 66.9468 15.7163 67.562 cv
16.0503 67.9673 16.2847 68.3076 16.4194 68.583 cv
16.1895 68.7158 li
15.647 67.998 15.0923 67.4731 14.5264 67.1421 cv
13.5239 66.5552 12.1992 66.2612 10.5522 66.2612 cv
9.22021 66.2612 8.13232 66.3965 7.2876 66.667 cv
6.09521 67.0444 5.1582 67.7275 4.47607 68.7158 cv
4.24609 68.5337 li
4.65479 67.7974 5.27197 67.1123 6.09766 66.478 cv
7.36914 65.5039 8.79346 65.0166 10.3711 65.0166 cv
11.0625 65.0166 11.7168 65.1074 12.334 65.2891 cv
cp
f
160.448 20.4385 mo
169.916 20.4385 li
169.916 10.4033 li
160.448 10.4033 li
160.448 20.4385 li
cp
.8 0 1 0 cmyk
ef
179.511 15.6509 mo
179.806 15.4956 179.974 15.3647 180.015 15.2588 cv
180.031 15.2178 180.045 15.0659 180.058 14.8022 cv
180.069 14.5391 180.076 14.3257 180.076 14.1626 cv
180.076 13.313 179.934 12.623 179.648 12.0923 cv
179.363 11.5615 178.946 11.2959 178.396 11.2959 cv
177.997 11.2959 177.674 11.4775 177.428 11.8408 cv
177.182 12.2046 177.059 12.7476 177.059 13.4702 cv
177.059 14.0664 177.173 14.6177 177.403 15.124 cv
177.634 15.6304 178.05 15.8833 178.652 15.8833 cv
178.93 15.8833 179.216 15.8062 179.511 15.6509 cv
cp
180.552 12.022 mo
181.039 12.7383 181.283 13.5376 181.283 14.4194 cv
181.283 15.0405 181.167 15.6714 180.936 16.312 cv
180.704 16.9531 180.366 17.5249 179.924 18.0273 cv
179.407 18.6069 178.753 19.0376 177.961 19.3193 cv
177.518 19.479 176.959 19.6011 176.284 19.687 cv
176.223 19.4419 li
176.646 19.3442 176.999 19.2397 177.279 19.1299 cv
177.784 18.9297 178.189 18.6846 178.494 18.3945 cv
178.926 17.9824 179.271 17.522 179.529 17.0137 cv
179.788 16.5054 179.95 16.0796 180.015 15.7363 cv
179.801 15.8945 li
179.5 16.1211 179.146 16.2769 178.739 16.3618 cv
178.527 16.4106 178.334 16.4346 178.159 16.4346 cv
177.467 16.4346 176.919 16.189 176.514 15.6978 cv
176.108 15.2061 175.906 14.6196 175.906 13.9385 cv
175.906 13.0698 176.146 12.354 176.629 11.791 cv
177.11 11.2285 177.727 10.9468 178.479 10.9468 cv
179.373 10.9468 180.063 11.3052 180.552 12.022 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
183.623 18.6675 mo
183.999 18.9307 184.289 19.0625 184.493 19.0625 cv
184.961 19.0625 185.37 18.855 185.72 18.4404 cv
186.07 18.0264 186.245 17.5166 186.245 16.9126 cv
186.245 15.855 185.684 15.0933 184.56 14.6279 cv
183.938 14.3706 183.357 14.2422 182.82 14.2422 cv
182.73 14.2422 182.675 14.2388 182.652 14.2329 cv
182.63 14.2266 182.603 14.2056 182.57 14.1685 cv
182.578 14.1357 182.585 14.1084 182.591 14.0859 cv
182.598 14.0635 182.604 14.042 182.612 14.0215 cv
183.942 11.0938 li
186.557 11.0938 li
186.687 11.0938 186.787 11.0713 186.857 11.0264 cv
186.929 10.9814 187.021 10.8979 187.135 10.7754 cv
187.232 10.8608 li
186.763 11.9941 li
186.747 12.0308 186.702 12.0547 186.629 12.0645 cv
186.556 12.0747 186.477 12.0801 186.391 12.0801 cv
184.028 12.0801 li
183.51 13.1519 li
184.177 13.2661 184.665 13.3745 184.975 13.4766 cv
185.483 13.6479 185.908 13.9014 186.25 14.2358 cv
186.543 14.5259 186.765 14.8516 186.915 15.2129 cv
187.065 15.5742 187.142 15.957 187.142 16.3613 cv
187.142 17.2637 186.82 18.0171 186.18 18.6211 cv
185.539 19.2256 184.729 19.5278 183.747 19.5278 cv
183.349 19.5278 183.027 19.4888 182.783 19.4116 cv
182.376 19.2852 182.173 19.0581 182.173 18.7314 cv
182.173 18.6089 182.217 18.502 182.304 18.4102 cv
182.392 18.3184 182.526 18.272 182.71 18.272 cv
182.942 18.272 183.246 18.4038 183.623 18.6675 cv
cp
f
196.657 15.6929 mo
195.646 15.2788 194.896 16.9346 194.598 17.75 cv
194.46 18.1387 194.373 18.4775 194.51 18.9038 cv
194.71 19.4937 195.259 19.4058 195.459 19.3682 cv
195.846 19.3052 196.17 18.9917 196.47 18.5903 cv
197.019 17.8628 197.269 16.897 197.269 16.7593 cv
197.269 16.6084 197.243 15.9312 196.657 15.6929 cv
cp
196.856 15.2412 mo
197.655 15.5176 197.655 16.3955 197.643 16.6714 cv
197.605 17.2607 197.344 18.0386 196.869 18.7285 cv
196.557 19.1797 196.12 19.6563 195.533 19.7817 cv
194.984 19.895 194.261 19.9199 193.724 19.2173 cv
193.399 18.791 193.399 18.2139 193.474 17.7749 cv
193.698 16.5083 194.548 15.8184 195.321 15.3794 cv
195.896 15.0532 196.595 15.1538 196.856 15.2412 cv
cp
192.513 12.1309 mo
192.238 12.0181 191.914 11.8423 191.714 11.6792 cv
191.515 11.6665 191.302 11.6167 190.878 12.1436 cv
190.366 12.7832 190.241 13.0967 189.941 13.8745 cv
189.767 14.3257 189.767 14.8774 189.892 15.1162 cv
190.142 15.5928 190.766 15.4673 191.015 15.3545 cv
191.689 15.0786 192.326 14.0625 192.476 13.3599 cv
192.638 12.6201 192.551 12.4946 192.513 12.1309 cv
cp
196.22 11.1777 mo
190.878 19.7441 li
190.191 19.7441 li
195.047 12.0806 li
194.473 12.2813 194.385 12.3564 193.861 12.394 cv
193.262 12.4443 193.074 12.269 192.888 12.2061 cv
192.912 12.5195 193 12.9209 192.862 13.5356 cv
192.75 14.0498 192.001 15.4673 191.128 15.7681 cv
190.429 16.0063 189.704 16.0439 189.192 15.4297 cv
188.606 14.7148 188.844 13.7739 188.918 13.5229 cv
189.056 13.0718 189.393 12.2939 190.479 11.5415 cv
190.928 11.2275 191.364 11.1523 191.864 11.2275 cv
192.313 11.2905 192.351 11.4033 192.675 11.6919 cv
192.8 11.7544 193.262 12.231 194.348 11.9551 cv
194.935 11.8047 195.421 11.4912 195.533 11.1777 cv
196.22 11.1777 li
cp
f
207.553 11.1489 mo
208.028 11.2837 208.295 11.3511 208.352 11.3511 cv
208.47 11.3511 208.581 11.3184 208.687 11.2529 cv
208.793 11.188 208.865 11.0854 208.906 10.9468 cv
209.169 10.9468 li
209.284 13.7642 li
208.998 13.7642 li
208.831 13.2051 208.614 12.7539 208.346 12.4106 cv
207.833 11.7656 207.145 11.4429 206.279 11.4429 cv
205.405 11.4429 204.69 11.79 204.136 12.4844 cv
203.581 13.1782 203.304 14.1338 203.304 15.3506 cv
203.304 16.4692 203.596 17.3628 204.179 18.0303 cv
204.762 18.6978 205.501 19.0317 206.395 19.0317 cv
207.041 19.0317 207.637 18.8765 208.181 18.5664 cv
208.494 18.3906 208.837 18.125 209.211 17.77 cv
209.443 18.0029 li
209.166 18.354 208.823 18.6621 208.412 18.9277 cv
207.714 19.377 206.955 19.6011 206.139 19.6011 cv
204.798 19.6011 203.732 19.1704 202.944 18.3091 cv
202.217 17.5127 201.853 16.5186 201.853 15.3262 cv
201.853 14.1055 202.237 13.0806 203.005 12.2515 cv
203.813 11.3818 204.866 10.9468 206.163 10.9468 cv
206.614 10.9468 207.077 11.0142 207.553 11.1489 cv
cp
f
210.011 19.1602 mo
210.47 19.1118 210.768 19.0293 210.903 18.9136 cv
211.04 18.7979 211.107 18.5044 211.107 18.0332 cv
211.107 12.4536 li
211.107 12.0083 211.041 11.7178 210.906 11.5806 cv
210.772 11.4438 210.474 11.3594 210.011 11.3267 cv
210.011 11.0938 li
213.534 11.0938 li
213.534 11.3267 li
213.075 11.3511 212.767 11.4268 212.61 11.5532 cv
212.454 11.6797 212.376 11.9512 212.376 12.3677 cv
212.376 18.3945 li
212.376 18.5337 212.399 18.6426 212.446 18.7222 cv
212.493 18.8022 212.596 18.8521 212.754 18.8726 cv
212.848 18.8848 212.946 18.8931 213.05 18.897 cv
213.154 18.9009 213.349 18.9028 213.633 18.9028 cv
214.744 18.9028 215.495 18.811 215.886 18.6274 cv
216.276 18.4438 216.654 17.9741 217.021 17.2188 cv
217.338 17.2188 li
216.728 19.3931 li
210.011 19.3931 li
210.011 19.1602 li
cp
f
160.448 40.6133 mo
169.916 40.6133 li
169.916 30.4736 li
160.448 30.4736 li
160.448 40.6133 li
cp
0 0 1 .05 cmyk
ef
180.003 35.8066 mo
179.719 35.1045 179.234 34.7534 178.552 34.7534 cv
177.922 34.7534 177.503 34.9409 177.296 35.3169 cv
177.174 35.5371 177.113 35.9048 177.113 36.4189 cv
177.113 37.085 177.254 37.7358 177.537 38.373 cv
177.819 39.0103 178.266 39.3286 178.875 39.3286 cv
179.358 39.3286 179.71 39.1211 179.93 38.707 cv
180.149 38.2925 180.259 37.8076 180.259 37.252 cv
180.259 36.709 180.174 36.2275 180.003 35.8066 cv
cp
180.658 38.8018 mo
180.181 39.4019 179.56 39.7021 178.796 39.7021 cv
178.08 39.7021 177.429 39.3652 176.842 38.6914 cv
176.255 38.0176 175.961 37.1216 175.961 36.0029 cv
175.961 34.5615 176.53 33.3242 177.668 32.291 cv
178.684 31.4253 179.826 30.9927 181.094 30.9927 cv
181.125 31.1948 li
180.616 31.2886 180.179 31.416 179.811 31.5776 cv
179.443 31.7388 179.114 31.9644 178.826 32.2544 cv
178.529 32.5483 178.251 32.9219 177.991 33.375 cv
177.73 33.8281 177.552 34.2773 177.454 34.7227 cv
177.706 34.5674 177.924 34.4531 178.106 34.3794 cv
178.432 34.249 178.759 34.1836 179.088 34.1836 cv
179.734 34.1836 180.277 34.4082 180.716 34.8574 cv
181.155 35.3066 181.374 35.9478 181.374 36.7808 cv
181.374 37.5278 181.136 38.2017 180.658 38.8018 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
185.788 34.002 mo
186.04 33.688 186.166 33.3091 186.166 32.8647 cv
186.166 32.4775 186.047 32.1479 185.81 31.877 cv
185.571 31.606 185.211 31.4702 184.727 31.4702 cv
184.354 31.4702 184.044 31.5884 183.801 31.8252 cv
183.557 32.0615 183.435 32.3491 183.435 32.687 cv
183.435 33.0703 183.578 33.4263 183.864 33.7544 cv
184.151 34.0825 184.527 34.3916 184.995 34.6807 cv
185.377 34.4116 185.642 34.1855 185.788 34.002 cv
cp
185.977 38.9619 mo
186.217 38.7007 186.337 38.3745 186.337 37.9829 cv
186.337 37.5386 186.209 37.1792 185.955 36.9038 cv
185.701 36.6284 185.18 36.2119 184.392 35.6533 cv
184.042 35.8735 183.788 36.1587 183.63 36.5093 cv
183.471 36.8599 183.392 37.1982 183.392 37.5244 cv
183.392 38.083 183.535 38.5273 183.821 38.8574 cv
184.108 39.188 184.473 39.353 184.916 39.353 cv
185.384 39.353 185.737 39.2227 185.977 38.9619 cv
cp
182.959 34.355 mo
182.658 33.9629 182.508 33.5303 182.508 33.0566 cv
182.508 32.5176 182.73 32.0605 183.176 31.6846 cv
183.62 31.3091 184.198 31.1211 184.91 31.1211 cv
185.564 31.1211 186.084 31.2988 186.471 31.6543 cv
186.856 32.0093 187.05 32.4219 187.05 32.8916 cv
187.05 33.3696 186.853 33.7983 186.458 34.1782 cv
186.23 34.3945 185.863 34.6436 185.354 34.9253 cv
186.046 35.4399 186.541 35.8882 186.84 36.2695 cv
187.138 36.6514 187.287 37.1016 187.287 37.6201 cv
187.287 38.208 187.067 38.7021 186.626 39.1021 cv
186.185 39.502 185.595 39.7021 184.855 39.7021 cv
184.192 39.7021 183.625 39.5176 183.151 39.1479 cv
182.678 38.7783 182.44 38.2915 182.44 37.687 cv
182.44 37.1685 182.605 36.7109 182.935 36.3149 cv
183.15 36.0576 183.524 35.7495 184.057 35.3901 cv
183.52 34.9575 183.154 34.6123 182.959 34.355 cv
cp
f
196.657 35.8672 mo
195.646 35.4536 194.896 37.1089 194.598 37.9243 cv
194.46 38.313 194.373 38.6519 194.51 39.0781 cv
194.71 39.6675 195.259 39.5801 195.459 39.5425 cv
195.846 39.4795 196.17 39.166 196.47 38.7646 cv
197.019 38.0371 197.269 37.0713 197.269 36.9336 cv
197.269 36.7827 197.243 36.1055 196.657 35.8672 cv
cp
196.856 35.4155 mo
197.655 35.6919 197.655 36.5698 197.643 36.8457 cv
197.605 37.4351 197.344 38.2129 196.869 38.9028 cv
196.557 39.354 196.12 39.8306 195.533 39.9561 cv
194.984 40.0688 194.261 40.0942 193.724 39.3916 cv
193.399 38.9653 193.399 38.3882 193.474 37.9492 cv
193.698 36.6826 194.548 35.9927 195.321 35.5537 cv
195.896 35.2275 196.595 35.3281 196.856 35.4155 cv
cp
192.513 32.3052 mo
192.238 32.1924 191.914 32.0166 191.714 31.8535 cv
191.515 31.8413 191.302 31.791 190.878 32.3179 cv
190.366 32.9575 190.241 33.271 189.941 34.0483 cv
189.767 34.5 189.767 35.0522 189.892 35.2905 cv
190.142 35.7671 190.766 35.6416 191.015 35.5288 cv
191.689 35.2524 192.326 34.2368 192.476 33.5342 cv
192.638 32.7944 192.551 32.6689 192.513 32.3052 cv
cp
196.22 31.3521 mo
190.878 39.9185 li
190.191 39.9185 li
195.047 32.2549 li
194.473 32.4556 194.385 32.5308 193.861 32.5684 cv
193.262 32.6187 193.074 32.4429 192.888 32.3804 cv
192.912 32.6938 193 33.0952 192.862 33.71 cv
192.75 34.2241 192.001 35.6416 191.128 35.9424 cv
190.429 36.1807 189.704 36.2183 189.192 35.604 cv
188.606 34.8892 188.844 33.9482 188.918 33.6973 cv
189.056 33.2456 189.393 32.4683 190.479 31.7158 cv
190.928 31.4019 191.364 31.3267 191.864 31.4019 cv
192.313 31.4648 192.351 31.5776 192.675 31.8662 cv
192.8 31.9287 193.262 32.4053 194.348 32.1294 cv
194.935 31.979 195.421 31.6655 195.533 31.3521 cv
196.22 31.3521 li
cp
f
207.553 31.3232 mo
208.028 31.458 208.295 31.5254 208.352 31.5254 cv
208.47 31.5254 208.581 31.4927 208.687 31.4272 cv
208.793 31.3623 208.865 31.2598 208.906 31.1211 cv
209.169 31.1211 li
209.284 33.9385 li
208.998 33.9385 li
208.831 33.3794 208.614 32.9282 208.346 32.585 cv
207.833 31.9399 207.145 31.6172 206.279 31.6172 cv
205.405 31.6172 204.69 31.9644 204.136 32.6587 cv
203.581 33.3525 203.304 34.3081 203.304 35.5249 cv
203.304 36.6436 203.596 37.5371 204.179 38.2046 cv
204.762 38.8721 205.501 39.2061 206.395 39.2061 cv
207.041 39.2061 207.637 39.0508 208.181 38.7407 cv
208.494 38.5649 208.837 38.2993 209.211 37.9443 cv
209.443 38.1772 li
209.166 38.5283 208.823 38.8364 208.412 39.1021 cv
207.714 39.5513 206.955 39.7754 206.139 39.7754 cv
204.798 39.7754 203.732 39.3447 202.944 38.4834 cv
202.217 37.687 201.853 36.6929 201.853 35.5005 cv
201.853 34.2798 202.237 33.2549 203.005 32.4258 cv
203.813 31.5562 204.866 31.1211 206.163 31.1211 cv
206.614 31.1211 207.077 31.1885 207.553 31.3232 cv
cp
f
210.011 39.3345 mo
210.47 39.2861 210.768 39.2036 210.903 39.0879 cv
211.04 38.9722 211.107 38.6787 211.107 38.2075 cv
211.107 32.6279 li
211.107 32.1826 211.041 31.8921 210.906 31.7549 cv
210.772 31.6182 210.474 31.5337 210.011 31.501 cv
210.011 31.2681 li
213.534 31.2681 li
213.534 31.501 li
213.075 31.5254 212.767 31.6011 212.61 31.7275 cv
212.454 31.854 212.376 32.1255 212.376 32.542 cv
212.376 38.5688 li
212.376 38.708 212.399 38.8169 212.446 38.8965 cv
212.493 38.9766 212.596 39.0264 212.754 39.0469 cv
212.848 39.0591 212.946 39.0674 213.05 39.0713 cv
213.154 39.0752 213.349 39.0771 213.633 39.0771 cv
214.744 39.0771 215.495 38.9854 215.886 38.8018 cv
216.276 38.6182 216.654 38.1484 217.021 37.3931 cv
217.338 37.3931 li
216.728 39.5674 li
210.011 39.5674 li
210.011 39.3345 li
cp
f
.521659 lw
36.6733 465.613 mo
36.6733 264.077 li
225.569 264.077 li
225.569 465.613 li
36.6733 465.613 li
cp
@
.104332 lw
36.6733 465.613 mo
36.6733 264.077 li
@
.312995 lw
38.4434 264.077 mo
36.6733 264.077 li
38.4434 277.561 mo
36.6733 277.561 li
38.4434 290.941 mo
36.6733 290.941 li
38.4434 304.425 mo
36.6733 304.425 li
40.2139 317.806 mo
36.6733 317.806 li
38.4434 465.613 mo
36.6733 465.613 li
40.2139 452.128 mo
36.6733 452.128 li
40.2139 317.806 mo
36.6733 317.806 li
38.4434 331.291 mo
36.6733 331.291 li
38.4434 344.67 mo
36.6733 344.67 li
38.4434 358.155 mo
36.6733 358.155 li
38.4434 371.535 mo
36.6733 371.535 li
40.2139 385.019 mo
36.6733 385.019 li
38.4434 398.4 mo
36.6733 398.4 li
38.4434 411.883 mo
36.6733 411.883 li
38.4434 425.264 mo
36.6733 425.264 li
38.4434 438.749 mo
36.6733 438.749 li
40.2139 452.128 mo
36.6733 452.128 li
@
14.4658 452.913 mo
17.1157 452.913 li
17.1157 453.585 li
14.4658 453.585 li
14.4658 452.913 li
cp
f
20.8159 448.495 mo
20.8179 448.503 20.8184 448.523 20.8184 448.555 cv
20.8184 454.884 li
20.8184 455.155 20.8906 455.326 21.0342 455.4 cv
21.1782 455.473 21.4468 455.517 21.8398 455.531 cv
21.8398 455.678 li
18.8809 455.678 li
18.8809 455.52 li
19.3032 455.5 19.5791 455.442 19.7085 455.347 cv
19.8374 455.252 19.9019 455.047 19.9019 454.732 cv
19.9019 449.864 li
19.9019 449.696 19.8809 449.568 19.8394 449.48 cv
19.7974 449.392 19.7065 449.348 19.5669 449.348 cv
19.4761 449.348 19.3584 449.375 19.2134 449.425 cv
19.0684 449.476 18.9331 449.529 18.8076 449.585 cv
18.8076 449.438 li
20.7295 448.455 li
20.7925 448.455 li
20.8062 448.472 20.814 448.486 20.8159 448.495 cv
cp
f
26.6055 454.632 mo
26.7974 454.069 26.8936 453.253 26.8936 452.185 cv
26.8936 451.333 26.8359 450.655 26.7207 450.147 cv
26.5044 449.201 26.0991 448.728 25.5059 448.728 cv
24.9121 448.728 24.5054 449.215 24.2856 450.189 cv
24.1704 450.707 24.1128 451.39 24.1128 452.238 cv
24.1128 453.033 24.1719 453.667 24.2905 454.144 cv
24.5142 455.034 24.9331 455.478 25.5479 455.478 cv
26.061 455.478 26.4136 455.197 26.6055 454.632 cv
cp
27.4014 449.711 mo
27.7544 450.395 27.9307 451.18 27.9307 452.067 cv
27.9307 452.764 27.8223 453.421 27.606 454.038 cv
27.1973 455.198 26.4902 455.778 25.4849 455.778 cv
24.7969 455.778 24.2314 455.464 23.7881 454.837 cv
23.313 454.167 23.0757 453.258 23.0757 452.109 cv
23.0757 451.205 23.2344 450.426 23.5522 449.774 cv
23.9819 448.888 24.6416 448.445 25.5317 448.445 cv
26.335 448.445 26.958 448.867 27.4014 449.711 cv
cp
f
26.6006 387.523 mo
26.7925 386.959 26.8887 386.144 26.8887 385.076 cv
26.8887 384.224 26.8311 383.545 26.7158 383.038 cv
26.4995 382.091 26.0942 381.619 25.501 381.619 cv
24.9072 381.619 24.5005 382.106 24.2808 383.08 cv
24.1655 383.597 24.1079 384.281 24.1079 385.128 cv
24.1079 385.923 24.167 386.558 24.2856 387.035 cv
24.5093 387.924 24.9282 388.369 25.543 388.369 cv
26.0562 388.369 26.4087 388.087 26.6006 387.523 cv
cp
27.3965 382.602 mo
27.7495 383.286 27.9258 384.071 27.9258 384.958 cv
27.9258 385.655 27.8174 386.312 27.6011 386.928 cv
27.1924 388.088 26.4854 388.668 25.48 388.668 cv
24.792 388.668 24.2266 388.355 23.7832 387.728 cv
23.3081 387.058 23.0708 386.149 23.0708 385 cv
23.0708 384.095 23.2295 383.317 23.5474 382.665 cv
23.9771 381.779 24.6367 381.335 25.5269 381.335 cv
26.3301 381.335 26.9531 381.757 27.3965 382.602 cv
cp
f
20.8145 314.171 mo
20.8164 314.18 20.8169 314.2 20.8169 314.232 cv
20.8169 320.561 li
20.8169 320.832 20.8892 321.002 21.0327 321.077 cv
21.1768 321.15 21.4453 321.194 21.8384 321.208 cv
21.8384 321.355 li
18.8794 321.355 li
18.8794 321.197 li
19.3018 321.176 19.5776 321.119 19.707 321.024 cv
19.8359 320.929 19.9004 320.724 19.9004 320.409 cv
19.9004 315.541 li
19.9004 315.373 19.8794 315.245 19.8379 315.157 cv
19.7959 315.069 19.7051 315.025 19.5654 315.025 cv
19.4746 315.025 19.3569 315.051 19.2119 315.102 cv
19.0669 315.153 18.9316 315.206 18.8062 315.262 cv
18.8062 315.115 li
20.728 314.131 li
20.791 314.131 li
20.8047 314.149 20.8125 314.163 20.8145 314.171 cv
cp
f
26.604 320.309 mo
26.7959 319.746 26.8921 318.93 26.8921 317.862 cv
26.8921 317.01 26.8345 316.332 26.7192 315.824 cv
26.5029 314.877 26.0977 314.405 25.5044 314.405 cv
24.9106 314.405 24.5039 314.892 24.2842 315.866 cv
24.1689 316.383 24.1113 317.067 24.1113 317.915 cv
24.1113 318.709 24.1704 319.344 24.2891 319.821 cv
24.5127 320.71 24.9316 321.155 25.5464 321.155 cv
26.0596 321.155 26.4121 320.874 26.604 320.309 cv
cp
27.3999 315.388 mo
27.7529 316.072 27.9292 316.857 27.9292 317.744 cv
27.9292 318.441 27.8208 319.098 27.6045 319.714 cv
27.1958 320.875 26.4888 321.455 25.4834 321.455 cv
24.7954 321.455 24.23 321.141 23.7866 320.514 cv
23.3115 319.844 23.0742 318.935 23.0742 317.786 cv
23.0742 316.881 23.2329 316.103 23.5508 315.451 cv
23.9805 314.565 24.6401 314.122 25.5303 314.122 cv
26.3335 314.122 26.9565 314.543 27.3999 315.388 cv
cp
f
.104332 lw
36.6733 465.613 mo
225.569 465.613 li
@
.312995 lw
219.218 463.208 mo
219.218 465.613 li
206.617 463.208 mo
206.617 465.613 li
194.019 460.804 mo
194.019 465.613 li
42.9214 463.208 mo
42.9214 465.613 li
55.5215 463.208 mo
55.5215 465.613 li
68.1211 460.804 mo
68.1211 465.613 li
194.019 460.804 mo
194.019 465.613 li
181.417 463.208 mo
181.417 465.613 li
168.921 463.208 mo
168.921 465.613 li
156.321 463.208 mo
156.321 465.613 li
143.722 463.208 mo
143.722 465.613 li
131.122 460.804 mo
131.122 465.613 li
118.521 463.208 mo
118.521 465.613 li
105.921 463.208 mo
105.921 465.613 li
93.3208 463.208 mo
93.3208 465.613 li
80.7212 463.208 mo
80.7212 465.613 li
68.1211 460.804 mo
68.1211 465.613 li
@
61.3882 475.91 mo
64.0381 475.91 li
64.0381 476.583 li
61.3882 476.583 li
61.3882 475.91 li
cp
f
67.7383 471.492 mo
67.7402 471.5 67.7407 471.52 67.7407 471.552 cv
67.7407 477.881 li
67.7407 478.152 67.813 478.323 67.9565 478.397 cv
68.1006 478.47 68.3691 478.514 68.7622 478.528 cv
68.7622 478.675 li
65.8032 478.675 li
65.8032 478.517 li
66.2256 478.497 66.5015 478.439 66.6309 478.344 cv
66.7598 478.25 66.8242 478.044 66.8242 477.729 cv
66.8242 472.861 li
66.8242 472.693 66.8032 472.565 66.7617 472.477 cv
66.7197 472.389 66.6289 472.345 66.4893 472.345 cv
66.3984 472.345 66.2808 472.372 66.1357 472.422 cv
65.9907 472.473 65.8555 472.526 65.73 472.583 cv
65.73 472.435 li
67.6519 471.452 li
67.7148 471.452 li
67.7285 471.469 67.7363 471.483 67.7383 471.492 cv
cp
f
73.5278 477.629 mo
73.7197 477.066 73.8159 476.25 73.8159 475.182 cv
73.8159 474.331 73.7583 473.652 73.6431 473.144 cv
73.4268 472.198 73.0215 471.725 72.4282 471.725 cv
71.8345 471.725 71.4277 472.212 71.208 473.186 cv
71.0928 473.704 71.0352 474.387 71.0352 475.235 cv
71.0352 476.03 71.0942 476.665 71.2129 477.141 cv
71.4365 478.031 71.8555 478.475 72.4702 478.475 cv
72.9834 478.475 73.3359 478.194 73.5278 477.629 cv
cp
74.3237 472.708 mo
74.6768 473.392 74.853 474.177 74.853 475.064 cv
74.853 475.761 74.7446 476.418 74.5283 477.035 cv
74.1196 478.195 73.4126 478.775 72.4072 478.775 cv
71.7192 478.775 71.1538 478.461 70.7104 477.834 cv
70.2354 477.165 69.998 476.255 69.998 475.106 cv
69.998 474.202 70.1567 473.423 70.4746 472.771 cv
70.9043 471.885 71.564 471.442 72.4541 471.442 cv
73.2573 471.442 73.8804 471.864 74.3237 472.708 cv
cp
f
95.7158 307.248 mo
95.6123 307.248 li
95.6123 307.56 li
95.5078 307.666 li
95.5078 308.292 li
95.6123 308.501 li
95.6123 308.919 li
95.7158 309.233 li
95.7158 309.442 li
95.8198 309.756 li
95.8198 310.069 li
95.9238 310.383 li
96.0293 310.697 li
96.1328 311.01 li
96.1328 311.325 li
96.2373 311.743 li
96.3408 312.161 li
96.5488 312.474 li
96.6528 312.892 li
96.7578 313.31 li
96.8623 313.833 li
97.0698 314.251 li
97.1738 314.669 li
97.3818 315.191 li
97.4858 315.714 li
97.6948 316.237 li
97.7988 316.759 li
98.0068 317.283 li
98.2148 317.804 li
98.4238 318.432 li
98.6318 318.955 li
98.8398 319.582 li
99.0488 320.209 li
99.2568 320.836 li
99.4648 321.463 li
99.6729 322.09 li
99.9858 322.717 li
100.194 323.345 li
100.506 324.077 li
100.715 324.705 li
101.027 325.435 li
101.235 326.167 li
101.548 326.899 li
101.86 327.63 li
102.068 328.363 li
102.381 329.094 li
102.693 329.827 li
103.006 330.557 li
103.318 331.394 li
103.63 332.125 li
103.943 332.961 li
104.255 333.798 li
104.567 334.53 li
104.88 335.367 li
105.192 336.203 li
105.609 337.039 li
105.921 337.875 li
106.234 338.711 li
106.65 339.653 li
106.963 340.489 li
107.379 341.325 li
107.692 342.161 li
108.108 343.101 li
108.42 343.937 li
108.837 344.878 li
109.253 345.714 li
109.566 346.656 li
109.982 347.596 li
110.399 348.432 li
110.711 349.374 li
111.128 350.314 li
111.544 351.254 li
111.961 352.091 li
112.377 353.032 li
112.794 353.972 li
113.106 354.914 li
113.523 355.854 li
113.939 356.795 li
114.356 357.735 li
114.772 358.676 li
115.189 359.618 li
115.606 360.558 li
116.022 361.5 li
116.438 362.439 li
116.855 363.276 li
117.272 364.217 li
117.688 365.158 li
118.105 366.098 li
118.521 367.04 li
118.938 367.979 li
119.458 368.92 li
119.875 369.862 li
120.292 370.802 li
120.708 371.638 li
121.124 372.58 li
121.541 373.52 li
121.958 374.46 li
122.374 375.296 li
122.791 376.239 li
123.207 377.075 li
123.624 378.015 li
124.04 378.851 li
124.457 379.792 li
124.873 380.628 li
125.29 381.464 li
125.706 382.406 li
126.123 383.242 li
126.54 384.078 li
126.956 384.914 li
127.372 385.75 li
127.685 386.586 li
128.101 387.422 li
128.519 388.155 li
128.935 388.991 li
129.351 389.828 li
129.663 390.558 li
130.08 391.395 li
130.497 392.126 li
130.809 392.858 li
131.226 393.589 li
131.538 394.426 li
131.954 395.053 li
132.371 395.786 li
132.683 396.517 li
132.995 397.249 li
133.412 397.876 li
133.724 398.607 li
134.037 399.235 li
134.454 399.862 li
134.766 400.49 li
135.078 401.117 li
135.391 401.744 li
135.703 402.371 li
136.015 402.998 li
136.328 403.52 li
136.64 404.147 li
136.952 404.67 li
137.265 405.193 li
137.577 405.715 li
137.89 406.239 li
138.098 406.761 li
138.411 407.178 li
138.723 407.702 li
138.931 408.121 li
139.244 408.539 li
139.452 409.06 li
139.764 409.479 li
139.972 409.792 li
140.181 410.21 li
140.39 410.628 li
140.597 410.942 li
140.806 411.256 li
141.014 411.569 li
141.222 411.882 li
141.431 412.197 li
141.638 412.51 li
141.847 412.719 li
142.055 412.927 li
142.159 413.243 li
142.368 413.451 li
142.472 413.661 li
142.68 413.764 li
142.784 413.973 li
142.888 414.079 li
143.097 414.288 li
143.201 414.392 li
143.305 414.496 li
143.409 414.496 li
143.513 414.601 li
143.617 414.706 li
143.929 414.706 li
144.034 414.601 li
144.138 414.496 li
144.138 413.243 li
144.034 413.034 li
144.034 412.616 li
143.929 412.301 li
143.826 411.988 li
143.826 411.674 li
143.721 411.36 li
143.617 411.047 li
143.513 410.733 li
143.513 410.314 li
143.409 410.001 li
143.201 409.583 li
143.097 409.166 li
142.993 408.747 li
142.888 408.33 li
142.784 407.912 li
142.576 407.388 li
142.472 406.97 li
142.263 406.448 li
142.159 405.924 li
141.952 405.403 li
141.743 404.879 li
141.535 404.356 li
141.431 403.834 li
141.222 403.208 li
141.014 402.684 li
140.806 402.057 li
140.493 401.429 li
140.285 400.803 li
140.077 400.175 li
139.869 399.548 li
139.556 398.816 li
139.348 398.189 li
139.14 397.562 li
138.827 396.831 li
138.619 396.099 li
138.306 395.368 li
137.994 394.635 li
137.786 393.903 li
137.473 393.172 li
137.161 392.44 li
136.849 391.708 li
136.536 390.873 li
136.224 390.14 li
135.911 389.304 li
135.599 388.573 li
135.286 387.737 li
134.974 386.9 li
134.662 386.063 li
134.245 385.227 li
133.933 384.391 li
133.62 383.555 li
133.204 382.719 li
132.892 381.882 li
132.475 381.045 li
132.163 380.105 li
131.746 379.269 li
131.434 378.329 li
131.017 377.493 li
130.705 376.551 li
130.288 375.715 li
129.872 374.774 li
129.559 373.938 li
129.144 372.998 li
128.726 372.056 li
128.31 371.116 li
127.997 370.28 li
127.581 369.338 li
127.164 368.398 li
126.748 367.458 li
126.331 366.516 li
125.915 365.576 li
125.498 364.635 li
125.081 363.694 li
124.665 362.753 li
124.249 361.812 li
123.832 360.872 li
123.415 359.931 li
122.999 359.094 li
122.583 358.155 li
122.166 357.213 li
121.749 356.272 li
121.333 355.332 li
120.916 354.39 li
120.5 353.451 li
120.083 352.509 li
119.667 351.568 li
119.25 350.732 li
118.834 349.792 li
118.417 348.85 li
118.001 347.911 li
117.584 347.074 li
117.063 346.133 li
116.647 345.192 li
116.23 344.356 li
115.814 343.416 li
115.397 342.579 li
114.981 341.743 li
114.564 340.801 li
114.148 339.965 li
113.835 339.129 li
113.419 338.293 li
113.002 337.457 li
112.586 336.621 li
112.169 335.785 li
111.752 334.949 li
111.336 334.112 li
111.024 333.275 li
110.607 332.544 li
110.191 331.708 li
109.774 330.976 li
109.462 330.139 li
109.045 329.409 li
108.629 328.676 li
108.316 327.944 li
107.9 327.212 li
107.587 326.481 li
107.171 325.75 li
106.858 325.017 li
106.442 324.286 li
106.129 323.659 li
105.817 323.032 li
105.401 322.299 li
105.088 321.672 li
104.776 321.045 li
104.463 320.418 li
104.151 319.791 li
103.735 319.268 li
103.422 318.641 li
103.11 318.119 li
102.901 317.492 li
102.589 316.968 li
102.277 316.446 li
101.964 315.923 li
101.652 315.4 li
101.444 314.877 li
101.131 314.46 li
100.819 313.937 li
100.61 313.519 li
100.402 313.101 li
100.09 312.683 li
99.8809 312.264 li
99.5688 311.846 li
99.3608 311.534 li
99.1519 311.116 li
98.9438 310.801 li
98.7358 310.488 li
98.5278 310.174 li
98.3198 309.86 li
98.1108 309.547 li
97.9028 309.338 li
97.7988 309.024 li
97.5908 308.815 li
97.3818 308.606 li
97.2778 308.397 li
97.0698 308.188 li
96.9658 307.979 li
96.8623 307.875 li
96.6528 307.77 li
96.5488 307.56 li
96.4448 307.457 li
96.3408 307.351 li
96.2373 307.351 li
96.1328 307.248 li
96.0293 307.248 li
95.9238 307.142 li
95.8198 307.142 li
95.7158 307.248 li
.8 0 1 0 cmyk
ef
104.984 327.84 mo
104.88 327.944 li
104.88 328.885 li
104.984 329.094 li
104.984 329.409 li
105.088 329.618 li
105.088 329.721 li
105.192 329.93 li
105.192 330.139 li
105.296 330.348 li
105.296 330.663 li
105.401 330.872 li
105.505 331.081 li
105.505 331.394 li
105.609 331.603 li
105.713 331.917 li
105.817 332.125 li
105.921 332.439 li
105.921 332.753 li
106.025 333.066 li
106.129 333.38 li
106.234 333.693 li
106.442 334.007 li
106.546 334.425 li
106.65 334.739 li
106.754 335.052 li
106.858 335.47 li
107.067 335.785 li
107.171 336.203 li
107.275 336.621 li
107.483 336.934 li
107.587 337.352 li
107.692 337.77 li
107.9 338.188 li
108.108 338.606 li
108.212 339.024 li
108.42 339.547 li
108.524 339.965 li
108.733 340.383 li
108.941 340.801 li
109.045 341.325 li
109.253 341.743 li
109.462 342.265 li
109.67 342.683 li
109.878 343.207 li
109.982 343.728 li
110.191 344.146 li
110.399 344.669 li
110.607 345.192 li
110.815 345.714 li
111.024 346.238 li
111.232 346.76 li
111.44 347.283 li
111.649 347.805 li
111.961 348.328 li
112.169 348.85 li
112.377 349.374 li
112.586 349.895 li
112.794 350.523 li
113.002 351.045 li
113.315 351.568 li
113.523 352.091 li
113.731 352.718 li
114.044 353.242 li
114.252 353.869 li
114.46 354.39 li
114.772 354.914 li
114.981 355.541 li
115.189 356.063 li
115.501 356.69 li
115.71 357.213 li
116.022 357.84 li
116.23 358.364 li
116.438 358.991 li
116.751 359.513 li
116.959 360.14 li
117.272 360.663 li
117.48 361.291 li
117.792 361.812 li
118.001 362.439 li
118.313 362.962 li
118.521 363.589 li
118.834 364.113 li
119.042 364.74 li
119.354 365.262 li
119.563 365.889 li
119.875 366.412 li
120.083 367.04 li
120.396 367.561 li
120.604 368.084 li
120.916 368.711 li
121.124 369.234 li
121.438 369.756 li
121.646 370.384 li
121.958 370.907 li
122.166 371.429 li
122.479 372.056 li
122.687 372.58 li
122.896 373.102 li
123.207 373.625 li
123.415 374.147 li
123.729 374.67 li
123.937 375.192 li
124.249 375.715 li
124.457 376.239 li
124.665 376.76 li
124.978 377.284 li
125.187 377.702 li
125.394 378.224 li
125.706 378.747 li
125.915 379.269 li
126.123 379.687 li
126.435 380.21 li
126.644 380.628 li
126.853 381.045 li
127.06 381.568 li
127.269 381.988 li
127.581 382.406 li
127.789 382.927 li
127.997 383.345 li
128.206 383.764 li
128.414 384.181 li
128.622 384.6 li
128.83 384.914 li
129.038 385.333 li
129.247 385.75 li
129.455 386.063 li
129.663 386.481 li
129.872 386.9 li
130.08 387.213 li
130.184 387.528 li
130.392 387.946 li
130.601 388.259 li
130.809 388.573 li
130.913 388.885 li
131.121 389.2 li
131.329 389.513 li
131.434 389.722 li
131.642 390.037 li
131.746 390.349 li
131.954 390.558 li
132.058 390.873 li
132.267 391.082 li
132.371 391.291 li
132.475 391.5 li
132.683 391.708 li
132.787 391.917 li
132.892 392.126 li
133.1 392.335 li
133.204 392.544 li
133.308 392.649 li
133.412 392.858 li
133.516 392.963 li
133.62 393.172 li
133.724 393.276 li
133.829 393.381 li
133.933 393.485 li
134.037 393.589 li
134.037 393.694 li
134.141 393.799 li
134.245 393.903 li
134.349 393.903 li
134.349 394.008 li
134.454 394.008 li
134.558 394.113 li
134.662 394.113 li
134.766 394.008 li
134.766 393.799 li
134.87 393.799 li
134.87 393.485 li
134.766 393.381 li
134.766 392.754 li
134.662 392.649 li
134.662 392.231 li
134.558 392.021 li
134.558 391.813 li
134.454 391.604 li
134.454 391.395 li
134.349 391.185 li
134.245 390.976 li
134.245 390.664 li
134.141 390.454 li
134.037 390.14 li
133.933 389.931 li
133.829 389.618 li
133.724 389.304 li
133.62 388.991 li
133.62 388.677 li
133.412 388.364 li
133.308 388.049 li
133.204 387.737 li
133.1 387.317 li
132.995 387.004 li
132.892 386.691 li
132.787 386.272 li
132.579 385.854 li
132.475 385.542 li
132.371 385.124 li
132.163 384.705 li
132.058 384.287 li
131.85 383.869 li
131.746 383.451 li
131.538 383.033 li
131.434 382.614 li
131.226 382.197 li
131.017 381.778 li
130.913 381.255 li
130.705 380.837 li
130.497 380.419 li
130.288 379.896 li
130.184 379.375 li
129.976 378.956 li
129.767 378.432 li
129.559 377.911 li
129.351 377.493 li
129.144 376.969 li
128.935 376.448 li
128.726 375.924 li
128.519 375.401 li
128.31 374.879 li
128.101 374.356 li
127.894 373.833 li
127.685 373.311 li
127.478 372.789 li
127.164 372.265 li
126.956 371.744 li
126.748 371.116 li
126.54 370.593 li
126.331 370.071 li
126.019 369.443 li
125.81 368.92 li
125.603 368.398 li
125.29 367.77 li
125.081 367.249 li
124.873 366.621 li
124.562 366.098 li
124.353 365.576 li
124.144 364.949 li
123.832 364.426 li
123.624 363.798 li
123.312 363.276 li
123.104 362.649 li
122.791 362.126 li
122.583 361.5 li
122.271 360.976 li
122.063 360.349 li
121.854 359.827 li
121.541 359.2 li
121.333 358.676 li
121.021 358.049 li
120.813 357.526 li
120.5 356.899 li
120.292 356.377 li
119.979 355.75 li
119.771 355.227 li
119.458 354.599 li
119.25 354.078 li
118.938 353.451 li
118.729 352.927 li
118.417 352.405 li
118.209 351.778 li
117.896 351.254 li
117.688 350.732 li
117.376 350.209 li
117.167 349.583 li
116.855 349.06 li
116.647 348.538 li
116.335 348.014 li
116.126 347.493 li
115.814 346.969 li
115.606 346.447 li
115.397 345.924 li
115.085 345.401 li
114.877 344.878 li
114.668 344.356 li
114.356 343.937 li
114.148 343.416 li
113.939 342.892 li
113.627 342.474 li
113.419 341.952 li
113.21 341.534 li
113.002 341.01 li
112.69 340.592 li
112.481 340.174 li
112.273 339.653 li
112.065 339.233 li
111.857 338.815 li
111.649 338.397 li
111.336 337.979 li
111.128 337.561 li
110.92 337.143 li
110.711 336.725 li
110.503 336.412 li
110.295 335.994 li
110.191 335.576 li
109.982 335.261 li
109.774 334.843 li
109.566 334.53 li
109.358 334.216 li
109.149 333.798 li
109.045 333.484 li
108.837 333.17 li
108.629 332.857 li
108.524 332.544 li
108.316 332.335 li
108.108 332.021 li
108.004 331.708 li
107.795 331.499 li
107.692 331.185 li
107.483 330.976 li
107.379 330.663 li
107.275 330.454 li
107.067 330.245 li
106.963 330.036 li
106.858 329.827 li
106.754 329.618 li
106.546 329.512 li
106.442 329.303 li
106.338 329.094 li
106.234 328.99 li
106.129 328.781 li
106.025 328.676 li
105.921 328.572 li
105.817 328.467 li
105.713 328.363 li
105.609 328.258 li
105.609 328.153 li
105.505 328.049 li
105.401 328.049 li
105.401 327.944 li
105.296 327.944 li
105.192 327.84 li
104.984 327.84 li
0 0 1 .05 cmyk
ef
94.1841 495.939 mo
101.521 495.939 li
98.0659 487.578 li
94.1841 495.939 li
cp
103.729 496.815 mo
93.0088 496.815 li
98.707 484.522 li
103.729 496.815 li
cp
.75021 .679683 .670222 .90164 cmyk
f
104.004 496.483 mo
104.74 496.408 105.212 496.241 105.421 495.982 cv
105.629 495.723 105.734 495.123 105.734 494.181 cv
105.734 486.925 li
105.734 486.28 105.632 485.86 105.43 485.665 cv
105.227 485.47 104.766 485.355 104.047 485.32 cv
104.047 484.989 li
107.558 484.989 li
111.647 493.892 li
115.637 484.989 li
119.176 484.989 li
119.176 485.32 li
118.515 485.367 118.089 485.488 117.897 485.682 cv
117.706 485.876 117.61 486.292 117.61 486.925 cv
117.61 494.87 li
117.61 495.521 117.706 495.938 117.897 496.122 cv
118.089 496.304 118.515 496.425 119.176 496.483 cv
119.176 496.815 li
114.193 496.815 li
114.193 496.483 li
114.912 496.425 115.36 496.295 115.537 496.095 cv
115.714 495.895 115.803 495.417 115.803 494.661 cv
115.803 486.637 li
111.242 496.815 li
110.999 496.815 li
106.517 487.056 li
106.517 494.181 li
106.517 495.158 106.658 495.794 106.942 496.09 cv
107.128 496.283 107.542 496.414 108.186 496.483 cv
108.186 496.815 li
104.004 496.815 li
104.004 496.483 li
cp
f
123.33 488.946 mo
123.925 488.195 124.626 487.591 125.434 487.134 cv
125.566 487.365 li
124.818 487.961 124.284 488.542 123.964 489.106 cv
123.402 490.09 123.121 491.4 123.121 493.036 cv
123.121 494.249 123.229 495.249 123.441 496.036 cv
123.818 497.416 124.526 498.449 125.566 499.133 cv
125.385 499.365 li
124.814 499.089 124.196 498.55 123.532 497.749 cv
122.432 496.42 121.882 494.91 121.882 493.218 cv
121.882 491.595 122.364 490.171 123.33 488.946 cv
cp
f
130.23 487.256 mo
130.232 487.268 130.233 487.295 130.233 487.337 cv
130.233 495.756 li
130.233 496.115 130.329 496.343 130.521 496.441 cv
130.712 496.54 131.069 496.597 131.592 496.617 cv
131.592 496.812 li
127.656 496.812 li
127.656 496.602 li
128.218 496.575 128.585 496.498 128.757 496.372 cv
128.929 496.246 129.015 495.973 129.015 495.553 cv
129.015 489.079 li
129.015 488.854 128.986 488.684 128.931 488.568 cv
128.875 488.452 128.755 488.393 128.569 488.393 cv
128.448 488.393 128.291 488.427 128.099 488.495 cv
127.906 488.562 127.726 488.633 127.559 488.708 cv
127.559 488.512 li
130.115 487.205 li
130.199 487.205 li
130.218 487.228 130.228 487.245 130.23 487.256 cv
cp
f
137.931 495.421 mo
138.187 494.671 138.313 493.586 138.313 492.166 cv
138.313 491.034 138.237 490.129 138.084 489.455 cv
137.796 488.197 137.258 487.568 136.468 487.568 cv
135.679 487.568 135.138 488.215 134.845 489.51 cv
134.691 490.2 134.615 491.108 134.615 492.235 cv
134.615 493.292 134.694 494.138 134.852 494.772 cv
135.149 495.955 135.706 496.546 136.523 496.546 cv
137.206 496.546 137.676 496.171 137.931 495.421 cv
cp
138.989 488.875 mo
139.459 489.785 139.693 490.829 139.693 492.008 cv
139.693 492.936 139.549 493.81 139.261 494.63 cv
138.718 496.173 137.777 496.945 136.44 496.945 cv
135.525 496.945 134.772 496.528 134.183 495.693 cv
133.552 494.803 133.235 493.593 133.235 492.064 cv
133.235 490.861 133.447 489.827 133.87 488.959 cv
134.44 487.78 135.318 487.19 136.503 487.19 cv
137.571 487.19 138.399 487.752 138.989 488.875 cv
cp
f
140.638 487.025 mo
143.107 487.025 li
143.107 487.652 li
140.638 487.652 li
140.638 487.025 li
cp
f
146.556 482.907 mo
146.558 482.915 146.559 482.933 146.559 482.962 cv
146.559 488.862 li
146.559 489.114 146.626 489.274 146.76 489.342 cv
146.894 489.411 147.144 489.452 147.511 489.465 cv
147.511 489.602 li
144.753 489.602 li
144.753 489.455 li
145.146 489.435 145.403 489.381 145.523 489.293 cv
145.645 489.206 145.704 489.014 145.704 488.72 cv
145.704 484.183 li
145.704 484.026 145.685 483.907 145.646 483.825 cv
145.606 483.744 145.522 483.703 145.392 483.703 cv
145.308 483.703 145.197 483.726 145.063 483.774 cv
144.928 483.821 144.802 483.871 144.685 483.923 cv
144.685 483.786 li
146.476 482.87 li
146.534 482.87 li
146.547 482.886 146.555 482.898 146.556 482.907 cv
cp
f
151.786 485.15 mo
151.987 484.899 152.089 484.595 152.089 484.24 cv
152.089 483.93 151.993 483.667 151.803 483.45 cv
151.612 483.233 151.324 483.125 150.937 483.125 cv
150.638 483.125 150.39 483.219 150.194 483.408 cv
150 483.597 149.902 483.828 149.902 484.098 cv
149.902 484.405 150.017 484.689 150.246 484.952 cv
150.476 485.214 150.777 485.461 151.151 485.693 cv
151.457 485.478 151.669 485.296 151.786 485.15 cv
cp
151.938 489.118 mo
152.129 488.909 152.226 488.648 152.226 488.334 cv
152.226 487.979 152.124 487.691 151.92 487.471 cv
151.717 487.251 151.3 486.917 150.668 486.471 cv
150.389 486.647 150.185 486.875 150.058 487.156 cv
149.932 487.436 149.868 487.707 149.868 487.968 cv
149.868 488.415 149.982 488.77 150.212 489.035 cv
150.441 489.298 150.733 489.43 151.088 489.43 cv
151.462 489.43 151.745 489.327 151.938 489.118 cv
cp
149.521 485.432 mo
149.28 485.119 149.16 484.772 149.16 484.393 cv
149.16 483.962 149.338 483.596 149.694 483.295 cv
150.051 482.996 150.514 482.845 151.083 482.845 cv
151.607 482.845 152.023 482.987 152.333 483.271 cv
152.642 483.556 152.797 483.885 152.797 484.261 cv
152.797 484.644 152.639 484.987 152.323 485.291 cv
152.141 485.463 151.847 485.664 151.439 485.888 cv
151.992 486.3 152.389 486.659 152.628 486.964 cv
152.867 487.269 152.987 487.629 152.987 488.044 cv
152.987 488.514 152.811 488.91 152.457 489.23 cv
152.104 489.55 151.632 489.709 151.039 489.709 cv
150.509 489.709 150.054 489.562 149.675 489.266 cv
149.296 488.971 149.106 488.582 149.106 488.098 cv
149.106 487.683 149.238 487.317 149.502 487 cv
149.674 486.794 149.974 486.547 150.399 486.26 cv
149.971 485.915 149.678 485.638 149.521 485.432 cv
cp
f
164.05 487.4 mo
164.584 487.554 164.891 487.63 164.97 487.63 cv
165.174 487.63 165.318 487.591 165.404 487.512 cv
165.49 487.433 165.563 487.319 165.624 487.169 cv
165.938 487.169 li
166.049 490.183 li
165.722 490.183 li
165.429 489.489 165.127 488.971 164.816 488.63 cv
164.254 488.034 163.522 487.736 162.622 487.736 cv
161.707 487.736 160.902 488.084 160.208 488.781 cv
159.514 489.478 159.167 490.626 159.167 492.225 cv
159.167 493.544 159.513 494.575 160.205 495.316 cv
160.896 496.057 161.751 496.427 162.769 496.427 cv
162.939 496.427 163.142 496.412 163.374 496.378 cv
163.606 496.346 163.827 496.294 164.036 496.225 cv
164.375 496.114 164.586 496.017 164.67 495.936 cv
164.753 495.854 164.795 495.735 164.795 495.577 cv
164.795 493.294 li
164.795 492.742 164.718 492.397 164.562 492.261 cv
164.406 492.125 164.066 492.041 163.541 492.008 cv
163.541 491.743 li
167.178 491.743 li
167.178 492.008 li
166.824 492.032 166.59 492.089 166.474 492.183 cv
166.279 492.333 166.182 492.64 166.182 493.106 cv
166.182 495.924 li
166.182 496.091 165.771 496.316 164.952 496.595 cv
164.132 496.875 163.344 497.015 162.587 497.015 cv
161.193 497.015 160.019 496.607 159.063 495.792 cv
158.008 494.891 157.481 493.684 157.481 492.168 cv
157.481 490.835 157.901 489.694 158.742 488.743 cv
159.666 487.694 160.892 487.169 162.42 487.169 cv
162.973 487.169 163.516 487.247 164.05 487.4 cv
cp
f
169.094 491.469 mo
168.944 491.721 168.838 492.039 168.772 492.42 cv
171.713 492.42 li
171.661 491.955 171.573 491.607 171.448 491.378 cv
171.22 490.968 170.839 490.763 170.306 490.763 cv
169.776 490.763 169.372 490.999 169.094 491.469 cv
cp
172.43 490.935 mo
172.922 491.389 173.168 492.034 173.168 492.869 cv
168.745 492.869 li
168.791 493.948 169.035 494.734 169.477 495.226 cv
169.918 495.719 170.44 495.966 171.044 495.966 cv
171.531 495.966 171.942 495.838 172.276 495.583 cv
172.611 495.327 172.92 494.963 173.203 494.494 cv
173.447 494.578 li
173.257 495.17 172.9 495.719 172.378 496.223 cv
171.855 496.728 171.216 496.98 170.459 496.98 cv
169.586 496.98 168.911 496.649 168.435 495.987 cv
167.959 495.325 167.721 494.563 167.721 493.701 cv
167.721 492.763 167.997 491.955 168.55 491.274 cv
169.103 490.593 169.822 490.253 170.709 490.253 cv
171.364 490.253 171.938 490.48 172.43 490.935 cv
cp
f
177.801 487.337 mo
177.801 487.582 li
177.444 487.586 177.2 487.61 177.071 487.653 cv
176.844 487.729 176.729 487.882 176.729 488.115 cv
176.729 488.233 176.771 488.399 176.852 488.612 cv
176.933 488.825 177.084 489.178 177.306 489.672 cv
179.539 494.659 li
181.565 489.261 li
181.655 489.023 181.724 488.821 181.77 488.655 cv
181.816 488.489 181.839 488.354 181.839 488.25 cv
181.839 487.97 181.721 487.781 181.484 487.681 cv
181.346 487.625 181.116 487.591 180.796 487.582 cv
180.796 487.337 li
183.714 487.337 li
183.714 487.582 li
183.412 487.624 183.189 487.706 183.046 487.827 cv
182.827 488.008 182.611 488.375 182.397 488.924 cv
179.238 496.98 li
179.023 496.98 li
175.498 489.109 li
175.2 488.441 174.963 488.026 174.784 487.862 cv
174.605 487.699 174.344 487.605 174 487.582 cv
174 487.337 li
177.801 487.337 li
cp
f
187.866 495.259 mo
187.686 495.879 187.421 496.464 187.072 497.015 cv
186.706 497.602 186.216 498.15 185.603 498.658 cv
185.198 498.994 184.859 499.229 184.586 499.365 cv
184.453 499.133 li
185.168 498.588 185.69 498.031 186.021 497.462 cv
186.605 496.456 186.898 495.125 186.898 493.469 cv
186.898 492.131 186.764 491.039 186.494 490.19 cv
186.118 488.992 185.438 488.05 184.453 487.365 cv
184.635 487.134 li
185.368 487.544 186.051 488.165 186.683 488.995 cv
187.653 490.272 188.139 491.703 188.139 493.288 cv
188.139 493.982 188.048 494.64 187.866 495.259 cv
cp
f
14.2241 416.046 mo
14.2241 408.685 li
5.89014 412.151 li
14.2241 416.046 li
cp
15.0962 406.469 mo
15.0962 417.225 li
2.84521 411.508 li
15.0962 406.469 li
cp
f
3.11182 405.965 mo
3.11182 395.816 li
5.99658 395.512 li
5.99658 395.958 li
5.30225 396.047 4.75049 396.102 4.27002 396.995 cv
4.07373 397.352 3.91357 397.871 3.91357 398.872 cv
3.91357 402.301 li
13.6362 402.301 li
14.6157 402.301 14.7759 401.676 14.7759 400.694 cv
15.0962 400.694 li
15.0962 405.768 li
14.7759 405.768 li
14.7759 404.786 14.6157 404.161 13.6362 404.161 cv
5.24854 404.161 li
3.39697 404.161 3.48584 405.608 3.46826 405.965 cv
3.11182 405.965 li
cp
f
7.25635 392.431 mo
6.50928 391.834 5.90771 391.13 5.45264 390.319 cv
5.68213 390.186 li
6.27686 390.937 6.85498 391.473 7.4165 391.795 cv
8.39697 392.359 9.70166 392.641 11.3315 392.641 cv
12.5396 392.641 13.5356 392.534 14.3198 392.319 cv
15.6948 391.942 16.7231 391.231 17.4058 390.186 cv
17.6362 390.369 li
17.3618 390.942 16.8257 391.562 16.0269 392.229 cv
14.7036 393.333 13.1987 393.885 11.5132 393.885 cv
9.89697 393.885 8.47803 393.401 7.25635 392.431 cv
cp
f
5.57471 385.504 mo
5.58643 385.502 5.61279 385.501 5.65479 385.501 cv
14.0415 385.501 li
14.3989 385.501 14.6265 385.405 14.7241 385.213 cv
14.8218 385.022 14.8794 384.663 14.8979 384.137 cv
15.0933 384.137 li
15.0933 388.088 li
14.8843 388.088 li
14.856 387.525 14.7798 387.157 14.6548 386.984 cv
14.5288 386.811 14.2573 386.725 13.8394 386.725 cv
7.38916 386.725 li
7.1665 386.725 6.99658 386.752 6.88037 386.809 cv
6.76416 386.866 6.70654 386.987 6.70654 387.172 cv
6.70654 387.293 6.73975 387.452 6.80713 387.645 cv
6.87451 387.838 6.9458 388.018 7.02002 388.186 cv
6.82471 388.186 li
5.52197 385.62 li
5.52197 385.537 li
5.54541 385.518 5.56299 385.507 5.57471 385.504 cv
cp
f
13.7075 377.775 mo
12.9604 377.518 11.8794 377.39 10.4644 377.39 cv
9.33643 377.39 8.43701 377.467 7.76416 377.622 cv
6.51123 377.911 5.88428 378.451 5.88428 379.243 cv
5.88428 380.036 6.52979 380.579 7.81982 380.873 cv
8.50635 381.026 9.41064 381.104 10.5337 381.104 cv
11.5874 381.104 12.4292 381.024 13.061 380.866 cv
14.2397 380.567 14.8286 380.008 14.8286 379.188 cv
14.8286 378.502 14.4546 378.032 13.7075 377.775 cv
cp
7.18701 376.711 mo
8.09229 376.241 9.1333 376.006 10.3081 376.006 cv
11.2319 376.006 12.103 376.151 12.9194 376.44 cv
14.4575 376.985 15.2261 377.928 15.2261 379.272 cv
15.2261 380.19 14.8101 380.945 13.979 381.538 cv
13.0913 382.17 11.8862 382.488 10.3638 382.488 cv
9.16553 382.488 8.13428 382.276 7.271 381.852 cv
6.09619 381.278 5.5083 380.397 5.5083 379.208 cv
5.5083 378.136 6.06787 377.304 7.18701 376.711 cv
cp
f
5.33984 375.062 mo
5.33984 372.583 li
5.96484 372.583 li
5.96484 375.062 li
5.33984 375.062 li
cp
f
1.2373 369.122 mo
1.24512 369.12 1.26367 369.119 1.29297 369.119 cv
7.16992 369.119 li
7.4209 369.119 7.58008 369.051 7.64844 368.917 cv
7.7168 368.782 7.75781 368.531 7.77051 368.163 cv
7.90723 368.163 li
7.90723 370.932 li
7.76074 370.932 li
7.74121 370.536 7.6875 370.278 7.59961 370.157 cv
7.51172 370.037 7.32129 369.976 7.02832 369.976 cv
2.50879 369.976 li
2.35254 369.976 2.2334 369.996 2.15234 370.035 cv
2.07129 370.074 2.03027 370.159 2.03027 370.29 cv
2.03027 370.375 2.05371 370.485 2.10059 370.62 cv
2.14844 370.756 2.19824 370.882 2.25 371 cv
2.11328 371 li
1.2002 369.202 li
1.2002 369.143 li
1.2168 369.129 1.22852 369.123 1.2373 369.122 cv
cp
f
7.4248 363.719 mo
7.2168 363.526 6.95703 363.43 6.64453 363.43 cv
6.29102 363.43 6.00391 363.532 5.78418 363.736 cv
5.56543 363.94 5.2334 364.359 4.78809 364.993 cv
4.96289 365.274 5.19043 365.477 5.46973 365.605 cv
5.75 365.733 6.01953 365.796 6.2793 365.796 cv
6.72461 365.796 7.07813 365.681 7.3418 365.451 cv
7.60449 365.221 7.73633 364.927 7.73633 364.571 cv
7.73633 364.196 7.63281 363.912 7.4248 363.719 cv
cp
3.47168 363.871 mo
3.22168 363.668 2.91992 363.567 2.56543 363.567 cv
2.25684 363.567 1.99414 363.663 1.77832 363.854 cv
1.5625 364.044 1.4541 364.334 1.4541 364.723 cv
1.4541 365.024 1.54883 365.272 1.7373 365.467 cv
1.92578 365.665 2.1543 365.762 2.42383 365.762 cv
2.72949 365.762 3.0127 365.647 3.27441 365.417 cv
3.53613 365.186 3.78223 364.883 4.0127 364.508 cv
3.79883 364.201 3.61816 363.989 3.47168 363.871 cv
cp
3.75293 366.144 mo
3.44141 366.385 3.0957 366.506 2.71875 366.506 cv
2.28906 366.506 1.9248 366.329 1.625 365.97 cv
1.32617 365.612 1.17578 365.148 1.17578 364.577 cv
1.17578 364.05 1.31738 363.632 1.60059 363.322 cv
1.88379 363.012 2.21289 362.856 2.58691 362.856 cv
2.96777 362.856 3.30957 363.014 3.6123 363.332 cv
3.78516 363.514 3.9834 363.81 4.20801 364.218 cv
4.61816 363.663 4.97461 363.266 5.2793 363.026 cv
5.58301 362.786 5.94238 362.665 6.35547 362.665 cv
6.82422 362.665 7.21777 362.842 7.53613 363.197 cv
7.85547 363.551 8.01465 364.026 8.01465 364.62 cv
8.01465 365.153 7.86719 365.61 7.57324 365.99 cv
7.27832 366.371 6.89063 366.561 6.40918 366.561 cv
5.99512 366.561 5.63086 366.428 5.31543 366.164 cv
5.11035 365.991 4.86426 365.69 4.57813 365.262 cv
4.2334 365.694 3.95801 365.987 3.75293 366.144 cv
cp
f
5.7168 351.557 mo
5.87012 351.022 5.94629 350.713 5.94629 350.634 cv
5.94629 350.429 5.90723 350.284 5.82813 350.198 cv
5.74902 350.112 5.63574 350.038 5.4873 349.977 cv
5.4873 349.663 li
8.48926 349.551 li
8.48926 349.879 li
7.79688 350.172 7.28223 350.476 6.94238 350.789 cv
6.34863 351.352 6.05078 352.086 6.05078 352.991 cv
6.05078 353.91 6.39844 354.717 7.09277 355.415 cv
7.78711 356.111 8.93066 356.459 10.5234 356.459 cv
11.8379 356.459 12.8633 356.112 13.6025 355.417 cv
14.3408 354.723 14.71 353.866 14.71 352.844 cv
14.71 352.672 14.6934 352.469 14.6611 352.236 cv
14.6289 352.002 14.5771 351.782 14.5078 351.571 cv
14.3965 351.231 14.3008 351.019 14.2197 350.935 cv
14.1387 350.851 14.0195 350.809 13.8613 350.809 cv
11.5889 350.809 li
11.0381 350.809 10.6943 350.887 10.5596 351.043 cv
10.4238 351.2 10.3398 351.542 10.3076 352.068 cv
10.043 352.068 li
10.043 348.418 li
10.3076 348.418 li
10.3301 348.772 10.3887 349.008 10.4814 349.124 cv
10.6299 349.32 10.9365 349.418 11.4004 349.418 cv
14.208 349.418 li
14.375 349.418 14.5986 349.829 14.877 350.652 cv
15.1553 351.475 15.2949 352.266 15.2949 353.026 cv
15.2949 354.424 14.8887 355.604 14.0762 356.564 cv
13.1797 357.623 11.9766 358.151 10.4678 358.151 cv
9.13965 358.151 8.00195 357.729 7.05371 356.885 cv
6.00977 355.958 5.4873 354.727 5.4873 353.194 cv
5.4873 352.639 5.56348 352.094 5.7168 351.557 cv
cp
f
9.77051 346.495 mo
10.0215 346.644 10.3379 346.75 10.7178 346.817 cv
10.7178 343.866 li
10.2539 343.917 9.9082 344.005 9.68066 344.131 cv
9.27148 344.36 9.06738 344.742 9.06738 345.278 cv
9.06738 345.809 9.30176 346.215 9.77051 346.495 cv
cp
9.23828 343.145 mo
9.69043 342.651 10.333 342.404 11.1641 342.404 cv
11.1641 346.844 li
12.2393 346.797 13.0225 346.553 13.5137 346.11 cv
14.0039 345.667 14.25 345.143 14.25 344.537 cv
14.25 344.047 14.1221 343.635 13.8672 343.299 cv
13.6133 342.963 13.251 342.653 12.7832 342.37 cv
12.8672 342.125 li
13.458 342.315 14.0039 342.673 14.5068 343.198 cv
15.0088 343.722 15.2598 344.364 15.2598 345.124 cv
15.2598 346 14.9307 346.678 14.2705 347.155 cv
13.6113 347.633 12.8525 347.872 11.9932 347.872 cv
11.0596 347.872 10.2539 347.594 9.57617 347.04 cv
8.89746 346.485 8.55859 345.762 8.55859 344.873 cv
8.55859 344.215 8.78516 343.639 9.23828 343.145 cv
cp
f
5.6543 337.754 mo
5.89746 337.754 li
5.90234 338.112 5.92578 338.356 5.96875 338.487 cv
6.04395 338.715 6.19727 338.829 6.42871 338.829 cv
6.54688 338.829 6.71191 338.789 6.92383 338.708 cv
7.13574 338.625 7.48828 338.473 7.98047 338.251 cv
12.9473 336.01 li
7.57129 333.975 li
7.33301 333.885 7.13184 333.817 6.9668 333.77 cv
6.80176 333.723 6.66699 333.7 6.56348 333.7 cv
6.28516 333.7 6.0957 333.819 5.99707 334.056 cv
5.94043 334.196 5.90723 334.426 5.89746 334.748 cv
5.6543 334.748 li
5.6543 331.818 li
5.89746 331.818 li
5.93945 332.122 6.02051 332.344 6.1416 332.489 cv
6.32324 332.708 6.6875 332.925 7.23535 333.139 cv
15.2598 336.311 li
15.2598 336.526 li
7.41895 340.066 li
6.75391 340.364 6.33984 340.603 6.17676 340.783 cv
6.01367 340.961 5.9209 341.224 5.89746 341.569 cv
5.6543 341.569 li
5.6543 337.754 li
cp
f
13.5459 327.651 mo
14.1641 327.833 14.7471 328.098 15.2949 328.448 cv
15.8799 328.815 16.4258 329.307 16.9316 329.922 cv
17.2666 330.329 17.501 330.668 17.6357 330.944 cv
17.4053 331.077 li
16.8623 330.359 16.3066 329.834 15.7402 329.503 cv
14.7373 328.917 13.4121 328.622 11.7627 328.622 cv
10.4307 328.622 9.3418 328.757 8.49609 329.028 cv
7.30273 329.405 6.36426 330.088 5.68164 331.077 cv
5.45215 330.895 li
5.86035 330.159 6.47852 329.473 7.30469 328.838 cv
8.57715 327.865 10.0029 327.377 11.582 327.377 cv
12.2744 327.377 12.9287 327.468 13.5459 327.651 cv
cp
f
149.969 284.25 mo
159.445 284.25 li
159.445 274.215 li
149.969 274.215 li
149.969 284.25 li
cp
.8 0 1 0 cmyk
ef
169.05 279.462 mo
169.345 279.307 169.513 279.176 169.554 279.07 cv
169.57 279.029 169.584 278.877 169.597 278.614 cv
169.608 278.351 169.615 278.137 169.615 277.974 cv
169.615 277.125 169.473 276.435 169.187 275.904 cv
168.901 275.373 168.484 275.107 167.934 275.107 cv
167.534 275.107 167.211 275.289 166.965 275.652 cv
166.718 276.016 166.595 276.559 166.595 277.282 cv
166.595 277.878 166.71 278.429 166.94 278.936 cv
167.171 279.442 167.587 279.695 168.19 279.695 cv
168.468 279.695 168.754 279.618 169.05 279.462 cv
cp
170.091 275.833 mo
170.579 276.55 170.823 277.349 170.823 278.231 cv
170.823 278.852 170.707 279.483 170.476 280.124 cv
170.243 280.765 169.905 281.336 169.463 281.839 cv
168.946 282.418 168.291 282.849 167.498 283.131 cv
167.055 283.291 166.495 283.413 165.819 283.499 cv
165.759 283.253 li
166.183 283.156 166.535 283.051 166.816 282.941 cv
167.321 282.741 167.727 282.496 168.032 282.206 cv
168.464 281.794 168.81 281.333 169.068 280.825 cv
169.327 280.317 169.488 279.891 169.554 279.548 cv
169.34 279.706 li
169.038 279.933 168.685 280.088 168.276 280.173 cv
168.064 280.222 167.871 280.246 167.696 280.246 cv
167.004 280.246 166.455 280 166.05 279.509 cv
165.645 279.018 165.441 278.431 165.441 277.75 cv
165.441 276.881 165.683 276.166 166.165 275.603 cv
166.646 275.04 167.264 274.758 168.017 274.758 cv
168.911 274.758 169.603 275.117 170.091 275.833 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
173.165 282.479 mo
173.542 282.742 173.832 282.874 174.036 282.874 cv
174.505 282.874 174.914 282.667 175.265 282.252 cv
175.614 281.838 175.79 281.328 175.79 280.724 cv
175.79 279.667 175.228 278.905 174.104 278.439 cv
173.48 278.182 172.899 278.054 172.362 278.054 cv
172.272 278.054 172.217 278.05 172.194 278.044 cv
172.172 278.038 172.145 278.017 172.111 277.98 cv
172.12 277.948 172.127 277.92 172.133 277.897 cv
172.139 277.875 172.146 277.854 172.154 277.833 cv
173.485 274.905 li
176.102 274.905 li
176.231 274.905 176.332 274.883 176.403 274.838 cv
176.475 274.793 176.566 274.709 176.681 274.587 cv
176.778 274.672 li
176.309 275.806 li
176.292 275.842 176.247 275.866 176.174 275.876 cv
176.101 275.886 176.021 275.892 175.936 275.892 cv
173.571 275.892 li
173.052 276.963 li
173.72 277.078 174.209 277.186 174.519 277.288 cv
175.027 277.459 175.453 277.713 175.795 278.047 cv
176.088 278.337 176.31 278.663 176.461 279.024 cv
176.611 279.386 176.687 279.769 176.687 280.173 cv
176.687 281.075 176.366 281.829 175.725 282.433 cv
175.083 283.037 174.271 283.339 173.29 283.339 cv
172.891 283.339 172.569 283.3 172.325 283.223 cv
171.918 283.097 171.714 282.87 171.714 282.543 cv
171.714 282.42 171.758 282.313 171.846 282.222 cv
171.933 282.13 172.068 282.083 172.252 282.083 cv
172.484 282.083 172.788 282.215 173.165 282.479 cv
cp
f
186.212 279.504 mo
185.2 279.09 184.45 280.746 184.15 281.562 cv
184.013 281.95 183.926 282.289 184.063 282.715 cv
184.263 283.305 184.813 283.217 185.013 283.18 cv
185.4 283.117 185.725 282.803 186.024 282.402 cv
186.575 281.674 186.824 280.708 186.824 280.571 cv
186.824 280.42 186.8 279.743 186.212 279.504 cv
cp
186.412 279.053 mo
187.212 279.329 187.212 280.207 187.199 280.483 cv
187.162 281.072 186.899 281.85 186.425 282.54 cv
186.112 282.991 185.675 283.468 185.088 283.593 cv
184.538 283.707 183.813 283.731 183.275 283.029 cv
182.95 282.603 182.95 282.025 183.025 281.586 cv
183.251 280.32 184.101 279.63 184.875 279.191 cv
185.45 278.865 186.149 278.965 186.412 279.053 cv
cp
182.063 275.942 mo
181.788 275.83 181.464 275.654 181.264 275.491 cv
181.063 275.478 180.852 275.428 180.426 275.955 cv
179.914 276.595 179.789 276.908 179.489 277.686 cv
179.314 278.137 179.314 278.689 179.439 278.928 cv
179.688 279.404 180.313 279.279 180.563 279.166 cv
181.238 278.89 181.876 277.874 182.025 277.171 cv
182.188 276.432 182.101 276.306 182.063 275.942 cv
cp
185.775 274.989 mo
180.426 283.556 li
179.739 283.556 li
184.601 275.892 li
184.025 276.093 183.938 276.168 183.413 276.206 cv
182.813 276.256 182.626 276.081 182.438 276.018 cv
182.463 276.331 182.551 276.732 182.413 277.347 cv
182.301 277.861 181.551 279.279 180.676 279.58 cv
179.977 279.818 179.252 279.855 178.739 279.241 cv
178.151 278.526 178.39 277.585 178.464 277.334 cv
178.602 276.883 178.939 276.105 180.026 275.353 cv
180.477 275.039 180.914 274.964 181.413 275.039 cv
181.863 275.102 181.901 275.215 182.226 275.503 cv
182.351 275.566 182.813 276.042 183.9 275.767 cv
184.487 275.616 184.976 275.303 185.088 274.989 cv
185.775 274.989 li
cp
f
197.114 274.96 mo
197.591 275.095 197.857 275.163 197.914 275.163 cv
198.032 275.163 198.144 275.13 198.25 275.064 cv
198.355 275 198.429 274.897 198.47 274.758 cv
198.731 274.758 li
198.848 277.576 li
198.561 277.576 li
198.394 277.017 198.177 276.565 197.908 276.222 cv
197.396 275.577 196.706 275.254 195.84 275.254 cv
194.965 275.254 194.25 275.602 193.695 276.296 cv
193.14 276.99 192.862 277.945 192.862 279.162 cv
192.862 280.281 193.153 281.174 193.737 281.842 cv
194.321 282.509 195.061 282.843 195.955 282.843 cv
196.603 282.843 197.198 282.688 197.743 282.378 cv
198.057 282.202 198.4 281.937 198.774 281.582 cv
199.006 281.814 li
198.729 282.166 198.386 282.474 197.975 282.739 cv
197.275 283.188 196.517 283.413 195.699 283.413 cv
194.356 283.413 193.291 282.982 192.502 282.121 cv
191.773 281.324 191.41 280.33 191.41 279.138 cv
191.41 277.917 191.794 276.892 192.563 276.063 cv
193.372 275.193 194.426 274.758 195.724 274.758 cv
196.175 274.758 196.639 274.826 197.114 274.96 cv
cp
f
199.574 282.972 mo
200.033 282.923 200.331 282.841 200.468 282.725 cv
200.604 282.609 200.672 282.316 200.672 281.845 cv
200.672 276.265 li
200.672 275.82 200.605 275.529 200.471 275.392 cv
200.337 275.255 200.038 275.171 199.574 275.138 cv
199.574 274.905 li
203.101 274.905 li
203.101 275.138 li
202.641 275.163 202.333 275.238 202.176 275.365 cv
202.02 275.491 201.941 275.763 201.941 276.179 cv
201.941 282.206 li
201.941 282.345 201.965 282.454 202.012 282.534 cv
202.059 282.614 202.161 282.664 202.32 282.684 cv
202.414 282.696 202.513 282.705 202.616 282.708 cv
202.721 282.712 202.915 282.714 203.2 282.714 cv
204.312 282.714 205.063 282.623 205.454 282.439 cv
205.845 282.255 206.224 281.786 206.59 281.03 cv
206.908 281.03 li
206.297 283.205 li
199.574 283.205 li
199.574 282.972 li
cp
f
149.969 304.424 mo
159.445 304.424 li
159.445 294.285 li
149.969 294.285 li
149.969 304.424 li
cp
0 0 1 .05 cmyk
ef
169.542 299.619 mo
169.257 298.917 168.773 298.565 168.09 298.565 cv
167.459 298.565 167.04 298.753 166.833 299.128 cv
166.711 299.349 166.649 299.716 166.649 300.231 cv
166.649 300.897 166.791 301.548 167.073 302.185 cv
167.356 302.822 167.803 303.14 168.413 303.14 cv
168.897 303.14 169.249 302.933 169.469 302.519 cv
169.688 302.104 169.798 301.62 169.798 301.064 cv
169.798 300.521 169.713 300.04 169.542 299.619 cv
cp
170.197 302.614 mo
169.72 303.214 169.099 303.514 168.334 303.514 cv
167.617 303.514 166.966 303.177 166.378 302.503 cv
165.79 301.83 165.496 300.933 165.496 299.815 cv
165.496 298.374 166.065 297.136 167.205 296.103 cv
168.222 295.237 169.365 294.805 170.634 294.805 cv
170.664 295.006 li
170.156 295.1 169.718 295.228 169.35 295.389 cv
168.981 295.551 168.653 295.777 168.364 296.066 cv
168.067 296.36 167.788 296.734 167.528 297.187 cv
167.268 297.64 167.089 298.089 166.991 298.535 cv
167.243 298.379 167.461 298.265 167.645 298.192 cv
167.97 298.061 168.297 297.996 168.627 297.996 cv
169.273 297.996 169.816 298.22 170.256 298.669 cv
170.695 299.119 170.915 299.759 170.915 300.592 cv
170.915 301.339 170.676 302.013 170.197 302.614 cv
cp
.75021 .679683 .670222 .90164 cmyk
f
175.332 297.814 mo
175.584 297.5 175.711 297.121 175.711 296.676 cv
175.711 296.29 175.592 295.96 175.354 295.689 cv
175.115 295.417 174.755 295.282 174.271 295.282 cv
173.896 295.282 173.587 295.401 173.343 295.637 cv
173.099 295.874 172.977 296.161 172.977 296.5 cv
172.977 296.882 173.12 297.238 173.407 297.566 cv
173.694 297.895 174.071 298.204 174.539 298.493 cv
174.921 298.224 175.186 297.998 175.332 297.814 cv
cp
175.521 302.774 mo
175.762 302.513 175.881 302.187 175.881 301.795 cv
175.881 301.351 175.754 300.991 175.5 300.716 cv
175.246 300.441 174.724 300.024 173.935 299.465 cv
173.585 299.685 173.331 299.971 173.172 300.322 cv
173.014 300.672 172.935 301.01 172.935 301.336 cv
172.935 301.895 173.078 302.339 173.364 302.669 cv
173.651 303 174.017 303.165 174.46 303.165 cv
174.928 303.165 175.281 303.035 175.521 302.774 cv
cp
172.501 298.167 mo
172.2 297.775 172.05 297.342 172.05 296.869 cv
172.05 296.33 172.272 295.873 172.718 295.497 cv
173.163 295.122 173.741 294.933 174.453 294.933 cv
175.108 294.933 175.629 295.111 176.016 295.466 cv
176.402 295.822 176.595 296.234 176.595 296.704 cv
176.595 297.181 176.397 297.61 176.003 297.99 cv
175.775 298.207 175.407 298.456 174.899 298.738 cv
175.591 299.252 176.086 299.7 176.385 300.082 cv
176.684 300.463 176.833 300.914 176.833 301.432 cv
176.833 302.02 176.612 302.514 176.171 302.914 cv
175.729 303.314 175.139 303.514 174.398 303.514 cv
173.735 303.514 173.167 303.33 172.693 302.959 cv
172.22 302.59 171.982 302.103 171.982 301.5 cv
171.982 300.981 172.147 300.523 172.477 300.127 cv
172.692 299.87 173.066 299.562 173.6 299.203 cv
173.063 298.769 172.696 298.424 172.501 298.167 cv
cp
f
186.212 299.679 mo
185.2 299.265 184.45 300.921 184.15 301.736 cv
184.013 302.125 183.926 302.463 184.063 302.89 cv
184.263 303.48 184.813 303.392 185.013 303.354 cv
185.4 303.292 185.725 302.978 186.024 302.577 cv
186.575 301.849 186.824 300.883 186.824 300.746 cv
186.824 300.595 186.8 299.917 186.212 299.679 cv
cp
186.412 299.228 mo
187.212 299.503 187.212 300.381 187.199 300.658 cv
187.162 301.248 186.899 302.025 186.425 302.714 cv
186.112 303.167 185.675 303.643 185.088 303.768 cv
184.538 303.881 183.813 303.906 183.275 303.204 cv
182.95 302.778 182.95 302.201 183.025 301.761 cv
183.251 300.495 184.101 299.805 184.875 299.366 cv
185.45 299.04 186.149 299.14 186.412 299.228 cv
cp
182.063 296.117 mo
181.788 296.004 181.464 295.829 181.264 295.666 cv
181.063 295.653 180.852 295.603 180.426 296.129 cv
179.914 296.769 179.789 297.083 179.489 297.861 cv
179.314 298.312 179.314 298.864 179.439 299.102 cv
179.688 299.579 180.313 299.454 180.563 299.34 cv
181.238 299.065 181.876 298.048 182.025 297.346 cv
182.188 296.606 182.101 296.481 182.063 296.117 cv
cp
185.775 295.164 mo
180.426 303.731 li
179.739 303.731 li
184.601 296.067 li
184.025 296.268 183.938 296.343 183.413 296.38 cv
182.813 296.431 182.626 296.255 182.438 296.193 cv
182.463 296.506 182.551 296.908 182.413 297.522 cv
182.301 298.037 181.551 299.454 180.676 299.754 cv
179.977 299.993 179.252 300.031 178.739 299.416 cv
178.151 298.701 178.39 297.76 178.464 297.509 cv
178.602 297.058 178.939 296.28 180.026 295.528 cv
180.477 295.214 180.914 295.139 181.413 295.214 cv
181.863 295.277 181.901 295.39 182.226 295.678 cv
182.351 295.741 182.813 296.217 183.9 295.942 cv
184.487 295.792 184.976 295.477 185.088 295.164 cv
185.775 295.164 li
cp
f
197.114 295.135 mo
197.591 295.27 197.857 295.337 197.914 295.337 cv
198.032 295.337 198.144 295.305 198.25 295.239 cv
198.355 295.174 198.429 295.072 198.47 294.933 cv
198.731 294.933 li
198.848 297.75 li
198.561 297.75 li
198.394 297.191 198.177 296.74 197.908 296.397 cv
197.396 295.751 196.706 295.429 195.84 295.429 cv
194.965 295.429 194.25 295.777 193.695 296.47 cv
193.14 297.165 192.862 298.121 192.862 299.337 cv
192.862 300.456 193.153 301.349 193.737 302.017 cv
194.321 302.684 195.061 303.018 195.955 303.018 cv
196.603 303.018 197.198 302.863 197.743 302.552 cv
198.057 302.377 198.4 302.112 198.774 301.756 cv
199.006 301.989 li
198.729 302.34 198.386 302.649 197.975 302.914 cv
197.275 303.363 196.517 303.587 195.699 303.587 cv
194.356 303.587 193.291 303.157 192.502 302.295 cv
191.773 301.5 191.41 300.504 191.41 299.312 cv
191.41 298.091 191.794 297.067 192.563 296.238 cv
193.372 295.368 194.426 294.933 195.724 294.933 cv
196.175 294.933 196.639 295 197.114 295.135 cv
cp
f
199.574 303.147 mo
200.033 303.098 200.331 303.016 200.468 302.9 cv
200.604 302.785 200.672 302.491 200.672 302.02 cv
200.672 296.44 li
200.672 295.995 200.605 295.704 200.471 295.567 cv
200.337 295.43 200.038 295.346 199.574 295.313 cv
199.574 295.081 li
203.101 295.081 li
203.101 295.313 li
202.641 295.337 202.333 295.413 202.176 295.54 cv
202.02 295.667 201.941 295.938 201.941 296.354 cv
201.941 302.381 li
201.941 302.52 201.965 302.629 202.012 302.708 cv
202.059 302.789 202.161 302.838 202.32 302.859 cv
202.414 302.871 202.513 302.879 202.616 302.883 cv
202.721 302.887 202.915 302.889 203.2 302.889 cv
204.312 302.889 205.063 302.797 205.454 302.614 cv
205.845 302.43 206.224 301.96 206.59 301.205 cv
206.908 301.205 li
206.297 303.379 li
199.574 303.379 li
199.574 303.147 li
cp
f
132.375 477.638 mo
132.567 477.075 132.663 476.259 132.663 475.191 cv
132.663 474.339 132.605 473.661 132.49 473.153 cv
132.273 472.207 131.869 471.734 131.275 471.734 cv
130.682 471.734 130.275 472.221 130.055 473.195 cv
129.939 473.712 129.882 474.396 129.882 475.244 cv
129.882 476.039 129.941 476.673 130.061 477.15 cv
130.283 478.04 130.702 478.484 131.317 478.484 cv
131.83 478.484 132.183 478.203 132.375 477.638 cv
cp
133.171 472.717 mo
133.523 473.401 133.7 474.186 133.7 475.073 cv
133.7 475.77 133.592 476.427 133.375 477.043 cv
132.967 478.204 132.26 478.784 131.254 478.784 cv
130.566 478.784 130.001 478.47 129.558 477.843 cv
129.083 477.173 128.846 476.264 128.846 475.115 cv
128.846 474.21 129.004 473.432 129.322 472.78 cv
129.751 471.894 130.411 471.451 131.302 471.451 cv
132.104 471.451 132.728 471.873 133.171 472.717 cv
cp
f
191.729 470.968 mo
191.73 470.977 191.731 470.997 191.731 471.029 cv
191.731 477.358 li
191.731 477.628 191.803 477.799 191.947 477.874 cv
192.091 477.947 192.359 477.991 192.752 478.004 cv
192.752 478.152 li
189.793 478.152 li
189.793 477.994 li
190.216 477.973 190.491 477.916 190.621 477.821 cv
190.75 477.726 190.814 477.521 190.814 477.206 cv
190.814 472.337 li
190.814 472.169 190.794 472.042 190.752 471.954 cv
190.71 471.866 190.619 471.822 190.479 471.822 cv
190.389 471.822 190.271 471.848 190.126 471.899 cv
189.981 471.95 189.846 472.002 189.72 472.059 cv
189.72 471.912 li
191.643 470.928 li
191.705 470.928 li
191.719 470.946 191.727 470.959 191.729 470.968 cv
cp
f
197.518 477.106 mo
197.71 476.542 197.806 475.727 197.806 474.659 cv
197.806 473.807 197.748 473.128 197.633 472.621 cv
197.416 471.674 197.012 471.202 196.418 471.202 cv
195.824 471.202 195.418 471.689 195.197 472.663 cv
195.082 473.18 195.024 473.864 195.024 474.711 cv
195.024 475.506 195.084 476.141 195.203 476.618 cv
195.426 477.507 195.845 477.952 196.46 477.952 cv
196.973 477.952 197.325 477.67 197.518 477.106 cv
cp
198.313 472.185 mo
198.666 472.869 198.843 473.654 198.843 474.541 cv
198.843 475.238 198.734 475.895 198.518 476.511 cv
198.109 477.671 197.402 478.251 196.396 478.251 cv
195.709 478.251 195.144 477.938 194.7 477.311 cv
194.226 476.641 193.988 475.732 193.988 474.583 cv
193.988 473.678 194.146 472.9 194.465 472.248 cv
194.894 471.362 195.554 470.918 196.444 470.918 cv
197.247 470.918 197.87 471.34 198.313 472.185 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
