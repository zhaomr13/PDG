%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: mpgDet_MWPC-GEM-gain-rate_25112009.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 8/22/16
%%BoundingBox: 0 0 303 212
%%HiResBoundingBox: 0 0 302.3369 211.7183
%%CropBox: 0 0 302.3369 211.7183
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2016-08-22T13:28:13-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qw290S4sfzFfzTb2d&#xA;zeo+jT204jl5kyLPbtDDDFLIkaFlWRtuIJryOKpR5B0K5h8++YNWl0G40OGX1oLVj6TreK1yZnu7&#xA;mf1ZJpJpHY+kjKFij+EdaBVW0uP8xtfl1S8tPNEGm2kGpX1nb2h02OcrHa3DwrWQyoWJCV6YqjH8&#xA;sfmnT4PO9uDUVro8XSu/+7/DFXP5Y/NOnwed7cGorXR4uld/93+GKuPlj80+Yp53t+FDyH6HirXa&#xA;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&#xA;fV/Q/e8frXT1vi4en74q/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2016-08-22T13:28:14-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-08-22T13:28:14-07:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.380337</stDim:w>
            <stDim:h>3.191766</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:01801174072068118083C3E7DED362AB</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:01801174072068118083C3E7DED362AB</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:01801174072068118083C3E7DED362AB</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083C3E7DED362AB</stEvt:instanceID>
                  <stEvt:when>2016-08-22T13:28:14-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -211.718 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 211.718 li
302.337 211.718 li
302.337 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
82.9834 3.70215 mo
82.9834 198.223 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.880005 .880005 .880005 rgb
@
136.018 3.70215 mo
136.018 198.223 li
@
189.192 3.70215 mo
189.192 198.223 li
@
242.268 3.70215 mo
242.268 198.223 li
@
30.3672 35.8384 mo
294.981 35.8384 li
@
30.3672 68.3906 mo
294.981 68.3906 li
@
30.3672 100.962 mo
294.981 100.962 li
@
30.3672 133.52 mo
294.981 133.52 li
@
30.3672 166.135 mo
294.981 166.135 li
@
.5 lw
82.9834 195.471 mo
82.9834 198.673 li
0 0 0 rgb
@
80.6079 196.952 mo
80.6079 198.587 li
@
77.8779 196.952 mo
77.8779 198.587 li
@
74.7373 196.952 mo
74.7373 198.587 li
@
71.1748 196.952 mo
71.1748 198.587 li
@
67.0591 196.952 mo
67.0591 198.587 li
@
61.856 196.952 mo
61.856 198.587 li
@
55.231 196.952 mo
55.231 198.587 li
@
45.856 196.952 mo
45.856 198.587 li
@
136.018 195.471 mo
136.018 198.673 li
@
133.642 196.952 mo
133.642 198.587 li
@
130.912 196.952 mo
130.912 198.587 li
@
127.771 196.952 mo
127.771 198.587 li
@
124.209 196.952 mo
124.209 198.587 li
@
120.093 196.952 mo
120.093 198.587 li
@
114.89 196.952 mo
114.89 198.587 li
@
108.265 196.952 mo
108.265 198.587 li
@
98.8901 196.952 mo
98.8901 198.587 li
@
189.185 195.471 mo
189.185 198.673 li
@
186.737 196.952 mo
186.737 198.587 li
@
184.079 196.952 mo
184.079 198.587 li
@
180.938 196.952 mo
180.938 198.587 li
@
177.448 196.952 mo
177.448 198.587 li
@
173.188 196.952 mo
173.188 198.587 li
@
168.13 196.952 mo
168.13 198.587 li
@
161.433 196.952 mo
161.433 198.587 li
@
152.057 196.952 mo
152.057 198.587 li
@
242.268 195.471 mo
242.268 198.673 li
@
239.82 196.952 mo
239.82 198.587 li
@
237.162 196.952 mo
237.162 198.587 li
@
234.094 196.952 mo
234.094 198.587 li
@
230.531 196.952 mo
230.531 198.587 li
@
226.344 196.952 mo
226.344 198.587 li
@
221.141 196.952 mo
221.141 198.587 li
@
214.516 196.952 mo
214.516 198.587 li
@
205.212 196.952 mo
205.212 198.587 li
@
292.963 196.952 mo
292.963 198.587 li
@
290.211 196.952 mo
290.211 198.587 li
@
287.158 196.952 mo
287.158 198.587 li
@
283.611 196.952 mo
283.611 198.587 li
@
279.424 196.952 mo
279.424 198.587 li
@
274.215 196.952 mo
274.215 198.587 li
@
267.631 196.952 mo
267.631 198.587 li
@
258.255 196.952 mo
258.255 198.587 li
@
82.9834 6.46631 mo
82.9834 3.26416 li
@
80.6079 4.98584 mo
80.6079 3.3501 li
@
77.8779 4.98584 mo
77.8779 3.3501 li
@
74.7373 4.98584 mo
74.7373 3.3501 li
@
71.1748 4.98584 mo
71.1748 3.3501 li
@
67.0591 4.98584 mo
67.0591 3.3501 li
@
61.856 4.98584 mo
61.856 3.3501 li
@
55.231 4.98584 mo
55.231 3.3501 li
@
45.856 4.98584 mo
45.856 3.3501 li
@
136.018 6.46631 mo
136.018 3.26416 li
@
133.642 4.98584 mo
133.642 3.3501 li
@
130.912 4.98584 mo
130.912 3.3501 li
@
127.771 4.98584 mo
127.771 3.3501 li
@
124.209 4.98584 mo
124.209 3.3501 li
@
120.093 4.98584 mo
120.093 3.3501 li
@
114.89 4.98584 mo
114.89 3.3501 li
@
108.265 4.98584 mo
108.265 3.3501 li
@
98.8901 4.98584 mo
98.8901 3.3501 li
@
189.185 6.46631 mo
189.185 3.26416 li
@
186.737 4.98584 mo
186.737 3.3501 li
@
184.079 4.98584 mo
184.079 3.3501 li
@
180.938 4.98584 mo
180.938 3.3501 li
@
177.448 4.98584 mo
177.448 3.3501 li
@
173.188 4.98584 mo
173.188 3.3501 li
@
168.13 4.98584 mo
168.13 3.3501 li
@
161.433 4.98584 mo
161.433 3.3501 li
@
152.057 4.98584 mo
152.057 3.3501 li
@
242.268 6.46631 mo
242.268 3.26416 li
@
239.82 4.98584 mo
239.82 3.3501 li
@
237.162 4.98584 mo
237.162 3.3501 li
@
234.094 4.98584 mo
234.094 3.3501 li
@
230.531 4.98584 mo
230.531 3.3501 li
@
226.344 4.98584 mo
226.344 3.3501 li
@
221.141 4.98584 mo
221.141 3.3501 li
@
214.516 4.98584 mo
214.516 3.3501 li
@
205.212 4.98584 mo
205.212 3.3501 li
@
292.963 4.98584 mo
292.963 3.3501 li
@
290.211 4.98584 mo
290.211 3.3501 li
@
287.158 4.98584 mo
287.158 3.3501 li
@
283.611 4.98584 mo
283.611 3.3501 li
@
279.424 4.98584 mo
279.424 3.3501 li
@
274.215 4.98584 mo
274.215 3.3501 li
@
267.631 4.98584 mo
267.631 3.3501 li
@
258.255 4.98584 mo
258.255 3.3501 li
@
31.6631 190.583 mo
30.3667 190.583 li
@
31.6631 182.458 mo
30.3667 182.458 li
@
31.6631 174.333 mo
30.3667 174.333 li
@
33.1621 166.145 mo
30.3667 166.145 li
@
31.6631 157.958 mo
30.3667 157.958 li
@
31.6631 149.905 mo
30.3667 149.905 li
@
31.6631 141.708 mo
30.3667 141.708 li
@
33.1621 133.52 mo
30.3667 133.52 li
@
31.6631 125.468 mo
30.3667 125.468 li
@
31.6631 117.271 mo
30.3667 117.271 li
@
31.6631 109.146 mo
30.3667 109.146 li
@
33.1621 100.958 mo
30.3667 100.958 li
@
31.6631 92.8374 mo
30.3667 92.8374 li
@
31.6631 84.7124 mo
30.3667 84.7124 li
@
31.6631 76.5151 mo
30.3667 76.5151 li
@
33.1621 68.3999 mo
30.3667 68.3999 li
@
31.6631 60.2563 mo
30.3667 60.2563 li
@
31.6631 52.0952 mo
30.3667 52.0952 li
@
31.6631 43.9702 mo
30.3667 43.9702 li
@
33.1621 35.855 mo
30.3667 35.855 li
@
31.6631 27.6763 mo
30.3667 27.6763 li
@
31.6631 19.5513 mo
30.3667 19.5513 li
@
31.6631 11.4263 mo
30.3667 11.4263 li
@
293.686 190.573 mo
294.981 190.573 li
@
293.686 182.448 mo
294.981 182.448 li
@
293.686 174.323 mo
294.981 174.323 li
@
292.187 166.135 mo
294.981 166.135 li
@
293.686 157.948 mo
294.981 157.948 li
@
293.686 149.895 mo
294.981 149.895 li
@
293.686 141.698 mo
294.981 141.698 li
@
292.187 133.51 mo
294.981 133.51 li
@
293.686 125.458 mo
294.981 125.458 li
@
293.686 117.261 mo
294.981 117.261 li
@
293.686 109.136 mo
294.981 109.136 li
@
292.187 100.949 mo
294.981 100.949 li
@
293.686 92.8276 mo
294.981 92.8276 li
@
293.686 84.7026 mo
294.981 84.7026 li
@
293.686 76.5054 mo
294.981 76.5054 li
@
292.187 68.3901 mo
294.981 68.3901 li
@
293.686 60.2466 mo
294.981 60.2466 li
@
293.686 52.0854 mo
294.981 52.0854 li
@
293.686 43.9604 mo
294.981 43.9604 li
@
292.187 35.8452 mo
294.981 35.8452 li
@
293.686 27.6665 mo
294.981 27.6665 li
@
293.686 19.5415 mo
294.981 19.5415 li
@
293.686 11.4165 mo
294.981 11.4165 li
@
295.378 3.20264 mo
29.9072 3.20264 li
29.9072 198.673 li
295.378 198.673 li
295.378 3.20264 li
295.378 3.20264 li
cp
294.378 4.20264 mo
294.378 197.673 li
30.9072 197.673 li
30.9072 4.20264 li
294.378 4.20264 li
f
31.3716 30.603 mo
31.3716 41.0962 li
f
.75 lw
31.3716 30.603 mo
31.3716 41.0962 li
@
32.7397 30.9673 mo
30.0044 30.9673 li
f
32.7397 30.9673 mo
30.0044 30.9673 li
@
32.7397 40.7319 mo
30.0044 40.7319 li
f
32.7397 40.7319 mo
30.0044 40.7319 li
@
67.437 38.5449 mo
69.6245 38.5449 li
68.4995 36.436 li
67.437 38.5449 li
cp
f
54.1152 36.8481 mo
56.3027 36.8481 li
55.1777 34.7393 li
54.1152 36.8481 li
cp
f
30.3027 36.9199 mo
32.4902 36.9199 li
31.3652 34.811 li
30.3027 36.9199 li
cp
f
73.6245 37.7231 mo
75.812 37.7231 li
74.687 35.6143 li
73.6245 37.7231 li
cp
f
81.937 38.5449 mo
84.1245 38.5449 li
82.9995 36.436 li
81.937 38.5449 li
cp
f
94.1963 36.8481 mo
96.3838 36.8481 li
95.2588 34.7393 li
94.1963 36.8481 li
cp
f
98.6963 39.3574 mo
100.884 39.3574 li
99.7588 37.2485 li
98.6963 39.3574 li
cp
f
107.268 38.5449 mo
109.456 38.5449 li
108.331 36.436 li
107.268 38.5449 li
cp
f
113.946 40.1074 mo
116.134 40.1074 li
115.009 37.9985 li
113.946 40.1074 li
cp
f
126.259 41.7231 mo
128.446 41.7231 li
127.321 39.6143 li
126.259 41.7231 li
cp
f
127.893 42.5356 mo
130.081 42.5356 li
128.956 40.4268 li
127.893 42.5356 li
cp
f
149.071 51.4731 mo
151.26 51.4731 li
150.134 49.3643 li
149.071 51.4731 li
cp
f
157.599 47.5186 mo
159.786 47.5186 li
158.661 45.4097 li
157.599 47.5186 li
cp
f
167.036 53.0981 mo
169.224 53.0981 li
168.099 50.9893 li
167.036 53.0981 li
cp
f
101.509 36.9106 mo
103.696 36.9106 li
102.571 34.8018 li
101.509 36.9106 li
cp
f
106.509 37.4731 mo
108.696 37.4731 li
107.571 35.3643 li
106.509 37.4731 li
cp
f
91.813 31.4858 mo
91.813 32.0664 91.3428 32.5361 90.7622 32.5361 cv
90.1826 32.5361 89.7119 32.0664 89.7119 31.4858 cv
89.7119 30.9063 90.1826 30.4355 90.7622 30.4355 cv
91.3428 30.4355 91.813 30.9063 91.813 31.4858 cv
cp
f
120.013 35.9141 mo
120.013 36.4946 119.543 36.9644 118.962 36.9644 cv
118.383 36.9644 117.912 36.4946 117.912 35.9141 cv
117.912 35.3345 118.383 34.8638 118.962 34.8638 cv
119.543 34.8638 120.013 35.3345 120.013 35.9141 cv
cp
f
139.991 35.9233 mo
139.991 36.5039 139.521 36.9736 138.94 36.9736 cv
138.361 36.9736 137.89 36.5039 137.89 35.9233 cv
137.89 35.3438 138.361 34.873 138.94 34.873 cv
139.521 34.873 139.991 35.3438 139.991 35.9233 cv
cp
f
142.563 35.9233 mo
142.563 36.5039 142.093 36.9736 141.512 36.9736 cv
140.933 36.9736 140.462 36.5039 140.462 35.9233 cv
140.462 35.3438 140.933 34.873 141.512 34.873 cv
142.093 34.873 142.563 35.3438 142.563 35.9233 cv
cp
f
148.178 35.9326 mo
148.178 36.5132 147.708 36.9829 147.127 36.9829 cv
146.548 36.9829 146.078 36.5132 146.078 35.9326 cv
146.078 35.353 146.548 34.8823 147.127 34.8823 cv
147.708 34.8823 148.178 35.353 148.178 35.9326 cv
cp
f
159.625 35.8608 mo
159.625 36.4414 159.155 36.9111 158.574 36.9111 cv
157.995 36.9111 157.524 36.4414 157.524 35.8608 cv
157.524 35.2813 157.995 34.8105 158.574 34.8105 cv
159.155 34.8105 159.625 35.2813 159.625 35.8608 cv
cp
f
181.964 35.9233 mo
181.964 36.5039 181.494 36.9736 180.913 36.9736 cv
180.334 36.9736 179.863 36.5039 179.863 35.9233 cv
179.863 35.3438 180.334 34.873 180.913 34.873 cv
181.494 34.873 181.964 35.3438 181.964 35.9233 cv
cp
f
190.204 35.9233 mo
190.204 36.5039 189.734 36.9736 189.153 36.9736 cv
188.574 36.9736 188.104 36.5039 188.104 35.9233 cv
188.104 35.3438 188.574 34.873 189.153 34.873 cv
189.734 34.873 190.204 35.3438 190.204 35.9233 cv
cp
f
222.25 35.9326 mo
222.25 36.5132 221.78 36.9829 221.199 36.9829 cv
220.62 36.9829 220.149 36.5132 220.149 35.9326 cv
220.149 35.353 220.62 34.8823 221.199 34.8823 cv
221.78 34.8823 222.25 35.353 222.25 35.9326 cv
cp
f
243.375 29.4233 mo
243.375 30.0039 242.905 30.4736 242.324 30.4736 cv
241.745 30.4736 241.274 30.0039 241.274 29.4233 cv
241.274 28.8438 241.745 28.373 242.324 28.373 cv
242.905 28.373 243.375 28.8438 243.375 29.4233 cv
cp
f
245.313 31.1108 mo
245.313 31.6914 244.843 32.1611 244.262 32.1611 cv
243.683 32.1611 243.212 31.6914 243.212 31.1108 cv
243.212 30.5313 243.683 30.0605 244.262 30.0605 cv
244.843 30.0605 245.313 30.5313 245.313 31.1108 cv
cp
f
252.75 42.3608 mo
252.75 42.9414 252.28 43.4111 251.699 43.4111 cv
251.12 43.4111 250.649 42.9414 250.649 42.3608 cv
250.649 41.7813 251.12 41.3105 251.699 41.3105 cv
252.28 41.3105 252.75 41.7813 252.75 42.3608 cv
cp
f
256.125 41.3608 mo
256.125 41.9414 255.655 42.4111 255.074 42.4111 cv
254.495 42.4111 254.024 41.9414 254.024 41.3608 cv
254.024 40.7813 254.495 40.3105 255.074 40.3105 cv
255.655 40.3105 256.125 40.7813 256.125 41.3608 cv
cp
f
259.313 35.9233 mo
259.313 36.5039 258.843 36.9736 258.262 36.9736 cv
257.683 36.9736 257.212 36.5039 257.212 35.9233 cv
257.212 35.3438 257.683 34.873 258.262 34.873 cv
258.843 34.873 259.313 35.3438 259.313 35.9233 cv
cp
f
178.786 63.7593 mo
181.01 63.7593 li
179.849 61.6504 li
178.786 63.7593 li
cp
f
188.099 59.3843 mo
190.286 59.3843 li
189.161 57.2754 li
188.099 59.3843 li
cp
f
188.099 77.5718 mo
190.286 77.5718 li
189.161 75.4629 li
188.099 77.5718 li
cp
f
210.714 90.6699 mo
212.901 90.6699 li
211.776 88.561 li
210.714 90.6699 li
cp
f
61.897 35.9072 mo
61.897 36.4878 61.4268 36.9575 60.8462 36.9575 cv
60.2666 36.9575 59.7959 36.4878 59.7959 35.9072 cv
59.7959 35.3276 60.2666 34.8569 60.8462 34.8569 cv
61.4268 34.8569 61.897 35.3276 61.897 35.9072 cv
cp
f
55.2554 30.6289 mo
55.2554 41.1221 li
f
55.2554 30.6289 mo
55.2554 41.1221 li
@
56.6235 30.9932 mo
53.8882 30.9932 li
f
56.6235 30.9932 mo
53.8882 30.9932 li
@
56.6235 40.7578 mo
53.8882 40.7578 li
f
56.6235 40.7578 mo
53.8882 40.7578 li
@
60.8174 30.6069 mo
60.8174 41.1001 li
f
60.8174 30.6069 mo
60.8174 41.1001 li
@
62.1855 30.9712 mo
59.4502 30.9712 li
f
62.1855 30.9712 mo
59.4502 30.9712 li
@
62.1855 40.7358 mo
59.4502 40.7358 li
f
62.1855 40.7358 mo
59.4502 40.7358 li
@
68.46 32.1846 mo
68.46 42.606 li
f
68.46 32.1846 mo
68.46 42.606 li
@
69.8281 32.5488 mo
67.0928 32.5488 li
f
69.8281 32.5488 mo
67.0928 32.5488 li
@
69.8281 42.2417 mo
67.0928 42.2417 li
f
69.8281 42.2417 mo
67.0928 42.2417 li
@
74.6821 31.3882 mo
74.6821 41.8096 li
f
74.6821 31.3882 mo
74.6821 41.8096 li
@
76.0503 31.7524 mo
73.3149 31.7524 li
f
76.0503 31.7524 mo
73.3149 31.7524 li
@
76.0503 41.4453 mo
73.3149 41.4453 li
f
76.0503 41.4453 mo
73.3149 41.4453 li
@
83.0151 32.2422 mo
83.0151 42.6636 li
f
83.0151 32.2422 mo
83.0151 42.6636 li
@
84.3833 32.6064 mo
81.6479 32.6064 li
f
84.3833 32.6064 mo
81.6479 32.6064 li
@
84.3833 42.2993 mo
81.6479 42.2993 li
f
84.3833 42.2993 mo
81.6479 42.2993 li
@
90.7441 26.0337 mo
90.7441 36.814 li
f
90.7441 26.0337 mo
90.7441 36.814 li
@
92.1123 26.3979 mo
89.377 26.3979 li
f
92.1123 26.3979 mo
89.377 26.3979 li
@
92.1123 36.4497 mo
89.377 36.4497 li
f
92.1123 36.4497 mo
89.377 36.4497 li
@
95.2651 30.5962 mo
95.2651 41.0894 li
f
95.2651 30.5962 mo
95.2651 41.0894 li
@
96.6333 30.9604 mo
93.8979 30.9604 li
f
96.6333 30.9604 mo
93.8979 30.9604 li
@
96.6333 40.7251 mo
93.8979 40.7251 li
f
96.6333 40.7251 mo
93.8979 40.7251 li
@
99.7441 33.1172 mo
99.7441 43.4668 li
f
99.7441 33.1172 mo
99.7441 43.4668 li
@
101.112 33.4814 mo
98.377 33.4814 li
f
101.112 33.4814 mo
98.377 33.4814 li
@
101.112 43.1025 mo
98.377 43.1025 li
f
101.112 43.1025 mo
98.377 43.1025 li
@
102.578 30.6172 mo
102.578 41.1104 li
f
102.578 30.6172 mo
102.578 41.1104 li
@
103.946 30.9814 mo
101.21 30.9814 li
f
103.946 30.9814 mo
101.21 30.9814 li
@
103.946 40.7461 mo
101.21 40.7461 li
f
103.946 40.7461 mo
101.21 40.7461 li
@
107.578 31.4297 mo
107.578 41.8511 li
f
107.578 31.4297 mo
107.578 41.8511 li
@
108.946 31.7939 mo
106.21 31.7939 li
f
108.946 31.7939 mo
106.21 31.7939 li
@
108.946 41.4868 mo
106.21 41.4868 li
f
108.946 41.4868 mo
106.21 41.4868 li
@
108.307 32.2212 mo
108.307 42.6426 li
f
108.307 32.2212 mo
108.307 42.6426 li
@
109.675 32.5854 mo
106.939 32.5854 li
f
109.675 32.5854 mo
106.939 32.5854 li
@
109.675 42.2783 mo
106.939 42.2783 li
f
109.675 42.2783 mo
106.939 42.2783 li
@
115.015 33.9087 mo
115.015 44.2583 li
f
115.015 33.9087 mo
115.015 44.2583 li
@
116.383 34.2729 mo
113.647 34.2729 li
f
116.383 34.2729 mo
113.647 34.2729 li
@
116.383 43.894 mo
113.647 43.894 li
f
116.383 43.894 mo
113.647 43.894 li
@
118.952 30.6172 mo
118.952 41.1104 li
f
118.952 30.6172 mo
118.952 41.1104 li
@
120.32 30.9814 mo
117.585 30.9814 li
f
120.32 30.9814 mo
117.585 30.9814 li
@
120.32 40.7461 mo
117.585 40.7461 li
f
120.32 40.7461 mo
117.585 40.7461 li
@
127.327 35.8159 mo
127.327 45.8184 li
f
127.327 35.8159 mo
127.327 45.8184 li
@
128.695 36.1802 mo
125.96 36.1802 li
f
128.695 36.1802 mo
125.96 36.1802 li
@
128.695 45.4541 mo
125.96 45.4541 li
f
128.695 45.4541 mo
125.96 45.4541 li
@
128.932 36.4849 mo
128.932 46.6309 li
f
128.932 36.4849 mo
128.932 46.6309 li
@
130.3 36.8491 mo
127.564 36.8491 li
f
130.3 36.8491 mo
127.564 36.8491 li
@
130.3 46.2666 mo
127.564 46.2666 li
f
130.3 46.2666 mo
127.564 46.2666 li
@
138.922 30.6045 mo
138.922 41.0918 li
f
138.922 30.6045 mo
138.922 41.0918 li
@
140.291 30.9688 mo
137.555 30.9688 li
f
140.291 30.9688 mo
137.555 30.9688 li
@
140.291 40.7275 mo
137.555 40.7275 li
f
140.291 40.7275 mo
137.555 40.7275 li
@
141.485 30.6045 mo
141.485 41.0918 li
f
141.485 30.6045 mo
141.485 41.0918 li
@
142.853 30.9688 mo
140.118 30.9688 li
f
142.853 30.9688 mo
140.118 30.9688 li
@
142.853 40.7275 mo
140.118 40.7275 li
f
142.853 40.7275 mo
140.118 40.7275 li
@
147.11 30.6045 mo
147.11 41.0918 li
f
147.11 30.6045 mo
147.11 41.0918 li
@
148.478 30.9688 mo
145.743 30.9688 li
f
148.478 30.9688 mo
145.743 30.9688 li
@
148.478 40.7275 mo
145.743 40.7275 li
f
148.478 40.7275 mo
145.743 40.7275 li
@
150.099 45.7002 mo
150.099 55.3262 li
f
150.099 45.7002 mo
150.099 55.3262 li
@
151.469 46.0645 mo
148.732 46.0645 li
f
151.469 46.0645 mo
148.732 46.0645 li
@
151.469 54.9619 mo
148.732 54.9619 li
f
151.469 54.9619 mo
148.732 54.9619 li
@
158.662 41.4814 mo
158.662 51.3228 li
f
158.662 41.4814 mo
158.662 51.3228 li
@
160.031 41.8457 mo
157.295 41.8457 li
f
160.031 41.8457 mo
157.295 41.8457 li
@
160.031 50.9585 mo
157.295 50.9585 li
f
160.031 50.9585 mo
157.295 50.9585 li
@
158.553 30.6221 mo
158.553 41.1094 li
f
158.553 30.6221 mo
158.553 41.1094 li
@
159.922 30.9863 mo
157.186 30.9863 li
f
159.922 30.9863 mo
157.186 30.9863 li
@
159.922 40.7451 mo
157.186 40.7451 li
f
159.922 40.7451 mo
157.186 40.7451 li
@
168.101 47.3823 mo
168.101 56.8384 li
f
168.101 47.3823 mo
168.101 56.8384 li
@
169.47 47.7466 mo
166.733 47.7466 li
f
169.47 47.7466 mo
166.733 47.7466 li
@
169.47 56.4741 mo
166.733 56.4741 li
f
169.47 56.4741 mo
166.733 56.4741 li
@
180.913 30.6167 mo
180.913 41.0825 li
f
180.913 30.6167 mo
180.913 41.0825 li
@
182.282 30.981 mo
179.546 30.981 li
f
182.282 30.981 mo
179.546 30.981 li
@
182.282 40.7183 mo
179.546 40.7183 li
f
182.282 40.7183 mo
179.546 40.7183 li
@
189.163 30.6167 mo
189.163 41.0825 li
f
189.163 30.6167 mo
189.163 41.0825 li
@
190.532 30.981 mo
187.796 30.981 li
f
190.532 30.981 mo
187.796 30.981 li
@
190.532 40.7183 mo
187.796 40.7183 li
f
190.532 40.7183 mo
187.796 40.7183 li
@
221.179 30.6167 mo
221.179 41.0825 li
f
221.179 30.6167 mo
221.179 41.0825 li
@
222.548 30.981 mo
219.812 30.981 li
f
222.548 30.981 mo
219.812 30.981 li
@
222.548 40.7183 mo
219.812 40.7183 li
f
222.548 40.7183 mo
219.812 40.7183 li
@
242.304 23.8667 mo
242.304 34.7661 li
f
242.304 23.8667 mo
242.304 34.7661 li
@
243.673 24.231 mo
240.937 24.231 li
f
243.673 24.231 mo
240.937 24.231 li
@
243.673 34.4019 mo
240.937 34.4019 li
f
243.673 34.4019 mo
240.937 34.4019 li
@
244.241 25.6792 mo
244.241 36.5786 li
f
244.241 25.6792 mo
244.241 36.5786 li
@
245.61 26.0435 mo
242.874 26.0435 li
f
245.61 26.0435 mo
242.874 26.0435 li
@
245.61 36.2144 mo
242.874 36.2144 li
f
245.61 36.2144 mo
242.874 36.2144 li
@
251.679 37.3042 mo
251.679 47.4106 li
f
251.679 37.3042 mo
251.679 47.4106 li
@
253.048 37.6685 mo
250.312 37.6685 li
f
253.048 37.6685 mo
250.312 37.6685 li
@
253.048 47.0464 mo
250.312 47.0464 li
f
253.048 47.0464 mo
250.312 47.0464 li
@
255.054 36.1919 mo
255.054 46.4067 li
f
255.054 36.1919 mo
255.054 46.4067 li
@
256.423 36.5562 mo
253.687 36.5562 li
f
256.423 36.5562 mo
253.687 36.5562 li
@
256.423 46.0425 mo
253.687 46.0425 li
f
256.423 46.0425 mo
253.687 46.0425 li
@
258.241 30.6011 mo
258.241 41.0825 li
f
258.241 30.6011 mo
258.241 41.0825 li
@
259.61 30.9653 mo
256.874 30.9653 li
f
259.61 30.9653 mo
256.874 30.9653 li
@
259.61 40.7183 mo
256.874 40.7183 li
f
259.61 40.7183 mo
256.874 40.7183 li
@
179.866 58.2417 mo
179.866 67.145 li
f
179.866 58.2417 mo
179.866 67.145 li
@
181.235 58.606 mo
178.499 58.606 li
f
181.235 58.606 mo
178.499 58.606 li
@
181.235 66.7808 mo
178.499 66.7808 li
f
181.235 66.7808 mo
178.499 66.7808 li
@
189.163 53.7212 mo
189.163 62.895 li
f
189.163 53.7212 mo
189.163 62.895 li
@
190.532 54.0854 mo
187.796 54.0854 li
f
190.532 54.0854 mo
187.796 54.0854 li
@
190.532 62.5308 mo
187.796 62.5308 li
f
190.532 62.5308 mo
187.796 62.5308 li
@
189.147 72.5542 mo
189.147 80.5825 li
f
189.147 72.5542 mo
189.147 80.5825 li
@
190.517 72.9185 mo
187.78 72.9185 li
f
190.517 72.9185 mo
187.78 72.9185 li
@
190.517 80.2183 mo
187.78 80.2183 li
f
190.517 80.2183 mo
187.78 80.2183 li
@
211.777 85.9761 mo
211.777 93.27 li
f
211.777 85.9761 mo
211.777 93.27 li
@
213.146 86.3403 mo
210.41 86.3403 li
f
213.146 86.3403 mo
210.41 86.3403 li
@
213.146 92.9058 mo
210.41 92.9058 li
f
213.146 92.9058 mo
210.41 92.9058 li
@
1 lw
1 lc
[4 4 ] 0 dsh
220.928 100.057 mo
209.762 87.2813 li
202.095 80.0566 li
198.709 76.9102 li
193.928 72.4121 li
190.875 69.5161 li
185.928 65.7231 li
177.928 59.7231 li
170.262 54.0698 li
162.095 50.7231 li
154.095 47.2231 li
145.928 44.2231 li
138.261 41.8896 li
129.928 39.7231 li
122.261 39.0566 li
113.928 38.0566 li
106.095 37.2231 li
98.4277 36.2231 li
96.2612 36.0566 li
@
0 lc
[] 0 dsh
30.3672 36.0913 mo
270.825 36.0913 li
@
14.8481 7.1875 mo
13.9692 7.1875 li
13.9692 1.58691 li
13.7578 1.78857 13.48 1.99072 13.1367 2.19238 cv
12.7935 2.39404 12.4849 2.54541 12.2114 2.64648 cv
12.2114 1.79688 li
12.7031 1.56592 13.1328 1.28564 13.5005 .957031 cv
13.8682 .628418 14.1289 .309082 14.2817 0 cv
14.8481 0 li
14.8481 7.1875 li
cp
f
17.5923 7.1875 mo
17.5923 6.18652 li
18.5933 6.18652 li
18.5933 7.1875 li
17.5923 7.1875 li
cp
f
24.4966 6.34277 mo
24.4966 7.1875 li
19.7651 7.1875 li
19.7588 6.97607 19.793 6.77246 19.8677 6.57715 cv
19.9883 6.25488 20.1812 5.9375 20.4463 5.625 cv
20.7114 5.3125 21.0947 4.95117 21.5962 4.54102 cv
22.374 3.90283 22.8999 3.39746 23.1733 3.0249 cv
23.4468 2.65234 23.5835 2.2998 23.5835 1.96777 cv
23.5835 1.61963 23.459 1.32568 23.21 1.08643 cv
22.9609 .847168 22.6362 .727539 22.2358 .727539 cv
21.8125 .727539 21.4741 .854492 21.2202 1.1084 cv
20.9663 1.3623 20.8379 1.71387 20.8345 2.16309 cv
19.9312 2.07031 li
19.9932 1.39648 20.2256 .882813 20.6294 .529785 cv
21.0332 .176758 21.5752 0 22.2554 0 cv
22.9424 0 23.4858 .19043 23.8862 .571289 cv
24.2866 .952148 24.4868 1.42432 24.4868 1.9873 cv
24.4868 2.27393 24.4282 2.55518 24.311 2.83203 cv
24.1938 3.10889 23.9995 3.3999 23.7275 3.70605 cv
23.4556 4.01221 23.0039 4.43213 22.3726 4.96582 cv
21.8452 5.40869 21.5068 5.70898 21.3569 5.8667 cv
21.207 6.02441 21.0835 6.18311 20.9858 6.34277 cv
24.4966 6.34277 li
cp
f
23.2676 39.8428 mo
22.3887 39.8428 li
22.3887 34.2422 li
22.1772 34.4438 21.8994 34.646 21.5562 34.8477 cv
21.2129 35.0493 20.9043 35.2007 20.6309 35.3018 cv
20.6309 34.4521 li
21.1226 34.2212 21.5522 33.9409 21.9199 33.6123 cv
22.2876 33.2837 22.5483 32.9644 22.7012 32.6553 cv
23.2676 32.6553 li
23.2676 39.8428 li
cp
f
12.5127 68.8867 mo
12.5127 70.062 12.6504 70.8438 12.9253 71.2329 cv
13.2002 71.6221 13.5396 71.8164 13.9434 71.8164 cv
14.3472 71.8164 14.6865 71.6211 14.9614 71.2305 cv
15.2363 70.8398 15.374 70.0586 15.374 68.8867 cv
15.374 67.7085 15.2363 66.9253 14.9614 66.5381 cv
14.6865 66.1509 14.3438 65.957 13.9336 65.957 cv
13.5298 65.957 13.2075 66.1279 12.9668 66.4697 cv
12.6641 66.9058 12.5127 67.7114 12.5127 68.8867 cv
cp
11.6094 68.8867 mo
11.6094 68.0405 11.6963 67.3594 11.8706 66.8433 cv
12.0449 66.3271 12.3037 65.9292 12.647 65.6494 cv
12.9902 65.3696 13.4224 65.2295 13.9434 65.2295 cv
14.3276 65.2295 14.6646 65.3066 14.9541 65.4614 cv
15.2437 65.6162 15.4829 65.8389 15.6719 66.1304 cv
15.8608 66.4219 16.0088 66.7764 16.1162 67.1948 cv
16.2236 67.6133 16.2773 68.1772 16.2773 68.8867 cv
16.2773 69.7266 16.1909 70.4043 16.0186 70.9204 cv
15.8462 71.4365 15.5879 71.835 15.2446 72.1167 cv
14.9014 72.3984 14.4673 72.5391 13.9434 72.5391 cv
13.2534 72.5391 12.7114 72.2915 12.3174 71.7969 cv
11.8452 71.2012 11.6094 70.231 11.6094 68.8867 cv
cp
f
17.6641 72.417 mo
17.6641 71.416 li
18.665 71.416 li
18.665 72.417 li
17.6641 72.417 li
cp
f
21.126 67.0459 mo
21.126 67.3843 21.2349 67.6611 21.4531 67.876 cv
21.6714 68.0908 21.9546 68.1982 22.3027 68.1982 cv
22.6411 68.1982 22.9189 68.0918 23.1353 67.8784 cv
23.3516 67.665 23.46 67.4038 23.46 67.0947 cv
23.46 66.7725 23.3486 66.5015 23.1255 66.2817 cv
22.9023 66.062 22.625 65.9521 22.293 65.9521 cv
21.9575 65.9521 21.6792 66.0596 21.458 66.2744 cv
21.2368 66.4893 21.126 66.7466 21.126 67.0459 cv
cp
20.8428 70.3516 mo
20.8428 70.6021 20.9023 70.8447 21.021 71.0791 cv
21.1396 71.3135 21.3164 71.4951 21.5508 71.6235 cv
21.7852 71.752 22.0376 71.8164 22.3076 71.8164 cv
22.7275 71.8164 23.0742 71.6812 23.3477 71.4111 cv
23.6211 71.1411 23.7578 70.7974 23.7578 70.3809 cv
23.7578 69.9575 23.6172 69.6079 23.3354 69.3311 cv
23.0537 69.0542 22.7017 68.916 22.2783 68.916 cv
21.8647 68.916 21.5225 69.0527 21.2505 69.3262 cv
20.9785 69.5996 20.8428 69.9414 20.8428 70.3516 cv
cp
21.3018 68.5352 mo
20.937 68.4019 20.667 68.2114 20.4912 67.9639 cv
20.3154 67.7163 20.2275 67.4204 20.2275 67.0752 cv
20.2275 66.5542 20.4146 66.1167 20.7891 65.7617 cv
21.1636 65.4067 21.6616 65.2295 22.2832 65.2295 cv
22.9082 65.2295 23.4111 65.4111 23.792 65.7739 cv
24.1729 66.1367 24.3633 66.5786 24.3633 67.0996 cv
24.3633 67.4316 24.2764 67.7207 24.1021 67.9663 cv
23.9277 68.2119 23.6636 68.4019 23.3086 68.5352 cv
23.748 68.6782 24.0825 68.9097 24.312 69.2285 cv
24.5415 69.5474 24.6563 69.9282 24.6563 70.3711 cv
24.6563 70.9829 24.4399 71.4976 24.0068 71.9141 cv
23.5737 72.3306 23.0044 72.5391 22.2979 72.5391 cv
21.5913 72.5391 21.022 72.3301 20.5889 71.9116 cv
20.1558 71.4932 19.9395 70.9717 19.9395 70.3467 cv
19.9395 69.8813 20.0576 69.4912 20.2935 69.1772 cv
20.5293 68.8633 20.8657 68.6489 21.3018 68.5352 cv
cp
f
12.5127 101.402 mo
12.5127 102.578 12.6504 103.359 12.9253 103.749 cv
13.2002 104.138 13.5396 104.332 13.9434 104.332 cv
14.3472 104.332 14.6865 104.137 14.9614 103.746 cv
15.2363 103.355 15.374 102.574 15.374 101.402 cv
15.374 100.224 15.2363 99.4409 14.9614 99.0537 cv
14.6865 98.6665 14.3438 98.4727 13.9336 98.4727 cv
13.5298 98.4727 13.2075 98.6436 12.9668 98.9854 cv
12.6641 99.4214 12.5127 100.227 12.5127 101.402 cv
cp
11.6094 101.402 mo
11.6094 100.556 11.6963 99.875 11.8706 99.3589 cv
12.0449 98.8428 12.3037 98.4448 12.647 98.165 cv
12.9902 97.8853 13.4224 97.7451 13.9434 97.7451 cv
14.3276 97.7451 14.6646 97.8223 14.9541 97.9771 cv
15.2437 98.1318 15.4829 98.3545 15.6719 98.646 cv
15.8608 98.9375 16.0088 99.292 16.1162 99.7104 cv
16.2236 100.129 16.2773 100.693 16.2773 101.402 cv
16.2773 102.242 16.1909 102.92 16.0186 103.436 cv
15.8462 103.952 15.5879 104.351 15.2446 104.632 cv
14.9014 104.914 14.4673 105.055 13.9434 105.055 cv
13.2534 105.055 12.7114 104.807 12.3174 104.313 cv
11.8452 103.717 11.6094 102.747 11.6094 101.402 cv
cp
f
17.6641 104.933 mo
17.6641 103.932 li
18.665 103.932 li
18.665 104.933 li
17.6641 104.933 li
cp
f
20.9209 102.613 mo
20.9209 102.916 20.9854 103.206 21.1138 103.482 cv
21.2422 103.759 21.4224 103.97 21.6533 104.115 cv
21.8843 104.26 22.127 104.332 22.3809 104.332 cv
22.752 104.332 23.0708 104.182 23.3379 103.883 cv
23.605 103.583 23.7383 103.176 23.7383 102.662 cv
23.7383 102.167 23.6064 101.777 23.3428 101.493 cv
23.0791 101.208 22.7471 101.065 22.3467 101.065 cv
21.9497 101.065 21.6128 101.208 21.3359 101.493 cv
21.0591 101.777 20.9209 102.151 20.9209 102.613 cv
cp
24.5098 99.5273 mo
23.6357 99.5957 li
23.5576 99.2505 23.4468 99 23.3037 98.8438 cv
23.0659 98.5933 22.7729 98.4678 22.4248 98.4678 cv
22.145 98.4678 21.8989 98.5459 21.6875 98.7021 cv
21.4106 98.9038 21.1929 99.1987 21.0332 99.5859 cv
20.8735 99.9731 20.7905 100.525 20.7842 101.241 cv
20.9956 100.919 21.2544 100.68 21.5605 100.523 cv
21.8667 100.367 22.187 100.289 22.5225 100.289 cv
23.1084 100.289 23.6074 100.505 24.019 100.936 cv
24.4307 101.367 24.6367 101.925 24.6367 102.608 cv
24.6367 103.058 24.54 103.475 24.3462 103.861 cv
24.1523 104.247 23.8862 104.542 23.5479 104.747 cv
23.2095 104.952 22.8252 105.055 22.3955 105.055 cv
21.6631 105.055 21.0659 104.785 20.6035 104.247 cv
20.1411 103.708 19.9102 102.82 19.9102 101.583 cv
19.9102 100.2 20.1655 99.1938 20.6768 98.5654 cv
21.1226 98.0186 21.7231 97.7451 22.4785 97.7451 cv
23.0415 97.7451 23.5029 97.9028 23.8628 98.2188 cv
24.2227 98.5347 24.438 98.9707 24.5098 99.5273 cv
cp
f
12.5127 134.025 mo
12.5127 135.201 12.6504 135.982 12.9253 136.372 cv
13.2002 136.76 13.5396 136.955 13.9434 136.955 cv
14.3472 136.955 14.6865 136.759 14.9614 136.369 cv
15.2363 135.978 15.374 135.197 15.374 134.025 cv
15.374 132.847 15.2363 132.064 14.9614 131.676 cv
14.6865 131.29 14.3438 131.095 13.9336 131.095 cv
13.5298 131.095 13.2075 131.266 12.9668 131.608 cv
12.6641 132.044 12.5127 132.85 12.5127 134.025 cv
cp
11.6094 134.025 mo
11.6094 133.179 11.6963 132.498 11.8706 131.982 cv
12.0449 131.465 12.3037 131.068 12.647 130.788 cv
12.9902 130.508 13.4224 130.368 13.9434 130.368 cv
14.3276 130.368 14.6646 130.445 14.9541 130.6 cv
15.2437 130.754 15.4829 130.977 15.6719 131.269 cv
15.8608 131.56 16.0088 131.915 16.1162 132.333 cv
16.2236 132.751 16.2773 133.316 16.2773 134.025 cv
16.2773 134.865 16.1909 135.542 16.0186 136.059 cv
15.8462 136.575 15.5879 136.973 15.2446 137.255 cv
14.9014 137.537 14.4673 137.677 13.9434 137.677 cv
13.2534 137.677 12.7114 137.43 12.3174 136.935 cv
11.8452 136.339 11.6094 135.37 11.6094 134.025 cv
cp
f
17.6641 137.555 mo
17.6641 136.554 li
18.665 136.554 li
18.665 137.555 li
17.6641 137.555 li
cp
f
22.7666 135.036 mo
22.7666 131.808 li
20.5254 135.036 li
22.7666 135.036 li
cp
22.7666 137.555 mo
22.7666 135.841 li
19.6611 135.841 li
19.6611 135.036 li
22.9277 130.397 li
23.6455 130.397 li
23.6455 135.036 li
24.6123 135.036 li
24.6123 135.841 li
23.6455 135.841 li
23.6455 137.555 li
22.7666 137.555 li
cp
f
12.5127 166.568 mo
12.5127 167.744 12.6504 168.525 12.9253 168.915 cv
13.2002 169.303 13.5396 169.498 13.9434 169.498 cv
14.3472 169.498 14.6865 169.302 14.9614 168.912 cv
15.2363 168.521 15.374 167.74 15.374 166.568 cv
15.374 165.39 15.2363 164.607 14.9614 164.219 cv
14.6865 163.833 14.3438 163.638 13.9336 163.638 cv
13.5298 163.638 13.2075 163.809 12.9668 164.151 cv
12.6641 164.587 12.5127 165.393 12.5127 166.568 cv
cp
11.6094 166.568 mo
11.6094 165.722 11.6963 165.041 11.8706 164.525 cv
12.0449 164.008 12.3037 163.611 12.647 163.331 cv
12.9902 163.051 13.4224 162.911 13.9434 162.911 cv
14.3276 162.911 14.6646 162.988 14.9541 163.143 cv
15.2437 163.297 15.4829 163.52 15.6719 163.812 cv
15.8608 164.103 16.0088 164.458 16.1162 164.876 cv
16.2236 165.294 16.2773 165.859 16.2773 166.568 cv
16.2773 167.408 16.1909 168.085 16.0186 168.602 cv
15.8462 169.118 15.5879 169.516 15.2446 169.798 cv
14.9014 170.08 14.4673 170.22 13.9434 170.22 cv
13.2534 170.22 12.7114 169.973 12.3174 169.478 cv
11.8452 168.882 11.6094 167.913 11.6094 166.568 cv
cp
f
17.6641 170.098 mo
17.6641 169.097 li
18.665 169.097 li
18.665 170.098 li
17.6641 170.098 li
cp
f
24.5684 169.253 mo
24.5684 170.098 li
19.8369 170.098 li
19.8306 169.887 19.8647 169.683 19.9395 169.488 cv
20.0601 169.166 20.2529 168.848 20.5181 168.536 cv
20.7832 168.223 21.1665 167.862 21.668 167.452 cv
22.4458 166.814 22.9717 166.308 23.2451 165.936 cv
23.5186 165.563 23.6553 165.21 23.6553 164.878 cv
23.6553 164.531 23.5308 164.237 23.2817 163.998 cv
23.0327 163.758 22.708 163.638 22.3076 163.638 cv
21.8843 163.638 21.5459 163.765 21.292 164.019 cv
21.0381 164.273 20.9097 164.625 20.9063 165.074 cv
20.0029 164.981 li
20.0649 164.307 20.2974 163.793 20.7012 163.441 cv
21.105 163.087 21.647 162.911 22.3271 162.911 cv
23.0142 162.911 23.5576 163.101 23.958 163.482 cv
24.3584 163.863 24.5586 164.335 24.5586 164.898 cv
24.5586 165.185 24.5 165.466 24.3828 165.743 cv
24.2656 166.02 24.0713 166.311 23.7993 166.617 cv
23.5273 166.923 23.0757 167.343 22.4443 167.876 cv
21.917 168.32 21.5786 168.62 21.4287 168.778 cv
21.2788 168.935 21.1553 169.094 21.0576 169.253 cv
24.5684 169.253 li
cp
f
20.7646 199.168 mo
20.7646 200.344 20.9023 201.125 21.1772 201.515 cv
21.4521 201.904 21.7915 202.098 22.1953 202.098 cv
22.5991 202.098 22.9385 201.903 23.2134 201.512 cv
23.4883 201.122 23.626 200.34 23.626 199.168 cv
23.626 197.991 23.4883 197.208 23.2134 196.82 cv
22.9385 196.433 22.5957 196.239 22.1855 196.239 cv
21.7817 196.239 21.4595 196.41 21.2188 196.751 cv
20.916 197.188 20.7646 197.994 20.7646 199.168 cv
cp
19.8613 199.168 mo
19.8613 198.323 19.9482 197.641 20.1226 197.125 cv
20.2969 196.609 20.5557 196.211 20.8989 195.931 cv
21.2422 195.652 21.6743 195.511 22.1953 195.511 cv
22.5796 195.511 22.9165 195.588 23.2061 195.744 cv
23.4956 195.898 23.7349 196.121 23.9238 196.413 cv
24.1128 196.704 24.2607 197.058 24.3682 197.477 cv
24.4756 197.895 24.5293 198.459 24.5293 199.168 cv
24.5293 200.008 24.4429 200.686 24.2705 201.203 cv
24.0981 201.718 23.8398 202.117 23.4966 202.399 cv
23.1533 202.68 22.7192 202.821 22.1953 202.821 cv
21.5054 202.821 20.9634 202.574 20.5693 202.079 cv
20.0972 201.483 19.8613 200.513 19.8613 199.168 cv
cp
f
25.8989 211.596 mo
25.02 211.596 li
25.02 205.996 li
24.8086 206.198 24.5308 206.4 24.1875 206.601 cv
23.8442 206.803 23.5356 206.955 23.2622 207.055 cv
23.2622 206.206 li
23.7539 205.975 24.1836 205.695 24.5513 205.366 cv
24.9189 205.038 25.1797 204.718 25.3325 204.409 cv
25.8989 204.409 li
25.8989 211.596 li
cp
f
29.0532 208.066 mo
29.0532 209.242 29.1909 210.023 29.4658 210.413 cv
29.7407 210.801 30.0801 210.996 30.4839 210.996 cv
30.8877 210.996 31.2271 210.8 31.502 210.41 cv
31.7769 210.019 31.9146 209.238 31.9146 208.066 cv
31.9146 206.888 31.7769 206.105 31.502 205.717 cv
31.2271 205.331 30.8843 205.136 30.4741 205.136 cv
30.0703 205.136 29.748 205.307 29.5073 205.649 cv
29.2046 206.085 29.0532 206.891 29.0532 208.066 cv
cp
28.1499 208.066 mo
28.1499 207.22 28.2368 206.539 28.4111 206.023 cv
28.5854 205.506 28.8442 205.109 29.1875 204.829 cv
29.5308 204.549 29.9629 204.409 30.4839 204.409 cv
30.8682 204.409 31.2051 204.486 31.4946 204.641 cv
31.7842 204.795 32.0234 205.018 32.2124 205.31 cv
32.4014 205.601 32.5493 205.956 32.6567 206.375 cv
32.7642 206.792 32.8179 207.357 32.8179 208.066 cv
32.8179 208.906 32.7314 209.583 32.5591 210.1 cv
32.3867 210.616 32.1284 211.014 31.7852 211.296 cv
31.4419 211.578 31.0078 211.718 30.4839 211.718 cv
29.7939 211.718 29.252 211.471 28.8579 210.976 cv
28.3857 210.38 28.1499 209.411 28.1499 208.066 cv
cp
f
36.8184 206.009 mo
36.8184 206.6 li
33.5083 206.6 li
33.5034 206.453 33.5273 206.31 33.5801 206.173 cv
33.6641 205.948 33.7993 205.726 33.9849 205.507 cv
34.1704 205.289 34.4385 205.036 34.7891 204.749 cv
35.3335 204.302 35.7012 203.949 35.8926 203.688 cv
36.084 203.427 36.1797 203.181 36.1797 202.949 cv
36.1797 202.705 36.0923 202.5 35.918 202.332 cv
35.7441 202.165 35.5166 202.081 35.2368 202.081 cv
34.9404 202.081 34.7036 202.169 34.5264 202.347 cv
34.3486 202.525 34.2583 202.771 34.2563 203.085 cv
33.6245 203.02 li
33.6675 202.549 33.8306 202.19 34.1128 201.943 cv
34.395 201.696 34.7744 201.572 35.2505 201.572 cv
35.731 201.572 36.1113 201.706 36.3911 201.971 cv
36.6714 202.238 36.8115 202.568 36.8115 202.962 cv
36.8115 203.163 36.7705 203.36 36.6885 203.553 cv
36.6064 203.747 36.4702 203.951 36.2803 204.165 cv
36.0903 204.378 35.7739 204.672 35.3325 205.046 cv
34.9634 205.356 34.7266 205.566 34.6216 205.676 cv
34.5171 205.787 34.4307 205.898 34.3623 206.009 cv
36.8184 206.009 li
cp
f
78.8989 211.596 mo
78.02 211.596 li
78.02 205.996 li
77.8086 206.198 77.5308 206.4 77.1875 206.601 cv
76.8442 206.803 76.5356 206.955 76.2622 207.055 cv
76.2622 206.206 li
76.7539 205.975 77.1836 205.695 77.5513 205.366 cv
77.9189 205.038 78.1797 204.718 78.3325 204.409 cv
78.8989 204.409 li
78.8989 211.596 li
cp
f
82.0532 208.066 mo
82.0532 209.242 82.1909 210.023 82.4658 210.413 cv
82.7407 210.801 83.0801 210.996 83.4839 210.996 cv
83.8877 210.996 84.2271 210.8 84.502 210.41 cv
84.7769 210.019 84.9146 209.238 84.9146 208.066 cv
84.9146 206.888 84.7769 206.105 84.502 205.717 cv
84.2271 205.331 83.8843 205.136 83.4741 205.136 cv
83.0703 205.136 82.748 205.307 82.5073 205.649 cv
82.2046 206.085 82.0532 206.891 82.0532 208.066 cv
cp
81.1499 208.066 mo
81.1499 207.22 81.2368 206.539 81.4111 206.023 cv
81.5854 205.506 81.8442 205.109 82.1875 204.829 cv
82.5308 204.549 82.9629 204.409 83.4839 204.409 cv
83.8682 204.409 84.2051 204.486 84.4946 204.641 cv
84.7842 204.795 85.0234 205.018 85.2124 205.31 cv
85.4014 205.601 85.5493 205.956 85.6567 206.375 cv
85.7642 206.792 85.8179 207.357 85.8179 208.066 cv
85.8179 208.906 85.7314 209.583 85.5591 210.1 cv
85.3867 210.616 85.1284 211.014 84.7852 211.296 cv
84.4419 211.578 84.0078 211.718 83.4839 211.718 cv
82.7939 211.718 82.252 211.471 81.8579 210.976 cv
81.3857 210.38 81.1499 209.411 81.1499 208.066 cv
cp
f
86.5903 205.279 mo
87.2051 205.197 li
87.2754 205.544 87.396 205.795 87.5654 205.95 cv
87.7349 206.103 87.9419 206.18 88.1855 206.18 cv
88.4746 206.18 88.7188 206.08 88.918 205.879 cv
89.1172 205.679 89.2173 205.431 89.2173 205.135 cv
89.2173 204.852 89.125 204.62 88.9404 204.436 cv
88.7559 204.253 88.5215 204.162 88.2368 204.162 cv
88.1206 204.162 87.9761 204.184 87.8027 204.23 cv
87.8711 203.69 li
87.9121 203.695 87.9453 203.697 87.9702 203.697 cv
88.2319 203.697 88.4678 203.628 88.6772 203.492 cv
88.8867 203.355 88.9917 203.144 88.9917 202.86 cv
88.9917 202.634 88.9155 202.448 88.7627 202.299 cv
88.6104 202.152 88.4131 202.078 88.1719 202.078 cv
87.9326 202.078 87.7334 202.153 87.5742 202.303 cv
87.4146 202.454 87.312 202.679 87.2666 202.979 cv
86.6519 202.87 li
86.7266 202.458 86.8975 202.138 87.1641 201.912 cv
87.4307 201.685 87.7617 201.572 88.1582 201.572 cv
88.4312 201.572 88.6831 201.63 88.9131 201.748 cv
89.1431 201.865 89.3188 202.025 89.4409 202.228 cv
89.5625 202.43 89.6235 202.646 89.6235 202.874 cv
89.6235 203.09 89.5654 203.287 89.4492 203.464 cv
89.333 203.642 89.1611 203.784 88.9336 203.888 cv
89.2295 203.957 89.4595 204.098 89.6235 204.313 cv
89.7876 204.529 89.8696 204.798 89.8696 205.122 cv
89.8696 205.558 89.71 205.929 89.3911 206.233 cv
89.0723 206.538 88.6694 206.689 88.1821 206.689 cv
87.7427 206.689 87.3774 206.558 87.0874 206.296 cv
86.7969 206.035 86.6313 205.695 86.5903 205.279 cv
cp
f
132.042 211.596 mo
131.163 211.596 li
131.163 205.996 li
130.951 206.198 130.673 206.4 130.33 206.601 cv
129.987 206.803 129.678 206.955 129.405 207.055 cv
129.405 206.206 li
129.896 205.975 130.326 205.695 130.694 205.366 cv
131.062 205.038 131.322 204.718 131.475 204.409 cv
132.042 204.409 li
132.042 211.596 li
cp
f
135.196 208.066 mo
135.196 209.242 135.333 210.023 135.608 210.413 cv
135.883 210.801 136.223 210.996 136.626 210.996 cv
137.03 210.996 137.37 210.8 137.645 210.41 cv
137.919 210.019 138.057 209.238 138.057 208.066 cv
138.057 206.888 137.919 206.105 137.645 205.717 cv
137.37 205.331 137.027 205.136 136.617 205.136 cv
136.213 205.136 135.891 205.307 135.65 205.649 cv
135.347 206.085 135.196 206.891 135.196 208.066 cv
cp
134.292 208.066 mo
134.292 207.22 134.379 206.539 134.554 206.023 cv
134.728 205.506 134.987 205.109 135.33 204.829 cv
135.673 204.549 136.105 204.409 136.626 204.409 cv
137.011 204.409 137.348 204.486 137.637 204.641 cv
137.927 204.795 138.166 205.018 138.355 205.31 cv
138.544 205.601 138.692 205.956 138.799 206.375 cv
138.907 206.792 138.96 207.357 138.96 208.066 cv
138.96 208.906 138.874 209.583 138.702 210.1 cv
138.529 210.616 138.271 211.014 137.928 211.296 cv
137.584 211.578 137.15 211.718 136.626 211.718 cv
135.937 211.718 135.395 211.471 135 210.976 cv
134.528 210.38 134.292 209.411 134.292 208.066 cv
cp
f
141.7 204.837 mo
141.7 202.58 li
140.132 204.837 li
141.7 204.837 li
cp
141.7 206.6 mo
141.7 205.401 li
139.528 205.401 li
139.528 204.837 li
141.813 201.592 li
142.315 201.592 li
142.315 204.837 li
142.992 204.837 li
142.992 205.401 li
142.315 205.401 li
142.315 206.6 li
141.7 206.6 li
cp
f
185.038 211.596 mo
184.159 211.596 li
184.159 205.996 li
183.948 206.198 183.67 206.4 183.327 206.601 cv
182.983 206.803 182.675 206.955 182.401 207.055 cv
182.401 206.206 li
182.894 205.975 183.323 205.695 183.69 205.366 cv
184.059 205.038 184.319 204.718 184.472 204.409 cv
185.038 204.409 li
185.038 211.596 li
cp
f
188.192 208.066 mo
188.192 209.242 188.33 210.023 188.605 210.413 cv
188.88 210.801 189.22 210.996 189.623 210.996 cv
190.027 210.996 190.366 210.8 190.642 210.41 cv
190.916 210.019 191.054 209.238 191.054 208.066 cv
191.054 206.888 190.916 206.105 190.642 205.717 cv
190.366 205.331 190.023 205.136 189.613 205.136 cv
189.21 205.136 188.888 205.307 188.646 205.649 cv
188.344 206.085 188.192 206.891 188.192 208.066 cv
cp
187.289 208.066 mo
187.289 207.22 187.376 206.539 187.551 206.023 cv
187.725 205.506 187.983 205.109 188.327 204.829 cv
188.67 204.549 189.103 204.409 189.623 204.409 cv
190.008 204.409 190.345 204.486 190.634 204.641 cv
190.924 204.795 191.163 205.018 191.352 205.31 cv
191.541 205.601 191.688 205.956 191.796 206.375 cv
191.903 206.792 191.957 207.357 191.957 208.066 cv
191.957 208.906 191.871 209.583 191.698 210.1 cv
191.526 210.616 191.268 211.014 190.925 211.296 cv
190.581 211.578 190.147 211.718 189.623 211.718 cv
188.934 211.718 188.392 211.471 187.997 210.976 cv
187.525 210.38 187.289 209.411 187.289 208.066 cv
cp
f
192.727 205.289 mo
193.372 205.234 li
193.42 205.548 193.53 205.785 193.705 205.943 cv
193.879 206.101 194.089 206.18 194.335 206.18 cv
194.631 206.18 194.882 206.069 195.087 205.845 cv
195.292 205.623 195.395 205.326 195.395 204.958 cv
195.395 204.607 195.296 204.33 195.099 204.127 cv
194.901 203.924 194.644 203.823 194.325 203.823 cv
194.127 203.823 193.948 203.868 193.788 203.958 cv
193.629 204.048 193.504 204.165 193.413 204.308 cv
192.836 204.233 li
193.32 201.661 li
195.811 201.661 li
195.811 202.249 li
193.813 202.249 li
193.543 203.594 li
193.843 203.384 194.158 203.28 194.489 203.28 cv
194.926 203.28 195.295 203.431 195.596 203.734 cv
195.896 204.038 196.047 204.426 196.047 204.903 cv
196.047 205.356 195.914 205.748 195.65 206.078 cv
195.329 206.483 194.891 206.686 194.335 206.686 cv
193.88 206.686 193.508 206.558 193.22 206.303 cv
192.932 206.048 192.768 205.709 192.727 205.289 cv
cp
f
238.196 211.596 mo
237.317 211.596 li
237.317 205.996 li
237.106 206.198 236.828 206.4 236.485 206.601 cv
236.142 206.803 235.833 206.955 235.56 207.055 cv
235.56 206.206 li
236.052 205.975 236.481 205.695 236.849 205.366 cv
237.217 205.038 237.478 204.718 237.63 204.409 cv
238.196 204.409 li
238.196 211.596 li
cp
f
241.351 208.066 mo
241.351 209.242 241.488 210.023 241.764 210.413 cv
242.038 210.801 242.378 210.996 242.781 210.996 cv
243.186 210.996 243.524 210.8 243.8 210.41 cv
244.074 210.019 244.212 209.238 244.212 208.066 cv
244.212 206.888 244.074 206.105 243.8 205.717 cv
243.524 205.331 243.182 205.136 242.771 205.136 cv
242.368 205.136 242.046 205.307 241.805 205.649 cv
241.502 206.085 241.351 206.891 241.351 208.066 cv
cp
240.447 208.066 mo
240.447 207.22 240.534 206.539 240.709 206.023 cv
240.883 205.506 241.142 205.109 241.485 204.829 cv
241.828 204.549 242.261 204.409 242.781 204.409 cv
243.166 204.409 243.503 204.486 243.792 204.641 cv
244.082 204.795 244.321 205.018 244.51 205.31 cv
244.699 205.601 244.847 205.956 244.954 206.375 cv
245.062 206.792 245.115 207.357 245.115 208.066 cv
245.115 208.906 245.029 209.583 244.856 210.1 cv
244.685 210.616 244.426 211.014 244.083 211.296 cv
243.739 211.578 243.306 211.718 242.781 211.718 cv
242.092 211.718 241.55 211.471 241.155 210.976 cv
240.684 210.38 240.447 209.411 240.447 208.066 cv
cp
f
246.564 204.978 mo
246.564 205.19 246.609 205.392 246.699 205.585 cv
246.789 205.78 246.915 205.927 247.076 206.028 cv
247.238 206.129 247.408 206.18 247.586 206.18 cv
247.845 206.18 248.068 206.076 248.255 205.866 cv
248.441 205.657 248.535 205.372 248.535 205.012 cv
248.535 204.666 248.443 204.393 248.259 204.194 cv
248.074 203.995 247.842 203.895 247.562 203.895 cv
247.284 203.895 247.048 203.995 246.854 204.194 cv
246.661 204.393 246.564 204.655 246.564 204.978 cv
cp
249.075 202.819 mo
248.464 202.867 li
248.409 202.625 248.331 202.45 248.231 202.34 cv
248.064 202.166 247.86 202.078 247.616 202.078 cv
247.42 202.078 247.248 202.132 247.101 202.242 cv
246.907 202.382 246.754 202.588 246.643 202.86 cv
246.531 203.13 246.473 203.517 246.469 204.018 cv
246.616 203.792 246.798 203.625 247.012 203.516 cv
247.226 203.407 247.45 203.352 247.685 203.352 cv
248.095 203.352 248.443 203.502 248.731 203.804 cv
249.02 204.106 249.164 204.496 249.164 204.974 cv
249.164 205.289 249.096 205.581 248.961 205.85 cv
248.825 206.121 248.639 206.327 248.402 206.47 cv
248.165 206.614 247.896 206.686 247.596 206.686 cv
247.083 206.686 246.665 206.498 246.342 206.121 cv
246.019 205.744 245.857 205.123 245.857 204.257 cv
245.857 203.29 246.036 202.585 246.394 202.146 cv
246.705 201.763 247.126 201.572 247.654 201.572 cv
248.048 201.572 248.371 201.682 248.622 201.903 cv
248.874 202.125 249.024 202.429 249.075 202.819 cv
cp
f
291.366 211.596 mo
290.487 211.596 li
290.487 205.996 li
290.276 206.198 289.998 206.4 289.655 206.601 cv
289.312 206.803 289.003 206.955 288.729 207.055 cv
288.729 206.206 li
289.222 205.975 289.651 205.695 290.019 205.366 cv
290.387 205.038 290.647 204.718 290.8 204.409 cv
291.366 204.409 li
291.366 211.596 li
cp
f
294.521 208.066 mo
294.521 209.242 294.658 210.023 294.934 210.413 cv
295.208 210.801 295.548 210.996 295.951 210.996 cv
296.355 210.996 296.694 210.8 296.97 210.41 cv
297.244 210.019 297.382 209.238 297.382 208.066 cv
297.382 206.888 297.244 206.105 296.97 205.717 cv
296.694 205.331 296.352 205.136 295.941 205.136 cv
295.538 205.136 295.216 205.307 294.975 205.649 cv
294.672 206.085 294.521 206.891 294.521 208.066 cv
cp
293.617 208.066 mo
293.617 207.22 293.704 206.539 293.879 206.023 cv
294.053 205.506 294.312 205.109 294.655 204.829 cv
294.998 204.549 295.431 204.409 295.951 204.409 cv
296.336 204.409 296.673 204.486 296.962 204.641 cv
297.252 204.795 297.491 205.018 297.68 205.31 cv
297.869 205.601 298.017 205.956 298.124 206.375 cv
298.231 206.792 298.285 207.357 298.285 208.066 cv
298.285 208.906 298.199 209.583 298.026 210.1 cv
297.854 210.616 297.596 211.014 297.253 211.296 cv
296.909 211.578 296.476 211.718 295.951 211.718 cv
295.262 211.718 294.72 211.471 294.325 210.976 cv
293.854 210.38 293.617 209.411 293.617 208.066 cv
cp
f
299.096 202.249 mo
299.096 201.658 li
302.337 201.658 li
302.337 202.135 li
302.019 202.475 301.702 202.926 301.389 203.489 cv
301.076 204.051 300.834 204.629 300.663 205.224 cv
300.54 205.643 300.462 206.102 300.428 206.6 cv
299.796 206.6 li
299.803 206.207 299.88 205.73 300.028 205.172 cv
300.176 204.615 300.389 204.077 300.665 203.558 cv
300.941 203.041 301.236 202.604 301.548 202.249 cv
299.096 202.249 li
cp
f
134 86.0029 mo
134 78.8447 li
135.426 78.8447 li
137.121 83.9131 li
137.277 84.3853 137.391 84.7383 137.462 84.9727 cv
137.544 84.7124 137.671 84.3296 137.843 83.8252 cv
139.557 78.8447 li
140.832 78.8447 li
140.832 86.0029 li
139.918 86.0029 li
139.918 80.0117 li
137.838 86.0029 li
136.984 86.0029 li
134.914 79.9092 li
134.914 86.0029 li
134 86.0029 li
cp
f
143.61 86.0029 mo
141.71 78.8447 li
142.682 78.8447 li
143.771 83.5371 li
143.888 84.0288 143.989 84.5171 144.074 85.002 cv
144.256 84.2368 144.363 83.7959 144.396 83.6787 cv
145.758 78.8447 li
146.901 78.8447 li
147.926 82.4678 li
148.184 83.3662 148.369 84.2109 148.483 85.002 cv
148.574 84.5493 148.693 84.0303 148.839 83.4443 cv
149.962 78.8447 li
150.915 78.8447 li
148.952 86.0029 li
148.039 86.0029 li
146.53 80.5488 li
146.403 80.0933 146.328 79.813 146.305 79.709 cv
146.23 80.0376 146.16 80.3179 146.095 80.5488 cv
144.577 86.0029 li
143.61 86.0029 li
cp
f
152.745 82.248 mo
154.596 82.248 li
155.208 82.248 155.643 82.1343 155.899 81.9063 cv
156.157 81.6782 156.285 81.3579 156.285 80.9443 cv
156.285 80.645 156.21 80.3887 156.059 80.1753 cv
155.907 79.9619 155.708 79.8213 155.46 79.7529 cv
155.301 79.7104 155.006 79.6895 154.576 79.6895 cv
152.745 79.6895 li
152.745 82.248 li
cp
151.798 86.0029 mo
151.798 78.8447 li
154.498 78.8447 li
154.974 78.8447 155.337 78.8677 155.587 78.9131 cv
155.938 78.9717 156.233 79.083 156.471 79.2476 cv
156.709 79.4121 156.899 79.6421 157.045 79.9385 cv
157.189 80.2349 157.262 80.5601 157.262 80.915 cv
157.262 81.5239 157.068 82.0391 156.681 82.4604 cv
156.294 82.8818 155.594 83.0928 154.581 83.0928 cv
152.745 83.0928 li
152.745 86.0029 li
151.798 86.0029 li
cp
f
163.575 83.4932 mo
164.522 83.7324 li
164.324 84.5103 163.967 85.1035 163.451 85.5122 cv
162.935 85.9209 162.305 86.125 161.559 86.125 cv
160.787 86.125 160.16 85.9678 159.677 85.6538 cv
159.193 85.3398 158.825 84.8848 158.573 84.2891 cv
158.32 83.6934 158.194 83.0537 158.194 82.3701 cv
158.194 81.6245 158.337 80.9746 158.622 80.4194 cv
158.906 79.8643 159.312 79.4429 159.838 79.1548 cv
160.363 78.8667 160.942 78.7227 161.573 78.7227 cv
162.29 78.7227 162.892 78.9048 163.38 79.2695 cv
163.868 79.6343 164.209 80.147 164.4 80.8076 cv
163.468 81.0273 li
163.302 80.5063 163.062 80.1274 162.745 79.8896 cv
162.43 79.6519 162.032 79.5332 161.554 79.5332 cv
161.004 79.5332 160.544 79.665 160.175 79.9287 cv
159.805 80.1924 159.546 80.5464 159.396 80.9907 cv
159.246 81.4351 159.171 81.8931 159.171 82.3652 cv
159.171 82.9741 159.26 83.5054 159.438 83.9595 cv
159.614 84.4136 159.891 84.7529 160.265 84.9775 cv
160.64 85.2021 161.045 85.3145 161.48 85.3145 cv
162.012 85.3145 162.461 85.1616 162.828 84.8555 cv
163.196 84.5493 163.445 84.0952 163.575 83.4932 cv
cp
f
196.593 21.1465 mo
196.593 20.3066 li
199.625 20.3018 li
199.625 22.958 li
199.16 23.3291 198.68 23.6084 198.185 23.7954 cv
197.69 23.9824 197.183 24.0762 196.661 24.0762 cv
195.958 24.0762 195.319 23.9258 194.745 23.6245 cv
194.17 23.3232 193.736 22.8882 193.443 22.3184 cv
193.15 21.7485 193.004 21.1123 193.004 20.4092 cv
193.004 19.7124 193.149 19.0625 193.441 18.4585 cv
193.732 17.8545 194.151 17.4063 194.698 17.1133 cv
195.245 16.8203 195.875 16.6738 196.588 16.6738 cv
197.105 16.6738 197.573 16.7578 197.992 16.9253 cv
198.41 17.0928 198.738 17.3267 198.976 17.626 cv
199.214 17.9253 199.395 18.3159 199.518 18.7979 cv
198.663 19.0322 li
198.556 18.6675 198.423 18.3813 198.263 18.1729 cv
198.104 17.9644 197.876 17.7979 197.579 17.6724 cv
197.283 17.5469 196.954 17.4844 196.593 17.4844 cv
196.16 17.4844 195.786 17.5503 195.47 17.6821 cv
195.154 17.814 194.899 17.9873 194.706 18.2021 cv
194.512 18.417 194.361 18.6528 194.254 18.9102 cv
194.072 19.353 193.98 19.833 193.98 20.3506 cv
193.98 20.9888 194.091 21.5225 194.311 21.9521 cv
194.53 22.3818 194.85 22.7007 195.27 22.9092 cv
195.689 23.1177 196.136 23.2217 196.607 23.2217 cv
197.018 23.2217 197.418 23.1426 197.809 22.9849 cv
198.199 22.8271 198.496 22.6587 198.697 22.4795 cv
198.697 21.1465 li
196.593 21.1465 li
cp
f
201.041 23.9541 mo
201.041 16.7959 li
206.217 16.7959 li
206.217 17.6406 li
201.988 17.6406 li
201.988 19.833 li
205.948 19.833 li
205.948 20.6729 li
201.988 20.6729 li
201.988 23.1094 li
206.383 23.1094 li
206.383 23.9541 li
201.041 23.9541 li
cp
f
207.662 23.9541 mo
207.662 16.7959 li
209.088 16.7959 li
210.782 21.8643 li
210.938 22.3364 211.053 22.6895 211.124 22.9238 cv
211.206 22.6636 211.333 22.2808 211.505 21.7764 cv
213.219 16.7959 li
214.493 16.7959 li
214.493 23.9541 li
213.58 23.9541 li
213.58 17.9629 li
211.5 23.9541 li
210.646 23.9541 li
208.575 17.8604 li
208.575 23.9541 li
207.662 23.9541 li
cp
f
215.841 185.215 mo
217.877 185.215 li
218.311 185.215 218.648 185.17 218.893 185.081 cv
219.137 184.992 219.322 184.848 219.449 184.651 cv
219.576 184.455 219.64 184.24 219.64 184.009 cv
219.64 183.67 219.517 183.392 219.271 183.174 cv
219.025 182.956 218.638 182.847 218.106 182.847 cv
215.841 182.847 li
215.841 185.215 li
cp
214.894 189.214 mo
214.894 182.056 li
218.067 182.056 li
218.706 182.056 219.19 182.121 219.522 182.249 cv
219.854 182.377 220.12 182.604 220.318 182.93 cv
220.518 183.255 220.616 183.615 220.616 184.009 cv
220.616 184.517 220.452 184.945 220.123 185.293 cv
219.795 185.641 219.287 185.863 218.6 185.958 cv
218.851 186.078 219.041 186.197 219.171 186.314 cv
219.448 186.568 219.71 186.885 219.957 187.266 cv
221.202 189.214 li
220.011 189.214 li
219.063 187.725 li
218.787 187.295 218.56 186.966 218.38 186.739 cv
218.201 186.51 218.041 186.351 217.899 186.26 cv
217.758 186.168 217.613 186.105 217.467 186.07 cv
217.359 186.046 217.184 186.036 216.939 186.036 cv
215.841 186.036 li
215.841 189.214 li
214.894 189.214 li
cp
f
225.299 186.612 mo
224.98 186.742 224.502 186.852 223.863 186.944 cv
223.502 186.996 223.247 187.054 223.097 187.12 cv
222.947 187.184 222.832 187.28 222.75 187.405 cv
222.669 187.531 222.628 187.669 222.628 187.823 cv
222.628 188.057 222.717 188.252 222.895 188.409 cv
223.071 188.565 223.331 188.643 223.673 188.643 cv
224.012 188.643 224.313 188.569 224.576 188.42 cv
224.84 188.273 225.034 188.07 225.157 187.813 cv
225.252 187.614 225.299 187.321 225.299 186.934 cv
225.299 186.612 li
cp
225.372 188.575 mo
225.047 188.851 224.733 189.046 224.433 189.161 cv
224.131 189.274 223.809 189.332 223.463 189.332 cv
222.894 189.332 222.456 189.192 222.149 188.914 cv
221.844 188.635 221.69 188.28 221.69 187.847 cv
221.69 187.593 221.748 187.361 221.864 187.151 cv
221.979 186.941 222.131 186.773 222.318 186.646 cv
222.505 186.519 222.716 186.422 222.95 186.358 cv
223.123 186.312 223.384 186.268 223.731 186.226 cv
224.441 186.141 224.964 186.041 225.299 185.923 cv
225.303 185.802 225.304 185.726 225.304 185.694 cv
225.304 185.335 225.221 185.083 225.055 184.937 cv
224.83 184.738 224.497 184.639 224.054 184.639 cv
223.641 184.639 223.335 184.711 223.139 184.856 cv
222.941 185.001 222.796 185.257 222.701 185.625 cv
221.842 185.508 li
221.92 185.14 222.049 184.843 222.228 184.617 cv
222.407 184.391 222.666 184.216 223.004 184.094 cv
223.343 183.972 223.735 183.912 224.181 183.912 cv
224.624 183.912 224.983 183.963 225.26 184.068 cv
225.537 184.171 225.74 184.303 225.87 184.46 cv
226.001 184.619 226.092 184.818 226.144 185.059 cv
226.173 185.208 226.188 185.479 226.188 185.87 cv
226.188 187.042 li
226.188 187.858 226.206 188.375 226.244 188.591 cv
226.281 188.808 226.355 189.015 226.466 189.214 cv
225.548 189.214 li
225.457 189.032 225.398 188.819 225.372 188.575 cv
cp
f
229.469 188.428 mo
229.596 189.205 li
229.349 189.256 229.127 189.283 228.932 189.283 cv
228.613 189.283 228.365 189.232 228.189 189.131 cv
228.014 189.03 227.891 188.898 227.818 188.733 cv
227.747 188.569 227.711 188.223 227.711 187.696 cv
227.711 184.712 li
227.066 184.712 li
227.066 184.029 li
227.711 184.029 li
227.711 182.745 li
228.585 182.217 li
228.585 184.029 li
229.469 184.029 li
229.469 184.712 li
228.585 184.712 li
228.585 187.745 li
228.585 187.995 228.601 188.156 228.632 188.228 cv
228.662 188.299 228.713 188.356 228.783 188.399 cv
228.853 188.441 228.953 188.462 229.083 188.462 cv
229.181 188.462 229.31 188.451 229.469 188.428 cv
cp
f
230.992 186.124 mo
233.888 186.124 li
233.849 185.687 233.738 185.36 233.556 185.142 cv
233.276 184.803 232.913 184.634 232.467 184.634 cv
232.063 184.634 231.724 184.769 231.449 185.04 cv
231.174 185.309 231.021 185.67 230.992 186.124 cv
cp
233.878 187.544 mo
234.786 187.657 li
234.644 188.187 234.378 188.599 233.99 188.892 cv
233.604 189.185 233.108 189.332 232.506 189.332 cv
231.748 189.332 231.146 189.098 230.702 188.63 cv
230.258 188.164 230.035 187.508 230.035 186.666 cv
230.035 185.792 230.26 185.116 230.709 184.634 cv
231.158 184.152 231.741 183.912 232.457 183.912 cv
233.15 183.912 233.717 184.147 234.156 184.62 cv
234.596 185.091 234.815 185.755 234.815 186.612 cv
234.815 186.664 234.814 186.742 234.811 186.846 cv
230.943 186.846 li
230.977 187.416 231.138 187.852 231.427 188.155 cv
231.717 188.458 232.078 188.609 232.511 188.609 cv
232.833 188.609 233.108 188.524 233.336 188.355 cv
233.564 188.185 233.745 187.916 233.878 187.544 cv
cp
f
243.126 191.319 mo
242.642 190.707 242.231 189.991 241.896 189.17 cv
241.561 188.35 241.393 187.5 241.393 186.622 cv
241.393 185.846 241.519 185.104 241.769 184.395 cv
242.062 183.571 242.515 182.75 243.126 181.934 cv
243.756 181.934 li
243.362 182.611 243.102 183.094 242.975 183.384 cv
242.776 183.833 242.62 184.302 242.506 184.791 cv
242.366 185.399 242.296 186.011 242.296 186.626 cv
242.296 188.192 242.783 189.756 243.756 191.319 cv
243.126 191.319 li
cp
f
244.776 189.214 mo
244.776 184.029 li
245.563 184.029 li
245.563 184.756 li
245.726 184.502 245.942 184.298 246.212 184.143 cv
246.482 183.989 246.79 183.912 247.135 183.912 cv
247.52 183.912 247.834 183.991 248.08 184.151 cv
248.325 184.31 248.499 184.533 248.6 184.82 cv
249.01 184.214 249.544 183.912 250.201 183.912 cv
250.716 183.912 251.111 184.054 251.388 184.338 cv
251.665 184.624 251.803 185.062 251.803 185.655 cv
251.803 189.214 li
250.929 189.214 li
250.929 185.948 li
250.929 185.596 250.9 185.343 250.844 185.188 cv
250.786 185.034 250.684 184.909 250.533 184.815 cv
250.384 184.72 250.208 184.673 250.006 184.673 cv
249.642 184.673 249.339 184.794 249.098 185.037 cv
248.857 185.28 248.736 185.667 248.736 186.202 cv
248.736 189.214 li
247.857 189.214 li
247.857 185.845 li
247.857 185.455 247.786 185.162 247.643 184.966 cv
247.5 184.771 247.266 184.673 246.939 184.673 cv
246.692 184.673 246.464 184.738 246.254 184.869 cv
246.044 184.999 245.892 185.189 245.797 185.44 cv
245.703 185.69 245.655 186.051 245.655 186.524 cv
245.655 189.214 li
244.776 189.214 li
cp
f
253.106 189.214 mo
253.106 184.029 li
253.893 184.029 li
253.893 184.756 li
254.056 184.502 254.272 184.298 254.542 184.143 cv
254.813 183.989 255.12 183.912 255.465 183.912 cv
255.85 183.912 256.164 183.991 256.41 184.151 cv
256.655 184.31 256.829 184.533 256.93 184.82 cv
257.34 184.214 257.874 183.912 258.531 183.912 cv
259.046 183.912 259.441 184.054 259.718 184.338 cv
259.995 184.624 260.133 185.062 260.133 185.655 cv
260.133 189.214 li
259.259 189.214 li
259.259 185.948 li
259.259 185.596 259.23 185.343 259.174 185.188 cv
259.116 185.034 259.014 184.909 258.863 184.815 cv
258.714 184.72 258.538 184.673 258.336 184.673 cv
257.972 184.673 257.669 184.794 257.428 185.037 cv
257.188 185.28 257.066 185.667 257.066 186.202 cv
257.066 189.214 li
256.188 189.214 li
256.188 185.845 li
256.188 185.455 256.116 185.162 255.973 184.966 cv
255.83 184.771 255.596 184.673 255.27 184.673 cv
255.022 184.673 254.794 184.738 254.584 184.869 cv
254.374 184.999 254.222 185.189 254.127 185.44 cv
254.033 185.69 253.985 186.051 253.985 186.524 cv
253.985 189.214 li
253.106 189.214 li
cp
f
261 182.715 mo
261 182.096 li
262.889 182.096 li
262.889 182.715 li
261 182.715 li
cp
f
266.629 183.627 mo
266.629 184.218 li
263.319 184.218 li
263.314 184.07 263.338 183.927 263.391 183.791 cv
263.475 183.566 263.61 183.343 263.796 183.125 cv
263.981 182.907 264.249 182.654 264.6 182.367 cv
265.145 181.92 265.512 181.567 265.703 181.306 cv
265.895 181.045 265.99 180.798 265.99 180.566 cv
265.99 180.323 265.903 180.117 265.729 179.95 cv
265.555 179.783 265.327 179.699 265.048 179.699 cv
264.751 179.699 264.515 179.788 264.337 179.965 cv
264.159 180.143 264.069 180.388 264.067 180.703 cv
263.436 180.638 li
263.479 180.167 263.642 179.807 263.924 179.56 cv
264.206 179.313 264.585 179.19 265.062 179.19 cv
265.542 179.19 265.922 179.323 266.202 179.589 cv
266.482 179.856 266.622 180.186 266.622 180.58 cv
266.622 180.781 266.581 180.977 266.499 181.171 cv
266.417 181.365 266.281 181.569 266.091 181.783 cv
265.901 181.997 265.585 182.291 265.144 182.664 cv
264.774 182.973 264.537 183.183 264.433 183.294 cv
264.328 183.405 264.241 183.515 264.173 183.627 cv
266.629 183.627 li
cp
f
269.249 187.667 mo
270.118 187.53 li
270.167 187.877 270.303 188.145 270.526 188.331 cv
270.749 188.516 271.061 188.609 271.461 188.609 cv
271.865 188.609 272.164 188.527 272.359 188.362 cv
272.555 188.198 272.652 188.004 272.652 187.784 cv
272.652 187.584 272.566 187.428 272.394 187.315 cv
272.273 187.237 271.974 187.137 271.495 187.017 cv
270.851 186.854 270.404 186.713 270.155 186.594 cv
269.906 186.476 269.717 186.311 269.589 186.101 cv
269.46 185.891 269.396 185.66 269.396 185.406 cv
269.396 185.174 269.448 184.96 269.555 184.763 cv
269.66 184.567 269.805 184.403 269.986 184.273 cv
270.123 184.171 270.31 184.086 270.546 184.016 cv
270.781 183.947 271.035 183.912 271.305 183.912 cv
271.712 183.912 272.069 183.97 272.377 184.087 cv
272.685 184.205 272.911 184.363 273.058 184.563 cv
273.204 184.763 273.306 185.031 273.36 185.367 cv
272.501 185.484 li
272.462 185.216 272.349 185.008 272.162 184.859 cv
271.975 184.708 271.71 184.634 271.368 184.634 cv
270.965 184.634 270.677 184.701 270.504 184.834 cv
270.332 184.967 270.245 185.124 270.245 185.303 cv
270.245 185.417 270.281 185.519 270.353 185.611 cv
270.425 185.705 270.537 185.783 270.689 185.845 cv
270.777 185.877 271.036 185.953 271.466 186.07 cv
272.088 186.236 272.521 186.372 272.768 186.477 cv
273.013 186.583 273.206 186.737 273.346 186.939 cv
273.486 187.14 273.556 187.391 273.556 187.691 cv
273.556 187.984 273.471 188.259 273.3 188.518 cv
273.129 188.777 272.882 188.977 272.56 189.119 cv
272.237 189.26 271.873 189.332 271.466 189.332 cv
270.792 189.332 270.278 189.191 269.926 188.912 cv
269.572 188.631 269.347 188.216 269.249 187.667 cv
cp
f
274.164 182.715 mo
274.164 182.096 li
276.053 182.096 li
276.053 182.715 li
274.164 182.715 li
cp
f
278.878 184.218 mo
278.264 184.218 li
278.264 180.3 li
278.115 180.441 277.921 180.583 277.681 180.723 cv
277.44 180.865 277.225 180.97 277.033 181.042 cv
277.033 180.447 li
277.377 180.285 277.678 180.089 277.936 179.859 cv
278.192 179.629 278.375 179.406 278.481 179.19 cv
278.878 179.19 li
278.878 184.218 li
cp
f
281.397 191.319 mo
280.768 191.319 li
281.741 189.756 282.228 188.192 282.228 186.626 cv
282.228 186.014 282.158 185.407 282.018 184.805 cv
281.907 184.317 281.753 183.848 281.554 183.399 cv
281.427 183.106 281.165 182.618 280.768 181.934 cv
281.397 181.934 li
282.01 182.75 282.462 183.571 282.755 184.395 cv
283.006 185.104 283.131 185.846 283.131 186.622 cv
283.131 187.5 282.963 188.35 282.626 189.17 cv
282.289 189.991 281.88 190.707 281.397 191.319 cv
cp
f
3.15918 65.1704 mo
3.15918 63.1343 li
3.15918 62.7012 3.11426 62.3628 3.0249 62.1187 cv
2.93555 61.8745 2.79199 61.689 2.59521 61.562 cv
2.39844 61.4351 2.18408 61.3716 1.95313 61.3716 cv
1.61475 61.3716 1.33643 61.4946 1.11816 61.7402 cv
.899902 61.9858 .791016 62.374 .791016 62.9048 cv
.791016 65.1704 li
3.15918 65.1704 li
cp
7.1582 66.1177 mo
0 66.1177 li
0 62.9438 li
0 62.3057 .0644531 61.8208 .192871 61.4888 cv
.321289 61.1567 .54834 60.8916 .874023 60.6929 cv
1.19971 60.4941 1.55908 60.395 1.95313 60.395 cv
2.46094 60.395 2.88916 60.5596 3.2373 60.8882 cv
3.58545 61.2168 3.80713 61.7246 3.90137 62.4116 cv
4.02197 62.1611 4.14063 61.9707 4.25781 61.8403 cv
4.51172 61.5635 4.8291 61.3018 5.20996 61.0542 cv
7.1582 59.8091 li
7.1582 61.0005 li
5.66895 61.9478 li
5.23926 62.2246 4.91064 62.4521 4.68262 62.6313 cv
4.45459 62.8105 4.29541 62.9707 4.2041 63.1123 cv
4.11279 63.2539 4.04932 63.3979 4.01367 63.5444 cv
3.99072 63.6519 3.97949 63.8276 3.97949 64.0718 cv
3.97949 65.1704 li
7.1582 65.1704 li
7.1582 66.1177 li
cp
f
4.06738 58.3589 mo
4.06738 55.4634 li
3.63135 55.5024 3.3042 55.6133 3.08594 55.7954 cv
2.74756 56.0752 2.57813 56.4385 2.57813 56.8843 cv
2.57813 57.2881 2.71338 57.6274 2.9834 57.9023 cv
3.25342 58.1772 3.61475 58.3296 4.06738 58.3589 cv
cp
5.48828 55.4731 mo
5.60059 54.5649 li
6.13135 54.708 6.54297 54.9736 6.83594 55.3608 cv
7.12891 55.748 7.27539 56.2432 7.27539 56.8452 cv
7.27539 57.6035 7.04199 58.2051 6.57471 58.6494 cv
6.10742 59.0938 5.45264 59.3159 4.60938 59.3159 cv
3.73682 59.3159 3.06006 59.0913 2.57813 58.6421 cv
2.09619 58.1929 1.85547 57.6104 1.85547 56.894 cv
1.85547 56.2007 2.09131 55.6343 2.56348 55.1948 cv
3.03564 54.7554 3.69971 54.5356 4.55566 54.5356 cv
4.60791 54.5356 4.68604 54.5371 4.79004 54.5405 cv
4.79004 58.4077 li
5.35986 58.375 5.7959 58.2139 6.09863 57.9243 cv
6.40137 57.6348 6.55273 57.2734 6.55273 56.8403 cv
6.55273 56.5181 6.46826 56.2432 6.29883 56.0151 cv
6.12939 55.7871 5.85938 55.6064 5.48828 55.4731 cv
cp
f
7.1582 53.481 mo
0 53.481 li
0 52.6021 li
7.1582 52.6021 li
7.1582 53.481 li
cp
f
4.55566 47.9292 mo
4.68604 48.248 4.79639 48.7266 4.8877 49.3647 cv
4.93994 49.7261 4.99854 49.9814 5.06348 50.1313 cv
5.12842 50.2813 5.22363 50.3965 5.34912 50.478 cv
5.47461 50.5596 5.61377 50.6001 5.7666 50.6001 cv
6.00098 50.6001 6.19629 50.5112 6.35254 50.334 cv
6.50879 50.1567 6.58691 49.897 6.58691 49.5552 cv
6.58691 49.2168 6.5127 48.9155 6.36475 48.6519 cv
6.2168 48.3882 6.01416 48.1943 5.75684 48.0708 cv
5.55811 47.9766 5.26514 47.9292 4.87793 47.9292 cv
4.55566 47.9292 li
cp
6.51855 47.856 mo
6.79541 48.1816 6.99072 48.4946 7.10449 48.7959 cv
7.21826 49.0972 7.27539 49.4199 7.27539 49.7651 cv
7.27539 50.335 7.13623 50.7725 6.85791 51.0786 cv
6.57959 51.3848 6.22412 51.5376 5.79102 51.5376 cv
5.53711 51.5376 5.30518 51.48 5.09521 51.3643 cv
4.88525 51.2485 4.7168 51.0972 4.58984 50.9102 cv
4.46289 50.7231 4.3667 50.5122 4.30176 50.2778 cv
4.25635 50.1055 4.2124 49.8447 4.16992 49.4966 cv
4.08545 48.7871 3.98438 48.2646 3.86719 47.9292 cv
3.74658 47.9258 3.67041 47.9243 3.6377 47.9243 cv
3.27979 47.9243 3.02734 48.0073 2.88086 48.1733 cv
2.68213 48.3979 2.58301 48.7314 2.58301 49.1743 cv
2.58301 49.5879 2.65527 49.8931 2.80029 50.0898 cv
2.94531 50.2866 3.20166 50.4326 3.56934 50.5269 cv
3.45215 51.3862 li
3.08447 51.3081 2.78711 51.1797 2.56104 51.0005 cv
2.33496 50.8213 2.16064 50.5625 2.03857 50.2241 cv
1.9165 49.8857 1.85547 49.4932 1.85547 49.0474 cv
1.85547 48.6045 1.90771 48.2451 2.01172 47.9683 cv
2.11572 47.6914 2.24707 47.4883 2.40479 47.3579 cv
2.5625 47.2275 2.76221 47.1367 3.00293 47.0845 cv
3.15283 47.0552 3.42285 47.0405 3.81348 47.0405 cv
4.98535 47.0405 li
5.80225 47.0405 6.31934 47.022 6.53564 46.9844 cv
6.75195 46.9468 6.95947 46.873 7.1582 46.7622 cv
7.1582 47.6802 li
6.97607 47.7715 6.7627 47.8301 6.51855 47.856 cv
cp
f
6.37207 43.7593 mo
7.14844 43.6323 li
7.20068 43.8799 7.22656 44.1011 7.22656 44.2964 cv
7.22656 44.6152 7.17627 44.8628 7.0752 45.0386 cv
6.97412 45.2144 6.8418 45.3379 6.67725 45.4097 cv
6.5127 45.4814 6.16699 45.5171 5.63965 45.5171 cv
2.65625 45.5171 li
2.65625 46.1616 li
1.97266 46.1616 li
1.97266 45.5171 li
.688477 45.5171 li
.161133 44.6431 li
1.97266 44.6431 li
1.97266 43.7593 li
2.65625 43.7593 li
2.65625 44.6431 li
5.68848 44.6431 li
5.93896 44.6431 6.1001 44.6274 6.17188 44.5967 cv
6.24365 44.5659 6.30029 44.5151 6.34277 44.4453 cv
6.38525 44.3755 6.40625 44.2754 6.40625 44.145 cv
6.40625 44.0474 6.39502 43.9189 6.37207 43.7593 cv
cp
f
7.1582 42.895 mo
1.97266 42.895 li
1.97266 42.0161 li
7.1582 42.0161 li
7.1582 42.895 li
cp
1.01074 42.895 mo
0 42.895 li
0 42.0161 li
1.01074 42.0161 li
1.01074 42.895 li
cp
f
7.1582 39.2378 mo
1.97266 41.2104 li
1.97266 40.2827 li
5.07813 39.1694 li
5.41357 39.0488 5.76172 38.9385 6.12305 38.8374 cv
5.84961 38.7593 5.521 38.6504 5.13672 38.5103 cv
1.97266 37.3579 li
1.97266 36.4546 li
7.1582 38.4175 li
7.1582 39.2378 li
cp
f
4.06738 35.0142 mo
4.06738 32.1187 li
3.63135 32.1577 3.3042 32.2686 3.08594 32.4507 cv
2.74756 32.7305 2.57813 33.0938 2.57813 33.5396 cv
2.57813 33.9434 2.71338 34.2827 2.9834 34.5576 cv
3.25342 34.8325 3.61475 34.9849 4.06738 35.0142 cv
cp
5.48828 32.1284 mo
5.60059 31.2202 li
6.13135 31.3633 6.54297 31.6289 6.83594 32.0161 cv
7.12891 32.4033 7.27539 32.8984 7.27539 33.5005 cv
7.27539 34.2588 7.04199 34.8604 6.57471 35.3047 cv
6.10742 35.749 5.45264 35.9712 4.60938 35.9712 cv
3.73682 35.9712 3.06006 35.7466 2.57813 35.2974 cv
2.09619 34.8481 1.85547 34.2656 1.85547 33.5493 cv
1.85547 32.856 2.09131 32.2896 2.56348 31.8501 cv
3.03564 31.4106 3.69971 31.1909 4.55566 31.1909 cv
4.60791 31.1909 4.68604 31.1924 4.79004 31.1958 cv
4.79004 35.063 li
5.35986 35.0303 5.7959 34.8691 6.09863 34.5796 cv
6.40137 34.29 6.55273 33.9287 6.55273 33.4956 cv
6.55273 33.1733 6.46826 32.8984 6.29883 32.6704 cv
6.12939 32.4424 5.85938 32.2617 5.48828 32.1284 cv
cp
f
4.47266 26.772 mo
5.15283 26.772 5.64941 26.6367 5.96191 26.3667 cv
6.27441 26.0967 6.43066 25.7578 6.43066 25.3511 cv
6.43066 24.9473 6.27539 24.6089 5.96436 24.3354 cv
5.65332 24.062 5.16602 23.9253 4.50195 23.9253 cv
3.86719 23.9253 3.38867 24.0659 3.06641 24.3477 cv
2.74414 24.6294 2.58301 24.9688 2.58301 25.3657 cv
2.58301 25.7563 2.7417 26.0884 3.05908 26.3618 cv
3.37646 26.6353 3.84766 26.772 4.47266 26.772 cv
cp
7.58789 27.4995 mo
7.71484 26.645 li
7.97852 26.6094 8.17041 26.5098 8.29102 26.3472 cv
8.45361 26.1289 8.53516 25.8311 8.53516 25.4536 cv
8.53516 25.0469 8.45361 24.7324 8.29102 24.5112 cv
8.12842 24.29 7.90039 24.1401 7.60742 24.062 cv
7.42822 24.0166 7.05225 23.9951 6.47949 23.9985 cv
6.93213 24.3828 7.1582 24.8613 7.1582 25.4341 cv
7.1582 26.147 6.90088 26.6987 6.38672 27.0894 cv
5.87256 27.48 5.25537 27.6753 4.53613 27.6753 cv
4.0415 27.6753 3.58496 27.5859 3.1665 27.4067 cv
2.74805 27.2275 2.42529 26.9683 2.19727 26.6279 cv
1.96924 26.2876 1.85547 25.8882 1.85547 25.4292 cv
1.85547 24.8174 2.10303 24.3125 2.59766 23.9155 cv
1.97266 23.9155 li
1.97266 23.105 li
6.45508 23.105 li
7.26221 23.105 7.83447 23.187 8.17139 23.3516 cv
8.5083 23.5161 8.77441 23.7764 8.96973 24.1328 cv
9.16504 24.4893 9.2627 24.9277 9.2627 25.4487 cv
9.2627 26.0674 9.12354 26.5669 8.84521 26.9478 cv
8.56689 27.3286 8.14795 27.5127 7.58789 27.4995 cv
cp
f
4.55566 18.4663 mo
4.68604 18.7852 4.79639 19.2637 4.8877 19.9019 cv
4.93994 20.2632 4.99854 20.5186 5.06348 20.6685 cv
5.12842 20.8184 5.22363 20.9336 5.34912 21.0151 cv
5.47461 21.0967 5.61377 21.1372 5.7666 21.1372 cv
6.00098 21.1372 6.19629 21.0483 6.35254 20.8711 cv
6.50879 20.6938 6.58691 20.4341 6.58691 20.0923 cv
6.58691 19.7539 6.5127 19.4526 6.36475 19.189 cv
6.2168 18.9253 6.01416 18.7314 5.75684 18.6079 cv
5.55811 18.5137 5.26514 18.4663 4.87793 18.4663 cv
4.55566 18.4663 li
cp
6.51855 18.3931 mo
6.79541 18.7188 6.99072 19.0317 7.10449 19.333 cv
7.21826 19.6343 7.27539 19.957 7.27539 20.3022 cv
7.27539 20.8721 7.13623 21.3096 6.85791 21.6157 cv
6.57959 21.9219 6.22412 22.0747 5.79102 22.0747 cv
5.53711 22.0747 5.30518 22.0171 5.09521 21.9014 cv
4.88525 21.7856 4.7168 21.6343 4.58984 21.4473 cv
4.46289 21.2603 4.3667 21.0493 4.30176 20.8149 cv
4.25635 20.6426 4.2124 20.3818 4.16992 20.0337 cv
4.08545 19.3242 3.98438 18.8018 3.86719 18.4663 cv
3.74658 18.4629 3.67041 18.4614 3.6377 18.4614 cv
3.27979 18.4614 3.02734 18.5444 2.88086 18.7104 cv
2.68213 18.9351 2.58301 19.2686 2.58301 19.7114 cv
2.58301 20.125 2.65527 20.4302 2.80029 20.627 cv
2.94531 20.8237 3.20166 20.9697 3.56934 21.064 cv
3.45215 21.9233 li
3.08447 21.8452 2.78711 21.7168 2.56104 21.5376 cv
2.33496 21.3584 2.16064 21.0996 2.03857 20.7612 cv
1.9165 20.4229 1.85547 20.0303 1.85547 19.5845 cv
1.85547 19.1416 1.90771 18.7822 2.01172 18.5054 cv
2.11572 18.2285 2.24707 18.0254 2.40479 17.895 cv
2.5625 17.7646 2.76221 17.6738 3.00293 17.6216 cv
3.15283 17.5923 3.42285 17.5776 3.81348 17.5776 cv
4.98535 17.5776 li
5.80225 17.5776 6.31934 17.5591 6.53564 17.5215 cv
6.75195 17.4839 6.95947 17.4102 7.1582 17.2993 cv
7.1582 18.2173 li
6.97607 18.3086 6.7627 18.3672 6.51855 18.3931 cv
cp
f
7.1582 16.2104 mo
1.97266 16.2104 li
1.97266 15.3315 li
7.1582 15.3315 li
7.1582 16.2104 li
cp
1.01074 16.2104 mo
0 16.2104 li
0 15.3315 li
1.01074 15.3315 li
1.01074 16.2104 li
cp
f
7.1582 13.9937 mo
1.97266 13.9937 li
1.97266 13.2026 li
2.70996 13.2026 li
2.14014 12.8218 1.85547 12.2715 1.85547 11.5522 cv
1.85547 11.2397 1.91162 10.9526 2.02393 10.6904 cv
2.13623 10.4282 2.28369 10.2324 2.46582 10.1021 cv
2.64795 9.97168 2.86475 9.88086 3.11523 9.82861 cv
3.27783 9.7959 3.56299 9.77979 3.96973 9.77979 cv
7.1582 9.77979 li
7.1582 10.6587 li
4.00391 10.6587 li
3.646 10.6587 3.37793 10.6929 3.20068 10.7612 cv
3.02344 10.8296 2.88184 10.9507 2.77588 11.125 cv
2.66992 11.2993 2.61719 11.5034 2.61719 11.7378 cv
2.61719 12.1123 2.73584 12.4351 2.97363 12.707 cv
3.21143 12.979 3.66211 13.1147 4.32617 13.1147 cv
7.1582 13.1147 li
7.1582 13.9937 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
