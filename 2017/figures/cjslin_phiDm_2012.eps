%!PS-Adobe-3.1 EPSF-3.0
%%Title: phi_vs_DM_noCPT_2012_v2.ai
%%Creator: Adobe Illustrator(R) 11
%%AI8_CreatorVersion: 11.0.0
%AI9_PrintingDataBegin
%%For: Paul Schaffner
%%CreationDate: 4/18/12
%%BoundingBox: 0 0 507 490
%%HiResBoundingBox: 0 0 506.5469 489.8365
%%CropBox: 0 0 506.5469 489.8365
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)
%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)
%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)
%%+ procset Adobe_CoolType_Core (2.23 0)
%%+ procset Adobe_AGM_Core (2.0 0)
%%+ procset Adobe_AGM_Utils (1.0 0)
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 124 8
%%BeginData: 18894 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD0BFFA8A8A8FD7CFF2752277DFFFFFD05A8FFA8FFA8A8A8FFFD04
%A852FD237D7C7D7D7D7C7D7D7D7C7D7DA8A8FFA8FFA8A8A8FFFD04A8537D
%777D777D777D777D777D777D7C7D7C7D7C7D7C7D7C7D7C7D7C7D52FD04A8
%FD0CFFA87D275252FFFFA8A8FFFFA8A8FFFFFFA8FFFFFFA8FF7DA7A7CFA7
%CFA7A7A7CFA7A7A7CFA7A7A7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7CFA7
%CFA7A7A7CFA7A7A7CFA7A7A77CA7FFA8FFFFFFA8FFFFFFA8AE466D6C6C6C
%6D6C6C6C6DFD046C50A5A5CCA4CCA4CCA4A5A4CCA4CC7A51A8FFA8A8FD0F
%FFA8FFFFFFA8FFFFFFA8FD0AFF7DA7FD05CFA7CFA8AEA7CFA8CFA7CFA8CF
%A7AEA8CFA7AEA8CFA8A8A7CFA8AEA8CFA8CFA7CFA8CFA7AEA8CFA7CF58A8
%A9A8A8FFA8FD05FF4C6D91976C9791976C976D976C914BFD09CCA5FD04CC
%7BA8FFFFFFA8FD13FFA8FD0EFF7DCFCFFFFD04CF7C74749F7499749F7499
%749F7475749F7475749F7475749F7499749F7499749F7499749F74997475
%7475749F747575FFFFFF7D6C91979197919791979197919746A5CCCDCCCD
%CCCDCCCCA5CDCCCDCCA57DFD04FFA8FD13FFA8FD0EFF7DA7FD06CF7C98FD
%25C098FD06C075A9FFA847919791976C976D976D976D97477BCCCCA5FD05
%CCA5FD05CC51FD05FFA8FD22FF7DCFCFCFA7CFCFFF7CFD2DC075FFFF776D
%97919747216C97919791976D75CCCD7B51CCCDCCCCA5CDFD04CC51FD05FF
%A8FD14FFA8A8A8FD0CFF7DA7FF7C52A7CFCF7C98FD25C098FD05C0BA75FF
%7D47976D97916C226C6D976D976D4CA4CCCC517BCCCCCCA5FD05CC7AA8FD
%04FFA8A8A8FD22FF7DCFCF7D52CFCFFF7CFD18C0C6C0C0C0C6C0C0C0C6C0
%C0C0C6C0C0C0C6C0C0C0C67BA847B9919791B947216C97919791727BCDCC
%CD50A5CCCDCCCCCCCDCCCDA47DFD1BFFA8FD0EFF7DA7FD06CF7C98FD16C0
%986E757475747574757475747574756E75747574757451226C6C736C6C6C
%726C6C6D97916D50FD05CCA5FD08CC51A9FD07FFA8FD22FF7DFD06CFFF7C
%FD04C07474FD10C0C674A2A2CAA2CAA2CAA2CAA2CAA2CAA2A8A2CAA2CAA2
%CA4C6C91976C9791976D976C9791974CCCCCCDCCCCCCCDCCCCA5CDCCCCCC
%7BA8FD1CFFA8FFA8FD0CFF7DA7FD06CF7C98C0C0C0F84A98FD10C075A2FD
%0DCAA1FD04CAFF7D476C976C916C976C916C6C6C9146A5CCCCA5CCA5CCA5
%CCA5CCA5CCCCA552FD07FFA8FFA8FD14FFA8FD0DFF7DCFCFFFCFCFCFFF7C
%FD04C09898FD10C0C674FD12CAFFC94D6C966C966C976C966C976C97477B
%CCCCA5CDA5CCA5CDA5CCA5CDCCCC52FD09FFA8FD14FFA8FD0EFF7DA7FD06
%CF7C98FD16C075A2CACACAA8FD09CAA1FD04CA766C6D6C9790976C979097
%90976C51FD08CCA5FD05CC51A9FD0AFFA8FD22FF7DFD06CFFF7CFD17C074
%FD04CA52A1FD0CCAA147976C9790979197909791976C4CA5CDCCCDCCCCCC
%CDCCCCCCCDCCCC7AA8FD0AFFA8FD14FFA8FD0EFF7DA7FD06CF7C98FD16C0
%74A1CAA17627FD09CAA1CACAC946916D6C6C976C976C976C9791477AFD0D
%CCA452FD0AFFA8527DFD22FF7DFD04CFFFCFFF7CFD17C074CACACA5252A1
%FFFD09CACF4C9191976C9791979197909791974BCCCCCDCCCDCCCDCCCDCC
%CDCCCDCC517DFD09FF7D7DA7A8FD13FFA8A8FD0DFF7DA7FD06CF7C98FD16
%C074A1CACACAA1FD09CAA1CA766C91916D6C6C976C976C976C914BA5FD08
%CCA5FD04CC7B50A7FD08FF527DCFA77DFD14FFA8FD0DFF7DFD06CFFF7CFD
%16C0C674FD0FCAA14D919791976C9791979097919747A5CCCCCCCDCCCCCC
%CDA5CCCCCDCCA57ACC7DFD06FFA852A7CFCFA7A8FD13FFA8FD0EFF7DA7FD
%06CF7C98FD16C075A1FD0DCAA14C6C916C976D6C6C976C976C976C7BCCCC
%A5FD05CCA5FD05CC50CCA4A7FD05FF7D52FD05CF7DFD22FF7DCFCFFFCFCF
%CFFF7CFD16C0C674FD0ECA7D6C97919791976C97919790979152CCCDA5CD
%CCCDCCCDCCCDCCCDCCCD7BA5CCA57DFD04FF7D7CFFCFCFCFFFCFA8FD13FF
%A8FD0EFF7DA7FD06CF7C98FD16C075A2FD0CCAA1229791916D97916C6C97
%6C97914DA4FD08CCA5FD04CC7A7BCCCCA4A7FFFFA87CA7FD07CF7DFD0DFF
%A852527DFD11FF7DFD06CFFF7CFD17C074FD0DCA4C6D6D97919791976C97
%9097916C7ACDCCCCA5CDFD07CCCDA57BCCCDCCA57DFF7D7CCFFFFD06CFA7
%A8FD0DFF2727277DFFFFA8A8A8FD0CFF7DA7FD06CF7C98FD16C074A1FD0B
%CA526C6C916C976D916D6C6C976C6D4BFD04CCA5A5CCCCCCA5FD04CC7BA5
%CCCCCCA47D527DCFCFCFFFCFCFA7CFA7A77DFD0EFF7DA8A8FD11FF7DFD04
%CFFFCFFF7CFD17C074FD0ACAFF7D7191976D97919791976C9791974CCCCC
%CDCCCDA5CDCCCDA5CDCCCDCC7B7BCDCCCDCCA527FD05CF7CA8CFFFCFFFA8
%A8FD13FFA8FD0EFF7DA7FD06CF7C98FD16C074A1FD09CAA74C6D976C916D
%976D916D6C6C9747A5FD06CCA5CCA5FD04CCA550CDCCCCCC7B52A8FD04CF
%7C517DFD05CF7DFD22FF7DFD06CFFF7CFD16C0C674FD0ACA776C97919791
%97919791976C976C7BCCCDCCCCCCCDA5CCA5FD04CCCD50CCCCCDCC7B7DFF
%FD06CF7CFD04CFFFCFA8FD13FFA8FD0EFF7DA7FD06CF7C98FD16C075A1FD
%08CA7D47976D916C976D916C976D6C6C4CAAFD07CCA5A5FD04CC50A5CCCC
%A47BA7CFA7FD0DCF7DFD14FFA8FD0DFF7DCFCFFFCFCFCFFF7CFD16C0C674
%FD09CA4697919791979197919791976C71A5CDCCCDCCCDCCCDA5CCCCCDCC
%CD7B7BCCCC7B7CCFFFCFCFA8CFCFFFCFCFCFFFCFFFCFA727A8FD13FFA8FD
%0EFF7DA7FD06CF7C98FD16C075A2FD06CACF4C6C91976D916C9791916D97
%914750FD08CCA5A5CCCCCCA551CCCC517DFD04CFA7FD0ACF7C4BA17DFD22
%FF7DFD06CFFF7CFD17C074FD06CAFF766C9197919791976C97919791914B
%CCCCCDCCCCCCCDCCCCA5CDCCCCCC7BCCCC51A8FD06CFA7FFCFCFCFFFCFCF
%A7527DFFCAA8FD13FFA8FD0EFF7DA7FD06CF7C98FD16C074A1CACACAC3CA
%A1466D976D916C976C916C976D9146A5FD08CCA5A5A5CCCC7B7AA552FD07
%CFA8A8FD04CFA7CF7C52A1CACACA7DFD22FF7DFD04CFFFCFFF7CFD17C074
%FD04CAFFCA766C979197919791976D97919747A5CCCDCCCDCCCDCCCDA5CD
%A5CDCCCC507B7DFFCFFFCFCFCFFFCFCFA7FFCFCFA8CF7C7DCAFFCACAA1A8
%FD13FFA8A8FD0DFF7DA7FD06CF7C98FD16C074A1FD04CA7D47916C976D91
%6D976C916D976C75FD08CCA5FD05CC2651A7FFFD08CFA8A7A7CFCFCF52A1
%FD04CAA1A17DFD06FFA8FFA8FD0BFFA8FD0DFF7DFD06CFFF7CFD16C0C674
%FD04CAA74697919791979197919791976D4CCCCDA5CDCCCCCCCDCCCCCCCD
%CCCC5052CFFFFD08CFA7CFA7CFCFA752FD07CAA1A8FD05FF5252527D52FD
%09FFA8FD0EFF7DA7FD06CF7C98FD16C075A1CACACA4C916D976D916C976D
%916C9791477ACCCCA5A5FD05CCA5CCCCCC507DFD08CFA7CFA7CFA7CFCF7C
%52FD09CA7DFD05FFA8A8A87DFD19FF7DCFCFFFCFCFCFFF7CFD16C0C674CA
%CAFF766C91979197919791979197916C7BCDCCCDA5CDCCCDCCCDCCCDCCCC
%51A7CFFFCFCFCFFFCFCFA7FD04CFFFA77C7DFFCACACAFFCACACAFFCAA8FD
%05FFA8525227A8FD09FFA8FD0EFF7DA7FD06CF7C98FD16C075A2CA7C4791
%916D976D916D976D916C914BFD05CCA5CCCCCCA5CCCC7B52A7FD06CFA7CF
%A7FD05CF7D52A1FD04CAA1A1FD05CA7DFD06FF52A87DFD19FF7DFD06CFFF
%7CFD17C074CACA4D6D979197919791979197919146ABCCCCCCCDA5CCCCCD
%A5CCCC7B7DCFA7FD05CFA7CFCFFFCFCFCFFF7C76A1FFFD04CA27A1FD04CA
%A1A8FD06FF5252A8A8FD09FFA8A8A8FD0CFF7DA7FD06CF7C98FD16C074A1
%766C916C976D916C976D916D91477BFD06CCA5CCA5CCA451A7CFA7CFA7CF
%A7A8A7FD07CF51A1FD06CA4B4B76CACACAA1A17DFD06FF275252FD19FF7D
%FD04CFFFCFFF7CFD17C0747D479791979197919791976D73714B6EA5CCCD
%CCCDA5CDCCCC7B7CCFFFA8CFA7FD04CFFFCFCFCFFFCFA752CACACAA1FFCA
%CACAA852A1FD04CAC3A8FD06FF7D27A8FD0AFFA8FD0EFF7DA7FD06CF7C98
%FD16C074229191916D976D9191976C7068928CFC68CDFD05CCA5507DCFCF
%A7A8A7A7A7FD08CF7D52FD0ACAFFFD06CA7DFD06FF527D7DFD19FF7DFD06
%CFFF7CFD16C0C64A6D91979197919791734C92FCB4FCB4FC75ABCDCCCDCC
%A551A8CFCFA7A8CFFFA8FD06CFFFAE7C7DFFFD04CAA1FD08CAFFCACAA1A7
%FD05FFA8522752A8FFFFFFFD04A8FFFFA8FD0EFF7DA7FD06CF7C98FD15C0
%6E4791916C976D916D7244B4FCB48CB48C8C7BFD04CC7B51CFCFA8A7A8FD
%04CFA8FD05CF7D76A1FD05CAA1FD07CAA1A152524B527DFD06FF7D527DFD
%04FFFD0452FFFFFFA8FFA8FD0BFF7DCFCFFFCFCFCFFF7CFD14C0C69E716C
%97919791976D7192B4FCB48CB4FCB44BCDCCCDCC7B52FD08CFFFA8CFCFFF
%CFFF7C7DCAFFCAFFCAFFCACAA1A1767D52522752527652A176A1FD05FFA8
%527DA8FD04FFFD0452FFFFA8FFA8FD0CFF7DA7FD06CF7C98FD14C04B6C90
%6C916C976C4C8CB4FCB48CB4FCFC44A5CCCCA4517DA7A7CFCFCFA7FD09CF
%76A1CACAA17D52764B4C2752527676A1A1A1CAFFCAA251747DFD06FF527D
%7DFD19FF7DFD06CFFF7CFD14C0746C976C9791976C6F686EFCB4FCB4FCB5
%A1AFA8CD7A7CA7FD05CFA8FFCFFFCFCFA7CFA77D275252522776527776CA
%CACAA1FFCACAA1CACACA7D7674C0BAA7FD06FFFD0452FD09FFA8FD07FFA8
%FD06FF7DA7FD06CF7C98FD12C09E4691906C6C976C4BFC9220688CB4FC9A
%A8FFFFFF7D7DFD06CFA7A77C7C5252275127274B7D7DCAA1CACAFFFD05CA
%A1A1CACACAA17D4B9898C0C0C07CFD06FF52FF52527DFD10FFA87DFD05FF
%7DFD04CFFFCFFF7CFD13C04B9791976C976D70FCB48C4A68B4FCBCFD06FF
%CFA77C7D52522752527C7CA7A7CFA77CA1FFCAFFFD0ACAA1FFCAA8767598
%FD05C098A7FD06FF7D527D7D7DFD08FFA8FD07FF7D7DFD05FF7DA7FD06CF
%7C98FD11C04A6C9097906C6D708CB4FCB48CB4FCBBAFFD05FF7D51527C52
%7DA7A7FD05CFFF8352A1FFFD0ACAA1CACAA87D76749EFD07C09E7DFD06FF
%7D52A8FD0AFFA8A8FD06FFA87DFD05FF7DFD06CFFF7CFD11C0986B919791
%B9917168B4FCB48CB4686EA8FFFF7DA8FFFFA8A7FFCFFFA8FD07CF7C7DA1
%FD09CAA1CACAFFA27D4B989EC6FD08C098A7FD05FFA827527DA8FD09FFA8
%FD07FF52A8FD05FF7DA7FD06CF7C98FD10C04B6C9047474646448C68928C
%8C684A7CFFFFA8F87DFFCFA7FD04CFA7A7FD05CF52A1CACAA1FD05CAA1CA
%A1CACAA2767574FD0DC07DFD06FF522752FD12FF52FD06FF7DCFCFFFCFCF
%CFFF7CFD06C0C6C0C6C0C1C0C07475744A214C224746714692FCB4FCB468
%7BA5CFFFFFA87DA8FFA7CFCFFFCFCFA7FD04CFA752CACAFFA1CACAFFCACA
%A1CACACB7D7674C0C0C09EFD0CC0A7FD04FF7D27522752FD0AFFA8FD07FF
%27FD06FF7DA7FD06CFA098C0C0C098986E754A4A264B4A74744A47906C97
%91919172448C686F277BCCCDA8FD05FF7DFD05CFA7CFA7FFCF7C52FD07CA
%A1CAA1CAA27D517498C0C0C098FD0DC07DFD05FFA852FF52FD11FFA827A8
%FD05FF7DCFCFFFCFCFA7A74B744A4A26514A74749898C0C0C6C0C0459791
%979097916C46777CA1A17CCCA551FD05FFA8A7CFFFCFCFA7CFA8CFA77C7D
%FFFD04CAA1CAA1CACACA767574FD07C098FD0BC098A7FD06FF525252FD0A
%FFA8A8A8FD04FFA8F8A8FFFFA8FFA852517C5152275252514A9898FD0BC0
%4A6C6C919091474D76A1CAFFCA76A4A552A8A8FFA9A8A7CFA7CFCFCFA7CF
%CFCF7C52A1FD05CAA1A1A1CA7D764A9EFD08C09E9EFD0AC098987CFD07FF
%A8FD12FFA852527D5252527D277C7DA8A8CFCFFF7CFD0CC0C6746C91976C
%6B4CA1C9FFA8CACAA17A7B7DFFCFCFA8CFA8CFA8CFCFFFCFCFCFFF7C7DCA
%FFFD06CAA1A1759898C6FD0AC09EC6C0C07474FD06C098A7FD05FF52527D
%7D52FD09FF7D7D52522752527D537D7DA8A8FFFFA1A7FFFD05CF7C98FD0B
%C0984D916C46767DFD04CAA8CACA267BA7FFFD06CFA7CFA7FD05CF527DFD
%04CAA1CAA2A8765174FD12C02620FD07C07DFD06FFA8A8A8FD0AFFA852A8
%A8FD0BFF7DFD06CFFF7CFD0CC04B477176A7CAFFFD06CA277CCFFFFD05CF
%FFA8FD06CFA752FD05CAA8CAA17674C09EFD0FC09EC0C0C07498FD06C09E
%A7FD09FFA8FD09FFA8FD0EFF7DA7FD06CF7C98FD09C09874217DA1CFFD07
%CAA84B7DFD08CFA7CFCFCFA7CFA77C52CACAA8A1CAA17D517498C0C0C09E
%FD0DC098FD0DC07DFD08FFA8A8FD0AFFA8FD0DFF7DCFCFFFCFCFCFFF7CFD
%06C0C6C0C074767DCACAFFFD08CA52A7CFFFCFCFCFFFFD08CFA77C7DFFCA
%CAA1A8767574FD04C0C69EFD0FC09EFD0BC098A7FD09FFA8FD09FFA8FD0E
%FF7DA7FD06CF7C98FD05C0747576A2A1FD0ACA7D52A7FD0ACFA7CFCFCF7C
%52A1CAA1CA7D764A9EFD16C098FD0BC098747DFD08FFA87DFD18FF7DFD06
%CFFF7CC0C0C09E98757DA2FFFD09CAFFC47C7DCFA7FD09CFA8CFCFFF7C52
%CACAA27D519998FD09C098FD0FC098FD09C074757DFD09FF7D27FD09FFA8
%FD0EFF7DA7FD06CF7C98C0747577CACACAA1FD09CAA152A7CFA7CFA7FD07
%CFA7CFCFCF5151A1A1527574C0C0C09EFD08C09E98FD0DC09E9EFD06C098
%7451A8FFFFA8FD06FFA87DA8FD19FF7DFD04CFFFCFFF527576A2CAFFFD0B
%CAFF7D7CCFFFA8CFA7FD04CFFFCFCFA7CFCFA851517D76749EC0C6C0C69E
%FD09C09EFD0FC09EC6FD04C0747C84FD09FFA8522752277DFFFFFF7D7D52
%7DFFFFA8FD0EFF7DA7CFCFCFAEA75276A1CBFD06CAA1FD07CA5283CFCFA7
%CFCFCFA7FD05CFA7CFCF7D5651269974FD11C098FD11C0987451A8FD06FF
%A8FD06FF525252FFFFFFA827277D7DFFFFA8A8FFA8FD0BFF7DCFCFCF7D7C
%76FD09CAA8FD06CAA852A8CFFFCFCFCFFFA8FD07CFA8527AA550FD09C098
%FD09C09EFD10C09E747DA8FD05FFA8FFA8FD08FF7DFD05FFA87D52A8FFFF
%A8FD0EFF7D7C7C52A1FD04CAA1FD05CAA1CACACAC3CACA7D52CFCFCFA7FD
%05CFA8FD04CFA85251A4CC4AC0C0C098FD06C09E98FD09C09EFD0DC07450
%76A9FD0AFFA8FD21FFA8527CA1FFCACACAFFA1FD05CAA1FD04CAFFCA767C
%FFFD07CFFFA8FD04CFA8527BCCCD7A9EFD0AC09EFD08C0C69EFD0AC0C6C0
%98747B7DFD20FFA8FD0BFF7D7676A1FD0CCAA1FD05CAA176A7FD05CFA7FD
%05CFA8A8A7A751A5CCCD7B74FD04C098FD07C098FD13C074747ACCA4A7FD
%0CFFA8FD1CFFA87D52A1CAFFA1FD07CAA1FD08CAFF777CCFFFFD04CFA8CF
%CFFFCFCF7DA7A8A751CCCCCDA575FD0CC09EFD09C098FD07C0BA987481AB
%CDCCA57DFD20FFA8A8A8FD04FFA85276A1FD04CAA8A1FD06CAA8A1CACAA8
%A1CACACA527DFD06CFA7CFCFCFFD04A7A87D50FD04CC7598FD05C098FD07
%C09EFD08C09E98FD05C06E747AFD05CCA47DFD0AFFA8A8A8FD18FF7D7D76
%FD07CAA1FD07CAA1CACACAA8FFCAA252AECFCFCFFFCFCFA7CFCFCFA7A8A8
%FFA77C7BCCCCCDCC8174C6FD0BC0C69EFD09C09EC0C0C6989874A5CCCDCC
%CDCCCDCCA57DFD0BFFA8FD14FFA8FFA87D52A1FD0ACAA1FD07CAA1CAA1CA
%CA7D52FD09CFA7A7A7CFCFFF7D51A4FD04CCA54AFD07C098FD13C06E757B
%CDFD08CCA47DFD0CFFA8FD13FFA8527DA1FD0BCAA1FD07CAA1CAA1FFCA76
%7CFFFD07CFA7A7A8A8FFCFFF7C7BA5CCCCCDCCCD50FD0FC098FD09C09874
%74A5CCCDCCCDCCCCCCCDCCCCCCA57DFD20FF7DA1FD0ECAA1FD07CAA1CAA1
%76A7FD07CFA7A7A7FD05CF51A5CCA5A5CCCCCC5098FD08C098FD06C09E98
%FD06C0984A7BA5FD0DCC7AA7FD0CFFA8FD13FFA1A1FD0CCAFFA1FD06CAFF
%A1CA7D7DCFFFCFFFCFFFCFCFA8CFA8FFCFCFCFA851CCCCCDA5CDCCCDA574
%FD10C09EFD05C098747ACDCCCDCCCDCCCDCCCDCCCDCCCDCCCDCCA57DFD0B
%FFA8FD14FF7DA1FD15CAA1527DFD06CFA7A8A8CFA7FD04CF7D50CCCCCCA5
%A5CCCCA574FD0AC098FD07C09EC0C098507BA5FD11CCA4A7FD0CFFA8FD13
%FFA8A1FD0DCAA1FD06CAA14BA8FD04CFA7A7A7CFCFCFA7CFCFFFA87C7BCC
%CCCDCCCCA5CDCC7B98C6FD12C074757BCCCCCDCCCCA5CDCCCCCCCDCCCCCC
%CDCCCCCCCDCCA57DFD20FF7DFD0ECAA8A1FD04CA7D52A7CFCFCFA77DA7A7
%CFCFCFA7CFCFFF7D51A4CCCCCCA5CCCCA5CC8174FD0BC098FD05C0987450
%7BA5FD06CCA5A5FD0DCCA47DFD0CFFA8FD13FFA8A1FD0DCAA1CACAFFCA76
%7CFFCFCFA7A7A7FD04CFFFCFCFCFFF7C7BCCCDCCCDCCCDCCCDCCAC50FD0E
%C0C6C0C0747651CCCCCDCCCDCCCDCCCDA5CDCCCDCCCDCCCDCCCDCCCDCCCD
%CCA57DFD20FF7DA8FD0ECAA1FFA1767DCFCFA77DFD0BCF51A5FD06CCA5CC
%CCAB4AFD0DC098C0987451A1CA7CA5FD09CCA5FD0DCCA47DFD0CFFA8FD13
%FFA1A1FD0FCA767DA7CFA7A8A7FD0ACFA851CCCCCDCCCCCCCDA5CCCCCD7B
%98FD0DC09E7476A1FFCACA76FD04CCCDCCCCCCCDA5CCCCCDCCCCCCCDCCCC
%CCCDCCCCCCA57DFD0BFFA8FD14FF7DFD0ECAA8527DA7A7A7CFCFCFA8FD07
%CFA87D50FD07CCA5CCCCCC7B74FD0CC098744BA2FD05CA7CA4FD09CCA5FD
%0DCC7AA7FD0CFFA8FD13FFA8A1FFFD0BCAA852A7A7A7CFCFCFFFA8CFCFFF
%CFCFCFFFA77C7BCDCCCDCCCDCCCDA5CDCCCDCC7598FD0AC09E747CA2FD06
%CACB76CCCCCDCCCDCCCDCCCDA5CDCCCDCCCDCCCDCCCDCCCDCCCDCCA57DFD
%20FF7DFD0ACAFFA17651A7A7A8A7FD0BCF7C7BA5FD0CCC7B98FD09C07475
%76CACACAA1FD06CA7CA4FD17CCA4A7FD0CFFA8FD0EFFA8A8A8FFFFA8A1FD
%06CAFFCACA76277CCFA7CFA8FD05CFA7FD04CFFF7C7BCCCDCCCCCCCDFD07
%CCA574C098FD04C0C6C0984AA1CAFFFD09CACB7CCCCCCDCCCCCCCDCCCCA5
%CDCCCCCCCDCCCCCCA550CCCCCDCCA57DFD1AFF2727527DFFFF7DA1A1FD05
%CA7D7D27277DCFCFCFA7FD06CFA8A7CFCFCF277BFD0ACCA5CCCCA54AC0C0
%9E98C0C0C06E7576FD07CAA1FD05CAC47CA5FD08CCA5A5FD07CC507BFD04
%CCA47DFD08FFA8FFA8A8A8FD0DFF7D277D7DFFFFA8A1CACAFFCAA17D7D27
%7CCFFFCFFFA7FD04CFFFCFCFA7CFCFA84A51CCCDCCCDCCCDCCCDCCCCA5CD
%CCCD50C0C0C09EC6C07451A1CAFFFD0DCACB7CCCCCCDCCCDCCCDCCCDA5CD
%CCCDCCCDCCCDCC7B7BCDCCCDCCA57DFD0BFFA8FD10FFA8FFFFFF7DCACAA1
%767D5251267DFD04CFA8A7FD08CFAE7D6E74A5FD09CCA5CCCCCD7A98C0C0
%C09E4A767DFD0BCAA1FD06CA7CA5FD09CCA5FD07CCA5FD05CCA47DFD0CFF
%A8FD13FFA176A17D7D757451FD07CFA8FD06CFFFA77698987BCDCCCDCCCC
%CCCDCCCCA5CDCCCDA574C0C098744AA1CAFFFD12CA76FD04CCCDCCCCCCCD
%A5CCCCCDCCCCCCCDCCCCCCCDCCCCCCA57DFD20FF7D7D537C747451FD06CF
%A8A7CFA8FD05CF7D5198C050FD09CCA5CCCCCCAB74BA9E4A749875A2FD0D
%CAA1FD06CA7CA4FD09CCA5FD0DCC7AA7FD0CFFA8FD13FFA8519EBA757DFF
%CFCFCFFFCFCFA8FFA8CFCFFFCFFF7C759EC050CDCCCDCCCDCCCDCCCDCCCC
%CCCDCC7B6E74749EC0C674FD14CACB76CCCCCDCCCDCCCDCCCDA5CDCCCDCC
%CDCCCDCCCDCCCDCCCDCCA57DFD20FF76989875A7FD07CFA7FD07CF5198C0
%C04AA5FD0DCCA5207498FD04C075A2FD0DCAA1FD06CA7CA4FD17CCA4A7FD
%0AFFA8A8A8FD13FFA16E7CCFFFFD06CFA7CFCFCFA7CFCFA850C0C0C0747B
%CCCCCCCDCCCCCCCDCCCCA5CDCCA54AFD07C074FD14CACB7CCCCCCDCCCCCC
%CDCCCCA5CDCCCCCCCDCCCCCCCDCCCCCCCDCCA57DFD20FF527CFD08CFA7FD
%05CFA87D6EC0C0C09850ABFD09CCA5CCA5CC509EFD07C074A1FD0DCAA1FD
%05CAC47CA5FD08CCA5A5FD0DCCA47DFD0CFFA8FD13FFA8CFFFCFFFCFCFCF
%FFCFCFCFFFCFFFA77C98FD04C07581CDCCCDCCCDCCCDCCCDA5CCCCCD7B98
%FD08C074FD14CACB7CCCCCCDCCCDCCCDCCCDA5CDCCCDCCCDCCCDCCCDCCCD
%CCCDCCA57DFD20FF7DA8FD0BCFFF835198FD04C0987BCCA5FD07CCA5CCCC
%CCA574FD09C074A1FD0DCAA1FD06CA7CA4CCA4CCA5CCA4CCA5A5A4CCA5CC
%A4CCA5CCA4CCA5CCA4CC7A7DFD0CFFA8FD13FFA7A7FD07CFA8FFCFFF7C74
%98FD05C050CDA5CCCCCDCCCCA5CCA5CCCCCDCC7598FD08C0C674FD15CA76
%7C7C7C767C7C7C76A0517C7C7D7C7C7C7D7C7C7C7DFD047CA8FD0BFFA8FD
%14FF7DFD07CFA7CFCFCF5198C0C09EC0C0C04ACCCCCCA5CCA5CCA5FD06CC
%7B74FD0AC075A2FD0DCAA1FD07CAA2FD08CA7DA8FD1BFFA8FD13FFA8A7FF
%FD04CFA8CFCFA851C0C0C69EC0C0C674A5CCCDA5CCA5CDCCCDCCCDCCCDCC
%A574FD0AC0C674A2A2CAA8CAA2CAA8CAA2CAA8CAA2A8A2CAA2CAA8CAA1CA
%A1CAA1CAA1CAA1CA76FD30FF7DFD05CFA7CFCF7D4AFD07C0747BCCCCA5A5
%A5FD05CCA5CCCCCC4AFD0CC09E74747475747474757474747574744A7574
%7474757451FD0A7DFD1CFFA8FD13FFA8A7CFCFFFCFCFA87C74FD05C098C0
%C075CCCDA5CCA5CDCCCCCCCDA5CCCCCD509EFD0DC0C6C0C0C0C6C0C0C0C6
%C0C0C0C6C0C0C0C6FD04C075FD3AFF7DA7FD04CF7D5198FD08C0747BCCA5
%CCCCA5A5CCCCCCA5CCCCCC7A74FD1CC098FD05C0BA75A9FD23FFA8A8A8FD
%13FFA8A7CFCFCF7C75C0C6FD05C0C69E747BCDCCCDCCCDA5CDCCCDCCCDCC
%CDA575FD24C075FD25FFA8FD14FF7DCFCFA84B98FD08C0744526FD07CCA5
%FD06CC7498FD1DC098FD05C0BA75A9FD25FFA8FD13FFA7AEA851FD06C0C6
%9E74466D4CCCCCCDFD06CCA5A5A5CCCC7B4B9F747B7575747B7575747B75
%75747B7575747B757B747B757B757B757BFD0475517B757576FD26FFA8FD
%0DFFA8FFA8FFFFFF7D7C4AFD06C09E6E4C6C91477BFD06CCA5CCCCCCA5CC
%CCA551CFAECFA8CFAECFA8CFAECFA8A8A8CFA8CFA8CFA8CFA8CFA8CFA8CF
%A8CFA8CF7CA8A9A8A9FFA9FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FD09FFA8FD0DFF7D7D527DFFFF7D4AC0C09898C098
%4A216C6D914751A4CCA4CCA5CCA4A5A5CC7AA5A5A551A7A7CFA7CFA7CFA7
%CFA7CFA7CFA7CFA7CFA7CFA7CFA7A7A7CFA8A7A7CFA8A7A77DA8FFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0DFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%A8FD0DFF52522752FFFFA87C7C7D7C7D7C7D537D777D777D7C7D7C7D7C7D
%7C7D7C7D7C7D7C7D7CFD217D7CFD04A8FFA8A8A8FFA8A8A8FFA8A8A8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0D
%FF7D7D7DA8FD80FFA8FFFFFFA8FD11FFA8FFA8FFA8FD0FFFA8FFA8FFA8FF
%A8FD0FFFA8FFA8FFA8FFA8FD0FFFA8FFFFFFA8FD0FFFA8FFFFFFA8FD10FF
%27A852A8277D52A8FD0DFF7D27A8527D527D7DFD0DFFA8277D7D52527D7D
%7DFD0DFF5252FD047D527DFD0EFF277D527D277D52A8FD0DFF7D52FF527D
%527D52FD0CFFA8527D7D527D277D7DFD0DFF7DFD0552277DA8FD0CFFA852
%7DFD04527D7DFD0DFF7D527D277D52527DFD0DFFA852527D277D277D7DFD
%0DFF7D7D52F8FD0452FD0DFF7DFFA8A87DA87DFD0EFFA87D7D7DA87D7D7D
%FD0EFFFD077DA8FD0DFFA87D7DA87DA87DA8FD0EFF7D7D7DA87DA87DFD0E
%FFA87DFF7D7D7DA87DFD5EFFA8FD74FF7DFD08FFA87DFD6DFFA8A87DA8FF
%7D7D5227A8A8F8A8FD04FF7D7D7DFD55FFA852A852FD09FFFD047DA8FD05
%FF52FF27A87D7D522727A87D2752FFA8FD067DFD54FF2752277D27FFA8FF
%FFFF52A8FF5252275252FD04FFA87DFFFD047DA852FFFFFF277D525252FF
%FFFFA852FD54FF52A852FF27527D7DFFFFA8A8FF52A852FF27527DA8FFA8
%52FF52A87D7D527DFFFFA852A852A827A8FFFFA852FD54FF7DFF7DFF7D27
%5252FD05FFFD04A87DF87D27FFFF52A8A8A8FF7D7DFD04FF7DFF7DA87DFF
%FFFF7D7DFD59FFA8A852A8FD09FFA8A87DFFFFA8A8FD11FFA8FD6BFFA8FD
%34FFFF
%%EndData
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Utils 68 dict dup begin put
/bdf
{
	bind def
} bind def
/nd{
	null def
}bdf
/xdf
{
	exch def
}bdf
/ldf 
{
	load def
}bdf
/ddf
{
	put
}bdf	
/xddf
{
	3 -1 roll put
}bdf	
/xpt
{
	exch put
}bdf
/ndf
{ 
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/bdict
{
	mark
}bdf
/edict
{
	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end
}def
/ps_level
	/languagelevel where{
		pop systemdict /languagelevel get exec
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr} stopped {
		-1
	}if
def
/makereadonlyarray
{
	/packedarray where{
		pop packedarray
	}{
		array astore readonly
	}ifelse
}bdf
/map_reserved_ink_name
{
	dup type /stringtype eq{
		dup /Red eq{
			pop (_Red_)
		}{
			dup /Green eq{
				pop (_Green_)
			}{
				dup /Blue eq{
					pop (_Blue_)
				}{
					dup () cvn eq{
						pop (Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf
		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne
			{
			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark
			} if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		} ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/agm_sethalftone
{ 
	dup
	begin
		/_Data load
		/Thresholds xdf
	end
	level3 
	{ sethalftone }{
		dup /HalftoneType get 3 eq {
			sethalftone
		} {pop} ifelse
	}ifelse
} def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%) anchorsearch {pop} if
} bdf
/filter_cmyk
{	
	dup type /filetype ne{
		exch () /SubFileDecode filter
	}
	{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length /AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	] cvx
} bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
} bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type /filetype ne{
		0 () /SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx
			currentdict /srcStr get /readstring cvx /pop cvx
			/dup cvx /length cvx 0 /gt cvx [
				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx
				names_index Names length currentdict /srcStr get length 1 sub {
					1 /index cvx /exch cvx /get cvx
					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx
					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx
				} for
				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx
			] cvx /if cvx
			/end cvx
		] cvx
		bind
		/exec cvx
	] cvx
	end
} bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict /DataSource get def
	/origMultipleDataSources imageDict /MultipleDataSources get def
	/origDecode imageDict /Decode get def
	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ imageDict begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse
	{
		/imbufCnt imageDict /DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub {
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put
		} for
		DeviceN_PS2 {
			imageDict begin
		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def
			/MultipleDataSources false def
			/Decode [0 1] def
			end
		} if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or {
			imageDict begin
		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def
			/Decode [0 1] def
			end
		}{
			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put
		} ifelse
	} ifelse
	imageDict exch
	load exec
	imageDict /DataSource origDataSource put
	imageDict /MultipleDataSources origMultipleDataSources put
	imageDict /Decode origDecode put	
	end
} bdf
/write_image_file
{
	begin
	{ (AGMUTIL_imagefile) (w+) file } stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {
			/imbuf imbufLen string def
		}if
		1 1 Height { 
			pop
			MultipleDataSources {
			 	0 1 DataSource length 1 sub {
					DataSource type dup
					/arraytype eq {
						pop DataSource exch get exec
					}{
						/filetype eq {
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						} ifelse
					} ifelse
					AGMUTIL_imagefile exch writestring
				} for
			}{
				DataSource type dup
				/arraytype eq {
					pop DataSource exec
				}{
					/filetype eq {
						DataSource imbuf readstring pop
					}{
						DataSource
					} ifelse
				} ifelse
				AGMUTIL_imagefile exch writestring
			} ifelse
		}for
		end
		true
	}ifelse
	end
} bdf
/close_image_file
{
	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile
}def
statusdict /product known userdict /AGMP_current_show known not and{
	/pstr statusdict /product get def
	pstr (HP LaserJet 2200) eq 	
	pstr (HP LaserJet 4000 Series) eq or
	pstr (HP LaserJet 4050 Series ) eq or
	pstr (HP LaserJet 8000 Series) eq or
	pstr (HP LaserJet 8100 Series) eq or
	pstr (HP LaserJet 8150 Series) eq or
	pstr (HP LaserJet 5000 Series) eq or
	pstr (HP LaserJet 5100 Series) eq or
	pstr (HP Color LaserJet 4500) eq or
	pstr (HP Color LaserJet 4600) eq or
	pstr (HP LaserJet 5Si) eq or
	pstr (HP LaserJet 1200 Series) eq or
	pstr (HP LaserJet 1300 Series) eq or
	pstr (HP LaserJet 4100 Series) eq or 
	{
 		userdict /AGMP_current_show /show load put
		userdict /show {
		  currentcolorspace 0 get
		  /Pattern eq
		  {false charpath f}
		  {AGMP_current_show} ifelse
		} put
	}if
	currentdict /pstr undef
} if
/consumeimagedata
{
	begin
	currentdict /MultipleDataSources known not
		{/MultipleDataSources false def} if
	MultipleDataSources
		{
		1 dict begin
		/flushbuffer Width cvi string def
		1 1 Height cvi
			{
			pop
			0 1 DataSource length 1 sub
				{
				DataSource exch get
				dup type dup 
				/filetype eq
					{
					exch flushbuffer readstring pop pop
					}if
				/arraytype eq
					{
					exec pop
					}if
				}for
			}for
		end
		}
		{
		/DataSource load type dup 
		/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 div mul cvi string def
			1 1 Height { pop DataSource flushbuffer readstring pop pop} for
			end
			}if
		/arraytype eq
			{
			1 1 Height { pop DataSource pop } for
			}if
		}ifelse
	end
}bdf
/addprocs
{
	  2{/exec load}repeat
	  3 1 roll
	  [ 5 1 roll ] bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs /TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{ 
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs /TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 
	dup type /dicttype eq
		{
			AGMCORE_tmp
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	dup type /arraytype eq
		{
			AGMCORE_tmp exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		} if
	exch dup
	AGMCORE_tmp 4 -1 roll put
	}forall
	exch {cvx} if
}bdf
/clonedict
{
	dup length dict
	begin
		{
		dup type /dicttype eq
			{
				clonedict
			} if
		dup type /arraytype eq
			{
				clonearray
			} if
		def
		}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and
} bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne {
		/CSD known
	}{
		pop false
	} ifelse
} bdf
/DeviceN_NoneName
{	
	/Names where {
		pop
		false Names
		{
			(None) eq or
		} forall
	}{
		false
	}ifelse
} bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup /arraytype eq exch /packedarraytype eq or
		{
			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}
			{
				true
			}ifelse
		}
		{
			true
		} ifelse
	}
	{
		true
	} ifelse
} bdf
/base_colorspace_type
{
	dup type /arraytype eq {0 get} if
} bdf
/doc_setup{
	Adobe_AGM_Utils begin
}bdf
/doc_trailer{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Core 216 dict dup begin put
/nd{
	null def
}bind def
/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen [currentscreen] cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSA_cache 0 dict def
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_pattern_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_ovp nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_gradientcache 32 dict def
/AGMCORE_in_pattern false def
/knockout_unitsq nd
/AGMCORE_CRD_cache where{
	pop
}{
	/AGMCORE_CRD_cache 0 dict def
}ifelse
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer {readline} stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type /dicttype eq{
		dup /HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup /HalftoneType get 2 eq{
				/GraySpotFunction get
			}{ 
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
} def
/clp_npth
{
	clip newpath
} def
/eoclp_npth
{
	eoclip newpath
} def
/npth_clp
{
	newpath clip
} def
/add_grad
{
	AGMCORE_gradientcache 3 1 roll put
}bdf
/exec_grad
{
	AGMCORE_gradientcache exch get exec
}bdf
/graphic_setup
{
	/AGMCORE_graphicsave save def
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[] 0 setdash
	10 setmiterlimit
	newpath
	false setoverprint
	false setstrokeadjust
	Adobe_AGM_Core/spot_alias get exec
	/Adobe_AGM_Image where {
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			get exec
		}{
			pop pop
		}ifelse
	} if
	100 dict begin
	/dictstackcount countdictstack def
	/showpage {} def
	mark
} def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub {end}for
	end
	AGMCORE_graphicsave restore
} def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				} if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}
			{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			} ifelse
		} forall
} bdf
/doc_setup{
	Adobe_AGM_Core begin
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict /AGM_handleerror known not{
		errordict /AGM_handleerror errordict /handleerror get put
		errordict /handleerror {
			Adobe_AGM_Core begin
			$error /newerror get AGMCORE_cur_err null ne and{
				$error /newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error /newerror true put
			end
			errordict /AGM_handleerror get exec
			} bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and
		}{
			false
		}ifelse
	def
	level2 not{
		/xput{
			dup load dup length exch maxlength eq{
				dup dup load dup
				length dup 0 eq {pop 1} if 2 mul dict copy def
			}if
			load begin
				def
 			end
		}def
	}{
		/xput{
			load 3 1 roll put
		}def
	}ifelse
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 10 def
		/AGMCORE_&gsave /gsave ldf
		/AGMCORE_&grestore /grestore ldf
		/AGMCORE_&grestoreall /grestoreall ldf
		/AGMCORE_&save /save ldf
		/AGMCORE_gdictcopy {
			begin
			{ def } forall
			end
		}def
		/AGMCORE_gput {
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget {
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave {
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore {
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt {1 add} if
			Adobe_AGM_Core exch
			/AGMCORE_gstackptr xpt
		}def
		/grestoreall {
			AGMCORE_&grestoreall
			Adobe_AGM_Core
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 
		}def
		/save {
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge {limitcheck} if
			Adobe_AGM_Core begin
				/AGMCORE_gstackptr exch def
				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def
			end
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		0 1 AGMCORE_gstack length 1 sub {
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		} for
	}if
	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&usrshfill /shfill load def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern /makepattern load def
	}if
	/currentcmykcolor [0 0 0 0] AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace [/DeviceGray] AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent () AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	<<
	/MaxPatternItem currentsystemparams /MaxPatternCache get
	>>
	setuserparams
	end
}def
/page_setup
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3 {
			3 index add neg dup 0 lt {
				pop 0
			} if
			3 1 roll
		} repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{
		pop
	}ndf
	/currentoverprint
	{
		false
	}ndf
	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{ 
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==
			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf
		} if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/LeaveColorUnchanged eq
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where {pop}{
		/convert_spot_to_process
		{
			dup map_alias {
				/Name get exch pop
			} if
			dup dup (None) eq exch (All) eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
						currentgray 0 eq
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						Adobe_AGM_Core/AGMCORE_name xddf
						false
						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse
						not currentpagedevice/OverrideSeparations known and
							{
							currentpagedevice/OverrideSeparations get
								{
								/HqnSpots /ProcSet resourcestatus
									{
									pop pop pop true
									}if
								}if
							}if					
							{
							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not
							}{
							gsave
							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace
							false
							currentpagedevice/SeparationColorNames 2 copy known
							{
								get
								{ AGMCORE_name eq or}forall
							not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		}def
	}ifelse
	/convert_to_process where {pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{ 
				dup true exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup (Cyan) eq exch
						dup (Magenta) eq 3 -1 roll or exch
						dup (Yellow) eq 3 -1 roll or exch
						(Black) eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					dup (Cyan) eq exch
					dup (Magenta) eq 3 -1 roll or exch
					dup (Yellow) eq 3 -1 roll or exch
					dup (Black) eq 3 -1 roll or
					{pop}
					{convert_spot_to_process or}ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space  
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	AGMCORE_host_sep{
		/setcolortransfer
		{ 
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			  	AGMCORE_magenta_plate{
			  		4 3 roll pop pop pop
			  	}{
			  		AGMCORE_yellow_plate{
			  			4 2 roll pop pop pop
			  		}{
			  			4 1 roll pop pop pop
			  		}ifelse
			  	}ifelse
			}ifelse
			settransfer  
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			  	AGMCORE_magenta_plate{
			  		{4 3 roll pop pop pop}
			  	}{
			  		AGMCORE_yellow_plate{
			  			{4 2 roll pop pop pop}
			  		}{
			  			{4 1 roll pop pop pop}
			  		}ifelse
			  	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup /Cyan eq 1 index (Cyan) eq or
					{pop (_cyan_)}if
				dup /Magenta eq 1 index (Magenta) eq or
					{pop (_magenta_)}if
				dup /Yellow eq 1 index (Yellow) eq or
					{pop (_yellow_)}if
				dup /Black eq 1 index (Black) eq or
					{pop (_black_)}if
				}def
			dup type /arraytype eq
				{[exch {filtername}forall]}
				{filtername}ifelse
			end
			}def
		/AGMCORE_IsSeparationAProcessColor
			{
			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or
			}def
		level3 {
			/AGMCORE_IsCurrentColor
				{
				gsave
				false setoverprint
				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor
				currentgray 0 eq 
				grestore
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type /stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string /string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in /readstring cvx
						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx
						[/pop cvx ()]cvx /ifelse cvx
					]cvx /ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict /Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode [1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0 [C0 channel get 1 exch sub] def
							/C1 [C1 channel get 1 exch sub] def
							}{
							/C0 [1] def
							/C1 [1] def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def			
						}if
					currentdict /Range known
						{/Range [0 1] def}if
					currentdict
					end
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict /Function known
					{
					currentdict /Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf
					/ColorSpace [/DeviceGray] def
					}{
					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq
						{
						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get /Separation eq
						{
							{
								[1 /exch cvx /sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx
							}{
								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2 /DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup /ColorSpace get
				dup type /arraytype ne
					{[exch]}if
				dup 0 get /DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get /Separation eq
					{
					exch begin
					ColorSpace 1 get dup /None ne exch /All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get /exec cvx
										4 AGMCORE_plate_ndx sub -1 /roll cvx
										4 1 /roll cvx
										3 [/pop cvx]cvx /repeat cvx
										1 /exch cvx /sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get /DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get /exec cvx
									4 AGMCORE_plate_ndx sub -1 /roll cvx
									4 1 /roll cvx
									3 [/pop cvx]cvx /repeat cvx
									1 /exch cvx /sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace [/DeviceGray] def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type /arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get /CIEBasedA eq
								{
								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def
								}if
							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or
								{
								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def
								}if
							ColorSpace 0 get /CIEBasedDEFG eq
								{
								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup /AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace [/Separation (None) /DeviceGray {}] def
					currentdict end
					}if
				}def
			/shfill
				{
				clonedict
				AGMCORE_separateShadingDict 
				dup /AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup /PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					currentdict end
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{ 
				4 {4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{ 
				Adobe_AGM_Core begin
					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf
				end
				[/Separation 4 -1 roll /DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation (All) /DeviceGray {}] setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4 {4 index mul 4 1 roll} repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval {255 div} forall
	} bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	} bdf
	/n_color_components
	{
		base_colorspace_type
		dup /DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo /moveto ldf
		/li /lineto ldf
		/cv /curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		/level2ScreenFreq{
			begin
			60
			HalftoneType 1 eq{
				pop Frequency
			}if
			HalftoneType 2 eq{
				pop GrayFrequency
			}if
			HalftoneType 5 eq{
				pop Default level2ScreenFreq
			}if
			 end
		}def
		/currentScreenFreq{
			currenthalftone level2ScreenFreq
		}def
		level2 /setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace /setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get dup /Separation eq
					{
						pop
						dup length array copy
						dup dup 1 get
						current_spot_alias
						{
							dup map_alias
							{
								begin
								/sep_colorspace_dict currentdict AGMCORE_gput
								pop pop	pop
								[ 
									/Separation Name 
									CSA map_csa
									dup /MappedCSA xdf 
									/sep_colorspace_proc load
								]
								dup Name
								end
							}if
						}if
						map_reserved_ink_name 1 xpt
					}{
						/DeviceN eq 
						{
							dup length array copy
							dup dup 1 get [ 
								exch {
									current_spot_alias{
										dup map_alias{
											/Name get exch pop
										}if
									}if
									map_reserved_ink_name
								} forall 
							] 1 xpt
						}if
					}ifelse
				}if
			}def
			/setcolorspace
			{
				dup type dup /arraytype eq exch /packedarraytype eq or
				{
					dup 0 get /Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/currentScreenFreq{
			currentscreen pop pop
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		} def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		} def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup /DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup /DeviceGray ne{
				dup /DeviceCMYK ne{
					dup /DeviceRGB ne{
						dup /Separation eq{
							pop
							currentcolorspace 3 get exec
							currentcolorspace 2 get
						}{
							dup /Indexed eq{
								pop
								currentcolorspace 3 get dup type /stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err /AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		} def
	}ifelse
	/sop /setoverprint ldf
	/lw /setlinewidth ldf
	/lc /setlinecap ldf
	/lj /setlinejoin ldf
	/ml /setmiterlimit ldf
	/dsh /setdash ldf
	/sadj /setstrokeadjust ldf
	/gry /setgray ldf
	/rgb /setrgbcolor ldf
	/cmyk /setcmykcolor ldf
	/sep /setsepcolor ldf
	/devn /setdevicencolor ldf
	/idx /setindexedcolor ldf
	/colr /setcolor ldf
	/csacrd /set_csa_crd ldf
	/sepcs /setsepcolorspace ldf
	/devncs /setdevicencolorspace ldf
	/idxcs /setindexedcolorspace ldf
	/cp /closepath ldf
	/clp /clp_npth ldf
	/eclp /eoclp_npth ldf
	/f /fill ldf
	/ef /eofill ldf
	/@ /stroke ldf
	/nclp /npth_clp ldf
	/gset /graphic_setup ldf
	/gcln /graphic_cleanup ldf
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {
			bind
		}if
		def
	}forall
	/currentpagedevice currentpagedevice def
/getrampcolor {
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
ColorSpaceFamily /Separation eq
	{
	sep
	}
	{
	ColorSpaceFamily /DeviceN eq
		{
		devn
		}
		{
		setcolor
		}ifelse
	}ifelse
} bind def
/sssetbackground { aload pop setcolor } bind def
/RadialShade {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bind def
/GenStrips {
40 dict begin
/ColorSpaceFamily exch def
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
/setinkoverprint where {pop /setinkoverprint{pop}def}if
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bind def
}def
/page_trailer
{
	end
}def
/doc_trailer{
}def
systemdict /findcolorrendering known{
	/findcolorrendering systemdict /findcolorrendering get def
}if
systemdict /setcolorrendering known{
	/setcolorrendering systemdict /setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA map_csa setcolorspace_opt
		set_crd
	end
}
def
/setsepcolor
{ 
	/sep_colorspace_dict AGMCORE_gget begin
		dup /sep_tint exch AGMCORE_gput
		TintProc
	end
} def
/setdevicencolor
{ 
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		} for
		TintProc
	end
} def
/sep_colorspace_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2 {AGMCORE_tmp mul NComponents 1 roll} repeat
			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll
				} repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
} def
/sep_colorspace_gray_proc
{
	Adobe_AGM_Core/AGMCORE_tmp xddf
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
} def
/sep_proc_name
{
	dup 0 get 
	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{
		pop [/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
} def
/setsepcolorspace
{ 
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup /sep_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 
		] setcolorspace_opt
		/TintProc {
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get /DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc [
				Components aload pop Name findcmykcustomcolor 
				/exch cvx /setcustomcolor cvx
			] cvx bdf
		}{
 			AGMCORE_host_sep Name (All) eq and{
 				/TintProc { 
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name () eq and{
					/TintProc [
						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{
							cvx /setcmykcolor cvx
						}{
							cvx /setgray cvx
						}ifelse
					] cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc [
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get /DeviceGray eq{
								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx
							}if
							/Name cvx /findcmykcustomcolor cvx /exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load /exec cvx
								/not cvx /and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							] cvx /if cvx
							/setcustomcolor cvx
						] cvx bdf
 					}{ 
						/TintProc /setcolor ldf
						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
} def
/additive_blend
{
  	3 dict begin
  	/numarrays xdf
  	/numcolors xdf
  	0 1 numcolors 1 sub
  		{
  		/c1 xdf
  		1
  		0 1 numarrays 1 sub
  			{
			1 exch add /index cvx
  			c1 /get cvx /mul cvx
  			}for
 		numarrays 1 add 1 /roll cvx 
  		}for
 	numarrays [/pop cvx] cvx /repeat cvx
  	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add /index cvx  
			c1 /get cvx /sub cvx /mul cvx
			}for
		/sub cvx
		numarrays 1 add 1 /roll cvx
		}for
	numarrays [/pop cvx] cvx /repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc [
		/TintTransform cvx /setcolor cvx
	] cvx bdf
	MappedCSA setcolorspace_opt
} bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length {pop} repeat
	end
} bdf
/setdevicencolorspace
{ 
	dup /AliasedColorants known {false}{true}ifelse 
	current_spot_alias and {
		6 dict begin
		/names_index 0 def
		dup /names_len exch /Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup /Names get
		{
			dup map_alias {
				exch pop
				dup /ColorLookup known {
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup /Components known {
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index [null null null null] put
						end
					} ifelse
				} ifelse
				new_names names_index 3 -1 roll /Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup /LookupTables known {
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index [null null null null] put
					end
				} ifelse
			} ifelse
			/names_index names_index 1 add def 
		} forall
		alias_cnt 0 gt {
			/AliasedColorants true def
			0 1 names_len 1 sub {
				/names_index xdf
				new_LookupTables names_index get 0 get null eq {
					dup /Names get names_index get /name xdf
					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq
					or or or not {
						/AliasedColorants false def
						exit
					} if
				} if
			} for
			AliasedColorants {
				dup begin
				/Names new_names def
				/AliasedColorants true def
				/LookupTables new_LookupTables def
				currentdict /TTTablesIdx known not {
					/TTTablesIdx -1 def
				} if
				currentdict /NComponents known not {
					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def
				} if
				end
			} if
		}if
		end
	} if
	dup /devicen_colorspace_dict exch AGMCORE_gput
	begin
	/MappedCSA CSA map_csa def
	currentdict /AliasedColorants known {
		AliasedColorants
	}{
		false
	} ifelse
	/TintTransform load type /nulltype eq or {
		/TintTransform [
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup (Cyan) eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup (Magenta) eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0 /exch cvx 0 0
							}
							{
							(Yellow) eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1 /roll cvx 0
								}
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1 /roll cvx
								} ifelse
							} ifelse
						} ifelse
					5 -1 /roll cvx /astore cvx
					}
					{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx /mul cvx /round cvx /cvi cvx /get cvx
					} ifelse
					Names length TTTablesIdx add 1 add 1 /roll cvx
				} for
			Names length [/pop cvx] cvx /repeat cvx
			NComponents Names length
  			TintMethod /Subtractive eq
  				{
  				subtractive_blend
  				}
  				{
  				additive_blend
  				} ifelse
		] cvx bdf
	} if
	AGMCORE_host_sep {
		Names convert_to_process {
			exec_tint_transform
		}
		{	
			currentdict /AliasedColorants known {
				AliasedColorants not
			}{
				false
			} ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			Names {
				AvoidAliasedColorants {
					/currentspotalias current_spot_alias def
					false set_spot_alias
				} if
				AGMCORE_is_cmyk_sep {
					dup (Cyan) eq AGMCORE_cyan_plate and exch
					dup (Magenta) eq AGMCORE_magenta_plate and exch
					dup (Yellow) eq AGMCORE_yellow_plate and exch
					(Black) eq AGMCORE_black_plate and or or or {
						/devicen_colorspace_dict AGMCORE_gget /TintProc [
							Names names_index /devn_makecustomcolor cvx
						] cvx ddf
						/painted? true def
					} if
					painted? {exit} if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {
					/devicen_colorspace_dict AGMCORE_gget /TintProc [
						Names names_index /devn_makecustomcolor cvx
					] cvx ddf
					/painted? true def
					exit
					} if
				} ifelse
				AvoidAliasedColorants {
					currentspotalias set_spot_alias
				} if
				/names_index names_index 1 add def
			} forall
			painted? {
				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget /TintProc [
					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx
					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx
				] cvx ddf
			} ifelse
			end
		} ifelse
	}
	{
		AGMCORE_in_rip_sep {
			Names convert_to_process not
		}{
			level3
		} ifelse
		{
			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and {
				[
					Names /length cvx [/pop cvx] cvx /repeat cvx
				] cvx bdf
			}{
				/setcolor ldf
			} ifelse
		}{
			exec_tint_transform
		} ifelse
	} ifelse
	set_crd
	/AliasedColorants false def
	end
} def
/setindexedcolorspace
{
	dup /indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict /CSD known {
			CSD get_csd /Names known {
				CSD get_csd begin
				currentdict devncs
				AGMCORE_host_sep{
					4 dict begin
					/devnCompCnt Names length def
					/NewLookup HiVal 1 add string def
					0 1 HiVal {
						/tableIndex xdf
						Lookup dup type /stringtype eq {
							devnCompCnt tableIndex map_index
						}{
							exec
						} ifelse
						setdevicencolor
						currentgray
						tableIndex exch
						HiVal mul cvi 
						NewLookup 3 1 roll put
					} for
					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt
					end
				}{
					level3
					{
					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt
					}{
					[/Indexed MappedCSA HiVal
						[
						Lookup dup type /stringtype eq
							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}
							{/exec cvx}ifelse
							/TintTransform load /exec cvx
						]cvx
					]setcolorspace_opt
					}ifelse
				} ifelse
				end
			}{
			} ifelse
			set_crd
		}
		{
			/MappedCSA CSA map_csa def
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{
						pop [/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{ 
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval {} forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						} bind
					}{
						Lookup
					}ifelse
				}ifelse
				] setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep {
		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {
			begin
			CSD get_csd begin
			map_indexed_devn
			devn
			end
			end
		}{
			AGMCORE_gget/Lookup get 4 3 -1 roll map_index
			pop setcmykcolor
		} ifelse
	}{
		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {
			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		} ifelse
	}ifelse
} def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode [0 1] def
		/DataSource <FF> def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict /image get exec
		grestore
		}if
	consumeimagedata
}def
/add_csa
{
	Adobe_AGM_Core begin
			/AGMCORE_CSA_cache xput
	end
}def
/get_csa_by_name
{
	dup type dup /nametype eq exch /stringtype eq or{
		Adobe_AGM_Core begin
		1 dict begin
		/name xdf
		AGMCORE_CSA_cache
		{
			0 get name eq {
				exit
			}{
				pop
			} ifelse
		}forall
		end
		end
	}{
		pop
	} ifelse
}def
/map_csa
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get
	}if
}def
/add_csd
{
	Adobe_AGM_Core begin
		/AGMCORE_CSD_cache xput
	end
}def
/get_csd
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get
	}if
}def
/pattern_buf_init
{
	/count get 0 0 put
} def
/pattern_buf_next
{
	dup /count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
} def
/cachepattern_compress
{
	5 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq {
			pop
		}{
			patarray dup length 1 sub 3 -1 roll put
		} ifelse
		{string_size}{0}ifelse string
	} /LZWEncode filter def
	{ 		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not {exit} if
	} loop
	LZWFilter closefile
	patarray				
	end
}def
/cachepattern
{
	2 dict begin
	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def
	/patarray 20 dict def
	currentglobal true setglobal 
	patarray 1 array dup 0 1 put /count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		patarray dup length 1 sub 3 -1 roll put
		not {exit} if
	} loop
	patarray dup dup length 1 sub () put					
	end	
}def
/add_pattern
{
	Adobe_AGM_Core begin
		/AGMCORE_pattern_cache xput
	end
}def
/get_pattern
{
	dup type /nametype eq{
		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get
		dup wrap_paintproc
	}if
}def
/wrap_paintproc
{ 
  statusdict /currentfilenameextend known{
	  begin
		/OldPaintProc /PaintProc load def
		/PaintProc
		{
		  mark exch
		  dup /OldPaintProc get stopped
		  {closefile restore end} if
		  cleartomark
		}  def
	  end
  } {pop} ifelse
} def
/make_pattern
{
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			  1 index begin
		BBox 0 get XStep div cvi XStep mul /xshift exch neg def
		BBox 1 get YStep div cvi YStep mul /yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[ xshift yshift /translate load null /exec load ] dup
		3 /PaintProc load put cvx /PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup /PatternType get 1 eq{
		dup /PaintType get 1 eq{
			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{
		pop
	}{
		setcolorspace
	}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/Intent known{
		currentcolorrendering/Intent get
	}{
		null
	}ifelse
	Intent ne{
		false  
		Intent
		AGMCORE_CRD_cache {
			exch pop 
			begin
				dup Intent eq{
					currentdict setcolorrendering_opt
					end 
					exch pop true exch	
					exit
				}if
			end
		} forall
		pop
		not{
			systemdict /findcolorrendering known{
				Intent findcolorrendering pop
				/ColorRendering findresource 
				dup length dict copy
				setcolorrendering_opt
			}if
		}if
	}if
} def
/add_crd
{
	AGMCORE_CRD_cache 3 1 roll put
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/CRD known{
			AGMCORE_CRD_cache CRD get dup null ne{
				setcolorrendering_opt
			}{
				pop
			}ifelse
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type /arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp) flushinput
	}if
}def
/cpaint_gsep
{
	Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep) flushinput
	}if
}def
/cpaint_gend
{
	newpath
}def
/path_rez
{
	dup 0 ne{
		AGMCORE_deviceDPI exch div 
		dup 1 lt{
			pop 1
		}if
		setflat
	}{
		pop
	}ifelse 	
}def
/set_spot_alias_ary
{
	/AGMCORE_SpotAliasAry where{
		pop pop
	}{
		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
		true set_spot_alias
	}ifelse
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry{
				dup/Name get AGMCORE_name eq{
					save exch
					/Adobe_AGM_Core currentdict def
					/CSD get get_csd
					exch restore
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not {
		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put
	} if
	/customcolor_tint 1 AGMCORE_gput
	Adobe_AGM_Core begin
	/setcustomcolor
	{
		dup /customcolor_tint exch AGMCORE_gput
		current_spot_alias{
			1 index 4 get map_alias{
				mark 3 1 roll
				setsepcolorspace
				counttomark 0 ne{
					setsepcolor
				}if
				pop
				pop
			}{
				AGMCORE_&setcustomcolor
			}ifelse
		}{
			AGMCORE_&setcustomcolor
		}ifelse
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd /setpagedevice load def
	/setpagedevice { get_gstate spd set_gstate } def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known{
			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 
		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore
	}if
	end
}def
/lw_save_restore_override {
	/md where {
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{} def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage /showpage load def}
		ifelse
		/showpage {orig_showpage gR} def
		end
	}if
}def
/pscript_showpage_override {
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage /restore load def
		/restore {exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where {
		pop
		md /initializepage known {
			md /initializepage {} put
		} if
		md /rC known {
			md /rC {4{pop}repeat} put
		} if
	}if
	/mysetup where {
		/mysetup [1 0 0 1 0 0] put
	}if
	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
	/PrepsDict where
		{pop}
		{
		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq
			{
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def
	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def
	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) def
end
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.23 0
%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.
%%Version: 2.23 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }
if
userdict /Adobe_CoolType_Core 60 dict dup begin put
/Adobe_CoolType_Version 2.23 def
/Level2?
	systemdict /languagelevel known dup
		{ pop systemdict /languagelevel get 2 ge }
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal /pop load def
	/gcheck { pop false } bind def
	/currentpacking false def
	/setpacking /pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel
		2 copy known not
			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }
			{
			get dup /args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch /args exch put
				}
				{ pop }
			ifelse
			}
		ifelse
			begin
			count 2 sub 1 index lt
				{ pop count 1 sub }
			if
			dup /argCount exch def
			dup 0 gt
				{
				exch 1 index 2 add 1 roll
				args exch 0 exch getinterval 
			astore pop
				}
				{ pop }
			ifelse
			count 1 sub /restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		end
	} bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{ { pop } repeat }
				{ pop }
			ifelse
			args 0 argCount getinterval {} forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{ { end } repeat }
		{ pop }
	ifelse
	} bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	} bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	} bind def
/@ReRaise
	{
	cvx $error /errorname get errordict exch get exec
	stop
	} bind def
/@Stopped
	{
	0 @#Stopped
	} bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{ @_RestoreStackLevels true }
		{ @_PopStackLevels false }
	ifelse
	} bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get
		end
	} bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup begin
		mark
			{
				(*) { pop stop } 128 string /Category
			resourceforall
			}
		stopped
		cleartomark
		currentdict eq dup
			{ end }
		if
		not
		}
		{ false }
	ifelse
	def
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{ /steveamerige /Category resourcestatus }
		stopped
			{ cleartomark true }
			{ cleartomark currentglobal not }
		ifelse
		}
		{ false }
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
				{ cleartomark false }
				{ { 3 2 roll pop true } { cleartomark false } ifelse }
			ifelse
			end
		} bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad /ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup /CMap CTHasResourceStatusBug
						{ CTResourceStatus }
						{ resourcestatus }
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup /CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{ exit }
								{ stop }
							ifelse
							}
						ifelse
						}
						{ pop }
					ifelse
					}
				128 string /CMap resourceforall
				}
			stopped
				{ cleartomark }
			stopped pop
			setglobal
			}
		if
		}
	if
	} bind def
/doc_setup
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mov /moveto load def
		/nfnt /newencodedfont load def
		/mfnt /makefont load def
		/sfnt /setfont load def
		/ufnt /undefinefont load def
		/chp /charpath load def
		/awsh /awidthshow load def
		/wsh /widthshow load def
		/ash /ashow load def
		/sh /show load def
		end
	userdict /Adobe_CoolType_Data 10 dict dup
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end put
	} bind def
/doc_trailer
	{
	currentdict Adobe_CoolType_Core eq
		{ end }
	if
	} bind def
/page_setup
	{
	Adobe_CoolType_Core begin
	} bind def
/page_trailer
	{
	end
	} bind def
/unload
	{
	systemdict /languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{ undef }
				{ pop pop }
			ifelse
			}
		if
		}
	if
	} bind def
/ndf
	{
	1 index where
		{ pop pop pop }
		{ dup xcheck { bind } if def }
	ifelse
	} def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where { /globaldict get begin } if
			dup where pop exch get
		/globaldict where { pop end } if
		end
	end
Adobe_CoolType_Core_Defined
	{ /systemfindfont exch def }
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{ pop } ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq { 0 } { dup length } ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index /FID eq
				{ pop pop }
				{ def }
			ifelse
			}
		forall
		dup null eq
			{ pop }
			{ { def } forall }
		ifelse
		currentdict
		end
	exch setglobal
	} bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	} bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index  known
			{ SharedFontDirectory 3 index get /FontReferenced known }
			{ false }
		ifelse
		}
		{
		FontDirectory 3 index known
			{ FontDirectory 3 index get /FontReferenced known }
			{
			SharedFontDirectory 3 index known
				{ SharedFontDirectory 3 index get /FontReferenced known }
				{ false }
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont /FontReferenced get
		2 index dup type /nametype eq
			{findfont}
		if ne
			{ pop false }
		if
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{ 2 copy get 3 index 3 1 roll put }
		for
		pop pop pop
		}
		{
		dup type /nametype eq
		  { findfont }
	  if
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index /FID ne
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type /stringtype eq { cvn } if def dup
			currentdict
			end
		definefont def
		}
	ifelse
	} bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type /dicttype ne
			{ 0 dict }
		if
		currentdict /$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{ def } forall
					{ def } forall
					currentdict
					dup /$Init known
						{ dup /$Init get exec }
					if
					end
				/$Strategy exch def
				}
				{ pop pop pop }
			ifelse
			}
			{ pop pop }
		ifelse
		end
	} bind def
/scff
	{
	$SubstituteFont
		begin
		dup type /stringtype eq
			{ dup length exch }
			{ null }
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{ $sname }
			ifelse def
		end
		{ findfont }
	@Stopped
		{
		dup length 8 add string exch
		1 index 0 (BadFont:) putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{ findfont }
		@Stopped
			{ pop /Courier findfont }
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	} bind def
/isWidthsOnlyFont
	{
	dup /WidthsOnly known
		{ pop pop true }
		{
		dup /FDepVector known
			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }
			{
			dup /FDArray known
				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }
				{ pop }
			ifelse
			}
		ifelse
		}
	ifelse
	} bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 4 index def
		/$doSmartSub false def
		end
	3 index
	currentglobal false setglobal exch
	/CompatibleFonts /ProcSet resourcestatus
		{
		pop pop
		/CompatibleFonts /ProcSet findresource
			begin
			dup /CompatibleFont currentexception
			1 index /CompatibleFont true setexception
			1 index /Font resourcestatus
				{
				pop pop
				3 2 roll setglobal
				end
				exch
				dup findfont
				/CompatibleFonts /ProcSet findresource
					begin
					3 1 roll exch /CompatibleFont exch setexception
					end
				}
				{
				3 2 roll setglobal
				1 index exch /CompatibleFont exch setexception
				end
				findfont
				$SubstituteFont /$substituteFound true put
				}
			ifelse
		}
		{ exch setglobal findfont }
	ifelse
	$SubstituteFont
		begin
		$substituteFound
			{
		 false
		 (%%[Using embedded font ) print
		 5 index ?str1 cvs print
		 ( to avoid the font substitution problem noted earlier.]%%\n) print
		 }
			{
			dup /FontName known
				{
				dup /FontName get $fontname eq
				1 index /DistillerFauxFont known not and
				/currentdistillerparams where
					{ pop false 2 index isWidthsOnlyFont not and }
				if
				}
				{ false }
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		exch pop exch pop exch
		2 dict dup /Found 3 index put
		exch findfont exch
		}
		{
		exch exec
		exch dup findfont
		dup /FontType get 3 eq
	  {
		  exch ?str1 cvs
		  dup length 1 sub
		  -1 0
		{
			  exch dup 2 index get 42 eq
			{
				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop
				 exit
			  }
			  {exch pop} ifelse
		  }for
		}
		{
		 exch pop
	  } ifelse
		2 dict dup /Downloaded 6 5 roll put
		}
	ifelse
	dup /FontName 4 index put copyfont definefont pop
	} bind def
/?str2 256 string def
/?add
	{
	1 index type /integertype eq
		{ exch true 4 2 }
		{ false 3 1 }
	ifelse
	roll
	1 index findfont
	dup /Widths known
		{
		Adobe_CoolType_Data /AddWidths? true put
		gsave dup 1000 scalefont setfont
		}
	if
	/Downloaded known
		{
		exec
		exch
			{
			exch ?str2 cvs exch
			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length
			?str1 1 index 1 add 3 index putinterval
			exch length 1 add 1 index add
			?str1 2 index (*) putinterval
			?str1 0 2 index getinterval cvn findfont 
			?str1 3 index (+) putinterval
			2 dict dup /FontName ?str1 0 6 index getinterval cvn put
			dup /Downloaded Downloaded put end copyfont
			dup /FontName get exch definefont pop pop pop
			}
			{
			pop
			}
		ifelse
		}
		{
		pop
		exch
			{
			findfont
			dup /Found get
			dup length exch ?str1 cvs pop
			?str1 1 index (+) putinterval
			?str1 1 index 1 add 4 index ?str2 cvs putinterval
			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn
			1 dict exch 1 index exch /FontName exch put copyfont
			dup /FontName get exch definefont pop
			}
			{
			pop
			}
		ifelse
		}
	ifelse
	Adobe_CoolType_Data /AddWidths? get
		{ grestore Adobe_CoolType_Data /AddWidths? false put }
	if
	} bind def
/?sh
	{
	currentfont /Downloaded known { exch } if pop
	} bind def
/?chp
	{
	currentfont /Downloaded known { pop } { false chp } ifelse
	} bind def
/?mv 
	{
	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse
	} bind def
setpacking
userdict /$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{ get }
			{ pop pop { pop /Courier } bind }
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams /CannotEmbedFontPolicy 2 copy known
			{ get /Error eq }
			{ pop pop false }
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup /WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type /stringtype eq { cvn } if def
								/FontType 3 def
								/FontMatrix [ .001 0 0 .001 0 0 ] def
								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def
								/FontBBox [ 0 0 0 0 ] def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth /y exch def /x exch def
											x y setcharwidth
											$SubstituteFont /$Strategy get /$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									} bind def
								currentdict
								end
							exch setglobal
							} bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup /WMode known
										{ dup /WMode get }
										{ 0 }
									ifelse
									/$WMode exch def
									$fontname exch
									dup /FontName known
										{
										dup /FontName get
										dup type /stringtype eq { cvn } if
										}
										{ /unnamedfont }
									ifelse
									exch
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
									1 index /FontName get known
										{
										pop
										Adobe_CoolType_Data /InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{ $deepcopyfont }
									ifelse
									exch 1 index exch /FontBasedOn exch put
									dup /FontName $fontname dup type /stringtype eq { cvn } if put
									definefont
									Adobe_CoolType_Data /InVMDeepCopiedFonts get
										begin
										dup /FontBasedOn get 1 index def
										end
									} bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{ /y 1000 def }
										{ /x -1000 def 500 120 translate }
									ifelse
									Level2?
										{
										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]
										setcolorspace
										}
										{ 0 setgray }
									ifelse
									10 setlinewidth
									x .8 mul
									[ 7 3 ]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{ .2 setcolor }
											{ .8 setgray }
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									} bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict /FontName known
											{
											FontName
											dup type /stringtype eq { cvn } if
											}
											{ /unnamedfont }
										ifelse
										def
										/FontName $fontname dup type /stringtype eq { cvn } if def
										/currentdistillerparams where
											{ pop }
											{
											/FontInfo currentdict /FontInfo known
												{ FontInfo null copyfont }
												{ 2 dict }
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									} bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont {} bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type /stringtype eq { cvn } if
						dup /$fontname exch def
						$sname null eq
							{ $str cvs dup length $slen sub $slen getinterval }
							{ pop $sname }
						ifelse
						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont /$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{ /$match exch def exit }
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont /$dstack get
								{
								exch
									{
									1 index eq
										{ pop false }
										{ true }
									ifelse
									}
									{ begin false }
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{ $match (fonts/) anchorsearch pop pop cvn }
							{ /Courier }
						ifelse
						} bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1  [ /Ryumin-Light /HeiseiMin-W3
										  /GothicBBB-Medium /HeiseiKakuGo-W5
										  /HeiseiMaruGo-W4 /Jun101-Light ] def
							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def
							/GB1	  [ /STSong-Light /STHeiti-Regular ] def
							/CNS1	 [ /MKai-Medium /MHei-Medium ] def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup /FontType get 0 eq
							{
							1 dict dup /FontName /copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup /FontName /copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{ $Strategies /$Type3Underprint get exec }
						ifelse
						} bind def
					/$buildfontname
						{
						dup /CIDFont findresource /CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index (-) putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy (-) putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }
							{ pop pop pop pop pop }
						ifelse
						length
						$str 1 index (-) putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						} bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{ get }
								{ pop pop [] }
							ifelse
							}
							{ pop pop [] }
						ifelse
						false exch
							{
							dup /CIDFont resourcestatus
								{
								pop pop
								save
								1 index /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get }
									{ false }
								ifelse
								exch pop
								exch restore
									{ pop }
									{ exch pop true exit }
								ifelse
								}
								{ pop }
							ifelse
							}
						forall
							{ $str cvs $buildfontname }
							{
							false (*)
								{
								save exch
								dup /CIDFont findresource
								dup /WidthsOnly known
									{ dup /WidthsOnly get not }
									{ true }
								ifelse
								exch /CIDSystemInfo get
								dup /Registry get Registry eq
								exch /Ordering get Ordering eq and and
									{ exch restore exch pop true exit }
									{ pop restore }
								ifelse
								}
							$str /CIDFont resourceforall
								{ $buildfontname }
								{ $fontname $findfontByEnum }
							ifelse
							}
						ifelse
						} bind def
					end
				end
				currentdict /$error known currentdict /languagelevel known and dup
					{ pop $error /SubstituteFont known }
				if
				dup
					{ $error }
					{ Adobe_CoolType_Core }
				ifelse
				begin
					{
					/SubstituteFont
					/CMap /Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{ dup $str cvs dup length $slen sub $slen getinterval cvn }
									{ $sname }
								ifelse
								Adobe_CoolType_Data /InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{ exch pop true exit }
												{ pop }
											ifelse
											}
											{
											FontDirectory 1 index known
												{ exch pop true exit }
												{
												GlobalFontDirectory 1 index known
													{ exch pop true exit }
													{ pop }
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{ pop pop false }
								ifelse
									{
									exch pop exch pop
									}
									{
									dup /CMap resourcestatus
										{
										pop pop
										dup /$cmapname exch def
										/CMap findresource /CIDSystemInfo get { def } forall
										$findfontByROS
										}
										{
										128 string cvs
										dup (-) search
											{
											3 1 roll search
												{
												3 1 roll pop
													{ dup cvi }
												stopped
													{ pop pop pop pop pop $findfontByEnum }
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup /CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup /$cmapname exch def
															/CMap findresource /CIDSystemInfo get { def } forall
															$findfontByROS
															true exit
															}
															{ pop }
														ifelse
														}
													for
													dup type /booleantype eq
														{ pop }
														{ pop pop pop $findfontByEnum }
													ifelse
													}
												ifelse
												}
												{ pop pop pop $findfontByEnum }
											ifelse
											}
											{ pop pop $findfontByEnum }
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{ //SubstituteFont exec }
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{ $findfontByEnum }
								{ //SubstituteFont exec }
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core /scfindfont /systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup /FontName known
								{ dup /FontName get dup 3 index ne }
								{ /noname true }
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def /$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{ 1 index /FID eq { pop pop } { def } ifelse }
										forall
										currentdict
										end
									definefont
									dup /FontName known { dup /FontName get } { null } ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using ) print
										dup /FontName known
											{ dup /FontName get } { (unspecified font) }
										ifelse
										$str cvs print (.\n) print
										}
									if
									}
									{ exch pop }
								ifelse
								}
								{ exch pop }
							ifelse
							end
						} bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core /findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type /stringtype ne { $str cvs } if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{ dup $inVMIndex $AddInVMFont }
						if
						$doSmartSub
							{
							currentdict /$Strategy known
								{ $Strategy /$BuildFont get exec }
							if
							}
						if
						}
					if
					end
				} bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch /FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data /InVMFontsByCMap get exch
		$DictAdd
		}
		{ pop pop pop }
	ifelse
	} bind def
/$DictAdd
	{
	2 copy known not
		{ 2 copy 4 index length dict put }
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get { forall } def
				2 copy currentdict put
				end
			}
			{ pop }
		ifelse
		}
	if
	get
		begin
			{ def }
		forall
		end
	} bind def
end
end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.
systemdict /setpacking known
{
	currentpacking
	true setpacking
} if
userdict /Adobe_AGM_Image 75 dict dup begin put
/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf () def
/AGMIMG_ybuf () def
/AGMIMG_kbuf () def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/doc_setup
{ 
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage /colorimage ldf
	}if
	end
	end
}def
/page_setup
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists {/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				 }ifelse
			 }ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode [ Decode 1 get Decode 0 get] def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode [1 1] def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub} currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{ pop 1 } currenttransfer addprocs settransfer
		}def
	}ifelse
	/img /imageormask ldf
	/sepimg /sep_imageormask ldf
	/devnimg /devn_imageormask ldf
	/idximg /indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/page_trailer
{
	end
}def
/doc_trailer
{
}def
/imageormask_sys
{
	begin
		save mark
		level2{
			currentdict
			Operator /imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask {
					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator /imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix /DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix /DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint {
		0 get dup type /nametype eq {
			dup /DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			} forall
			not
		} ifelse
	}{
		pop false
	}ifelse
}def
/process_mask_L3
{
	dup begin
	/ImageType 1 def
	end
	4 dict begin
		/DataDict exch def
		/ImageType 3 def
		/InterleaveType 3 def
		/MaskDict 9 dict begin
			/ImageType 1 def
			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def
			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def
			/ImageMatrix [Width 0 0 Height neg 0 Height] def
			/NComponents 1 def
			/BitsPerComponent 1 def
			/Decode [0 1] def
			/DataSource AGMIMG_maskSource def
		currentdict end def
	currentdict end
}def
/use_mask
{
	dup type /dicttype eq
	{
		dup /Mask known	{
			dup /Mask get {
				level3
				{true}
				{
					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch
					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse
					3 -1 roll and
				} ifelse
			}
			{false} ifelse
		}
		{false} ifelse
	}
	{false} ifelse
}def
/make_line_source
{
	begin
	MultipleDataSources {
		[
		Decode length 2 div cvi {Width string} repeat
		]
	}{
		Width Decode length 2 div mul cvi string
	}ifelse
	end
}def
/datasource_to_str
{
	exch dup type
	dup /filetype eq {
		pop exch readstring
	}{
		/arraytype eq {
			exec exch copy
		}{
			pop
		}ifelse
	}ifelse
	pop
}def
/masked_image_simulation
{
	3 dict begin
	dup make_line_source /line_source xdf
	/mask_source AGMIMG_maskSource /LZWDecode filter def
	dup /Width get 8 div ceiling cvi string /mask_str xdf
	begin
	gsave
	0 1 translate 1 -1 Height div scale
	1 1 Height {
		pop
		gsave
		MultipleDataSources {
			0 1 DataSource length 1 sub {
				dup DataSource exch get
				exch line_source exch get
				datasource_to_str
			} for
		}{
			DataSource line_source datasource_to_str
		} ifelse
		<<
			/PatternType 1
			/PaintProc [
				/pop cvx
				<<
					/ImageType 1
					/Width Width
					/Height 1
					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix
					/MultipleDataSources MultipleDataSources
					/DataSource line_source
					/BitsPerComponent BitsPerComponent
					/Decode Decode
				>>
				/image cvx
			] cvx
			/BBox [0 0 Width 1]
			/XStep Width
			/YStep 1
			/PaintType 1
			/TilingType 2
		>>
		matrix makepattern set_pattern
		<<
			/ImageType 1
			/Width Width
			/Height 1
			/ImageMatrix Width 1 matrix scale
			/MultipleDataSources false
			/DataSource mask_source mask_str readstring pop
			/BitsPerComponent 1
			/Decode [0 1]
		>>
		imagemask
		grestore
		0 1 translate
	} for
	grestore
	end
	end
}def
/imageormask
{
	begin
		SkipImageProc {
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator /imagemask eq DeviceN_PS2 not and {
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{
						[/Separation /Black /DeviceGray {}] setcolorspace
						/Decode [ Decode 1 get Decode 0 get ] def
					}if
					use_mask {
						level3 {process_mask_L3 image}{masked_image_simulation}ifelse
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not {
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file {
									Names {
										dup (None) ne {
											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq {true setoverprint} if
											/names_index names_index 1 add def
										}{
											pop
										} ifelse
									} forall
									close_image_file
								} if
								grestore
								end
							}{
								Operator /imagemask eq {
									imagemask
								}{
									image
								} ifelse
							} ifelse
						}{
							Operator /imagemask eq {
								imagemask
							}{
								image
							} ifelse
						} ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator /imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix /DataSource load
					/Adobe_AGM_OnHost_Seps where {
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator /colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource [
											DataSource 0 get /exec cvx
											DataSource 1 get /exec cvx
											DataSource 2 get /exec cvx
											DataSource 3 get /exec cvx
											/AGMCORE_get_ink_data cvx
										] cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0 () /SubFileDecode filter def
									}ifelse
									/Decode [ Decode 0 get Decode 1 get ] def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator /image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
  			 							1 AGMCORE_&setgray
  			 							currentdict imageormask_sys
  			 						}{
  			 							currentdict ignoreimagedata
  			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator /image eq{
							AGMCORE_host_sep{
								/DoImage true def
								HostSepColorImage{
									invert_image_samples
								}{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}ifelse
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys} if
							}{
								use_mask {
									level3 {process_mask_L3 image}{masked_image_simulation}ifelse
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get /DeviceCMYK eq and
		currentdict/Components known and 
		Name () ne and 
		Name (All) ne and 
		Operator /image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load /exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			} /exec cvx
			] cvx bind
			MappedCSA 0 get /DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{ 
					currentdict
					Operator /imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name (All) ne and{
 								level2{
	 								[ /Separation Name [/DeviceGray]
	 								{ 
	 									sep_colorspace_proc AGMCORE_get_ink_data
										1 exch sub
	 								} bind
									] AGMCORE_&setcolorspace
									/sep_tint AGMCORE_gget AGMCORE_&setcolor
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator /imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name (All) eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					currentcolorspace 0 get /Separation ne{
						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentoverprint 
					MappedCSA 0 get /DeviceCMYK eq and 
					Name inRip_spot_has_ink not and 
					Name (All) ne and {
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
}def
/decode_image_sample
{
	4 1 roll exch dup 5 1 roll
	sub 2 4 -1 roll exp 1 sub div mul add
} bdf
/colorSpaceElemCnt
{
	currentcolorspace 0 get dup /DeviceCMYK eq {
		pop 4
	}
	{
		/DeviceRGB eq {
			pop 3
		}{
			1
		} ifelse
	} ifelse
} bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub {
			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx
			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx
		} for
	] cvx bind
	end
} bdf		
/devn_alt_datasource
{
	11 dict begin
	/srcDataStrs xdf
	/dstDataStr xdf
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def
	/samplesNeedDecoding
		0 0 1 origDecode length 1 sub {
			origDecode exch get add
		} for
		origDecode length 2 div div
		dup 1 eq {
			/decodeDivisor 2 origBitsPerComponent exp 1 sub def
		} if
		2 origBitsPerComponent exp 1 sub ne
	def
	[
		0 1 dsCnt 1 sub [
			currentdict /origMultipleDataSources get {
				dup currentdict /origDataSource get exch get dup type
			}{
				currentdict /origDataSource get dup type
			} ifelse
			dup /filetype eq {
				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx
			}{
				/stringtype ne {
					/exec cvx
				} if
				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx
			} ifelse
		] cvx /for cvx
		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [
			0 1 Width 1 sub [
				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx
				currentdict /origMultipleDataSources get {
					0 1 dsCnt 1 sub [
						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx
						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs
								BitsPerComponent /decode_image_sample load /exec cvx
							} ifelse
						} if
					] cvx /for cvx
				}{
					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx
					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx		
					currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 
					[
						samplesNeedDecoding {
							currentdict /decodeDivisor known {
								currentdict /decodeDivisor get /div cvx
							}{
								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx
								BitsPerComponent /decode_image_sample load /exec cvx
								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx
							} ifelse
						} if
					] cvx /forall cvx
				} ifelse
				currentdict /convProc get /exec cvx
				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [
					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx
					currentdict /convProc get /filter_indexed_devn load ne {
						255 /mul cvx /cvi cvx 
					} if
					/put cvx 
				] cvx /for cvx
			] cvx /for cvx
			currentdict /dstDataStr get
		] cvx /if cvx
	] cvx bind
	end
} bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	/MappedCSA CSA map_csa def
	2 dict begin
	dup dup
	/dstDataStr exch /Width get colorSpaceElemCnt mul string def
	/srcDataStrs [ 3 -1 roll begin
		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse
		{
			Width Decode length 2 div mul cvi string
		} repeat
		end ] def
	begin
	SkipImageProc {
		currentdict consumeimagedata
	}
	{
		save mark 
		AGMCORE_producing_seps not {
			level3 not {
				Operator /imagemask ne {
					/DataSource [
						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
						dstDataStr srcDataStrs devn_alt_datasource /exec cvx
						] cvx 0 () /SubFileDecode filter def
					/MultipleDataSources false def
					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				} if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process {
					CSA map_csa 0 get /DeviceCMYK eq {
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							[
							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 
							dstDataStr srcDataStrs devn_alt_datasource /exec cvx
							] cvx
						filter_cmyk 0 () /SubFileDecode filter def
						/MultipleDataSources false def
						/Decode [1 0] def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate {
							/DataSource [
								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse
								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get
								dstDataStr srcDataStrs devn_alt_datasource /exec cvx
								] cvx 0 () /SubFileDecode filter def
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def
				 			currentdict imageormask_sys
				 		}
						{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						} ifelse
 					} ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
	 					Operator/imagemask ne{
	 						MultipleDataSources {
		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						} ifelse
							invert_image_samples
	 					} if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{ 			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN [
				AGMIMG_c 0 ne {/Cyan} if
				AGMIMG_m 0 ne {/Magenta} if
				AGMIMG_y 0 ne {/Yellow} if
				AGMIMG_k 0 ne {/Black} if
				] /DeviceCMYK {}] setcolorspace
				AGMIMG_c 0 ne {AGMIMG_c} if
				AGMIMG_m 0 ne {AGMIMG_m} if
				AGMIMG_y 0 ne {AGMIMG_y} if
				AGMIMG_k 0 ne {AGMIMG_k} if
				setcolor			
			}{	
				/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def
				[/Indexed 				
					[
						/DeviceN [
							AGMIMG_c 0 ne {/Cyan} if
							AGMIMG_m 0 ne {/Magenta} if
							AGMIMG_y 0 ne {/Yellow} if
							AGMIMG_k 0 ne {/Black} if
						] 
						/DeviceCMYK {
							AGMIMG_k 0 eq {0} if
							AGMIMG_y 0 eq {0 exch} if
							AGMIMG_m 0 eq {0 3 1 roll} if
							AGMIMG_c 0 eq {0 4 1 roll} if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				] setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation /Black /DeviceGray {}] setcolorspace
			gsave
			/Black
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Yellow /DeviceGray {}] setcolorspace
			gsave
			/Yellow
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Magenta /DeviceGray {}] setcolorspace
			gsave
			/Magenta
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation /Cyan /DeviceGray {}] setcolorspace
			gsave
			/Cyan 
			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		} if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
} def
/indexed_imageormask
{
	begin
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {
					/CSA get map_csa
				}{
					/CSD get get_csd /Names get
				} ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN {
					/devicen_colorspace_dict AGMCORE_gget /names_index known {
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					} ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator /imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN {
					/indexed_colorspace_dict AGMCORE_gget begin
					CSD get_csd begin
				}{
					/indexed_colorspace_dict AGMCORE_gget begin
					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {
						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]
						setcolorspace
					} if
					end
				} ifelse
				imageormask
				Indexed_DeviceN {
					end
					end
				} if
			}{ 
				Operator /imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not {
			currentcolorspace 
			dup 1 /DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		} if
		currentdict 
		Operator /imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask {
				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
  /OPIimage
  {
  	dup type /dicttype ne{
  		10 dict begin
  			/DataSource xdf
  			/ImageMatrix xdf
  			/BitsPerComponent xdf
  			/Height xdf
  			/Width xdf
  			/ImageType 1 def
  			/Decode [0 1 def]
  			currentdict
  		end
  	}if
  	dup begin
  		/NComponents 1 cdndf
  		/MultipleDataSources false cdndf
  		/SkipImageProc {false} cdndf
  		/HostSepColorImage false cdndf
  		/Decode [
  				0 
  				currentcolorspace 0 get /Indexed eq{
  					2 BitsPerComponent exp 1 sub
  				}{
  					1
  				}ifelse
  		] cdndf
  		/Operator /image cdndf
  	end
  	/sep_colorspace_dict AGMCORE_gget null eq{
  		imageormask
  	}{
  		gsave
  		dup begin invert_image_samples end
  		sep_imageormask
  		grestore
  	}ifelse
  }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter /WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0 (%EndMask) /SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not {exit} if
	}loop
	WriteFilter closefile
	end
}def
/cachemask_level3
{
	currentfile
	<<
		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]
		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]
		/Intent 1
	>>
	/ReusableStreamDecode filter
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type /dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode [/customcolor_tint AGMCORE_gget 0] def
				/Operator /image def
				/HostSepColorImage false def
				/SkipImageProc {false} def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		bdict
			/Name AGMIMG_colorAry 4 get
			/CSA [ /DeviceCMYK ] 
			/TintMethod /Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components [ AGMIMG_colorAry aload pop pop ] 
		edict
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		dup 4 get map_alias{
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch
		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch
		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat
	}{
	}ifelse
	end
} def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					} if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage	
		end
	} def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				} currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get /DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer
						currentdict imageormask
					}{ 
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get /DeviceGray eq {
						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get /DeviceCMYK eq {
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{ 
							currentcolortransfer
							{pop 1} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{ 
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get /DeviceGray eq {
					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get /DeviceCMYK eq {
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{ 
						currentcolortransfer
						{pop 1} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict /setpacking known
{
	setpacking
} if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/doc_setup get exec
Adobe_CoolType_Core/doc_setup get exec
Adobe_AGM_Image/doc_setup get exec
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: phi_vs_DM_noCPT_2012_v2.ai 1
%%EndPageComments
%%BeginPageSetup
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about='uuid:dca6f2e4-89a1-11e1-85e2-001f5bcc829f'
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:dca6f2e4-89a1-11e1-85e2-001f5bcc829f'
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:dca6f2e4-89a1-11e1-85e2-001f5bcc829f'
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2012-04-09T23:18:34Z</xap:CreateDate>
  <xap:ModifyDate>2012-04-18T22:02:52Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:MetadataDate>2012-04-09T17:42:48-07:00</xap:MetadataDate>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>248</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWE/mXbfmPONGPk&#xA;9YGgt9QtLjVY3untZ5Yo7uEtEGEMy+i0XqetuG49A32GVQ35O2Hnmx0a+h83PcyXbXCPC93J6jk/&#xA;V41n4/v7v4PWViCrqhr8EUa0XFWSWM3mG9SWZLq0iiW5uYY4zayuwSCd4lq31hakhN/hGKoy3Gsv&#xA;GWkmgRg7qB6D/ZVyqn++7qAcVdENZaSZXmgVUcLGfQf4l4K1f77+YkYqlPmvVvMOj+Xtd1SB7Z30&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:dca6f2e4-89a1-11e1-85e2-001f5bcc829f'
  xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/'>
  <xapMM:DocumentID>uuid:7ff67e2c-829c-11e1-b05a-001ff3d2e431</xapMM:DocumentID>
 </rdf:Description>

 <rdf:Description rdf:about='uuid:dca6f2e4-89a1-11e1-85e2-001f5bcc829f'
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
Adobe_AGM_Utils begin
Adobe_AGM_Core/page_setup get exec
Adobe_CoolType_Core/page_setup get exec
Adobe_AGM_Image/page_setup get exec
%%EndPageSetup
Adobe_AGM_Core/AGMCORE_save save ddf
1 -1 scale 0 -489.837 translate
[1 0 0 1 0 0 ]  concat
% page clip
gsave
newpath
gsave % PSGState
0 0 mo
0 489.837 li
506.547 489.837 li
506.547 0 li
clp
[1 0 0 1 0 0 ] concat
125.254 432.054 mo
125.254 6.804 li
312.498 6.804 li
312.498 432.054 li
125.254 432.054 li
false sop
/0 
[/DeviceRGB] add_csa
1 1 0.811765 rgb
ef
125.254 432.054 mo
125.748 432.054 li
125.748 6.804 li
125.254 6.804 li
125.254 7.308 li
312.498 7.308 li
312.498 6.804 li
312.004 6.804 li
312.004 432.054 li
312.498 432.054 li
312.498 431.56 li
125.254 431.56 li
125.254 432.054 li
125.748 432.054 li
125.254 432.054 li
125.254 432.558 li
312.498 432.558 li
313.002 432.558 li
313.002 432.054 li
313.002 6.804 li
313.002 6.309 li
312.498 6.309 li
125.254 6.309 li
124.749 6.309 li
124.749 6.804 li
124.749 432.054 li
124.749 432.558 li
125.254 432.558 li
125.254 432.054 li
1 0.8 0.4 rgb
f
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
125.254 432.054 mo
126 432.054 li
126 6.804 li
125.254 6.804 li
125.254 7.56 li
312.498 7.56 li
312.498 6.804 li
311.751 6.804 li
311.751 432.054 li
312.498 432.054 li
312.498 431.307 li
125.254 431.307 li
125.254 432.054 li
126 432.054 li
125.254 432.054 li
125.254 432.81 li
312.498 432.81 li
313.254 432.81 li
313.254 432.054 li
313.254 6.804 li
313.254 6.057 li
312.498 6.057 li
125.254 6.057 li
124.497 6.057 li
124.497 6.804 li
124.497 432.054 li
124.497 432.81 li
125.254 432.81 li
125.254 432.054 li
0 0 0 rgb
f
grestore % PSGState
156.996 421.56 mo
156.996 17.307 li
338.5 17.307 li
338.5 421.56 li
156.996 421.56 li
1 0.6 0 rgb
ef
156.996 421.56 mo
157.752 421.56 li
157.752 17.307 li
156.996 17.307 li
156.996 18.054 li
338.5 18.054 li
338.5 17.307 li
337.752 17.307 li
337.752 421.56 li
338.5 421.56 li
338.5 420.804 li
156.996 420.804 li
156.996 421.56 li
157.752 421.56 li
156.996 421.56 li
156.996 422.307 li
338.5 422.307 li
339.246 422.307 li
339.246 421.56 li
339.246 17.307 li
339.246 16.56 li
338.5 16.56 li
156.996 16.56 li
156.25 16.56 li
156.25 17.307 li
156.25 421.56 li
156.25 422.307 li
156.996 422.307 li
156.996 421.56 li
0 0 0 rgb
f
252.504 400.302 mo
252.504 38.556 li
379.251 38.556 li
379.251 400.302 li
252.504 400.302 li
1 0.8 0.8 rgb
ef
252.504 400.302 mo
253.251 400.302 li
253.251 38.556 li
252.504 38.556 li
252.504 39.303 li
379.251 39.303 li
379.251 38.556 li
378.504 38.556 li
378.504 400.302 li
379.251 400.302 li
379.251 399.556 li
252.504 399.556 li
252.504 400.302 li
253.251 400.302 li
252.504 400.302 li
252.504 401.058 li
379.251 401.058 li
379.998 401.058 li
379.998 400.302 li
379.998 38.556 li
379.998 37.809 li
379.251 37.809 li
252.504 37.809 li
251.748 37.809 li
251.748 38.556 li
251.748 400.302 li
251.748 401.058 li
252.504 401.058 li
252.504 400.302 li
0 0 0 rgb
f
338.751 389.556 mo
338.751 49.302 li
439.497 49.302 li
439.497 389.556 li
338.751 389.556 li
1 1 0.243138 rgb
ef
338.751 389.556 mo
339.498 389.556 li
339.498 49.302 li
338.751 49.302 li
338.751 50.058 li
439.497 50.058 li
439.497 49.302 li
438.75 49.302 li
438.75 389.556 li
439.497 389.556 li
439.497 388.81 li
338.751 388.81 li
338.751 389.556 li
339.498 389.556 li
338.751 389.556 li
338.751 390.303 li
439.497 390.303 li
440.254 390.303 li
440.254 389.556 li
440.254 49.302 li
440.254 48.555 li
439.497 48.555 li
338.751 48.555 li
338.004 48.555 li
338.004 49.302 li
338.004 389.556 li
338.004 390.303 li
338.751 390.303 li
338.751 389.556 li
0 0 0 rgb
f
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
124.749 432.054 mo
69.498 432.054 li
124.497 352.503 li
124.497 432.054 li
124.749 432.054 li
426.659 48.555 mo
379.998 48.555 li
379.998 38.556 li
379.998 37.809 li
379.251 37.809 li
342.066 37.809 li
363.501 6.804 li
455.5 6.804 li
426.659 48.555 li
0.75594 0.0980393 1 rgb
f
162.264 431.307 mo
126 431.307 li
126 350.329 li
156.25 306.577 li
156.25 421.56 li
156.25 422.307 li
156.996 422.307 li
156.996 421.56 li
157.752 421.56 li
156.996 421.56 li
156.996 422.307 li
168.481 422.307 li
162.264 431.307 li
0.756863 0.0980393 0.980393 rgb
f
125.254 432.054 mo
124.749 432.054 li
125.254 432.054 li
0.756863 0.0784314 0.941177 rgb
f
161.748 432.054 mo
125.254 432.054 li
124.749 432.054 li
124.497 432.054 li
124.497 352.503 li
126 350.329 li
126 431.307 li
162.264 431.307 li
161.748 432.054 li
0.658824 0 0.901961 rgb
f
169.52 420.804 mo
157.752 420.804 li
157.752 304.403 li
251.748 168.446 li
251.748 301.766 li
169.52 420.804 li
0.756863 0.0588236 0.901961 rgb
f
168.481 422.307 mo
156.996 422.307 li
156.996 421.56 li
157.752 421.56 li
156.996 421.56 li
156.996 422.307 li
156.25 422.307 li
156.25 421.56 li
156.25 306.577 li
157.752 304.403 li
157.752 420.804 li
169.52 420.804 li
168.481 422.307 li
0.658824 0 0.901961 rgb
f
253.251 299.59 mo
253.251 166.272 li
341.033 39.303 li
378.504 39.303 li
378.504 48.555 li
338.751 48.555 li
338.004 48.555 li
338.004 49.302 li
338.004 176.897 li
253.251 299.59 li
0.756863 0.0784314 0.980393 rgb
f
251.748 301.766 mo
251.748 168.446 li
253.251 166.272 li
253.251 299.59 li
251.748 301.766 li
379.998 48.555 mo
378.504 48.555 li
378.504 39.303 li
341.033 39.303 li
342.066 37.809 li
379.251 37.809 li
379.998 37.809 li
379.998 38.556 li
379.998 48.555 li
0.658824 0 0.901961 rgb
f
339.498 174.734 mo
339.498 50.058 li
425.621 50.058 li
339.498 174.734 li
0.756863 0.0980393 0.925491 rgb
f
338.004 176.897 mo
338.004 49.302 li
338.004 48.555 li
338.751 48.555 li
378.504 48.555 li
379.998 48.555 li
426.659 48.555 li
425.621 50.058 li
339.498 50.058 li
339.498 174.734 li
338.004 176.897 li
0.658824 0 0.901961 rgb
f
363.5 6.80616 mo
363.5 7.55616 li
455.5 7.55616 li
455.5 6.80616 li
454.883 6.37989 li
161.133 431.63 li
161.75 432.057 li
161.75 431.307 li
69.5 431.307 li
69.5 432.057 li
70.117 432.483 li
364.117 7.23267 li
363.5 6.80616 li
363.5 7.55616 li
363.5 6.80616 li
362.884 6.37965 li
68.8831 431.63 li
68.0696 432.807 li
69.5 432.807 li
161.75 432.807 li
162.144 432.807 li
162.368 432.483 li
456.118 7.23242 li
456.93 6.05616 li
455.5 6.05616 li
363.5 6.05616 li
363.107 6.05616 li
362.884 6.37965 li
363.5 6.80616 li
0 0 0 rgb
f
grestore % PSGState
491.25 166.557 mo
491.25 244.307 li
93.25 432.057 li
65.75 432.057 li
65.75 367.557 li
491.25 166.557 li
1 0.6 0 rgb
ef
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
491.25 166.557 mo
490.5 166.557 li
490.5 244.307 li
491.25 244.307 li
490.93 243.628 li
92.9301 431.378 li
93.25 432.057 li
93.25 431.307 li
65.75 431.307 li
65.75 432.057 li
66.5 432.057 li
66.5 367.557 li
65.75 367.557 li
66.0704 368.235 li
491.571 167.235 li
491.25 166.557 li
490.5 166.557 li
491.25 166.557 li
490.93 165.878 li
65.4297 366.878 li
65 367.081 li
65 367.557 li
65 432.057 li
65 432.807 li
65.75 432.807 li
93.25 432.807 li
93.4181 432.807 li
93.57 432.735 li
491.57 244.985 li
492 244.782 li
492 244.307 li
492 166.557 li
492 165.373 li
490.93 165.878 li
491.25 166.557 li
0 0 0 rgb
f
grestore % PSGState
491.25 113.057 mo
491.25 178.057 li
65.75 362.057 li
65.75 297.057 li
491.25 113.057 li
1 0.8 0.8 rgb
ef
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
491.25 113.057 mo
490.5 113.057 li
490.5 178.057 li
491.25 178.057 li
490.953 177.368 li
65.4524 361.368 li
65.75 362.057 li
66.5 362.057 li
66.5 297.057 li
65.75 297.057 li
66.0477 297.745 li
491.548 113.745 li
491.25 113.057 li
490.5 113.057 li
491.25 113.057 li
490.953 112.368 li
65.4524 296.368 li
65 296.564 li
65 297.057 li
65 362.057 li
65 363.198 li
66.0477 362.745 li
491.548 178.745 li
492 178.55 li
492 178.057 li
492 113.057 li
492 111.915 li
490.953 112.368 li
491.25 113.057 li
0 0 0 rgb
f
418.75 6.80616 mo
479 6.80616 li
178 432.057 li
117.75 432.057 li
418.75 6.80616 li
1 1 0.243138 rgb
ef
418.75 6.80616 mo
418.75 7.55616 li
479 7.55616 li
479 6.80616 li
478.388 6.37285 li
177.388 431.623 li
178 432.057 li
178 431.307 li
117.75 431.307 li
117.75 432.057 li
118.363 432.49 li
419.363 7.23946 li
418.75 6.80616 li
418.75 7.55616 li
418.75 6.80616 li
418.138 6.37285 li
117.138 431.623 li
116.301 432.807 li
117.75 432.807 li
178 432.807 li
178.389 432.807 li
178.613 432.49 li
479.613 7.23946 li
480.45 6.05616 li
479 6.05616 li
418.75 6.05616 li
418.362 6.05616 li
418.138 6.37285 li
418.75 6.80616 li
0 0 0 rgb
f
grestore % PSGState
491.25 59.5562 mo
491.25 110.557 li
65.75 429.557 li
65.75 378.557 li
491.25 59.5562 li
1 1 0.811765 rgb
ef
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
491.25 59.5562 mo
490.5 59.5562 li
490.5 110.557 li
491.25 110.557 li
490.801 109.957 li
65.3002 428.957 li
65.75 429.557 li
66.5 429.557 li
66.5 378.557 li
65.75 378.557 li
66.1999 379.157 li
491.7 60.1563 li
491.25 59.5562 li
490.5 59.5562 li
491.25 59.5562 li
490.801 58.9561 li
65.3002 377.957 li
65 378.182 li
65 378.557 li
65 429.557 li
65 431.056 li
66.1999 430.157 li
491.7 111.157 li
492 110.932 li
492 110.557 li
492 59.5562 li
492 58.0564 li
490.801 58.9561 li
491.25 59.5562 li
0 0 0 rgb
f
grestore % PSGState
491.25 172.057 mo
491.25 173.057 li
65.75 230.557 li
65.75 229.557 li
491.25 172.057 li
0.8 0.8 1 rgb
ef
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
491.25 172.057 mo
490.5 172.057 li
490.5 173.057 li
491.25 173.057 li
491.15 172.313 li
65.6496 229.813 li
65.75 230.557 li
66.5 230.557 li
66.5 229.557 li
65.75 229.557 li
65.8505 230.3 li
491.351 172.8 li
491.25 172.057 li
490.5 172.057 li
491.25 172.057 li
491.15 171.313 li
65.6496 228.813 li
65 228.901 li
65 229.557 li
65 230.557 li
65 231.415 li
65.8505 231.3 li
491.351 173.8 li
492 173.712 li
492 173.057 li
492 172.057 li
492 171.198 li
491.15 171.313 li
491.25 172.057 li
0 0 0 rgb
f
grestore % PSGState
318 161.057 mo
318.75 161.807 li
319.25 162.557 li
319.5 163.307 li
319.5 166.307 li
319.25 167.557 li
318.75 168.807 li
318.25 170.057 li
317.5 171.557 li
316.75 173.057 li
315.75 174.557 li
314.75 176.057 li
313.5 177.807 li
312.25 179.557 li
311 181.307 li
309.5 183.057 li
307.75 184.807 li
306 186.557 li
304.25 188.307 li
302.5 190.057 li
300.5 191.807 li
298.5 193.557 li
296.5 195.307 li
294.25 197.057 li
292.25 198.557 li
290 200.307 li
287.75 201.807 li
285.75 203.307 li
283.5 204.557 li
281.5 206.057 li
279.25 207.307 li
277.25 208.307 li
275 209.307 li
273 210.307 li
271 211.307 li
269.25 212.057 li
267.5 212.807 li
265.75 213.307 li
264 213.807 li
262.5 214.057 li
261 214.307 li
257.25 214.307 li
256.25 214.057 li
255.5 213.557 li
254.75 213.057 li
254.25 212.557 li
253.75 211.807 li
253.5 211.057 li
253.25 210.057 li
253.25 209.057 li
253.5 208.057 li
253.75 206.807 li
254 205.557 li
254.5 204.307 li
255.25 202.807 li
256 201.307 li
257 199.807 li
258 198.057 li
259.25 196.557 li
260.5 194.807 li
262 193.057 li
263.5 191.307 li
265.25 189.557 li
266.75 187.807 li
268.75 186.057 li
270.5 184.307 li
272.5 182.307 li
274.5 180.557 li
276.5 179.057 li
278.5 177.307 li
280.75 175.557 li
282.75 174.057 li
285 172.557 li
287.25 171.057 li
289.25 169.557 li
291.5 168.307 li
293.75 167.057 li
295.75 165.807 li
297.75 164.807 li
299.75 163.807 li
301.75 163.057 li
303.75 162.307 li
305.5 161.557 li
307.25 161.057 li
309 160.557 li
310.5 160.307 li
312 160.057 li
313.25 159.807 li
314.5 159.807 li
315.5 160.057 li
316.5 160.307 li
317.5 160.557 li
318 161.057 li
1 0.101961 0 rgb
ef
gsave % PSGState
65.754 432.054 mo
65.754 6.804 li
491.247 6.804 li
491.247 432.054 li
65.754 432.054 li
clp
318 161.057 mo
317.47 161.587 li
318.22 162.337 li
318.75 161.807 li
318.126 162.223 li
318.626 162.973 li
319.25 162.557 li
318.539 162.794 li
318.789 163.544 li
319.5 163.307 li
318.75 163.307 li
318.75 166.307 li
319.5 166.307 li
318.765 166.16 li
318.515 167.41 li
319.25 167.557 li
318.554 167.278 li
318.054 168.528 li
317.554 169.778 li
318.25 170.057 li
317.58 169.721 li
316.83 171.221 li
316.08 172.721 li
316.75 173.057 li
316.126 172.641 li
315.126 174.141 li
314.126 175.641 li
314.75 176.057 li
314.14 175.621 li
312.89 177.371 li
311.64 179.121 li
310.39 180.871 li
311 181.307 li
310.431 180.819 li
308.931 182.569 li
309.5 183.057 li
308.97 182.526 li
307.22 184.276 li
305.47 186.026 li
303.72 187.776 li
301.97 189.526 li
302.5 190.057 li
302.007 189.492 li
300.007 191.242 li
298.007 192.992 li
296.007 194.742 li
296.5 195.307 li
296.04 194.715 li
293.79 196.465 li
294.25 197.057 li
293.8 196.457 li
291.8 197.957 li
291.795 197.961 li
291.79 197.965 li
289.54 199.715 li
290 200.307 li
289.584 199.683 li
287.334 201.183 li
287.317 201.194 li
287.3 201.207 li
285.3 202.707 li
285.75 203.307 li
285.386 202.651 li
283.136 203.901 li
283.091 203.926 li
283.05 203.957 li
281.05 205.457 li
281.5 206.057 li
281.136 205.401 li
278.886 206.651 li
279.25 207.307 li
278.915 206.636 li
276.915 207.636 li
277.25 208.307 li
276.946 207.621 li
274.696 208.621 li
274.68 208.628 li
274.665 208.636 li
272.665 209.636 li
270.665 210.636 li
271 211.307 li
270.705 210.617 li
268.955 211.367 li
267.205 212.117 li
267.5 212.807 li
267.294 212.086 li
265.544 212.586 li
263.794 213.086 li
264 213.807 li
263.877 213.067 li
262.377 213.317 li
260.877 213.567 li
261 214.307 li
261 213.557 li
257.25 213.557 li
257.25 214.307 li
257.432 213.579 li
256.432 213.329 li
256.25 214.057 li
256.667 213.433 li
255.917 212.933 li
255.167 212.433 li
254.75 213.057 li
255.281 212.526 li
254.781 212.026 li
254.25 212.557 li
254.875 212.141 li
254.375 211.391 li
253.75 211.807 li
254.462 211.569 li
254.212 210.819 li
253.5 211.057 li
254.228 210.875 li
253.978 209.875 li
253.25 210.057 li
254 210.057 li
254 209.057 li
253.25 209.057 li
253.978 209.239 li
254.228 208.239 li
254.232 208.221 li
254.236 208.204 li
254.486 206.954 li
254.736 205.704 li
254 205.557 li
254.697 205.835 li
255.197 204.585 li
254.5 204.307 li
255.171 204.642 li
255.921 203.142 li
256.671 201.642 li
256 201.307 li
256.625 201.723 li
257.625 200.223 li
257.639 200.201 li
257.652 200.179 li
258.652 198.429 li
258 198.057 li
258.577 198.537 li
259.827 197.037 li
259.845 197.015 li
259.861 196.993 li
261.111 195.243 li
260.5 194.807 li
261.07 195.295 li
262.57 193.545 li
264.07 191.795 li
263.5 191.307 li
264.031 191.837 li
265.781 190.087 li
265.801 190.067 li
265.82 190.045 li
267.32 188.295 li
266.75 187.807 li
267.244 188.371 li
269.244 186.621 li
269.263 186.605 li
269.281 186.587 li
271.031 184.837 li
273.031 182.837 li
272.5 182.307 li
272.994 182.871 li
274.994 181.121 li
274.5 180.557 li
274.95 181.157 li
276.95 179.657 li
276.973 179.64 li
276.994 179.621 li
278.994 177.871 li
278.5 177.307 li
278.961 177.899 li
281.211 176.149 li
280.75 175.557 li
281.2 176.157 li
283.2 174.657 li
282.75 174.057 li
283.166 174.681 li
285.416 173.181 li
287.666 171.681 li
287.684 171.669 li
287.7 171.657 li
289.7 170.157 li
289.25 169.557 li
289.615 170.212 li
291.865 168.962 li
294.115 167.712 li
294.132 167.703 li
294.148 167.693 li
296.148 166.443 li
295.75 165.807 li
296.086 166.477 li
298.086 165.477 li
300.086 164.477 li
299.75 163.807 li
300.014 164.509 li
302.014 163.759 li
304.014 163.009 li
304.03 163.003 li
304.046 162.996 li
305.796 162.246 li
305.5 161.557 li
305.707 162.278 li
307.457 161.778 li
309.207 161.278 li
309 160.557 li
309.124 161.296 li
310.624 161.046 li
312.124 160.796 li
312.136 160.794 li
312.148 160.792 li
313.398 160.542 li
313.25 159.807 li
313.25 160.557 li
314.5 160.557 li
314.5 159.807 li
314.319 160.534 li
315.319 160.784 li
316.319 161.034 li
317.319 161.284 li
317.5 160.557 li
316.97 161.087 li
317.47 161.587 li
318 161.057 li
318.531 160.526 li
318.031 160.026 li
317.884 159.879 li
317.682 159.829 li
316.682 159.579 li
315.682 159.329 li
314.682 159.079 li
314.593 159.057 li
314.5 159.057 li
313.25 159.057 li
313.176 159.057 li
313.103 159.071 li
311.853 159.321 li
312 160.057 li
311.877 159.317 li
310.377 159.567 li
308.877 159.817 li
308.835 159.824 li
308.794 159.836 li
307.044 160.336 li
305.294 160.836 li
305.249 160.849 li
305.205 160.867 li
303.455 161.617 li
303.75 162.307 li
303.487 161.604 li
301.487 162.354 li
299.487 163.104 li
299.45 163.118 li
299.415 163.136 li
297.415 164.136 li
295.415 165.136 li
295.383 165.152 li
295.353 165.171 li
293.353 166.421 li
293.75 167.057 li
293.386 166.401 li
291.136 167.651 li
288.886 168.901 li
288.841 168.926 li
288.8 168.957 li
286.8 170.457 li
287.25 171.057 li
286.834 170.433 li
284.584 171.933 li
282.334 173.433 li
282.317 173.444 li
282.3 173.457 li
280.3 174.957 li
280.295 174.961 li
280.29 174.965 li
278.04 176.715 li
278.023 176.728 li
278.007 176.742 li
276.007 178.492 li
276.5 179.057 li
276.05 178.457 li
274.05 179.957 li
274.028 179.974 li
274.007 179.992 li
272.007 181.742 li
271.988 181.759 li
271.97 181.776 li
269.97 183.776 li
268.22 185.526 li
268.75 186.057 li
268.257 185.492 li
266.257 187.242 li
266.216 187.278 li
266.181 187.319 li
264.681 189.069 li
265.25 189.557 li
264.72 189.026 li
262.97 190.776 li
262.95 190.797 li
262.931 190.819 li
261.431 192.569 li
259.931 194.319 li
259.909 194.344 li
259.89 194.371 li
258.64 196.121 li
259.25 196.557 li
258.674 196.076 li
257.424 197.576 li
257.382 197.627 li
257.349 197.685 li
256.349 199.435 li
257 199.807 li
256.376 199.391 li
255.376 200.891 li
255.351 200.929 li
255.33 200.971 li
254.58 202.471 li
253.83 203.971 li
253.816 203.999 li
253.804 204.028 li
253.304 205.278 li
253.279 205.342 li
253.265 205.41 li
253.015 206.66 li
252.765 207.91 li
253.5 208.057 li
252.773 207.875 li
252.523 208.875 li
252.5 208.964 li
252.5 209.057 li
252.5 210.057 li
252.5 210.149 li
252.523 210.239 li
252.773 211.239 li
252.78 211.266 li
252.789 211.294 li
253.039 212.044 li
253.071 212.139 li
253.126 212.223 li
253.626 212.973 li
253.668 213.034 li
253.72 213.087 li
254.22 213.587 li
254.273 213.639 li
254.334 213.681 li
255.084 214.181 li
255.834 214.681 li
255.943 214.753 li
256.069 214.784 li
257.069 215.034 li
257.158 215.057 li
257.25 215.057 li
261 215.057 li
261.063 215.057 li
261.124 215.046 li
262.624 214.796 li
264.124 214.546 li
264.166 214.539 li
264.207 214.528 li
265.957 214.028 li
267.707 213.528 li
267.752 213.515 li
267.796 213.496 li
269.546 212.746 li
271.296 211.996 li
271.316 211.987 li
271.336 211.977 li
273.336 210.977 li
275.336 209.977 li
275 209.307 li
275.305 209.992 li
277.555 208.992 li
277.571 208.985 li
277.586 208.977 li
279.586 207.977 li
279.6 207.97 li
279.615 207.962 li
281.865 206.712 li
281.91 206.687 li
281.95 206.657 li
283.95 205.157 li
283.5 204.557 li
283.865 205.212 li
286.115 203.962 li
286.16 203.937 li
286.2 203.907 li
288.2 202.407 li
287.75 201.807 li
288.166 202.431 li
290.416 200.931 li
290.439 200.916 li
290.461 200.899 li
292.711 199.149 li
292.25 198.557 li
292.7 199.157 li
294.7 197.657 li
294.706 197.653 li
294.711 197.649 li
296.961 195.899 li
296.978 195.885 li
296.994 195.871 li
298.994 194.121 li
300.994 192.371 li
302.994 190.621 li
303.013 190.605 li
303.031 190.587 li
304.781 188.837 li
306.531 187.087 li
308.281 185.337 li
310.031 183.587 li
310.051 183.567 li
310.07 183.545 li
311.57 181.795 li
311.592 181.77 li
311.611 181.743 li
312.861 179.993 li
314.111 178.243 li
315.361 176.493 li
315.368 176.483 li
315.375 176.473 li
316.375 174.973 li
317.375 173.473 li
317.4 173.434 li
317.421 173.392 li
318.171 171.892 li
318.921 170.392 li
318.935 170.364 li
318.947 170.335 li
319.447 169.085 li
319.947 167.835 li
319.972 167.771 li
319.986 167.704 li
320.236 166.454 li
320.25 166.381 li
320.25 166.307 li
320.25 163.307 li
320.25 163.185 li
320.212 163.069 li
319.962 162.319 li
319.93 162.224 li
319.875 162.141 li
319.375 161.391 li
319.333 161.329 li
319.281 161.276 li
318.531 160.526 li
318 161.057 li
0 0 0 rgb
f
491.25 172.057 mo
491.126 172.057 li
491.126 173.057 li
491.25 173.057 li
491.234 172.933 li
65.7333 230.433 li
65.75 230.557 li
65.875 230.557 li
65.875 229.557 li
65.75 229.557 li
65.7668 229.681 li
491.267 172.181 li
491.25 172.057 li
491.126 172.057 li
491.25 172.057 li
491.234 171.933 li
65.7333 229.433 li
65.625 229.447 li
65.625 229.557 li
65.625 230.557 li
65.625 230.7 li
65.7668 230.681 li
491.267 173.181 li
491.376 173.166 li
491.376 173.057 li
491.376 172.057 li
491.376 171.914 li
491.234 171.933 li
491.25 172.057 li
491.25 59.5562 mo
491.126 59.5562 li
491.126 110.557 li
491.25 110.557 li
491.176 110.457 li
65.6751 429.457 li
65.75 429.557 li
65.875 429.557 li
65.875 378.557 li
65.75 378.557 li
65.825 378.657 li
491.325 59.6562 li
491.25 59.5562 li
491.126 59.5562 li
491.25 59.5562 li
491.176 59.4562 li
65.6751 378.457 li
65.625 378.494 li
65.625 378.557 li
65.625 429.557 li
65.625 429.807 li
65.825 429.657 li
491.325 110.657 li
491.375 110.619 li
491.375 110.557 li
491.375 59.5562 li
491.375 59.3062 li
491.176 59.4562 li
491.25 59.5562 li
418.75 6.80616 mo
418.75 6.93116 li
479 6.93116 li
479 6.80616 li
478.898 6.73394 li
177.898 431.984 li
178 432.057 li
178 431.932 li
117.75 431.932 li
117.75 432.057 li
117.853 432.129 li
418.853 6.87837 li
418.75 6.80616 li
418.75 6.93116 li
418.75 6.80616 li
418.648 6.73394 li
117.648 431.984 li
117.509 432.182 li
117.75 432.182 li
178 432.182 li
178.065 432.182 li
178.103 432.129 li
479.103 6.87837 li
479.242 6.68116 li
479 6.68116 li
418.75 6.68116 li
418.686 6.68116 li
418.648 6.73394 li
418.75 6.80616 li
491.25 113.057 mo
491.126 113.057 li
491.126 178.057 li
491.25 178.057 li
491.201 177.942 li
65.7004 361.942 li
65.75 362.057 li
65.875 362.057 li
65.875 297.057 li
65.75 297.057 li
65.7997 297.171 li
491.3 113.171 li
491.25 113.057 li
491.126 113.057 li
491.25 113.057 li
491.201 112.942 li
65.7004 296.942 li
65.625 296.974 li
65.625 297.057 li
65.625 362.057 li
65.625 362.247 li
65.7997 362.171 li
491.3 178.171 li
491.375 178.139 li
491.375 178.057 li
491.375 113.057 li
491.375 112.866 li
491.201 112.942 li
491.25 113.057 li
491.25 166.557 mo
491.126 166.557 li
491.126 244.307 li
491.25 244.307 li
491.197 244.194 li
93.1967 431.944 li
93.25 432.057 li
93.25 431.932 li
65.75 431.932 li
65.75 432.057 li
65.875 432.057 li
65.875 367.557 li
65.75 367.557 li
65.8034 367.67 li
491.304 166.67 li
491.25 166.557 li
491.126 166.557 li
491.25 166.557 li
491.197 166.444 li
65.6966 367.444 li
65.625 367.477 li
65.625 367.557 li
65.625 432.057 li
65.625 432.182 li
65.75 432.182 li
93.25 432.182 li
93.2781 432.182 li
93.3034 432.17 li
491.304 244.42 li
491.375 244.386 li
491.375 244.307 li
491.375 166.557 li
491.375 166.359 li
491.197 166.444 li
491.25 166.557 li
363.5 6.80616 mo
363.5 6.93116 li
455.5 6.93116 li
455.5 6.80616 li
455.398 6.73511 li
161.648 431.986 li
161.75 432.057 li
161.75 431.932 li
69.5 431.932 li
69.5 432.057 li
69.6029 432.128 li
363.603 6.87724 li
363.5 6.80616 li
363.5 6.93116 li
363.5 6.80616 li
363.398 6.73507 li
69.3972 431.986 li
69.2615 432.182 li
69.5 432.182 li
161.75 432.182 li
161.816 432.182 li
161.853 432.128 li
455.603 6.8772 li
455.739 6.68116 li
455.5 6.68116 li
363.5 6.68116 li
363.435 6.68116 li
363.398 6.73507 li
363.5 6.80616 li
338.75 389.557 mo
338.875 389.557 li
338.875 49.3062 li
338.75 49.3062 li
338.75 49.4312 li
439.5 49.4312 li
439.5 49.3062 li
439.376 49.3062 li
439.376 389.557 li
439.5 389.557 li
439.5 389.432 li
338.75 389.432 li
338.75 389.557 li
338.875 389.557 li
338.75 389.557 li
338.75 389.682 li
439.5 389.682 li
439.625 389.682 li
439.625 389.557 li
439.625 49.3062 li
439.625 49.1812 li
439.5 49.1812 li
338.75 49.1812 li
338.626 49.1812 li
338.626 49.3062 li
338.626 389.557 li
338.626 389.682 li
338.75 389.682 li
338.75 389.557 li
252.5 400.307 mo
252.625 400.307 li
252.625 38.5562 li
252.5 38.5562 li
252.5 38.6812 li
379.25 38.6812 li
379.25 38.5562 li
379.126 38.5562 li
379.126 400.307 li
379.25 400.307 li
379.25 400.182 li
252.5 400.182 li
252.5 400.307 li
252.625 400.307 li
252.5 400.307 li
252.5 400.432 li
379.25 400.432 li
379.375 400.432 li
379.375 400.307 li
379.375 38.5562 li
379.375 38.4312 li
379.25 38.4312 li
252.5 38.4312 li
252.376 38.4312 li
252.376 38.5562 li
252.376 400.307 li
252.376 400.432 li
252.5 400.432 li
252.5 400.307 li
157 421.557 mo
157.125 421.557 li
157.125 17.3062 li
157 17.3062 li
157 17.4312 li
338.5 17.4312 li
338.5 17.3062 li
338.376 17.3062 li
338.376 421.557 li
338.5 421.557 li
338.5 421.432 li
157 421.432 li
157 421.557 li
157.125 421.557 li
157 421.557 li
157 421.682 li
338.5 421.682 li
338.625 421.682 li
338.625 421.557 li
338.625 17.3062 li
338.625 17.1812 li
338.5 17.1812 li
157 17.1812 li
156.876 17.1812 li
156.876 17.3062 li
156.876 421.557 li
156.876 421.682 li
157 421.682 li
157 421.557 li
125.25 432.057 mo
125.375 432.057 li
125.375 6.80616 li
125.25 6.80616 li
125.25 6.93116 li
312.5 6.93116 li
312.5 6.80616 li
312.376 6.80616 li
312.376 432.057 li
312.5 432.057 li
312.5 431.932 li
125.25 431.932 li
125.25 432.057 li
125.375 432.057 li
125.25 432.057 li
125.25 432.182 li
312.5 432.182 li
312.625 432.182 li
312.625 432.057 li
312.625 6.80616 li
312.625 6.68116 li
312.5 6.68116 li
125.25 6.68116 li
125.126 6.68116 li
125.126 6.80616 li
125.126 432.057 li
125.126 432.182 li
125.25 432.182 li
125.25 432.057 li
f
grestore % PSGState
318 161.057 mo
317.912 161.145 li
318.662 161.895 li
318.75 161.807 li
318.646 161.876 li
319.146 162.626 li
319.25 162.557 li
319.132 162.596 li
319.382 163.346 li
319.5 163.307 li
319.376 163.307 li
319.376 166.307 li
319.5 166.307 li
319.378 166.282 li
319.128 167.532 li
319.25 167.557 li
319.134 167.51 li
318.634 168.76 li
318.134 170.01 li
318.25 170.057 li
318.139 170.001 li
317.389 171.501 li
316.639 173.001 li
316.75 173.057 li
316.646 172.987 li
315.646 174.487 li
314.646 175.987 li
314.75 176.057 li
314.649 175.984 li
313.399 177.734 li
312.149 179.484 li
310.899 181.234 li
311 181.307 li
310.906 181.225 li
309.406 182.975 li
309.5 183.057 li
309.412 182.968 li
307.662 184.718 li
305.912 186.468 li
304.162 188.218 li
302.412 189.968 li
302.5 190.057 li
302.418 189.963 li
300.418 191.713 li
298.418 193.463 li
296.418 195.213 li
296.5 195.307 li
296.424 195.208 li
294.174 196.958 li
292.176 198.457 li
289.924 200.208 li
290 200.307 li
289.931 200.203 li
287.681 201.703 li
287.678 201.705 li
287.676 201.707 li
285.676 203.207 li
285.75 203.307 li
285.69 203.197 li
283.44 204.447 li
283.432 204.452 li
283.426 204.457 li
281.426 205.957 li
281.5 206.057 li
281.44 205.947 li
279.19 207.197 li
279.25 207.307 li
279.195 207.195 li
277.195 208.195 li
277.25 208.307 li
277.2 208.192 li
274.95 209.192 li
274.947 209.194 li
274.945 209.195 li
272.945 210.195 li
270.945 211.195 li
271 211.307 li
270.951 211.192 li
269.201 211.942 li
267.451 212.692 li
267.5 212.807 li
267.466 212.686 li
265.716 213.186 li
263.966 213.686 li
264 213.807 li
263.98 213.683 li
262.48 213.933 li
260.98 214.183 li
261 214.307 li
261 214.182 li
257.25 214.182 li
257.25 214.307 li
257.281 214.185 li
256.281 213.935 li
256.25 214.057 li
256.32 213.953 li
255.57 213.453 li
254.82 212.953 li
254.75 213.057 li
254.839 212.968 li
254.339 212.468 li
254.25 212.557 li
254.354 212.487 li
253.854 211.737 li
253.75 211.807 li
253.869 211.767 li
253.619 211.017 li
253.5 211.057 li
253.622 211.026 li
253.372 210.026 li
253.25 210.057 li
253.376 210.057 li
253.376 209.057 li
253.25 209.057 li
253.372 209.087 li
253.622 208.087 li
253.623 208.084 li
253.623 208.081 li
253.873 206.831 li
254.123 205.581 li
254 205.557 li
254.117 205.603 li
254.617 204.353 li
254.5 204.307 li
254.612 204.363 li
255.362 202.863 li
256.112 201.363 li
256 201.307 li
256.104 201.376 li
257.104 199.876 li
257.107 199.872 li
257.109 199.869 li
258.109 198.119 li
258 198.057 li
258.097 198.137 li
259.347 196.637 li
259.35 196.633 li
259.352 196.629 li
260.602 194.879 li
260.5 194.807 li
260.595 194.888 li
262.095 193.138 li
263.595 191.388 li
263.5 191.307 li
263.589 191.395 li
265.339 189.645 li
265.342 189.642 li
265.345 189.638 li
266.845 187.888 li
266.75 187.807 li
266.833 187.901 li
268.833 186.151 li
268.836 186.148 li
268.839 186.145 li
270.589 184.395 li
272.589 182.395 li
272.5 182.307 li
272.583 182.401 li
274.583 180.651 li
274.5 180.557 li
274.575 180.657 li
276.575 179.157 li
276.579 179.154 li
276.583 179.151 li
278.583 177.401 li
278.5 177.307 li
278.577 177.405 li
280.827 175.655 li
282.825 174.157 li
282.75 174.057 li
282.82 174.161 li
285.07 172.661 li
287.32 171.161 li
287.323 171.159 li
287.325 171.157 li
289.325 169.657 li
289.25 169.557 li
289.311 169.666 li
291.561 168.416 li
293.811 167.166 li
293.814 167.164 li
293.817 167.163 li
295.817 165.913 li
295.75 165.807 li
295.806 165.918 li
297.806 164.918 li
299.806 163.918 li
299.75 163.807 li
299.794 163.924 li
301.794 163.174 li
303.794 162.424 li
303.797 162.423 li
303.8 162.422 li
305.55 161.672 li
305.5 161.557 li
305.535 161.677 li
307.285 161.177 li
309.035 160.677 li
309 160.557 li
309.021 160.68 li
310.521 160.43 li
312.021 160.18 li
312.023 160.18 li
312.025 160.179 li
313.275 159.929 li
313.25 159.807 li
313.25 159.932 li
314.5 159.932 li
314.5 159.807 li
314.47 159.928 li
315.47 160.178 li
316.47 160.428 li
317.47 160.678 li
317.5 160.557 li
317.412 160.645 li
317.912 161.145 li
318 161.057 li
318.089 160.968 li
317.589 160.468 li
317.564 160.444 li
317.531 160.435 li
316.531 160.185 li
315.531 159.935 li
314.531 159.685 li
314.516 159.682 li
314.5 159.682 li
313.25 159.682 li
313.238 159.682 li
313.226 159.684 li
311.976 159.934 li
312 160.057 li
311.98 159.933 li
310.48 160.183 li
308.98 160.433 li
308.973 160.435 li
308.966 160.436 li
307.216 160.936 li
305.466 161.436 li
305.458 161.439 li
305.451 161.442 li
303.701 162.192 li
303.75 162.307 li
303.707 162.19 li
301.707 162.94 li
299.707 163.69 li
299.7 163.692 li
299.695 163.695 li
297.695 164.695 li
295.695 165.695 li
295.689 165.698 li
295.684 165.701 li
293.684 166.951 li
293.75 167.057 li
293.69 166.947 li
291.44 168.197 li
289.19 169.447 li
289.182 169.452 li
289.176 169.457 li
287.176 170.957 li
287.25 171.057 li
287.181 170.953 li
284.931 172.453 li
282.681 173.953 li
282.678 173.955 li
282.676 173.957 li
280.676 175.457 li
278.424 177.208 li
278.421 177.21 li
278.418 177.213 li
276.418 178.963 li
276.5 179.057 li
276.426 178.957 li
274.426 180.457 li
274.422 180.459 li
274.418 180.463 li
272.418 182.213 li
272.415 182.215 li
272.412 182.218 li
270.412 184.218 li
268.662 185.968 li
268.75 186.057 li
268.668 185.963 li
266.668 187.713 li
266.661 187.718 li
266.656 187.725 li
265.156 189.475 li
265.25 189.557 li
265.162 189.468 li
263.412 191.218 li
263.409 191.222 li
263.406 191.225 li
261.906 192.975 li
260.406 194.725 li
260.402 194.73 li
260.399 194.734 li
259.149 196.484 li
259.25 196.557 li
259.154 196.477 li
257.904 197.977 li
257.897 197.985 li
257.892 197.995 li
256.892 199.745 li
257 199.807 li
256.896 199.737 li
255.896 201.237 li
255.892 201.244 li
255.889 201.251 li
255.139 202.751 li
254.389 204.251 li
254.386 204.255 li
254.384 204.26 li
253.884 205.51 li
253.88 205.521 li
253.878 205.532 li
253.628 206.782 li
253.378 208.032 li
253.5 208.057 li
253.379 208.026 li
253.129 209.026 li
253.126 209.041 li
253.126 209.057 li
253.126 210.057 li
253.126 210.072 li
253.129 210.087 li
253.379 211.087 li
253.38 211.092 li
253.382 211.096 li
253.632 211.846 li
253.637 211.862 li
253.646 211.876 li
254.146 212.626 li
254.153 212.636 li
254.162 212.645 li
254.662 213.145 li
254.671 213.154 li
254.681 213.161 li
255.431 213.661 li
256.181 214.161 li
256.199 214.173 li
256.22 214.178 li
257.22 214.428 li
257.235 214.432 li
257.25 214.432 li
261 214.432 li
261.011 214.432 li
261.021 214.43 li
262.521 214.18 li
264.021 213.93 li
264.028 213.929 li
264.035 213.927 li
265.785 213.427 li
267.535 212.927 li
267.542 212.925 li
267.55 212.922 li
269.3 212.172 li
271.05 211.422 li
271.053 211.42 li
271.056 211.418 li
273.056 210.418 li
275.056 209.418 li
275 209.307 li
275.051 209.421 li
277.301 208.421 li
277.304 208.42 li
277.306 208.418 li
279.306 207.418 li
279.309 207.417 li
279.311 207.416 li
281.561 206.166 li
281.569 206.162 li
281.575 206.157 li
283.575 204.657 li
283.5 204.557 li
283.561 204.666 li
285.811 203.416 li
285.819 203.412 li
285.825 203.407 li
287.825 201.907 li
287.75 201.807 li
287.82 201.911 li
290.07 200.411 li
290.074 200.408 li
290.077 200.405 li
292.327 198.655 li
294.325 197.157 li
296.577 195.405 li
296.58 195.403 li
296.583 195.401 li
298.583 193.651 li
300.583 191.901 li
302.583 190.151 li
302.586 190.148 li
302.589 190.145 li
304.339 188.395 li
306.089 186.645 li
307.839 184.895 li
309.589 183.145 li
309.592 183.142 li
309.595 183.138 li
311.095 181.388 li
311.099 181.384 li
311.102 181.379 li
312.352 179.629 li
313.602 177.879 li
314.852 176.129 li
314.853 176.128 li
314.854 176.126 li
315.854 174.626 li
316.854 173.126 li
316.859 173.12 li
316.862 173.113 li
317.612 171.613 li
318.362 170.113 li
318.365 170.108 li
318.367 170.103 li
318.867 168.853 li
319.367 167.603 li
319.371 167.592 li
319.373 167.581 li
319.623 166.331 li
319.625 166.319 li
319.625 166.307 li
319.625 163.307 li
319.625 163.286 li
319.619 163.267 li
319.369 162.517 li
319.364 162.501 li
319.354 162.487 li
318.854 161.737 li
318.848 161.727 li
318.839 161.718 li
318.089 160.968 li
318 161.057 li
0.8 1 0.8 rgb
f
318 161.057 mo
317.912 161.145 li
318.662 161.895 li
318.75 161.807 li
318.646 161.876 li
319.146 162.626 li
319.25 162.557 li
319.132 162.596 li
319.382 163.346 li
319.5 163.307 li
319.376 163.307 li
319.376 166.307 li
319.5 166.307 li
319.378 166.282 li
319.128 167.532 li
319.25 167.557 li
319.134 167.51 li
318.634 168.76 li
318.134 170.01 li
318.25 170.057 li
318.139 170.001 li
317.389 171.501 li
316.639 173.001 li
316.75 173.057 li
316.646 172.987 li
315.646 174.487 li
314.646 175.987 li
314.75 176.057 li
314.649 175.984 li
313.399 177.734 li
312.149 179.484 li
310.899 181.234 li
311 181.307 li
310.906 181.225 li
309.406 182.975 li
309.5 183.057 li
309.412 182.968 li
307.662 184.718 li
305.912 186.468 li
304.162 188.218 li
302.412 189.968 li
302.5 190.057 li
302.418 189.963 li
300.418 191.713 li
298.418 193.463 li
296.418 195.213 li
296.5 195.307 li
296.424 195.208 li
294.174 196.958 li
292.176 198.457 li
289.924 200.208 li
290 200.307 li
289.931 200.203 li
287.681 201.703 li
287.678 201.705 li
287.676 201.707 li
285.676 203.207 li
285.75 203.307 li
285.69 203.197 li
283.44 204.447 li
283.432 204.452 li
283.426 204.457 li
281.426 205.957 li
281.5 206.057 li
281.44 205.947 li
279.19 207.197 li
279.25 207.307 li
279.195 207.195 li
277.195 208.195 li
277.25 208.307 li
277.2 208.192 li
274.95 209.192 li
274.947 209.194 li
274.945 209.195 li
272.945 210.195 li
270.945 211.195 li
271 211.307 li
270.951 211.192 li
269.201 211.942 li
267.451 212.692 li
267.5 212.807 li
267.466 212.686 li
265.716 213.186 li
263.966 213.686 li
264 213.807 li
263.98 213.683 li
262.48 213.933 li
260.98 214.183 li
261 214.307 li
261 214.182 li
257.25 214.182 li
257.25 214.307 li
257.281 214.185 li
256.281 213.935 li
256.25 214.057 li
256.32 213.953 li
255.57 213.453 li
254.82 212.953 li
254.75 213.057 li
254.839 212.968 li
254.339 212.468 li
254.25 212.557 li
254.354 212.487 li
253.854 211.737 li
253.75 211.807 li
253.869 211.767 li
253.619 211.017 li
253.5 211.057 li
253.622 211.026 li
253.372 210.026 li
253.25 210.057 li
253.376 210.057 li
253.376 209.057 li
253.25 209.057 li
253.372 209.087 li
253.622 208.087 li
253.623 208.084 li
253.623 208.081 li
253.873 206.831 li
254.123 205.581 li
254 205.557 li
254.117 205.603 li
254.617 204.353 li
254.5 204.307 li
254.612 204.363 li
255.362 202.863 li
256.112 201.363 li
256 201.307 li
256.104 201.376 li
257.104 199.876 li
257.107 199.872 li
257.109 199.869 li
258.109 198.119 li
258 198.057 li
258.097 198.137 li
259.347 196.637 li
259.35 196.633 li
259.352 196.629 li
260.602 194.879 li
260.5 194.807 li
260.595 194.888 li
262.095 193.138 li
263.595 191.388 li
263.5 191.307 li
263.589 191.395 li
265.339 189.645 li
265.342 189.642 li
265.345 189.638 li
266.845 187.888 li
266.75 187.807 li
266.833 187.901 li
268.833 186.151 li
268.836 186.148 li
268.839 186.145 li
270.589 184.395 li
272.589 182.395 li
272.5 182.307 li
272.583 182.401 li
274.583 180.651 li
274.5 180.557 li
274.575 180.657 li
276.575 179.157 li
276.579 179.154 li
276.583 179.151 li
278.583 177.401 li
278.5 177.307 li
278.577 177.405 li
280.827 175.655 li
282.825 174.157 li
282.75 174.057 li
282.82 174.161 li
285.07 172.661 li
287.32 171.161 li
287.323 171.159 li
287.325 171.157 li
289.325 169.657 li
289.25 169.557 li
289.311 169.666 li
291.561 168.416 li
293.811 167.166 li
293.814 167.164 li
293.817 167.163 li
295.817 165.913 li
295.75 165.807 li
295.806 165.918 li
297.806 164.918 li
299.806 163.918 li
299.75 163.807 li
299.794 163.924 li
301.794 163.174 li
303.794 162.424 li
303.797 162.423 li
303.8 162.422 li
305.55 161.672 li
305.5 161.557 li
305.535 161.677 li
307.285 161.177 li
309.035 160.677 li
309 160.557 li
309.021 160.68 li
310.521 160.43 li
312.021 160.18 li
312.023 160.18 li
312.025 160.179 li
313.275 159.929 li
313.25 159.807 li
313.25 159.932 li
314.5 159.932 li
314.5 159.807 li
314.47 159.928 li
315.47 160.178 li
316.47 160.428 li
317.47 160.678 li
317.5 160.557 li
317.412 160.645 li
317.912 161.145 li
318 161.057 li
318.089 160.968 li
317.589 160.468 li
317.564 160.444 li
317.531 160.435 li
316.531 160.185 li
315.531 159.935 li
314.531 159.685 li
314.516 159.682 li
314.5 159.682 li
313.25 159.682 li
313.238 159.682 li
313.226 159.684 li
311.976 159.934 li
312 160.057 li
311.98 159.933 li
310.48 160.183 li
308.98 160.433 li
308.973 160.435 li
308.966 160.436 li
307.216 160.936 li
305.466 161.436 li
305.458 161.439 li
305.451 161.442 li
303.701 162.192 li
303.75 162.307 li
303.707 162.19 li
301.707 162.94 li
299.707 163.69 li
299.7 163.692 li
299.695 163.695 li
297.695 164.695 li
295.695 165.695 li
295.689 165.698 li
295.684 165.701 li
293.684 166.951 li
293.75 167.057 li
293.69 166.947 li
291.44 168.197 li
289.19 169.447 li
289.182 169.452 li
289.176 169.457 li
287.176 170.957 li
287.25 171.057 li
287.181 170.953 li
284.931 172.453 li
282.681 173.953 li
282.678 173.955 li
282.676 173.957 li
280.676 175.457 li
278.424 177.208 li
278.421 177.21 li
278.418 177.213 li
276.418 178.963 li
276.5 179.057 li
276.426 178.957 li
274.426 180.457 li
274.422 180.459 li
274.418 180.463 li
272.418 182.213 li
272.415 182.215 li
272.412 182.218 li
270.412 184.218 li
268.662 185.968 li
268.75 186.057 li
268.668 185.963 li
266.668 187.713 li
266.661 187.718 li
266.656 187.725 li
265.156 189.475 li
265.25 189.557 li
265.162 189.468 li
263.412 191.218 li
263.409 191.222 li
263.406 191.225 li
261.906 192.975 li
260.406 194.725 li
260.402 194.73 li
260.399 194.734 li
259.149 196.484 li
259.25 196.557 li
259.154 196.477 li
257.904 197.977 li
257.897 197.985 li
257.892 197.995 li
256.892 199.745 li
257 199.807 li
256.896 199.737 li
255.896 201.237 li
255.892 201.244 li
255.889 201.251 li
255.139 202.751 li
254.389 204.251 li
254.386 204.255 li
254.384 204.26 li
253.884 205.51 li
253.88 205.521 li
253.878 205.532 li
253.628 206.782 li
253.378 208.032 li
253.5 208.057 li
253.379 208.026 li
253.129 209.026 li
253.126 209.041 li
253.126 209.057 li
253.126 210.057 li
253.126 210.072 li
253.129 210.087 li
253.379 211.087 li
253.38 211.092 li
253.382 211.096 li
253.632 211.846 li
253.637 211.862 li
253.646 211.876 li
254.146 212.626 li
254.153 212.636 li
254.162 212.645 li
254.662 213.145 li
254.671 213.154 li
254.681 213.161 li
255.431 213.661 li
256.181 214.161 li
256.199 214.173 li
256.22 214.178 li
257.22 214.428 li
257.235 214.432 li
257.25 214.432 li
261 214.432 li
261.011 214.432 li
261.021 214.43 li
262.521 214.18 li
264.021 213.93 li
264.028 213.929 li
264.035 213.927 li
265.785 213.427 li
267.535 212.927 li
267.542 212.925 li
267.55 212.922 li
269.3 212.172 li
271.05 211.422 li
271.053 211.42 li
271.056 211.418 li
273.056 210.418 li
275.056 209.418 li
275 209.307 li
275.051 209.421 li
277.301 208.421 li
277.304 208.42 li
277.306 208.418 li
279.306 207.418 li
279.309 207.417 li
279.311 207.416 li
281.561 206.166 li
281.569 206.162 li
281.575 206.157 li
283.575 204.657 li
283.5 204.557 li
283.561 204.666 li
285.811 203.416 li
285.819 203.412 li
285.825 203.407 li
287.825 201.907 li
287.75 201.807 li
287.82 201.911 li
290.07 200.411 li
290.074 200.408 li
290.077 200.405 li
292.327 198.655 li
294.325 197.157 li
296.577 195.405 li
296.58 195.403 li
296.583 195.401 li
298.583 193.651 li
300.583 191.901 li
302.583 190.151 li
302.586 190.148 li
302.589 190.145 li
304.339 188.395 li
306.089 186.645 li
307.839 184.895 li
309.589 183.145 li
309.592 183.142 li
309.595 183.138 li
311.095 181.388 li
311.099 181.384 li
311.102 181.379 li
312.352 179.629 li
313.602 177.879 li
314.852 176.129 li
314.853 176.128 li
314.854 176.126 li
315.854 174.626 li
316.854 173.126 li
316.859 173.12 li
316.862 173.113 li
317.612 171.613 li
318.362 170.113 li
318.365 170.108 li
318.367 170.103 li
318.867 168.853 li
319.367 167.603 li
319.371 167.592 li
319.373 167.581 li
319.623 166.331 li
319.625 166.319 li
319.625 166.307 li
319.625 163.307 li
319.625 163.286 li
319.619 163.267 li
319.369 162.517 li
319.364 162.501 li
319.354 162.487 li
318.854 161.737 li
318.848 161.727 li
318.839 161.718 li
318.089 160.968 li
318 161.057 li
0 0 0 rgb
f
317.75 184.307 mo
318.25 184.807 li
318.75 185.557 li
319 186.307 li
319.5 187.307 li
319.5 188.307 li
319.75 189.307 li
319.75 191.307 li
319.5 192.557 li
319.5 193.557 li
319.25 194.807 li
318.75 196.057 li
318.5 197.557 li
318 198.807 li
317.5 200.057 li
316.75 201.557 li
316.25 202.807 li
315.5 204.057 li
314.75 205.557 li
313.75 206.807 li
313 208.057 li
312 209.307 li
311 210.557 li
310 211.807 li
309 213.057 li
308 214.307 li
306.75 215.307 li
305.75 216.307 li
304.5 217.307 li
303.5 218.307 li
302.25 219.057 li
301 219.807 li
300 220.557 li
298.75 221.057 li
297.75 221.807 li
296.5 222.057 li
295.5 222.557 li
294.5 222.807 li
293.5 223.057 li
292.5 223.057 li
291.5 223.307 li
290.5 223.057 li
289.75 223.057 li
289 222.807 li
288.25 222.557 li
287.5 222.057 li
287 221.557 li
286.25 221.057 li
286 220.307 li
285.5 219.557 li
285 218.807 li
284.75 218.057 li
284.75 217.057 li
284.5 216.057 li
284.5 212.807 li
284.75 211.557 li
285 210.307 li
285.25 209.057 li
285.75 207.807 li
286.25 206.557 li
286.75 205.057 li
287.5 203.807 li
288 202.557 li
288.75 201.057 li
289.5 199.807 li
290.5 198.557 li
291.25 197.057 li
292.25 195.807 li
293.25 194.557 li
294.25 193.307 li
295.25 192.307 li
296.25 191.057 li
297.5 190.057 li
298.5 189.057 li
299.75 188.057 li
300.75 187.057 li
302 186.307 li
303.25 185.557 li
304.25 184.807 li
305.5 184.057 li
306.5 183.557 li
307.75 183.057 li
308.75 182.807 li
309.75 182.307 li
310.75 182.307 li
311.75 182.057 li
313.75 182.057 li
314.5 182.307 li
315.25 182.557 li
316 182.807 li
316.75 183.307 li
317.25 183.807 li
317.75 184.307 li
1 1 1 rgb
ef
491.126 419.307 mo
491.126 432.057 li
491.376 432.057 li
491.376 419.307 li
474.126 425.807 mo
474.126 432.057 li
474.376 432.057 li
474.376 425.807 li
456.876 425.807 mo
456.876 432.057 li
457.126 432.057 li
457.126 425.807 li
439.876 425.807 mo
439.876 432.057 li
440.126 432.057 li
440.126 425.807 li
422.876 425.807 mo
422.876 432.057 li
423.126 432.057 li
423.126 425.807 li
405.876 419.307 mo
405.876 432.057 li
406.126 432.057 li
406.126 419.307 li
388.876 425.807 mo
388.876 432.057 li
389.126 432.057 li
389.126 425.807 li
371.876 425.807 mo
371.876 432.057 li
372.126 432.057 li
372.126 425.807 li
354.876 425.807 mo
354.876 432.057 li
355.126 432.057 li
355.126 425.807 li
337.876 425.807 mo
337.876 432.057 li
338.126 432.057 li
338.126 425.807 li
320.876 419.307 mo
320.876 432.057 li
321.126 432.057 li
321.126 419.307 li
303.876 425.807 mo
303.876 432.057 li
304.126 432.057 li
304.126 425.807 li
286.876 425.807 mo
286.876 432.057 li
287.126 432.057 li
287.126 425.807 li
269.876 425.807 mo
269.876 432.057 li
270.126 432.057 li
270.126 425.807 li
252.876 425.807 mo
252.876 432.057 li
253.126 432.057 li
253.126 425.807 li
235.876 419.307 mo
235.876 432.057 li
236.126 432.057 li
236.126 419.307 li
218.876 425.807 mo
218.876 432.057 li
219.126 432.057 li
219.126 425.807 li
201.876 425.807 mo
201.876 432.057 li
202.126 432.057 li
202.126 425.807 li
184.626 425.807 mo
184.626 432.057 li
184.876 432.057 li
184.876 425.807 li
167.626 425.807 mo
167.626 432.057 li
167.876 432.057 li
167.876 425.807 li
150.626 419.307 mo
150.626 432.057 li
150.876 432.057 li
150.876 419.307 li
133.626 425.807 mo
133.626 432.057 li
133.876 432.057 li
133.876 425.807 li
116.626 425.807 mo
116.626 432.057 li
116.876 432.057 li
116.876 425.807 li
99.625 425.807 mo
99.625 432.057 li
99.875 432.057 li
99.875 425.807 li
82.625 425.807 mo
82.625 432.057 li
82.875 432.057 li
82.875 425.807 li
65.625 419.307 mo
65.625 432.057 li
65.875 432.057 li
65.875 419.307 li
317.75 184.307 mo
317.662 184.395 li
318.162 184.895 li
318.25 184.807 li
318.146 184.876 li
318.646 185.626 li
318.75 185.557 li
318.632 185.596 li
318.882 186.346 li
318.885 186.355 li
318.889 186.363 li
319.389 187.363 li
319.5 187.307 li
319.376 187.307 li
319.376 188.307 li
319.376 188.322 li
319.379 188.337 li
319.629 189.337 li
319.75 189.307 li
319.626 189.307 li
319.626 191.307 li
319.75 191.307 li
319.628 191.282 li
319.378 192.532 li
319.376 192.544 li
319.376 192.557 li
319.376 193.557 li
319.5 193.557 li
319.378 193.532 li
319.128 194.782 li
319.25 194.807 li
319.134 194.76 li
318.634 196.01 li
318.629 196.023 li
318.627 196.036 li
318.377 197.536 li
318.5 197.557 li
318.384 197.51 li
317.884 198.76 li
317.384 200.01 li
317.5 200.057 li
317.389 200.001 li
316.639 201.501 li
316.636 201.505 li
316.634 201.51 li
316.134 202.76 li
316.25 202.807 li
316.143 202.742 li
315.393 203.992 li
315.391 203.996 li
315.389 204.001 li
314.639 205.501 li
314.75 205.557 li
314.653 205.479 li
313.653 206.729 li
313.648 206.735 li
313.643 206.742 li
312.893 207.992 li
313 208.057 li
312.903 207.979 li
311.903 209.229 li
310.903 210.479 li
309.903 211.729 li
308.903 212.979 li
307.903 214.229 li
308 214.307 li
307.922 214.209 li
306.672 215.209 li
306.667 215.213 li
306.662 215.218 li
305.662 216.218 li
305.75 216.307 li
305.672 216.209 li
304.422 217.209 li
304.417 217.213 li
304.412 217.218 li
303.412 218.218 li
303.5 218.307 li
303.436 218.199 li
302.186 218.949 li
300.936 219.699 li
300.931 219.703 li
300.926 219.707 li
299.926 220.457 li
300 220.557 li
299.954 220.441 li
298.704 220.941 li
298.689 220.947 li
298.676 220.957 li
297.676 221.707 li
297.75 221.807 li
297.726 221.684 li
296.476 221.934 li
296.46 221.937 li
296.445 221.945 li
295.445 222.445 li
295.5 222.557 li
295.47 222.435 li
294.47 222.685 li
293.47 222.935 li
293.5 223.057 li
293.5 222.932 li
292.5 222.932 li
292.485 222.932 li
292.47 222.935 li
291.47 223.185 li
291.5 223.307 li
291.531 223.185 li
290.531 222.935 li
290.516 222.932 li
290.5 222.932 li
289.75 222.932 li
289.75 223.057 li
289.79 222.938 li
289.04 222.688 li
288.29 222.438 li
288.25 222.557 li
288.32 222.453 li
287.57 221.953 li
287.5 222.057 li
287.589 221.968 li
287.089 221.468 li
287.08 221.46 li
287.07 221.453 li
286.32 220.953 li
286.25 221.057 li
286.369 221.017 li
286.119 220.267 li
286.114 220.251 li
286.104 220.237 li
285.604 219.487 li
285.104 218.737 li
285 218.807 li
285.119 218.767 li
284.869 218.017 li
284.75 218.057 li
284.876 218.057 li
284.876 217.057 li
284.876 217.041 li
284.872 217.026 li
284.622 216.026 li
284.5 216.057 li
284.625 216.057 li
284.625 212.807 li
284.5 212.807 li
284.623 212.831 li
284.873 211.581 li
285.123 210.331 li
285.373 209.081 li
285.25 209.057 li
285.367 209.103 li
285.867 207.853 li
286.367 206.603 li
286.368 206.6 li
286.369 206.596 li
286.869 205.096 li
286.75 205.057 li
286.858 205.121 li
287.608 203.871 li
287.613 203.862 li
287.617 203.853 li
288.117 202.603 li
288 202.557 li
288.112 202.613 li
288.862 201.113 li
288.75 201.057 li
288.858 201.121 li
289.608 199.871 li
289.5 199.807 li
289.598 199.885 li
290.598 198.635 li
290.606 198.624 li
290.612 198.613 li
291.362 197.113 li
291.25 197.057 li
291.348 197.135 li
292.348 195.885 li
293.348 194.635 li
294.348 193.385 li
294.25 193.307 li
294.339 193.395 li
295.339 192.395 li
295.344 192.39 li
295.348 192.385 li
296.348 191.135 li
296.25 191.057 li
296.329 191.154 li
297.579 190.154 li
297.584 190.15 li
297.589 190.145 li
298.589 189.145 li
298.5 189.057 li
298.579 189.154 li
299.829 188.154 li
299.834 188.15 li
299.839 188.145 li
300.839 187.145 li
300.75 187.057 li
300.815 187.164 li
302.065 186.414 li
303.315 185.664 li
303.32 185.661 li
303.325 185.657 li
304.325 184.907 li
304.25 184.807 li
304.315 184.914 li
305.565 184.164 li
305.5 184.057 li
305.556 184.168 li
306.556 183.668 li
306.5 183.557 li
306.547 183.673 li
307.797 183.173 li
307.75 183.057 li
307.781 183.178 li
308.781 182.928 li
308.794 182.925 li
308.806 182.918 li
309.806 182.418 li
309.75 182.307 li
309.75 182.432 li
310.75 182.432 li
310.766 182.432 li
310.781 182.428 li
311.781 182.178 li
311.75 182.057 li
311.75 182.182 li
313.75 182.182 li
313.75 182.057 li
313.711 182.175 li
314.461 182.425 li
315.211 182.675 li
315.961 182.925 li
316 182.807 li
315.931 182.911 li
316.681 183.411 li
316.75 183.307 li
316.662 183.395 li
317.162 183.895 li
317.662 184.395 li
317.75 184.307 li
317.839 184.218 li
317.339 183.718 li
316.839 183.218 li
316.83 183.21 li
316.82 183.203 li
316.07 182.703 li
316.056 182.693 li
316.04 182.688 li
315.29 182.438 li
314.54 182.188 li
313.79 181.938 li
313.771 181.932 li
313.75 181.932 li
311.75 181.932 li
311.735 181.932 li
311.72 181.935 li
310.72 182.185 li
310.75 182.307 li
310.75 182.182 li
309.75 182.182 li
309.721 182.182 li
309.695 182.195 li
308.695 182.695 li
308.75 182.807 li
308.72 182.685 li
307.72 182.935 li
307.712 182.937 li
307.704 182.941 li
306.454 183.441 li
306.449 183.443 li
306.445 183.445 li
305.445 183.945 li
305.44 183.947 li
305.436 183.949 li
304.186 184.699 li
304.181 184.703 li
304.176 184.707 li
303.176 185.457 li
303.25 185.557 li
303.186 185.449 li
301.936 186.199 li
300.686 186.949 li
300.673 186.957 li
300.662 186.968 li
299.662 187.968 li
299.75 188.057 li
299.672 187.959 li
298.422 188.959 li
298.417 188.963 li
298.412 188.968 li
297.412 189.968 li
297.5 190.057 li
297.422 189.959 li
296.172 190.959 li
296.162 190.968 li
296.153 190.979 li
295.153 192.229 li
295.25 192.307 li
295.162 192.218 li
294.162 193.218 li
294.157 193.223 li
294.153 193.229 li
293.153 194.479 li
292.153 195.729 li
291.153 196.979 li
291.145 196.989 li
291.139 197.001 li
290.389 198.501 li
290.5 198.557 li
290.403 198.479 li
289.403 199.729 li
289.398 199.735 li
289.393 199.742 li
288.643 200.992 li
288.641 200.996 li
288.639 201.001 li
287.889 202.501 li
287.886 202.505 li
287.884 202.51 li
287.384 203.76 li
287.5 203.807 li
287.393 203.742 li
286.643 204.992 li
286.636 205.004 li
286.632 205.017 li
286.132 206.517 li
286.25 206.557 li
286.134 206.51 li
285.634 207.76 li
285.134 209.01 li
285.13 209.021 li
285.128 209.032 li
284.878 210.282 li
284.628 211.532 li
284.378 212.782 li
284.376 212.794 li
284.376 212.807 li
284.376 216.057 li
284.376 216.072 li
284.379 216.087 li
284.629 217.087 li
284.75 217.057 li
284.626 217.057 li
284.626 218.057 li
284.626 218.077 li
284.632 218.096 li
284.882 218.846 li
284.887 218.862 li
284.896 218.876 li
285.396 219.626 li
285.896 220.376 li
286 220.307 li
285.882 220.346 li
286.132 221.096 li
286.145 221.137 li
286.181 221.161 li
286.931 221.661 li
287 221.557 li
286.912 221.645 li
287.412 222.145 li
287.421 222.154 li
287.431 222.161 li
288.181 222.661 li
288.195 222.67 li
288.211 222.675 li
288.961 222.925 li
289.711 223.175 li
289.73 223.182 li
289.75 223.182 li
290.5 223.182 li
290.5 223.057 li
290.47 223.178 li
291.47 223.428 li
291.5 223.436 li
291.531 223.428 li
292.531 223.178 li
292.5 223.057 li
292.5 223.182 li
293.5 223.182 li
293.516 223.182 li
293.531 223.178 li
294.531 222.928 li
295.531 222.678 li
295.544 222.675 li
295.556 222.668 li
296.556 222.168 li
296.5 222.057 li
296.525 222.179 li
297.775 221.929 li
297.803 221.924 li
297.825 221.907 li
298.825 221.157 li
298.75 221.057 li
298.797 221.173 li
300.047 220.673 li
300.062 220.667 li
300.075 220.657 li
301.075 219.907 li
301 219.807 li
301.065 219.914 li
302.315 219.164 li
303.565 218.414 li
303.578 218.406 li
303.589 218.395 li
304.589 217.395 li
304.5 217.307 li
304.579 217.404 li
305.829 216.404 li
305.834 216.4 li
305.839 216.395 li
306.839 215.395 li
306.75 215.307 li
306.829 215.404 li
308.079 214.404 li
308.089 214.396 li
308.098 214.385 li
309.098 213.135 li
310.098 211.885 li
311.098 210.635 li
312.098 209.385 li
313.098 208.135 li
313.103 208.128 li
313.108 208.121 li
313.858 206.871 li
313.75 206.807 li
313.848 206.885 li
314.848 205.635 li
314.856 205.624 li
314.862 205.613 li
315.612 204.113 li
315.5 204.057 li
315.608 204.121 li
316.358 202.871 li
316.363 202.862 li
316.367 202.853 li
316.867 201.603 li
316.75 201.557 li
316.862 201.613 li
317.612 200.113 li
317.615 200.108 li
317.617 200.103 li
318.117 198.853 li
318.617 197.603 li
318.622 197.591 li
318.624 197.577 li
318.874 196.077 li
318.75 196.057 li
318.867 196.103 li
319.367 194.853 li
319.371 194.842 li
319.373 194.831 li
319.623 193.581 li
319.626 193.569 li
319.626 193.557 li
319.626 192.557 li
319.5 192.557 li
319.623 192.581 li
319.873 191.331 li
319.876 191.319 li
319.876 191.307 li
319.876 189.307 li
319.876 189.291 li
319.872 189.276 li
319.622 188.276 li
319.5 188.307 li
319.626 188.307 li
319.626 187.307 li
319.626 187.277 li
319.612 187.251 li
319.112 186.251 li
319 186.307 li
319.119 186.267 li
318.869 185.517 li
318.864 185.501 li
318.854 185.487 li
318.354 184.737 li
318.348 184.727 li
318.339 184.718 li
317.839 184.218 li
317.75 184.307 li
0 0 0 rgb
f
78.5 6.68116 mo
65.75 6.68116 li
65.75 6.93116 li
78.5 6.93116 li
72.25 27.9312 mo
65.75 27.9312 li
65.75 28.1812 li
72.25 28.1812 li
72.25 49.1812 mo
65.75 49.1812 li
65.75 49.4312 li
72.25 49.4312 li
72.25 70.4312 mo
65.75 70.4312 li
65.75 70.6812 li
72.25 70.6812 li
78.5 91.6812 mo
65.75 91.6812 li
65.75 91.9312 li
78.5 91.9312 li
72.25 112.932 mo
65.75 112.932 li
65.75 113.182 li
72.25 113.182 li
72.25 134.182 mo
65.75 134.182 li
65.75 134.432 li
72.25 134.432 li
72.25 155.432 mo
65.75 155.432 li
65.75 155.682 li
72.25 155.682 li
78.5 176.682 mo
65.75 176.682 li
65.75 176.932 li
78.5 176.932 li
72.25 198.182 mo
65.75 198.182 li
65.75 198.432 li
72.25 198.432 li
72.25 219.432 mo
65.75 219.432 li
65.75 219.682 li
72.25 219.682 li
72.25 240.682 mo
65.75 240.682 li
65.75 240.932 li
72.25 240.932 li
78.5 261.932 mo
65.75 261.932 li
65.75 262.182 li
78.5 262.182 li
72.25 283.182 mo
65.75 283.182 li
65.75 283.432 li
72.25 283.432 li
72.25 304.432 mo
65.75 304.432 li
65.75 304.682 li
72.25 304.682 li
72.25 325.682 mo
65.75 325.682 li
65.75 325.932 li
72.25 325.932 li
78.5 346.932 mo
65.75 346.932 li
65.75 347.182 li
78.5 347.182 li
72.25 368.182 mo
65.75 368.182 li
65.75 368.432 li
72.25 368.432 li
72.25 389.432 mo
65.75 389.432 li
65.75 389.682 li
72.25 389.682 li
72.25 410.682 mo
65.75 410.682 li
65.75 410.932 li
72.25 410.932 li
78.5 431.932 mo
65.75 431.932 li
65.75 432.182 li
78.5 432.182 li
491.376 19.5562 mo
491.376 6.80616 li
491.126 6.80616 li
491.126 19.5562 li
474.376 13.0562 mo
474.376 6.80616 li
474.126 6.80616 li
474.126 13.0562 li
457.126 13.0562 mo
457.126 6.80616 li
456.876 6.80616 li
456.876 13.0562 li
440.126 13.0562 mo
440.126 6.80616 li
439.876 6.80616 li
439.876 13.0562 li
423.126 13.0562 mo
423.126 6.80616 li
422.876 6.80616 li
422.876 13.0562 li
406.126 19.5562 mo
406.126 6.80616 li
405.876 6.80616 li
405.876 19.5562 li
389.126 13.0562 mo
389.126 6.80616 li
388.876 6.80616 li
388.876 13.0562 li
372.126 13.0562 mo
372.126 6.80616 li
371.876 6.80616 li
371.876 13.0562 li
355.126 13.0562 mo
355.126 6.80616 li
354.876 6.80616 li
354.876 13.0562 li
338.126 13.0562 mo
338.126 6.80616 li
337.876 6.80616 li
337.876 13.0562 li
321.126 19.5562 mo
321.126 6.80616 li
320.876 6.80616 li
320.876 19.5562 li
304.126 13.0562 mo
304.126 6.80616 li
303.876 6.80616 li
303.876 13.0562 li
287.126 13.0562 mo
287.126 6.80616 li
286.876 6.80616 li
286.876 13.0562 li
270.126 13.0562 mo
270.126 6.80616 li
269.876 6.80616 li
269.876 13.0562 li
253.126 13.0562 mo
253.126 6.80616 li
252.876 6.80616 li
252.876 13.0562 li
236.126 19.5562 mo
236.126 6.80616 li
235.876 6.80616 li
235.876 19.5562 li
219.126 13.0562 mo
219.126 6.80616 li
218.876 6.80616 li
218.876 13.0562 li
202.126 13.0562 mo
202.126 6.80616 li
201.876 6.80616 li
201.876 13.0562 li
184.876 13.0562 mo
184.876 6.80616 li
184.626 6.80616 li
184.626 13.0562 li
167.876 13.0562 mo
167.876 6.80616 li
167.626 6.80616 li
167.626 13.0562 li
150.876 19.5562 mo
150.876 6.80616 li
150.626 6.80616 li
150.626 19.5562 li
133.876 13.0562 mo
133.876 6.80616 li
133.626 6.80616 li
133.626 13.0562 li
116.876 13.0562 mo
116.876 6.80616 li
116.626 6.80616 li
116.626 13.0562 li
99.875 13.0562 mo
99.875 6.80616 li
99.625 6.80616 li
99.625 13.0562 li
82.875 13.0562 mo
82.875 6.80616 li
82.625 6.80616 li
82.625 13.0562 li
65.875 19.5562 mo
65.875 6.80616 li
65.625 6.80616 li
65.625 19.5562 li
f
65.75 432.057 mo
65.875 432.057 li
65.875 6.80616 li
65.75 6.80616 li
65.75 6.93116 li
491.25 6.93116 li
491.25 6.80616 li
491.126 6.80616 li
491.126 432.057 li
491.25 432.057 li
491.25 431.932 li
65.75 431.932 li
65.75 432.057 li
65.875 432.057 li
65.75 432.057 li
65.75 432.182 li
491.25 432.182 li
491.375 432.182 li
491.375 432.057 li
491.375 6.80616 li
491.375 6.68116 li
491.25 6.68116 li
65.75 6.68116 li
65.625 6.68116 li
65.625 6.80616 li
65.625 432.057 li
65.625 432.182 li
65.75 432.182 li
65.75 432.057 li
478.5 6.93116 mo
491.25 6.93116 li
491.25 6.68116 li
478.5 6.68116 li
484.75 28.1812 mo
491.25 28.1812 li
491.25 27.9312 li
484.75 27.9312 li
484.75 49.4312 mo
491.25 49.4312 li
491.25 49.1812 li
484.75 49.1812 li
484.75 70.6812 mo
491.25 70.6812 li
491.25 70.4312 li
484.75 70.4312 li
478.5 91.9312 mo
491.25 91.9312 li
491.25 91.6812 li
478.5 91.6812 li
484.75 113.182 mo
491.25 113.182 li
491.25 112.932 li
484.75 112.932 li
484.75 134.432 mo
491.25 134.432 li
491.25 134.182 li
484.75 134.182 li
484.75 155.682 mo
491.25 155.682 li
491.25 155.432 li
484.75 155.432 li
478.5 176.932 mo
491.25 176.932 li
491.25 176.682 li
478.5 176.682 li
484.75 198.432 mo
491.25 198.432 li
491.25 198.182 li
484.75 198.182 li
484.75 219.682 mo
491.25 219.682 li
491.25 219.432 li
484.75 219.432 li
484.75 240.932 mo
491.25 240.932 li
491.25 240.682 li
484.75 240.682 li
478.5 262.182 mo
491.25 262.182 li
491.25 261.932 li
478.5 261.932 li
484.75 283.432 mo
491.25 283.432 li
491.25 283.182 li
484.75 283.182 li
484.75 304.682 mo
491.25 304.682 li
491.25 304.432 li
484.75 304.432 li
484.75 325.932 mo
491.25 325.932 li
491.25 325.682 li
484.75 325.682 li
478.5 347.182 mo
491.25 347.182 li
491.25 346.932 li
478.5 346.932 li
484.75 368.432 mo
491.25 368.432 li
491.25 368.182 li
484.75 368.182 li
484.75 389.682 mo
491.25 389.682 li
491.25 389.432 li
484.75 389.432 li
484.75 410.932 mo
491.25 410.932 li
491.25 410.682 li
484.75 410.682 li
478.5 432.182 mo
491.25 432.182 li
491.25 431.932 li
478.5 431.932 li
f
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/zero <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17
CDCD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D289562798
79C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB
330EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F
5B0E3B0C4781A3901> |-
/one <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A390
7C7468090579C66DE0263BFE> |-
/two <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22B
DC09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A43
57093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1
A03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290
FB46DD6A2918F4C2C2BDEECA159D78> |-
/three <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725
328E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE71
6864AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23
745FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD
739801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405
CBE42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A3143
62D92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-
/four <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB181
58BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-
/five <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A20826
414A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F56
451722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC9
0D034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D1
502A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-
/six <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF23
96DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F0
8B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF
9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BF
F7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9
EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7A
B1C1C6CA> |-
/eight <1C60D8A8C9B7EF322BB1E6B7658B273FB04B6EA2FDD83BE014315CEA
310C9045661E4654F5FAA18E921C35D5D5266AB0AB839D962ABE974A291E6389
3114CACA79253F9F2FA5DBD832A15E9A146C3FAF70E186074467C5FF9BFF3446
DA2979E197C33ECF2E6672D0ABB4DD84DADA6F0875D027C1012708E022D3B91B
078729D3EB37FF9AB4379F6AE8761C6A64E65D5782F4A15C32B5788322C1277C
7EEACA49FCEF1A946497EBAE7710FA41A32E95C02F9037E734AB7501DA6FA4D1
255B1B5E2A30AD357C72139096879BB9225AA54D6163D99B65B907C933335C31
755E7599F49EDF67E30B707AA1BB3DFB155476D77FA4345C2EDAF4F74461> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FPMFEK+Helvetica /Helvetica findfont def
/FPMFEK+Helvetica*1 
[
48{/.notdef}repeat /zero /one /two /three /four /five /six 
/.notdef /eight 199{/.notdef}repeat
] FPMFEK+Helvetica nfnt
FPMFEK+Helvetica*1  [13.75 0 -0 -13.75 0 0 ]mfnt sfnt
50.4585 453.306 mov
0.000244141 0 49 (5150) wsh
135.458 453.306 mov
0.000244141 0 50 (5200) wsh
220.708 453.306 mov
0.000244141 0 50 (5250) wsh
305.709 453.306 mov
-0.000976562 0 51 0.000366211 0 (5300) awsh
390.709 453.306 mov
-0.000976562 0 51 0.000366211 0 (5350) awsh
475.959 453.306 mov
-0.000976562 0 52 0.000366211 0 (5400) awsh
39.2085 437.056 mov
(38) sh
39.2085 352.056 mov
(40) sh
39.2085 267.056 mov
(42) sh
39.2085 181.806 mov
(44) sh
39.2085 96.8062 mov
(46) sh
39.2085 11.8062 mov
(48) sh
0 0 0 rgb
%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /Symbol def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 102 /phi put
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/phi <1C60D8A8C9B7B202FA70E5D913E85DBEA26431CA15D23170272CFFE17D
051ED827955A3FB44F8C33E06AB56DEE6FD4527737281A8670E09920133655E0
78B066AEB50ED856BC5346837C9EA878F79B919656003C43B8A11643B4C5A94D
8DF4C7D6E45B471EEE9FD8C89BFDF2173E61CE358396D48F5C326536DCCF> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/EPMFEK+Symbol /Symbol findfont def
/EPMFEK+Symbol*1 
[
102{/.notdef}repeat /phi 153{/.notdef}repeat
] EPMFEK+Symbol nfnt
EPMFEK+Symbol*1  [0 -24 -24 -0 0 0 ]mfnt sfnt
24.1201 267.465 mov
(f) sh
%ADOBeginSubsetFont: Myriad-Roman Initial
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /Myriad-Roman def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 54 /six put
dup 75 /K put
dup 76 /L put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 109 /m put
dup 114 /r put
dup 115 /s put
def
/UniqueID 41987 def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/FamilyBlues [-11 0 674 685 484 496 650 661 710 721] def
/FamilyOtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B896187A> |-
/parenleft <1C60D8A8C9B84E0A775A339A6920AB0DE430B7DCF862E785DB9E
7AE6B14847A83A280DDCE1A6BA16686796D8801002CE462B6E901D06A69A29BF
2A4A53> |-
/parenright <1C60D8A8C9B84E0A4B31431D5481E823C52558C705892FE29F3
6A28E2E378B339A3E83F4F55337115DAEFD302EA0B7F069AF6D476C66B7F850D
B18A29D> |-
/plus <1C60D8A8C9B7C7F3ABA7E73C9CBC125023CE3DD603B119E06943787BD
52ABA637658F408B68ABF9D552EB91CE4B8D0075AFC4EC21BD839F1> |-
/hyphen <1C60D8A8C9B8391559F1821741C613E91B4B8DDFEE52BE990936F42
6B6> |-
/zero <1C60D8A8C9B7BA8F4DE47D81087F07C8C29DE694F434CEABCB7B06FEF
D718676E5BAAE98169477024EBF8F274B8E0BB63321B197E44D9F7019B79D36C
BA8E5BA13181F0C598767F1A47178F25668BBF84EF6C6C7BC5E2097565284A6> |-
/one <1C60D8A8C9B7BA8F155F998EB98B2861EA3AB552B4E45B53DBE462EFF6
0F5DAAAD9CF5ADECEB83D932466E1D32D6D58D0D419C6D3A463E094C> |-
/six <1C60D8A8C9B7BA8F4F4147EF9CC1F9D2C0473B5CAB190345437729CBBC
0726D16BC606AE3147650E86152A53D0DFDBE6350EF6EE15F41A268C7359154B
80EB46F2161D8623F4B780196C630E25AEA715C6AC263078C1747EA258237115
ABF977F47316CF0ECACF43F140388696A65CB9038A9600C9B2E642994817AAA9
EADBC0D7BD245677D55BC0E33FA2E3> |-
/K <1C60D8A8C9B79D2D887F02AAD0DEDD320DA849CA8D45E9FD93B18533E770
108FC37D13649022C57443E425D4D6F0511E0306CE893C0048B2EE29CC775F55
DCC2BF128C8BDE> |-
/L <1C60D8A8C9B74383B83A0865BA98FADBEF057A578DC1081149AE01CED059
08393756A8> |-
/d <1C60D8A8C9B7E7C1E9415B382C0EF9C60E6021BB1E95C03A2DD89F360B56
63D6551C4C39C5506F0B5916330D8761AFD7B1B7AFD2B01F3C1D7C981BD3EEF9
982FF295D03CBFC77917EEBB4B17167D69AC6077ECAAE3BA44137709C4EEBB4C
2CD3A2B93DCED388AD49D33DBB886AABFB9E38F70AFD27773BBB85AE81FFFF3F
F60B6F91C615C0CD7E0629A20701802295AB92AB907BAA81A72F666D01972B6C
079C75CFEFD41DFFB9EA> |-
/e <1C60D8A8C9B7A66FB4E9209DE48656974FCFF6918874F1136043F0EE8172
F4D638772B3B7F4B5346ABF7A80D482099561C97EACC6F77A33F735C7F526F3A
D9C6597D65CC687E05FF3F3D831F11A36D65E3B2668B0C94721274A694DE1BF9
4BC567A2314B6F8010DDBF586B4DD5CDAA4D122F00> |-
/g <1C60D8A8C9B7ECD907F624365D438F0401F823B73EA66C47C7E6F281CDBD
29E1DF24F38B45400CB92D1773CBC7D50FCB7995F10368A24D5E58E4D952E59F
C7474F76DA6B34C3DA78B95EC1EF9CF6F4F63352FB906DDA03E2A5E4C969C169
E59D202129BB858FF2389396F4B948C04E75496FBEB13EFD11C93AA00D90D167
33338CEB82FA27143EC77B2C20532B0E3472C981FFF7D331E2727D5298A3DEB5
54E7B9520D81862C9F7096CAAEF2A0777B1B46BAC159DF161C1CC74E3EBE289F
453E0E8DD297E3F240E1B2> |-
/h <1C60D8A8C9B790A862F793CE5984292368D14C24D85F1154622C89385DE5
56F262FC00D8C56415CEE28ACD6F9EAAD20CA3762BD1E498E9A121822DBFB9C1
635FF4F3E0F57899EE7BF7A1EBA8D09E28A17FFCA944FA184D7045> |-
/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10C44EFEDC74AE4DA
23DDA2D9D4E78E5DFA35F442401F635CE4EC97BE57329CAA46C6A3C6CC0DEBBD
4CB8E8B931000F3668CFD86F5BA98BC18E8B1DBC445FD65D7EC5C67C2E7AD143
C336B225F9618FB19106222772767E98CA6DE74BDC9E6E1E91AF0A9BC200F979
51D7A45F25C7DC5AD757FFD60E2D9250E771B55218F79A54B61A1C40C396FB> |-
/r <1C60D8A8C9B825FA5220A9740606B50B33E010C4BCC4C01AD0977A1A669B
FA1A38816F7F3AFEDC1C339BC9FE77C7DB80E163C95852F64B999476B735BD17
BE5250D15A9BA973A020C54D1BE5E2686C3A86A44295463DE15129469ED396D6
199BF1BFF0CA9745121C3A314D02EB3FCC22E2B5> |-
/s <1C60D8A8C9B70FAD2F81CC8BBF4E6A0E18D42D6949A9CEA98F96BB91C9CE
EEE4953B2FD83F05669F83DD630625A425EBBE7CE79373EE324743431698E23D
247D1ABC2EF04C298E5A1B13987DC1A4A8FE49BE4106E5A1C884B4074CFD17B6
1C7D93D85F5BD451BA630B50AF> |-
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DPMFEK+Myriad-Roman /Myriad-Roman findfont def
/DPMFEK+Myriad-Roman*1 
[
32{/.notdef}repeat /space 7{/.notdef}repeat /parenleft /parenright /.notdef /plus /.notdef 
/hyphen 2{/.notdef}repeat /zero /one 4{/.notdef}repeat /six 20{/.notdef}repeat /K 
/L 23{/.notdef}repeat /d /e /.notdef /g /h 4{/.notdef}repeat 
/m 4{/.notdef}repeat /r /s 140{/.notdef}repeat
] DPMFEK+Myriad-Roman nfnt
DPMFEK+Myriad-Roman*1  [0 -13.992 -13.992 -0 0 0 ]mfnt sfnt
29.1123 254.961 mov
(+) sh
DPMFEK+Myriad-Roman*1  [0 -24 -24 -0 0 0 ]mfnt sfnt
21.1201 246.622 mov
0 0.000366211 (  ) ash
24.1201 236.446 mov
0 -0.000244141 103 ( \(degr) wsh
24.1201 177.86 mov
(ee) sh
24.1201 153.812 mov
(s\)) sh
DPMFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
205.12 479.844 mov
(m) sh
DPMFEK+Myriad-Roman*1  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
225.136 483.836 mov
(KL) sh
DPMFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
239.324 479.844 mov
( - m) sh
DPMFEK+Myriad-Roman*1  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
276.883 483.836 mov
(Ks) sh
DPMFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
290.007 479.844 mov
( \(10) sh
DPMFEK+Myriad-Roman*1  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
326.534 471.852 mov
(6) sh
DPMFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
333.712 479.844 mov
-0.000366211 0 104 ( hs) wsh
DPMFEK+Myriad-Roman*1  [13.992 0 -0 -13.992 0 0 ]mfnt sfnt
361.623 471.852 mov
0.000488281 0 (-1) ash
DPMFEK+Myriad-Roman*1  [24 0 -0 -24 0 0 ]mfnt sfnt
373.097 479.844 mov
(\)) sh
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Times-Roman def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 106 /j put
def
/FontBBox {-203 -428 1700 1271} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963
E3987D5E4E6C9FCD> |-
/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBAD
FFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23
F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EF
D64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752
C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DE
DC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C0
4061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE3
8746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B679
71885F8F1CB6195A6A7B0FFC> |-
/b <1C60D8A8C9B7A73DEA51CB4AB782EC4CF13FD26F41FC8CB88DC14FD82E52
80D80A6DCEF24DFC67DDE70F479EF61F4A2F59FB7C44A2DA70AA9DBE3F3332B0
5CF7A2A04A2009B46D9C510350AE718270C9D98B76F9594F5A2CEFABA8989AB9
C1A83073103E665B7D0C1FB0D95DD2CF6B3624FBE8C4DC08D6FA9DA1460775A9
F8E2451D08E82D20D83F7AACFD6C43C3765095FFA99CCEBE8373741BF9BE5B92
7D964DEAC7210DBA744ADF394D6C616E3DDB8D63> |-
/c <1C60D8A8C9B77FE2CE939B120B8C530BA36A1D378ED7528AD7B7A10AC71B
EF208D8B385B11077F2A13A81C13DFBF440D42A243A800735CB8F4DC3746EB40
39E43E77D867A7AA457E639AE6CCAFB17D4572C0E8FCF8662A95CB9A94DBFA33
9E8C89716E4D6EB7EE669FEA0FD73F1B364D57426E512088C7E414CE09DC0040
B747838B6828750C7FA69A58B3FBD05411AA3233E35DCBE1E5C8A3302EE901E3
00C17D> |-
/d <1C60D8A8C9B7A73DB9A50E659DB775F0445838B52D4AD3E4EA55A04AF1E6
6EB3E22000826F80E46C696D55B3FE9B16954A0FDDDCF9A25B9DBBDA281BC374
3A32DF4E962666420F0E46505362A6A9911C122E7E5925E4098A8375B6420427
5CB8C487667CDFFB7001810B24CEFAA2B80CAD8B87A3E1168C62B165D1D52436
E632F3BD5E44BCAD1D3E08911E568C3ADE5A148D88E7C75A5F95F7018097A855
F01058BEA6CAD1F5CFBA99049D028F229C0A374E791F4E6F00190E23FDB14CB2
BF5215AC36154229670311F93C06828FE397A9700C53BE1A07DF9AE66151E66A
3E4BE4B17FDA8F9875D90067B1D7D9914E47FA1ED2D057561417FDB2931E47F3
C120E5878FF702> |-
/e <1C60D8A8C9B77FE2CE67108D1280ADC9682165E381A1DB7E740A05B18E65
167A034DB250F6D5492B270110B05E60263A42B2C42DDF9AB2E4A276D8ABFFBD
6680C39C89C62CEAE031CFF89EF16FD9FC76CF19CB9F9E34BA9AA837F4D55163
017EBBAC9FCE57F666560D76840A1E9FB941AF2DF15742DAEB79EA2886404B23
75DA19EFBEAC2017EDAD03B37508> |-
/f <1C60D8A8C9B81F2C5200FF77F5CC74A969F74B97E3CB0139862AF77A9D0A
CBF3A9D6D9D7DFD3746D263F91E033F5CA0320628020691D4C3124BFE6A21E6C
83BCBE09CD5D12CC21985F4F5AFA1A376E8DE99902DF7BF2E77B55D090DC8BBC
539FB00E70FEE139F0FC4E0E2A68FC9AB61AE1A0D629C6435B8A2E09E0E0D78B
08DE40CDACCDB12252A395979017F0F46F00D30915E02E70A215B3DDCC> |-
/g <1C60D8A8C9B7A73DA347F0DC0A4CC25AD3382B8351D419D81B2F540C0F66
5DA2122211CB75D621F53ADCDBE7815157FCF3A7D9C98329945893598F8138F5
D5F74388A15B63DC4DDBDB1A01CEDC68DBC335D575F070C3086679BC845D2E73
8427D0F7B681E970CAECC1ECA0192676764BEA6F787CBC115862B9B44CFD83A9
6CAFA21CE91235F59FAB64DFE50A98E215046D4BF1AB210098434AE88D505933
B6B31BEC443E9C48567AB352DDD15143CE343B08927EA9C965F9F904D0C1E9AE
4FECE14141B4365C351A577CA516601FBE0AFA3AD74B770DF0E6D6A50EC77FBA
93516C03FCA671EDEBF2CCDCA919590D5C9DEA3D43029A729D3EC913B24C08E5
BEFE573AAB22339502EECDF5C8F0B813EECA1A3643E46181D1A26BD0E961251C
6FA14F9824242DA4E6EBAD7E5F2872BFD0F6F6BE709AF20CDE3BC39F29118C3A
BE69D00325A184273C17639A8F614CF5086AF810778C30368743992A90E37B88
A00B0EFB39F462A8B7048C5ABBCF6C197AE88D4F99C80A2B8E1DBB> |-
/j <1C60D8A8C9B854D0F4318DDDE14D8864CEE5F1B93F7E5E0DD899A62B6E7D
037EA34803024A344526BC98303A7A7B3923E2C877CEC46D1EF2BE3AEF7DDB0F
B664295F5CB9B1BAD65C39285A328A1CD1D26B4BE92BAFE3188695C19F95D076
17AFFCB1397DBD5802C97EE7FB79C026E1BDD74A5F83B65785D331FCCE6C7453
8D08BC4C608233D45F618D6866CE4E0EC28093EB918FE94682B26A8440EEB5D5
D4C6F9574795C47EB7026AC188154C4F5F264E27E9C7D82AD9B338C0D393483C
38880CE0D1947B96533CEBB4A1C9C8B4D279956BD2CCA747883C18> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CPMFEK+Times-Roman /Times-Roman findfont def
/CPMFEK+Times-Roman*1 
[
97{/.notdef}repeat /a /b /c /d /e /f /g 
2{/.notdef}repeat /j 149{/.notdef}repeat
] CPMFEK+Times-Roman nfnt
CPMFEK+Times-Roman*1  [18 0 -0 -18 0 0 ]mfnt sfnt
298.62 206.844 mov
(a) sh
275.62 193.344 mov
(b) sh
136.12 36.3442 mov
(c) sh
174.12 50.3442 mov
(e) sh
265.12 67.3442 mov
(d) sh
369.12 30.8442 mov
(g) sh
416.12 36.3442 mov
(f) sh
412.62 352.844 mov
(f) sh
461.62 104.844 mov
(c) sh
460.12 160.844 mov
(d) sh
96.6201 200.344 mov
(j) sh
455.62 231.844 mov
(e) sh
337.621 468.965 mo
345.621 463.965 li
f
338.151 469.813 mo
346.151 464.813 li
345.091 463.117 li
337.091 468.117 li
f
97.1202 205.965 mo
97.1202 218.965 li
f
97.1202 225 mo
96.0665 222.16 94.2686 218.637 92.3653 216.453 cv
97.1202 218.173 li
101.876 216.453 li
99.9717 218.637 98.1734 222.16 97.1202 225 cv
f
95.6202 205.965 mo
95.6202 218.965 li
98.6202 218.965 li
98.6202 205.965 li
f
24.9537 243.799 mo
24.9537 236.465 li
f
25.4537 243.799 mo
25.4537 236.465 li
24.4537 236.465 li
24.4537 243.799 li
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse

%ADOEndClientInjection: EndPageContent "AI11EPS"
% page clip
grestore
grestore % PSGState
/FPMFEK+Helvetica*1 ufnt
/EPMFEK+Symbol*1 ufnt
/DPMFEK+Myriad-Roman*1 ufnt
/CPMFEK+Times-Roman*1 ufnt
Adobe_AGM_Core/AGMCORE_save get restore
%%PageTrailer
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
Adobe_AGM_Image/page_trailer get exec
Adobe_CoolType_Core/page_trailer get exec
Adobe_AGM_Core/page_trailer get exec
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/doc_trailer get exec
Adobe_CoolType_Core/doc_trailer get exec
Adobe_AGM_Core/doc_trailer get exec
%%EOF
