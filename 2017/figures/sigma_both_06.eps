%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%AI8_CreatorVersion: 10.0
%%For: (Don Groom) (Lawrence Berkeley Lab)
%%Title: (sigma_both_06.eps)
%%CreationDate: 4/26/06 5:49 PM
%%BoundingBox: 152 105 451 630
%%HiResBoundingBox: 152.9331 105.835 450.7002 629.2607
%%DocumentProcessColors: Black
%%DocumentFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentNeededFonts: Symbol
%%+ Times-Roman
%%+ Times-Italic
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Header
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 0
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 3
%AI5_OpenToView: -208.5166 668.6965 1.5 1866 1117 18 0 1 7 43 0 0
%AI5_OpenViewLayers: 777
%%PageOrigin:30 31
%%AI3_PaperRect:-30 761 582 -31
%%AI3_Margin:30 -31 -30 31
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Symbol
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
userdict /_useSmoothShade true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/Euro/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Symbol Symbol
[/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/space
/exclam
/universal
/numbersign
/existential
/percent
/ampersand
/suchthat
/parenleft
/parenright
/asteriskmath
/plus
/comma
/minus
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/congruent
/Alpha
/Beta
/Chi
/Delta
/Epsilon
/Phi
/Gamma
/Eta
/Iota
/theta1
/Kappa
/Lambda
/Mu
/Nu
/Omicron
/Pi
/Theta
/Rho
/Sigma
/Tau
/Upsilon
/sigma1
/Omega
/Xi
/Psi
/Zeta
/bracketleft
/therefore
/bracketright
/perpendicular
/underscore
/radicalex
/alpha
/beta
/chi
/delta
/epsilon
/phi
/gamma
/eta
/iota
/phi1
/kappa
/lambda
/mu
/nu
/omicron
/pi
/theta
/rho
/sigma
/tau
/upsilon
/omega1
/omega
/xi
/psi
/zeta
/braceleft
/bar
/braceright
/similar
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/Euro
/Upsilon1
/minute
/lessequal
/fraction
/infinity
/florin
/club
/diamond
/heart
/spade
/arrowboth
/arrowleft
/arrowup
/arrowright
/arrowdown
/degree
/plusminus
/second
/greaterequal
/multiply
/proportional
/partialdiff
/bullet
/divide
/notequal
/equivalence
/approxequal
/ellipsis
/arrowvertex
/arrowhorizex
/carriagereturn
/aleph
/Ifraktur
/Rfraktur
/weierstrass
/circlemultiply
/circleplus
/emptyset
/intersection
/union
/propersuperset
/reflexsuperset
/notsubset
/propersubset
/reflexsubset
/element
/notelement
/angle
/gradient
/registerserif
/copyrightserif
/trademarkserif
/product
/radical
/dotmath
/logicalnot
/logicaland
/logicalor
/arrowdblboth
/arrowdblleft
/arrowdblup
/arrowdblright
/arrowdbldown
/lozenge
/angleleft
/registersans
/copyrightsans
/trademarksans
/summation
/parenlefttp
/parenleftex
/parenleftbt
/bracketlefttp
/bracketleftex
/bracketleftbt
/bracelefttp
/braceleftmid
/braceleftbt
/braceex
/.notdef
/angleright
/integral
/integraltp
/integralex
/integralbt
/parenrighttp
/parenrightex
/parenrightbt
/bracketrighttp
/bracketrightex
/bracketrightbt
/bracerighttp
/bracerightmid
/bracerightbt
/.notdef
/_Symbol/Symbol 0 0 0 TZ
%AI3_EndEncoding AdobeType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 0 TZ
%AI3_EndEncoding TrueType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Times-Italic Times-Italic
[/_Times-Italic/Times-Italic 0 0 0 TZ
%AI3_EndEncoding TrueType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_Begin_NonPrinting
Np
1 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
([Registration]) Pc
1 1 1 1 k
([Registration]) Pc
0 g
(K=100) Pc
1 g
(K=0) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
1 Ap
0 R
0 G
0 J 0 j 0.5 w 4 M []0 d
0 XR
436.1396 134.0771 m
436.1396 380.6826 L
189.1597 380.6826 L
189.1597 134.0771 L
436.1396 134.0771 L
s
0 Ap
[5 2 2 2 ]0 d
189.2427 378.3506 m
214.145 353.4487 l
214.145 342.2051 l
217.1431 329.9624 l
218.3921 333.71 l
221.3906 334.4595 222.1401 336.2085 v
222.8896 337.9575 223.6392 347.2021 228.8862 346.9521 c
234.1333 346.7026 233.8833 342.7051 y
233.8833 344.7036 234.6328 344.2041 v
235.3823 343.7041 237.1313 339.9565 237.1313 339.207 c
237.1313 338.4575 237.8809 339.9565 y
248.6245 317.9692 248.8745 317.2197 v
249.1245 316.4702 249.374 329.2129 y
264.1157 300.9795 266.3643 290.4854 v
266.9302 287.8428 263.3657 300.23 268.6128 298.7305 c
269.1123 297.2314 269.3623 296.2319 v
269.6123 295.2329 275.8584 283.4897 276.3584 282.2402 c
276.8579 280.9912 276.3584 279.7417 y
285.103 257.0049 l
288.1016 260.7529 l
291.8491 258.0044 l
292.2065 256.6948 294.4365 249.0283 298.0527 240.4966 c
306.8403 216.2788 311.3379 207.5342 v
315.835 198.7891 324.3301 181.0498 336.5732 167.3076 c
348.8159 153.5659 362.3081 138.8242 367.8047 134.3271 c
S
[]0 d
189.1597 272.9956 m
206.8989 272.9956 242.1284 272.7461 247.875 271.4966 c
253.6216 270.2471 262.6162 266 272.1108 253.7568 c
281.6055 241.5142 285.603 237.0166 301.0938 206.7847 c
316.085 177.3018 319.833 170.3057 v
323.5806 163.3101 335.0742 139.8237 339.0713 134.0771 c
S
[3 ]0 d
212.6455 134.0771 m
216.1436 140.0737 239.6299 190.5439 253.6216 203.2866 c
267.6133 216.0293 272.3608 218.7773 282.105 220.2764 c
291.8491 221.7759 304.5918 220.5264 322.8311 208.5337 c
341.0703 196.5405 362.8076 179.0508 376.5498 166.8081 c
390.2915 154.5654 412.5283 135.3267 413.7778 134.0771 c
S
[]0 d
314.3359 134.3271 m
314.3359 145.0708 314.5859 187.0459 328.5776 202.2871 c
342.5693 217.5283 355.062 219.0273 370.3032 220.7764 c
385.5444 222.5254 398.5366 223.0249 435.5151 223.0249 c
S
[4 1 1 1 1 4 ]0 d
327.7344 134.1396 m
333.2314 150.8799 337.0728 160.312 351.3145 168.3071 c
365.5562 176.3022 389.292 177.3018 404.0337 177.8013 c
418.7749 178.3013 431.2676 178.3013 435.5151 178.3013 c
S
1 Ap
0 O
1 g
[]0 d
414.2773 221.2886 m
414.9604 221.2886 415.5142 221.8423 415.5142 222.5254 c
415.5142 223.2085 414.9604 223.7622 414.2773 223.7622 c
413.5947 223.7622 413.041 223.2085 413.041 222.5254 c
413.041 221.8423 413.5947 221.2886 414.2773 221.2886 c
b
396.7046 219.5273 m
397.3877 219.5273 397.9409 220.0806 397.9409 220.7637 c
397.9409 221.4468 397.3877 222.0005 396.7046 222.0005 c
396.0215 222.0005 395.4678 221.4468 395.4678 220.7637 c
395.4678 220.0806 396.0215 219.5273 396.7046 219.5273 c
b
388.4595 221.2759 m
389.1421 221.2759 389.6958 221.8296 389.6958 222.5127 c
389.6958 223.1958 389.1421 223.7495 388.4595 223.7495 c
387.7764 223.7495 387.2227 223.1958 387.2227 222.5127 c
387.2227 221.8296 387.7764 221.2759 388.4595 221.2759 c
b
386.2939 220.9429 m
386.9771 220.9429 387.5308 221.4966 387.5308 222.1797 c
387.5308 222.8628 386.9771 223.4165 386.2939 223.4165 c
385.6108 223.4165 385.0571 222.8628 385.0571 222.1797 c
385.0571 221.4966 385.6108 220.9429 386.2939 220.9429 c
b
383.2124 220.6099 m
383.8955 220.6099 384.4492 221.1636 384.4492 221.8467 c
384.4492 222.5298 383.8955 223.083 383.2124 223.083 c
382.5293 223.083 381.9756 222.5298 381.9756 221.8467 c
381.9756 221.1636 382.5293 220.6099 383.2124 220.6099 c
b
378.5483 220.6099 m
379.2314 220.6099 379.7852 221.1636 379.7852 221.8467 c
379.7852 222.5298 379.2314 223.083 378.5483 223.083 c
377.8652 223.083 377.3115 222.5298 377.3115 221.8467 c
377.3115 221.1636 377.8652 220.6099 378.5483 220.6099 c
b
376.2998 220.6099 m
376.9829 220.6099 377.5366 221.1636 377.5366 221.8467 c
377.5366 222.5298 376.9829 223.083 376.2998 223.083 c
375.6167 223.083 375.063 222.5298 375.063 221.8467 c
375.063 221.1636 375.6167 220.6099 376.2998 220.6099 c
b
374.2178 220.5264 m
374.9009 220.5264 375.4541 221.0801 375.4541 221.7632 c
375.4541 222.4463 374.9009 223 374.2178 223 c
373.5347 223 372.981 222.4463 372.981 221.7632 c
372.981 221.0801 373.5347 220.5264 374.2178 220.5264 c
b
373.0518 220.2764 m
373.7344 220.2764 374.2886 220.8306 374.2886 221.5132 c
374.2886 222.1963 373.7344 222.75 373.0518 222.75 c
372.3687 222.75 371.8149 222.1963 371.8149 221.5132 c
371.8149 220.8306 372.3687 220.2764 373.0518 220.2764 c
b
367.209 219.4565 m
367.8921 219.4565 368.4458 220.0103 368.4458 220.6929 c
368.4458 221.376 367.8921 221.9297 367.209 221.9297 c
366.5264 221.9297 365.9727 221.376 365.9727 220.6929 c
365.9727 220.0103 366.5264 219.4565 367.209 219.4565 c
b
365.71 219.373 m
366.3931 219.373 366.9468 219.9268 366.9468 220.6099 c
366.9468 221.293 366.3931 221.8467 365.71 221.8467 c
365.0273 221.8467 364.4731 221.293 364.4731 220.6099 c
364.4731 219.9268 365.0273 219.373 365.71 219.373 c
b
364.0444 219.5396 m
364.7275 219.5396 365.2813 220.0933 365.2813 220.7764 c
365.2813 221.4595 364.7275 222.0132 364.0444 222.0132 c
363.3613 222.0132 362.8076 221.4595 362.8076 220.7764 c
362.8076 220.0933 363.3613 219.5396 364.0444 219.5396 c
b
362.7119 218.79 m
363.395 218.79 363.9482 219.3438 363.9482 220.0269 c
363.9482 220.71 363.395 221.2637 362.7119 221.2637 c
362.0288 221.2637 361.4751 220.71 361.4751 220.0269 c
361.4751 219.3438 362.0288 218.79 362.7119 218.79 c
b
360.8794 218.9565 m
361.5625 218.9565 362.1162 219.5103 362.1162 220.1934 c
362.1162 220.8765 361.5625 221.4302 360.8794 221.4302 c
360.1963 221.4302 359.6431 220.8765 359.6431 220.1934 c
359.6431 219.5103 360.1963 218.9565 360.8794 218.9565 c
b
359.1431 218.2905 m
359.8262 218.2905 360.3799 218.8438 360.3799 219.5273 c
360.3799 220.21 359.8262 220.7637 359.1431 220.7637 c
358.46 220.7637 357.9063 220.21 357.9063 219.5273 c
357.9063 218.8438 358.46 218.2905 359.1431 218.2905 c
b
358.0605 217.3745 m
358.7432 217.3745 359.2974 217.9277 359.2974 218.6108 c
359.2974 219.2939 358.7432 219.8477 358.0605 219.8477 c
357.3774 219.8477 356.8237 219.2939 356.8237 218.6108 c
356.8237 217.9277 357.3774 217.3745 358.0605 217.3745 c
b
355.8115 217.4575 m
356.4946 217.4575 357.0483 218.0112 357.0483 218.6943 c
357.0483 219.3774 356.4946 219.9307 355.8115 219.9307 c
355.1289 219.9307 354.5752 219.3774 354.5752 218.6943 c
354.5752 218.0112 355.1289 217.4575 355.8115 217.4575 c
b
354.729 217.041 m
355.4121 217.041 355.9658 217.5947 355.9658 218.2778 c
355.9658 218.9609 355.4121 219.5146 354.729 219.5146 c
354.0459 219.5146 353.4922 218.9609 353.4922 218.2778 c
353.4922 217.5947 354.0459 217.041 354.729 217.041 c
b
353.563 216.708 m
354.2461 216.708 354.7998 217.2617 354.7998 217.9448 c
354.7998 218.6279 354.2461 219.1816 353.563 219.1816 c
352.8799 219.1816 352.3262 218.6279 352.3262 217.9448 c
352.3262 217.2617 352.8799 216.708 353.563 216.708 c
b
352.4805 216.2085 m
353.1636 216.2085 353.7173 216.7622 353.7173 217.4448 c
353.7173 218.1279 353.1636 218.6816 352.4805 218.6816 c
351.7974 218.6816 351.2437 218.1279 351.2437 217.4448 c
351.2437 216.7622 351.7974 216.2085 352.4805 216.2085 c
b
351.6475 215.875 m
352.3306 215.875 352.8843 216.4287 352.8843 217.1118 c
352.8843 217.7949 352.3306 218.3486 351.6475 218.3486 c
350.9644 218.3486 350.4106 217.7949 350.4106 217.1118 c
350.4106 216.4287 350.9644 215.875 351.6475 215.875 c
b
350.4106 215.875 m
351.0938 215.875 351.6475 216.4287 351.6475 217.1118 c
351.6475 217.7949 351.0938 218.3486 350.4106 218.3486 c
349.728 218.3486 349.1743 217.7949 349.1743 217.1118 c
349.1743 216.4287 349.728 215.875 350.4106 215.875 c
b
349.0532 215.042 m
349.7363 215.042 350.29 215.5962 350.29 216.2788 c
350.29 216.9619 349.7363 217.5156 349.0532 217.5156 c
348.3701 217.5156 347.8164 216.9619 347.8164 216.2788 c
347.8164 215.5962 348.3701 215.042 349.0532 215.042 c
b
347.0493 214.6934 m
347.7319 214.6934 348.2856 215.2471 348.2856 215.9302 c
348.2856 216.6133 347.7319 217.167 347.0493 217.167 c
346.3662 217.167 345.8125 216.6133 345.8125 215.9302 c
345.8125 215.2471 346.3662 214.6934 347.0493 214.6934 c
b
345.5679 214.5552 m
346.251 214.5552 346.8047 215.1089 346.8047 215.792 c
346.8047 216.4746 346.251 217.0288 345.5679 217.0288 c
344.8848 217.0288 344.3311 216.4746 344.3311 215.792 c
344.3311 215.1089 344.8848 214.5552 345.5679 214.5552 c
b
344.0684 214.1387 m
344.752 214.1387 345.3052 214.6924 345.3052 215.3755 c
345.3052 216.0586 344.752 216.6123 344.0684 216.6123 c
343.3857 216.6123 342.832 216.0586 342.832 215.3755 c
342.832 214.6924 343.3857 214.1387 344.0684 214.1387 c
b
343.2358 214.8882 m
343.9189 214.8882 344.4727 215.4419 344.4727 216.125 c
344.4727 216.8081 343.9189 217.3618 343.2358 217.3618 c
342.5527 217.3618 341.999 216.8081 341.999 216.125 c
341.999 215.4419 342.5527 214.8882 343.2358 214.8882 c
b
342.8193 213.8057 m
343.5024 213.8057 344.0562 214.3594 344.0562 215.042 c
344.0562 215.7251 343.5024 216.2788 342.8193 216.2788 c
342.1362 216.2788 341.5825 215.7251 341.5825 215.042 c
341.5825 214.3594 342.1362 213.8057 342.8193 213.8057 c
b
341.4033 213.1392 m
342.0864 213.1392 342.6401 213.6929 342.6401 214.376 c
342.6401 215.0591 342.0864 215.6128 341.4033 215.6128 c
340.7207 215.6128 340.167 215.0591 340.167 214.376 c
340.167 213.6929 340.7207 213.1392 341.4033 213.1392 c
b
339.9878 212.8896 m
340.6709 212.8896 341.2246 213.4429 341.2246 214.126 c
341.2246 214.8091 340.6709 215.3628 339.9878 215.3628 c
339.3047 215.3628 338.751 214.8091 338.751 214.126 c
338.751 213.4429 339.3047 212.8896 339.9878 212.8896 c
b
338.9048 211.9731 m
339.5879 211.9731 340.1416 212.5269 340.1416 213.21 c
340.1416 213.8931 339.5879 214.4468 338.9048 214.4468 c
338.2222 214.4468 337.6685 213.8931 337.6685 213.21 c
337.6685 212.5269 338.2222 211.9731 338.9048 211.9731 c
b
337.1563 211.5571 m
337.8389 211.5571 338.3926 212.1104 338.3926 212.7935 c
338.3926 213.4766 337.8389 214.0303 337.1563 214.0303 c
336.4731 214.0303 335.9194 213.4766 335.9194 212.7935 c
335.9194 212.1104 336.4731 211.5571 337.1563 211.5571 c
b
336.0732 211.3779 m
336.7563 211.3779 337.3101 211.9316 337.3101 212.6143 c
337.3101 213.2974 336.7563 213.8511 336.0732 213.8511 c
335.3901 213.8511 334.8364 213.2974 334.8364 212.6143 c
334.8364 211.9316 335.3901 211.3779 336.0732 211.3779 c
b
335.0742 211.2114 m
335.7568 211.2114 336.3105 211.7646 336.3105 212.4478 c
336.3105 213.1309 335.7568 213.6846 335.0742 213.6846 c
334.3911 213.6846 333.8374 213.1309 333.8374 212.4478 c
333.8374 211.7646 334.3911 211.2114 335.0742 211.2114 c
b
333.5903 207.8696 m
334.2734 207.8696 334.8271 208.4229 334.8271 209.106 c
334.8271 209.7891 334.2734 210.3428 333.5903 210.3428 c
332.9072 210.3428 332.3535 209.7891 332.3535 209.106 c
332.3535 208.4229 332.9072 207.8696 333.5903 207.8696 c
b
333.2417 210.9614 m
333.9248 210.9614 334.4785 211.5151 334.4785 212.1982 c
334.4785 212.8809 333.9248 213.4346 333.2417 213.4346 c
332.5586 213.4346 332.0049 212.8809 332.0049 212.1982 c
332.0049 211.5151 332.5586 210.9614 333.2417 210.9614 c
b
332.0757 211.2114 m
332.7588 211.2114 333.3125 211.7646 333.3125 212.4478 c
333.3125 213.1309 332.7588 213.6846 332.0757 213.6846 c
331.3926 213.6846 330.8389 213.1309 330.8389 212.4478 c
330.8389 211.7646 331.3926 211.2114 332.0757 211.2114 c
b
330.5767 210.2119 m
331.2593 210.2119 331.8135 210.7656 331.8135 211.4487 c
331.8135 212.1313 331.2593 212.6851 330.5767 212.6851 c
329.8936 212.6851 329.3398 212.1313 329.3398 211.4487 c
329.3398 210.7656 329.8936 210.2119 330.5767 210.2119 c
b
328.3276 209.7954 m
329.0107 209.7954 329.5645 210.3491 329.5645 211.0322 c
329.5645 211.7153 329.0107 212.2686 328.3276 212.2686 c
327.645 212.2686 327.0913 211.7153 327.0913 211.0322 c
327.0913 210.3491 327.645 209.7954 328.3276 209.7954 c
b
326.7456 209.6289 m
327.4287 209.6289 327.9819 210.1826 327.9819 210.8657 c
327.9819 211.5483 327.4287 212.1021 326.7456 212.1021 c
326.0625 212.1021 325.5088 211.5483 325.5088 210.8657 c
325.5088 210.1826 326.0625 209.6289 326.7456 209.6289 c
b
324.2471 208.7959 m
324.9297 208.7959 325.4834 209.3496 325.4834 210.0327 c
325.4834 210.7158 324.9297 211.2695 324.2471 211.2695 c
323.564 211.2695 323.0103 210.7158 323.0103 210.0327 c
323.0103 209.3496 323.564 208.7959 324.2471 208.7959 c
b
324.4966 210.6284 m
325.1797 210.6284 325.7334 211.1821 325.7334 211.8647 c
325.7334 212.5479 325.1797 213.1016 324.4966 213.1016 c
323.8135 213.1016 323.2603 212.5479 323.2603 211.8647 c
323.2603 211.1821 323.8135 210.6284 324.4966 210.6284 c
b
322.9976 210.7949 m
323.6807 210.7949 324.2344 211.3486 324.2344 212.0313 c
324.2344 212.7144 323.6807 213.2681 322.9976 213.2681 c
322.3145 213.2681 321.7607 212.7144 321.7607 212.0313 c
321.7607 211.3486 322.3145 210.7949 322.9976 210.7949 c
b
321.748 211.3779 m
322.4316 211.3779 322.9854 211.9316 322.9854 212.6143 c
322.9854 213.2974 322.4316 213.8511 321.748 213.8511 c
321.0654 213.8511 320.5117 213.2974 320.5117 212.6143 c
320.5117 211.9316 321.0654 211.3779 321.748 211.3779 c
b
319.8203 212.1274 m
320.5034 212.1274 321.0571 212.6812 321.0571 213.3643 c
321.0571 214.0469 320.5034 214.6006 319.8203 214.6006 c
319.1372 214.6006 318.5835 214.0469 318.5835 213.3643 c
318.5835 212.6812 319.1372 212.1274 319.8203 212.1274 c
b
318.2505 211.6274 m
318.9336 211.6274 319.4873 212.1812 319.4873 212.8643 c
319.4873 213.5474 318.9336 214.1011 318.2505 214.1011 c
317.5674 214.1011 317.0137 213.5474 317.0137 212.8643 c
317.0137 212.1812 317.5674 211.6274 318.2505 211.6274 c
b
316.918 212.627 m
317.6011 212.627 318.1548 213.1807 318.1548 213.8638 c
318.1548 214.5469 317.6011 215.1006 316.918 215.1006 c
316.2349 215.1006 315.6812 214.5469 315.6812 213.8638 c
315.6812 213.1807 316.2349 212.627 316.918 212.627 c
b
316.335 213.71 m
317.0181 213.71 317.5718 214.2632 317.5718 214.9463 c
317.5718 215.6294 317.0181 216.1831 316.335 216.1831 c
315.6519 216.1831 315.0981 215.6294 315.0981 214.9463 c
315.0981 214.2632 315.6519 213.71 316.335 213.71 c
b
314.8359 213.46 m
315.5186 213.46 316.0723 214.0137 316.0723 214.6968 c
316.0723 215.3794 315.5186 215.9331 314.8359 215.9331 c
314.1528 215.9331 313.5991 215.3794 313.5991 214.6968 c
313.5991 214.0137 314.1528 213.46 314.8359 213.46 c
b
314.8359 215.2212 m
315.5186 215.2212 316.0723 215.7749 316.0723 216.458 c
316.0723 217.1411 315.5186 217.6948 314.8359 217.6948 c
314.1528 217.6948 313.5991 217.1411 313.5991 216.458 c
313.5991 215.7749 314.1528 215.2212 314.8359 215.2212 c
b
313.2534 215.7212 m
313.9365 215.7212 314.4902 216.2749 314.4902 216.958 c
314.4902 217.6406 313.9365 218.1943 313.2534 218.1943 c
312.5703 218.1943 312.0166 217.6406 312.0166 216.958 c
312.0166 216.2749 312.5703 215.7212 313.2534 215.7212 c
b
312.3374 216.8872 m
313.0205 216.8872 313.5737 217.4409 313.5737 218.124 c
313.5737 218.8066 313.0205 219.3604 312.3374 219.3604 c
311.6543 219.3604 311.1006 218.8066 311.1006 218.124 c
311.1006 217.4409 311.6543 216.8872 312.3374 216.8872 c
b
311.5879 217.5532 m
312.2705 217.5532 312.8242 218.1069 312.8242 218.79 c
312.8242 219.4731 312.2705 220.0269 311.5879 220.0269 c
310.9048 220.0269 310.3511 219.4731 310.3511 218.79 c
310.3511 218.1069 310.9048 217.5532 311.5879 217.5532 c
b
311.1714 218.6362 m
311.854 218.6362 312.4082 219.1895 312.4082 219.873 c
312.4082 220.5557 311.854 221.1094 311.1714 221.1094 c
310.4883 221.1094 309.9346 220.5557 309.9346 219.873 c
309.9346 219.1895 310.4883 218.6362 311.1714 218.6362 c
b
309.5054 218.3027 m
310.1885 218.3027 310.7422 218.8569 310.7422 219.5396 c
310.7422 220.2227 310.1885 220.7764 309.5054 220.7764 c
308.8228 220.7764 308.2686 220.2227 308.2686 219.5396 c
308.2686 218.8569 308.8228 218.3027 309.5054 218.3027 c
b
310.1719 219.8018 m
310.855 219.8018 311.4087 220.356 311.4087 221.0386 c
311.4087 221.7217 310.855 222.2754 310.1719 222.2754 c
309.4888 222.2754 308.9351 221.7217 308.9351 221.0386 c
308.9351 220.356 309.4888 219.8018 310.1719 219.8018 c
b
308.6729 220.2891 m
309.3555 220.2891 309.9092 220.8428 309.9092 221.5259 c
309.9092 222.209 309.3555 222.7627 308.6729 222.7627 c
307.9897 222.7627 307.436 222.209 307.436 221.5259 c
307.436 220.8428 307.9897 220.2891 308.6729 220.2891 c
b
309.3389 221.3721 m
310.022 221.3721 310.5757 221.9258 310.5757 222.6084 c
310.5757 223.2915 310.022 223.8452 309.3389 223.8452 c
308.6563 223.8452 308.1025 223.2915 308.1025 222.6084 c
308.1025 221.9258 308.6563 221.3721 309.3389 221.3721 c
b
307.8398 221.3721 m
308.5229 221.3721 309.0767 221.9258 309.0767 222.6084 c
309.0767 223.2915 308.5229 223.8452 307.8398 223.8452 c
307.1567 223.8452 306.603 223.2915 306.603 222.6084 c
306.603 221.9258 307.1567 221.3721 307.8398 221.3721 c
b
308.5063 222.7046 m
309.1895 222.7046 309.7427 223.2583 309.7427 223.9409 c
309.7427 224.624 309.1895 225.1777 308.5063 225.1777 c
307.8232 225.1777 307.2695 224.624 307.2695 223.9409 c
307.2695 223.2583 307.8232 222.7046 308.5063 222.7046 c
b
306.8403 222.8711 m
307.5234 222.8711 308.0771 223.4248 308.0771 224.1079 c
308.0771 224.7905 307.5234 225.3447 306.8403 225.3447 c
306.1577 225.3447 305.6035 224.7905 305.6035 224.1079 c
305.6035 223.4248 306.1577 222.8711 306.8403 222.8711 c
b
307.9229 224.3701 m
308.6064 224.3701 309.1597 224.9238 309.1597 225.6069 c
309.1597 226.29 308.6064 226.8438 307.9229 226.8438 c
307.2402 226.8438 306.6865 226.29 306.6865 225.6069 c
306.6865 224.9238 307.2402 224.3701 307.9229 224.3701 c
b
305.4951 224.1201 m
306.1782 224.1201 306.7319 224.6738 306.7319 225.3569 c
306.7319 226.04 306.1782 226.5938 305.4951 226.5938 c
304.8125 226.5938 304.2588 226.04 304.2588 225.3569 c
304.2588 224.6738 304.8125 224.1201 305.4951 224.1201 c
b
306.2451 225.4531 m
306.9277 225.4531 307.4814 226.0063 307.4814 226.6895 c
307.4814 227.3726 306.9277 227.9263 306.2451 227.9263 c
305.562 227.9263 305.0083 227.3726 305.0083 226.6895 c
305.0083 226.0063 305.562 225.4531 306.2451 225.4531 c
b
305.6621 226.6187 m
306.3447 226.6187 306.8989 227.1729 306.8989 227.8555 c
306.8989 228.5386 306.3447 229.0923 305.6621 229.0923 c
304.979 229.0923 304.4253 228.5386 304.4253 227.8555 c
304.4253 227.1729 304.979 226.6187 305.6621 226.6187 c
b
304.1626 225.3696 m
304.8457 225.3696 305.3994 225.9233 305.3994 226.6064 c
305.3994 227.2891 304.8457 227.8428 304.1626 227.8428 c
303.48 227.8428 302.9263 227.2891 302.9263 226.6064 c
302.9263 225.9233 303.48 225.3696 304.1626 225.3696 c
b
305.1621 228.0347 m
305.8452 228.0347 306.3989 228.5884 306.3989 229.2715 c
306.3989 229.9541 305.8452 230.5083 305.1621 230.5083 c
304.479 230.5083 303.9253 229.9541 303.9253 229.2715 c
303.9253 228.5884 304.479 228.0347 305.1621 228.0347 c
b
303.4966 227.2017 m
304.1797 227.2017 304.7334 227.7554 304.7334 228.4385 c
304.7334 229.1216 304.1797 229.6753 303.4966 229.6753 c
302.8135 229.6753 302.2598 229.1216 302.2598 228.4385 c
302.2598 227.7554 302.8135 227.2017 303.4966 227.2017 c
b
303.9961 229.1172 m
304.6792 229.1172 305.2329 229.6709 305.2329 230.354 c
305.2329 231.0371 304.6792 231.5908 303.9961 231.5908 c
303.313 231.5908 302.7593 231.0371 302.7593 230.354 c
302.7593 229.6709 303.313 229.1172 303.9961 229.1172 c
b
302.1641 230.1167 m
302.8472 230.1167 303.4009 230.6704 303.4009 231.3535 c
303.4009 232.0366 302.8472 232.5903 302.1641 232.5903 c
301.481 232.5903 300.9272 232.0366 300.9272 231.3535 c
300.9272 230.6704 301.481 230.1167 302.1641 230.1167 c
b
303.3423 231.6992 m
304.0254 231.6992 304.5791 232.2529 304.5791 232.936 c
304.5791 233.6191 304.0254 234.1729 303.3423 234.1729 c
302.6597 234.1729 302.106 233.6191 302.106 232.936 c
302.106 232.2529 302.6597 231.6992 303.3423 231.6992 c
b
301.4268 232.5322 m
302.1099 232.5322 302.6636 233.0859 302.6636 233.7686 c
302.6636 234.4517 302.1099 235.0054 301.4268 235.0054 c
300.7441 235.0054 300.1904 234.4517 300.1904 233.7686 c
300.1904 233.0859 300.7441 232.5322 301.4268 232.5322 c
b
302.4263 234.2813 m
303.1094 234.2813 303.6631 234.835 303.6631 235.5176 c
303.6631 236.2007 303.1094 236.7544 302.4263 236.7544 c
301.7432 236.7544 301.1895 236.2007 301.1895 235.5176 c
301.1895 234.835 301.7432 234.2813 302.4263 234.2813 c
b
300.2607 234.1978 m
300.9438 234.1978 301.4976 234.7515 301.4976 235.4346 c
301.4976 236.1172 300.9438 236.6709 300.2607 236.6709 c
299.5781 236.6709 299.0244 236.1172 299.0244 235.4346 c
299.0244 234.7515 299.5781 234.1978 300.2607 234.1978 c
b
299.7612 235.8633 m
300.4443 235.8633 300.998 236.417 300.998 237.1001 c
300.998 237.7832 300.4443 238.3369 299.7612 238.3369 c
299.0781 238.3369 298.5244 237.7832 298.5244 237.1001 c
298.5244 236.417 299.0781 235.8633 299.7612 235.8633 c
b
299.6782 237.7788 m
300.3608 237.7788 300.9146 238.3325 300.9146 239.0156 c
300.9146 239.6987 300.3608 240.2524 299.6782 240.2524 c
298.9951 240.2524 298.4414 239.6987 298.4414 239.0156 c
298.4414 238.3325 298.9951 237.7788 299.6782 237.7788 c
b
298.7617 238.8618 m
299.4448 238.8618 299.9985 239.4155 299.9985 240.0986 c
299.9985 240.7813 299.4448 241.335 298.7617 241.335 c
298.0791 241.335 297.5249 240.7813 297.5249 240.0986 c
297.5249 239.4155 298.0791 238.8618 298.7617 238.8618 c
b
297.8457 240.0278 m
298.5288 240.0278 299.0825 240.5815 299.0825 241.2642 c
299.0825 241.9473 298.5288 242.501 297.8457 242.501 c
297.1626 242.501 296.6089 241.9473 296.6089 241.2642 c
296.6089 240.5815 297.1626 240.0278 297.8457 240.0278 c
b
297.1792 241.6934 m
297.8623 241.6934 298.416 242.2471 298.416 242.9302 c
298.416 243.6128 297.8623 244.167 297.1792 244.167 c
296.4966 244.167 295.9429 243.6128 295.9429 242.9302 c
295.9429 242.2471 296.4966 241.6934 297.1792 241.6934 c
b
296.8462 242.8594 m
297.5293 242.8594 298.083 243.4131 298.083 244.0962 c
298.083 244.7788 297.5293 245.3325 296.8462 245.3325 c
296.1631 245.3325 295.6094 244.7788 295.6094 244.0962 c
295.6094 243.4131 296.1631 242.8594 296.8462 242.8594 c
b
295.7637 244.6914 m
296.4468 244.6914 297.0005 245.2451 297.0005 245.9282 c
297.0005 246.6113 296.4468 247.165 295.7637 247.165 c
295.0806 247.165 294.5269 246.6113 294.5269 245.9282 c
294.5269 245.2451 295.0806 244.6914 295.7637 244.6914 c
b
295.5972 248.1895 m
296.2803 248.1895 296.8335 248.7432 296.8335 249.4263 c
296.8335 250.1094 296.2803 250.6631 295.5972 250.6631 c
294.9141 250.6631 294.3604 250.1094 294.3604 249.4263 c
294.3604 248.7432 294.9141 248.1895 295.5972 248.1895 c
b
294.1812 249.0225 m
294.8643 249.0225 295.418 249.5762 295.418 250.2593 c
295.418 250.9419 294.8643 251.4956 294.1812 251.4956 c
293.498 251.4956 292.9443 250.9419 292.9443 250.2593 c
292.9443 249.5762 293.498 249.0225 294.1812 249.0225 c
b
293.5146 250.5215 m
294.1982 250.5215 294.7515 251.0752 294.7515 251.7583 c
294.7515 252.4414 294.1982 252.9951 293.5146 252.9951 c
292.832 252.9951 292.2783 252.4414 292.2783 251.7583 c
292.2783 251.0752 292.832 250.5215 293.5146 250.5215 c
b
292.5986 251.854 m
293.2817 251.854 293.8354 252.4077 293.8354 253.0908 c
293.8354 253.7739 293.2817 254.3271 292.5986 254.3271 c
291.916 254.3271 291.3623 253.7739 291.3623 253.0908 c
291.3623 252.4077 291.916 251.854 292.5986 251.854 c
b
293.7646 253.853 m
294.4478 253.853 295.0015 254.4067 295.0015 255.0894 c
295.0015 255.7725 294.4478 256.3262 293.7646 256.3262 c
293.082 256.3262 292.5283 255.7725 292.5283 255.0894 c
292.5283 254.4067 293.082 253.853 293.7646 253.853 c
b
292.1826 253.603 m
292.8652 253.603 293.4189 254.1567 293.4189 254.8398 c
293.4189 255.5225 292.8652 256.0762 292.1826 256.0762 c
291.4995 256.0762 290.9458 255.5225 290.9458 254.8398 c
290.9458 254.1567 291.4995 253.603 292.1826 253.603 c
b
291.9326 255.2686 m
292.6157 255.2686 293.1689 255.8223 293.1689 256.5054 c
293.1689 257.1885 292.6157 257.7422 291.9326 257.7422 c
291.2495 257.7422 290.6958 257.1885 290.6958 256.5054 c
290.6958 255.8223 291.2495 255.2686 291.9326 255.2686 c
b
292.2656 257.1011 m
292.9487 257.1011 293.5024 257.6548 293.5024 258.3379 c
293.5024 259.0205 292.9487 259.5742 292.2656 259.5742 c
291.5825 259.5742 291.0288 259.0205 291.0288 258.3379 c
291.0288 257.6548 291.5825 257.1011 292.2656 257.1011 c
b
290.6958 256.5054 m
291.3789 256.5054 291.9326 257.0591 291.9326 257.7422 c
291.9326 258.4253 291.3789 258.979 290.6958 258.979 c
290.0127 258.979 289.459 258.4253 289.459 257.7422 c
289.459 257.0591 290.0127 256.5054 290.6958 256.5054 c
b
289.7798 258.4336 m
290.4629 258.4336 291.0166 258.9873 291.0166 259.6704 c
291.0166 260.353 290.4629 260.9067 289.7798 260.9067 c
289.0967 260.9067 288.543 260.353 288.543 259.6704 c
288.543 258.9873 289.0967 258.4336 289.7798 258.4336 c
b
288.543 259.6704 m
289.2261 259.6704 289.7798 260.2241 289.7798 260.9067 c
289.7798 261.5898 289.2261 262.1436 288.543 262.1436 c
287.8599 262.1436 287.3062 261.5898 287.3062 260.9067 c
287.3062 260.2241 287.8599 259.6704 288.543 259.6704 c
b
289.5298 261.6816 m
290.2129 261.6816 290.7666 262.2354 290.7666 262.9185 c
290.7666 263.6011 290.2129 264.1553 289.5298 264.1553 c
288.8467 264.1553 288.293 263.6011 288.293 262.9185 c
288.293 262.2354 288.8467 261.6816 289.5298 261.6816 c
b
288.4473 263.0977 m
289.1299 263.0977 289.6841 263.6509 289.6841 264.334 c
289.6841 265.0171 289.1299 265.5708 288.4473 265.5708 c
287.7642 265.5708 287.2104 265.0171 287.2104 264.334 c
287.2104 263.6509 287.7642 263.0977 288.4473 263.0977 c
b
287.8643 263.7637 m
288.5474 263.7637 289.1006 264.3174 289.1006 265.0005 c
289.1006 265.6836 288.5474 266.2373 287.8643 266.2373 c
287.1812 266.2373 286.6274 265.6836 286.6274 265.0005 c
286.6274 264.3174 287.1812 263.7637 287.8643 263.7637 c
b
287.9473 265.5127 m
288.6304 265.5127 289.1841 266.0664 289.1841 266.7495 c
289.1841 267.4326 288.6304 267.9863 287.9473 267.9863 c
287.2646 267.9863 286.7109 267.4326 286.7109 266.7495 c
286.7109 266.0664 287.2646 265.5127 287.9473 265.5127 c
b
287.2104 263.0977 m
287.8936 263.0977 288.4473 263.6509 288.4473 264.334 c
288.4473 265.0171 287.8936 265.5708 287.2104 265.5708 c
286.5273 265.5708 285.9736 265.0171 285.9736 264.334 c
285.9736 263.6509 286.5273 263.0977 287.2104 263.0977 c
b
287.3062 260.9067 m
287.9893 260.9067 288.543 261.4604 288.543 262.1436 c
288.543 262.8267 287.9893 263.3804 287.3062 263.3804 c
286.623 263.3804 286.0693 262.8267 286.0693 262.1436 c
286.0693 261.4604 286.623 260.9067 287.3062 260.9067 c
b
287.5313 259.7661 m
288.2139 259.7661 288.7676 260.3198 288.7676 261.0029 c
288.7676 261.6855 288.2139 262.2393 287.5313 262.2393 c
286.8481 262.2393 286.2944 261.6855 286.2944 261.0029 c
286.2944 260.3198 286.8481 259.7661 287.5313 259.7661 c
b
287.6724 258.1836 m
288.3555 258.1836 288.9092 258.7373 288.9092 259.4204 c
288.9092 260.1035 288.3555 260.6572 287.6724 260.6572 c
286.9893 260.6572 286.4355 260.1035 286.4355 259.4204 c
286.4355 258.7373 286.9893 258.1836 287.6724 258.1836 c
b
288.0059 256.3516 m
288.6885 256.3516 289.2422 256.9053 289.2422 257.5879 c
289.2422 258.271 288.6885 258.8247 288.0059 258.8247 c
287.3223 258.8247 286.769 258.271 286.769 257.5879 c
286.769 256.9053 287.3223 256.3516 288.0059 256.3516 c
b
286.9229 254.6025 m
287.606 254.6025 288.1597 255.1563 288.1597 255.8389 c
288.1597 256.522 287.606 257.0757 286.9229 257.0757 c
286.2397 257.0757 285.686 256.522 285.686 255.8389 c
285.686 255.1563 286.2397 254.6025 286.9229 254.6025 c
b
287.3394 251.9375 m
288.0225 251.9375 288.5762 252.4912 288.5762 253.1743 c
288.5762 253.8569 288.0225 254.4106 287.3394 254.4106 c
286.6563 254.4106 286.1025 253.8569 286.1025 253.1743 c
286.1025 252.4912 286.6563 251.9375 287.3394 251.9375 c
b
286.5898 250.355 m
287.2729 250.355 287.8267 250.9087 287.8267 251.5918 c
287.8267 252.2744 287.2729 252.8281 286.5898 252.8281 c
285.9067 252.8281 285.353 252.2744 285.353 251.5918 c
285.353 250.9087 285.9067 250.355 286.5898 250.355 c
b
287.2559 248.689 m
287.939 248.689 288.4927 249.2427 288.4927 249.9258 c
288.4927 250.6089 287.939 251.1626 287.2559 251.1626 c
286.5732 251.1626 286.0195 250.6089 286.0195 249.9258 c
286.0195 249.2427 286.5732 248.689 287.2559 248.689 c
b
286.0068 253.27 m
286.6899 253.27 287.2437 253.8237 287.2437 254.5068 c
287.2437 255.1895 286.6899 255.7432 286.0068 255.7432 c
285.3237 255.7432 284.77 255.1895 284.77 254.5068 c
284.77 253.8237 285.3237 253.27 286.0068 253.27 c
b
286.3398 256.4346 m
287.0229 256.4346 287.5767 256.9883 287.5767 257.6714 c
287.5767 258.3545 287.0229 258.9082 286.3398 258.9082 c
285.6567 258.9082 285.103 258.3545 285.103 257.6714 c
285.103 256.9883 285.6567 256.4346 286.3398 256.4346 c
b
284.6035 255.1021 m
285.2866 255.1021 285.8403 255.6558 285.8403 256.3389 c
285.8403 257.022 285.2866 257.5757 284.6035 257.5757 c
283.9204 257.5757 283.3667 257.022 283.3667 256.3389 c
283.3667 255.6558 283.9204 255.1021 284.6035 255.1021 c
b
284.77 257.2676 m
285.4531 257.2676 286.0068 257.8213 286.0068 258.5044 c
286.0068 259.1875 285.4531 259.7407 284.77 259.7407 c
284.0869 259.7407 283.5332 259.1875 283.5332 258.5044 c
283.5332 257.8213 284.0869 257.2676 284.77 257.2676 c
b
283.4375 257.9336 m
284.1206 257.9336 284.6743 258.4873 284.6743 259.1704 c
284.6743 259.8535 284.1206 260.4072 283.4375 260.4072 c
282.7544 260.4072 282.2007 259.8535 282.2007 259.1704 c
282.2007 258.4873 282.7544 257.9336 283.4375 257.9336 c
b
284.104 259.5161 m
284.7866 259.5161 285.3403 260.0698 285.3403 260.7529 c
285.3403 261.436 284.7866 261.9897 284.104 261.9897 c
283.4209 261.9897 282.8672 261.436 282.8672 260.7529 c
282.8672 260.0698 283.4209 259.5161 284.104 259.5161 c
b
282.6045 260.0161 m
283.2876 260.0161 283.8413 260.5698 283.8413 261.2529 c
283.8413 261.9355 283.2876 262.4893 282.6045 262.4893 c
281.9214 262.4893 281.3682 261.9355 281.3682 261.2529 c
281.3682 260.5698 281.9214 260.0161 282.6045 260.0161 c
b
283.6875 261.0986 m
284.3701 261.0986 284.9243 261.6523 284.9243 262.3354 c
284.9243 263.0186 284.3701 263.5723 283.6875 263.5723 c
283.0044 263.5723 282.4507 263.0186 282.4507 262.3354 c
282.4507 261.6523 283.0044 261.0986 283.6875 261.0986 c
b
282.688 262.4312 m
283.3711 262.4312 283.9248 262.9849 283.9248 263.668 c
283.9248 264.3511 283.3711 264.9048 282.688 264.9048 c
282.0049 264.9048 281.4512 264.3511 281.4512 263.668 c
281.4512 262.9849 282.0049 262.4312 282.688 262.4312 c
b
282.688 264.5132 m
283.3711 264.5132 283.9248 265.0669 283.9248 265.75 c
283.9248 266.4331 283.3711 266.9868 282.688 266.9868 c
282.0049 266.9868 281.4512 266.4331 281.4512 265.75 c
281.4512 265.0669 282.0049 264.5132 282.688 264.5132 c
b
281.6885 266.7622 m
282.3716 266.7622 282.9253 267.3154 282.9253 267.9985 c
282.9253 268.6816 282.3716 269.2354 281.6885 269.2354 c
281.0054 269.2354 280.4517 268.6816 280.4517 267.9985 c
280.4517 267.3154 281.0054 266.7622 281.6885 266.7622 c
b
280.606 268.6777 m
281.2886 268.6777 281.8428 269.2314 281.8428 269.9141 c
281.8428 270.5972 281.2886 271.1509 280.606 271.1509 c
279.9229 271.1509 279.3691 270.5972 279.3691 269.9141 c
279.3691 269.2314 279.9229 268.6777 280.606 268.6777 c
b
279.7729 270.4268 m
280.4561 270.4268 281.0098 270.98 281.0098 271.6631 c
281.0098 272.3462 280.4561 272.8999 279.7729 272.8999 c
279.0898 272.8999 278.5361 272.3462 278.5361 271.6631 c
278.5361 270.98 279.0898 270.4268 279.7729 270.4268 c
b
278.9404 272.4253 m
279.623 272.4253 280.1768 272.979 280.1768 273.6621 c
280.1768 274.3452 279.623 274.8989 278.9404 274.8989 c
278.2573 274.8989 277.7036 274.3452 277.7036 273.6621 c
277.7036 272.979 278.2573 272.4253 278.9404 272.4253 c
b
278.3569 274.0078 m
279.04 274.0078 279.5938 274.5615 279.5938 275.2441 c
279.5938 275.9272 279.04 276.4814 278.3569 276.4814 c
277.6743 276.4814 277.1206 275.9272 277.1206 275.2441 c
277.1206 274.5615 277.6743 274.0078 278.3569 274.0078 c
b
277.6074 275.5898 m
278.2905 275.5898 278.8442 276.144 278.8442 276.8267 c
278.8442 277.5098 278.2905 278.0635 277.6074 278.0635 c
276.9243 278.0635 276.3711 277.5098 276.3711 276.8267 c
276.3711 276.144 276.9243 275.5898 277.6074 275.5898 c
b
277.0244 277.0894 m
277.7075 277.0894 278.2612 277.6431 278.2612 278.3257 c
278.2612 279.0088 277.7075 279.5625 277.0244 279.5625 c
276.3418 279.5625 275.7881 279.0088 275.7881 278.3257 c
275.7881 277.6431 276.3418 277.0894 277.0244 277.0894 c
b
277.6074 279.0049 m
278.2905 279.0049 278.8442 279.5586 278.8442 280.2417 c
278.8442 280.9243 278.2905 281.478 277.6074 281.478 c
276.9243 281.478 276.3711 280.9243 276.3711 280.2417 c
276.3711 279.5586 276.9243 279.0049 277.6074 279.0049 c
b
275.9419 278.9214 m
276.625 278.9214 277.1787 279.4751 277.1787 280.1582 c
277.1787 280.8413 276.625 281.395 275.9419 281.395 c
275.2588 281.395 274.7051 280.8413 274.7051 280.1582 c
274.7051 279.4751 275.2588 278.9214 275.9419 278.9214 c
b
276.6914 280.8369 m
277.3745 280.8369 277.9282 281.3906 277.9282 282.0737 c
277.9282 282.7568 277.3745 283.3105 276.6914 283.3105 c
276.0083 283.3105 275.4546 282.7568 275.4546 282.0737 c
275.4546 281.3906 276.0083 280.8369 276.6914 280.8369 c
b
275.6919 282.7524 m
276.375 282.7524 276.9287 283.3062 276.9287 283.9893 c
276.9287 284.6724 276.375 285.2261 275.6919 285.2261 c
275.0093 285.2261 274.4551 284.6724 274.4551 283.9893 c
274.4551 283.3062 275.0093 282.7524 275.6919 282.7524 c
b
275.2754 284.4307 m
275.9585 284.4307 276.5122 284.9844 276.5122 285.6675 c
276.5122 286.3506 275.9585 286.9043 275.2754 286.9043 c
274.5928 286.9043 274.0391 286.3506 274.0391 285.6675 c
274.0391 284.9844 274.5928 284.4307 275.2754 284.4307 c
b
273.9434 285.5137 m
274.626 285.5137 275.1797 286.0674 275.1797 286.7505 c
275.1797 287.4331 274.626 287.9868 273.9434 287.9868 c
273.2598 287.9868 272.7065 287.4331 272.7065 286.7505 c
272.7065 286.0674 273.2598 285.5137 273.9434 285.5137 c
b
273.6099 286.9292 m
274.293 286.9292 274.8467 287.4829 274.8467 288.166 c
274.8467 288.8491 274.293 289.4028 273.6099 289.4028 c
272.9268 289.4028 272.373 288.8491 272.373 288.166 c
272.373 287.4829 272.9268 286.9292 273.6099 286.9292 c
b
272.8604 287.8457 m
273.5435 287.8457 274.0972 288.3994 274.0972 289.082 c
274.0972 289.7651 273.5435 290.3188 272.8604 290.3188 c
272.1772 290.3188 271.6235 289.7651 271.6235 289.082 c
271.6235 288.3994 272.1772 287.8457 272.8604 287.8457 c
b
272.1943 289.6777 m
272.877 289.6777 273.4307 290.2314 273.4307 290.9146 c
273.4307 291.5977 272.877 292.1514 272.1943 292.1514 c
271.5112 292.1514 270.9575 291.5977 270.9575 290.9146 c
270.9575 290.2314 271.5112 289.6777 272.1943 289.6777 c
b
271.6113 290.6772 m
272.2939 290.6772 272.8477 291.231 272.8477 291.9141 c
272.8477 292.5967 272.2939 293.1504 271.6113 293.1504 c
270.9282 293.1504 270.3745 292.5967 270.3745 291.9141 c
270.3745 291.231 270.9282 290.6772 271.6113 290.6772 c
b
270.7783 291.6768 m
271.4614 291.6768 272.0151 292.2305 272.0151 292.9131 c
272.0151 293.5962 271.4614 294.1499 270.7783 294.1499 c
270.0952 294.1499 269.5415 293.5962 269.5415 292.9131 c
269.5415 292.2305 270.0952 291.6768 270.7783 291.6768 c
b
270.4453 293.2466 m
271.1279 293.2466 271.6816 293.8003 271.6816 294.4834 c
271.6816 295.166 271.1279 295.7197 270.4453 295.7197 c
269.7622 295.7197 269.2085 295.166 269.2085 294.4834 c
269.2085 293.8003 269.7622 293.2466 270.4453 293.2466 c
b
269.7788 295.4121 m
270.4619 295.4121 271.0156 295.9653 271.0156 296.6484 c
271.0156 297.3315 270.4619 297.8853 269.7788 297.8853 c
269.0957 297.8853 268.542 297.3315 268.542 296.6484 c
268.542 295.9653 269.0957 295.4121 269.7788 295.4121 c
b
268.9585 297.3271 m
269.6416 297.3271 270.1953 297.8809 270.1953 298.564 c
270.1953 299.2471 269.6416 299.8008 268.9585 299.8008 c
268.2754 299.8008 267.7217 299.2471 267.7217 298.564 c
267.7217 297.8809 268.2754 297.3271 268.9585 297.3271 c
b
268.1255 295.8281 m
268.8086 295.8281 269.3623 296.3818 269.3623 297.0649 c
269.3623 297.748 268.8086 298.3018 268.1255 298.3018 c
267.4429 298.3018 266.8892 297.748 266.8892 297.0649 c
266.8892 296.3818 267.4429 295.8281 268.1255 295.8281 c
b
266.377 296.7441 m
267.0596 296.7441 267.6133 297.2979 267.6133 297.981 c
267.6133 298.6641 267.0596 299.2178 266.377 299.2178 c
265.6938 299.2178 265.1401 298.6641 265.1401 297.981 c
265.1401 297.2979 265.6938 296.7441 266.377 296.7441 c
b
267.543 294.4956 m
268.2256 294.4956 268.7793 295.0493 268.7793 295.7324 c
268.7793 296.4155 268.2256 296.9692 267.543 296.9692 c
266.8599 296.9692 266.3062 296.4155 266.3062 295.7324 c
266.3062 295.0493 266.8599 294.4956 267.543 294.4956 c
b
266.2935 289.4985 m
266.9766 289.4985 267.5303 290.0522 267.5303 290.7354 c
267.5303 291.4185 266.9766 291.9722 266.2935 291.9722 c
265.6104 291.9722 265.0566 291.4185 265.0566 290.7354 c
265.0566 290.0522 265.6104 289.4985 266.2935 289.4985 c
b
265.877 291.2476 m
266.5601 291.2476 267.1138 291.8013 267.1138 292.4844 c
267.1138 293.1675 266.5601 293.7212 265.877 293.7212 c
265.1938 293.7212 264.6401 293.1675 264.6401 292.4844 c
264.6401 291.8013 265.1938 291.2476 265.877 291.2476 c
b
265.2939 293.2466 m
265.9771 293.2466 266.5308 293.8003 266.5308 294.4834 c
266.5308 295.166 265.9771 295.7197 265.2939 295.7197 c
264.6113 295.7197 264.0571 295.166 264.0571 294.4834 c
264.0571 293.8003 264.6113 293.2466 265.2939 293.2466 c
b
265.1274 295.0786 m
265.8105 295.0786 266.3643 295.6323 266.3643 296.3154 c
266.3643 296.9985 265.8105 297.5522 265.1274 297.5522 c
264.4443 297.5522 263.8906 296.9985 263.8906 296.3154 c
263.8906 295.6323 264.4443 295.0786 265.1274 295.0786 c
b
264.0449 294.7456 m
264.728 294.7456 265.2813 295.2993 265.2813 295.9824 c
265.2813 296.6655 264.728 297.2188 264.0449 297.2188 c
263.3618 297.2188 262.8081 296.6655 262.8081 295.9824 c
262.8081 295.2993 263.3618 294.7456 264.0449 294.7456 c
b
264.1279 296.2446 m
264.811 296.2446 265.3647 296.7983 265.3647 297.4814 c
265.3647 298.1646 264.811 298.7183 264.1279 298.7183 c
263.4448 298.7183 262.8916 298.1646 262.8916 297.4814 c
262.8916 296.7983 263.4448 296.2446 264.1279 296.2446 c
b
263.3657 297.6729 m
264.0488 297.6729 264.6025 298.2266 264.6025 298.9097 c
264.6025 299.5928 264.0488 300.1465 263.3657 300.1465 c
262.6831 300.1465 262.1294 299.5928 262.1294 298.9097 c
262.1294 298.2266 262.6831 297.6729 263.3657 297.6729 c
b
262.7832 299.1724 m
263.4658 299.1724 264.0195 299.7261 264.0195 300.4087 c
264.0195 301.0918 263.4658 301.6455 262.7832 301.6455 c
262.1001 301.6455 261.5464 301.0918 261.5464 300.4087 c
261.5464 299.7261 262.1001 299.1724 262.7832 299.1724 c
b
262.4497 300.5049 m
263.1328 300.5049 263.6865 301.0586 263.6865 301.7412 c
263.6865 302.4243 263.1328 302.978 262.4497 302.978 c
261.7666 302.978 261.2129 302.4243 261.2129 301.7412 c
261.2129 301.0586 261.7666 300.5049 262.4497 300.5049 c
b
261.7002 302.5869 m
262.3833 302.5869 262.937 303.1406 262.937 303.8232 c
262.937 304.5068 262.3833 305.0605 261.7002 305.0605 c
261.0171 305.0605 260.4634 304.5068 260.4634 303.8232 c
260.4634 303.1406 261.0171 302.5869 261.7002 302.5869 c
b
261.2837 303.9194 m
261.9668 303.9194 262.5205 304.4731 262.5205 305.1563 c
262.5205 305.8389 261.9668 306.3926 261.2837 306.3926 c
260.6006 306.3926 260.0469 305.8389 260.0469 305.1563 c
260.0469 304.4731 260.6006 303.9194 261.2837 303.9194 c
b
260.9507 305.252 m
261.6338 305.252 262.1875 305.8057 262.1875 306.4888 c
262.1875 307.1719 261.6338 307.7256 260.9507 307.7256 c
260.2676 307.7256 259.7139 307.1719 259.7139 306.4888 c
259.7139 305.8057 260.2676 305.252 260.9507 305.252 c
b
260.2012 306.5015 m
260.8843 306.5015 261.438 307.0552 261.438 307.7378 c
261.438 308.4209 260.8843 308.9746 260.2012 308.9746 c
259.5181 308.9746 258.9644 308.4209 258.9644 307.7378 c
258.9644 307.0552 259.5181 306.5015 260.2012 306.5015 c
b
259.1187 308.25 m
259.8013 308.25 260.355 308.8037 260.355 309.4868 c
260.355 310.1699 259.8013 310.7236 259.1187 310.7236 c
258.4355 310.7236 257.8818 310.1699 257.8818 309.4868 c
257.8818 308.8037 258.4355 308.25 259.1187 308.25 c
b
258.0356 311.2485 m
258.7188 311.2485 259.2725 311.8022 259.2725 312.4854 c
259.2725 313.168 258.7188 313.7217 258.0356 313.7217 c
257.3525 313.7217 256.7993 313.168 256.7993 312.4854 c
256.7993 311.8022 257.3525 311.2485 258.0356 311.2485 c
b
257.2031 313.6636 m
257.8857 313.6636 258.4395 314.2173 258.4395 314.9004 c
258.4395 315.5835 257.8857 316.1372 257.2031 316.1372 c
256.52 316.1372 255.9663 315.5835 255.9663 314.9004 c
255.9663 314.2173 256.52 313.6636 257.2031 313.6636 c
b
256.1201 315.9126 m
256.8032 315.9126 257.3569 316.4663 257.3569 317.1494 c
257.3569 317.832 256.8032 318.3857 256.1201 318.3857 c
255.437 318.3857 254.8833 317.832 254.8833 317.1494 c
254.8833 316.4663 255.437 315.9126 256.1201 315.9126 c
b
254.9541 318.7441 m
255.6372 318.7441 256.1909 319.2979 256.1909 319.981 c
256.1909 320.6636 255.6372 321.2173 254.9541 321.2173 c
254.271 321.2173 253.7173 320.6636 253.7173 319.981 c
253.7173 319.2979 254.271 318.7441 254.9541 318.7441 c
b
253.7881 320.7427 m
254.4712 320.7427 255.0249 321.2964 255.0249 321.9795 c
255.0249 322.6626 254.4712 323.2163 253.7881 323.2163 c
253.105 323.2163 252.5513 322.6626 252.5513 321.9795 c
252.5513 321.2964 253.105 320.7427 253.7881 320.7427 c
b
253.0386 322.5752 m
253.7217 322.5752 254.2754 323.1289 254.2754 323.812 c
254.2754 324.4951 253.7217 325.0483 253.0386 325.0483 c
252.3555 325.0483 251.8018 324.4951 251.8018 323.812 c
251.8018 323.1289 252.3555 322.5752 253.0386 322.5752 c
b
252.2891 323.4082 m
252.9722 323.4082 253.5259 323.9619 253.5259 324.6445 c
253.5259 325.3276 252.9722 325.8813 252.2891 325.8813 c
251.606 325.8813 251.0522 325.3276 251.0522 324.6445 c
251.0522 323.9619 251.606 323.4082 252.2891 323.4082 c
b
251.5396 325.2402 m
252.2227 325.2402 252.7764 325.7939 252.7764 326.4771 c
252.7764 327.1602 252.2227 327.7139 251.5396 327.7139 c
250.8564 327.7139 250.3027 327.1602 250.3027 326.4771 c
250.3027 325.7939 250.8564 325.2402 251.5396 325.2402 c
b
251.04 326.4893 m
251.7227 326.4893 252.2764 327.0435 252.2764 327.7261 c
252.2764 328.4092 251.7227 328.9629 251.04 328.9629 c
250.3569 328.9629 249.8032 328.4092 249.8032 327.7261 c
249.8032 327.0435 250.3569 326.4893 251.04 326.4893 c
b
249.957 327.9053 m
250.6401 327.9053 251.1938 328.459 251.1938 329.1421 c
251.1938 329.8252 250.6401 330.3789 249.957 330.3789 c
249.2739 330.3789 248.7202 329.8252 248.7202 329.1421 c
248.7202 328.459 249.2739 327.9053 249.957 327.9053 c
b
249.2075 324.5737 m
249.8906 324.5737 250.4443 325.1279 250.4443 325.8105 c
250.4443 326.4937 249.8906 327.0474 249.2075 327.0474 c
248.5244 327.0474 247.9707 326.4937 247.9707 325.8105 c
247.9707 325.1279 248.5244 324.5737 249.2075 324.5737 c
b
248.9575 315.9126 m
249.6406 315.9126 250.1943 316.4663 250.1943 317.1494 c
250.1943 317.832 249.6406 318.3857 248.9575 318.3857 c
248.2749 318.3857 247.7212 317.832 247.7212 317.1494 c
247.7212 316.4663 248.2749 315.9126 248.9575 315.9126 c
b
247.7915 317.9111 m
248.4746 317.9111 249.0283 318.4648 249.0283 319.1479 c
249.0283 319.8311 248.4746 320.3848 247.7915 320.3848 c
247.1089 320.3848 246.5552 319.8311 246.5552 319.1479 c
246.5552 318.4648 247.1089 317.9111 247.7915 317.9111 c
b
246.7925 320.6597 m
247.4751 320.6597 248.0293 321.2134 248.0293 321.8965 c
248.0293 322.5791 247.4751 323.1333 246.7925 323.1333 c
246.1094 323.1333 245.5557 322.5791 245.5557 321.8965 c
245.5557 321.2134 246.1094 320.6597 246.7925 320.6597 c
b
245.0435 324.6572 m
245.7266 324.6572 246.2798 325.2109 246.2798 325.894 c
246.2798 326.5771 245.7266 327.1309 245.0435 327.1309 c
244.3604 327.1309 243.8066 326.5771 243.8066 325.894 c
243.8066 325.2109 244.3604 324.6572 245.0435 324.6572 c
b
243.0444 328.1553 m
243.7275 328.1553 244.2813 328.709 244.2813 329.3921 c
244.2813 330.0747 243.7275 330.6284 243.0444 330.6284 c
242.3613 330.6284 241.8076 330.0747 241.8076 329.3921 c
241.8076 328.709 242.3613 328.1553 243.0444 328.1553 c
b
243.7109 331.4868 m
244.3936 331.4868 244.9473 332.0405 244.9473 332.7231 c
244.9473 333.4063 244.3936 333.96 243.7109 333.96 c
243.0278 333.96 242.4741 333.4063 242.4741 332.7231 c
242.4741 332.0405 243.0278 331.4868 243.7109 331.4868 c
b
241.1289 332.2363 m
241.812 332.2363 242.3657 332.79 242.3657 333.4727 c
242.3657 334.1558 241.812 334.7095 241.1289 334.7095 c
240.4458 334.7095 239.8921 334.1558 239.8921 333.4727 c
239.8921 332.79 240.4458 332.2363 241.1289 332.2363 c
b
241.7119 336.7334 m
242.395 336.7334 242.9487 337.2871 242.9487 337.9702 c
242.9487 338.6533 242.395 339.207 241.7119 339.207 c
241.0288 339.207 240.4751 338.6533 240.4751 337.9702 c
240.4751 337.2871 241.0288 336.7334 241.7119 336.7334 c
b
238.3804 343.1338 m
239.0635 343.1338 239.6172 343.6875 239.6172 344.3706 c
239.6172 345.0537 239.0635 345.6074 238.3804 345.6074 c
237.6978 345.6074 237.144 345.0537 237.144 344.3706 c
237.144 343.6875 237.6978 343.1338 238.3804 343.1338 c
b
236.5483 345.5493 m
237.2314 345.5493 237.7852 346.103 237.7852 346.7856 c
237.7852 347.4688 237.2314 348.0225 236.5483 348.0225 c
235.8652 348.0225 235.3115 347.4688 235.3115 346.7856 c
235.3115 346.103 235.8652 345.5493 236.5483 345.5493 c
b
234.9658 347.7979 m
235.6489 347.7979 236.2026 348.3516 236.2026 349.0347 c
236.2026 349.7173 235.6489 350.2715 234.9658 350.2715 c
234.2827 350.2715 233.729 349.7173 233.729 349.0347 c
233.729 348.3516 234.2827 347.7979 234.9658 347.7979 c
b
232.4673 349.8799 m
233.1504 349.8799 233.7041 350.4336 233.7041 351.1167 c
233.7041 351.7998 233.1504 352.3535 232.4673 352.3535 c
231.7842 352.3535 231.2305 351.7998 231.2305 351.1167 c
231.2305 350.4336 231.7842 349.8799 232.4673 349.8799 c
b
229.4692 349.8799 m
230.1523 349.8799 230.7061 350.4336 230.7061 351.1167 c
230.7061 351.7998 230.1523 352.3535 229.4692 352.3535 c
228.7861 352.3535 228.2324 351.7998 228.2324 351.1167 c
228.2324 350.4336 228.7861 349.8799 229.4692 349.8799 c
b
225.0552 345.8823 m
225.7378 345.8823 226.292 346.436 226.292 347.1191 c
226.292 347.8018 225.7378 348.3555 225.0552 348.3555 c
224.3721 348.3555 223.8184 347.8018 223.8184 347.1191 c
223.8184 346.436 224.3721 345.8823 225.0552 345.8823 c
b
225.1382 348.4639 m
225.8213 348.4639 226.375 349.0176 226.375 349.7007 c
226.375 350.3838 225.8213 350.9375 225.1382 350.9375 c
224.4556 350.9375 223.9014 350.3838 223.9014 349.7007 c
223.9014 349.0176 224.4556 348.4639 225.1382 348.4639 c
b
221.3071 340.2188 m
221.9902 340.2188 222.5439 340.7725 222.5439 341.4556 c
222.5439 342.1387 221.9902 342.6924 221.3071 342.6924 c
220.624 342.6924 220.0708 342.1387 220.0708 341.4556 c
220.0708 340.7725 220.624 340.2188 221.3071 340.2188 c
b
220.1411 339.2197 m
220.8242 339.2197 221.3779 339.7734 221.3779 340.4561 c
221.3779 341.1392 220.8242 341.6929 220.1411 341.6929 c
219.4585 341.6929 218.9043 341.1392 218.9043 340.4561 c
218.9043 339.7734 219.4585 339.2197 220.1411 339.2197 c
b
221.5571 337.4707 m
222.2402 337.4707 222.7939 338.0244 222.7939 338.707 c
222.7939 339.3901 222.2402 339.9438 221.5571 339.9438 c
220.874 339.9438 220.3203 339.3901 220.3203 338.707 c
220.3203 338.0244 220.874 337.4707 221.5571 337.4707 c
b
218.8086 342.9673 m
219.4917 342.9673 220.0454 343.521 220.0454 344.2041 c
220.0454 344.8872 219.4917 345.4409 218.8086 345.4409 c
218.1255 345.4409 217.5718 344.8872 217.5718 344.2041 c
217.5718 343.521 218.1255 342.9673 218.8086 342.9673 c
b
217.1431 346.8818 m
217.8262 346.8818 218.3799 347.4355 218.3799 348.1182 c
218.3799 348.8013 217.8262 349.355 217.1431 349.355 c
216.46 349.355 215.9063 348.8013 215.9063 348.1182 c
215.9063 347.4355 216.46 346.8818 217.1431 346.8818 c
b
214.145 358.2085 m
214.8276 358.2085 215.3813 358.7622 215.3813 359.4453 c
215.3813 360.1279 214.8276 360.6816 214.145 360.6816 c
213.4619 360.6816 212.9082 360.1279 212.9082 359.4453 c
212.9082 358.7622 213.4619 358.2085 214.145 358.2085 c
b
209.6475 364.5508 m
210.3306 364.5508 210.8843 365.104 210.8843 365.7871 c
210.8843 366.4702 210.3306 367.0239 209.6475 367.0239 c
208.9644 367.0239 208.4106 366.4702 208.4106 365.7871 c
208.4106 365.104 208.9644 364.5508 209.6475 364.5508 c
b
206.8159 366.2993 m
207.499 366.2993 208.0522 366.8535 208.0522 367.5361 c
208.0522 368.2192 207.499 368.7729 206.8159 368.7729 c
206.1328 368.7729 205.5791 368.2192 205.5791 367.5361 c
205.5791 366.8535 206.1328 366.2993 206.8159 366.2993 c
b
211.313 362.9556 m
211.9961 362.9556 212.5498 363.5093 212.5498 364.1924 c
212.5498 364.8755 211.9961 365.4292 211.313 365.4292 c
210.6299 365.4292 210.0762 364.8755 210.0762 364.1924 c
210.0762 363.5093 210.6299 362.9556 211.313 362.9556 c
b
214.5625 341.0986 m
214.5562 353.3984 L
213.375 353.3296 L
213.1968 341.9893 L
214.5625 341.0986 L
f
0 R
0 G
215.7271 352.5449 m
216.4102 352.5449 216.9639 353.0986 216.9639 353.7817 c
216.9639 354.4648 216.4102 355.0186 215.7271 355.0186 c
215.0444 355.0186 214.4907 354.4648 214.4907 353.7817 c
214.4907 353.0986 215.0444 352.5449 215.7271 352.5449 c
b
u
0 Ap
197.0269 355.2026 m
189.1982 355.2026 L
S
U
197.0269 330.5923 m
189.1982 330.5923 L
S
197.0269 305.9814 m
189.1982 305.9814 L
S
197.0269 281.3711 m
189.1982 281.3711 L
S
197.0269 256.7607 m
189.1982 256.7607 L
S
197.0269 232.1499 m
189.1982 232.1499 L
S
197.0269 207.5391 m
189.1982 207.5391 L
S
197.0269 182.9287 m
189.1982 182.9287 L
S
u
197.0269 158.3179 m
189.1982 158.3179 L
S
U
u
436.2021 355.2026 m
428.3735 355.2026 L
S
U
436.2021 330.5923 m
428.3735 330.5923 L
S
436.2021 305.9814 m
428.3735 305.9814 L
S
436.2021 281.3711 m
428.3735 281.3711 L
S
436.2021 256.7607 m
428.3735 256.7607 L
S
436.2021 232.1499 m
428.3735 232.1499 L
S
436.2021 207.5391 m
428.3735 207.5391 L
S
436.2021 182.9287 m
428.3735 182.9287 L
S
u
436.2021 158.3179 m
428.3735 158.3179 L
S
U
0 To
1 0 0 1 313.1377 110.1221 0 Tp
0 Tv
TP
-29.8584 0 Td
0 Tr
0 O
0 g
1 w
%_ 0 50 XQ
/_Times-Roman 10 10 -4.2871 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
34.1999 0 Xb
XB
0 0 0 TC
100 100 100 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 99 Th
0 Tq
0 Tg
0 0 Tl
0 Tc
0 Tw
(Photon Energy) Tx 
(\r) TX 
TO
u
0 To
1 0 0 1 186.0625 326.5713 0 Tp
0 Tv
TP
-19.2524 0 Td
0 Tr
/_Times-Roman 9 9 -3.8584 Tf
2 Ta
(1 Mb) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.0625 252.4717 0 Tp
0 Tv
TP
-15.75 0 Td
0 Tr
(1 kb) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.0625 179.9551 0 Tp
0 Tv
TP
-11.25 0 Td
0 Tr
(1 b) Tx 
(\r) TX 
TO
0 To
1 0 0 1 186.0625 132.4551 0 Tp
0 Tv
TP
-22.7505 0 Td
0 Tr
(10 mb) Tx 
(\r) TX 
TO
U
u
0 To
1 0 0 1 190.1094 122.6387 0 Tp
0 Tv
TP
-10.8721 0 Td
0 Tr
1 Ta
(10 eV) Tx 
(\r) TX 
TO
0 To
1 0 0 1 241.479 122.6387 0 Tp
0 Tv
TP
-10.8721 0 Td
0 Tr
(1 keV) Tx 
(\r) TX 
TO
0 To
1 0 0 1 313.0454 122.6387 0 Tp
0 Tv
TP
-12.6233 0 Td
0 Tr
(1 MeV) Tx 
(\r) TX 
TO
0 To
1 0 0 1 387.145 122.6387 0 Tp
0 Tv
TP
-11.8718 0 Td
0 Tr
(1 GeV) Tx 
(\r) TX 
TO
0 To
1 0 0 1 434.3281 122.6387 0 Tp
0 Tv
TP
-16.3718 0 Td
0 Tr
(100 GeV) Tx 
(\r) TX 
TO
U
1 Ap
1 g
0 R
0 G
0.5 w
303.709 336.9907 m
304.5063 336.9907 305.1523 337.6367 305.1523 338.4336 c
305.1523 339.2305 304.5063 339.8765 303.709 339.8765 c
302.9126 339.8765 302.2666 339.2305 302.2666 338.4336 c
302.2666 337.6367 302.9126 336.9907 303.709 336.9907 c
b
0 To
1 0 0 1 334.3228 349.3408 0 Tp
0 Tv
TP
-35.6284 0 Td
0 Tr
0 g
1 w
/_Times-Roman 10 10 -4.2871 Tf
(\(b\) Lead ) Tx 
100 Tt
1 Tc
(\() Tx 
/_Times-Italic 10 10 -4.1309 Tf
0 Tt
0 Tc
(Z) Tx 
/_Times-Roman 10 10 -4.2871 Tf
( = 8) Tx 
75 Tt
0.75 Tc
(2) Tx 
0 Tt
0 Tc
(\)) Tx 
(\r) TX 
TO
0 To
1 0 0 1 349.5103 336.041 0 Tp
0 Tv
TP
-36.4288 0 Td
0 Tr
/_Times-Roman 9.4996 9.4996 -4.0726 Tf
(- experimental ) Tx 
/_Symbol 10.4496 10.4496 -3.0617 Tf
100.5133 100 Tz
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
100 100 Tz
(tot) Tx 
(\r) TX 
TO
0 To
1 0 0 1 228.7666 322.6763 0 Tp
0 Tv
TP
-18.6779 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
100.5133 100 Tz
2 Ta
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
100 100 Tz
(p.e.) Tx 
(\r) TX 
TO
0 To
1 0 0 1 400.4282 170.2554 0 Tp
0 Tv
TP
-10.054 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
50 Tt
0.5225 Tc
(k) Tx 
/_Times-Italic 8.5497 8.5497 -3.5318 Tf
-2.8499 Ts
0.4275 Tc
(e) Tx 
(\r) TX 
TO
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 255 79 79 Lb
(Layer 2) Ln
0 A
0 Ap
0 R
0 G
0 J 0 j 0.5 w 4 M [5 3 1 1 1 3 ]0 d
0 XR
189.1807 615.0288 m
188.5977 615.3408 199.125 609.1924 208.2251 592.292 c
219.5264 571.3047 224.0464 556.0635 224.5488 551.5659 C
224.5488 586.2959 L
239.0435 554.3203 242.1284 544.3203 246.3975 529.8291 c
266.4888 465.8662 268.749 457.3711 v
271.0088 448.8765 290.5977 383.6646 291.6021 380.1665 c
S
0.48 w [3 ]0 d
217.0146 380.4165 m
214.001 373.6704 240.6216 433.1357 250.667 441.1309 c
260.7124 449.126 263.2241 448.8765 269.251 449.626 c
275.2783 450.3755 300.3921 453.6235 336.3042 425.6396 c
372.2168 397.6563 384.7739 386.9126 390.5498 380.916 c
S
[]0 d
189.6411 472.3623 m
192.9058 472.3623 230.0737 472.1128 235.8501 471.1133 c
241.626 470.1138 243.6353 470.3638 247.4023 466.8657 c
251.1694 463.3677 259.457 457.8711 272.2646 436.1338 c
285.0728 414.3965 297.6294 391.6597 302.1499 380.4165 c
S
318.9761 380.4165 m
320.9854 387.1626 325.0034 399.6553 334.5464 407.6504 c
344.0898 415.646 353.1304 420.1431 374.7285 422.6416 c
396.3262 425.1401 415.6636 424.6406 436.0059 424.6406 c
S
[4 1 1 1 2 2 ]0 d
436.0059 407.1509 m
430.4805 407.1509 385.1636 407.7061 370.459 403.4028 c
354.0024 398.5874 343.7202 393.8936 334.0444 380.4165 c
S
u
[]0 d
214.0527 629.0208 m
214.0527 622.0249 L
S
238.7158 629.0208 m
238.7158 622.0249 L
S
263.3755 629.0208 m
263.3755 622.0249 L
S
288.0381 629.0208 m
288.0381 622.0249 L
S
312.6978 629.0208 m
312.6978 622.0249 L
S
337.3608 629.0208 m
337.3608 622.0249 L
S
362.02 629.0208 m
362.02 622.0249 L
S
386.6831 629.0208 m
386.6831 622.0249 L
S
411.3423 629.0208 m
411.3423 622.0249 L
S
U
u
189.3945 388.1621 m
196.4263 388.1621 L
S
189.3945 413.0093 m
196.4263 413.0093 L
S
189.3945 437.8564 m
196.4263 437.8564 L
S
189.3945 462.7002 m
196.4263 462.7002 L
S
189.3945 487.5479 m
196.4263 487.5479 L
S
189.3945 512.395 m
196.4263 512.395 L
S
189.3945 537.2422 m
196.4263 537.2422 L
S
189.3945 562.0859 m
196.4263 562.0859 L
S
189.3945 586.9336 m
196.4263 586.9336 L
S
189.3945 611.7808 m
196.4263 611.7808 L
S
U
u
428.979 388.1621 m
436.0107 388.1621 L
S
428.979 413.0093 m
436.0107 413.0093 L
S
428.979 437.8564 m
436.0107 437.8564 L
S
428.979 462.7002 m
436.0107 462.7002 L
S
428.979 487.5479 m
436.0107 487.5479 L
S
428.979 512.395 m
436.0107 512.395 L
S
428.979 537.2422 m
436.0107 537.2422 L
S
428.979 562.0859 m
436.0107 562.0859 L
S
428.979 586.9336 m
436.0107 586.9336 L
S
428.979 611.7808 m
436.0107 611.7808 L
S
U
1 Ap
0 O
1 g
0.5 w
225.6582 590.3081 m
226.459 590.3081 227.1084 590.9541 227.1084 591.751 c
227.1084 592.5479 226.459 593.1938 225.6582 593.1938 c
224.8569 593.1938 224.208 592.5479 224.208 591.751 c
224.208 590.9541 224.8569 590.3081 225.6582 590.3081 c
b
189.2954 619.1201 m
190.0967 619.1201 190.7461 619.7661 190.7461 620.563 c
190.7461 621.3599 190.0967 622.0059 189.2954 622.0059 c
188.4946 622.0059 187.8452 621.3599 187.8452 620.563 c
187.8452 619.7661 188.4946 619.1201 189.2954 619.1201 c
b
189.5625 620.6038 m
190.3633 620.6038 191.0127 621.2498 191.0127 622.0466 c
191.0127 622.8433 190.3633 623.4893 189.5625 623.4893 c
188.7617 623.4893 188.1123 622.8433 188.1123 622.0466 c
188.1123 621.2498 188.7617 620.6038 189.5625 620.6038 c
b
189.8608 621.4314 m
190.6616 621.4314 191.311 622.0774 191.311 622.8743 c
191.311 623.6711 190.6616 624.3171 189.8608 624.3171 c
189.0596 624.3171 188.4106 623.6711 188.4106 622.8743 c
188.4106 622.0774 189.0596 621.4314 189.8608 621.4314 c
b
201.2715 618.0742 m
202.0728 618.0742 202.7217 618.7197 202.7217 619.5166 c
202.7217 620.3137 202.0728 620.9597 201.2715 620.9597 c
200.4707 620.9597 199.8213 620.3137 199.8213 619.5166 c
199.8213 618.7197 200.4707 618.0742 201.2715 618.0742 c
b
200.7539 619.395 m
201.5547 619.395 202.2041 620.041 202.2041 620.8379 c
202.2041 621.6348 201.5547 622.2808 200.7539 622.2808 c
199.9526 622.2808 199.3037 621.6348 199.3037 620.8379 c
199.3037 620.041 199.9526 619.395 200.7539 619.395 c
b
200.0947 621.0193 m
200.8955 621.0193 201.5449 621.665 201.5449 622.4619 c
201.5449 623.2588 200.8955 623.9048 200.0947 623.9048 c
199.2935 623.9048 198.6445 623.2588 198.6445 622.4619 c
198.6445 621.665 199.2935 621.0193 200.0947 621.0193 c
b
199.2471 622.5808 m
200.0479 622.5808 200.6973 623.2268 200.6973 624.0237 c
200.6973 624.8206 200.0479 625.4666 199.2471 625.4666 c
198.4458 625.4666 197.7969 624.8206 197.7969 624.0237 c
197.7969 623.2268 198.4458 622.5808 199.2471 622.5808 c
b
198.2739 623.6738 m
199.0747 623.6738 199.7241 624.3198 199.7241 625.1167 c
199.7241 625.9136 199.0747 626.5596 198.2739 626.5596 c
197.4727 626.5596 196.8237 625.9136 196.8237 625.1167 c
196.8237 624.3198 197.4727 623.6738 198.2739 623.6738 c
b
197.96 624.7046 m
198.7607 624.7046 199.4102 625.3506 199.4102 626.1472 c
199.4102 626.9443 198.7607 627.5903 197.96 627.5903 c
197.1587 627.5903 196.5098 626.9443 196.5098 626.1472 c
196.5098 625.3506 197.1587 624.7046 197.96 624.7046 c
b
197.3633 625.6416 m
198.1641 625.6416 198.8135 626.2876 198.8135 627.0842 c
198.8135 627.8813 198.1641 628.5273 197.3633 628.5273 c
196.5625 628.5273 195.9131 627.8813 195.9131 627.0842 c
195.9131 626.2876 196.5625 625.6416 197.3633 625.6416 c
b
414.5645 425.2275 m
415.3657 425.2275 416.0151 425.8735 416.0151 426.6704 c
416.0151 427.4673 415.3657 428.1133 414.5645 428.1133 c
413.7637 428.1133 413.1147 427.4673 413.1147 426.6704 c
413.1147 425.8735 413.7637 425.2275 414.5645 425.2275 c
b
411.5195 424.9155 m
412.3208 424.9155 412.9702 425.5615 412.9702 426.3584 c
412.9702 427.1553 412.3208 427.8013 411.5195 427.8013 c
410.7188 427.8013 410.0693 427.1553 410.0693 426.3584 c
410.0693 425.5615 410.7188 424.9155 411.5195 424.9155 c
b
404.5195 424.9155 m
405.3203 424.9155 405.9697 425.5615 405.9697 426.3584 c
405.9697 427.1553 405.3203 427.8013 404.5195 427.8013 c
403.7183 427.8013 403.0693 427.1553 403.0693 426.3584 c
403.0693 425.5615 403.7183 424.9155 404.5195 424.9155 c
b
402.6987 424.9155 m
403.4995 424.9155 404.1489 425.5615 404.1489 426.3584 c
404.1489 427.1553 403.4995 427.8013 402.6987 427.8013 c
401.8975 427.8013 401.2485 427.1553 401.2485 426.3584 c
401.2485 425.5615 401.8975 424.9155 402.6987 424.9155 c
b
400.313 424.978 m
401.1138 424.978 401.7632 425.624 401.7632 426.4204 c
401.7632 427.2173 401.1138 427.8633 400.313 427.8633 c
399.5117 427.8633 398.8628 427.2173 398.8628 426.4204 c
398.8628 425.624 399.5117 424.978 400.313 424.978 c
b
396.5459 424.7593 m
397.3467 424.7593 397.9961 425.4053 397.9961 426.2021 c
397.9961 426.999 397.3467 427.645 396.5459 427.645 c
395.7446 427.645 395.0957 426.999 395.0957 426.2021 c
395.0957 425.4053 395.7446 424.7593 396.5459 424.7593 c
b
390.8008 424.3535 m
391.6021 424.3535 392.251 424.999 392.251 425.7959 c
392.251 426.5928 391.6021 427.2388 390.8008 427.2388 c
390 427.2388 389.3506 426.5928 389.3506 425.7959 c
389.3506 424.999 390 424.3535 390.8008 424.3535 c
b
388.415 424.1973 m
389.2163 424.1973 389.8657 424.8433 389.8657 425.6396 c
389.8657 426.4365 389.2163 427.0825 388.415 427.0825 c
387.6143 427.0825 386.9648 426.4365 386.9648 425.6396 c
386.9648 424.8433 387.6143 424.1973 388.415 424.1973 c
b
386.375 424.1035 m
387.1758 424.1035 387.8247 424.7495 387.8247 425.5464 c
387.8247 426.3428 387.1758 426.9893 386.375 426.9893 c
385.5737 426.9893 384.9243 426.3428 384.9243 425.5464 c
384.9243 424.7495 385.5737 424.1035 386.375 424.1035 c
b
383.2354 423.916 m
384.0366 423.916 384.6855 424.562 384.6855 425.3589 c
384.6855 426.1558 384.0366 426.8018 383.2354 426.8018 c
382.4346 426.8018 381.7852 426.1558 381.7852 425.3589 c
381.7852 424.562 382.4346 423.916 383.2354 423.916 c
b
379.9395 423.9785 m
380.7402 423.9785 381.3896 424.6245 381.3896 425.4214 c
381.3896 426.2183 380.7402 426.8643 379.9395 426.8643 c
379.1387 426.8643 378.4893 426.2183 378.4893 425.4214 c
378.4893 424.6245 379.1387 423.9785 379.9395 423.9785 c
b
377.9619 423.8535 m
378.7627 423.8535 379.4121 424.4995 379.4121 425.2964 c
379.4121 426.0933 378.7627 426.7393 377.9619 426.7393 c
377.1606 426.7393 376.5117 426.0933 376.5117 425.2964 c
376.5117 424.4995 377.1606 423.8535 377.9619 423.8535 c
b
375.7017 423.9473 m
376.5024 423.9473 377.1519 424.5933 377.1519 425.3901 c
377.1519 426.187 376.5024 426.833 375.7017 426.833 c
374.9004 426.833 374.251 426.187 374.251 425.3901 c
374.251 424.5933 374.9004 423.9473 375.7017 423.9473 c
b
374.1006 423.666 m
374.9014 423.666 375.5508 424.312 375.5508 425.1089 c
375.5508 425.9058 374.9014 426.5518 374.1006 426.5518 c
373.2993 426.5518 372.6504 425.9058 372.6504 425.1089 c
372.6504 424.312 373.2993 423.666 374.1006 423.666 c
b
372.2798 423.666 m
373.0806 423.666 373.73 424.312 373.73 425.1089 c
373.73 425.9058 373.0806 426.5518 372.2798 426.5518 c
371.479 426.5518 370.8296 425.9058 370.8296 425.1089 c
370.8296 424.312 371.479 423.666 372.2798 423.666 c
b
370.9614 423.4473 m
371.7622 423.4473 372.4116 424.0938 372.4116 424.8901 c
372.4116 425.687 371.7622 426.333 370.9614 426.333 c
370.1602 426.333 369.5107 425.687 369.5107 424.8901 c
369.5107 424.0938 370.1602 423.4473 370.9614 423.4473 c
b
369.4546 423.354 m
370.2554 423.354 370.9048 424 370.9048 424.7964 c
370.9048 425.5938 370.2554 426.2393 369.4546 426.2393 c
368.6533 426.2393 368.0044 425.5938 368.0044 424.7964 c
368.0044 424 368.6533 423.354 369.4546 423.354 c
b
368.1045 423.229 m
368.9053 423.229 369.5547 423.875 369.5547 424.6719 c
369.5547 425.4688 368.9053 426.1143 368.1045 426.1143 c
367.3037 426.1143 366.6543 425.4688 366.6543 424.6719 c
366.6543 423.875 367.3037 423.229 368.1045 423.229 c
b
366.8491 422.6982 m
367.6499 422.6982 368.2993 423.3438 368.2993 424.1406 c
368.2993 424.9375 367.6499 425.5835 366.8491 425.5835 c
366.0479 425.5835 365.3989 424.9375 365.3989 424.1406 c
365.3989 423.3438 366.0479 422.6982 366.8491 422.6982 c
b
365.0908 422.6978 m
365.8921 422.6978 366.541 423.3438 366.541 424.1406 c
366.541 424.9375 365.8921 425.5835 365.0908 425.5835 c
364.29 425.5835 363.6406 424.9375 363.6406 424.1406 c
363.6406 423.3438 364.29 422.6978 365.0908 422.6978 c
b
363.333 422.4795 m
364.1338 422.4795 364.7832 423.1255 364.7832 423.9219 c
364.7832 424.7188 364.1338 425.3652 363.333 425.3652 c
362.5322 425.3652 361.8828 424.7188 361.8828 423.9219 c
361.8828 423.1255 362.5322 422.4795 363.333 422.4795 c
b
360.8843 422.729 m
361.6855 422.729 362.3345 423.375 362.3345 424.1719 c
362.3345 424.9688 361.6855 425.6147 360.8843 425.6147 c
360.0835 425.6147 359.4341 424.9688 359.4341 424.1719 c
359.4341 423.375 360.0835 422.729 360.8843 422.729 c
b
359.0322 422.6982 m
359.833 422.6982 360.4824 423.3438 360.4824 424.1406 c
360.4824 424.9375 359.833 425.5835 359.0322 425.5835 c
358.2314 425.5835 357.582 424.9375 357.582 424.1406 c
357.582 423.3438 358.2314 422.6982 359.0322 422.6982 c
b
357.3999 422.7603 m
358.2007 422.7603 358.8501 423.4063 358.8501 424.2031 c
358.8501 425 358.2007 425.646 357.3999 425.646 c
356.5991 425.646 355.9497 425 355.9497 424.2031 c
355.9497 423.4063 356.5991 422.7603 357.3999 422.7603 c
b
355.6733 422.6982 m
356.4741 422.6982 357.1235 423.3438 357.1235 424.1406 c
357.1235 424.9375 356.4741 425.5835 355.6733 425.5835 c
354.8726 425.5835 354.2231 424.9375 354.2231 424.1406 c
354.2231 423.3438 354.8726 422.6982 355.6733 422.6982 c
b
354.1665 422.854 m
354.9673 422.854 355.6167 423.5 355.6167 424.2969 c
355.6167 425.0938 354.9673 425.7397 354.1665 425.7397 c
353.3657 425.7397 352.7163 425.0938 352.7163 424.2969 c
352.7163 423.5 353.3657 422.854 354.1665 422.854 c
b
352.1577 423.0479 m
352.9585 423.0479 353.6079 423.6938 353.6079 424.4902 c
353.6079 425.2871 352.9585 425.9331 352.1577 425.9331 c
351.3564 425.9331 350.707 425.2871 350.707 424.4902 c
350.707 423.6938 351.3564 423.0479 352.1577 423.0479 c
b
350.8389 423.0479 m
351.6396 423.0479 352.2891 423.6938 352.2891 424.4902 c
352.2891 425.2871 351.6396 425.9331 350.8389 425.9331 c
350.0381 425.9331 349.3887 425.2871 349.3887 424.4902 c
349.3887 423.6938 350.0381 423.0479 350.8389 423.0479 c
b
349.3638 423.4224 m
350.1646 423.4224 350.814 424.0684 350.814 424.8652 c
350.814 425.6621 350.1646 426.3081 349.3638 426.3081 c
348.5625 426.3081 347.9131 425.6621 347.9131 424.8652 c
347.9131 424.0684 348.5625 423.4224 349.3638 423.4224 c
b
347.229 423.6411 m
348.0298 423.6411 348.6792 424.2871 348.6792 425.084 c
348.6792 425.8809 348.0298 426.5269 347.229 426.5269 c
346.4277 426.5269 345.7788 425.8809 345.7788 425.084 c
345.7788 424.2871 346.4277 423.6411 347.229 423.6411 c
b
345.0942 424.0469 m
345.895 424.0469 346.5444 424.6934 346.5444 425.4897 c
346.5444 426.2866 345.895 426.9326 345.0942 426.9326 c
344.2935 426.9326 343.644 426.2866 343.644 425.4897 c
343.644 424.6934 344.2935 424.0469 345.0942 424.0469 c
b
343.2734 424.0469 m
344.0742 424.0469 344.7236 424.6934 344.7236 425.4897 c
344.7236 426.2866 344.0742 426.9326 343.2734 426.9326 c
342.4727 426.9326 341.8232 426.2866 341.8232 425.4897 c
341.8232 424.6934 342.4727 424.0469 343.2734 424.0469 c
b
341.7979 424.2969 m
342.5991 424.2969 343.248 424.9429 343.248 425.7397 c
343.248 426.5366 342.5991 427.1826 341.7979 427.1826 c
340.9971 427.1826 340.3477 426.5366 340.3477 425.7397 c
340.3477 424.9429 340.9971 424.2969 341.7979 424.2969 c
b
340.5107 424.8589 m
341.312 424.8589 341.9614 425.5049 341.9614 426.3018 c
341.9614 427.0986 341.312 427.7446 340.5107 427.7446 c
339.71 427.7446 339.0605 427.0986 339.0605 426.3018 c
339.0605 425.5049 339.71 424.8589 340.5107 424.8589 c
b
339.6006 425.5771 m
340.4014 425.5771 341.0508 426.2236 341.0508 427.0205 c
341.0508 427.8169 340.4014 428.4629 339.6006 428.4629 c
338.7998 428.4629 338.1504 427.8169 338.1504 427.0205 c
338.1504 426.2236 338.7998 425.5771 339.6006 425.5771 c
b
337.8804 425.8525 m
338.6812 425.8525 339.3306 426.498 339.3306 427.2954 c
339.3306 428.0923 338.6812 428.7378 337.8804 428.7378 c
337.0791 428.7378 336.4302 428.0923 336.4302 427.2954 c
336.4302 426.498 337.0791 425.8525 337.8804 425.8525 c
b
335.8398 426.2583 m
336.6406 426.2583 337.29 426.9043 337.29 427.7012 c
337.29 428.498 336.6406 429.144 335.8398 429.144 c
335.0391 429.144 334.3896 428.498 334.3896 427.7012 c
334.3896 426.9043 335.0391 426.2583 335.8398 426.2583 c
b
335.0864 426.6021 m
335.8872 426.6021 336.5366 427.248 336.5366 428.0449 c
336.5366 428.8418 335.8872 429.4873 335.0864 429.4873 c
334.2856 429.4873 333.6362 428.8418 333.6362 428.0449 c
333.6362 427.248 334.2856 426.6021 335.0864 426.6021 c
b
333.7993 427.8823 m
334.6001 427.8823 335.2495 428.5283 335.2495 429.3252 c
335.2495 430.1221 334.6001 430.7681 333.7993 430.7681 c
332.9985 430.7681 332.3491 430.1221 332.3491 429.3252 c
332.3491 428.5283 332.9985 427.8823 333.7993 427.8823 c
b
332.0098 428.2573 m
332.811 428.2573 333.46 428.9033 333.46 429.7002 c
333.46 430.4971 332.811 431.1426 332.0098 431.1426 c
331.209 431.1426 330.5596 430.4971 330.5596 429.7002 c
330.5596 428.9033 331.209 428.2573 332.0098 428.2573 c
b
330.0635 429.4126 m
330.8647 429.4126 331.5137 430.0586 331.5137 430.8555 c
331.5137 431.6523 330.8647 432.2983 330.0635 432.2983 c
329.2627 432.2983 328.6133 431.6523 328.6133 430.8555 c
328.6133 430.0586 329.2627 429.4126 330.0635 429.4126 c
b
328.9961 430.0684 m
329.7974 430.0684 330.4468 430.7148 330.4468 431.5117 c
330.4468 432.3081 329.7974 432.9541 328.9961 432.9541 c
328.1953 432.9541 327.5459 432.3081 327.5459 431.5117 c
327.5459 430.7148 328.1953 430.0684 328.9961 430.0684 c
b
327.1758 430.9741 m
327.9766 430.9741 328.626 431.6206 328.626 432.417 c
328.626 433.2139 327.9766 433.8599 327.1758 433.8599 c
326.3745 433.8599 325.7256 433.2139 325.7256 432.417 c
325.7256 431.6206 326.3745 430.9741 327.1758 430.9741 c
b
325.7002 431.7861 m
326.501 431.7861 327.1504 432.4321 327.1504 433.229 c
327.1504 434.0259 326.501 434.6719 325.7002 434.6719 c
324.8994 434.6719 324.25 434.0259 324.25 433.229 c
324.25 432.4321 324.8994 431.7861 325.7002 431.7861 c
b
323.8481 432.8794 m
324.6489 432.8794 325.2983 433.5254 325.2983 434.3223 c
325.2983 435.1191 324.6489 435.7651 323.8481 435.7651 c
323.0469 435.7651 322.3979 435.1191 322.3979 434.3223 c
322.3979 433.5254 323.0469 432.8794 323.8481 432.8794 c
b
322.3726 434.1909 m
323.1738 434.1909 323.8228 434.8374 323.8228 435.6338 c
323.8228 436.4307 323.1738 437.0771 322.3726 437.0771 c
321.5718 437.0771 320.9224 436.4307 320.9224 435.6338 c
320.9224 434.8374 321.5718 434.1909 322.3726 434.1909 c
b
320.3008 435.1904 m
321.1016 435.1904 321.751 435.8364 321.751 436.6333 c
321.751 437.4302 321.1016 438.0762 320.3008 438.0762 c
319.5 438.0762 318.8506 437.4302 318.8506 436.6333 c
318.8506 435.8364 319.5 435.1904 320.3008 435.1904 c
b
318.2603 435.5342 m
319.061 435.5342 319.7104 436.1802 319.7104 436.9771 c
319.7104 437.7739 319.061 438.4199 318.2603 438.4199 c
317.4595 438.4199 316.8101 437.7739 316.8101 436.9771 c
316.8101 436.1802 317.4595 435.5342 318.2603 435.5342 c
b
316.5493 436.2368 m
317.3501 436.2368 317.9995 436.8828 317.9995 437.6797 c
317.9995 438.4766 317.3501 439.1226 316.5493 439.1226 c
315.7485 439.1226 315.0991 438.4766 315.0991 437.6797 c
315.0991 436.8828 315.7485 436.2368 316.5493 436.2368 c
b
314.9644 437.2207 m
315.7651 437.2207 316.4141 437.8667 316.4141 438.6636 c
316.4141 439.4604 315.7651 440.1064 314.9644 440.1064 c
314.1631 440.1064 313.5137 439.4604 313.5137 438.6636 c
313.5137 437.8667 314.1631 437.2207 314.9644 437.2207 c
b
313.4888 437.814 m
314.2896 437.814 314.939 438.46 314.939 439.2568 c
314.939 440.0537 314.2896 440.6997 313.4888 440.6997 c
312.688 440.6997 312.0386 440.0537 312.0386 439.2568 c
312.0386 438.46 312.688 437.814 313.4888 437.814 c
b
311.9507 439.813 m
312.7515 439.813 313.4009 440.459 313.4009 441.2559 c
313.4009 442.0527 312.7515 442.6987 311.9507 442.6987 c
311.1494 442.6987 310.5 442.0527 310.5 441.2559 c
310.5 440.459 311.1494 439.813 311.9507 439.813 c
b
309.7217 440.0005 m
310.5225 440.0005 311.1719 440.6465 311.1719 441.4434 c
311.1719 442.2402 310.5225 442.8857 309.7217 442.8857 c
308.9209 442.8857 308.2715 442.2402 308.2715 441.4434 c
308.2715 440.6465 308.9209 440.0005 309.7217 440.0005 c
b
309.3135 441.312 m
310.1143 441.312 310.7637 441.958 310.7637 442.7549 c
310.7637 443.5518 310.1143 444.1978 309.3135 444.1978 c
308.5127 444.1978 307.8633 443.5518 307.8633 442.7549 c
307.8633 441.958 308.5127 441.312 309.3135 441.312 c
b
307.4614 441.1558 m
308.2622 441.1558 308.9116 441.8018 308.9116 442.5986 c
308.9116 443.3955 308.2622 444.0415 307.4614 444.0415 c
306.6606 444.0415 306.0112 443.3955 306.0112 442.5986 c
306.0112 441.8018 306.6606 441.1558 307.4614 441.1558 c
b
306.4883 442.2803 m
307.2891 442.2803 307.9385 442.9263 307.9385 443.7231 c
307.9385 444.52 307.2891 445.166 306.4883 445.166 c
305.6875 445.166 305.0381 444.52 305.0381 443.7231 c
305.0381 442.9263 305.6875 442.2803 306.4883 442.2803 c
b
304.0083 442.2803 m
304.8091 442.2803 305.4585 442.9263 305.4585 443.7231 c
305.4585 444.52 304.8091 445.166 304.0083 445.166 c
303.2075 445.166 302.5581 444.52 302.5581 443.7231 c
302.5581 442.9263 303.2075 442.2803 304.0083 442.2803 c
b
302.313 442.7485 m
303.1143 442.7485 303.7632 443.3945 303.7632 444.1914 c
303.7632 444.9883 303.1143 445.6343 302.313 445.6343 c
301.5122 445.6343 300.8628 444.9883 300.8628 444.1914 c
300.8628 443.3945 301.5122 442.7485 302.313 442.7485 c
b
301.0259 442.5459 m
301.8271 442.5459 302.4761 443.1919 302.4761 443.9888 c
302.4761 444.7852 301.8271 445.4312 301.0259 445.4312 c
300.2251 445.4312 299.5757 444.7852 299.5757 443.9888 c
299.5757 443.1919 300.2251 442.5459 301.0259 442.5459 c
b
300.0469 443.7544 m
300.8477 443.7544 301.4971 444.4004 301.4971 445.1973 c
301.4971 445.9941 300.8477 446.6396 300.0469 446.6396 c
299.2456 446.6396 298.5967 445.9941 298.5967 445.1973 c
298.5967 444.4004 299.2456 443.7544 300.0469 443.7544 c
b
298.54 444.2852 m
299.3408 444.2852 299.9902 444.9312 299.9902 445.728 c
299.9902 446.5249 299.3408 447.1709 298.54 447.1709 c
297.7388 447.1709 297.0898 446.5249 297.0898 445.728 c
297.0898 444.9312 297.7388 444.2852 298.54 444.2852 c
b
296.4995 444.9102 m
297.3003 444.9102 297.9497 445.5557 297.9497 446.3525 c
297.9497 447.1494 297.3003 447.7954 296.4995 447.7954 c
295.6982 447.7954 295.0493 447.1494 295.0493 446.3525 c
295.0493 445.5557 295.6982 444.9102 296.4995 444.9102 c
b
295.2437 445.6846 m
296.0449 445.6846 296.6938 446.3306 296.6938 447.1274 c
296.6938 447.9243 296.0449 448.5703 295.2437 448.5703 c
294.4429 448.5703 293.7935 447.9243 293.7935 447.1274 c
293.7935 446.3306 294.4429 445.6846 295.2437 445.6846 c
b
293.7998 446.7461 m
294.6006 446.7461 295.25 447.3921 295.25 448.189 c
295.25 448.9858 294.6006 449.6318 293.7998 449.6318 c
292.9985 449.6318 292.3496 448.9858 292.3496 448.189 c
292.3496 447.3921 292.9985 446.7461 293.7998 446.7461 c
b
291.8848 447.2461 m
292.6855 447.2461 293.335 447.8921 293.335 448.689 c
293.335 449.4858 292.6855 450.1318 291.8848 450.1318 c
291.084 450.1318 290.4346 449.4858 290.4346 448.689 c
290.4346 447.8921 291.084 447.2461 291.8848 447.2461 c
b
289.8755 447.2148 m
290.6768 447.2148 291.3257 447.8608 291.3257 448.6577 c
291.3257 449.4546 290.6768 450.1006 289.8755 450.1006 c
289.0747 450.1006 288.4253 449.4546 288.4253 448.6577 c
288.4253 447.8608 289.0747 447.2148 289.8755 447.2148 c
b
288.2749 448.667 m
289.0757 448.667 289.7251 449.313 289.7251 450.1099 c
289.7251 450.9067 289.0757 451.5527 288.2749 451.5527 c
287.4736 451.5527 286.8242 450.9067 286.8242 450.1099 c
286.8242 449.313 287.4736 448.667 288.2749 448.667 c
b
287.4897 447.2212 m
288.291 447.2212 288.9399 447.8672 288.9399 448.6636 c
288.9399 449.4604 288.291 450.1064 287.4897 450.1064 c
286.689 450.1064 286.0396 449.4604 286.0396 448.6636 c
286.0396 447.8672 286.689 447.2212 287.4897 447.2212 c
b
286.8306 449.0327 m
287.6318 449.0327 288.2808 449.6782 288.2808 450.4751 c
288.2808 451.272 287.6318 451.918 286.8306 451.918 c
286.0298 451.918 285.3804 451.272 285.3804 450.4751 c
285.3804 449.6782 286.0298 449.0327 286.8306 449.0327 c
b
285.5752 447.627 m
286.376 447.627 287.0254 448.2729 287.0254 449.0698 c
287.0254 449.8667 286.376 450.5127 285.5752 450.5127 c
284.7739 450.5127 284.1245 449.8667 284.1245 449.0698 c
284.1245 448.2729 284.7739 447.627 285.5752 447.627 c
b
285.2295 449.2822 m
286.0303 449.2822 286.6797 449.9282 286.6797 450.7251 c
286.6797 451.522 286.0303 452.168 285.2295 452.168 c
284.4287 452.168 283.7793 451.522 283.7793 450.7251 c
283.7793 449.9282 284.4287 449.2822 285.2295 449.2822 c
b
284.0366 448.8765 m
284.8379 448.8765 285.4868 449.5225 285.4868 450.3193 c
285.4868 451.1157 284.8379 451.7617 284.0366 451.7617 c
283.2358 451.7617 282.5864 451.1157 282.5864 450.3193 c
282.5864 449.5225 283.2358 448.8765 284.0366 448.8765 c
b
282.4985 448.564 m
283.2993 448.564 283.9487 449.21 283.9487 450.0068 c
283.9487 450.8037 283.2993 451.4497 282.4985 451.4497 c
281.6978 451.4497 281.0483 450.8037 281.0483 450.0068 c
281.0483 449.21 281.6978 448.564 282.4985 448.564 c
b
282.6553 450.0317 m
283.4565 450.0317 284.106 450.6777 284.106 451.4746 c
284.106 452.2715 283.4565 452.9175 282.6553 452.9175 c
281.8545 452.9175 281.2051 452.2715 281.2051 451.4746 c
281.2051 450.6777 281.8545 450.0317 282.6553 450.0317 c
b
280.8662 449.1885 m
281.667 449.1885 282.3164 449.8345 282.3164 450.6313 c
282.3164 451.4282 281.667 452.0742 280.8662 452.0742 c
280.0654 452.0742 279.416 451.4282 279.416 450.6313 c
279.416 449.8345 280.0654 449.1885 280.8662 449.1885 c
b
280.9604 450.2505 m
281.7612 450.2505 282.4106 450.8965 282.4106 451.6934 c
282.4106 452.4902 281.7612 453.1362 280.9604 453.1362 c
280.1592 453.1362 279.5103 452.4902 279.5103 451.6934 c
279.5103 450.8965 280.1592 450.2505 280.9604 450.2505 c
b
279.1084 450.1255 m
279.9092 450.1255 280.5586 450.7715 280.5586 451.5684 c
280.5586 452.3652 279.9092 453.0112 279.1084 453.0112 c
278.3071 453.0112 277.6582 452.3652 277.6582 451.5684 c
277.6582 450.7715 278.3071 450.1255 279.1084 450.1255 c
b
278.1035 451.4688 m
278.9048 451.4688 279.5537 452.1143 279.5537 452.9111 c
279.5537 453.708 278.9048 454.354 278.1035 454.354 c
277.3027 454.354 276.6533 453.708 276.6533 452.9111 c
276.6533 452.1143 277.3027 451.4688 278.1035 451.4688 c
b
276.2202 450.625 m
277.021 450.625 277.6704 451.271 277.6704 452.0684 c
277.6704 452.8647 277.021 453.5107 276.2202 453.5107 c
275.4189 453.5107 274.77 452.8647 274.77 452.0684 c
274.77 451.271 275.4189 450.625 276.2202 450.625 c
b
276.4712 452.4053 m
277.272 452.4053 277.9214 453.0513 277.9214 453.8481 c
277.9214 454.645 277.272 455.291 276.4712 455.291 c
275.6704 455.291 275.021 454.645 275.021 453.8481 c
275.021 453.0513 275.6704 452.4053 276.4712 452.4053 c
b
274.8389 451.687 m
275.6396 451.687 276.2891 452.333 276.2891 453.1299 c
276.2891 453.9268 275.6396 454.5728 274.8389 454.5728 c
274.0381 454.5728 273.3887 453.9268 273.3887 453.1299 c
273.3887 452.333 274.0381 451.687 274.8389 451.687 c
b
274.6821 453.124 m
275.4829 453.124 276.1323 453.7695 276.1323 454.5664 c
276.1323 455.3633 275.4829 456.0093 274.6821 456.0093 c
273.8809 456.0093 273.2314 455.3633 273.2314 454.5664 c
273.2314 453.7695 273.8809 453.124 274.6821 453.124 c
b
273.7715 454.3296 m
274.5723 454.3296 275.2217 454.9756 275.2217 455.7725 c
275.2217 456.5693 274.5723 457.2153 273.7715 457.2153 c
272.9707 457.2153 272.3213 456.5693 272.3213 455.7725 c
272.3213 454.9756 272.9707 454.3296 273.7715 454.3296 c
b
273.2378 455.0479 m
274.0386 455.0479 274.688 455.6938 274.688 456.4907 c
274.688 457.2876 274.0386 457.9336 273.2378 457.9336 c
272.437 457.9336 271.7876 457.2876 271.7876 456.4907 c
271.7876 455.6938 272.437 455.0479 273.2378 455.0479 c
b
271.8564 456.2656 m
272.6577 456.2656 273.3071 456.9116 273.3071 457.7085 c
273.3071 458.5054 272.6577 459.1514 271.8564 459.1514 c
271.0557 459.1514 270.4063 458.5054 270.4063 457.7085 c
270.4063 456.9116 271.0557 456.2656 271.8564 456.2656 c
b
271.166 458.1396 m
271.9668 458.1396 272.6162 458.7856 272.6162 459.5825 c
272.6162 460.3794 271.9668 461.0254 271.166 461.0254 c
270.3652 461.0254 269.7158 460.3794 269.7158 459.5825 c
269.7158 458.7856 270.3652 458.1396 271.166 458.1396 c
b
270.2241 459.3267 m
271.0254 459.3267 271.6743 459.9727 271.6743 460.7695 c
271.6743 461.5664 271.0254 462.2124 270.2241 462.2124 c
269.4233 462.2124 268.7739 461.5664 268.7739 460.7695 c
268.7739 459.9727 269.4233 459.3267 270.2241 459.3267 c
b
270.0044 460.8101 m
270.8057 460.8101 271.4546 461.4561 271.4546 462.2529 c
271.4546 463.0498 270.8057 463.6958 270.0044 463.6958 c
269.2036 463.6958 268.5542 463.0498 268.5542 462.2529 c
268.5542 461.4561 269.2036 460.8101 270.0044 460.8101 c
b
268.4189 461.5596 m
269.2202 461.5596 269.8696 462.2056 269.8696 463.0024 c
269.8696 463.7993 269.2202 464.4453 268.4189 464.4453 c
267.6182 464.4453 266.9688 463.7993 266.9688 463.0024 c
266.9688 462.2056 267.6182 461.5596 268.4189 461.5596 c
b
269.2354 463.5586 m
270.0361 463.5586 270.6855 464.2046 270.6855 465.001 c
270.6855 465.7979 270.0361 466.4443 269.2354 466.4443 c
268.4346 466.4443 267.7852 465.7979 267.7852 465.001 c
267.7852 464.2046 268.4346 463.5586 269.2354 463.5586 c
b
267.6973 463.4336 m
268.498 463.4336 269.1475 464.0796 269.1475 464.8765 c
269.1475 465.6733 268.498 466.3193 267.6973 466.3193 c
266.8965 466.3193 266.2471 465.6733 266.2471 464.8765 c
266.2471 464.0796 266.8965 463.4336 267.6973 463.4336 c
b
267.8071 465.1982 m
268.6079 465.1982 269.2573 465.8442 269.2573 466.6411 c
269.2573 467.438 268.6079 468.084 267.8071 468.084 c
267.0059 468.084 266.3569 467.438 266.3569 466.6411 c
266.3569 465.8442 267.0059 465.1982 267.8071 465.1982 c
b
267.0381 466.2285 m
267.8389 466.2285 268.4883 466.875 268.4883 467.6714 c
268.4883 468.4688 267.8389 469.1143 267.0381 469.1143 c
266.2368 469.1143 265.5879 468.4688 265.5879 467.6714 c
265.5879 466.875 266.2368 466.2285 267.0381 466.2285 c
b
266.52 467.4155 m
267.3208 467.4155 267.9702 468.0615 267.9702 468.8584 c
267.9702 469.6553 267.3208 470.3013 266.52 470.3013 c
265.7192 470.3013 265.0698 469.6553 265.0698 468.8584 c
265.0698 468.0615 265.7192 467.4155 266.52 467.4155 c
b
265.9551 468.9458 m
266.7559 468.9458 267.4053 469.5918 267.4053 470.3887 c
267.4053 471.1855 266.7559 471.8315 265.9551 471.8315 c
265.1538 471.8315 264.5049 471.1855 264.5049 470.3887 c
264.5049 469.5918 265.1538 468.9458 265.9551 468.9458 c
b
265.4526 470.7261 m
266.2539 470.7261 266.9028 471.3721 266.9028 472.1689 c
266.9028 472.9658 266.2539 473.6118 265.4526 473.6118 c
264.6519 473.6118 264.0024 472.9658 264.0024 472.1689 c
264.0024 471.3721 264.6519 470.7261 265.4526 470.7261 c
b
264.5425 472.2251 m
265.3433 472.2251 265.9927 472.8711 265.9927 473.668 c
265.9927 474.4648 265.3433 475.1108 264.5425 475.1108 c
263.7412 475.1108 263.0923 474.4648 263.0923 473.668 c
263.0923 472.8711 263.7412 472.2251 264.5425 472.2251 c
b
265.5781 472.8809 m
266.3789 472.8809 267.0283 473.5273 267.0283 474.3242 c
267.0283 475.1206 266.3789 475.7666 265.5781 475.7666 c
264.7773 475.7666 264.1279 475.1206 264.1279 474.3242 c
264.1279 473.5273 264.7773 472.8809 265.5781 472.8809 c
b
264.0088 473.9116 m
264.8096 473.9116 265.459 474.5576 265.459 475.3545 c
265.459 476.1514 264.8096 476.7974 264.0088 476.7974 c
263.2075 476.7974 262.5586 476.1514 262.5586 475.3545 c
262.5586 474.5576 263.2075 473.9116 264.0088 473.9116 c
b
264.3853 475.3545 m
265.1865 475.3545 265.8354 476.0005 265.8354 476.7974 c
265.8354 477.5942 265.1865 478.2402 264.3853 478.2402 c
263.5845 478.2402 262.9351 477.5942 262.9351 476.7974 c
262.9351 476.0005 263.5845 475.3545 264.3853 475.3545 c
b
262.5962 476.4478 m
263.397 476.4478 264.0464 477.0938 264.0464 477.8906 c
264.0464 478.6875 263.397 479.3335 262.5962 479.3335 c
261.7949 479.3335 261.146 478.6875 261.146 477.8906 c
261.146 477.0938 261.7949 476.4478 262.5962 476.4478 c
b
263.1924 478.0093 m
263.9932 478.0093 264.6426 478.6553 264.6426 479.4521 c
264.6426 480.249 263.9932 480.895 263.1924 480.895 c
262.3916 480.895 261.7422 480.249 261.7422 479.4521 c
261.7422 478.6553 262.3916 478.0093 263.1924 478.0093 c
b
262.0249 479.9771 m
262.8257 479.9771 263.4751 480.623 263.4751 481.4199 c
263.4751 482.2163 262.8257 482.8623 262.0249 482.8623 c
261.2241 482.8623 260.5747 482.2163 260.5747 481.4199 c
260.5747 480.623 261.2241 479.9771 262.0249 479.9771 c
b
261.1143 483.0063 m
261.9155 483.0063 262.5645 483.6523 262.5645 484.4492 c
262.5645 485.2461 261.9155 485.8921 261.1143 485.8921 c
260.3135 485.8921 259.6641 485.2461 259.6641 484.4492 c
259.6641 483.6523 260.3135 483.0063 261.1143 483.0063 c
b
260.5493 484.5991 m
261.3501 484.5991 261.9995 485.2451 261.9995 486.042 c
261.9995 486.8389 261.3501 487.4849 260.5493 487.4849 c
259.7485 487.4849 259.0991 486.8389 259.0991 486.042 c
259.0991 485.2451 259.7485 484.5991 260.5493 484.5991 c
b
260.3296 486.4731 m
261.1304 486.4731 261.7798 487.1191 261.7798 487.916 c
261.7798 488.7129 261.1304 489.3589 260.3296 489.3589 c
259.5288 489.3589 258.8794 488.7129 258.8794 487.916 c
258.8794 487.1191 259.5288 486.4731 260.3296 486.4731 c
b
259.8271 489.1279 m
260.6284 489.1279 261.2773 489.7739 261.2773 490.5708 c
261.2773 491.3677 260.6284 492.0132 259.8271 492.0132 c
259.0264 492.0132 258.377 491.3677 258.377 490.5708 c
258.377 489.7739 259.0264 489.1279 259.8271 489.1279 c
b
258.54 489.9399 m
259.3413 489.9399 259.9907 490.5859 259.9907 491.3828 c
259.9907 492.1792 259.3413 492.8252 258.54 492.8252 c
257.7393 492.8252 257.0898 492.1792 257.0898 491.3828 c
257.0898 490.5859 257.7393 489.9399 258.54 489.9399 c
b
258.3833 491.8291 m
259.1841 491.8291 259.8335 492.4751 259.8335 493.272 c
259.8335 494.0688 259.1841 494.7148 258.3833 494.7148 c
257.5825 494.7148 256.9331 494.0688 256.9331 493.272 c
256.9331 492.4751 257.5825 491.8291 258.3833 491.8291 c
b
257.856 493.5313 m
258.6567 493.5313 259.3062 494.1772 259.3062 494.9741 c
259.3062 495.771 258.6567 496.417 257.856 496.417 c
257.0547 496.417 256.4058 495.771 256.4058 494.9741 c
256.4058 494.1772 257.0547 493.5313 257.856 493.5313 c
b
256.9141 494.9995 m
257.7148 494.9995 258.3643 495.6455 258.3643 496.4419 c
258.3643 497.2393 257.7148 497.8848 256.9141 497.8848 c
256.1133 497.8848 255.4639 497.2393 255.4639 496.4419 c
255.4639 495.6455 256.1133 494.9995 256.9141 494.9995 c
b
256.6001 498.2476 m
257.4009 498.2476 258.0503 498.8936 258.0503 499.6904 c
258.0503 500.4873 257.4009 501.1333 256.6001 501.1333 c
255.7993 501.1333 255.1499 500.4873 255.1499 499.6904 c
255.1499 498.8936 255.7993 498.2476 256.6001 498.2476 c
b
255.8779 499.6216 m
256.6792 499.6216 257.3286 500.2676 257.3286 501.0645 c
257.3286 501.8613 256.6792 502.5073 255.8779 502.5073 c
255.0771 502.5073 254.4277 501.8613 254.4277 501.0645 c
254.4277 500.2676 255.0771 499.6216 255.8779 499.6216 c
b
255.2505 501.5894 m
256.0513 501.5894 256.7007 502.2354 256.7007 503.0322 c
256.7007 503.8291 256.0513 504.4751 255.2505 504.4751 c
254.4492 504.4751 253.7998 503.8291 253.7998 503.0322 c
253.7998 502.2354 254.4492 501.5894 255.2505 501.5894 c
b
254.6851 502.5884 m
255.4863 502.5884 256.1353 503.2344 256.1353 504.0313 c
256.1353 504.8281 255.4863 505.4741 254.6851 505.4741 c
253.8843 505.4741 253.2349 504.8281 253.2349 504.0313 c
253.2349 503.2344 253.8843 502.5884 254.6851 502.5884 c
b
254.1201 503.8066 m
254.9209 503.8066 255.5703 504.4526 255.5703 505.2495 c
255.5703 506.0464 254.9209 506.6924 254.1201 506.6924 c
253.3193 506.6924 252.6699 506.0464 252.6699 505.2495 c
252.6699 504.4526 253.3193 503.8066 254.1201 503.8066 c
b
254.1201 505.7119 m
254.9209 505.7119 255.5703 506.3579 255.5703 507.1548 c
255.5703 507.9517 254.9209 508.5977 254.1201 508.5977 c
253.3193 508.5977 252.6699 507.9517 252.6699 507.1548 c
252.6699 506.3579 253.3193 505.7119 254.1201 505.7119 c
b
253.6807 507.5859 m
254.4814 507.5859 255.1309 508.2314 255.1309 509.0283 c
255.1309 509.8252 254.4814 510.4712 253.6807 510.4712 c
252.8799 510.4712 252.2305 509.8252 252.2305 509.0283 c
252.2305 508.2314 252.8799 507.5859 253.6807 507.5859 c
b
252.519 509.8345 m
253.3203 509.8345 253.9692 510.4805 253.9692 511.2773 c
253.9692 512.0742 253.3203 512.7197 252.519 512.7197 c
251.7183 512.7197 251.0688 512.0742 251.0688 511.2773 c
251.0688 510.4805 251.7183 509.8345 252.519 509.8345 c
b
251.5146 512.083 m
252.3154 512.083 252.9648 512.729 252.9648 513.5259 c
252.9648 514.3228 252.3154 514.9688 251.5146 514.9688 c
250.7139 514.9688 250.0645 514.3228 250.0645 513.5259 c
250.0645 512.729 250.7139 512.083 251.5146 512.083 c
b
251.1694 514.6128 m
251.9702 514.6128 252.6196 515.2588 252.6196 516.0557 c
252.6196 516.8525 251.9702 517.4985 251.1694 517.4985 c
250.3682 517.4985 249.7192 516.8525 249.7192 516.0557 c
249.7192 515.2588 250.3682 514.6128 251.1694 514.6128 c
b
250.1333 516.6431 m
250.9346 516.6431 251.5835 517.2891 251.5835 518.0859 c
251.5835 518.8823 250.9346 519.5283 250.1333 519.5283 c
249.3325 519.5283 248.6831 518.8823 248.6831 518.0859 c
248.6831 517.2891 249.3325 516.6431 250.1333 516.6431 c
b
249.4678 518.8916 m
250.269 518.8916 250.918 519.5376 250.918 520.3345 c
250.918 521.1313 250.269 521.7773 249.4678 521.7773 c
248.667 521.7773 248.0176 521.1313 248.0176 520.3345 c
248.0176 519.5376 248.667 518.8916 249.4678 518.8916 c
b
248.0869 523.9043 m
248.8877 523.9043 249.5371 524.5503 249.5371 525.3472 c
249.5371 526.144 248.8877 526.79 248.0869 526.79 c
247.2856 526.79 246.6367 526.144 246.6367 525.3472 c
246.6367 524.5503 247.2856 523.9043 248.0869 523.9043 c
b
247.0195 524.1855 m
247.8203 524.1855 248.4697 524.8311 248.4697 525.6279 c
248.4697 526.4248 247.8203 527.0708 247.0195 527.0708 c
246.2183 527.0708 245.5693 526.4248 245.5693 525.6279 c
245.5693 524.8311 246.2183 524.1855 247.0195 524.1855 c
b
247.6787 526.0903 m
248.4795 526.0903 249.1289 526.7363 249.1289 527.5332 c
249.1289 528.3301 248.4795 528.9761 247.6787 528.9761 c
246.8779 528.9761 246.2285 528.3301 246.2285 527.5332 c
246.2285 526.7363 246.8779 526.0903 247.6787 526.0903 c
b
244.8594 533.1582 m
245.6606 533.1582 246.3096 533.8042 246.3096 534.6011 c
246.3096 535.3979 245.6606 536.0439 244.8594 536.0439 c
244.0586 536.0439 243.4092 535.3979 243.4092 534.6011 c
243.4092 533.8042 244.0586 533.1582 244.8594 533.1582 c
b
243.9492 536.7813 m
244.75 536.7813 245.3994 537.4272 245.3994 538.2241 c
245.3994 539.021 244.75 539.667 243.9492 539.667 c
243.1484 539.667 242.499 539.021 242.499 538.2241 c
242.499 537.4272 243.1484 536.7813 243.9492 536.7813 c
b
242.8193 538.6611 m
243.6201 538.6611 244.269 539.3071 244.269 540.104 c
244.269 540.9009 243.6201 541.5469 242.8193 541.5469 c
242.0181 541.5469 241.3687 540.9009 241.3687 540.104 c
241.3687 539.3071 242.0181 538.6611 242.8193 538.6611 c
b
243.2524 539.7231 m
244.0532 539.7231 244.7026 540.3691 244.7026 541.166 c
244.7026 541.9629 244.0532 542.6089 243.2524 542.6089 c
242.4512 542.6089 241.8022 541.9629 241.8022 541.166 c
241.8022 540.3691 242.4512 539.7231 243.2524 539.7231 c
b
242.0596 541.5659 m
242.8604 541.5659 243.5098 542.2119 243.5098 543.0088 c
243.5098 543.8057 242.8604 544.4512 242.0596 544.4512 c
241.2583 544.4512 240.6094 543.8057 240.6094 543.0088 c
240.6094 542.2119 241.2583 541.5659 242.0596 541.5659 c
b
241.5322 543.0024 m
242.333 543.0024 242.9824 543.6484 242.9824 544.4453 c
242.9824 545.2422 242.333 545.8882 241.5322 545.8882 c
240.731 545.8882 240.0815 545.2422 240.0815 544.4453 c
240.0815 543.6484 240.731 543.0024 241.5322 543.0024 c
b
241.1553 544.0645 m
241.9561 544.0645 242.6055 544.7104 242.6055 545.5068 c
242.6055 546.3042 241.9561 546.9502 241.1553 546.9502 c
240.3545 546.9502 239.7051 546.3042 239.7051 545.5068 c
239.7051 544.7104 240.3545 544.0645 241.1553 544.0645 c
b
240.6846 545.1885 m
241.4854 545.1885 242.1348 545.835 242.1348 546.6313 c
242.1348 547.4282 241.4854 548.0742 240.6846 548.0742 c
239.8833 548.0742 239.2344 547.4282 239.2344 546.6313 c
239.2344 545.835 239.8833 545.1885 240.6846 545.1885 c
b
239.9312 546.4692 m
240.7319 546.4692 241.3813 547.1152 241.3813 547.9121 c
241.3813 548.709 240.7319 549.355 239.9312 549.355 c
239.1299 549.355 238.4805 548.709 238.4805 547.9121 c
238.4805 547.1152 239.1299 546.4692 239.9312 546.4692 c
b
239.5859 547.812 m
240.3867 547.812 241.0361 548.458 241.0361 549.2549 c
241.0361 550.0518 240.3867 550.6978 239.5859 550.6978 c
238.7847 550.6978 238.1353 550.0518 238.1353 549.2549 c
238.1353 548.458 238.7847 547.812 239.5859 547.812 c
b
239.3345 548.9678 m
240.1357 548.9678 240.7847 549.6138 240.7847 550.4106 c
240.7847 551.2075 240.1357 551.8535 239.3345 551.8535 c
238.5337 551.8535 237.8843 551.2075 237.8843 550.4106 c
237.8843 549.6138 238.5337 548.9678 239.3345 548.9678 c
b
239.0835 550.2168 m
239.8843 550.2168 240.5337 550.8628 240.5337 551.6597 c
240.5337 552.4565 239.8843 553.1025 239.0835 553.1025 c
238.2827 553.1025 237.6333 552.4565 237.6333 551.6597 c
237.6333 550.8628 238.2827 550.2168 239.0835 550.2168 c
b
237.9844 551.7783 m
238.7856 551.7783 239.4351 552.4243 239.4351 553.2212 c
239.4351 554.0181 238.7856 554.6641 237.9844 554.6641 c
237.1836 554.6641 236.5347 554.0181 236.5347 553.2212 c
236.5347 552.4243 237.1836 551.7783 237.9844 551.7783 c
b
237.7021 554.0273 m
238.5029 554.0273 239.1523 554.6733 239.1523 555.4697 c
239.1523 556.2671 238.5029 556.9131 237.7021 556.9131 c
236.9014 556.9131 236.252 556.2671 236.252 555.4697 c
236.252 554.6733 236.9014 554.0273 237.7021 554.0273 c
b
237.3882 555.4639 m
238.189 555.4639 238.8384 556.1099 238.8384 556.9067 c
238.8384 557.7036 238.189 558.3496 237.3882 558.3496 c
236.5874 558.3496 235.938 557.7036 235.938 556.9067 c
235.938 556.1099 236.5874 555.4639 237.3882 555.4639 c
b
235.8501 558.8213 m
236.6509 558.8213 237.3003 559.4673 237.3003 560.2642 c
237.3003 561.061 236.6509 561.707 235.8501 561.707 c
235.0493 561.707 234.3999 561.061 234.3999 560.2642 c
234.3999 559.4673 235.0493 558.8213 235.8501 558.8213 c
b
235.2847 561.0386 m
236.0859 561.0386 236.7354 561.6846 236.7354 562.4814 c
236.7354 563.2783 236.0859 563.9243 235.2847 563.9243 c
234.4839 563.9243 233.835 563.2783 233.835 562.4814 c
233.835 561.6846 234.4839 561.0386 235.2847 561.0386 c
b
234.6255 563.2031 m
235.4268 563.2031 236.0762 563.8491 236.0762 564.646 c
236.0762 565.4429 235.4268 566.0889 234.6255 566.0889 c
233.8247 566.0889 233.1753 565.4429 233.1753 564.646 c
233.1753 563.8491 233.8247 563.2031 234.6255 563.2031 c
b
232.0518 569.8931 m
232.8525 569.8931 233.502 570.5391 233.502 571.3359 c
233.502 572.1328 232.8525 572.7788 232.0518 572.7788 c
231.2505 572.7788 230.6016 572.1328 230.6016 571.3359 c
230.6016 570.5391 231.2505 569.8931 232.0518 569.8931 c
b
231.4863 571.4858 m
232.2876 571.4858 232.937 572.1318 232.937 572.9287 c
232.937 573.7256 232.2876 574.3716 231.4863 574.3716 c
230.6855 574.3716 230.0361 573.7256 230.0361 572.9287 c
230.0361 572.1318 230.6855 571.4858 231.4863 571.4858 c
b
229.8857 574.7026 m
230.6865 574.7026 231.3359 575.3486 231.3359 576.1455 c
231.3359 576.9424 230.6865 577.5884 229.8857 577.5884 c
229.0845 577.5884 228.4351 576.9424 228.4351 576.1455 c
228.4351 575.3486 229.0845 574.7026 229.8857 574.7026 c
b
228.4102 577.4512 m
229.2109 577.4512 229.8604 578.0972 229.8604 578.8936 c
229.8604 579.6904 229.2109 580.3369 228.4102 580.3369 c
227.6094 580.3369 226.96 579.6904 226.96 578.8936 c
226.96 578.0972 227.6094 577.4512 228.4102 577.4512 c
b
228.2847 579.481 m
229.0854 579.481 229.7349 580.127 229.7349 580.9238 c
229.7349 581.7207 229.0854 582.3667 228.2847 582.3667 c
227.4834 582.3667 226.8345 581.7207 226.8345 580.9238 c
226.8345 580.127 227.4834 579.481 228.2847 579.481 c
b
225.3335 549.0674 m
226.1348 549.0674 226.7837 549.7134 226.7837 550.5103 c
226.7837 551.3071 226.1348 551.9531 225.3335 551.9531 c
224.5327 551.9531 223.8833 551.3071 223.8833 550.5103 c
223.8833 549.7134 224.5327 549.0674 225.3335 549.0674 c
b
225.1455 550.0669 m
225.9463 550.0669 226.5957 550.7129 226.5957 551.5098 c
226.5957 552.3066 225.9463 552.9526 225.1455 552.9526 c
224.3442 552.9526 223.6948 552.3066 223.6948 551.5098 c
223.6948 550.7129 224.3442 550.0669 225.1455 550.0669 c
b
225.0513 551.0977 m
225.8521 551.0977 226.5015 551.7437 226.5015 552.5405 c
226.5015 553.3374 225.8521 553.9834 225.0513 553.9834 c
224.25 553.9834 223.6011 553.3374 223.6011 552.5405 c
223.6011 551.7437 224.25 551.0977 225.0513 551.0977 c
b
224.957 552.7529 m
225.7578 552.7529 226.4072 553.3989 226.4072 554.1958 c
226.4072 554.9927 225.7578 555.6387 224.957 555.6387 c
224.1563 555.6387 223.5068 554.9927 223.5068 554.1958 c
223.5068 553.3989 224.1563 552.7529 224.957 552.7529 c
b
224.5488 553.8774 m
225.3501 553.8774 225.999 554.5234 225.999 555.3198 c
225.999 556.1167 225.3501 556.7627 224.5488 556.7627 c
223.748 556.7627 223.0986 556.1167 223.0986 555.3198 c
223.0986 554.5234 223.748 553.8774 224.5488 553.8774 c
b
223.6069 554.7832 m
224.4082 554.7832 225.0576 555.4287 225.0576 556.2256 c
225.0576 557.0225 224.4082 557.6685 223.6069 557.6685 c
222.8062 557.6685 222.1567 557.0225 222.1567 556.2256 c
222.1567 555.4287 222.8062 554.7832 223.6069 554.7832 c
b
222.6968 555.9697 m
223.4976 555.9697 224.147 556.6157 224.147 557.4126 c
224.147 558.2095 223.4976 558.8555 222.6968 558.8555 c
221.896 558.8555 221.2466 558.2095 221.2466 557.4126 c
221.2466 556.6157 221.896 555.9697 222.6968 555.9697 c
b
220.4995 560.0859 m
221.3003 560.0859 221.9497 560.7324 221.9497 561.5288 c
221.9497 562.3262 221.3003 562.9717 220.4995 562.9717 c
219.6982 562.9717 219.0493 562.3262 219.0493 561.5288 c
219.0493 560.7324 219.6982 560.0859 220.4995 560.0859 c
b
221.5981 561.1167 m
222.3989 561.1167 223.0483 561.7627 223.0483 562.5596 c
223.0483 563.3564 222.3989 564.0024 221.5981 564.0024 c
220.7969 564.0024 220.1479 563.3564 220.1479 562.5596 c
220.1479 561.7627 220.7969 561.1167 221.5981 561.1167 c
b
220.562 561.5542 m
221.3633 561.5542 222.0122 562.2002 222.0122 562.9971 c
222.0122 563.7939 221.3633 564.4395 220.562 564.4395 c
219.7612 564.4395 219.1118 563.7939 219.1118 562.9971 c
219.1118 562.2002 219.7612 561.5542 220.562 561.5542 c
b
220.0913 563.5684 m
220.8921 563.5684 221.5415 564.2144 221.5415 565.0112 c
221.5415 565.8081 220.8921 566.4541 220.0913 566.4541 c
219.2905 566.4541 218.6411 565.8081 218.6411 565.0112 c
218.6411 564.2144 219.2905 563.5684 220.0913 563.5684 c
b
220.9858 564.0527 m
221.7866 564.0527 222.436 564.6987 222.436 565.4956 c
222.436 566.2925 221.7866 566.938 220.9858 566.938 c
220.1851 566.938 219.5356 566.2925 219.5356 565.4956 c
219.5356 564.6987 220.1851 564.0527 220.9858 564.0527 c
b
220.4209 565.2705 m
221.2217 565.2705 221.8711 565.9165 221.8711 566.7134 c
221.8711 567.5103 221.2217 568.1563 220.4209 568.1563 c
219.6201 568.1563 218.9707 567.5103 218.9707 566.7134 c
218.9707 565.9165 219.6201 565.2705 220.4209 565.2705 c
b
219.124 565.2705 m
219.9253 565.2705 220.5747 565.9165 220.5747 566.7134 c
220.5747 567.5103 219.9253 568.1563 219.124 568.1563 c
218.3232 568.1563 217.6738 567.5103 217.6738 566.7134 c
217.6738 565.9165 218.3232 565.2705 219.124 565.2705 c
b
218.5908 566.832 m
219.3916 566.832 220.041 567.478 220.041 568.2749 c
220.041 569.0718 219.3916 569.7178 218.5908 569.7178 c
217.7896 569.7178 217.1401 569.0718 217.1401 568.2749 c
217.1401 567.478 217.7896 566.832 218.5908 566.832 c
b
219.6265 568.3315 m
220.4277 568.3315 221.0767 568.9775 221.0767 569.7739 c
221.0767 570.5708 220.4277 571.2168 219.6265 571.2168 c
218.8257 571.2168 218.1763 570.5708 218.1763 569.7739 c
218.1763 568.9775 218.8257 568.3315 219.6265 568.3315 c
b
217.5078 568.3315 m
218.3086 568.3315 218.958 568.9775 218.958 569.7739 c
218.958 570.5708 218.3086 571.2168 217.5078 571.2168 c
216.7065 571.2168 216.0571 570.5708 216.0571 569.7739 c
216.0571 568.9775 216.7065 568.3315 217.5078 568.3315 c
b
218.2612 570.1426 m
219.062 570.1426 219.7114 570.7886 219.7114 571.5854 c
219.7114 572.3823 219.062 573.0283 218.2612 573.0283 c
217.46 573.0283 216.811 572.3823 216.811 571.5854 c
216.811 570.7886 217.46 570.1426 218.2612 570.1426 c
b
216.8203 573.1724 m
217.6211 573.1724 218.2705 573.8184 218.2705 574.6152 c
218.2705 575.4121 217.6211 576.0581 216.8203 576.0581 c
216.0195 576.0581 215.3701 575.4121 215.3701 574.6152 c
215.3701 573.8184 216.0195 573.1724 216.8203 573.1724 c
b
214.4658 575.8896 m
215.2666 575.8896 215.916 576.5352 215.916 577.332 c
215.916 578.1289 215.2666 578.7749 214.4658 578.7749 c
213.665 578.7749 213.0156 578.1289 213.0156 577.332 c
213.0156 576.5352 213.665 575.8896 214.4658 575.8896 c
b
213.2949 580.0898 m
214.0957 580.0898 214.7451 580.7363 214.7451 581.5327 c
214.7451 582.3296 214.0957 582.9756 213.2949 582.9756 c
212.4941 582.9756 211.8447 582.3296 211.8447 581.5327 c
211.8447 580.7363 212.4941 580.0898 213.2949 580.0898 c
b
211.7095 583.3848 m
212.5107 583.3848 213.1597 584.0313 213.1597 584.8276 c
213.1597 585.6245 212.5107 586.2705 211.7095 586.2705 c
210.9087 586.2705 210.2593 585.6245 210.2593 584.8276 c
210.2593 584.0313 210.9087 583.3848 211.7095 583.3848 c
b
210.7676 585.5088 m
211.5688 585.5088 212.2178 586.1548 212.2178 586.9517 c
212.2178 587.7485 211.5688 588.3945 210.7676 588.3945 c
209.9668 588.3945 209.3174 587.7485 209.3174 586.9517 c
209.3174 586.1548 209.9668 585.5088 210.7676 585.5088 c
b
210.5479 587.0391 m
211.3491 587.0391 211.998 587.6851 211.998 588.4819 c
211.998 589.2788 211.3491 589.9248 210.5479 589.9248 c
209.7471 589.9248 209.0977 589.2788 209.0977 588.4819 c
209.0977 587.6851 209.7471 587.0391 210.5479 587.0391 c
b
210.1396 588.2886 m
210.9409 588.2886 211.5903 588.9346 211.5903 589.7314 c
211.5903 590.5278 210.9409 591.1738 210.1396 591.1738 c
209.3389 591.1738 208.6895 590.5278 208.6895 589.7314 c
208.6895 588.9346 209.3389 588.2886 210.1396 588.2886 c
b
209.5747 590.0996 m
210.376 590.0996 211.0249 590.7456 211.0249 591.543 c
211.0249 592.3394 210.376 592.9854 209.5747 592.9854 c
208.7739 592.9854 208.1245 592.3394 208.1245 591.543 c
208.1245 590.7456 208.7739 590.0996 209.5747 590.0996 c
b
208.9468 591.0366 m
209.748 591.0366 210.3975 591.6826 210.3975 592.4795 c
210.3975 593.2764 209.748 593.9224 208.9468 593.9224 c
208.146 593.9224 207.4971 593.2764 207.4971 592.4795 c
207.4971 591.6826 208.146 591.0366 208.9468 591.0366 c
b
208.2563 592.7231 m
209.0571 592.7231 209.7065 593.3691 209.7065 594.166 c
209.7065 594.9629 209.0571 595.6089 208.2563 595.6089 c
207.4556 595.6089 206.8062 594.9629 206.8062 594.166 c
206.8062 593.3691 207.4556 592.7231 208.2563 592.7231 c
b
207.3086 594.1602 m
208.1094 594.1602 208.7588 594.8057 208.7588 595.6025 c
208.7588 596.3994 208.1094 597.0454 207.3086 597.0454 c
206.5073 597.0454 205.8584 596.3994 205.8584 595.6025 c
205.8584 594.8057 206.5073 594.1602 207.3086 594.1602 c
b
206.4136 595.8623 m
207.2148 595.8623 207.8638 596.5083 207.8638 597.3052 c
207.8638 598.1016 207.2148 598.7476 206.4136 598.7476 c
205.6128 598.7476 204.9634 598.1016 204.9634 597.3052 c
204.9634 596.5083 205.6128 595.8623 206.4136 595.8623 c
b
207.3086 595.9087 m
208.1094 595.9087 208.7588 596.5547 208.7588 597.3516 c
208.7588 598.1484 208.1094 598.7944 207.3086 598.7944 c
206.5073 598.7944 205.8584 598.1484 205.8584 597.3516 c
205.8584 596.5547 206.5073 595.9087 207.3086 595.9087 c
b
205.2681 597.3145 m
206.0688 597.3145 206.7183 597.9604 206.7183 598.7573 c
206.7183 599.5542 206.0688 600.2002 205.2681 600.2002 c
204.4673 600.2002 203.8179 599.5542 203.8179 598.7573 c
203.8179 597.9604 204.4673 597.3145 205.2681 597.3145 c
b
204.5771 598.4072 m
205.3784 598.4072 206.0278 599.0532 206.0278 599.8501 c
206.0278 600.647 205.3784 601.293 204.5771 601.293 c
203.7764 601.293 203.127 600.647 203.127 599.8501 c
203.127 599.0532 203.7764 598.4072 204.5771 598.4072 c
b
203.6982 599.813 m
204.4995 599.813 205.1484 600.459 205.1484 601.2559 c
205.1484 602.0527 204.4995 602.6987 203.6982 602.6987 c
202.8975 602.6987 202.248 602.0527 202.248 601.2559 c
202.248 600.459 202.8975 599.813 203.6982 599.813 c
b
202.6309 601.4058 m
203.4321 601.4058 204.0811 602.0518 204.0811 602.8486 c
204.0811 603.6455 203.4321 604.2915 202.6309 604.2915 c
201.8301 604.2915 201.1807 603.6455 201.1807 602.8486 c
201.1807 602.0518 201.8301 601.4058 202.6309 601.4058 c
b
1 w
188.7964 590.4224 m
188.7964 628.4001 L
180.7603 628.4001 L
180.7603 590.4224 L
188.7964 590.4224 L
f
0 To
0 1 -1 0 162.9331 510.8799 0 Tp
0 Tv
TP
-55.5668 0 Td
0 Tr
0 g
%_ 0 50 XQ
/_Times-Roman 10 10 -4.2871 Tf
0 Ts
99.491 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
34.1998 0 Xb
XB
0 0 0 TC
100 100 100 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 99 Th
0 Tq
0 Tg
0 0 Tl
0 Tc
0 Tw
(Cross section  \(barn) Tx 
100 Tt
1 Tc
(s/) Tx 
0 Tt
0 Tc
(atom\)) Tx 
(\r) TX 
TO
0 To
0 1 -1 0 162.9331 254.2134 0 Tp
0 Tv
TP
-55.5668 0 Td
0 Tr
(Cross section  \(barn) Tx 
100 Tt
1 Tc
(s/) Tx 
0 Tt
0 Tc
(atom\)) Tx 
(\r) TX 
TO
u
0 To
1 0 0 1 185.4551 385.6821 0 Tp
0 Tv
TP
-22.8673 0 Td
0 Tr
/_Times-Roman 9 9 -3.8584 Tf
100.5133 100 Tz
34.3754 0 Xb
XB
2 Ta
(10 mb) Tx 
(\r) TX 
TO
0 To
1 0 0 1 185.3794 435.1343 0 Tp
0 Tv
TP
-11.3077 0 Td
0 Tr
(1 b) Tx 
(\r) TX 
TO
0 To
1 0 0 1 185.4551 510.0913 0 Tp
0 Tv
TP
-15.8308 0 Td
0 Tr
(1 kb) Tx 
(\r) TX 
TO
0 To
1 0 0 1 185.9365 585.3643 0 Tp
0 Tv
TP
-19.3513 0 Td
0 Tr
(1 Mb) Tx 
(\r) TX 
TO
U
0 To
1 0 0 1 336.0859 598.394 0 Tp
0 Tv
TP
-37.3902 0 Td
0 Tr
/_Times-Roman 10 10 -4.2871 Tf
1 Ta
(\(a\) Carbon ) Tx 
100 Tt
1 Tc
(\() Tx 
/_Times-Italic 10 10 -4.1309 Tf
0 Tt
0 Tc
(Z ) Tx 
/_Times-Roman 10 10 -4.2871 Tf
(= 6\)) Tx 
(\r) TX 
TO
0 To
1 0 0 1 242.6289 478.0103 0 Tp
0 Tv
TP
-37.3593 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
2 Ta
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-4 Ts
(Rayleigh) Tx 
(\r) TX 
TO
0 To
1 0 0 1 389.5674 195.4668 0 Tp
0 Tv
TP
-24.2339 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-4 Ts
(g.d.r.) Tx 
(\r) TX 
TO
0 To
1 0 0 1 274.5269 399.5356 0 Tp
0 Tv
TP
-38.3244 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-4 Ts
(Compton) Tx 
(\r) TX 
TO
0 To
1 0 0 1 280.5269 168.2026 0 Tp
0 Tv
TP
-38.3244 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-4 Ts
(Compton) Tx 
(\r) TX 
TO
0 To
1 0 0 1 243.5107 280.0977 0 Tp
0 Tv
TP
-37.3593 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-4 Ts
(Rayleigh) Tx 
(\r) TX 
TO
0 To
1 0 0 1 399.1069 415.5273 0 Tp
0 Tv
TP
-18.6671 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
100 100 Tz
50 Tt
0.5225 Tc
(k) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
100.5133 100 Tz
0 Tt
0 Tc
(nuc) Tx 
(\r) TX 
TO
0 To
1 0 0 1 410.4404 210.1943 0 Tp
0 Tv
TP
-18.6671 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
100 100 Tz
50 Tt
0.5225 Tc
(k) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
100.5133 100 Tz
0 Tt
0 Tc
(nuc) Tx 
(\r) TX 
TO
0 To
1 0 0 1 409.9121 398.5942 0 Tp
0 Tv
TP
-10.0735 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
100 100 Tz
50 Tt
0.5225 Tc
(k) Tx 
/_Times-Italic 8.5497 8.5497 -3.5318 Tf
-2.8499 Ts
100.5133 100 Tz
0.4275 Tc
(e) Tx 
(\r) TX 
TO
0 To
1 0 0 1 234.6704 543.1997 0 Tp
0 Tv
TP
-18.7412 0 Td
0 Tr
/_Symbol 10.4496 10.4496 -3.0617 Tf
0 Ts
0 Tt
0 Tc
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
(p.e.) Tx 
(\r) TX 
TO
0 R
0 G
0.48 w
189.1387 380.666 m
189.1387 629.0208 L
436.0059 629.0208 L
436.0059 380.666 L
S
0 O
1 g
0.5 w
304.3081 586.2461 m
305.1089 586.2461 305.7583 586.8921 305.7583 587.689 c
305.7583 588.4858 305.1089 589.1318 304.3081 589.1318 c
303.5068 589.1318 302.8579 588.4858 302.8579 587.689 c
302.8579 586.8921 303.5068 586.2461 304.3081 586.2461 c
b
0 To
1 0 0 1 347.6929 585.2964 0 Tp
0 Tv
TP
-36.5995 0 Td
0 Tr
0 g
1 w
/_Times-Roman 9.4996 9.4996 -4.0726 Tf
0 Ts
1 Ta
(- experimental ) Tx 
/_Symbol 10.4496 10.4496 -3.0617 Tf
(s) Tx 
/_Times-Roman 8.5497 8.5497 -3.6653 Tf
-2.8499 Ts
(tot) Tx 
(\r) TX 
TO
u
0 Ap
0 R
0 G
0.48 w
214.0527 387.6621 m
214.0527 380.666 L
S
238.7158 387.6621 m
238.7158 380.666 L
S
263.3755 387.6621 m
263.3755 380.666 L
S
288.0381 387.6621 m
288.0381 380.666 L
S
312.6978 387.6621 m
312.6978 380.666 L
S
337.3608 387.6621 m
337.3608 380.666 L
S
362.02 387.6621 m
362.02 380.666 L
S
386.6831 387.6621 m
386.6831 380.666 L
S
411.3423 387.6621 m
411.3423 380.666 L
S
U
u
214.0527 380.4536 m
214.0527 373.4575 L
S
238.7158 380.4536 m
238.7158 373.4575 L
S
263.3755 380.4536 m
263.3755 373.4575 L
S
288.0381 380.4536 m
288.0381 373.4575 L
S
312.6978 380.4536 m
312.6978 373.4575 L
S
337.3608 380.4536 m
337.3608 373.4575 L
S
362.02 380.4536 m
362.02 373.4575 L
S
386.6831 380.4536 m
386.6831 373.4575 L
S
411.3423 380.4536 m
411.3423 373.4575 L
S
U
u
214.0527 141.9146 m
214.0527 134.9185 L
S
238.7158 141.9146 m
238.7158 134.9185 L
S
263.3755 141.9146 m
263.3755 134.9185 L
S
288.0381 141.9146 m
288.0381 134.9185 L
S
312.6978 141.9146 m
312.6978 134.9185 L
S
337.3608 141.9146 m
337.3608 134.9185 L
S
362.02 141.9146 m
362.02 134.9185 L
S
386.6831 141.9146 m
386.6831 134.9185 L
S
411.3423 141.9146 m
411.3423 134.9185 L
S
U
0.4 w 2.5 M
344.2871 172.9458 m
365.3838 194.043 l
S
0 O
0 g
1 w 4 M
346.1128 177.1357 m
343.3931 171.9976 l
349.7246 176.1514 l
F
/BBAccumRotation (0.101134) XT
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 11 0 153 153 Lb
(Giant Resonance) Ln
0 A
300 Ar
0 R
0 G
0 J 0 j 0.5 w 2.5 M [1 1 ]0 d
0 XR
329.5742 134.0771 m
329.6572 134.2637 l
329.8721 134.8223 l
330.0879 135.3809 l
330.3047 135.9404 l
330.5029 136.4766 l
330.7026 137.0117 l
330.9014 137.5479 l
331.084 138.083 l
331.2822 138.6187 l
331.4653 139.1548 l
331.6475 139.667 l
331.8301 140.2026 l
332.0132 140.7148 l
332.1787 141.2275 l
332.3608 141.7402 l
332.5264 142.252 l
332.6934 142.7646 l
332.8584 143.2764 l
333.0078 143.7891 l
333.1738 144.3022 l
333.3232 144.814 l
333.4893 145.3271 l
333.6382 145.8389 l
333.7871 146.3516 l
333.937 146.8643 l
334.0859 147.376 l
334.2188 147.8887 l
334.3682 148.4009 l
334.501 148.9136 l
334.6504 149.4487 l
334.7832 149.9614 l
334.9155 150.4741 l
335.0488 151.0093 l
335.1812 151.5225 l
335.3135 152.0576 l
335.4463 152.5933 l
335.5625 153.1294 l
335.6953 153.6646 l
335.8115 154.2002 l
335.9443 154.7363 l
336.0605 155.2949 l
336.1763 155.8311 l
336.292 156.3896 l
336.4253 156.9487 l
336.541 157.5078 l
336.6406 158.0898 l
336.7568 158.6489 l
336.873 159.2314 l
336.9893 159.8135 l
337.0889 160.3955 l
337.2051 160.9785 l
337.3047 161.583 l
337.4204 162.166 l
337.5195 162.7715 l
337.6367 163.3774 l
337.7358 164.0059 l
337.835 164.6113 l
337.9346 165.2407 l
338.0342 165.8691 l
338.1338 166.4746 l
338.2334 167.127 l
338.333 167.7559 l
338.4331 168.3848 l
338.5322 169.0137 l
338.6313 169.6426 l
338.7139 170.271 l
338.8145 170.8999 l
338.8975 171.5293 l
338.9971 172.1348 l
339.0957 172.7402 l
339.1787 173.3457 l
339.2617 173.9053 l
339.3613 174.4868 l
339.4443 175.0225 l
339.5273 175.5352 l
339.627 176.0244 l
339.71 176.4668 l
339.793 176.8857 l
339.876 177.2822 l
339.958 177.6079 l
340.041 177.9106 l
340.125 178.144 l
340.208 178.3535 l
340.2905 178.4932 l
340.373 178.5859 l
340.4561 178.6094 l
340.5391 178.6094 l
340.6055 178.5396 l
340.6885 178.4233 l
340.7715 178.2607 l
340.8379 178.0498 l
340.9209 177.8174 l
341.0039 177.5381 l
341.0693 177.2119 l
341.1533 176.8623 l
341.2188 176.5137 l
341.3027 176.1172 l
341.3691 175.6982 l
341.4521 175.2783 l
341.5181 174.8599 l
341.584 174.3936 l
341.667 173.9512 l
341.7334 173.4854 l
341.7998 173.043 l
341.8833 172.5771 l
341.9492 172.1113 l
342.0156 171.6455 l
342.082 171.1797 l
342.1484 170.7139 l
342.2148 170.271 l
342.2813 169.8057 l
342.3633 169.3623 l
342.4307 168.9204 l
342.4961 168.4775 l
342.5635 168.0586 l
342.6133 167.6392 l
342.6792 167.2202 l
342.7451 166.8008 l
342.8115 166.3818 l
342.8779 165.9863 l
342.9443 165.5898 l
343.0107 165.1943 l
343.0771 164.8213 l
343.127 164.4258 l
343.1938 164.0522 l
343.2598 163.7031 l
343.3096 163.3301 l
343.376 162.9814 l
343.4424 162.6318 l
343.4922 162.2822 l
343.5581 161.9331 l
343.624 161.6064 l
343.6748 161.2808 l
343.7412 160.9551 l
343.791 160.6284 l
343.8574 160.3262 l
343.9067 160 l
343.9736 159.6973 l
344.0234 159.3945 l
344.0894 159.1152 l
344.1387 158.8115 l
344.2051 158.5327 l
344.2549 158.2534 l
344.3047 157.9736 l
344.3711 157.6943 l
344.4209 157.415 l
344.4707 157.1582 l
344.5371 156.8789 l
344.5869 156.623 l
344.6367 156.3662 l
344.7031 156.1104 l
344.7529 155.8545 l
344.8022 155.6216 l
344.8525 155.3647 l
344.9019 155.1318 l
344.9688 154.8994 l
345.0186 154.666 l
345.0684 154.4331 l
345.1182 154.2002 l
345.167 153.9678 l
345.2173 153.7578 l
345.2666 153.5249 l
345.3164 153.3154 l
345.3828 153.106 l
345.4326 152.8726 l
345.4824 152.6631 l
345.5322 152.4536 l
345.5825 152.2676 l
345.6318 152.0576 l
345.6816 151.8477 l
345.7314 151.6616 l
345.7646 151.4521 l
345.8145 151.2661 l
345.8643 151.0791 l
345.9141 150.8701 l
345.9639 150.6836 l
346.0137 150.4976 l
346.0625 150.3105 l
346.1128 150.124 l
346.1621 149.9614 l
346.1963 149.7754 l
346.2461 149.5889 l
346.2959 149.4258 l
346.3457 149.2393 l
346.395 149.0762 l
346.4287 148.9136 l
346.478 148.7275 l
346.5273 148.5635 l
346.5771 148.4009 l
346.6104 148.2378 l
346.6602 148.0752 l
346.71 147.9121 l
346.7432 147.7485 l
346.793 147.5854 l
346.8438 147.4463 l
346.876 147.2832 l
346.9258 147.1201 l
346.9756 146.9805 l
347.0088 146.8169 l
347.0586 146.6772 l
347.1084 146.5146 l
347.1416 146.375 l
347.1914 146.2354 l
347.2246 146.0723 l
347.2744 145.9316 l
347.3076 145.792 l
347.3569 145.6523 l
347.4072 145.5127 l
347.4404 145.373 l
347.4902 145.2334 l
347.5234 145.0933 l
347.5732 144.9536 l
347.6064 144.814 l
347.6563 144.6748 l
347.689 144.5581 l
347.7217 144.4185 l
347.7715 144.2788 l
347.8047 144.1616 l
347.8545 144.0225 l
347.8877 143.9058 l
347.9375 143.7661 l
347.9707 143.6499 l
348.0039 143.5103 l
348.0537 143.3931 l
348.0874 143.2764 l
348.1201 143.1367 l
348.1699 143.0205 l
348.2031 142.9043 l
348.2529 142.7881 l
348.2866 142.6719 l
348.3193 142.5313 l
348.3525 142.415 l
348.4023 142.2988 l
348.4355 142.1821 l
348.4688 142.0659 l
348.5186 141.9492 l
348.5518 141.833 l
348.5845 141.7402 l
348.6182 141.623 l
348.6675 141.5068 l
348.7012 141.3901 l
348.7344 141.2739 l
348.7676 141.1807 l
348.8174 141.0645 l
348.8506 140.9482 l
348.8838 140.855 l
348.9165 140.7378 l
348.9502 140.6216 l
348.9995 140.5283 l
349.0322 140.4121 l
349.0654 140.3193 l
349.0986 140.2026 l
349.1318 140.1094 l
349.165 139.9932 l
349.2148 139.8994 l
349.248 139.8066 l
349.2817 139.6899 l
349.3145 139.5967 l
349.3477 139.5039 l
349.3809 139.3877 l
349.4141 139.2944 l
349.4473 139.2012 l
349.4805 139.1084 l
349.5137 138.9912 l
349.5635 138.8979 l
349.5967 138.8047 l
349.6299 138.7119 l
349.6631 138.6187 l
349.6963 138.5254 l
349.7295 138.4326 l
349.7627 138.3398 l
349.7954 138.2461 l
349.8286 138.1523 l
349.8623 138.0596 l
349.895 137.9663 l
349.9277 137.873 l
349.9609 137.7803 l
349.9941 137.6875 l
350.0283 137.5938 l
350.0615 137.501 l
350.0947 137.4082 l
350.1279 137.3379 l
350.1606 137.2441 l
350.1943 137.1514 l
350.2271 137.0581 l
350.2598 136.9883 l
350.2764 136.8955 l
350.3096 136.8022 l
350.3428 136.709 l
350.376 136.6392 l
350.4092 136.5459 l
350.4424 136.4521 l
350.4756 136.3828 l
350.5093 136.2891 l
350.542 136.2197 l
350.5752 136.1265 l
350.6084 136.0332 l
350.625 135.9639 l
350.6582 135.8706 l
350.6914 135.8008 l
350.7246 135.708 l
350.7578 135.6377 l
350.791 135.5439 l
350.8242 135.4741 l
350.8408 135.4043 l
350.874 135.3115 l
350.9072 135.2412 l
350.9409 135.1484 l
350.9736 135.0786 l
350.9902 135.0088 l
351.0225 134.916 l
351.0566 134.8457 l
351.0898 134.7764 l
351.1226 134.6821 l
351.1392 134.6123 l
351.1719 134.5425 l
351.2051 134.4727 l
351.2383 134.3799 l
351.2715 134.3096 l
351.2881 134.2402 l
351.3213 134.1699 l
351.3545 134.0771 l
S
u
0.2835 w []0 d
189.0684 134.0771 m
436.1396 134.0771 l
S
1 D
213.7686 134.0771 m
213.7686 139.0146 l
S
263.1865 134.0771 m
263.1865 139.0146 l
S
312.6035 134.0771 m
312.6035 139.0146 l
S
362.0215 134.0771 m
362.0215 139.0146 l
S
411.439 134.0771 m
411.439 139.0146 l
S
0 D
189.0684 134.0771 m
189.0684 136.5459 l
S
1 D
238.4863 134.0771 m
238.4863 136.5459 l
S
287.9033 134.0771 m
287.9033 136.5459 l
S
0 D
337.3047 134.0771 m
337.3047 136.5459 l
S
386.7217 134.0771 m
386.7217 136.5459 l
S
1 D
436.1396 134.0771 m
436.1396 136.5459 l
S
0 D
189.0684 380.6826 m
436.1396 380.6826 l
S
213.7686 380.6826 m
213.7686 375.7446 l
S
1 D
263.1865 380.6826 m
263.1865 375.7446 l
S
312.6035 380.6826 m
312.6035 375.7446 l
S
362.0215 380.6826 m
362.0215 375.7446 l
S
0 D
411.439 380.6826 m
411.439 375.7446 l
S
1 D
189.0684 380.6826 m
189.0684 378.2139 l
S
0 D
238.4863 380.6826 m
238.4863 378.2139 l
S
287.9033 380.6826 m
287.9033 378.2139 l
S
1 D
337.3047 380.6826 m
337.3047 378.2139 l
S
0 D
386.7217 380.6826 m
386.7217 378.2139 l
S
436.1396 380.6826 m
436.1396 378.2139 l
S
189.0684 134.0771 m
189.0684 380.6826 l
S
189.0684 158.7422 m
194.0117 158.7422 l
S
189.0684 208.0493 m
194.0117 208.0493 l
S
1 D
189.0684 257.3799 m
194.0117 257.3799 l
S
189.0684 306.71 m
194.0117 306.71 l
S
0 D
189.0684 356.0176 m
194.0117 356.0176 l
S
189.0684 134.0771 m
191.5405 134.0771 l
S
1 D
189.0684 183.4077 m
191.5405 183.4077 l
S
189.0684 232.7144 m
191.5405 232.7144 l
S
189.0684 282.0449 m
191.5405 282.0449 l
S
189.0684 331.3521 m
191.5405 331.3521 l
S
189.0684 380.6826 m
191.5405 380.6826 l
S
0 D
436.1396 134.0771 m
436.1396 380.6826 l
S
436.1396 158.7422 m
431.1968 158.7422 l
S
1 D
436.1396 208.0493 m
431.1968 208.0493 l
S
436.1396 257.3799 m
431.1968 257.3799 l
S
0 D
436.1396 306.71 m
431.1968 306.71 l
S
436.1396 356.0176 m
431.1968 356.0176 l
S
1 D
436.1396 134.0771 m
433.668 134.0771 l
S
0 D
436.1396 183.4077 m
433.668 183.4077 l
S
1 D
436.1396 232.7144 m
433.668 232.7144 l
S
0 D
436.1396 282.0449 m
433.668 282.0449 l
S
1 D
436.1396 331.3521 m
433.668 331.3521 l
S
0 D
436.1396 380.6826 m
433.668 380.6826 l
S
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
