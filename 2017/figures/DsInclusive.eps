%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: DsInclusive.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: charles wohl
%%CreationDate: 11/13/15
%%BoundingBox: 0 0 284 585
%%HiResBoundingBox: 0 0 283.9854 584.1123
%%CropBox: 0 0 283.9854 584.1123
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-03-21T21:14:59-07:00</xap:CreateDate>
         <xap:ModifyDate>2015-11-13T13:25:14-08:00</xap:ModifyDate>
         <xap:MetadataDate>2015-11-13T13:25:14-08:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>124</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAB8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUp8w6jfWU&#xA;dmLMxLLc3Hos0yNIoUQySbKrxmtYx3xVLf0r5m/5aLL/AKRZf+ynDStfpXzP/wAtNl/0iy/9lONK&#xA;1+lPNP8Ay1WP/SJN/wBlONK1+lPNf/LVYf8ASJN/2VY0qYeXb/Wb3639dlt2+q3Ho/uYXj5KYY5K&#xA;/FNLQ1kwKwfUPJn5r3Ii+q679UokykG6nYgtPO0JPw/H6YkhkqdyE9I/Cxwq9TwK7FVK7maC0mmU&#xA;AtFGzgHpVQTirEPM/wCYKaBrVno0ga5v7r0H4w2zlEhnkeISNIZeIo8dKEjr4VIKsr9PUv8Af8P/&#xA;ACJb/qrgVE4q7FXYq7FUm8yQvNLpMafaN41K7dLSc4qgdU0vXI9Mu5NOhjn1BIJGs4ZHCo8wQmNW&#xA;O1AWoCcNoYRcD82luUtdP0uWe2EsTfX702aO68Q7hkjkQKhPwbLyHWp6YqhNLP54LHaz3+kK4Prt&#xA;c29bbmCqIsY+CUArzq60bkdwRsDil6LYaVrL2Nu97FHFetEhuYo35IspUc1Vj1AatDjaEV5bgkgl&#xA;1aOT7QvFrTfraQYEp1irsVdiqG1P/jm3f/GGT/iJxVjnmfy3HJ5hsfM51mXTJNPiEARQXjdXk3Vk&#xA;5AMrs6h6qTsvErvVVlmKuxV2KuxV2Kpdqv8Avdo//MY//UHcYqlfnXy/5o1lLFdB1z9CNbStJcP6&#xA;by+qCAApCSQ7D4juetMVYTof5ffmpJcxjWPNl3DbonJzFIxLkzurJT1WKk24UhqkBug2bkVTM/l9&#xA;+YxiCf42mEgjYesIn5GQi4IbiZSlOU6bUO0a+9VWReSvKepaC2pS6nqr6xd30qFbqVSsghhQJHGx&#xA;LuCR8TfCAN+mBU10r/e7WP8AmMT/AKg7fFUxxV2KuxVDan/xzbv/AIwyf8ROKsY86x+XdQufqmo2&#xA;aT3ulR299BcTsVjiWe5EfIem3q1Uw8q8KLRTWtMKswwKgdY1zStHt47jUrhbaKWQQxFgzF5GBYIq&#xA;qCSaKTsMVSPU/wA0vIWmrfNd6vEv6O4fW1VZHK+qCY6cVPLnT4SNq08RiqB1782tG0m61CzWwvLq&#xA;4057WGcqIkT1r4Rm3jPOQSBmEhP2NuDV/ZqqydNZEdvAb62mt7uSNZJbWKOS6MRb9lngR1qDt+rF&#xA;Ul1q81N7zS5Iba7iBu2Mfregqb2s/QRLczA0/mj+dMKpsZf+Xy++i2/7N8CrTN/y/ah9Fp/2bYqs&#xA;M/8Ay/6l9Fn/ANmuKrDcf9rDU/osv+zTFWvLklw11qvFnnhN4vKa5Bhm/wB5IP8AdXpRj5dMVT7F&#xA;XYq7FUNqf/HNu/8AjDJ/xA4qkuvx+WIZrSfXbyA3FtKr2T3Udq8kUj1CvHyiLJ9k/EKdDviqdfVJ&#xA;/wDltm+6H/qniqnq+i6XrFqLTU7ZLq3WRJljkFQHiYMrDw3H3bdMVQNx5H8nXN1Jd3GiWUt1KjRy&#xA;zvBGXZHLF1ZiKkN6jVHvirrvyT5RvJpZrrSLWaWcu0zvEpLmRCjlvGqkjFU6RFRQiiiqAFA7AYql&#xA;+q/73aP/AMxj/wDUHcYqmOKuxV2KuxVLtK/3u1j/AJjE/wCoO3xVMcVdirsVQ2p/8c27/wCMMn/E&#xA;TirzD82dGt7nzbompcKtaIi30lzayTWiWvrGUyerEVkjkj9JjsabgncLhCvWMCuxV2KuxV2Kpdqv&#xA;+92j/wDMY/8A1B3GKpjiqQ+bvL1/rNtAlnfPamJyZoA8iRXEb0Dxy+mRVeNe3ttXFVDyL5Sfy3Y3&#xA;sMzwS3F7dy3cktvEYh++PPhQsx4oxYIOy0HvirJcVS7Sv97tY/5jE/6g7fFUxxV2KuxVDan/AMc2&#xA;7/4wyf8AETirDfzC/Mafyvf29kunmeOeITfWZFk9B6uUaD1EUpG/Q8n23wqznk/pc+B58a+nUVrT&#xA;7NemBV2KuxV2KuxVKtcuIre60iWUkILxqkAsd7S4HRQTiqv+nNN/nf8A5FS/804q79Oab/O//IqX&#xA;/mnFXfpzTf53/wCRUv8AzTirv05pv87/APIqX/mnFUHol6s9/qxhikeJrxf31AqilpB1Vir/APC4&#xA;qxjyP5188axrC2ms6KLK0MTubhYZ4hUE7hpSR8J+AoRyJ32AphV6DgV2KobU/wDjm3f/ABhk/wCI&#xA;nFWC/nJb+XE0/StR1r69wS6+pRfUJVRh9aozc4mDLMv+jj4OJ8dhUhCvQ8VdirsVdirsVSvWYo5b&#xA;vR0kHJTeNUf9GlxiqL/R1l/vofef64qk/mLVtG0JYWurSWVZg5UwitPT41X4mWrNy+FRuaHwwqhv&#xA;Jet2vma0vbsWUMENrdy2kRiuDceoIjT1fsR8VcUZOtVIOBWQ/o6y/wB9D7z/AFxVCaNFHFd6wkY4&#xA;qLxaD/o0t8VTTFXYq7FUNqf/ABzbv/jDJ/xE4qxP80/0Mul6dJqouDGt7GIfqyQTMJOLNX0biK4R&#xA;mop4EJyB+yy1xVlvrL+jvX/fcfR5/YPr041/u6cuf+Tx69sVRGKuxV2KuxVJ/MF0LWfSJijSBbxh&#xA;xTjy3tLgftFR+OKrv8RRf8sdx/yR/wCqmGlaPmKEihs7gg/8Yf8AqpjSrYtctIV4xWE0ancqggUV&#xA;pTtJ4DGlX/4ii/5Y7j/kj/1UxpVvl+6F1Pq8wRow14o4vx5bWluP2Sw/HAqcYq7FXYqhtT/45t3/&#xA;AMYZP+InFUj86XnmG2hgTSofrIu29ArGjerC1C3riULOgUceNGj6mtcVTzjffo3jyX6/6NOXL4fW&#xA;49eXDpy78P8AY9sVROKuxV2KuxVIvNfXSf8AmNP/AFCz4QqCxQ7FXYq7FUT5WnRZtUiIfk14CCEc&#xA;r/vLB1YDiPvxKWQ4FdirsVQ2p/8AHNu/+MMn/ETiqT+eItfm0iOLRlLNJMq3nGRIiLejcyXZoyFr&#xA;TlwYNTpiqfekvo+jVuHHhXk3KlKfbryr71riq/FXYq7FXYqlGv24uLjSIi3Gt42/XpaXBxVf+g0/&#xA;38f+B/tw2rv0Gn+/j/wP9uNqhLCLR9R9X9H6nDeeg3Cb6u6S8G/lbgx4n54qi/0Gn+/j/wAD/bja&#xA;rNAtxb3GrxBuVLxd+nW0tzgVN8VdirsVQ2p/8c27/wCMMn/ETirF/wAzE0uXT7C21W8kstPluf37&#xA;qrFJKIwWFyske8jMOC/EzNQKK4VZT+jrP9Hfo30/9D9H6v6XJv7rjw48q8vs961wKiMVdirsVdiq&#xA;Xar/AL3aP/zGP/1B3GKpjiqTeZ/Li63BaBbmS1uLK4S5gljJAJWoKuB9paGoH8wU9sVa8q+WY/L1&#xA;lcWqXUl39ZuZbyWWUIrerOQ0p+BVHxScm9q0GwGKp1iqXaV/vdrH/MYn/UHb4qmOKuxV2KobU/8A&#xA;jm3f/GGT/iJxV53+dStF+gLiKaG1Z7wQTTyGSNvTYhgqSxgkHkNl6sdh1JBCvTcCuxV2KuxV2Kpd&#xA;qv8Avdo//MY//UHcYqmOKuxV2KuxVKtMnQapq8RD8jdpQhHK/wC8cHVwOI+/FUp8ufmZ5Z8w6mth&#xA;prSyNIhkinIT02Xdk+y7OpeNfUXko+Gh2qKqsplmihieWZ1jijBZ5HIVVUbkknYDFVlpeWl5bpc2&#xA;c8dzbybpNCyujU22ZSQcVU9T/wCObd/8YZP+InFXl352389tqejPp99INUtqyx6ckzQGjtxWf9yj&#xA;XBX4GV+J402b7QqQr1rArsVdirsVdiqTaxf2MeoaSslzEhS8fmGdQV/0Scb1O3XFUd+l9J/5bYP+&#xA;Rqf1xV36X0n/AJbYP+Rqf1xV36X0n/ltg/5Gp/XFXfpfSf8Altg/5Gp/XFUNok8M13rEkMiyxm8W&#xA;joQw2tLfuMVVLHy7oNhcfWbHT7e2uOLJ6sUSI/B25stQK05dsVS38wrTVLvydqMOlml/SN4CY/W3&#xA;jmRz+7CSk7KeiMfBWO2Kof8ALPS10zylb2nqXNw6u7SXd7btaTzMxryaKRY5PhFEBdFJC9KUxVkO&#xA;p/8AHNu/+MMn/EDirG/NXljyz5jkSa61JoZ4lCxenOjRVAkUFoJOcLmkzCpWtDsRirJP0npv/LXD&#xA;/wAjF/riq+1vLO7RntZ450RijtE6uAwAJUlSd9+mKpbP5w8rQl1OqW8jxzC3ljhcTOkpMi8ZFi5s&#xA;lDBJXkBTi1ehxVseb/K7+j6OqW9wJ547SM28gnHrygNGjGLnx5B1I5U6jxGKpjd3tnZxiW7njt4i&#xA;eIeV1RSx3pViN9sVY7cX1vqPmOzjjZpbVJIWTkrrGS1vfVeMsAHDBR8S1BwqjfM8jaZ5e1G/sLIX&#xA;d/bwO9nahWb1J6UiQhSDRnoDvsMCsCu/PXmj9GNLpuiw3+oW8MT31okEytFPdtS3h4NKslVPFXbj&#xA;x+01VCGpVHSebdZnsLufTbO1uWtLImV1gmbjqEic4YTB6qzBavHGagVPI1TgRirMvLg+v6FY315C&#xA;i3N1Ck0qLFJCFLjlw9OUs4K14nl160HTAqro0aR3msKg4qLxaAf8wlviqZ4qlvmaUxeXtRZVkdjb&#xA;yIiw8hJydSo4lAxWhP2qfD17YqkH5SxzR+SLRJ4rqCcS3AlivhxuFYTOCHXfj06VPzxVlGp/8c27&#xA;/wCMMn/ETiqJxV2KsVsvy08r2enyWFut1FbSS+oViu7iKiiT1EjHpunwp0XuOxrviqB078sUsbri&#xA;upPPp0k1zez208SOzX1yF/0gEUWqsGf41bdj2OFVXyv+XMWgy2tqLoX2i2MYaxtrpOUsV16jSGYM&#xA;CEJ+L7RXkOgNNsCsrj07T4rp7uO2iS6kqJLhUUSNWleTgVPTFUo8yQGK8068gZ0uGuAjMgDHhFa3&#xA;TCikNv8AvG7YqxBvzREUFi0y35uNQFp9VggjtpS7X0TzQopotW4xkEePSo3wqjrfzow1yXT7md7O&#xA;SeRYrGVvQLXcoQlkSkVGZOPH4WbfbYkAqqGlfmDDqGqyWFkL760ITc3Mno2qoqK8kKs8g2PN4aIR&#xA;XkCpHwmuKoWL8zdUSeG1vtP1KG7uHhjhjiS2ZS100yW6MZ0tmVpGtZAKrQUFSKjFWaeXrjjd6rDc&#xA;zg3TXinhIUWQj6pBT4VC/qwKnuKpJ54+onyhrEd8I2t57WWD05iAjvMvpxx793kdVX3OKpF+S+n3&#xA;On/l/ZWlysaSpNdErFC1sgD3DsKROFK9enTFWX6n/wAc27/4wyf8ROKonFXYq7FXYq7FXYqlOuxy&#xA;yXOkLFKYXN41HABp/olx2YEYqlEn5eaArT3DW9srzN607/V4Fq6gUcngNwFG+G1Y75f1zyxN5Ogu&#xA;0N7D5ajWeWK6vLRZowkgcSv6iCagb1nTr4jpiqEZPy0aG4jEhsLe1Fsi38NqICRKIp4ljeJPVCn6&#xA;vHswAagG+KGb3vk6x1Mepe8LgyAVaaCIufsfa5Jyr+6XrvtilG6FHLHc6ukshlcXi/GQF/49Lemy&#xA;gDAqbYql/mJEfQdQDxLP/o8hWF41nVnCkoPSchX+KlFJ3xViv5QS+Y5vLLz6zbWtkkkx+qWdpb/V&#xA;fTCjjLyjCoPikBYHv12rxVVmOp/8c27/AOMMn/ETiqU69568s6FqFrpuo3YTULxolgtVBaQrMzIs&#xA;nEb8OUZBI70HUjFU/wAVdirsVdirsVSfzDcSQTaRLGgkYXjUVm4je0uB1Ab9WKrJtWuJonhlsoni&#xA;kUpIhmYgqwoQf3XcYVSm80rSLvRJtDk0a3TSbh1kns4pmjRysiyEMEjFQzIOQ7jrirr7TrS+0+ys&#xA;LqzMkFg0MkB+uTBy9tQwu7hOTsjAMC37W/XFU5/Td7/yyR/8jm/6pYq7y9cSTzavLIgjY3i1VW5D&#xA;a0tx1IX9WBU4xVJ/OEE0/lfU0heGOVbd5Ee4RZIgYxzBYOQv7OzH7J37YqkP5N1/wJbVKt/pF0AU&#xA;VFFBO4G0ZZengcSrLdT/AOObd/8AGGT/AIicVYH5tW3tvzBt9Ruo/VhFjaxD1bMzW0Y+szF3kmSh&#xA;Vt04E1EdK8fjqCr0XArsVdirsVdiqT+YYXmn0iNKcjeN19rS4xV36KuvFfv/ALMKu/RV14r9/wDZ&#xA;irv0VdeK/f8A2Yq79FXXiv3/ANmKu8vQvDPq8b05C8Xp72lvgVrT/OPlrUdTfS7K/Se9j9QNGofj&#xA;WJyjgPTgSGVtgex8Diqh5/1W20vyZq93c8hGbdoBw4ludyRBHTmVX7cg6nFUj/JGKGL8vbOKIMqp&#xA;PdAq8wuGBM7mhlAHLr706VOKsz1P/jm3f/GGT/iJxVjev/mJpmka5No0tncXcsNvbTyywKGiiN1L&#xA;JEi3EjcY4a+nVeTfF2FaclWW4q7FXYq7FXYql2q/73aP/wAxj/8AUHcYqjbmR47eWSONpZERmSJa&#xA;BmIFQortU++KvPbG1/NSTyjLfX19KPMa2l1bjS1jtkha6kCpbzJKgrwQjma77kUFKEqhW0v8ytN8&#xA;vR3dpqGoXWsXnoerauIJTbcWDXK/vnkiI4K4iKjkWYcjQbKvTolZYkVmZ2VQGduPJiB1PEBan2FM&#xA;CpXptrbPqWsSvCjSC7UByoLU+pwbVOKoTRfIHlHRNSbUdK09bW5cEEoz8Pi2qEJ4ggfCDTYbdMVZ&#xA;CQD1xVwAHTFUNqf/ABzbv/jDJ/xE4q8t/MTyxI/nX9IQaJe3aXUVo7ahbyO1sk8byI3rwUuQ4ESR&#xA;04wChoef7SFXreBXYq7FXYq7FUu1X/e7R/8AmMf/AKg7jFUxxV2KuxV2KpdpX+92sf8AMYn/AFB2&#xA;+KpjirsVdiqG1P8A45t3/wAYZP8AiJxV59+bmtHTNU8tK1yLc3d0Ibfg5ikY+pH6qeoRIoDLxpRO&#xA;YI+FhXCFelYFdirsVdirsVSnXrcXFzpERd4wbxvijYo21pcd1IOKqn6ET/lruv8AkfL/AM1Yq79C&#xA;J/y13X/I+X/mrFXfoRP+Wu6/5Hy/81Yq79CJ/wAtd1/yPl/5qxVT0G3Fvc6vEHeQC8X4pGLtvaW/&#xA;diTiqbYq7FXYqhtT/wCObd/8YZP+InFXnn5s65YWOt+W7fVNNiubCWfklxNc/Vf3wlj4pEYmM7sh&#xA;Cu0fAo+wPTYq9MwK7FXYq7FXYql2q/73aP8A8xj/APUHcYqmOKpR/jHylVx+mrH92sjykXMRCLCv&#xA;ORnPKihF3Ne2KqreZ/La2hvW1azFmGKG5NxEIuYYoV58uNQykUr1GKphHJHLGskbB43AZHUgqykV&#xA;BBHUHFUs0yBDqmrykvyF2lAHcL/vHB1QHifuxVNcVdirsVQ2p/8AHNu/+MMn/ETirz/8y4dYuNfs&#xA;FOlG/wBGt0hmW49Kf9zces5f99azerQhI+SPCU6NyBGxCvScCscv/N1xbeaY9Bi0e6ui9ubkXMXA&#xA;KVU0biZCkdFJUGrg1PTpVVJLjzh52vPMcWjWOk/opJLWWRri/gknT6xylEEYlt5PTHNIuZ5fZ6Hd&#xA;lqVRHl/zF54v/M2oaddW1pFY6e0SrI0F1E068UWeSKVi0fwTrKFXj8SlTt+0FZRNrVjbyvHdepbh&#xA;DRppYnWCnYmenpAH3brt1xVBXWp2V5qekpayrOqXHqerGyuhD212goyk1IMTVxVOnBKkK3EkEBhQ&#xA;0PjvirDbH8rdGtfKc3lx7iW5hmEim8lWI3AS4C/WVDhR/f0bl7NQUAACqtqH5dWF75ftdHN28X1c&#xA;QCW9SKATTC1KtAJDwoQjxo1B1477Yqy0dPH3xVLtK/3u1j/mMT/qDt8VTHFXYq7FUNqf/HNu/wDj&#xA;DJ/xE4qicVdirqCte+KuxV2KuxVjd5FEnnC2dEVXka3MjAAFiLe/UFj32FMKskwK7FXYq7FUu0r/&#xA;AHu1j/mMT/qDt8VTHFXYq7FUNqf/ABzbv/jDJ/xE4qicVdirybWtW/PSK4LaXpvrRSL6kkcgtCI5&#xA;oZwzQQtzRvRkgPAO4dy1SOIpUqnFxrn5q3egaxOmirpeoKOGi2yNDPMZfVJVpmZ3i9IRhQ9FrUtx&#xA;6AlVG6bJ+Y6Szzuq3NnBxWK1vhBFdXCLawtzV7ekSO87SqQ3wig7YqyZr3UIYYBLYSXE7RqZzbND&#xA;6ayU+JQZpImIr02wKx/WBq41awv44HiMtwIlSWVC4EdtcsvwQwXIA/eNvyb5eBVPPV/5erz/AKR/&#xA;+vGBXer/AMvV5/0j/wDXjFXer/y9Xn/SP/14xV3q/wDL1ef9I/8A14xVD6GjvfatILiZlF4oKSIq&#xA;cv8ARIOoMat91MVY/wCUvy4udD1xdUkvomVY5oxaW8TRoBLM8lAWkf4f3lWHdgGJrhVnWBXYqhtT&#xA;/wCObd/8YZP+IHFXfVJ/+W2b7of+qeKu+qT/APLbN90P/VPFUTirsVdirsVS7Vf97tH/AOYx/wDq&#xA;DuMVTHFWK+Zb3z2NVksdEtYjYzadcPDfED1I7xRxjFXb0/tOrBWQggHfwVR+lW3me11Wa3vLqO+0&#xA;f02lhu5ECXXqySkiFghEZSNP2uArUCm2Kp3iqXaV/vdrH/MYn/UHb4qmOKuxV2KobU/+Obd/8YZP&#xA;+InFWPeZ/wAw9K0DWLTR5Lee6v7kwMY4VBCQ3EjxCVmOwAeOm9Oo96KsqxV2KpX5l1t9E0iXUltJ&#xA;L0QsgeGEgMFdgvPf9la1bwG+KpVL5k8xx3FxMmmrdaZaQLcTtF6izsJDI6pApBWV1hEfIA/aqB2w&#xA;qnQ1O59C3b9HXDzzRLLLCnp/uiwHwM8jxqWBqPhJ6fLAqUa7qN80+lUs5bNheNxmuJbaOP8A3lnF&#xA;CytcEbf5GFU0+sWn/V4/4e3/AOaMCu+sWn/V4/4e3/5oxV31i0/6vH/D2/8AzRirvrFp/wBXj/h7&#xA;f/mjFVPQWRrjVyk/1hfri/vaqa/6Jb/yALiqbYq7FXYqhtT/AOObd/8AGGT/AIicVYB590bWX866&#xA;Zr2mwXanTbeNJLy3QzfupZz6sUUSzQAkhV9QyLIKcaJsxBV6RgV2KuIBBBFQdiDirgABQbAYq7FU&#xA;u1X/AHu0f/mMf/qDuMVTHFWO+YPN50me6tl0+4nlitGuIZ1CmF5THM8cOzepyb6s3RNtvHFVfS9b&#xA;1WXVG0vUtNa3uFje4+tQt6lqY/VZIwJCFbmQASpXFU7xVKtMW4/SmrlXQQ/W05IUJY/6HB0bkB/w&#xA;uKprirsVdiqG1P8A45t3/wAYZP8AiJxVgn5sXmq29/5ZWwlli9a7ZJ2hujbEJyiNWHONXXx5VHah&#xA;5cWIV6JgV2KuxV2KuxVK9aMou9HMSqz/AFxqKzFR/vJcdwG/ViqL9TUv98Q/8jm/6pYq0TqDFSba&#xA;AlTVSZW2NCKj914HFW/U1L/fEP8AyOb/AKpYq71NS/3xD/yOb/qliqE0Uym71gyqqv8AXFqqsWH+&#xA;8lv3IX9WKppirsVdiqG1P/jm3f8Axhk/4icVea/ndawtc+WbqSGGT0ryifWJJ4I2mDxPChkgV6MS&#xA;h4KacmoAeoJCvSvXvv0b6/1UfXvR9T6l6gp6vCvperSn2vh5U98ConFXYq7FXYql2q/73aP/AMxj&#xA;/wDUHcYqmOKpJr2h6hqt7bR/X5bfSODfXbaBxFI0qujwskgQyAfCwccx2xV2g/4jtrmaw1eQXyhT&#xA;LBqShYwV5emkTIiIvPivqOa05MeIC0AVTvFUu0r/AHu1j/mMT/qDt8VTHFXYq7FUNqf/ABzbv/jD&#xA;J/xE4qlev+ULTWpjLNfXtvyjSJ4IJyIHWNzIOUDh4uRLbtx5UpvsMVT3FXYqgNcn1K30uWXTIRcX&#xA;qmP0oT0YGRQ3y+EnfFWPrN5v0mK31TU7lJrN4xNrVoIw728giReNoUK8kMgbZqneu56lWQLNqN7b&#xA;W13Yyx2sU8SS+ldW7vIOY5UYLLFxIBoR2OBUDqml+Zrn6tJBqFqktrN6yH6s61JieIgkzSdpPDFV&#xA;31TzX/y2w/cP+qeFXfVPNf8Ay2w/cP8Aqnirvqnmv/lth+4f9U8Vd9U81/8ALbD9w/6p4qraRp+q&#xA;2slzJd3MUrXU3rOFQ1FIkiADAqP911+zgVC+SH82NogPmkKuqeoeQX06U4ryp6dF4iXmI+/Djy+K&#xA;uKp/irsVU7qH17aWCvH1UZOVK05ClaYqpenqX+/4f+RLf9VcVd6epf7/AIf+RLf9VcVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0022B3A8368C11DF9766EFE866BA517E</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4318BC4D9C8BE511A6C0E40992667632</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0022B3A7368C11DF9766EFE866BA517E</stRef:instanceID>
            <stRef:documentID>uuid:534827A335F211DFB70BC4E366B901A6</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>21.590000</stDim:w>
            <stDim:h>27.940000</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>10.0d1e1</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Times.dfont</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Symbol</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>6.1d7e3</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Symbol.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Myriad-Roman</stFnt:fontName>
                  <stFnt:fontFamily>Myriad</stFnt:fontFamily>
                  <stFnt:fontFace>Roman</stFnt:fontFace>
                  <stFnt:fontType>Type 1</stFnt:fontType>
                  <stFnt:versionString>001.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriaRom; Myriad</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>RAAAAA+Symbol</stFnt:fontName>
                  <stFnt:fontFamily>RAAAAA+Symbol</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=0 Y=0 K=100</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -584.112 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 584.112 li
283.985 584.112 li
283.985 0 li
cp
clp
[1 0 0 1 0 0 ]ct
170.364 30.563 mo
85.6084 30.563 li
85.6084 8.16943 li
170.364 8.16943 li
170.364 30.563 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.137255 cmyk
f
170.031 131.476 mo
85.2749 131.476 li
85.2749 125.24 li
170.031 125.24 li
170.031 131.476 li
cp
0 0 0 0.129412 cmyk
f
170.031 191.004 mo
85.2749 191.004 li
85.2749 157.555 li
170.031 157.555 li
170.031 191.004 li
cp
0 0 0 0.137255 cmyk
f
170.031 288.969 mo
85.2749 288.969 li
85.2749 279.445 li
170.031 279.445 li
170.031 288.969 li
cp
0 0 0 0.105882 cmyk
f
170.031 258.638 mo
85.2749 258.638 li
85.2749 253.933 li
170.031 253.933 li
170.031 258.638 li
cp
0 0 0 0.12549 cmyk
f
170.031 301.328 mo
85.2749 301.328 li
85.2749 298.635 li
170.031 298.635 li
170.031 301.328 li
cp
0 0 0 0.117647 cmyk
f
85.1333 298.72 mo
170.173 298.72 li
0 0 0 0 cmyk
f
0.75 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
85.1333 298.72 mo
170.173 298.72 li
0 0 0 1 cmyk
@
170.031 340.106 mo
85.2749 340.106 li
85.2749 320.264 li
170.031 320.264 li
170.031 340.106 li
cp
0 0 0 0.117647 cmyk
f
170.031 390.563 mo
85.2749 390.563 li
85.2749 386.027 li
170.031 386.027 li
170.031 390.563 li
cp
0 0 0 0.129412 cmyk
f
169.824 574.849 mo
178.328 574.849 li
0 0 0 0 cmyk
f
169.824 574.849 mo
178.328 574.849 li
0 0 0 1 cmyk
@
169.824 518.156 mo
178.328 518.156 li
0 0 0 0 cmyk
f
169.824 518.156 mo
178.328 518.156 li
0 0 0 1 cmyk
@
169.824 461.463 mo
178.328 461.463 li
0 0 0 0 cmyk
f
169.824 461.463 mo
178.328 461.463 li
0 0 0 1 cmyk
@
169.824 404.771 mo
178.328 404.771 li
0 0 0 0 cmyk
f
169.824 404.771 mo
178.328 404.771 li
0 0 0 1 cmyk
@
169.824 348.077 mo
178.328 348.077 li
0 0 0 0 cmyk
f
169.824 348.077 mo
178.328 348.077 li
0 0 0 1 cmyk
@
169.824 291.384 mo
178.328 291.384 li
0 0 0 0 cmyk
f
169.824 291.384 mo
178.328 291.384 li
0 0 0 1 cmyk
@
169.824 234.691 mo
178.328 234.691 li
0 0 0 0 cmyk
f
169.824 234.691 mo
178.328 234.691 li
0 0 0 1 cmyk
@
169.824 177.999 mo
178.328 177.999 li
0 0 0 0 cmyk
f
169.824 177.999 mo
178.328 177.999 li
0 0 0 1 cmyk
@
169.824 121.306 mo
178.328 121.306 li
0 0 0 0 cmyk
f
169.824 121.306 mo
178.328 121.306 li
0 0 0 1 cmyk
@
169.824 64.6123 mo
178.328 64.6123 li
0 0 0 0 cmyk
f
169.824 64.6123 mo
178.328 64.6123 li
0 0 0 1 cmyk
@
169.824 7.91943 mo
178.328 7.91943 li
0 0 0 0 cmyk
f
169.824 7.91943 mo
178.328 7.91943 li
0 0 0 1 cmyk
@
85.1333 571.696 mo
170.174 571.696 li
0 0 0 0 cmyk
f
85.1333 571.696 mo
170.174 571.696 li
0 0 0 1 cmyk
@
85.1333 540.232 mo
170.173 540.232 li
0 0 0 0 cmyk
f
85.1333 540.232 mo
170.173 540.232 li
0 0 0 1 cmyk
@
85.1333 509.958 mo
170.173 509.958 li
0 0 0 0 cmyk
f
85.1333 509.958 mo
170.173 509.958 li
0 0 0 1 cmyk
@
85.1333 498.732 mo
170.173 498.732 li
0 0 0 0 cmyk
f
85.1333 498.732 mo
170.173 498.732 li
0 0 0 1 cmyk
@
85.1333 470.5 mo
170.173 470.5 li
0 0 0 0 cmyk
f
85.1333 470.5 mo
170.173 470.5 li
0 0 0 1 cmyk
@
85.1333 386.027 mo
170.173 386.027 li
0 0 0 0 cmyk
f
85.1333 386.027 mo
170.173 386.027 li
0 0 0 1 cmyk
@
76.6294 253.933 mo
170.173 253.933 li
0 0 0 0 cmyk
f
76.6294 253.933 mo
170.173 253.933 li
0 0 0 1 cmyk
@
85.1333 279.445 mo
170.173 279.445 li
0 0 0 0 cmyk
f
85.1333 279.445 mo
170.173 279.445 li
0 0 0 1 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: Times-Roman Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 52 /four putdup 54 /six putdup 56 /eight putdef/FontBBox {-203 -428 1700 1271} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/zero <1C60D8A8C9B7A73DB9A6590C6FE2B7096DCA6F9A5EA5CF6E8AC2157EC7418EBDC43117FA8257DD5995ADA72B55217A703B5CBF244854B4360CFDF4258ECD5C9DEB492AEA5EC77E976B17AE7E2222D3F2CC89571B26AFB82DDBE99926812437BF7851C7D506B52E7A7DE1242CAC6D81645AF838199FD3EBA9B534D647714BFDCAF64F05E4> |-/one <1C60D8A8C9B7A73DB999B05B43470AE76323D53E9C54AE29C0ACC4151BDD30C8F3109BFE7DACF9BA339B31B8666788A01E1F3860FDA3F22312D6A6628C8CCA55270976BF3BB8008DD87D719627657135E81F194E374733A743BBCD543132801A49C4BA675F59C41D> |-/two <1C60D8A8C9B7A73DE72BAD97A1AB14497350B04AEDCC89B810A7A7579EC67BBA1BB072CAE80FF5F224043D73141B835306B538E1A090321AB63325D8B3A58C70F1FD34F3553B37A8BF6164DDA11E437012DC022ABF8601BBE36E43FA1BA89215476687E89F4C0A4BCB6119B7B6C22E9A6D30709E37D3141BAD532924FFAD1DE501B4> |-/four <1C60D8A8C9B7A73DB992534E0CF1B84939C969D2AC65F1AE73EE883487A67D0ECB26822C5FF826C828AC8594DE5FF3D9E5AE6F090B> |-/six <1C60D8A8C9B7A73DB6D2877672A15D933475028E1A563F35D9B429BC044364BBEA6C8D8E288B5629F6BF21219495DF799C22E6D194E7EF19D2BF50638A5DFD525E61CAA756DFB58BC6CF02B70355716B1567E587BDF24EE1CD60FDA306A5E8E3EC9A065FDF865555F45DE4B3A9666958B7C5B64C412BD6705A27F81BA359AA5385B74802E199214ED2C08D85C8D9515B8A71A37E696B11B788D46272326187B79B809C5ABF82FEBD4C4DE257125A17BA43> |-/eight <1C60D8A8C9B7A73DB9AA6386F0D433AA59FB601CE68D9D6220D80F865EFA1568339E25269162989F3B16CF5E1B85465E9B09AD3E1F38EB0BC3CC5B97FD7D595D378E5AF532DAC1C0173C6C74DAC1A5EFEB2094038777E094111D458CECDBEE2BFAFA1B194747D5AC182EDAECA7759C2CF7DA7B573AFBC7EB901C25328CA8529A5AF9870597DA9D6CE71ED45E3423137009ACC2E00FA606E5775C8BEB1D188095A69B5C3B51980741130E91409210303836D6B9BCD44F7FE0CC1ED555E839C2D5D70041FF279A3E977285D9F41DC64AB105D99B2CC098F9CEE3C23260EF9612DAD441A57B770C0516F587622E5D85261682E95C452BF079> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OKEDQC+Times-Roman /Times-Roman findfont ct_VMDictPut/OKEDQC+Times-Roman*1 [48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 199{/.notdef}rp]OKEDQC+Times-Roman nfOKEDQC+Times-Roman*1 [12 0 0 -12 0 0 ]msf182.58 12.0009 mo(100)[6 6 0 ]xsh182.58 125.385 mo(80)[6 0 ]xsh182.58 238.772 mo(60)[6 0 ]xsh182.58 352.157 mo(40)[6 0 ]xsh182.58 465.543 mo(20)[6 0 ]xsh182.58 578.929 mo(0)sh34.3877 576.188 mo
34.3877 576.751 34.4434 577.129 34.5547 577.322 cv
34.666 577.516 34.8657 577.612 35.1548 577.612 cv
35.6152 577.612 35.9956 577.291 36.2964 576.647 cv
36.5967 576.005 36.7471 575.187 36.7471 574.194 cv
36.7471 572.628 li
37.8564 572.628 li
37.8564 576.569 li
37.8564 576.929 37.8936 577.192 37.9673 577.36 cv
38.041 577.528 38.1563 577.612 38.3115 577.612 cv
38.479 577.612 38.6064 577.529 38.6938 577.363 cv
38.7813 577.197 38.8252 576.952 38.8252 576.628 cv
38.8252 576.464 li
39.0791 576.464 li
39.083 576.495 39.0859 576.529 39.0879 576.566 cv
39.0898 576.604 39.0908 576.657 39.0908 576.728 cv
39.0908 577.173 38.9961 577.518 38.8066 577.762 cv
38.6172 578.006 38.3506 578.128 38.0068 578.128 cv
37.6045 578.128 37.3018 577.957 37.0986 577.615 cv
36.8955 577.273 36.792 576.757 36.7881 576.065 cv
36.6045 576.776 36.3594 577.298 36.0532 577.63 cv
35.7471 577.962 35.3594 578.128 34.8906 578.128 cv
34.5396 578.128 34.2485 578.023 34.0181 577.814 cv
33.7881 577.605 33.6279 577.298 33.5381 576.892 cv
33.5303 576.966 33.5264 577.079 33.5264 577.231 cv
33.5264 577.734 33.6543 578.297 33.9102 578.92 cv
34.166 579.542 34.2939 579.91 34.2939 580.023 cv
34.2939 580.179 34.249 580.302 34.1592 580.392 cv
34.0693 580.481 33.9463 580.526 33.79 580.526 cv
33.6064 580.526 33.4746 580.461 33.3945 580.33 cv
33.3145 580.199 33.2744 579.985 33.2744 579.689 cv
33.2744 579.619 33.2822 579.388 33.2979 578.995 cv
33.3135 578.603 33.3213 578.246 33.3213 577.927 cv
33.3213 577.638 33.3154 577.231 33.3037 576.708 cv
33.292 576.186 33.2861 575.807 33.2861 575.572 cv
33.2861 572.628 li
34.3877 572.628 li
34.3877 576.188 li
cp
0 0 0 1 cmyk
f
41.7861 568.987 mo
42.458 568.987 li
42.458 571.167 li
44.6377 571.167 li
44.6377 571.839 li
42.458 571.839 li
42.458 574.019 li
41.7861 574.019 li
41.7861 571.839 li
39.6064 571.839 li
39.6064 571.167 li
41.7861 571.167 li
41.7861 568.987 li
cp
f
46.0371 573.521 mo
45.9824 573.373 45.9238 573.268 45.8613 573.206 cv
45.7988 573.144 45.7266 573.112 45.6445 573.112 cv
45.4922 573.112 45.3838 573.179 45.3193 573.311 cv
45.2549 573.443 45.2227 573.665 45.2227 573.976 cv
45.2227 574.081 li
44.9609 574.081 li
44.9609 574.058 44.959 574.022 44.9551 573.976 cv
44.9512 573.929 44.9492 573.892 44.9492 573.864 cv
44.9492 573.407 45.0391 573.056 45.2183 572.81 cv
45.3979 572.563 45.6558 572.44 45.9912 572.44 cv
46.292 572.44 46.5356 572.527 46.7231 572.701 cv
46.9102 572.875 47.1055 573.225 47.3086 573.748 cv
48.4746 576.723 li
48.834 576.168 49.0957 575.655 49.2598 575.185 cv
49.4238 574.714 49.5059 574.246 49.5059 573.782 cv
49.5059 573.495 li
49.5059 573.108 49.5625 572.836 49.6758 572.678 cv
49.7891 572.52 49.9805 572.44 50.25 572.44 cv
50.418 572.44 50.5518 572.484 50.6514 572.572 cv
50.751 572.66 50.8008 572.78 50.8008 572.933 cv
50.8008 573.202 50.4736 573.918 49.8193 575.079 cv
49.165 576.241 48.6328 577.265 48.2227 578.151 cv
47.9121 578.151 li
46.0371 573.521 li
cp
f
52.8652 580.484 mo
52.8652 580.955 52.9116 581.271 53.0044 581.433 cv
53.0972 581.594 53.2642 581.675 53.5054 581.675 cv
53.8896 581.675 54.207 581.407 54.4575 580.871 cv
54.7085 580.336 54.834 579.654 54.834 578.828 cv
54.834 577.526 li
55.7559 577.526 li
55.7559 580.802 li
55.7559 581.103 55.7866 581.323 55.8486 581.464 cv
55.9106 581.604 56.0068 581.675 56.1377 581.675 cv
56.2778 581.675 56.3848 581.605 56.458 581.467 cv
56.5317 581.327 56.5684 581.122 56.5684 580.852 cv
56.5684 580.714 li
56.7773 580.714 li
56.7803 580.74 56.7827 580.769 56.7847 580.8 cv
56.7861 580.83 56.7871 580.875 56.7871 580.935 cv
56.7871 581.307 56.708 581.595 56.5503 581.799 cv
56.3921 582.003 56.1699 582.104 55.8838 582.104 cv
55.5483 582.104 55.2959 581.962 55.127 581.677 cv
54.9575 581.391 54.8711 580.96 54.8682 580.383 cv
54.7148 580.977 54.5103 581.411 54.2544 581.688 cv
53.998 581.966 53.6743 582.104 53.2832 582.104 cv
52.9897 582.104 52.7466 582.018 52.5542 581.843 cv
52.3618 581.668 52.228 581.411 52.1533 581.072 cv
52.1475 581.134 52.1445 581.229 52.1445 581.355 cv
52.1445 581.777 52.2515 582.248 52.4658 582.769 cv
52.6797 583.289 52.7871 583.597 52.7871 583.691 cv
52.7871 583.822 52.7495 583.925 52.6743 584 cv
52.5991 584.074 52.4961 584.112 52.3652 584.112 cv
52.2114 584.112 52.1011 584.058 52.0342 583.948 cv
51.9673 583.839 51.9336 583.66 51.9336 583.412 cv
51.9336 583.354 51.9399 583.16 51.9531 582.833 cv
51.9663 582.505 51.9727 582.207 51.9727 581.939 cv
51.9727 581.698 51.9678 581.359 51.958 580.922 cv
51.9482 580.485 51.9434 580.169 51.9434 579.973 cv
51.9434 577.526 li
52.8652 577.526 li
52.8652 580.484 li
cp
f
62.457 574.82 mo
90.8027 573.403 li
f
0.5 lw
62.457 574.82 mo
90.8027 573.403 li
@
120.097 553.63 mo
120.097 553.692 120.093 553.784 120.085 553.905 cv
120.062 554.764 120.05 555.38 120.05 555.755 cv
120.05 556.147 li
120.05 556.834 120.091 557.267 120.173 557.446 cv
120.255 557.626 120.405 557.716 120.624 557.716 cv
120.901 557.716 121.108 557.603 121.245 557.376 cv
121.382 557.15 121.46 556.789 121.479 556.294 cv
121.767 556.294 li
121.767 556.341 li
121.767 556.979 121.647 557.447 121.409 557.749 cv
121.171 558.05 120.803 558.2 120.303 558.2 cv
119.783 558.2 119.422 558.052 119.217 557.755 cv
119.012 557.458 118.909 556.782 118.909 555.728 cv
118.909 555.567 118.914 555.296 118.924 554.913 cv
118.934 554.53 118.944 554.095 118.956 553.606 cv
118.94 553.606 118.913 553.603 118.874 553.595 cv
118.58 553.571 118.377 553.56 118.264 553.56 cv
117.923 553.56 117.649 553.614 117.441 553.724 cv
117.234 553.833 117.106 553.989 117.06 554.192 cv
116.808 554.192 li
116.835 553.653 117.005 553.272 117.317 553.05 cv
117.63 552.827 118.167 552.716 118.93 552.716 cv
119.125 552.716 119.435 552.729 119.858 552.754 cv
120.282 552.779 120.609 552.792 120.841 552.792 cv
121.212 552.792 121.488 552.764 121.67 552.708 cv
121.852 552.651 121.942 552.566 121.942 552.454 cv
121.942 552.442 li
122.183 552.442 li
122.183 552.887 122.071 553.2 121.849 553.382 cv
121.626 553.563 121.233 553.653 120.671 553.653 cv
120.558 553.653 120.378 553.646 120.132 553.63 cv
120.097 553.63 li
cp
f
124.841 549.075 mo
125.513 549.075 li
125.513 551.255 li
127.692 551.255 li
127.692 551.927 li
125.513 551.927 li
125.513 554.106 li
124.841 554.106 li
124.841 551.927 li
122.661 551.927 li
122.661 551.255 li
124.841 551.255 li
124.841 549.075 li
cp
f
129.092 553.608 mo
129.037 553.461 128.979 553.355 128.916 553.294 cv
128.854 553.231 128.781 553.2 128.699 553.2 cv
128.547 553.2 128.438 553.267 128.374 553.398 cv
128.31 553.531 128.277 553.753 128.277 554.063 cv
128.277 554.169 li
128.016 554.169 li
128.016 554.146 128.014 554.11 128.01 554.063 cv
128.006 554.017 128.004 553.979 128.004 553.952 cv
128.004 553.495 128.094 553.144 128.273 552.897 cv
128.453 552.651 128.71 552.528 129.046 552.528 cv
129.347 552.528 129.591 552.615 129.778 552.789 cv
129.965 552.964 130.16 553.313 130.363 553.836 cv
131.529 556.811 li
131.889 556.256 132.15 555.743 132.314 555.272 cv
132.479 554.802 132.561 554.335 132.561 553.87 cv
132.561 553.583 li
132.561 553.196 132.617 552.924 132.73 552.766 cv
132.844 552.607 133.035 552.528 133.305 552.528 cv
133.473 552.528 133.606 552.572 133.706 552.66 cv
133.806 552.748 133.855 552.868 133.855 553.021 cv
133.855 553.29 133.528 554.005 132.874 555.167 cv
132.22 556.329 131.688 557.353 131.277 558.239 cv
130.967 558.239 li
129.092 553.608 li
cp
f
136.756 558.376 mo
136.756 558.428 136.753 558.505 136.746 558.605 cv
136.727 559.322 136.717 559.837 136.717 560.149 cv
136.717 560.477 li
136.717 561.05 136.751 561.411 136.819 561.562 cv
136.888 561.711 137.014 561.786 137.196 561.786 cv
137.428 561.786 137.601 561.691 137.715 561.503 cv
137.829 561.313 137.895 561.013 137.911 560.599 cv
138.15 560.599 li
138.15 560.638 li
138.15 561.168 138.051 561.559 137.853 561.809 cv
137.653 562.06 137.345 562.185 136.928 562.185 cv
136.494 562.185 136.191 562.061 136.021 561.813 cv
135.85 561.566 135.764 561.003 135.764 560.124 cv
135.764 559.99 135.768 559.765 135.776 559.445 cv
135.784 559.126 135.793 558.764 135.803 558.356 cv
135.79 558.356 135.767 558.354 135.734 558.347 cv
135.49 558.327 135.32 558.317 135.226 558.317 cv
134.942 558.317 134.714 558.363 134.542 558.455 cv
134.369 558.547 134.263 558.679 134.224 558.849 cv
134.014 558.849 li
134.036 558.397 134.179 558.079 134.439 557.894 cv
134.7 557.707 135.148 557.614 135.784 557.614 cv
135.946 557.614 136.205 557.625 136.559 557.646 cv
136.913 557.667 137.186 557.678 137.378 557.678 cv
137.688 557.678 137.918 557.654 138.07 557.607 cv
138.222 557.561 138.298 557.491 138.298 557.397 cv
138.298 557.388 li
138.498 557.388 li
138.498 557.758 138.405 558.019 138.219 558.169 cv
138.033 558.32 137.705 558.396 137.235 558.396 cv
137.141 558.396 136.991 558.389 136.785 558.376 cv
136.756 558.376 li
cp
f
120.931 530.408 mo
120.931 524.313 li
120.931 523.763 120.869 523.387 120.746 523.187 cv
120.623 522.985 120.405 522.885 120.093 522.885 cv
119.597 522.885 119.187 523.205 118.862 523.845 cv
118.538 524.485 118.376 525.301 118.376 526.292 cv
118.376 527.861 li
117.251 527.861 li
117.251 523.926 li
117.251 523.567 117.21 523.304 117.127 523.137 cv
117.045 522.969 116.917 522.885 116.744 522.885 cv
116.556 522.885 116.413 522.967 116.317 523.131 cv
116.221 523.294 116.173 523.536 116.173 523.855 cv
116.173 524.025 li
115.935 524.025 li
115.931 523.994 115.928 523.961 115.926 523.926 cv
115.924 523.891 115.923 523.84 115.923 523.773 cv
115.923 523.315 116.021 522.965 116.22 522.721 cv
116.417 522.476 116.695 522.354 117.056 522.354 cv
117.485 522.354 117.809 522.53 118.023 522.885 cv
118.239 523.238 118.349 523.778 118.353 524.506 cv
118.548 523.767 118.813 523.224 119.149 522.875 cv
119.484 522.527 119.91 522.354 120.426 522.354 cv
121.003 522.354 121.418 522.548 121.67 522.937 cv
121.922 523.326 122.048 523.983 122.048 524.91 cv
122.048 530.408 li
120.931 530.408 li
cp
f
126.827 520.752 mo
126.843 520.701 126.853 520.65 126.856 520.601 cv
126.86 520.55 126.862 520.509 126.862 520.478 cv
126.862 520.346 126.809 520.265 126.701 520.235 cv
126.594 520.206 126.381 520.193 126.062 520.197 cv
126.062 520.002 li
126.239 519.979 126.443 519.951 126.674 519.92 cv
126.904 519.89 127.056 519.868 127.126 519.856 cv
127.347 519.817 127.615 519.76 127.931 519.682 cv
127.958 519.682 127.986 519.701 128.014 519.74 cv
126.06 526.783 li
126.017 526.951 125.991 527.053 125.983 527.088 cv
125.976 527.123 125.972 527.158 125.972 527.193 cv
125.972 527.268 125.985 527.331 126.013 527.384 cv
126.04 527.437 126.091 527.463 126.165 527.463 cv
126.306 527.463 126.488 527.338 126.715 527.088 cv
126.941 526.838 127.132 526.596 127.288 526.361 cv
127.448 526.473 li
127.111 526.97 126.85 527.314 126.661 527.507 cv
126.336 527.832 126.009 527.994 125.681 527.994 cv
125.539 527.994 125.414 527.959 125.305 527.889 cv
125.136 527.782 125.052 527.602 125.052 527.348 cv
125.052 527.249 125.067 527.118 125.099 526.953 cv
125.121 526.855 125.149 526.743 125.185 526.615 cv
126.827 520.752 li
cp
f
130.368 518.83 mo
131.04 518.83 li
131.04 521.01 li
133.22 521.01 li
133.22 521.682 li
131.04 521.682 li
131.04 523.861 li
130.368 523.861 li
130.368 521.682 li
128.188 521.682 li
128.188 521.01 li
130.368 521.01 li
130.368 518.83 li
cp
f
134.619 523.363 mo
134.564 523.216 134.506 523.11 134.443 523.049 cv
134.381 522.986 134.309 522.955 134.227 522.955 cv
134.074 522.955 133.966 523.021 133.901 523.153 cv
133.837 523.286 133.805 523.508 133.805 523.818 cv
133.805 523.924 li
133.543 523.924 li
133.543 523.9 133.541 523.865 133.537 523.818 cv
133.533 523.771 133.531 523.734 133.531 523.707 cv
133.531 523.25 133.621 522.898 133.801 522.652 cv
133.979 522.406 134.237 522.283 134.573 522.283 cv
134.874 522.283 135.118 522.37 135.306 522.544 cv
135.492 522.719 135.688 523.067 135.891 523.591 cv
137.057 526.565 li
137.416 526.011 137.678 525.498 137.842 525.027 cv
138.006 524.557 138.088 524.09 138.088 523.625 cv
138.088 523.338 li
138.088 522.951 138.145 522.679 138.258 522.521 cv
138.371 522.362 138.563 522.283 138.832 522.283 cv
139 522.283 139.134 522.327 139.233 522.415 cv
139.333 522.503 139.383 522.623 139.383 522.775 cv
139.383 523.045 139.056 523.76 138.401 524.922 cv
137.747 526.084 137.215 527.107 136.805 527.994 cv
136.494 527.994 li
134.619 523.363 li
cp
f
35.7646 511.641 mo
35.7646 505.545 li
35.7646 504.995 35.7031 504.619 35.5801 504.419 cv
35.457 504.218 35.2393 504.117 34.9268 504.117 cv
34.4307 504.117 34.0205 504.438 33.6963 505.077 cv
33.3721 505.718 33.21 506.533 33.21 507.524 cv
33.21 509.094 li
32.085 509.094 li
32.085 505.158 li
32.085 504.8 32.0439 504.536 31.9609 504.369 cv
31.8789 504.201 31.751 504.117 31.5781 504.117 cv
31.3896 504.117 31.2471 504.199 31.1514 504.363 cv
31.0547 504.526 31.0068 504.769 31.0068 505.088 cv
31.0068 505.258 li
30.7686 505.258 li
30.7646 505.227 30.7617 505.193 30.7598 505.158 cv
30.7578 505.123 30.7568 505.072 30.7568 505.006 cv
30.7568 504.548 30.8555 504.197 31.0532 503.953 cv
31.251 503.708 31.5293 503.586 31.8896 503.586 cv
32.3198 503.586 32.6426 503.763 32.8579 504.117 cv
33.0732 504.471 33.1826 505.011 33.1865 505.738 cv
33.3818 504.999 33.6475 504.456 33.9829 504.107 cv
34.3184 503.76 34.7441 503.586 35.2598 503.586 cv
35.8374 503.586 36.252 503.78 36.5039 504.169 cv
36.7559 504.559 36.8818 505.216 36.8818 506.143 cv
36.8818 511.641 li
35.7646 511.641 li
cp
f
39.3994 503.82 mo
39.3994 500.444 li
40.3682 499.727 li
40.3682 503.171 li
39.3994 503.82 li
cp
f
44.231 501.984 mo
44.2466 501.934 44.2563 501.883 44.2603 501.833 cv
44.2642 501.782 44.2661 501.741 44.2661 501.71 cv
44.2661 501.578 44.2129 501.497 44.1055 501.468 cv
43.9985 501.438 43.7852 501.426 43.4653 501.43 cv
43.4653 501.234 li
43.6431 501.211 43.8472 501.184 44.0776 501.152 cv
44.3086 501.122 44.4595 501.101 44.5303 501.089 cv
44.7515 501.05 45.0195 500.992 45.335 500.914 cv
45.3628 500.914 45.3901 500.934 45.418 500.973 cv
43.4639 508.016 li
43.4209 508.184 43.3955 508.285 43.3877 508.32 cv
43.3799 508.355 43.376 508.391 43.376 508.426 cv
43.376 508.5 43.3896 508.563 43.417 508.616 cv
43.4443 508.669 43.4951 508.695 43.5693 508.695 cv
43.7095 508.695 43.8931 508.57 44.1191 508.32 cv
44.3452 508.07 44.5361 507.828 44.6924 507.594 cv
44.8525 507.705 li
44.5156 508.202 44.2534 508.547 44.0654 508.739 cv
43.7402 509.064 43.4131 509.227 43.0845 509.227 cv
42.9434 509.227 42.8179 509.191 42.7085 509.121 cv
42.54 509.015 42.4561 508.834 42.4561 508.58 cv
42.4561 508.481 42.4717 508.351 42.5029 508.186 cv
42.5249 508.088 42.5537 507.976 42.5889 507.848 cv
44.231 501.984 li
cp
f
47.7725 500.063 mo
48.4443 500.063 li
48.4443 502.242 li
50.624 502.242 li
50.624 502.914 li
48.4443 502.914 li
48.4443 505.094 li
47.7725 505.094 li
47.7725 502.914 li
45.5928 502.914 li
45.5928 502.242 li
47.7725 502.242 li
47.7725 500.063 li
cp
f
52.0234 504.596 mo
51.9688 504.448 51.9102 504.343 51.8477 504.281 cv
51.7852 504.219 51.7129 504.188 51.6309 504.188 cv
51.4785 504.188 51.3701 504.254 51.3057 504.386 cv
51.2412 504.519 51.209 504.74 51.209 505.051 cv
51.209 505.156 li
50.9473 505.156 li
50.9473 505.133 50.9453 505.098 50.9414 505.051 cv
50.9375 505.004 50.9355 504.967 50.9355 504.939 cv
50.9355 504.482 51.0254 504.131 51.2046 503.885 cv
51.3843 503.639 51.6421 503.516 51.9775 503.516 cv
52.2783 503.516 52.522 503.603 52.7095 503.776 cv
52.8965 503.951 53.0918 504.3 53.2949 504.823 cv
54.4609 507.798 li
54.8203 507.243 55.082 506.73 55.2461 506.26 cv
55.4102 505.789 55.4922 505.322 55.4922 504.857 cv
55.4922 504.57 li
55.4922 504.184 55.5488 503.911 55.6621 503.753 cv
55.7754 503.595 55.9668 503.516 56.2363 503.516 cv
56.4043 503.516 56.5381 503.56 56.6377 503.647 cv
56.7373 503.735 56.7871 503.855 56.7871 504.008 cv
56.7871 504.277 56.46 504.992 55.8057 506.154 cv
55.1514 507.316 54.6191 508.34 54.209 509.227 cv
53.8984 509.227 li
52.0234 504.596 li
cp
f
119.907 487.147 mo
120.575 487.147 121.123 486.879 121.549 486.343 cv
121.976 485.807 122.188 485.113 122.188 484.263 cv
122.188 483.673 122.076 483.202 121.852 482.849 cv
121.626 482.496 121.334 482.319 120.975 482.319 cv
120.579 482.319 120.303 482.497 120.145 482.852 cv
119.986 483.207 119.907 483.853 119.907 484.789 cv
119.907 487.147 li
cp
118.993 487.136 mo
118.993 486.463 li
118.993 485.522 119.012 484.856 119.049 484.464 cv
119.086 484.072 119.147 483.731 119.233 483.442 cv
119.39 482.939 119.61 482.556 119.896 482.293 cv
120.181 482.029 120.521 481.897 120.916 481.897 cv
121.396 481.897 121.799 482.116 122.124 482.554 cv
122.448 482.991 122.61 483.555 122.61 484.246 cv
122.61 485.199 122.362 485.975 121.865 486.571 cv
121.369 487.169 120.716 487.483 119.907 487.515 cv
119.907 489.929 li
118.993 489.929 li
118.993 487.515 li
118.059 487.448 117.334 487.154 116.819 486.633 cv
116.305 486.112 116.048 485.41 116.048 484.527 cv
116.048 483.707 116.215 483.064 116.55 482.598 cv
116.884 482.131 117.339 481.897 117.913 481.897 cv
118.191 481.897 118.439 481.969 118.658 482.111 cv
118.878 482.254 119.069 482.472 119.233 482.765 cv
118.946 482.939 li
118.833 482.737 118.703 482.587 118.556 482.489 cv
118.409 482.392 118.242 482.343 118.055 482.343 cv
117.723 482.343 117.485 482.504 117.345 482.825 cv
117.204 483.147 117.134 483.7 117.134 484.484 cv
117.134 485.257 117.292 485.87 117.608 486.322 cv
117.926 486.774 118.387 487.046 118.993 487.136 cv
cp
f
126.702 480.272 mo
126.718 480.222 126.728 480.171 126.731 480.121 cv
126.735 480.07 126.737 480.029 126.737 479.998 cv
126.737 479.866 126.684 479.785 126.576 479.756 cv
126.469 479.727 126.256 479.714 125.937 479.718 cv
125.937 479.522 li
126.114 479.499 126.318 479.472 126.549 479.44 cv
126.779 479.41 126.931 479.389 127.001 479.377 cv
127.222 479.338 127.49 479.28 127.806 479.202 cv
127.833 479.202 127.861 479.222 127.889 479.261 cv
125.935 486.304 li
125.892 486.472 125.866 486.573 125.858 486.608 cv
125.851 486.644 125.847 486.679 125.847 486.714 cv
125.847 486.788 125.86 486.852 125.888 486.904 cv
125.915 486.957 125.966 486.983 126.04 486.983 cv
126.181 486.983 126.363 486.858 126.59 486.608 cv
126.816 486.358 127.007 486.116 127.163 485.882 cv
127.323 485.993 li
126.986 486.49 126.725 486.835 126.536 487.027 cv
126.211 487.353 125.884 487.515 125.556 487.515 cv
125.414 487.515 125.289 487.479 125.18 487.409 cv
125.011 487.303 124.927 487.122 124.927 486.868 cv
124.927 486.77 124.942 486.639 124.974 486.474 cv
124.996 486.376 125.024 486.264 125.06 486.136 cv
126.702 480.272 li
cp
f
130.243 478.351 mo
130.915 478.351 li
130.915 480.53 li
133.095 480.53 li
133.095 481.202 li
130.915 481.202 li
130.915 483.382 li
130.243 483.382 li
130.243 481.202 li
128.063 481.202 li
128.063 480.53 li
130.243 480.53 li
130.243 478.351 li
cp
f
134.494 482.884 mo
134.439 482.736 134.381 482.631 134.318 482.569 cv
134.256 482.507 134.184 482.476 134.102 482.476 cv
133.949 482.476 133.841 482.542 133.776 482.674 cv
133.712 482.807 133.68 483.028 133.68 483.339 cv
133.68 483.444 li
133.418 483.444 li
133.418 483.421 133.416 483.386 133.412 483.339 cv
133.408 483.292 133.406 483.255 133.406 483.228 cv
133.406 482.771 133.496 482.419 133.676 482.173 cv
133.854 481.927 134.112 481.804 134.448 481.804 cv
134.749 481.804 134.993 481.891 135.181 482.064 cv
135.367 482.239 135.563 482.588 135.766 483.111 cv
136.932 486.086 li
137.291 485.531 137.553 485.019 137.717 484.548 cv
137.881 484.077 137.963 483.61 137.963 483.146 cv
137.963 482.858 li
137.963 482.472 138.02 482.199 138.133 482.041 cv
138.246 481.883 138.438 481.804 138.707 481.804 cv
138.875 481.804 139.009 481.848 139.108 481.936 cv
139.208 482.023 139.258 482.144 139.258 482.296 cv
139.258 482.565 138.931 483.28 138.276 484.442 cv
137.622 485.604 137.09 486.628 136.68 487.515 cv
136.369 487.515 li
134.494 482.884 li
cp
f
62.457 506.704 mo
90.8027 503.869 li
f
62.457 506.704 mo
90.8027 503.869 li
@
124.858 210.089 mo
124.858 203.993 li
124.858 203.443 124.797 203.068 124.674 202.867 cv
124.551 202.666 124.333 202.565 124.021 202.565 cv
123.524 202.565 123.114 202.886 122.79 203.525 cv
122.466 204.166 122.304 204.981 122.304 205.973 cv
122.304 207.542 li
121.179 207.542 li
121.179 203.606 li
121.179 203.248 121.138 202.985 121.055 202.817 cv
120.973 202.649 120.845 202.565 120.672 202.565 cv
120.483 202.565 120.341 202.647 120.245 202.811 cv
120.148 202.975 120.101 203.217 120.101 203.536 cv
120.101 203.706 li
119.862 203.706 li
119.858 203.675 119.855 203.642 119.854 203.606 cv
119.852 203.571 119.851 203.521 119.851 203.454 cv
119.851 202.996 119.949 202.646 120.147 202.401 cv
120.345 202.156 120.623 202.034 120.983 202.034 cv
121.413 202.034 121.736 202.211 121.952 202.565 cv
122.167 202.919 122.276 203.459 122.28 204.187 cv
122.476 203.447 122.741 202.904 123.077 202.556 cv
123.412 202.208 123.838 202.034 124.354 202.034 cv
124.931 202.034 125.346 202.229 125.598 202.618 cv
125.85 203.006 125.976 203.664 125.976 204.59 cv
125.976 210.089 li
124.858 210.089 li
cp
f
85.1338 320.264 mo
170.173 320.264 li
0 0 0 0 cmyk
f
0.75 lw
85.1338 320.264 mo
170.173 320.264 li
0 0 0 1 cmyk
@
62.457 70.7969 mo
90.8027 65.1274 li
f
0.5 lw
62.457 70.7969 mo
90.8027 65.1274 li
@
85.1338 157.555 mo
170.173 157.555 li
0 0 0 0 cmyk
f
0.75 lw
85.1338 157.555 mo
170.173 157.555 li
0 0 0 1 cmyk
@
85.1338 124.673 mo
170.173 124.673 li
0 0 0 0 cmyk
f
85.1338 124.673 mo
170.173 124.673 li
0 0 0 1 cmyk
@
85.1338 69.6807 mo
170.173 69.6807 li
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[85.0391 0 0 85.0391 85.1338 69.6807 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [1 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[85.0391 0 0 85.0391 85.1338 69.6807 ]ct
clp
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[0.00392157 0 ]]
/Samples[
<~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn.kE8)0/,+91GgsI2`NfY4$5Yi
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^VI\&_o0O6a2lBFbKS5Vcd:(fe'uq!f@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
85.1338 69.6807 mo
170.173 69.6807 li
0 0 0 1 cmyk
@
76.6294 59.4761 mo
170.173 59.4761 li
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[93.5435 0 0 93.5435 76.6294 59.4761 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[93.5435 0 0 93.5435 76.6294 59.4761 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
76.6294 59.4761 mo
170.173 59.4761 li
0 0 0 1 cmyk
@
85.1333 7.91943 mo
85.1333 574.849 li
0 0 0 0 cmyk
f
1 lw
85.1333 7.91943 mo
85.1333 574.849 li
0 0 0 1 cmyk
@
170.174 7.91943 mo
170.174 574.849 li
0 0 0 0 cmyk
f
170.174 7.91943 mo
170.174 574.849 li
0 0 0 1 cmyk
@
85.1333 574.849 mo
170.174 574.849 li
0 0 0 0 cmyk
f
85.1333 574.849 mo
170.174 574.849 li
0 0 0 1 cmyk
@
85.1338 7.91943 mo
170.173 7.91943 li
1 /0 /CSD get_res sepcs
level3{
gsave
clp
[85.0391 0 0 85.0391 85.1338 7.91943 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[85.0391 0 0 85.0391 85.1338 7.91943 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
85.1338 7.91943 mo
170.173 7.91943 li
0 0 0 1 cmyk
@
76.6294 461.996 mo
170.173 461.996 li
0 0 0 0 cmyk
f
0.75 lw
76.6294 461.996 mo
170.173 461.996 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times-Italic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Italic def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 75 /K putdef/FontBBox {-296 -413 1661 1205} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7D8BE1853B203EFE351B1CDFA12DF07B00368C22E31EFC3300D63209ED6> |-/K <1C60D8A8C9B64EDF91173DB7C1AF9942AE8640A9AA41482787735E252279480245BA98BE85B7C6434D1DE975326F0968AD0992983F393F67A33598E9B6820ED97DD5859DB61B2F095783347FA961F058E3B391AE0CAFC33C590969DDEF997FE5B4DCF91A66B37581F10482232215550DA4804F385BC0A8EF6EEE818427BEEC4733D74E2022E4359B3B8326E9CF035732D27ED8803775A08C6425DCCBE7115AD4F1034812F624FB2FDF6E572A83FC97ADB97E2F79F7401F299ED13DA7243C8D8D96673A4F4DC7988CC30E9CE3D59AA14419B6ECA0F9C6E4229D1345FCF4496212DF1ED1F623BC46024310D2D2604AF96BA2539729AA> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OKEDQD+Times-Italic /Times-Italic findfont ct_VMDictPut/OKEDQD+Times-Italic*1 [75{/.notdef}rp /K 180{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [12.6713 0 0 -12 0 0 ]msf108.056 360.16 mo(K)sh0 0 0 1 cmyk
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B65648E3356DB8EB31E1045039574EE91AD1DECD1201C15136CD79778C7ABCB518D8247F88CD7C> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 43 /plus putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [43{/.notdef}rp /plus 31{/.notdef}rp /K 180{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [10.5594 0 0 -10 0 0 ]msf116.506 355.161 mo(+)sh0 0 0 1 cmyk
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/C <1C60D8A8C9B64EDFFB1ADC4E426956F74F37D71EEBB5C048A9214A4DF028B4F38D83A0B4812906C4E6D22B421E567DFB439267CCF59806534763C8BA73631F83DA3C4C5CE872C22C669B5B78048B70D64F44228B40CCEEBFD4E34AAE5C4901F44E21C2AF006DA30723ABE5AA76D3B2E920DFA067342FAE3AE69AA42DA252916B69BBBC68E4BC12E7469C5BFD8CBBC24DE23F3D1900EBE1B13692> |-/O <1C60D8A8C9B6079F62179D27AAC2A334144322720BC1D3040E77A7E89E555832CC7A2BF7646927BC58338F366B2C9C29A559A16B74865F953D85EF09BA6BC84CE0AFE06F844CE4B03310D807EC7440CF74FCC0D265E2FE5F1A13C4806B56911A0FF5DEF0512DFAB81A6EBE050CDAB82CC4078C2B1D4A1CFC7206F42528BD4C21A2A7C96EFAD06B5B> |-/X <1C60D8A8C9B7D8BE169EFF237C64342FB661FFA1CEB9A84AF65703888408ED7A557976A00692C087454F19D37A4FE427024AF10EEB037F093CB40BCD9BCC54DDCCEA71E79E9E7B9758A5F80F08C28E5837EC658AD0DF05E1B820C23521136FB5D5376E5FAFE39E7BDFCEDB1E9C24729CBBFAD0F93CA1240829CED91FC7F61F1606F30F957C2598CA2F1DEF68B13DBC5EC26A27B28CE728E7FD03C64044402EA882C06D510E30B2520FCDC27820463FB4ED0A702A9647994AF97A84063D43D15F3925F10B4415EE3293ECE539B1EAA02D70F0D07CB2C53E36701231C803DD91737638F30BACE94516C438AA67EE7489344800703E9D3E0F46375A9849> |-/a <1C60D8A8C9B7A73DB6B88E0E8F18436A1F09B15968F061B1DDAEA063D5C477A798AC6CCDE7B463CEDE9DF10C85BF943B1A23D3A955ECB71BCB056FB9145F938F3DC645B315F646528EB3B53DD647687CCAEEE4F42707FCD1F2C3675EA58B243E03636F03F49CA1B8745B188F869696A9EBF8EE67DE9F54B2262AFB12ECFE1B5AFC17FF258A2E69BF5FDBED1B3699875019E7BFDF5BACBDFFF080973A7F059B475B810D35DF16A240D17D43785DACF46760EB7C69CB24393FA52B17A18DAC3BB84FCEE1276951F7D05FC09AF0FFF01CC340EF8E3D1B60A8413593334DB81EDDB8E689D59958B942D922AA6D47B5EA98AF3FD94329F39900DC6C7A3E34CC1BEDC577F37F7177CEB364983D36A3C88B53058AE816834C770ECA0A9F48A7FAA038CBEBBEE56B6C67BCB16529CEF4CFB3FD5C9A0E29> |-/b <1C60D8A8C9B7A73DECFF5E6E3150EFE9360E675624A0A0F5E39A817FE8337118E070A47B35A6DDDF6E18EF6E6EF41A9C1905D80BB7EF0FDC3B5698DA595AE379FFFB849DB26F15367BE78E05015481142F09F9C75474F587888070D50BFACEB79578D0A28EADDF845C7209C8DC03A84040956AE14CB360D794DDFA971A03C44F636490F38EDAA88827E91D7750E9A2CD63AAD839C98FC62789B6599CFEDE36457D8B1A4BD9AAF08C6FD6E56FB8E79295FAED4FD5D9F4467220890AA9DA3C55A4AD94845643FE2B0B5255435A818AEB62D1C6803E8E25B6801FCCB07A2665EF> |-/d <1C60D8A8C9B7A73DBF0B616EC4777938FC3D3DDA4D4D2FDFA90E90F034CDC37022FB8E06637EDE5A0E3716F70C7D53071936E8C23F9A27D705CC1825DFC617E5769D384E5D9D8A37BB164844E1EB6C2C36722A0A2B738C5246464693BE25FFA8B50C21236E82ABF21D988EEA729F2A2C90EAE5074C87AFF03718F3BED14E8EAEF9E8E0DC5BD67A8051FD3CED3896320FFEB2F22FEE2C888309C8B12B31F428D26EEFBF898542B4DEEE3A9CFC66348EE307EFA31463E8E1BA5330799264EFF2E184467E2131650607AD2F7082EF1C2067240AD8E1666834B55B85483C476D2AE699A02DFA362F6EF02E23D46D21B51B375BDB508936EE1EF6BBD43FF6C6CDC4284A5AFB90B4AB2E74A6C65AF37E077428607847D0C13E4D46F034D498305D7AF6661B26> |-/e <1C60D8A8C9B77FE2937C57D511D7B2D85185E1E61A4651B494CF7984DAD547D0B44C659E0993602A01A0508DD4246E85558E4C72973FC23C60AC4035E6E9D0E422570DD5D38DF226B21995C7BA61F8EB00A50CA6D70806ABFD5AD7ABBFDB00B34E6EACD0CED09AB1732A7C4141621EA5AC5DA00EFABAA2E93A825555212DDCFFA292FEA081906B69270F2F05CDFC3ACE97B091CB5EEF0831DFCA492B9DD5B67AA24B4E41578EC78B32C9D391999DC5E0E0310611AD025B836A14191D7D8F5A10> |-/h <1C60D8A8C9B7A73DB92EF8FEC60948A52607E1C1BAD76AF1E6325BA6F17486FBDB1143BB7475A63C1C539F2892509B5D6EDC786513981D7895069BDA3935DE261EC19CF8FE45D6BBEB201FF55F0412DA369122860F4F7132DFB63193DFA1141D1F6EE70849E5F620EE9DC54791B9EA7313CAA46048AEE01884765C4AFF4180A1C18024B135F6B597E83C4D558F0AFB24E7A0A8FD44CFC691E4271F89B14D67F5EEBF42D871F7E07B6FBEDB55C7D20B75DED8A17AD7625D3BC184EC5700D503012AB5E4387D24A8E767C7ECE9F40CC9CF4DD633340984BB0B0318D067C19FD7C21CBA7FA7568425E7E499E4107298133CAE66B7ED352949C8330101874BA80BA653F2658F709E40EEB5012D705F030152A72788D665C253506962E5> |-/i <1C60D8A8C9B854D0F4594DE2CB230C00D72A8CCCE2ED8277F493FC10530BA725C23B7C5D26CC1DD529FAE26E52F10603EC22FA434A5EF589284E8D896B14DE3C8E9013A43C0BFBD48FDBD41845BD7C76773CBE6AD8D328F71F5EB664393E92995FCC5BC5635E470649C6BA303A1FC97AF04ACCD05A0991A8BEF1CC5D25BC2BAAD39CE1C6888E27BDA0C5DAD2B2DEF6529C8F477FC2CD60CCFB7D1E5F121F78DD2D61A9BDDDD66832C06CF970B6465E11B9DBFFCA3559D4996DEEC891508DB90A89509F3CB209B732203D177FEE5740FB955889645019ADCD680F1EA155C06327806A2C9546A05C56> |-/l <1C60D8A8C9B854D0C3437F4F75DAA30F079F9030DD04473DAF4EDB98D6AE7D76B255812E711AD6FEB0F1D3EAB33054CD89502F62B172DF2B972086F82916544C8ABC3E938B6A6F34309A4E5501DFE51E47D9902C8B32B667C046A6123FECCF9B74909C58F1BA4B097C7FEDCC0EC75868836CAA9EA97D1DBF2806EF8E2E500800140B3953BEF57EF4B7653ABD426AA2C6EC78D9495ABFB6569F8A0F8A6F580F4A7D63CA> |-/n <1C60D8A8C9B7A73DA6C5ED73E6A15E7B613EC1ACF8D9135E0211B96A9DD507603FA1725674D928ECB39B1B734A2103835DAA300CD2AE69F0A57AA74C8891165503B63C735609D200F32C64F9DB97B53C0A75B2C2B76CC0D1A70E9B998FB03121D94212C4DC5CEF0B7DFDE932A9568BF9C90798E4AE5AAF1A04DAE2CF71D39BF8C15DDAF880ADED487E262CF0998CB7E225B780626D38B95E0DC58875003D93440042561035CBE30D8426DA5C5AD79C8032A01995500F84BF5B77993A78EBE2890DD75AD6F3D3E8D10360A4FEBBBE7CF62C8BBEA1107BE06B13433A219E2AC1FEBDB9A74462879C309EA91970ACE271FF1F2C4A52A6405F895975FF075BD225D17B28F2C0563F5C1BD4C83DE4AC43724BC0AA9A33EE705FFBA2> |-/o <1C60D8A8C9B7A73DB927A82707463565634BAD3AA45515B3CF87E47D4AB34C23DB9D832B50F7DA5B299F7F24FAE2465161E80D0D884EB708407D7090860CC020BD213D4F18FCDE46EE0D6BD313E8F69BE781CF2EDA84BAB84E51C3339404A327E48B013592D79A04668DE27B20D96A41137394FA584518AA9BE018055EC4276ECB3C55AF> |-/p <1C60D8A8C9B7A73D721E25585CEB09BF3435C60CFAA6A76C07A0CB9C1B5A612F0588269D03BABFDCCB9B596FCF95DD295D18EFA902E697C48D1F10378EC2E5B7F95777AEEB72BDF341905D664BD00C475931308F38A339C941A7DD8C1FD470B1267714D2EA3ACD551E103D19D7234AAD82B143D333C43282F4255D3487F1E943E4E6355734B5BF0334CB5071D427CE473D3EC52A30212D6E3849FD5706E03A12551A5934BD7ABEE25F652985C0849F4DE77D98B1F5773E7DE04B35CC1C2593F3086F6674E0FB25C034258ADC4ADE409D03DFFFF104757423A026F08F3B68B323A2A9BFC581A802260030999DE6B7666CF0982ED3AE303C338852F314A807E55CBAC1DE54AA9E47954F72DC> |-/r <1C60D8A8C9B7361F02D124CF813383046F2E8E102865649E6346E4AE00EBDF515A44A89A952E4A085F5634D3864EE4305B5BF07B55A1EC09E637E7C6830A233BE67AAA815B678D0618ADF7BD82493E4D59F1DACCF465098FD3F8BD765B585BD1D189A5879A6D0BD585C0269FF295E67AEA1F4AB3642251674DA678FE7C86B5D0D3081506FDE935D99DD3ADBB2CD2B97FA0322E9B7CEEFBB873657461EE464C5A1554D8159FFAB5C6676C33746E9EBE4DCF40F31CC622EB1934B2A10A990B6694C7BEAEAE21B9834F16488EEFAE51397E84ECDE> |-/s <1C60D8A8C9B7361F6FE833EBC5233F08984389D77FB6B8A83F76643BC2F633983CDC51718BBB8C354566EC82EB0333F6910C1E2FF8386A90ED6FAD546E54E6130794D6A3B06BE8AADA3099432325C0A84895D7A1797A5E133A09FBD72E340C7AD5EC3779F91D42CAC7DECA404663BDF32122BDEC1F78EEF4947AE6135A38C1EDD44771BEF7191ACFC7ED05840C4673550E76EBFB9560CBC793DF675B9B909F7CC3B4E758C0E1E98A0611191EECC2B214E4FC7284093D88D157CC9BBBE2B40DA416E572C088B7AAFF58A9D9152D1BE1794E0BD308E3FD5558953D1414B9E68B20AB8EB0> |-/t <1C60D8A8C9B854D0B361E19027CEEF8FD2D54396C85DA9E4D75EBDBD81F1AC8D8D89CCB529371905FB88E8C672DA56CE6373C5F306F6D800C6421BB3535C1CE57B1054E3952FAF7BB933B92222380068B94C8250FB2A82AD2B50FD6BCE69676A831CBBDA1AD9AF95D0F1273C57F4D28940817AB24D70E2917B660D827A327D57C68FF29FBDAD6D47C886C83040C9E0139F754E6CDC6055994C4C5FB073D2E9DCCD2C2CC51F29C870D78E88085143EF> |-/u <1C60D8A8C9B7A73DF7FE0AA4489FBAF4FD51113EC368CC27175BFEBFB889056C6311813AFC193C90935A21FDAC7FDB6988685798B08CC664EF4C2B5874253A6AA8C3A85919AF99EC0D86B61FB31F658394E8DCE2493C1FDE3CDA70903EE88C970F0547DB5AEB13A3A3CCCCD80C538AEFF22EFD2716DE4A12A6C479BA4E5B75CC6E6CC73CDA57FB9DB93A3AD28F0E69F7AA7C4D0CAF479C311AA9B1170829800483F159BA059AF167C5EB54C789226A61A113537A38305C48ED04574462ABC05D151FE00D79EB6E0B89BC456AD976ABC89ED76B57CDE10B0F6BE0265F12AD08936DFAE316FC9EF28209A129719C27982256CD68AAB6E6F45E64240AE6725430A37D4C598A43BB9F37DFD01612092C69BC00E679F6399523A76A2F856A8E2F4656> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 32 /space putdup 67 /C putdup 79 /O putdup 88 /X putdup 97 /a putdup 98 /b putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 23{/.notdef}rp /C 7{/.notdef}rp /K 3{/.notdef}rp /O 8{/.notdef}rp /X 8{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [12.6713 0 0 -12 0 0 ]msf123.633 360.16 mo(K)shOKEDQD+Times-Italic*1 [5.99997 0 0 -5.68211 0 0 ]msf132.085 360.16 mo( )sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/endash <1C60D8A8C9B7A73DC7986179CDDDD3224C5C371938> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQC+Times-Roman /Encoding getdup 32 /space putdup 208 /endash putpop%ADOEndSubsetFont
/OKEDQC+Times-Roman*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 151{/.notdef}rp /endash 47{/.notdef}rp]OKEDQC+Times-Roman nfOKEDQC+Times-Roman*1 [9.50346 0 0 -9 0 0 ]msf133.585 356.348 mo(0)shOKEDQC+Times-Roman*1 [4.22376 0 0 -4 0 0 ]msf138.337 358.348 mo( )shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf139.393 360.348 mo(X)shOKEDQC+Times-Roman*1 [11 0 0 -11 0 0 ]msf126.77 353.35 mo(\320)sh%ADOBeginSubsetFont: Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 106 /phisymbolgreek putdup 110 /nu putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/space <1C60D8A8C9B8707C25> |-/phisymbolgreek <1C60D8A8C9B7C054191D505047ED0C51502D56EE1C009AE1545E1E9DBAB5606B66D130A0EAFB171E51501CCDFBFE949BA24E7D2A9C42EE7FA778F5D6E725A323711FF33EFBE4FE5F809F6205705113F165DC9D83C113C200F328611CCC0EDBD338EF1FC59489E2B4F8E0AFB67F389014F2533044B1DBBD40909766A2FF63F7530CBB97E425F5FE774BAC576DD095AC5F727040F626F2F0F080861B07F7B47609819061F3BC173E8F142959D2006F51CAEFEE0987D6C2C1361418CA8240E71DDD67AAC5DD128C0B3AD626915F5E51BED4AB2E59B21C193E> |-/nu <1C60D8A8C9B7B202AA9866F3922E72E14155D005EC34D039B24C3B1DD0533DB02057FA2E0C2B5B3A6A57D9C401916041D72D20706235F2A395FCDB0DE897CE4003314A9D80330476B19839F2D7566B24F8992276CA79289C8BA6C94D591117A7E5E53649E7E6C38CB57FF353F19879F920842284D26487CC64CA43BED350775B44830BF4E7FA099FF57491A573B52648C859CECCE1AB5BAB> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OKEDQE+Symbol /Symbol findfont ct_VMDictPut/OKEDQE+Symbol*1 [32{/.notdef}rp /space 73{/.notdef}rp /phisymbolgreek 3{/.notdef}rp /nu 145{/.notdef}rp]OKEDQE+Symbol nfOKEDQE+Symbol*1 [12 0 0 -12 0 0 ]msf11.5493 75.5811 mo(j)sh18.7856 75.5811 mo( )shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf21.7856 75.5811 mo(not KK)[6 6 3.33398 3 8.00391 0 ]xsh106.8 31.5811 mo(Cabibbo)[8.00391 6 6 3.33398 6.00049 6 0 ]xsh101.022 45.981 mo(suppressed)[4.66992 6 6 6 4.23047 5.32666 4.66992 4.66992 5.32617 0 ]xsh0.626953 470.679 mo(Other X)[8.66602 3.33398 6 5.32617 4.66992 3 0 ]xshOKEDQD+Times-Italic*1 [6 0 0 -6 0 0 ]msf38.9531 470.679 mo( )shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf40.4531 470.679 mo(l)shOKEDQD+Times-Italic*1 [10 0 0 -10 0 0 ]msf43.7871 466.679 mo(+)shOKEDQE+Symbol*1 [12 0 0 -12 0 0 ]msf50.5352 470.679 mo(n)shOKEDQC+Times-Roman*1 [11 0 0 -11 0 0 ]msf51.6514 68.0381 mo(\320)sh80.8813 258.751 mo
80.8813 279.445 li
f
80.8813 258.751 mo
80.8813 279.445 li
@
80.8813 431.813 mo
80.8813 461.576 li
f
80.8813 431.813 mo
80.8813 461.576 li
@
%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQE+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/arrowright <1C60D8A8C9B5FD59844455B9C5D4795AC397741AE86D69F068F99AE7B1245A717063FB05852FD6911FE97A4498> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQE+Symbol /Encoding getdup 174 /arrowright putpop%ADOEndSubsetFont
/OKEDQE+Symbol*1 [32{/.notdef}rp /space 73{/.notdef}rp /phisymbolgreek 3{/.notdef}rp /nu 63{/.notdef}rp /arrowright 81{/.notdef}rp]OKEDQE+Symbol nfOKEDQE+Symbol*1 [12 0 0 -12 0 0 ]msf0 278.581 mo(j)sh7.23633 279.581 mo(\256)sh%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7EF325E2398B8D06B95968E8CB2100B916DB849021664A9346E7F599B071552A976F221B71690663697D73861BE374DC56275D8C51F5A18C630CFA49730D769C8EE99EE8A78C25AD1059B021CBD36B6C7E99FB25A9147064FC9840E89A30C62FCEEE8933AB93E303B2E4550F5F2923460EC8D8B8310E1E7D957DE785FC4C4A6C18B5D832191EF13C4A4219D184898603E209D4E9A> |-/S <1C60D8A8C9B7A73DD237421AB836404A15790C77B1A081771CE7D27970F583B0B109DE03AB8598BC1651772E13E7B103E68ED9B882A8DF320DC58B26DF07FB2D380FAD09BED879A92A7420885BA5DC494F1B44F03E30DEC66269C823EFAA0701501BE5DFC37AA07191766F8AEF20C6D0CF3B240A9515EC4C4FB5C069B9379056F7D739AEA35D2B6A3A31F1C0DD0A14D331981347FF1171B24062F3F5604AD772165C22B5077BB3C2F01B6BDED3B400EB7E72BF4F17350ABECF36757FADD641AE88386A72FE368E65B1CBDA13952EDA9B9AC032EAF510F67F860A90E7F78C4654E8C9F6BE119C83AC6D04CDE1> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 76 /L putdup 83 /S putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 23{/.notdef}rp /C 7{/.notdef}rp /K /L 2{/.notdef}rp /O 3{/.notdef}rp /S 4{/.notdef}rp /X 8{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 138{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf19.0781 279.581 mo(K)shOKEDQD+Times-Italic*1 [8 0 0 -8 0 0 ]msf27.082 282.581 mo(S)shOKEDQC+Times-Roman*1 [9 0 0 -9 0 0 ]msf31.082 275.581 mo(0)shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf35.582 279.581 mo(K)shOKEDQD+Times-Italic*1 [8 0 0 -8 0 0 ]msf43.5859 282.581 mo(L)shOKEDQC+Times-Roman*1 [9 0 0 -9 0 0 ]msf48.0352 275.581 mo(0)sh58.2041 275.797 mo
80.8813 270.127 li
f
0.5 lw
58.2041 275.797 mo
80.8813 270.127 li
@
58.2041 433.127 mo
80.8813 438.796 li
f
0.447223 lw
58.2041 433.127 mo
80.8813 438.796 li
@
OKEDQE+Symbol*1 [12 0 0 -12 0 0 ]msf5.65723 435.248 mo(j)sh12.8936 436.248 mo(\256)sh%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/endash <1C60D8A8C9B7A73DCA2CFDDC9B71651465FCF6CA53F107> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 208 /endash putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 23{/.notdef}rp /C 7{/.notdef}rp /K /L 2{/.notdef}rp /O 3{/.notdef}rp /S 4{/.notdef}rp /X 8{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 90{/.notdef}rp /endash 47{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf24.7354 436.248 mo(K)shOKEDQD+Times-Italic*1 [10 0 0 -10 0 0 ]msf32.7393 432.248 mo(+)shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf39.4873 436.248 mo(K)shOKEDQD+Times-Italic*1 [10 0 0 -10 0 0 ]msf47.4912 432.248 mo(\320)sh62.457 469.371 mo
90.8027 466.536 li
f
0.5 lw
62.457 469.371 mo
90.8027 466.536 li
@
283.559 574.849 mo
255.212 574.849 li
255.212 7.91943 li
283.559 7.91943 li
283.559 574.849 li
cp
0 0 0 0 cmyk
f
0.852542 lw
283.559 574.849 mo
255.212 574.849 li
255.212 7.91943 li
283.559 7.91943 li
283.559 574.849 li
cp
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B6B41CBBDB7707A75835B685C061350378DDF178387D72AF638F557DBC8868D45A48063793F702DB2703B572606B5544220471378CFF852AD0F12BFD3ED50AF0C7937C62F4211447A3C76BA5934FA55A88F6AC92F6F8CFB177A2600FED1408C2B79BEF084C75A9B319733D38DFCA473BB051EA9FDAC4F36B0236967E1F49DEAB9FE986C6F0C01E84477CC96958F82256FF67AF3A3DF552BD357C8F0FA8D66401356BC4C59F351DD58291FAF19FF2ABD7AE0C5924D87F95F5AD744B1B8CF00C184D1643EC6AA8E5CCFC9BE1D0B91CD430BCBAC2D38EA53E57EE71B9AF0D789910B8475E129A519D087627510EE4AEA9BEE2F5C5967C2A846D6A9F19DBEB886137629B23E6073F213D821359A7A3ED932C815B0CCDB4F2D7A62064796B4E53C4C34B158E1DDA7F50AAC619B8ABC18397730A77A037BB9992BB9AE7A6ECEA973CF0A072160BA94F6CEAE73EE8C9A62D2B859416C74C1DE8D15D9B113049616101ED> |-/parenleft <1C60D8A8C9B81F2C7477F0B9BCB3EBA4BD58438260E6F0349575D982C091745F57E6DE656DBD360F903D8BB7BA1F42E7A2D05B5102174895284A8AFE5BF20A5DC15D43366CD93FB67607779C4A32BA> |-/parenright <1C60D8A8C9B81F2C3A0B9AE48BDC8A210A6BC24B132D0FFA37976CAF0AD48341BA40F2639F857493B96FE8C9C6A5DBA67902E1141CAD31E1E1F2EAFA78B4F0B158589755ABC3F5D48640211E0BE78E8AD3F692526A7797DC309ED92AB9> |-/B <1C60D8A8C9B64EDFF4687EEF1402C5EE283D943BE68F98D95C6B6E4AB6269B4DDE6408E2BF3C1B3F715D31F9184B34C3187615E7EC23B83E63EE42DBF917CF2608DC7EBFBFD3E6803CA0D8BF64B2906F1E67A80A847889CC508848A43D6DFA2D0ED3CFF02F6B5B57FD09E98D19A27FD2037EDBAE15FB67864F2BB81C2708F1B1BBEC17626B9193E5080C624B7DF86D5661F9F76B862B2D96533B697E008765C193F38B23AAEE0E93ABD786E563194F4308502A61D7F57EDE571FB8F98B521A2ADBAD4E6763FF11D7CE491495714BEAE1DDB94E9738CEC0796C5B6BAB5292CDE72524FC> |-/a <1C60D8A8C9B77FE2CEADADAD35C681D96377E0B82CC8ACDB5762353EDBADFFACD451A553C5C39302A9F1D177F76B983509B429688ADF52AFA30F8E4A0B23F2282503B97D206C7C183FDE8BFD6ACD2BE6A3B9069791DF8E2CF592523922EFD64768CD99A1F5F1400DB305C4171EAA77202618276E378016C7BA0833F29752C2A461C11A88BC4E527507EEDA9C848EEAD89D80551320178A864EFC8B3562DEDC4F695E8824160B87CA7F395997B47C0C71BBFE9F871E4F5046857D22F807C04061C73B2C0BBB7B44E0200581C40A3AC55C8229AC23B2FBE040B0F089F70BE38746A5E0285A22E4825D9ECD39D6C15171D3EBB391B1AC132DA188B28262B67971885F8F1CB6195A6A7B0FFC> |-/c <1C60D8A8C9B77FE2CE939B120B8C530BA36A1D378ED7528AD7B7A10AC71BEF208D8B385B11077F2A13A81C13DFBF440D42A243A800735CB8F4DC3746EB4039E43E77D867A7AA457E639AE6CCAFB17D4572C0E8FCF8662A95CB9A94DBFA339E8C89716E4D6EB7EE669FEA0FD73F1B364D57426E512088C7E414CE09DC0040B747838B6828750C7FA69A58B3FBD05411AA3233E35DCBE1E5C8A3302EE901E300C17D> |-/f <1C60D8A8C9B81F2C5200FF77F5CC74A969F74B97E3CB0139862AF77A9D0ACBF3A9D6D9D7DFD3746D263F91E033F5CA0320628020691D4C3124BFE6A21E6C83BCBE09CD5D12CC21985F4F5AFA1A376E8DE99902DF7BF2E77B55D090DC8BBC539FB00E70FEE139F0FC4E0E2A68FC9AB61AE1A0D629C6435B8A2E09E0E0D78B08DE40CDACCDB12252A395979017F0F46F00D30915E02E70A215B3DDCC> |-/g <1C60D8A8C9B7A73DA347F0DC0A4CC25AD3382B8351D419D81B2F540C0F665DA2122211CB75D621F53ADCDBE7815157FCF3A7D9C98329945893598F8138F5D5F74388A15B63DC4DDBDB1A01CEDC68DBC335D575F070C3086679BC845D2E738427D0F7B681E970CAECC1ECA0192676764BEA6F787CBC115862B9B44CFD83A96CAFA21CE91235F59FAB64DFE50A98E215046D4BF1AB210098434AE88D505933B6B31BEC443E9C48567AB352DDD15143CE343B08927EA9C965F9F904D0C1E9AE4FECE14141B4365C351A577CA516601FBE0AFA3AD74B770DF0E6D6A50EC77FBA93516C03FCA671EDEBF2CCDCA919590D5C9DEA3D43029A729D3EC913B24C08E5BEFE573AAB22339502EECDF5C8F0B813EECA1A3643E46181D1A26BD0E961251C6FA14F9824242DA4E6EBAD7E5F2872BFD0F6F6BE709AF20CDE3BC39F29118C3ABE69D00325A184273C17639A8F614CF5086AF810778C30368743992A90E37B88A00B0EFB39F462A8B7048C5ABBCF6C197AE88D4F99C80A2B8E1DBB> |-/h <1C60D8A8C9B7A73DDAD434B9B0934880641DF5380C3FF34924474584582E239C6F8521E020E224191300F7D305E7CE3E9B26FD63D19146E9A792CE58AAA1D1E0988290FCF859899DD695C8334DEB5EEA9B27FF4F22DA997D31BE2F34FA458B76E64B6795EF577D8D66464865BCBF56924A7B28803783086BA628F44B2C71B5D443B3791F12685C141C83F9E10FE5E0058D368A19DE504B892831FC37A9C139A777D98619540D7044EEF1D80D5AA72984210B0E3A3AA2A9488D2A3C7F6CEB9756D12E8F0AC9CA1CD21E> |-/i <1C60D8A8C9B854D0DE8FF03001C7DDCDF6D3A68A6B597D794E646C678EE584A1666CB56CA9FE75811CEA2087E2C341C7E1E2BD6147E5E1B64DFF133BC2DEFF475DA598F822B2BE3A9DBFD7105A3889BD250D9F71DE0C91B5EA539C526B6489E8D9E79757A61E2352A71C3AC0EEEBBBD4B096AC9707E6604D45F8B4EB690BCE5B5F037666EE3D29DC12074786C8164E88903799783957677A476A9FAD9CB291219231A21175873BB2> |-/n <1C60D8A8C9B7A73DD30B80525D5D675DA4D0977F59D93029CA5D14D1D6563E1C35EFF4A3EA44981DFE04749A107A1C9F060A076451BF62C02FE2E474DD187526384A6F42E0021FEFF54C8346ADE1D28DE56A36764BAF6B66BF7DB43854DD1D363EB418A371ED43BA933A460B2917DEA26BF87012AAF7B195AB0B8FD490EC07235D6699814C77751D4CEE45D35DBD8B1597438545A60B7623CE491483A014FEEE65ED4FEBDF80A721F21A9D4DE075A36D58250AE2AA345A9C5F7B6CB7C99BA896DCEAAA4342B927737814> |-/o <1C60D8A8C9B7A73DEA5F658431FF26DE1C3CCABA5A5AF56EE1798CA324BEFFED162986DEB20473198E3AAB17E1F76DC8A1DBB020158974052802A30905F0338BF503D35906BB108F3CEAC35FDF3D8BC51C5542899E6D21063EDA8732DC154AFBF51B7EEDDA621E256B5E3E8A8E86389A77366F5766B3A5B4DE72C37DBEBA04E9D5CF3B75> |-/r <1C60D8A8C9B81F2C5DE210A78B7176966966FB4A2E70036BAA4A8956D597954FF33C419645546BDDA5A1C075630C88C9E9E0B6B2EB6B2FC3FF0331B1902616E9791F7398738E2F17D5E54890C7A065EB2198D4708DA7213806F12669F67678CAD7B30B1926E6F30FE45B0DAB7BE403E568FB7F28C7F3631BA5B608F502310C8C5FF767FCF95E7EC0C2EC9F2F173FF41F0C7459D2154243B15CA53A73779F93E107279F803A71F8179756E718854D0BA7BCB1168643F72763D9FF> |-/t <1C60D8A8C9B854D0F41C7D11C14207BE1C0BA04724483030493967288AC8D5095C0BB34E8B56A5C53BD1B7A25A11F231F6182B9300CAF4CFD46C1EFFF4B0E38766187499A1973473DBAE4D98649DB8F7DCCE25964559B9BA93E6803E419984755899DE68C87EC2F530AC81AF61BCF42839E59E8A14B5E2DDDE3A4AFB0D7D86FA4DD21DF5669B371465EBE7C64497A6C50C0C5658D7> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQC+Times-Roman /Encoding getdup 37 /percent putdup 40 /parenleft putdup 41 /parenright putdup 66 /B putdup 97 /a putdup 99 /c putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 116 /t putpop%ADOEndSubsetFont
/OKEDQC+Times-Roman*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B 30{/.notdef}rp /a /.notdef /c 2{/.notdef}rp /f /g /h /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 91{/.notdef}rp /endash 47{/.notdef}rp]OKEDQC+Times-Roman nfOKEDQC+Times-Roman*1 [0 -12 -12 0 0 0 ]msf223.61 347.033 mo(Branching fraction \(%\))[-8.00391 -3.99609 -5.32617 -6 -5.32617 -6 -3.33398 -6 -6 -3 -3.99609 -3.99609 -5.32617 -5.32617 -3.33398 -3.33398 -6 -6 -3 -3.99609 -9.99609 0 ]yshOKEDQC+Times-Roman*1 [0 -11 -11 0 0 0 ]msf264.162 351.455 mo(\320)sh255.212 461.996 mo
283.559 461.996 li
0 0 0 0 cmyk
f
0.838533 lw
255.212 461.996 mo
283.559 461.996 li
0 0 0 1 cmyk
@
255.212 253.933 mo
283.559 253.933 li
0 0 0 0 cmyk
f
255.212 253.933 mo
283.559 253.933 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7A73DB97D28CE021B49950835179F81DB06CBF930B6C6D5706D9ED6014632ABEADAA0D048E67029BA27E752F6AABF2BF3925FA80CF6D165732BF65C6EA4D3C751E18327714EA7621A55C0DF161D6AB71192F2116C05690BDC8199A704B3BDCB601C35C000C936CEADD76518E5903B4437D88DA3559D6E35C0BFCF02F2B6192168CA3B70> |-/two <1C60D8A8C9B7A73DD8334B3BC9901481F6D704362F7D67101BB94C3084E0DDA1820EFCC7949871D41600317976CF8EBE943EF4130DCB4C0E4C98BD76F50CD707306CCD68B5AC0A92BF048DE1326D325EF3B74E15CE2E1E98AD00DA304640D485D09CAC8DF73B1B50D215493BE7426DAAEB1156148CA2AB41E9D928DFFE9FB5C3B4DBB45EE9D294EE4695> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 48 /zero putdup 50 /two putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [32{/.notdef}rp /space 10{/.notdef}rp /plus 4{/.notdef}rp /zero /.notdef /two 16{/.notdef}rp /C 7{/.notdef}rp /K /L 2{/.notdef}rp /O 3{/.notdef}rp /S 4{/.notdef}rp /X 8{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 90{/.notdef}rp /endash 47{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [0 -13 -13 0 0 0 ]msf272 554.429 mo(Leptons   )[-7.22998 -5.77002 -6.5 -3.61182 -6.5 -6.5 -5.05908 -3.25 -3.25 0 ]ysh272 503.508 mo( )sh272 507.765 mo(20)[-6.5 0 ]yshOKEDQC+Times-Roman*1 [0 -13 -13 0 0 0 ]msf272 494.765 mo(%)sh255.213 59.4761 mo
283.56 59.4761 li
0 0 0 0 cmyk
f
255.213 59.4761 mo
283.56 59.4761 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Times-Italic AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQD+Times-Italic dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/percent <1C60D8A8C9B6B41CBBCDBD078CBE0B7B2BDC060B246C1D1E8AEE4E2EF336F9F2E5C84341040E3A590FA79DA456DA61895E9F7A10B6832CE6103385E44FC12098D6EA3E6C329231ADFCC0896E3CE962EF2D45140D3558538266C43E107A4AB901D78A81E85AF7CB35D5BD224F964FD018F828FF9DDA4EE0F703E634A0B370F34845A997A4566655EED92E54DD48FD5B6D255F1B4A23C71F9723DCBE43CEFC6C969F9B90A9A635974486CBFEC01E8809A9F0571B48230326A55F42791E6137695C9C76B5628A18B02A4D34BD338C2B2179C88FABAFA8C82C37E1537EADC477379624C2EF9113ABE513C61F9D5B910D60CFE6B632313742691CEAB74C84308082247B41021409F6B14C6A7ECE4A89A1B70EC4CC3B5964BC523DC94736D6CD3BE89C4021567D9EFCC36F8026B1DE3C1441EE0AB2D0ACC34E9CBCC5544BA4D8E15E04DBA9256CF96F9502DB13356CE048656087CAA316A3A263EA35C5487F602EBFD83C07E299A4> |-/parenleft <1C60D8A8C9B81F2C3A79D9A5F2CFACB06773B79553F6507B30FC3F5E9FDA80B087F4EBE24EA1B43515421609E9EB5DF080CEAAF9C07A4701CA689F79F3104433D5F378259370DED64186AC6D938381C3150900425BF244CE> |-/parenright <1C60D8A8C9B81F2C65934F3A129299DEFE777A7E6C47DBC491E09281095FEDAD45425A667C8D19EBEDA6ECBA7304322A90A81E7D0833706DC7E91B3F89F419F43B970701B26F1386940AA060FAEDF5FD6F7FEC2AD571E35C> |-/period <1C60D8A8C9B8707CDCE5998C08190166E079A2D44B71700BEB3F4B3D5123A6492DE77D78586A59D6BE37F9292F6A89D6D3189D04F5F48F6F3F8E649A6308857825291615948B> |-/three <1C60D8A8C9B7A73D8ADA4CA8BA72577787AF65F9C91C847EBC092EB7F2A3070050F42D94A67EF6D2BD207A2B0533E4B8ED534D1F0C9B4F68261F2A11F8230FDEDF8A0B4E03CA6ACD89B8F5B72A1A3FEB94C82437E9E6ED367AFDD52CA82360CF3B9C98753263FEECA454B8669B03203E0AA0299698FAF4C1FDE1997896D6DD31FA059B11513CE309A15C7D6312B46961D524A4C2696A7E5D71DB4CE9E3303606791A33A9EBB39AFD8A957D3794D60D3D8C58EAB6B53881AA0557DB2E6B9ECD34635A29C5256E0BD65CDB026A457ADBA287B0E2F9081EC3691FD0567E0D82EDE17744924D74EA1B30F0C1> |-/four <1C60D8A8C9B7A73DEE1559203DEC404957A916D179682E547483B1D2662B92303234A809D8DDE21E9313C8F0CA81FB6C75E0AEBB921AE8B37CB10027432C> |-/seven <1C60D8A8C9B7A73DB6162145DF86D5826D50B862DB0D7FD8EB656E4531D67A63B798D9E6B3007666CE8A4404CD186F1331F34E4D0C6523> |-/nine <1C60D8A8C9B7A73DB9BC76669044CED48C25AFFFC7C0FFFE448864EE9B24704DBDA9575126857EDC381F87774DA648AAF893D9B0CE9BDF386060972D21830A3B1C70DE1552D9FE36229D86E746DBA1EB16709E20A88B862AC405FAE44CC7FB5092E39BD54F82698CF3381B6A90DA2858D0AA49EE6105D7D66DAF03458EB2666BC277211C922EA7F55B8B0782B732BFBD9E709C7B3C8A3086DD3AD986E329EDAD4C6D4A65E950739B08B0E2AEF6D791248739CC3BFE9659> |-/H <1C60D8A8C9B6079F1727473B9C695927901BB38A04022F80EA8C12ACE42B70B3E64E84E980D0D82FD9FAB4A90A1804978222D50DD528A951DF07C4ED8DCAECF963285390426EA29A335E2F5D17D5383FA94B81478C1D3FF3B1D80BC0FEFC516F1675182C64715DD1465D4833A578A8F6B4F7DD14285F7EDB5FAFAFF1B12D0BC56AE8AE1D10FB0E2A355F97B4FC6E4B45DFCFED3D3A0C475AC917FA2146FF20D9833DDF41168DCFCC2F46F0BB70D170FBFABB4D764C4C57D5920B83F814CAA3965BBEE3579E7A3080061D9003413554FD58C708D5B130A892861F0BF2EFB072A6A8027C3ACF53B012937848A5627ED2D73DAD9D44> |-/c <1C60D8A8C9B77FE2CED306AAE853DF6763ABBC1F195078D45F35AC812BA176B02CD229DD186FFB355299AFEDCDA3C3E7A2BBB8C0138FFC2F675F24D8A1A2064E210ACB5567CC4FF99B2DB190FFC6CD745653327D6267B9720C3E2FAD72FF086DC8533109E5D3541C360CBF9F8DE6E15D008E77916480B96C5C762C587981712A1AA76B3128B5597081D3A484E43F2332F97E00EB8CA70E92480D1BBD05BF5279454393B0CF9B35A14103B3932D2CBA> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQD+Times-Italic /Encoding getdup 37 /percent putdup 40 /parenleft putdup 41 /parenright putdup 46 /period putdup 51 /three putdup 52 /four putdup 55 /seven putdup 57 /nine putdup 72 /H putdup 99 /c putpop%ADOEndSubsetFont
/OKEDQD+Times-Italic*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus 2{/.notdef}rp /period /.notdef /zero /.notdef /two /three /four 2{/.notdef}rp /seven /.notdef /nine 9{/.notdef}rp /C 4{/.notdef}rp /H 2{/.notdef}rp /K /L 2{/.notdef}rp /O 3{/.notdef}rp /S 4{/.notdef}rp /X 8{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r /s /t /u 90{/.notdef}rp /endash 47{/.notdef}rp]OKEDQD+Times-Italic nfOKEDQD+Times-Italic*1 [0 -13 -13 0 0 0 ]msf272.072 416.432 mo(Hadronic KKX   37%)[-9.38818 -6.5 -6.5 -5.05908 -6.5 -6.5 -3.61182 -5.77002 -3.25 -8.6709 -8.6709 -7.94092 -3.25 -3.25 -3.25 -6.5 -6.5 0 ]yshOKEDQD+Times-Italic*1 [0 -12 -12 0 0 0 ]msf272.072 362.115 mo( )sh%ADOBeginSubsetFont: Symbol AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQE+Symbol dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B8707CEFDED2C2FA8F700E888B1D4014785A06281682BAF35346E911023E24D902F7C8F99D4F78ABA0616AE04B54C55E136636742BD11712DBA3118E02B68AA77CCD5657239C48D976B46D5F8710150595ECFD8CF56B05BA4DDEEF4F39A3A11FA84D81DE85E2C4BD8A62AF> |-/eta <1C60D8A8C9B7C05416182BC4CBCC557F21C84B22ACA4314A039BCE067B845562F2F67CDCB6119221AD4A12E2F5F1262809FF00C2121B85A39DFC953CF715E669ADCB99B69B4E1399F7F21E49165D2A91B3D9DC4367E5CED8101AC76C63E20576FD3C56453198727DE7F98AC1AE813B1BBC57468AFAAAC796110FBB0C71658A280CBDB4F7F373C3AED2D36B4169E0CE6D6DD5D44C2162203507AF59EBD2CD83> |-/omega <1C60D8A8C9B6232B177501BD8D04AC7A7E3A9D77065486E3A43A2785B16D92CC7BAE020D75B90406FE7AE46F0A1C9A3D95F2279F092117E6C65EC8A0594ED7550CB5E791C782C4A6E6902F64F11BE1E24247CBCABC59B7740AF83BE08E21C178509FD9F9C816B42CCC3DD424B1ACE4A07ED8791BA957704B82CE566C3B656036BF336FBCE31E1C3733144DDF4E7A82BD0FFFBFA49120BBCFE5DD24BF25C278778A00B382F5AB4248B4D9C4D04F239BFB4BC6296C84E84C0B4021418B6F454E491DC157740DA3C743BCDA9D746B8C7EA6D5B39AB4442CF5649EFC3C01BCB1356FB24E5E587DE61B8CF5C9C4CD6A9050BE9429FD> |-/primemod <1C60D8A8C9B8757470E112BD13E29972B7C66424BF03E6FC57BD7118E8A332F2021958363AB74D966684FE9138C7F662DBCED900A1DE2F0E77D124770E15> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQE+Symbol /Encoding getdup 44 /comma putdup 104 /eta putdup 119 /omega putdup 162 /primemod putpop%ADOEndSubsetFont
/OKEDQE+Symbol*1 [32{/.notdef}rp /space 11{/.notdef}rp /comma 59{/.notdef}rp /eta /.notdef /phisymbolgreek 3{/.notdef}rp /nu 8{/.notdef}rp /omega 42{/.notdef}rp /primemod 11{/.notdef}rp /arrowright 81{/.notdef}rp]OKEDQE+Symbol nfOKEDQE+Symbol*1 [10 0 0 -10 0 0 ]msf272.169 301.581 mo(  )[2.5 0 ]xshOKEDQD+Times-Italic*1 [0 -13 -13 0 0 0 ]msf272.42 245.219 mo(Hadronic )[-9.38818 -6.5 -6.5 -4.58301 -6.5 -6.5 -3.61182 -5.77002 0 ]yshOKEDQE+Symbol*1 [0 -13 -13 0 0 0 ]msf272.42 192.616 mo(h, w, h\242, )[-7.83936 -3.25 -3.25 -8.91846 -3.25 -3.25 -7.83936 -3.21191 -3.25 0 ]ysh272.42 145.307 mo(j)sh272.42 137.467 mo( )shOKEDQD+Times-Italic*1 [0 -11 -11 0 0 0 ]msf272.42 134.218 mo(\(no KK\))[-3.66309 -5.5 -5.5 -2.75 -7.33691 -7.33691 0 ]yshOKEDQD+Times-Italic*1 [0 -13 -13 0 0 0 ]msf272.42 98.4678 mo(  34%)[-3.25 -3.25 -6.5 -6.5 0 ]yshOKEDQC+Times-Roman*1 [0 -11 -11 0 0 0 ]msf265.806 106.646 mo(\320)shOKEDQD+Times-Italic*1 [0 -13 -13 0 0 0 ]msf272.073 57.0864 mo(C. s.  9%)[-8.6709 -3.25 -3.25 -5.05908 -3.25 -3.25 -3.25 -6.5 0 ]yshOKEDQD+Times-Italic*1 [12.6699 0.191716 0.18156 -11.9987 0 0 ]msf107.696 313.691 mo(K)shOKEDQD+Times-Italic*1 [5.99934 0.09078 0.09078 -5.99934 0 0 ]msf116.146 313.819 mo( )shOKEDQD+Times-Italic*1 [10.5582 0.159764 0.1513 -9.9989 0 0 ]msf117.723 308.844 mo(\320)shOKEDQD+Times-Italic*1 [12.6699 0.191716 0.18156 -11.9987 0 0 ]msf122.926 313.922 mo(K)shOKEDQD+Times-Italic*1 [3.16747 0.0479291 0.04539 -2.99967 0 0 ]msf131.377 314.05 mo( )shOKEDQC+Times-Roman*1 [9.50241 0.143787 0.13617 -8.99901 0 0 ]msf132.95 310.663 mo(0)shOKEDQC+Times-Roman*1 [4.2233 0.0639055 0.06052 -3.99956 0 0 ]msf137.671 312.735 mo( )shOKEDQD+Times-Italic*1 [11.9987 0.18156 0.18156 -11.9987 0 0 ]msf138.697 314.751 mo(X)sh0 0 0 1 cmyk
OKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf108.812 426.581 mo(K)sh0 0 0 1 cmyk
OKEDQD+Times-Italic*1 [10 0 0 -10 0 0 ]msf116.817 421.581 mo(+)shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf123.565 426.581 mo(K)shOKEDQD+Times-Italic*1 [6 0 0 -6 0 0 ]msf131.569 426.581 mo( )shOKEDQD+Times-Italic*1 [10 0 0 -10 0 0 ]msf133.069 421.581 mo(\320)shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf139.29 426.587 mo(X)shOKEDQD+Times-Italic*1 [12.6713 0 0 -12 0 0 ]msf105.356 271.054 mo(K)shOKEDQD+Times-Italic*1 [8.44752 0 0 -8 0 0 ]msf113.808 274.054 mo(S)sh%ADOBeginSubsetFont: Times-Roman AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginOKEDQC+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B7E7C1AF6D204727960F0CE7BB570959E4DD82EB214BA4E790C6DD1D0BBE1874C76EB04F42268E> |-/X <1C60D8A8C9B6079F00B3430060194B3C23B7305FF683DA3A6997187B71C26C457E2F08EA686EBEDA6E2C36193C146FFF5E97A325209C457AFC1093F7B89F8B46071BC402DDD0A24C7A52DECAD7BD545F2E878B4F98C57245702D6A016F1D7088A1CC631AAB065DD27629BA93FC11232A925A323D96D900B2FBDE6B3FBCBD0B3BF6E133D9937385646344E23AE6A9959B46D73EC5FA01F166731981740E7F7C658B6D883AE2FA1E43545EC2CB4F060346AB1CE1FCBC77CE1B346C9264F0AB78DC2B32EE5DAF557607E91A12579BD0B98527B13FE67E0B33C1AAF0EA253F9B7D17E3CE97E7BF10C616F090076E7C67A1BD> |-systemdict /gcheck known {setglobal} if end {end} ifendOKEDQC+Times-Roman /Encoding getdup 43 /plus putdup 88 /X putpop%ADOEndSubsetFont
/OKEDQC+Times-Roman*1 [32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 9{/.notdef}rp /B 21{/.notdef}rp /X 8{/.notdef}rp /a /.notdef /c 2{/.notdef}rp /f /g /h /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /.notdef /t 91{/.notdef}rp /endash 47{/.notdef}rp]OKEDQC+Times-Roman nfOKEDQC+Times-Roman*1 [9.50346 0 0 -9 0 0 ]msf118.032 268.213 mo(0)shOKEDQD+Times-Italic*1 [12.6713 0 0 -12 0 0 ]msf122.784 271.054 mo(K)shOKEDQD+Times-Italic*1 [8.44752 0 0 -8 0 0 ]msf131.235 274.054 mo(L)shOKEDQC+Times-Roman*1 [9.50346 0 0 -9 0 0 ]msf135.933 268.213 mo(0)shOKEDQC+Times-Roman*1 [4.22376 0 0 -4 0 0 ]msf141.037 269.58 mo( )shOKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf142.092 271.58 mo(X)shOKEDQD+Times-Italic*1 [12.9614 0 0 -12 0 0 ]msf94.4663 293.628 mo(2)sh100.947 293.628 mo(K)shOKEDQD+Times-Italic*1 [8.64096 0 0 -8 0 0 ]msf109.591 296.628 mo(S)shOKEDQC+Times-Roman*1 [9.72108 0 0 -9 0 0 ]msf113.913 290.788 mo(0)shOKEDQC+Times-Roman*1 [12.9614 0 0 -12 0 0 ]msf118.772 293.628 mo(+)shOKEDQD+Times-Italic*1 [12.9614 0 0 -12 0 0 ]msf126.083 293.628 mo(2)sh132.564 293.628 mo(K)shOKEDQD+Times-Italic*1 [8.64096 0 0 -8 0 0 ]msf141.208 296.628 mo(L)shOKEDQC+Times-Roman*1 [9.72108 0 0 -9 0 0 ]msf146.015 290.182 mo(0)shOKEDQC+Times-Roman*1 [12.9614 0 0 -12 0 0 ]msf150.875 292.182 mo(\))sh155.191 294.182 mo(X)shOKEDQC+Times-Roman*1 [12 0 0 -12 0 0 ]msf90.7544 292.579 mo(\()sh%ADOBeginSubsetFont: Myriad-Roman Initial
%ADOt1write: (1.0.24)13 dict dup begin/FontType 1 def/FontName /Myriad-Roman def/FontInfo 6 dict dup begin/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def/Weight (Regular) def/ItalicAngle 0 defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdef/UniqueID 41987 def/FontBBox {-46 -250 1126 831} defendsystemdict begindup /Private16 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 674 685 484 496 650 661 710 721] def/OtherBlues [261 266 -200 -194 -221 -212] def/FamilyBlues [-11 0 674 685 484 496 650 661 710 721] def/FamilyOtherBlues [261 266 -200 -194 -221 -212] def/BlueScale 0.0604582 def/BlueShift 7.09999 def/StdHW [67] def/StdVW [88] def/StemSnapH [67 73] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/space <1C60D8A8C9B896187A> |-/.notdef <1C60D8A8C9B896187A> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OKEDQF+Myriad-Roman /Myriad-Roman findfont ct_VMDictPut/OKEDQF+Myriad-Roman*1 [32{/.notdef}rp /space 223{/.notdef}rp]OKEDQF+Myriad-Roman nfOKEDQF+Myriad-Roman*1 [6 0 0 -6 0 0 ]msf94.7505 292.579 mo( )shOKEDQF+Myriad-Roman*1 [12 0 0 -12 0 0 ]msf96.0225 292.579 mo(    )[2.54395 2.54395 2.54395 0 ]xshOKEDQC+Times-Roman*1 [6 0 0 -6 0 0 ]msf124.263 208.579 mo( ) false chp1 lw
@
OKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf127.598 208.245 mo(X)sh124.481 139.485 mo
124.481 139.163 li
125.274 139.221 125.882 139.499 126.306 139.995 cv
126.729 140.491 126.942 141.172 126.942 142.04 cv
126.942 142.868 126.737 143.541 126.329 144.058 cv
125.921 144.576 125.399 144.834 124.763 144.834 cv
124.384 144.834 124.069 144.712 123.819 144.468 cv
123.569 144.224 123.374 143.846 123.233 143.334 cv
123.101 143.842 122.909 144.219 122.659 144.465 cv
122.409 144.711 122.093 144.834 121.71 144.834 cv
121.067 144.834 120.544 144.578 120.138 144.064 cv
119.731 143.55 119.528 142.875 119.528 142.04 cv
119.528 141.172 119.741 140.491 120.167 139.995 cv
120.595 139.499 121.206 139.221 122.005 139.163 cv
122.005 139.485 li
121.521 139.512 121.177 139.698 120.974 140.042 cv
120.771 140.386 120.669 140.968 120.669 141.789 cv
120.669 142.762 120.759 143.451 120.938 143.857 cv
121.117 144.264 121.411 144.467 121.821 144.467 cv
122.161 144.467 122.428 144.315 122.62 144.01 cv
122.813 143.705 122.911 143.281 122.911 142.738 cv
122.911 142.46 122.87 142.096 122.79 141.645 cv
122.708 141.193 122.669 140.886 122.669 140.722 cv
122.669 140.53 122.718 140.382 122.815 140.279 cv
122.913 140.175 123.054 140.124 123.233 140.124 cv
123.417 140.124 123.558 140.175 123.655 140.279 cv
123.753 140.382 123.802 140.53 123.802 140.722 cv
123.802 140.897 123.763 141.211 123.688 141.662 cv
123.612 142.114 123.575 142.476 123.575 142.75 cv
123.575 143.285 123.672 143.705 123.866 144.01 cv
124.062 144.315 124.327 144.467 124.661 144.467 cv
125.063 144.467 125.353 144.267 125.532 143.866 cv
125.712 143.466 125.802 142.811 125.802 141.9 cv
125.802 141.013 125.702 140.396 125.503 140.048 cv
125.305 139.7 124.964 139.512 124.481 139.485 cv
cp
f
OKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf127.92 145.579 mo(X)sh124.407 102.372 mo
124.407 96.2764 li
124.407 95.7266 124.346 95.3511 124.223 95.1499 cv
124.1 94.9492 123.882 94.8486 123.569 94.8486 cv
123.073 94.8486 122.663 95.1689 122.339 95.8086 cv
122.015 96.4487 121.853 97.2646 121.853 98.2559 cv
121.853 99.8252 li
120.728 99.8252 li
120.728 95.8896 li
120.728 95.5313 120.687 95.2681 120.604 95.1001 cv
120.521 94.9326 120.394 94.8486 120.221 94.8486 cv
120.032 94.8486 119.89 94.9307 119.794 95.0942 cv
119.697 95.2583 119.649 95.5 119.649 95.8193 cv
119.649 95.9893 li
119.411 95.9893 li
119.407 95.958 119.404 95.9248 119.402 95.8896 cv
119.4 95.8545 119.399 95.8037 119.399 95.7373 cv
119.399 95.2793 119.498 94.9287 119.696 94.6841 cv
119.894 94.4395 120.172 94.3174 120.532 94.3174 cv
120.962 94.3174 121.285 94.4941 121.501 94.8481 cv
121.716 95.2021 121.825 95.7422 121.829 96.4697 cv
122.024 95.7305 122.29 95.1875 122.626 94.8394 cv
122.961 94.4912 123.387 94.3174 123.902 94.3174 cv
124.479 94.3174 124.895 94.5117 125.146 94.9009 cv
125.398 95.2896 125.524 95.9473 125.524 96.8735 cv
125.524 102.372 li
124.407 102.372 li
cp
f
0 0 0 1 cmyk
%ADOBeginSubsetFont: RAAAAA+Symbol Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /RAAAAA+Symbol def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 4 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 162 /primemod putdef/FontBBox {-167 -299 1094 827} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE223F5D9796E7E2CD60A70D0> |-/primemod <1C60D8A8C9B8757470E112BD13E29972B7C66424BF03E6FC57BD7118E8A332F2021958363AB74D966684FE9138C7F662DBCED900A1DE2F0E77D124770E15> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/OKEDQG+Symbol /RAAAAA+Symbol findfont ct_VMDictPut/OKEDQG+Symbol*1 [162{/.notdef}rp /primemod 93{/.notdef}rp]OKEDQG+Symbol nfOKEDQG+Symbol*1 [13 0 0 -13 0 0 ]msf125.423 100.249 mo(\242)sh0 0 0 1 cmyk
OKEDQD+Times-Italic*1 [12 0 0 -12 0 0 ]msf128.048 99.5786 mo(X)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Gradient [/0 ]]
] del_res
/OKEDQG+Symbol*1 uf/OKEDQG+Symbol uf/RAAAAA+Symbol uf/OKEDQE+Symbol*1 uf/OKEDQE+Symbol uf/Symbol uf/OKEDQC+Times-Roman*1 uf/OKEDQC+Times-Roman uf/Times-Roman uf/OKEDQD+Times-Italic*1 uf/OKEDQD+Times-Italic uf/Times-Italic uf/OKEDQF+Myriad-Roman*1 uf/OKEDQF+Myriad-Roman uf/Myriad-Roman ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
