%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: f0mass_extended-1a-1.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Paul Schaffner
%%CreationDate: 6/6/12
%%BoundingBox: 0 0 288 304
%%HiResBoundingBox: 0 0 287.1504 303.3184
%%CropBox: 0 0 287.1504 303.3184
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:CreateDate>2012-03-28T17:58:23-07:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-03-28T17:58:24-07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-03-28T17:58:24-07:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>244</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7D5O/LD8vL78v9Dkl8sa&#xA;Q13daTas909hbNIZJLZSZGYpyLcjUmuKpxpv5R/lva6da20/lbRriaCGOKW4bTrWsjIoVnNUJqxF&#xA;euKon/lVn5Y/9Shon/cOtP8Aqnirv+VWflj/ANShon/cOtP+qeKu/wCVWflj/wBShon/AHDrT/qn&#xA;iqSedPyw/LyPytqT2flLSEuVhJiaHT7YSBqj7JWOtfliqd/8qs/LH/qUNE/7h1p/1TxV3/KrPyx/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.645603</stDim:w>
            <stDim:h>4.770589</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F11740720681188C6A10022476EEF</stEvt:instanceID>
                  <stEvt:when>2012-03-28T17:28:46-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F11740720681188C6A10022476EEF</stEvt:instanceID>
                  <stEvt:when>2012-03-28T17:57:43-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F11740720681188C6A10022476EEF</stEvt:instanceID>
                  <stEvt:when>2012-03-28T17:58:24-07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F97F11740720681188C6A10022476EEF</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F11740720681188C6A10022476EEF</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F87F11740720681188C6A10022476EEF</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:FB7F11740720681188C6A10022476EEF</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:FB7F11740720681188C6A10022476EEF</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F87F11740720681188C6A10022476EEF</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -303.318 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 303.318 li
287.15 303.318 li
287.15 0 li
cp
clp
[1 0 0 1 0 0 ]ct
92.8101 245.015 mo
166.679 245.015 li
166.679 206.887 li
92.8101 206.887 li
92.8101 245.015 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.862745 .862745 .862745 rgb
f
.918 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
92.8101 245.015 mo
166.679 245.015 li
@
92.8101 .458984 mo
166.679 .458984 li
166.679 206.887 li
92.8101 206.887 li
92.8101 .458984 li
cp
f
92.8101 .458984 mo
166.679 .458984 li
@
127.877 225.736 mo
127.877 213.496 li
140.791 219.616 mo
127.877 219.616 li
153.704 213.496 mo
153.704 225.736 li
140.791 219.616 mo
153.704 219.616 li
107.559 219.371 mo
107.559 207.132 li
153.704 213.252 mo
107.559 213.252 li
162.945 207.132 mo
162.945 219.371 li
153.704 213.252 mo
162.945 213.252 li
0 0 0 rgb
@
153.704 208.11 mo
149.236 215.822 li
158.172 215.822 li
153.704 208.11 li
cp
f
153.704 208.11 mo
149.236 215.822 li
158.172 215.822 li
153.704 208.11 li
153.704 208.11 li
cp
@
140.791 214.476 mo
136.323 222.187 li
145.259 222.187 li
140.791 214.476 li
cp
f
122.37 32.2217 mo
103.887 32.2217 li
140.791 26.1021 mo
140.791 38.3418 li
122.37 32.2217 mo
140.791 32.2217 li
92.8101 44.7065 mo
92.8101 32.4668 li
100.154 38.5869 mo
92.8101 38.5869 li
107.559 32.4668 mo
107.559 44.7065 li
100.154 38.5869 mo
107.559 38.5869 li
48.501 47.8892 mo
48.501 35.6489 li
120.472 41.769 mo
48.501 41.769 li
137.119 35.6489 mo
137.119 47.8892 li
120.472 41.769 mo
137.119 41.769 li
90.9741 51.0713 mo
90.9741 38.8315 li
107.559 44.9517 mo
90.9741 44.9517 li
124.206 38.8315 mo
124.206 51.0713 li
107.559 44.9517 mo
124.206 44.9517 li
61.231 54.1929 mo
61.231 41.9526 li
73.2261 48.0728 mo
61.231 48.0728 li
85.2212 41.9526 mo
85.2212 54.1929 li
73.2261 48.0728 mo
85.2212 48.0728 li
44.7681 57.375 mo
44.7681 45.1353 li
66.9224 51.2549 mo
44.7681 51.2549 li
89.0767 45.1353 mo
89.0767 57.375 li
66.9224 51.2549 mo
89.0767 51.2549 li
102.051 60.5576 mo
102.051 48.3174 li
109.395 54.4375 mo
102.051 54.4375 li
116.8 48.3174 mo
116.8 60.5576 li
109.395 54.4375 mo
116.8 54.4375 li
87.4243 63.7397 mo
87.4243 51.5 li
94.8296 57.6201 mo
87.4243 57.6201 li
102.235 51.5 mo
102.235 63.7397 li
94.8296 57.6201 mo
102.235 57.6201 li
107.559 66.9224 mo
107.559 54.6826 li
126.042 60.8022 mo
107.559 60.8022 li
144.524 54.6826 mo
144.524 66.9224 li
126.042 60.8022 mo
144.524 60.8022 li
94.646 73.2871 mo
94.646 61.0474 li
98.3179 67.167 mo
94.646 67.167 li
102.051 61.0474 mo
102.051 73.2871 li
98.3179 67.167 mo
102.051 67.167 li
113.128 82.8345 mo
113.128 70.5942 li
124.206 76.7144 mo
113.128 76.7144 li
135.283 70.5942 mo
135.283 82.8345 li
124.206 76.7144 mo
135.283 76.7144 li
127.877 85.9556 mo
127.877 73.7153 li
137.119 79.8354 mo
127.877 79.8354 li
146.36 73.7153 mo
146.36 85.9556 li
137.119 79.8354 mo
146.36 79.8354 li
55.8452 89.1377 mo
55.8452 76.8979 li
74.3276 83.0181 mo
55.8452 83.0181 li
92.8101 76.8979 mo
92.8101 89.1377 li
74.3276 83.0181 mo
92.8101 83.0181 li
133.447 92.3203 mo
133.447 80.0806 li
142.627 86.2002 mo
133.447 86.2002 li
151.868 80.0806 mo
151.868 92.3203 li
142.627 86.2002 mo
151.868 86.2002 li
123.655 98.6851 mo
123.655 86.4453 li
135.65 92.5649 mo
123.655 92.5649 li
148.38 86.4453 mo
148.38 98.6851 li
135.65 92.5649 mo
148.38 92.5649 li
120.472 101.868 mo
120.472 89.6274 li
137.119 95.7476 mo
120.472 95.7476 li
153.704 89.6274 mo
153.704 101.868 li
137.119 95.7476 mo
153.704 95.7476 li
46.604 105.05 mo
46.604 92.8101 li
65.0864 98.9297 mo
46.604 98.9297 li
83.5688 92.8101 mo
83.5688 105.05 li
65.0864 98.9297 mo
83.5688 98.9297 li
148.196 111.415 mo
148.196 99.1748 li
175.92 105.295 mo
148.196 105.295 li
203.582 99.1748 mo
203.582 111.415 li
175.92 105.295 mo
203.582 105.295 li
55.8452 114.597 mo
55.8452 102.357 li
74.3276 108.477 mo
55.8452 108.477 li
92.8101 102.357 mo
92.8101 114.597 li
74.3276 108.477 mo
92.8101 108.477 li
57.6812 117.718 mo
57.6812 105.479 li
68.7583 111.598 mo
57.6812 111.598 li
79.897 105.479 mo
79.897 117.718 li
68.7583 111.598 mo
79.897 111.598 li
126.042 120.901 mo
126.042 108.661 li
131.55 114.781 mo
126.042 114.781 li
137.119 108.661 mo
137.119 120.901 li
131.55 114.781 mo
137.119 114.781 li
100.154 124.083 mo
100.154 111.843 li
127.877 117.963 mo
100.154 117.963 li
155.602 111.843 mo
155.602 124.083 li
127.877 117.963 mo
155.602 117.963 li
113.128 127.266 mo
113.128 115.025 li
124.206 121.146 mo
113.128 121.146 li
135.283 115.025 mo
135.283 127.266 li
124.206 121.146 mo
135.283 121.146 li
109.395 130.448 mo
109.395 118.208 li
114.964 124.328 mo
109.395 124.328 li
120.472 118.208 mo
120.472 130.448 li
114.964 124.328 mo
120.472 124.328 li
109.395 133.63 mo
109.395 121.39 li
114.964 127.51 mo
109.395 127.51 li
120.472 121.39 mo
120.472 133.63 li
114.964 127.51 mo
120.472 127.51 li
102.051 136.813 mo
102.051 124.573 li
120.472 130.693 mo
102.051 130.693 li
138.955 124.573 mo
138.955 136.813 li
120.472 130.693 mo
138.955 130.693 li
94.646 139.995 mo
94.646 127.755 li
102.051 133.875 mo
94.646 133.875 li
113.128 127.755 mo
113.128 139.995 li
102.051 133.875 mo
113.128 133.875 li
94.646 143.178 mo
94.646 130.938 li
102.051 137.058 mo
94.646 137.058 li
113.128 130.938 mo
113.128 143.178 li
102.051 137.058 mo
113.128 137.058 li
100.154 146.299 mo
100.154 134.059 li
105.723 140.179 mo
100.154 140.179 li
116.8 134.059 mo
116.8 146.299 li
105.723 140.179 mo
116.8 140.179 li
94.646 149.481 mo
94.646 137.241 li
103.887 143.361 mo
94.646 143.361 li
114.964 137.241 mo
114.964 149.481 li
103.887 143.361 mo
114.964 143.361 li
98.3179 152.663 mo
98.3179 140.424 li
120.472 146.544 mo
98.3179 146.544 li
150.032 140.424 mo
150.032 152.663 li
120.472 146.544 mo
150.032 146.544 li
84.1196 155.846 mo
84.1196 143.605 li
92.4429 149.726 mo
84.1196 149.726 li
100.705 143.605 mo
100.705 155.846 li
92.4429 149.726 mo
100.705 149.726 li
100.154 159.028 mo
100.154 146.788 li
105.723 152.908 mo
100.154 152.908 li
109.395 146.788 mo
109.395 159.028 li
105.723 152.908 mo
109.395 152.908 li
96.4819 162.211 mo
96.4819 149.971 li
98.3179 156.091 mo
96.4819 156.091 li
100.154 149.971 mo
100.154 162.211 li
98.3179 156.091 mo
100.154 156.091 li
159.273 165.394 mo
159.273 153.153 li
216.495 159.273 mo
159.273 159.273 li
273.778 153.153 mo
273.778 165.394 li
216.495 159.273 mo
273.778 159.273 li
190.669 168.575 mo
190.669 156.336 li
205.418 162.455 mo
190.669 162.455 li
220.229 156.336 mo
220.229 168.575 li
205.418 162.455 mo
220.229 162.455 li
65.0864 171.758 mo
65.0864 159.518 li
83.5688 165.638 mo
65.0864 165.638 li
102.051 159.518 mo
102.051 171.758 li
83.5688 165.638 mo
102.051 165.638 li
39.2598 174.94 mo
39.2598 162.7 li
55.8452 168.82 mo
39.2598 168.82 li
72.4917 162.7 mo
72.4917 174.94 li
55.8452 168.82 mo
72.4917 168.82 li
98.3179 178.062 mo
98.3179 165.821 li
106.274 171.941 mo
98.3179 171.941 li
113.128 165.821 mo
113.128 178.062 li
106.274 171.941 mo
113.128 171.941 li
111.231 181.244 mo
111.231 169.004 li
116.8 175.124 mo
111.231 175.124 li
124.206 169.004 mo
124.206 181.244 li
116.8 175.124 mo
124.206 175.124 li
117.902 184.427 mo
117.902 172.187 li
121.574 178.307 mo
117.902 178.307 li
124.573 172.187 mo
124.573 184.427 li
121.574 178.307 mo
124.573 178.307 li
24.4497 187.608 mo
24.4497 175.369 li
61.4146 181.489 mo
24.4497 181.489 li
98.3179 175.369 mo
98.3179 187.608 li
61.4146 181.489 mo
98.3179 181.489 li
79.897 190.791 mo
79.897 178.551 li
92.8101 184.671 mo
79.897 184.671 li
105.723 178.551 mo
105.723 190.791 li
92.8101 184.671 mo
105.723 184.671 li
92.8101 193.974 mo
92.8101 181.733 li
98.3179 187.854 mo
92.8101 187.854 li
103.887 181.733 mo
103.887 193.974 li
98.3179 187.854 mo
103.887 187.854 li
113.128 197.156 mo
113.128 184.916 li
119.921 191.036 mo
113.128 191.036 li
124.389 184.916 mo
124.389 197.156 li
119.921 191.036 mo
124.389 191.036 li
104.071 200.338 mo
104.071 188.099 li
105.356 194.219 mo
104.071 194.219 li
124.022 188.099 mo
124.022 200.338 li
105.356 194.219 mo
124.022 194.219 li
100.521 203.521 mo
100.521 191.28 li
115.332 197.4 mo
100.521 197.4 li
130.265 191.28 mo
130.265 203.521 li
115.332 197.4 mo
130.265 197.4 li
89.0767 206.703 mo
89.0767 194.463 li
105.723 200.583 mo
89.0767 200.583 li
126.042 194.463 mo
126.042 206.703 li
105.723 200.583 mo
126.042 200.583 li
185.1 209.824 mo
185.1 197.584 li
203.582 203.704 mo
185.1 203.704 li
258.968 197.584 mo
258.968 209.824 li
203.582 203.704 mo
258.968 203.704 li
33.6909 213.007 mo
33.6909 200.767 li
113.128 206.887 mo
33.6909 206.887 li
192.505 200.767 mo
192.505 213.007 li
113.128 206.887 mo
192.505 206.887 li
140.791 214.476 mo
136.323 222.187 li
145.259 222.187 li
140.791 214.476 li
140.791 214.476 li
cp
@
114.964 232.102 mo
114.964 219.861 li
140.791 225.981 mo
114.964 225.981 li
148.196 219.861 mo
148.196 232.102 li
140.791 225.981 mo
148.196 225.981 li
131.55 22.4297 mo
131.55 10.1899 li
142.627 16.3101 mo
131.55 16.3101 li
153.704 10.1899 mo
153.704 22.4297 li
142.627 16.3101 mo
153.704 16.3101 li
124.206 25.6123 mo
124.206 13.3721 li
161.109 19.4922 mo
124.206 19.4922 li
198.074 13.3721 mo
198.074 25.6123 li
161.109 19.4922 mo
198.074 19.4922 li
159.273 28.7949 mo
159.273 16.5547 li
170.351 22.6748 mo
159.273 22.6748 li
181.428 16.5547 mo
181.428 28.7949 li
170.351 22.6748 mo
181.428 22.6748 li
111.231 31.9771 mo
111.231 19.7373 li
124.206 25.8569 mo
111.231 25.8569 li
137.119 19.7373 mo
137.119 31.9771 li
124.206 25.8569 mo
137.119 25.8569 li
81.7329 35.1597 mo
81.7329 22.9194 li
90.9741 29.0396 mo
81.7329 29.0396 li
100.154 22.9194 mo
100.154 35.1597 li
90.9741 29.0396 mo
100.154 29.0396 li
103.887 38.3418 mo
103.887 26.1021 li
@
113.128 201.746 mo
108.661 209.457 li
117.596 209.457 li
113.128 201.746 li
cp
f
113.128 201.746 mo
108.661 209.457 li
117.596 209.457 li
113.128 201.746 li
113.128 201.746 li
cp
@
203.582 198.563 mo
199.114 206.336 li
208.05 206.336 li
203.582 198.563 li
cp
f
203.582 198.563 mo
199.114 206.336 li
208.05 206.336 li
203.582 198.563 li
203.582 198.563 li
cp
@
105.723 195.381 mo
101.255 203.153 li
110.191 203.153 li
105.723 195.381 li
cp
f
105.723 195.381 mo
101.255 203.153 li
110.191 203.153 li
105.723 195.381 li
105.723 195.381 li
cp
@
115.332 192.198 mo
110.864 199.971 li
119.799 199.971 li
115.332 192.198 li
cp
f
115.332 192.198 mo
110.864 199.971 li
119.799 199.971 li
115.332 192.198 li
115.332 192.198 li
cp
@
105.356 189.017 mo
100.888 196.789 li
109.824 196.789 li
105.356 189.017 li
cp
f
105.356 189.017 mo
100.888 196.789 li
109.824 196.789 li
105.356 189.017 li
105.356 189.017 li
cp
@
119.921 185.896 mo
115.454 193.606 li
124.389 193.606 li
119.921 185.896 li
cp
f
119.921 185.896 mo
115.454 193.606 li
124.389 193.606 li
119.921 185.896 li
119.921 185.896 li
cp
@
98.3179 182.713 mo
93.8506 190.424 li
102.786 190.424 li
98.3179 182.713 li
cp
f
98.3179 182.713 mo
93.8506 190.424 li
102.786 190.424 li
98.3179 182.713 li
98.3179 182.713 li
cp
@
92.8101 179.53 mo
88.3423 187.241 li
97.2773 187.241 li
92.8101 179.53 li
cp
f
92.8101 179.53 mo
88.3423 187.241 li
97.2773 187.241 li
92.8101 179.53 li
92.8101 179.53 li
cp
@
61.4146 176.348 mo
56.9468 184.06 li
65.8818 184.06 li
61.4146 176.348 li
cp
f
61.4146 176.348 mo
56.9468 184.06 li
65.8818 184.06 li
61.4146 176.348 li
61.4146 176.348 li
cp
@
121.574 173.166 mo
117.106 180.877 li
126.042 180.877 li
121.574 173.166 li
cp
f
121.574 173.166 mo
117.106 180.877 li
126.042 180.877 li
121.574 173.166 li
121.574 173.166 li
cp
@
116.8 169.983 mo
112.333 177.756 li
121.268 177.756 li
116.8 169.983 li
cp
f
116.8 169.983 mo
112.333 177.756 li
121.268 177.756 li
116.8 169.983 li
116.8 169.983 li
cp
@
106.274 166.801 mo
101.807 174.573 li
110.742 174.573 li
106.274 166.801 li
cp
f
106.274 166.801 mo
101.807 174.573 li
110.742 174.573 li
106.274 166.801 li
106.274 166.801 li
cp
@
55.8452 163.618 mo
51.3774 171.391 li
60.3125 171.391 li
55.8452 163.618 li
cp
f
55.8452 163.618 mo
51.3774 171.391 li
60.3125 171.391 li
55.8452 163.618 li
55.8452 163.618 li
cp
@
83.5688 160.436 mo
79.1011 168.208 li
88.0361 168.208 li
83.5688 160.436 li
cp
f
83.5688 160.436 mo
79.1011 168.208 li
88.0361 168.208 li
83.5688 160.436 li
83.5688 160.436 li
cp
@
205.418 157.254 mo
200.95 165.026 li
209.886 165.026 li
205.418 157.254 li
cp
f
205.418 157.254 mo
200.95 165.026 li
209.886 165.026 li
205.418 157.254 li
205.418 157.254 li
cp
@
216.495 154.132 mo
212.027 161.844 li
220.963 161.844 li
216.495 154.132 li
cp
f
216.495 154.132 mo
212.027 161.844 li
220.963 161.844 li
216.495 154.132 li
216.495 154.132 li
cp
@
98.3179 150.95 mo
93.8506 158.661 li
102.786 158.661 li
98.3179 150.95 li
cp
f
98.3179 150.95 mo
93.8506 158.661 li
102.786 158.661 li
98.3179 150.95 li
98.3179 150.95 li
cp
@
105.723 147.768 mo
101.255 155.479 li
110.191 155.479 li
105.723 147.768 li
cp
f
105.723 147.768 mo
101.255 155.479 li
110.191 155.479 li
105.723 147.768 li
105.723 147.768 li
cp
@
92.4429 144.585 mo
87.9751 152.296 li
96.9102 152.296 li
92.4429 144.585 li
cp
f
92.4429 144.585 mo
87.9751 152.296 li
96.9102 152.296 li
92.4429 144.585 li
92.4429 144.585 li
cp
@
120.472 141.402 mo
116.005 149.114 li
124.94 149.114 li
120.472 141.402 li
cp
f
120.472 141.402 mo
116.005 149.114 li
124.94 149.114 li
120.472 141.402 li
120.472 141.402 li
cp
@
103.887 138.221 mo
99.4194 145.993 li
108.355 145.993 li
103.887 138.221 li
cp
f
103.887 138.221 mo
99.4194 145.993 li
108.355 145.993 li
103.887 138.221 li
103.887 138.221 li
cp
@
105.723 135.038 mo
101.255 142.811 li
110.191 142.811 li
105.723 135.038 li
cp
f
105.723 135.038 mo
101.255 142.811 li
110.191 142.811 li
105.723 135.038 li
105.723 135.038 li
cp
@
102.051 131.855 mo
97.5835 139.628 li
106.519 139.628 li
102.051 131.855 li
cp
f
102.051 131.855 mo
97.5835 139.628 li
106.519 139.628 li
102.051 131.855 li
102.051 131.855 li
cp
@
102.051 128.673 mo
97.5835 136.445 li
106.519 136.445 li
102.051 128.673 li
cp
f
102.051 128.673 mo
97.5835 136.445 li
106.519 136.445 li
102.051 128.673 li
102.051 128.673 li
cp
@
120.472 125.552 mo
116.005 133.263 li
124.94 133.263 li
120.472 125.552 li
cp
f
120.472 125.552 mo
116.005 133.263 li
124.94 133.263 li
120.472 125.552 li
120.472 125.552 li
cp
@
114.964 122.37 mo
110.497 130.081 li
119.432 130.081 li
114.964 122.37 li
cp
f
114.964 122.37 mo
110.497 130.081 li
119.432 130.081 li
114.964 122.37 li
114.964 122.37 li
cp
@
114.964 119.187 mo
110.497 126.898 li
119.432 126.898 li
114.964 119.187 li
cp
f
114.964 119.187 mo
110.497 126.898 li
119.432 126.898 li
114.964 119.187 li
114.964 119.187 li
cp
@
124.206 116.005 mo
119.738 123.716 li
128.673 123.716 li
124.206 116.005 li
cp
f
124.206 116.005 mo
119.738 123.716 li
128.673 123.716 li
124.206 116.005 li
124.206 116.005 li
cp
@
127.877 112.822 mo
123.41 120.534 li
132.345 120.534 li
127.877 112.822 li
cp
f
127.877 112.822 mo
123.41 120.534 li
132.345 120.534 li
127.877 112.822 li
127.877 112.822 li
cp
@
131.55 109.64 mo
127.082 117.351 li
136.017 117.351 li
131.55 109.64 li
cp
f
131.55 109.64 mo
127.082 117.351 li
136.017 117.351 li
131.55 109.64 li
131.55 109.64 li
cp
@
68.7583 106.458 mo
64.291 114.23 li
73.2261 114.23 li
68.7583 106.458 li
cp
f
68.7583 106.458 mo
64.291 114.23 li
73.2261 114.23 li
68.7583 106.458 li
68.7583 106.458 li
cp
@
74.3276 103.275 mo
69.8599 111.047 li
78.7949 111.047 li
74.3276 103.275 li
cp
f
74.3276 103.275 mo
69.8599 111.047 li
78.7949 111.047 li
74.3276 103.275 li
74.3276 103.275 li
cp
@
175.92 100.093 mo
171.452 107.865 li
180.388 107.865 li
175.92 100.093 li
cp
f
175.92 100.093 mo
171.452 107.865 li
180.388 107.865 li
175.92 100.093 li
175.92 100.093 li
cp
@
162.945 96.9102 mo
158.478 104.683 li
167.413 104.683 li
162.945 96.9102 li
cp
f
162.945 96.9102 mo
158.478 104.683 li
167.413 104.683 li
162.945 96.9102 li
162.945 96.9102 li
cp
@
65.0864 93.7891 mo
60.6187 101.5 li
69.5537 101.5 li
65.0864 93.7891 li
cp
f
65.0864 93.7891 mo
60.6187 101.5 li
69.5537 101.5 li
65.0864 93.7891 li
65.0864 93.7891 li
cp
@
137.119 90.6069 mo
132.651 98.3179 li
141.586 98.3179 li
137.119 90.6069 li
cp
f
137.119 90.6069 mo
132.651 98.3179 li
141.586 98.3179 li
137.119 90.6069 li
137.119 90.6069 li
cp
@
135.65 87.4243 mo
131.183 95.1357 li
140.118 95.1357 li
135.65 87.4243 li
cp
f
135.65 87.4243 mo
131.183 95.1357 li
140.118 95.1357 li
135.65 87.4243 li
135.65 87.4243 li
cp
@
159.273 84.2422 mo
154.806 91.9531 li
163.741 91.9531 li
159.273 84.2422 li
cp
f
159.273 84.2422 mo
154.806 91.9531 li
163.741 91.9531 li
159.273 84.2422 li
159.273 84.2422 li
cp
@
142.627 81.0596 mo
138.159 88.7705 li
147.095 88.7705 li
142.627 81.0596 li
cp
f
142.627 81.0596 mo
138.159 88.7705 li
147.095 88.7705 li
142.627 81.0596 li
142.627 81.0596 li
cp
@
74.3276 77.877 mo
69.8599 85.5884 li
78.7949 85.5884 li
74.3276 77.877 li
cp
f
74.3276 77.877 mo
69.8599 85.5884 li
78.7949 85.5884 li
74.3276 77.877 li
74.3276 77.877 li
cp
@
137.119 74.6948 mo
132.651 82.4673 li
141.586 82.4673 li
137.119 74.6948 li
cp
f
137.119 74.6948 mo
132.651 82.4673 li
141.586 82.4673 li
137.119 74.6948 li
137.119 74.6948 li
cp
@
124.206 71.5122 mo
119.738 79.2847 li
128.673 79.2847 li
124.206 71.5122 li
cp
f
124.206 71.5122 mo
119.738 79.2847 li
128.673 79.2847 li
124.206 71.5122 li
124.206 71.5122 li
cp
@
175.92 68.3301 mo
171.452 76.1025 li
180.388 76.1025 li
175.92 68.3301 li
cp
f
175.92 68.3301 mo
171.452 76.1025 li
180.388 76.1025 li
175.92 68.3301 li
175.92 68.3301 li
cp
@
116.8 65.1475 mo
112.333 72.9199 li
121.268 72.9199 li
116.8 65.1475 li
cp
f
116.8 65.1475 mo
112.333 72.9199 li
121.268 72.9199 li
116.8 65.1475 li
116.8 65.1475 li
cp
@
98.3179 62.0264 mo
93.8506 69.7373 li
102.786 69.7373 li
98.3179 62.0264 li
cp
f
98.3179 62.0264 mo
93.8506 69.7373 li
102.786 69.7373 li
98.3179 62.0264 li
98.3179 62.0264 li
cp
@
126.042 58.8438 mo
121.574 66.5552 li
130.509 66.5552 li
126.042 58.8438 li
cp
f
126.042 58.8438 mo
121.574 66.5552 li
130.509 66.5552 li
126.042 58.8438 li
126.042 58.8438 li
cp
@
126.042 55.6616 mo
121.574 63.3726 li
130.509 63.3726 li
126.042 55.6616 li
cp
f
126.042 55.6616 mo
121.574 63.3726 li
130.509 63.3726 li
126.042 55.6616 li
126.042 55.6616 li
cp
@
94.8296 52.479 mo
90.3618 60.1904 li
99.2974 60.1904 li
94.8296 52.479 li
cp
f
94.8296 52.479 mo
90.3618 60.1904 li
99.2974 60.1904 li
94.8296 52.479 li
94.8296 52.479 li
cp
@
109.395 49.2969 mo
104.928 57.0078 li
113.863 57.0078 li
109.395 49.2969 li
cp
f
109.395 49.2969 mo
104.928 57.0078 li
113.863 57.0078 li
109.395 49.2969 li
109.395 49.2969 li
cp
@
66.9224 46.1143 mo
62.4546 53.8867 li
71.3901 53.8867 li
66.9224 46.1143 li
cp
f
66.9224 46.1143 mo
62.4546 53.8867 li
71.3901 53.8867 li
66.9224 46.1143 li
66.9224 46.1143 li
cp
@
73.2261 42.9321 mo
68.7583 50.7041 li
77.6934 50.7041 li
73.2261 42.9321 li
cp
f
73.2261 42.9321 mo
68.7583 50.7041 li
77.6934 50.7041 li
73.2261 42.9321 li
73.2261 42.9321 li
cp
@
107.559 39.7495 mo
103.092 47.522 li
112.027 47.522 li
107.559 39.7495 li
cp
f
107.559 39.7495 mo
103.092 47.522 li
112.027 47.522 li
107.559 39.7495 li
107.559 39.7495 li
cp
@
120.472 36.5674 mo
116.005 44.3394 li
124.94 44.3394 li
120.472 36.5674 li
cp
f
120.472 36.5674 mo
116.005 44.3394 li
124.94 44.3394 li
120.472 36.5674 li
120.472 36.5674 li
cp
@
100.154 33.3848 mo
95.6865 41.1572 li
104.622 41.1572 li
100.154 33.3848 li
cp
f
100.154 33.3848 mo
95.6865 41.1572 li
104.622 41.1572 li
100.154 33.3848 li
100.154 33.3848 li
cp
@
102.051 30.2637 mo
97.5835 37.9746 li
106.519 37.9746 li
102.051 30.2637 li
cp
f
102.051 30.2637 mo
97.5835 37.9746 li
106.519 37.9746 li
102.051 30.2637 li
102.051 30.2637 li
cp
@
122.37 27.0811 mo
117.902 34.7925 li
126.837 34.7925 li
122.37 27.0811 li
cp
f
122.37 27.0811 mo
117.902 34.7925 li
126.837 34.7925 li
122.37 27.0811 li
122.37 27.0811 li
cp
@
90.9741 23.8989 mo
86.5063 31.6099 li
95.4414 31.6099 li
90.9741 23.8989 li
cp
f
90.9741 23.8989 mo
86.5063 31.6099 li
95.4414 31.6099 li
90.9741 23.8989 li
90.9741 23.8989 li
cp
@
124.206 20.7163 mo
119.738 28.4277 li
128.673 28.4277 li
124.206 20.7163 li
cp
f
124.206 20.7163 mo
119.738 28.4277 li
128.673 28.4277 li
124.206 20.7163 li
124.206 20.7163 li
cp
@
170.351 17.5342 mo
165.883 25.2451 li
174.818 25.2451 li
170.351 17.5342 li
cp
f
170.351 17.5342 mo
165.883 25.2451 li
174.818 25.2451 li
170.351 17.5342 li
170.351 17.5342 li
cp
@
161.109 14.3516 mo
156.642 22.124 li
165.577 22.124 li
161.109 14.3516 li
cp
f
161.109 14.3516 mo
156.642 22.124 li
165.577 22.124 li
161.109 14.3516 li
161.109 14.3516 li
cp
@
142.627 11.1689 mo
138.159 18.9414 li
147.095 18.9414 li
142.627 11.1689 li
cp
f
142.627 11.1689 mo
138.159 18.9414 li
147.095 18.9414 li
142.627 11.1689 li
142.627 11.1689 li
cp
@
140.791 220.779 mo
136.323 228.552 li
145.259 228.552 li
140.791 220.779 li
cp
f
240.547 .458984 mo
240.547 8.66016 li
240.547 245.015 mo
240.547 236.813 li
148.196 .458984 mo
148.196 8.66016 li
148.196 245.015 mo
148.196 236.813 li
55.8452 .458984 mo
55.8452 8.66016 li
55.8452 245.015 mo
55.8452 236.813 li
286.691 .458984 mo
286.691 4.98779 li
286.691 245.015 mo
286.691 240.485 li
194.341 .458984 mo
194.341 4.98779 li
194.341 245.015 mo
194.341 240.485 li
102.051 .458984 mo
102.051 4.98779 li
102.051 245.015 mo
102.051 240.485 li
9.7002 .458984 mo
9.7002 4.98779 li
9.7002 245.015 mo
9.7002 240.485 li
.458984 .458984 mo
286.691 .458984 li
.458984 245.015 mo
286.691 245.015 li
140.791 220.779 mo
136.323 228.552 li
145.259 228.552 li
140.791 220.779 li
140.791 220.779 li
cp
@
48.6953 257.773 mo
49.1006 257.562 49.3311 257.383 49.3867 257.238 cv
49.4092 257.183 49.4287 256.975 49.4458 256.614 cv
49.4624 256.255 49.4707 255.963 49.4707 255.74 cv
49.4707 254.58 49.2749 253.638 48.8838 252.912 cv
48.4927 252.187 47.9199 251.824 47.165 251.824 cv
46.6172 251.824 46.1743 252.072 45.8364 252.569 cv
45.498 253.065 45.3291 253.808 45.3291 254.795 cv
45.3291 255.609 45.4868 256.362 45.8027 257.054 cv
46.1187 257.745 46.6899 258.092 47.5176 258.092 cv
47.8975 258.092 48.29 257.985 48.6953 257.773 cv
cp
50.1235 252.815 mo
50.793 253.795 51.1274 254.887 51.1274 256.092 cv
51.1274 256.939 50.9688 257.802 50.6504 258.677 cv
50.3325 259.553 49.8696 260.334 49.2617 261.02 cv
48.5532 261.812 47.6553 262.4 46.5674 262.785 cv
45.9595 263.003 45.1924 263.17 44.2666 263.287 cv
44.1826 262.953 li
44.7637 262.818 45.2471 262.677 45.6328 262.526 cv
46.3252 262.253 46.8813 261.918 47.3003 261.521 cv
47.8926 260.959 48.3657 260.329 48.7207 259.635 cv
49.0757 258.94 49.2979 258.359 49.3872 257.891 cv
49.0938 258.106 li
48.6807 258.416 48.1943 258.629 47.6357 258.745 cv
47.3452 258.812 47.0801 258.845 46.8398 258.845 cv
45.8901 258.845 45.1372 258.509 44.5815 257.837 cv
44.0254 257.166 43.7476 256.365 43.7476 255.435 cv
43.7476 254.247 44.0781 253.27 44.7393 252.501 cv
45.4004 251.731 46.2466 251.348 47.2788 251.348 cv
48.5059 251.348 49.4541 251.837 50.1235 252.815 cv
cp
f
54.3394 261.895 mo
54.856 262.254 55.2539 262.434 55.5332 262.434 cv
56.1758 262.434 56.7373 262.15 57.2178 261.585 cv
57.6982 261.019 57.9385 260.322 57.9385 259.497 cv
57.9385 258.053 57.1675 257.012 55.6255 256.376 cv
54.771 256.024 53.9751 255.849 53.2378 255.849 cv
53.1147 255.849 53.0381 255.845 53.0073 255.836 cv
52.9766 255.828 52.939 255.799 52.8945 255.749 cv
52.9053 255.704 52.915 255.666 52.9238 255.636 cv
52.9321 255.605 52.9419 255.576 52.9531 255.548 cv
54.7778 251.548 li
58.3652 251.548 li
58.5439 251.548 58.6816 251.518 58.7793 251.456 cv
58.877 251.395 59.0039 251.28 59.1602 251.113 cv
59.2939 251.23 li
58.6489 252.778 li
58.627 252.828 58.5659 252.86 58.4653 252.874 cv
58.3647 252.889 58.2559 252.896 58.1387 252.896 cv
54.8965 252.896 li
54.1841 254.359 li
55.1001 254.516 55.77 254.664 56.1943 254.803 cv
56.8926 255.037 57.4761 255.383 57.9453 255.841 cv
58.3472 256.236 58.6519 256.682 58.8584 257.175 cv
59.0649 257.669 59.1685 258.191 59.1685 258.744 cv
59.1685 259.977 58.7285 261.006 57.8486 261.831 cv
56.9692 262.657 55.8564 263.069 54.5103 263.069 cv
53.9629 263.069 53.522 263.017 53.187 262.911 cv
52.6284 262.738 52.3491 262.429 52.3491 261.982 cv
52.3491 261.814 52.4092 261.668 52.5293 261.543 cv
52.6494 261.417 52.835 261.354 53.0864 261.354 cv
53.4048 261.354 53.8223 261.534 54.3394 261.895 cv
cp
f
66.1631 261.222 mo
66.4697 260.324 66.6235 259.025 66.6235 257.325 cv
66.6235 255.971 66.5313 254.89 66.3472 254.082 cv
66.0015 252.577 65.3545 251.824 64.4063 251.824 cv
63.4575 251.824 62.8081 252.599 62.4565 254.148 cv
62.2725 254.974 62.1802 256.061 62.1802 257.409 cv
62.1802 258.675 62.2749 259.687 62.4648 260.444 cv
62.8218 261.86 63.4912 262.567 64.4731 262.567 cv
65.293 262.567 65.8564 262.119 66.1631 261.222 cv
cp
67.4351 253.389 mo
67.9985 254.477 68.2803 255.727 68.2803 257.138 cv
68.2803 258.248 68.1069 259.294 67.7612 260.275 cv
67.1084 262.122 65.979 263.045 64.3726 263.045 cv
63.2734 263.045 62.3701 262.546 61.6616 261.547 cv
60.9028 260.481 60.5234 259.034 60.5234 257.204 cv
60.5234 255.766 60.7773 254.527 61.2852 253.489 cv
61.9712 252.078 63.0254 251.372 64.4478 251.372 cv
65.731 251.372 66.7266 252.045 67.4351 253.389 cv
cp
f
136.354 251.202 mo
136.356 251.216 136.357 251.248 136.357 251.298 cv
136.357 261.372 li
136.357 261.802 136.472 262.075 136.702 262.192 cv
136.932 262.31 137.361 262.379 137.989 262.401 cv
137.989 262.636 li
133.262 262.636 li
133.262 262.385 li
133.937 262.352 134.377 262.259 134.583 262.108 cv
134.79 261.958 134.893 261.632 134.893 261.13 cv
134.893 253.382 li
134.893 253.114 134.86 252.91 134.793 252.771 cv
134.726 252.632 134.581 252.562 134.358 252.562 cv
134.212 252.562 134.024 252.603 133.793 252.683 cv
133.562 252.764 133.345 252.849 133.145 252.938 cv
133.145 252.704 li
136.215 251.14 li
136.315 251.14 li
136.338 251.167 136.351 251.188 136.354 251.202 cv
cp
f
145.603 260.972 mo
145.909 260.074 146.063 258.775 146.063 257.075 cv
146.063 255.721 145.972 254.64 145.788 253.832 cv
145.44 252.327 144.794 251.574 143.847 251.574 cv
142.897 251.574 142.248 252.349 141.896 253.898 cv
141.712 254.724 141.62 255.811 141.62 257.159 cv
141.62 258.425 141.715 259.437 141.905 260.194 cv
142.262 261.61 142.931 262.317 143.913 262.317 cv
144.733 262.317 145.296 261.869 145.603 260.972 cv
cp
146.874 253.139 mo
147.438 254.227 147.72 255.477 147.72 256.888 cv
147.72 257.998 147.548 259.044 147.202 260.025 cv
146.548 261.872 145.419 262.795 143.813 262.795 cv
142.713 262.795 141.81 262.296 141.102 261.297 cv
140.343 260.231 139.963 258.784 139.963 256.954 cv
139.963 255.516 140.217 254.277 140.725 253.239 cv
141.411 251.828 142.465 251.122 143.888 251.122 cv
145.171 251.122 146.167 251.795 146.874 253.139 cv
cp
f
154.171 260.972 mo
154.478 260.074 154.631 258.775 154.631 257.075 cv
154.631 255.721 154.539 254.64 154.355 253.832 cv
154.009 252.327 153.362 251.574 152.414 251.574 cv
151.466 251.574 150.815 252.349 150.464 253.898 cv
150.28 254.724 150.188 255.811 150.188 257.159 cv
150.188 258.425 150.283 259.437 150.473 260.194 cv
150.829 261.61 151.499 262.317 152.48 262.317 cv
153.301 262.317 153.864 261.869 154.171 260.972 cv
cp
155.442 253.139 mo
156.006 254.227 156.288 255.477 156.288 256.888 cv
156.288 257.998 156.115 259.044 155.77 260.025 cv
155.116 261.872 153.987 262.795 152.381 262.795 cv
151.281 262.795 150.378 262.296 149.669 261.297 cv
148.911 260.231 148.531 258.784 148.531 256.954 cv
148.531 255.516 148.785 254.277 149.293 253.239 cv
149.979 251.828 151.033 251.122 152.456 251.122 cv
153.738 251.122 154.734 251.795 155.442 253.139 cv
cp
f
162.739 260.972 mo
163.046 260.074 163.199 258.775 163.199 257.075 cv
163.199 255.721 163.107 254.64 162.924 253.832 cv
162.577 252.327 161.931 251.574 160.982 251.574 cv
160.034 251.574 159.384 252.349 159.032 253.898 cv
158.849 254.724 158.757 255.811 158.757 257.159 cv
158.757 258.425 158.852 259.437 159.041 260.194 cv
159.397 261.61 160.067 262.317 161.049 262.317 cv
161.869 262.317 162.433 261.869 162.739 260.972 cv
cp
164.011 253.139 mo
164.574 254.227 164.856 255.477 164.856 256.888 cv
164.856 257.998 164.684 259.044 164.338 260.025 cv
163.685 261.872 162.556 262.795 160.949 262.795 cv
159.85 262.795 158.946 262.296 158.237 261.297 cv
157.479 260.231 157.1 258.784 157.1 256.954 cv
157.1 255.516 157.354 254.277 157.861 253.239 cv
158.547 251.828 159.602 251.122 161.024 251.122 cv
162.307 251.122 163.303 251.795 164.011 253.139 cv
cp
f
228.697 251.452 mo
228.7 251.466 228.701 251.498 228.701 251.548 cv
228.701 261.622 li
228.701 262.052 228.816 262.325 229.046 262.442 cv
229.275 262.56 229.705 262.629 230.333 262.651 cv
230.333 262.886 li
225.605 262.886 li
225.605 262.635 li
226.28 262.602 226.721 262.509 226.928 262.358 cv
227.134 262.208 227.237 261.882 227.237 261.38 cv
227.237 253.632 li
227.237 253.364 227.203 253.16 227.137 253.021 cv
227.069 252.882 226.925 252.812 226.701 252.812 cv
226.557 252.812 226.368 252.853 226.137 252.933 cv
225.905 253.014 225.689 253.099 225.488 253.188 cv
225.488 252.954 li
228.559 251.39 li
228.659 251.39 li
228.682 251.417 228.694 251.438 228.697 251.452 cv
cp
f
237.947 261.222 mo
238.254 260.324 238.407 259.025 238.407 257.325 cv
238.407 255.971 238.315 254.89 238.132 254.082 cv
237.785 252.577 237.139 251.824 236.19 251.824 cv
235.242 251.824 234.592 252.599 234.24 254.148 cv
234.057 254.974 233.965 256.061 233.965 257.409 cv
233.965 258.675 234.06 259.687 234.249 260.444 cv
234.605 261.86 235.275 262.567 236.257 262.567 cv
237.077 262.567 237.641 262.119 237.947 261.222 cv
cp
239.219 253.389 mo
239.782 254.477 240.064 255.727 240.064 257.138 cv
240.064 258.248 239.892 259.294 239.546 260.275 cv
238.893 262.122 237.764 263.045 236.157 263.045 cv
235.058 263.045 234.154 262.546 233.445 261.547 cv
232.688 260.481 232.308 259.034 232.308 257.204 cv
232.308 255.766 232.562 254.527 233.069 253.489 cv
233.755 252.078 234.81 251.372 236.232 251.372 cv
237.515 251.372 238.511 252.045 239.219 253.389 cv
cp
f
243.26 261.895 mo
243.776 262.254 244.175 262.434 244.454 262.434 cv
245.097 262.434 245.657 262.15 246.138 261.585 cv
246.618 261.019 246.858 260.322 246.858 259.497 cv
246.858 258.053 246.088 257.012 244.546 256.376 cv
243.691 256.024 242.896 255.849 242.158 255.849 cv
242.035 255.849 241.958 255.845 241.928 255.836 cv
241.897 255.828 241.859 255.799 241.814 255.749 cv
241.826 255.704 241.836 255.666 241.844 255.636 cv
241.853 255.605 241.862 255.576 241.873 255.548 cv
243.698 251.548 li
247.286 251.548 li
247.464 251.548 247.603 251.518 247.7 251.456 cv
247.797 251.395 247.924 251.28 248.08 251.113 cv
248.214 251.23 li
247.569 252.778 li
247.548 252.828 247.486 252.86 247.386 252.874 cv
247.285 252.889 247.176 252.896 247.059 252.896 cv
243.816 252.896 li
243.104 254.359 li
244.021 254.516 244.69 254.664 245.115 254.803 cv
245.813 255.037 246.396 255.383 246.865 255.841 cv
247.268 256.236 247.572 256.682 247.778 257.175 cv
247.985 257.669 248.089 258.191 248.089 258.744 cv
248.089 259.977 247.648 261.006 246.77 261.831 cv
245.89 262.657 244.776 263.069 243.431 263.069 cv
242.884 263.069 242.442 263.017 242.107 262.911 cv
241.549 262.738 241.27 262.429 241.27 261.982 cv
241.27 261.814 241.329 261.668 241.449 261.543 cv
241.569 261.417 241.756 261.354 242.007 261.354 cv
242.325 261.354 242.743 261.534 243.26 261.895 cv
cp
f
255.084 261.222 mo
255.391 260.324 255.544 259.025 255.544 257.325 cv
255.544 255.971 255.452 254.89 255.269 254.082 cv
254.922 252.577 254.275 251.824 253.327 251.824 cv
252.379 251.824 251.729 252.599 251.377 254.148 cv
251.193 254.974 251.102 256.061 251.102 257.409 cv
251.102 258.675 251.196 259.687 251.386 260.444 cv
251.742 261.86 252.412 262.567 253.394 262.567 cv
254.214 262.567 254.777 262.119 255.084 261.222 cv
cp
256.355 253.389 mo
256.919 254.477 257.201 255.727 257.201 257.138 cv
257.201 258.248 257.028 259.294 256.683 260.275 cv
256.029 262.122 254.9 263.045 253.294 263.045 cv
252.194 263.045 251.291 262.546 250.582 261.547 cv
249.824 260.481 249.444 259.034 249.444 257.204 cv
249.444 255.766 249.698 254.527 250.206 253.489 cv
250.892 252.078 251.946 251.372 253.369 251.372 cv
254.651 251.372 255.647 252.045 256.355 253.389 cv
cp
f
.458984 245.015 mo
.458984 .458984 li
286.691 .458984 li
286.691 245.015 li
.458984 245.015 li
.458984 245.015 li
cp
286.691 245.015 mo
286.691 .458984 li
.458984 245.015 mo
.458984 .458984 li
@
87.876 282.25 mo
87.876 281.656 li
88.5264 281.681 89.1494 281.693 89.7432 281.693 cv
90.3438 281.693 90.9199 281.681 91.4707 281.656 cv
92.0166 282.894 92.5146 283.979 92.9678 284.913 cv
96.4893 292.16 li
99.6592 285.51 li
100.528 283.706 101.107 282.422 101.399 281.656 cv
102.056 281.681 102.61 281.693 103.063 281.693 cv
103.477 281.693 104.148 281.681 105.078 281.656 cv
105.078 282.25 li
104.341 282.263 103.894 282.295 103.735 282.348 cv
103.578 282.4 103.468 282.473 103.406 282.565 cv
103.325 282.689 103.279 282.989 103.267 283.466 cv
103.261 283.59 103.245 284.469 103.22 286.102 cv
103.22 290.398 li
103.22 291.24 103.235 292.061 103.267 292.858 cv
103.285 293.446 103.33 293.796 103.4 293.907 cv
103.472 294.019 103.585 294.101 103.742 294.153 cv
103.899 294.205 104.345 294.238 105.078 294.25 cv
105.078 294.845 li
103.827 294.789 102.944 294.761 102.431 294.761 cv
102.016 294.761 101.1 294.789 99.6816 294.845 cv
99.6816 294.25 li
100.418 294.238 100.867 294.205 101.028 294.153 cv
101.189 294.101 101.298 294.027 101.354 293.935 cv
101.434 293.812 101.48 293.511 101.492 293.034 cv
101.499 292.904 101.515 292.026 101.539 290.398 cv
101.539 283.586 li
98.335 290.287 li
97.833 291.333 97.4395 292.175 97.1553 292.813 cv
96.9512 293.276 96.6406 294.013 96.2266 295.021 cv
95.8643 295.021 li
95.7832 294.786 95.709 294.598 95.6416 294.455 cv
95.0098 293.109 li
90.5703 283.893 li
90.5703 290.398 li
90.5703 291.24 90.582 292.06 90.6074 292.858 cv
90.626 293.446 90.6709 293.796 90.7422 293.907 cv
90.8125 294.019 90.9277 294.101 91.085 294.153 cv
91.2432 294.205 91.6904 294.238 92.4277 294.25 cv
92.4277 294.845 li
90.1895 294.779 li
87.876 294.845 li
87.876 294.25 li
88.6035 294.238 89.0469 294.205 89.207 294.153 cv
89.3672 294.101 89.4775 294.027 89.54 293.935 cv
89.6133 293.812 89.6602 293.511 89.6787 293.034 cv
89.6855 292.904 89.7012 292.026 89.7246 290.398 cv
89.7246 286.102 li
89.7246 285.261 89.7158 284.438 89.6973 283.633 cv
89.6787 283.045 89.6328 282.697 89.5625 282.589 cv
89.4912 282.48 89.376 282.4 89.2188 282.348 cv
89.0605 282.295 88.6133 282.263 87.876 282.25 cv
cp
f
106.892 296.004 mo
106.94 295.76 li
107.383 295.598 107.699 295.455 107.889 295.332 cv
108.069 294.451 108.171 293.972 108.192 293.892 cv
108.239 293.723 108.321 293.565 108.438 293.421 cv
108.556 293.276 108.792 293.065 109.147 292.787 cv
109.504 292.51 109.777 292.327 109.969 292.24 cv
110.099 292.183 110.246 292.154 110.412 292.154 cv
110.636 292.154 110.871 292.202 111.116 292.3 cv
110.972 292.689 110.869 292.989 110.808 293.199 cv
110.688 293.237 li
110.599 293.11 110.483 293.012 110.345 292.939 cv
110.206 292.867 110.061 292.831 109.909 292.831 cv
109.739 292.831 109.596 292.868 109.479 292.944 cv
109.361 293.021 109.267 293.125 109.194 293.259 cv
109.122 293.392 109.044 293.659 108.961 294.06 cv
108.842 294.612 108.75 295.062 108.685 295.408 cv
109.144 295.397 109.408 295.389 109.48 295.381 cv
109.604 295.367 109.73 295.34 109.86 295.3 cv
109.909 295.365 li
109.825 295.6 109.763 295.813 109.719 296.004 cv
109.517 295.993 109.337 295.987 109.178 295.987 cv
109.029 295.987 108.831 295.991 108.583 295.998 cv
107.94 299.02 li
107.705 300.096 107.503 300.844 107.333 301.265 cv
107.163 301.685 106.938 302.056 106.658 302.377 cv
106.379 302.698 106.085 302.938 105.778 303.098 cv
105.587 303.198 105.398 303.249 105.214 303.249 cv
105.099 303.249 104.971 303.215 104.829 303.146 cv
104.952 302.788 105.037 302.494 105.084 302.264 cv
105.22 302.23 li
105.379 302.433 105.565 302.534 105.778 302.534 cv
105.905 302.534 106.024 302.504 106.137 302.442 cv
106.249 302.381 106.359 302.272 106.468 302.117 cv
106.576 301.962 106.683 301.682 106.788 301.277 cv
106.969 300.594 107.147 299.734 107.325 298.697 cv
107.776 295.998 li
107.564 295.995 107.424 295.993 107.352 295.993 cv
107.226 295.993 107.072 295.997 106.892 296.004 cv
cp
f
110.885 300.092 mo
110.885 300.529 110.913 300.958 110.971 301.379 cv
111.029 301.8 111.12 302.142 111.245 302.402 cv
111.33 302.579 111.455 302.724 111.619 302.836 cv
111.783 302.948 111.968 303.004 112.171 303.004 cv
112.518 303.004 112.784 302.86 112.97 302.571 cv
113.237 302.158 113.371 301.336 113.371 300.105 cv
113.371 299.576 113.343 299.102 113.287 298.681 cv
113.23 298.26 113.137 297.914 113.006 297.644 cv
112.921 297.471 112.802 297.329 112.648 297.218 cv
112.494 297.106 112.31 297.052 112.094 297.052 cv
111.856 297.052 111.645 297.127 111.457 297.279 cv
111.271 297.432 111.128 297.707 111.03 298.106 cv
110.934 298.506 110.885 299.168 110.885 300.092 cv
cp
110.105 300.354 mo
110.105 299.488 110.168 298.82 110.292 298.35 cv
110.417 297.879 110.644 297.49 110.971 297.184 cv
111.299 296.877 111.715 296.724 112.219 296.724 cv
112.474 296.724 112.71 296.767 112.928 296.854 cv
113.145 296.939 113.322 297.049 113.46 297.182 cv
113.599 297.313 113.715 297.476 113.811 297.669 cv
113.906 297.861 113.974 298.055 114.014 298.249 cv
114.104 298.692 114.15 299.176 114.15 299.697 cv
114.15 300.378 114.097 300.961 113.991 301.446 cv
113.93 301.723 113.844 301.976 113.731 302.205 cv
113.619 302.435 113.485 302.629 113.33 302.79 cv
113.176 302.951 112.988 303.079 112.771 303.175 cv
112.552 303.271 112.306 303.318 112.032 303.318 cv
111.701 303.318 111.417 303.249 111.181 303.109 cv
110.943 302.97 110.756 302.79 110.616 302.571 cv
110.422 302.259 110.288 301.901 110.215 301.499 cv
110.142 301.097 110.105 300.715 110.105 300.354 cv
cp
f
118.474 302.02 mo
117.705 301.37 117.113 300.598 116.698 299.702 cv
116.282 298.807 116.075 297.829 116.075 296.768 cv
116.075 296.146 116.143 295.581 116.278 295.072 cv
116.413 294.563 116.595 294.103 116.822 293.689 cv
117.05 293.275 117.318 292.881 117.629 292.506 cv
117.939 292.131 118.237 291.84 118.522 291.634 cv
118.739 291.91 li
118.162 292.535 117.731 293.237 117.448 294.02 cv
117.164 294.801 117.022 295.704 117.022 296.729 cv
117.022 297.842 117.155 298.774 117.421 299.529 cv
117.687 300.283 118.126 301.034 118.739 301.781 cv
118.474 302.02 li
cp
f
121.441 294.77 mo
121.441 295.076 121.494 295.382 121.601 295.688 cv
121.707 295.992 121.876 296.227 122.107 296.391 cv
122.338 296.556 122.607 296.638 122.914 296.638 cv
123.336 296.638 123.678 296.495 123.94 296.21 cv
124.202 295.925 124.333 295.495 124.333 294.921 cv
124.333 294.354 124.209 293.876 123.962 293.486 cv
123.714 293.096 123.354 292.901 122.882 292.901 cv
122.47 292.901 122.127 293.058 121.853 293.369 cv
121.578 293.682 121.441 294.148 121.441 294.77 cv
cp
120.942 300.179 mo
120.942 300.076 li
121.593 299.921 122.166 299.674 122.662 299.337 cv
123.158 298.999 123.553 298.542 123.845 297.964 cv
124.076 297.509 124.221 296.979 124.278 296.372 cv
124.116 296.484 123.925 296.638 123.704 296.832 cv
123.574 296.951 123.476 297.031 123.406 297.07 cv
123.302 297.14 123.183 297.193 123.049 297.233 cv
122.876 297.283 122.688 297.309 122.486 297.309 cv
121.908 297.309 121.434 297.114 121.062 296.724 cv
120.69 296.334 120.504 295.8 120.504 295.121 cv
120.504 294.349 120.737 293.724 121.203 293.245 cv
121.668 292.767 122.255 292.527 122.963 292.527 cv
123.414 292.527 123.818 292.639 124.176 292.86 cv
124.533 293.082 124.813 293.406 125.018 293.832 cv
125.222 294.259 125.323 294.811 125.323 295.489 cv
125.323 296.327 125.17 297.06 124.863 297.688 cv
124.491 298.453 123.94 299.083 123.212 299.578 cv
122.602 299.993 121.965 300.251 121.3 300.352 cv
120.942 300.179 li
cp
f
128.849 295.779 mo
129.217 295.545 129.474 295.313 129.62 295.082 cv
129.767 294.851 129.84 294.578 129.84 294.265 cv
129.84 294.005 129.786 293.77 129.68 293.559 cv
129.573 293.348 129.418 293.188 129.214 293.08 cv
129.01 292.972 128.778 292.917 128.519 292.917 cv
128.114 292.917 127.792 293.03 127.552 293.256 cv
127.312 293.481 127.191 293.775 127.191 294.141 cv
127.191 294.497 127.298 294.777 127.511 294.979 cv
127.725 295.181 128.17 295.448 128.849 295.779 cv
cp
128.025 296.494 mo
127.614 296.746 127.321 297.012 127.148 297.289 cv
126.975 297.567 126.889 297.902 126.889 298.296 cv
126.889 298.627 126.951 298.92 127.078 299.172 cv
127.204 299.425 127.391 299.618 127.639 299.751 cv
127.886 299.885 128.152 299.951 128.438 299.951 cv
128.733 299.951 129.008 299.883 129.26 299.746 cv
129.513 299.608 129.705 299.415 129.837 299.164 cv
129.969 298.913 130.034 298.633 130.034 298.322 cv
130.034 298.056 129.979 297.83 129.866 297.646 cv
129.755 297.462 129.563 297.287 129.29 297.121 cv
129.018 296.956 128.596 296.746 128.025 296.494 cv
cp
127.587 296.299 mo
127.143 296.064 126.828 295.805 126.642 295.521 cv
126.456 295.238 126.363 294.914 126.363 294.549 cv
126.363 293.989 126.57 293.515 126.986 293.126 cv
127.401 292.738 127.948 292.544 128.627 292.544 cv
129.017 292.544 129.364 292.61 129.669 292.744 cv
129.974 292.878 130.204 293.067 130.359 293.313 cv
130.515 293.559 130.592 293.826 130.592 294.115 cv
130.592 294.336 130.544 294.553 130.449 294.766 cv
130.354 294.979 130.198 295.187 129.985 295.39 cv
129.823 295.541 129.583 295.716 129.266 295.915 cv
129.266 295.964 li
129.721 296.18 130.031 296.35 130.197 296.473 cv
130.421 296.635 130.594 296.833 130.717 297.067 cv
130.84 297.302 130.901 297.572 130.901 297.879 cv
130.901 298.283 130.786 298.683 130.557 299.077 cv
130.328 299.473 130.007 299.779 129.593 299.998 cv
129.18 300.216 128.738 300.325 128.27 300.325 cv
127.861 300.325 127.488 300.241 127.151 300.073 cv
126.813 299.905 126.557 299.673 126.38 299.375 cv
126.202 299.078 126.114 298.747 126.114 298.382 cv
126.114 297.946 126.244 297.551 126.504 297.197 cv
126.764 296.844 127.125 296.561 127.587 296.348 cv
127.587 296.299 li
cp
f
132.573 296.516 mo
132.573 297.036 132.607 297.546 132.676 298.047 cv
132.745 298.547 132.854 298.952 133.002 299.263 cv
133.103 299.473 133.251 299.645 133.446 299.778 cv
133.642 299.911 133.86 299.979 134.103 299.979 cv
134.516 299.979 134.832 299.807 135.053 299.464 cv
135.37 298.973 135.529 297.995 135.529 296.532 cv
135.529 295.903 135.496 295.339 135.43 294.839 cv
135.362 294.338 135.251 293.927 135.096 293.605 cv
134.994 293.399 134.853 293.23 134.67 293.099 cv
134.487 292.967 134.268 292.901 134.011 292.901 cv
133.729 292.901 133.477 292.991 133.254 293.172 cv
133.031 293.353 132.862 293.681 132.747 294.155 cv
132.631 294.631 132.573 295.417 132.573 296.516 cv
cp
131.647 296.827 mo
131.647 295.798 131.722 295.004 131.869 294.444 cv
132.018 293.885 132.286 293.423 132.676 293.059 cv
133.066 292.693 133.561 292.512 134.16 292.512 cv
134.463 292.512 134.743 292.563 135.002 292.666 cv
135.26 292.769 135.471 292.898 135.636 293.056 cv
135.8 293.213 135.938 293.405 136.053 293.635 cv
136.166 293.864 136.246 294.095 136.293 294.325 cv
136.401 294.853 136.456 295.427 136.456 296.047 cv
136.456 296.855 136.393 297.549 136.267 298.127 cv
136.194 298.455 136.091 298.756 135.957 299.028 cv
135.824 299.301 135.665 299.532 135.481 299.724 cv
135.297 299.915 135.075 300.067 134.815 300.182 cv
134.555 300.295 134.263 300.352 133.938 300.352 cv
133.544 300.352 133.207 300.269 132.925 300.103 cv
132.644 299.937 132.42 299.724 132.254 299.464 cv
132.022 299.092 131.864 298.667 131.777 298.188 cv
131.69 297.711 131.647 297.257 131.647 296.827 cv
cp
f
137.452 302.02 mo
137.23 301.743 li
137.808 301.119 138.238 300.415 138.521 299.632 cv
138.805 298.849 138.946 297.944 138.946 296.919 cv
138.946 295.807 138.813 294.874 138.549 294.119 cv
138.283 293.365 137.844 292.614 137.23 291.867 cv
137.495 291.634 li
138.265 292.284 138.856 293.057 139.271 293.951 cv
139.687 294.847 139.895 295.825 139.895 296.887 cv
139.895 297.504 139.826 298.067 139.691 298.576 cv
139.556 299.085 139.374 299.547 139.146 299.962 cv
138.92 300.377 138.65 300.771 138.34 301.146 cv
138.029 301.519 137.733 301.811 137.452 302.02 cv
cp
f
150.548 298.003 mo
149.229 296.888 148.214 295.563 147.501 294.027 cv
146.787 292.492 146.432 290.813 146.432 288.993 cv
146.432 287.929 146.548 286.959 146.779 286.086 cv
147.013 285.213 147.324 284.422 147.715 283.713 cv
148.105 283.004 148.566 282.328 149.099 281.684 cv
149.632 281.04 150.143 280.541 150.632 280.188 cv
151.003 280.662 li
150.013 281.733 149.274 282.939 148.788 284.279 cv
148.302 285.62 148.059 287.17 148.059 288.929 cv
148.059 290.836 148.286 292.437 148.741 293.73 cv
149.196 295.024 149.95 296.313 151.003 297.594 cv
150.548 298.003 li
cp
f
151.996 282.25 mo
151.996 281.656 li
152.646 281.681 153.27 281.693 153.863 281.693 cv
154.464 281.693 155.04 281.681 155.591 281.656 cv
156.137 282.894 156.635 283.979 157.088 284.913 cv
160.609 292.16 li
163.779 285.51 li
164.648 283.706 165.228 282.422 165.52 281.656 cv
166.176 281.681 166.73 281.693 167.183 281.693 cv
167.597 281.693 168.269 281.681 169.198 281.656 cv
169.198 282.25 li
168.461 282.263 168.014 282.295 167.855 282.348 cv
167.698 282.4 167.588 282.473 167.526 282.565 cv
167.445 282.689 167.399 282.989 167.387 283.466 cv
167.381 283.59 167.365 284.469 167.34 286.102 cv
167.34 290.398 li
167.34 291.24 167.355 292.061 167.387 292.858 cv
167.405 293.446 167.45 293.796 167.521 293.907 cv
167.592 294.019 167.705 294.101 167.862 294.153 cv
168.02 294.205 168.465 294.238 169.198 294.25 cv
169.198 294.845 li
167.947 294.789 167.064 294.761 166.551 294.761 cv
166.136 294.761 165.22 294.789 163.802 294.845 cv
163.802 294.25 li
164.538 294.238 164.987 294.205 165.148 294.153 cv
165.31 294.101 165.418 294.027 165.474 293.935 cv
165.554 293.812 165.601 293.511 165.612 293.034 cv
165.619 292.904 165.635 292.026 165.659 290.398 cv
165.659 283.586 li
162.455 290.287 li
161.953 291.333 161.56 292.175 161.275 292.813 cv
161.071 293.276 160.761 294.013 160.347 295.021 cv
159.984 295.021 li
159.903 294.786 159.829 294.598 159.762 294.455 cv
159.13 293.109 li
154.69 283.893 li
154.69 290.398 li
154.69 291.24 154.702 292.06 154.728 292.858 cv
154.746 293.446 154.791 293.796 154.862 293.907 cv
154.933 294.019 155.048 294.101 155.205 294.153 cv
155.363 294.205 155.811 294.238 156.548 294.25 cv
156.548 294.845 li
154.31 294.779 li
151.996 294.845 li
151.996 294.25 li
152.724 294.238 153.167 294.205 153.327 294.153 cv
153.487 294.101 153.598 294.027 153.66 293.935 cv
153.733 293.812 153.78 293.511 153.799 293.034 cv
153.806 292.904 153.821 292.026 153.845 290.398 cv
153.845 286.102 li
153.845 285.261 153.836 284.438 153.817 283.633 cv
153.799 283.045 153.753 282.697 153.683 282.589 cv
153.611 282.48 153.496 282.4 153.339 282.348 cv
153.181 282.295 152.733 282.263 151.996 282.25 cv
cp
f
171.891 289.606 mo
172.064 289.625 172.393 289.644 172.875 289.662 cv
173.798 289.693 174.433 289.708 174.779 289.708 cv
175.603 289.708 176.145 289.693 176.404 289.662 cv
176.411 289.514 176.414 289.399 176.414 289.318 cv
176.414 288.34 176.216 287.622 175.819 287.164 cv
175.423 286.705 174.894 286.477 174.231 286.477 cv
173.531 286.477 172.968 286.727 172.541 287.229 cv
172.113 287.73 171.896 288.522 171.891 289.606 cv
cp
177.845 293.402 mo
177.547 294.071 li
177.12 294.339 176.808 294.516 176.609 294.603 cv
176.318 294.732 175.985 294.843 175.61 294.933 cv
175.236 295.022 174.841 295.067 174.427 295.067 cv
173.609 295.067 172.869 294.897 172.207 294.557 cv
171.544 294.217 171.028 293.707 170.66 293.029 cv
170.292 292.351 170.107 291.557 170.107 290.646 cv
170.107 289.935 170.205 289.292 170.4 288.72 cv
170.595 288.146 170.816 287.724 171.064 287.451 cv
171.244 287.253 171.522 287.025 171.9 286.769 cv
172.277 286.512 172.652 286.31 173.023 286.16 cv
173.513 285.956 174.042 285.854 174.612 285.854 cv
175.306 285.854 175.933 286.012 176.493 286.328 cv
177.054 286.644 177.464 287.074 177.724 287.619 cv
177.983 288.164 178.113 288.779 178.113 289.467 cv
178.113 289.641 178.099 289.851 178.067 290.099 cv
177.622 290.186 177.224 290.241 176.871 290.266 cv
176.203 290.315 175.535 290.34 174.868 290.34 cv
171.891 290.34 li
171.903 291.228 172.057 291.946 172.351 292.495 cv
172.645 293.045 173.05 293.45 173.567 293.711 cv
174.084 293.972 174.621 294.102 175.179 294.102 cv
175.557 294.102 175.933 294.041 176.308 293.918 cv
176.682 293.796 177.145 293.571 177.695 293.245 cv
177.845 293.402 li
cp
f
185.136 294.938 mo
184.95 294.399 184.563 293.359 183.976 291.819 cv
180.817 284.014 li
180.483 283.185 180.275 282.705 180.195 282.575 cv
180.14 282.495 180.062 282.436 179.963 282.398 cv
179.826 282.337 179.486 282.287 178.941 282.25 cv
178.941 281.656 li
180.062 281.699 180.889 281.721 181.421 281.721 cv
181.923 281.721 182.773 281.699 183.976 281.656 cv
183.976 282.25 li
183.22 282.263 182.781 282.279 182.661 282.298 cv
182.54 282.316 182.457 282.354 182.41 282.407 cv
182.363 282.461 182.341 282.522 182.341 282.592 cv
182.341 282.662 182.384 282.826 182.471 283.086 cv
182.736 283.928 182.969 284.605 183.167 285.118 cv
186.075 292.455 li
188.499 286.371 li
188.852 285.499 189.188 284.549 189.511 283.521 cv
189.647 283.083 189.715 282.811 189.715 282.705 cv
189.715 282.557 189.635 282.458 189.474 282.408 cv
189.35 282.365 188.873 282.313 188.044 282.25 cv
188.044 281.656 li
188.979 281.699 189.682 281.721 190.152 281.721 cv
190.635 281.721 191.3 281.699 192.148 281.656 cv
192.148 282.25 li
191.678 282.269 191.396 282.3 191.304 282.343 cv
191.211 282.387 191.124 282.473 191.043 282.603 cv
190.987 282.695 190.759 283.197 190.356 284.106 cv
187.458 291.234 li
186.743 293.063 li
186.595 293.428 186.474 293.743 186.381 294.01 cv
186.288 294.275 186.186 294.585 186.074 294.938 cv
185.136 294.938 li
cp
f
193.504 298.003 mo
193.123 297.529 li
194.114 296.458 194.853 295.25 195.339 293.906 cv
195.824 292.563 196.067 291.012 196.067 289.253 cv
196.067 287.347 195.84 285.746 195.385 284.451 cv
194.93 283.157 194.176 281.869 193.123 280.588 cv
193.578 280.188 li
194.897 281.303 195.913 282.628 196.625 284.163 cv
197.337 285.699 197.693 287.377 197.693 289.197 cv
197.693 290.257 197.577 291.223 197.345 292.096 cv
197.112 292.969 196.802 293.761 196.411 294.474 cv
196.021 295.186 195.56 295.861 195.027 296.503 cv
194.495 297.144 193.987 297.644 193.504 298.003 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
